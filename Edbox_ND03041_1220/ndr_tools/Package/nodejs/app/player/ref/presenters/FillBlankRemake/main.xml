<?xml version='1.0' encoding='UTF-8' ?>
<addon id='FillBlankRemake'>
<properties>



</properties>

<dependencies>

</dependencies>

<css>

<![CDATA[.exam_skin_wood .fillblank{position:relative;width:100%;height:100%}.exam_skin_wood .fillblank .com_layout_main{left:0;right:2.5em;top:2.83333em;bottom:0}.exam_skin_wood .fillblank .com_m_mainboard_1{position:relative}.exam_skin_wood .fillblank .com_m_sideboard_1{position:relative;float:left;width:32.91667em;height:100%;padding:4.20833em 0 1.45833em;margin-left:1.45833em;margin-right:3.20833em}.exam_skin_wood .fillblank .com_m_sideboard_1 .com_m_sidehead{position:absolute;left:0;top:1.45833em;right:0;height:2.75em;background:url(resources/wood/images/bg_sidetit1.png) repeat-x;background-size:auto 100%;border-top-left-radius:.75em;border-top-right-radius:.75em}.exam_skin_wood .fillblank .com_m_sideboard_1 .com_m_sidecon{height:100%;border-bottom:.375em solid transparent;background-image:url(resources/wood/images/decl_sidecon.png),url(resources/wood/images/decr_sidecon.png),url(resources/wood/images/decm_sidecon.png),url(resources/wood/images/bg_sidecon1.png);background-repeat:no-repeat,no-repeat,repeat-x,repeat;background-position:left bottom,right bottom,center bottom,left top;background-size:.875em auto,.875em auto,.375em auto,2.70833em auto;background-origin:border-box,border-box,border-box,content-box;box-shadow:.0625em .10825em .79167em 0 rgba(75,40,0,.75);border-bottom-left-radius:.75em;border-bottom-right-radius:.75em;overflow:auto}.exam_skin_wood .fillblank .com_m_mainboard_1{height:100%;overflow:hidden}.exam_skin_wood .fillblank .fillblank_left{box-shadow:none;padding:2.08333em .41667em 2.08333em 2.08333em}.exam_skin_wood .fillblank .fillblank_left .fillblank_lmain{padding-right:1.66667em;max-height:100%;overflow:auto;color:#2e2e2e;font-size:1.66667em;line-height:1.8;text-align:justify;word-wrap:break-word;word-break:break-word}.exam_skin_wood .fillblank .fillblank_left .fillblank_lmain .word_empty{display:inline-block;width:4.16667em;height:1.5em;vertical-align:middle;background:rgba(66,66,66,.5);color:#fff;line-height:1.16667em;text-align:center;text-indent:0;margin:0 .125em;border:.125em solid transparent}.exam_skin_wood .fillblank .fillblank_left .fillblank_lmain .word_full{display:inline-block;color:#fff;background:rgba(66,66,66,.5);line-height:1.29167em;text-indent:0;margin:0 .125em;border:.125em solid transparent;text-align:left}.exam_skin_wood .fillblank .fillblank_left .fillblank_lmain .on{background:#fff;border-color:#2c8bd2;color:#2c8bd2}.exam_skin_wood .fillblank .fillblank_left .fillblank_lmain .word_right{color:#41a22b}.exam_skin_wood .fillblank .fillblank_left .fillblank_lmain .word_wrong{color:#ee3f08}.exam_skin_wood .fillblank .fillblank_left .word_full_replace{display:none;position:fixed;color:#fff;border:2px solid transparent;background:rgba(66,66,66,.5);line-height:1.29167em;text-align:center;text-indent:0;margin:0 .125em;font-size:1.66667em}.exam_skin_wood .fillblank .fillblank_left .word_full_replace.move{display:inline-block}.exam_skin_wood .fillblank .fillblank_left .blank{display:inline}.exam_skin_wood .fillblank .fillblank_right{display:-webkit-box;display:flex;flex-flow:column;padding:1.54167em 0 1.45833em}.exam_skin_wood .fillblank .fillblank_right.fillblank_result .fillblank_rmain{margin-bottom:0}.exam_skin_wood .fillblank .fillblank_right .fillblank_rtit{color:#333;margin-top:.66667em;font-size:1.5em;line-height:1.5}.exam_skin_wood .fillblank .fillblank_right .fillblank_rtit .wrong_num{font-style:normal;padding:0 .41667em;color:#ee3f08}.exam_skin_wood .fillblank .fillblank_right .fillblank_rmain{padding-left:0;overflow-y:auto;padding-top:.75em;padding-bottom:.16667em;margin-bottom:3.54167em}.exam_skin_wood .fillblank .fillblank_right .word_take,.exam_skin_wood .fillblank .fillblank_right .word_take_replace{display:inline-block;position:relative;margin:0 1.25em 1.25em 0;padding:2px;background:url(resources/wood/images/word_take_bg.png) center center no-repeat;background-size:100% 100%;border-radius:.75em}.exam_skin_wood .fillblank .fillblank_right .word_take:after,.exam_skin_wood .fillblank .fillblank_right .word_take_replace:after{content:"";display:block;z-index:-1;position:absolute;left:0;right:-.5em;top:2.25em;bottom:-1.25em;background:url(resources/wood/images/word_take.png) center center no-repeat;background-size:100% 50%}.exam_skin_wood .fillblank .fillblank_right .word_take .word_take_border,.exam_skin_wood .fillblank .fillblank_right .word_take_replace .word_take_border{display:block;padding:.33333em .83333em;background:url(resources/wood/images/word_take_bg.png) center center no-repeat;background-size:100% 100%;border:1px solid #8f6831;border-radius:.66667em;line-height:1.3}.exam_skin_wood .fillblank .fillblank_right .word_take .word_take_text,.exam_skin_wood .fillblank .fillblank_right .word_take_replace .word_take_text{font-style:normal;font-size:1.66667em;color:#2e2e2e}.exam_skin_wood .fillblank .fillblank_right .word_take_replace{z-index:999;display:none;position:fixed;margin:0 1.25em 0 0}.exam_skin_wood .fillblank .fillblank_right .word_take_replace.move{display:inline-block}.exam_skin_wood .fillblank .fillblank_right .img{margin:80px auto 0;width:452px;height:265px;background:url(resources/wood/images/tiankong-zan.png) no-repeat;background-size:100% auto}.exam_skin_wood .fillblank .fillblank_right .img_container{height:100%;text-align:center}.exam_skin_wood .fillblank .fillblank_right .img_container:after{content:"";display:inline-block;width:0;height:100%;vertical-align:middle}.exam_skin_wood .fillblank .fillblank_right .img_container img{max-width:98%;max-height:100%;vertical-align:middle}.exam_skin_wood .fillblank .fillblank_right .fillblank_rbottom{position:absolute;left:0;right:0;bottom:1.45833em;text-align:center}.exam_skin_wood .fillblank .com_btn_rectangle .com_btn_text{font-size:1.33333em}.exam_skin_wood .fillblank_interaction_statistics{color:green!important}.exam_skin_wood .fillblank_interaction_alone{padding:0 .2em;font-style:normal}.exam_skin_wood .fillblank_interaction_alone_select{background:#83ad50!important;color:#fff!important}.exam_skin_wood .fillblank_interaction_hidden{display:none!important}.exam_skin_wood .fillblank_lmain.show_number .fillblank_interaction_alone{display:inline}]]>

</css>


<view>

<![CDATA[<div class="com_layout_exam_content fillblank"><div class="com_layout_main_exam"><div class="com_layout_tit"><h2 class="tit" data-bind="text:title,css:{s_tit:title().length > 38}">标题</h2></div><div class="com_layout_main"><div class="com_m_sideboard_1"><div class="com_m_sidehead"></div><div class="com_m_sidecon fillblank_left"><div class="word_full_replace"><em></em><span class="word_content"></span></div><p class="fillblank_lmain scrollbar_style_gray" data-bind="html:article"></p></div></div><div class="com_m_mainboard_1 fillblank_right" data-bind="visible:showType() == ''"><h2 class="fillblank_rtit" data-bind="html:translations.fillblank_rtit"></h2><a href="javascript:void(0)" class="word_take_replace"><span class="word_take_border"><em class="word_take_text"></em></span></a><div class="fillblank_rmain scrollbar_style_default" data-bind="foreach:candidates"><a href="javascript:void(0)" class="word_take"><span class="word_take_border"><em class="word_take_text" data-bind="html:value"></em></span></a></div><div class="fillblank_rbottom"><a class="com_btn_rectangle" href="javascript:void(0);" data-bind="visible:resetBtnShow"><span class="com_btn_text" data-bind="html:translations.reset"></span></a></div></div><div class="com_m_mainboard_1 fillblank_right" data-bind="visible:showType() == 'correct'"><h2 class="fillblank_rtit" data-bind="html:translations.answer_correct"></h2><p class="img"></p></div><div class="com_m_mainboard_1 fillblank_right" data-bind="visible:showType() == 'wrong'"><h2 class="fillblank_rtit"><span data-bind="html:translations.answer_wrong_1"></span> <em data-bind="text:userWrongTotal" class="wrong_num"></em> <span data-bind="html:translations.answer_wrong_2"></span></h2><div class="fillblank_rmain scrollbar_style_default" data-bind="foreach:rightAnswers"><a href="javascript:void(0)" class="word_take"><span class="word_take_border"><em class="word_take_text" data-bind="html:correctAnswer"></em></span></a></div></div></div></div></div>]]>
</view>


<presenter>

<![CDATA[window["AddonFillBlankRemake_create"] =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 3);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

function Answer(param) {
    this.candidates = param.candidates.slice(0);
    this.blanks = param.blanks.slice(0);
    this.afterUpdate = param.afterUpdate || function () {};
    //答案列表
    this.answers = [];
    this.hasUserAnswer = false; //用于判断是否有用户作答数据
}
Answer.prototype = {
    //答案初始化
    init: function () {
        var me = this;

        me.hasUserAnswer = false;

        for (var i = 0, len = me.blanks.length, obj; i < len; i++) {
            obj = {
                num: me.blanks[i],
                correctAnswer: me._getCorrectAnswer(me.blanks[i]),
                userAnswer: ''
            };
            me.answers.push(obj);
        }
        return me.answers;
    },

    //答案更新
    update: function (num, value) {
        var me = this;
        if (me.answers.length <= 0) me.init();
        for (var i = 0, len = me.answers.length; i < len; i++) {
            if (me.answers[i].num == num) {
                me.answers[i].userAnswer = value;
                break;
            }
        }
        me.afterUpdate(me.answers);
        me.checkUserAnswer();
        return me.answers;
    },

    //检测是否存在用户作答数据
    checkUserAnswer: function () {
        var me = this,
            answers = me.answers;

        for (var i = 0, len = answers.length; i < len; i++) {
            if (answers[i].userAnswer !== '') {
                me.hasUserAnswer = true;
                break;
            } else {
                me.hasUserAnswer = false;
            }
        }

    },
    //答案验证
    verify: function () {
        var me = this,
            wrong = [],
            correct = [];
        for (var i = 0, len = me.answers.length; i < len; i++) {
            if (me.answers[i].correctAnswer != me.answers[i].userAnswer) {
                wrong.push(me.answers[i]);
            } else {
                correct.push(me.answers[i]);
            }
        }
        return {
            wrong: wrong,
            correct: correct
        };
    },

    //清空答案
    remove: function () {
        var me = this;
        me.answers = [];
    },

    //重置用户作答数据
    reset: function () {
        var me = this;
        me.remove();
        me.init();
    },

    //获取某框正确答案
    _getCorrectAnswer: function (num) {
        var me = this,
            value = null;
        for (var i = 0, len = me.candidates.length; i < len; i++) {
            if (me.candidates[i].num == num) {
                value = me.candidates[i].value;
                break;
            }
        }
        return value;
    }

};

module.exports = Answer;

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

var Interaction = __webpack_require__(2);

function FillBlankService(parent) {
    var self = this;
    this.parent = parent;
    this.status = {};
    this.interaction = new Interaction(parent.util.view, self);
}
FillBlankService.prototype = {
    getQuestionInfo: function () {
        var util = this.parent.util;

        return {
            id: util.model.question_id,
            type_code: 'fillblank',
            type_name: '选词填空',
            item: "fillblank",
            url: util.model.question_id,
            dispatchOnly: true
        }
    },
    showAnswer: function (answerType, specificAnswer) {
        var self = this.parent,
            util = self.util,
            originalCandidates = $.extend(true, [], util.originalData.candidates),
            candidates = originalCandidates.slice(0),
            specificAnswers = null, //学生作答的结果
            utilAnswers = util.answer.answers,
            $blanks = util.$view.find('.blank'),
            item,
            answer,
            userAnswer,
            $blank,
            itemNum,
            spi = 0;
        //显示特定的答案
        if (specificAnswer) {
            specificAnswers = specificAnswer.answer.user_response;
            //遍历学生作答的答案,此answers是按照空格顺序保存的
            for (var i = 0, len = specificAnswers.length; i < len; i++) {
                answer = specificAnswers[i];
                $blank = $blanks.eq(i);
                if (answer === '') {
                    $blank.removeClass('word_full').addClass('word_empty').find('.word_content').text('?');
                } else {
                    $blank.removeClass('word_empty').addClass('word_full').find('.word_content').text(answer);
                    //右侧选项的显示
                    for (var j = 0, jLen = originalCandidates.length; j < jLen; j++) {
                        if (originalCandidates[j].num === i) {
                            candidates.splice(j, 1);
                        }
                    }
                }

                //把util中的answer置为本次显示的answer
                utilAnswers[i].userAnswer = answer;
            }
        } else {

            //状态恢复用
            util.showAnswerInfo.hasShow = {
                hasShow: true,
                type: answerType
            };

            switch (answerType) {
                //显示学生作答的结果
                case 'user':
                    //遍历学生作答结果，显示出来
                    for (var i = 0, iLen = utilAnswers.length; i < iLen; i++) {
                        userAnswer = utilAnswers[i].userAnswer;
                        itemNum = utilAnswers[i].num;
                        $blank = $blanks.eq(i);

                        if (userAnswer === '') {
                            $blank.removeClass('word_full').addClass('word_empty').find('.word_content').text('?');
                        } else {
                            $blank.removeClass('word_empty').addClass('word_full').find('.word_content').text(userAnswer);
                            //右侧选项的显示
                            for (var j = 0, jLen = originalCandidates.length; j < jLen; j++) {
                                if (originalCandidates[j].num === itemNum) {
                                    candidates.splice(j, 1);
                                }
                            }
                        }
                    }

                    break;
                    //显示正确答案
                case 'correct':
                    //默认显示
                default:
                    //遍历answer,将correctAnswer复制给userAnswer

                    for (var i = 0, iLen = utilAnswers.length; i < iLen; i++) {
                        utilAnswers[i].userAnswer = utilAnswers[i].correctAnswer;
                    }

                    //遍历candidates，将正确答案都删除掉

                    for (var i = 0, iLen = originalCandidates.length; i < iLen; i++) {
                        item = originalCandidates[i];

                        if (item.num >= 0) {
                            candidates.splice(spi, 1);
                        } else {
                            spi++
                        }
                    }

                    //显示正确答案后不允许做题
                    this.lockQuestion();

            }
        }

        util.viewModel.candidates(candidates);

        this.showAnswerCheck(answerType, specificAnswer);
    },
    showAnswerCheck: function (answerType, specificAnswer) {
        var parent = this.parent,
            util = parent.util,
            answers = util.answer.answers,
            answer = null,
            $wordContent = null;

        //验证答案
        var userAnswers = util.answer.verify();
        //错误统计
        util.viewModel.userWrongTotal(userAnswers.wrong.length);
        //正确答案显示
        util.viewModel.rightAnswers(answers);
        //todo 修改成mvvm
        var $w = util.$leftView.find('.blank');
        for (var i = 0, len = answers.length; i < len; i++) {
            answer = answers[i];
            $wordContent = $w.eq(i).find('.word_content');
            if (answer.userAnswer == "") {
                $wordContent.text(parent.i18nModel["unfilled"]);
                $w.eq(i).removeClass('word_full fillblank_interaction_alone_select').addClass('word_empty');
            } else {
                $wordContent.text(answer.userAnswer);
                $w.eq(i).removeClass('word_empty fillblank_interaction_alone_select').addClass('word_full');
            }
            if (answer.correctAnswer == answer.userAnswer) {
                $w.eq(i).removeClass('word_empty word_full word_right word_wrong').addClass('word_right');
            } else {
                $w.eq(i).removeClass('word_empty word_full word_right word_wrong').addClass('word_wrong');
            }
        }

        //仅在这两种情况下显示右侧正误反馈
        if (answerType === 'user' || specificAnswer) {
            if (userAnswers.wrong.length <= 0) { //全对
                util.viewModel.showType('correct');
            } else { //有错误
                util.viewModel.showType('wrong');
            }
        }

    },
    getResult: function () {
        var parent = this.parent,
            util = parent.util,
            answers = util.answer.answers,
            answer = null,
            isAllBlank = true, //全部为空，未作答
            isAllDone = true, //所有空都能填了
            hasSubmitted = parent.util.hasSubmitted, //是否提交过
            answerState = 'COMPLETE';
        var data = {
            answer_result: true,
            correct_response: [],
            user_response: []
        };

        for (var i = 0, len = answers.length; i < len; i++) {
            answer = answers[i];
            //有一个用户作答不正确，整道题都不正确
            if (answer.correctAnswer !== answer.userAnswer) {
                data.answer_result = false;
            }

            //有用户答案不为空，则全空变量置为false
            if (answer.userAnswer !== '') {
                isAllBlank = false;
            }

            //只要有一个用户答案为空，则全做了的变量置为false
            if (answer.userAnswer === '') {
                isAllDone = false;
            }

            data.correct_response.push(answers[i].correctAnswer);
            data.user_response.push(answers[i].userAnswer);
        }

        if (isAllBlank && !isAllDone && !hasSubmitted) {
            answerState = 'NO_ANSWER'
        }

        if (isAllDone && !isAllBlank) {
            answerState = 'COMPLETE';
        }

        if (!isAllDone && !isAllBlank) {
            answerState = 'NO_COMPLETE';
        }

        parent.util.hasSubmitted = true;

        return {
            'questionId': util.model.question_id,
            'answerState': answerState,
            'answer': data
        };
    },
    resetQuestion: function () {
        this.parent._resetQuestion();
        this.interaction.exitInteraction();

        //退出统计的时候
        this.parent.util.dragParam.isInStat = false;
        this.parent.util.showAnswerInfo = null;
        //通知保存状态
        this.parent.$dispatchEvent($PresenterEvent['InteractionStateRecoverFilter'].PRESENTER_STATE_CHANGE, PresenterEventType.IC_PLAYER_EVENT);
    },
    getPresenterView: function () {
        return this.parent.util.view;
    },
    //不允许作答
    lockQuestion: function () {
        this.parent._toggleInteraction(false);

        //如果处于统计中,交互的事件 if(this.interaction && this.parent.util.dragParam.isInStat){    this.interaction.unbindEvent(); }
    },
    //允许作答
    unlockQuestion: function () {
        this.parent._toggleInteraction(true);
        //如果处于统计中，交互的事件 if(this.interaction && this.parent.util.dragParam.isInStat){    this.interaction.bindEvent(); }
    },
    finishQuestion: function () {
        this.parent._toggleInteraction(true);
    },
    //结束答题后提示
    showResultHint: function () {},
    setState: function (state) {

        var parent = this.parent,
            $leftView = parent.util.$leftView,
            $empty = null;

        parent.util.question_url.candidates = state.candidates;
        parent.util.answer.answers = state.answers;
        parent.util.isAllow = state.allowDrag;

        parent.util.viewModel.candidates(state.candidates);

        //恢复左侧题干
        $.each(state.answers, function (index, value) {
            if (value.userAnswer) {
                $empty = $leftView.find('.word_empty[data-num=' + value.num + ']');
                $empty.removeClass('word_empty on').addClass('word_full').find('.word_content').text(value.userAnswer);
            }
        });

        //如果以显示过答案
        if (state.showAnswerInfo.hasShow) {
            this.showAnswer(state.showAnswerInfo.type);
        }
    },
    _getState: function () {
        var util = this.parent.util,
            state = {
                allowDrag: util.isAllow,
                showAnswerInfo: util.showAnswerInfo,
                candidates: util.question_url.candidates,
                answers: util.answer.answers
            };

        return state;
    },
    getState: function () {
        this.parent.playerController.startFlow('css_classroom_status_changed', {
            presenterCode: this.parent.metaInfo.name
        });
        return this._getState();
    },
    getClassroomStatus: function () {
        return this._getState();
    },
    setClassroomStatus: function (status) {
        this.status = status;
        !!this.status && this.setState(status);
        this.parent.$dispatchEvent('css_recover_complete', PresenterEventType.IC_PLAYER_EVENT, {
            presenterCode: this.parent.metaInfo.name
        });
    },
    clearClassroomStatus: function () {
        this.setClassroomStatus(null);
    },
    getStatisticClass: function () {
        return 'B';
    },
    convertDataForStatistics: function (oriData) {
        var i,
            j,
            k,
            m;
        var value = oriData.value;
        var onlineNum = 0;
        var correctAnswer,
            item_key = [],
            percent = [],
            stuAnswerStat = [];
        var convertedData = {};

        convertedData["allrightStu"] = [];
        if (value.answers) {
            for (i = 0; i < value.answers.length; i++) {
                if ($.isArray(value.answers[i])) {
                    if (value.answers[i].length) {
                        for (j = 0; j < value.answers[i].length; j++) {
                            if (value.answers[i][j].answer && (typeof value.answers[i][j].answer) == "string") {
                                value.answers[i][j].answer = JSON.parse(value.answers[i][j].answer);

                                if (!correctAnswer) { //获取正确答案并设置编号
                                    correctAnswer = value.answers[i][j].answer.correct_response;
                                    if (correctAnswer && $.isArray(correctAnswer)) {
                                        for (k = 0; k < correctAnswer.length; k++) {
                                            item_key.push(k + 1);
                                            stuAnswerStat.push({
                                                "rightNum": 0,
                                                "right_userIds": [],
                                                "wrong_userIds": [],
                                                "unfinished_userIds": value.unfinishedUserIds,
                                                "ref_key": (k + 1)
                                            });
                                        }
                                    }
                                }

                                if (correctAnswer && value.answers[i][j].answer.user_response && correctAnswer.length == value.answers[i][j].answer.user_response.length) {
                                    var isRight = true;
                                    var isIn = false;
                                    for (k = 0; k < correctAnswer.length; k++) {
                                        if (correctAnswer[k] == value.answers[i][j].answer.user_response[k]) {
                                            isIn = true;
                                            stuAnswerStat[k]["right_userIds"] = stuAnswerStat[k]["right_userIds"].concat(value.answers[i][j].userIds);
                                        } else {
                                            isRight = false;
                                            stuAnswerStat[k]["wrong_userIds"] = stuAnswerStat[k]["wrong_userIds"].concat(value.answers[i][j].userIds);
                                        }
                                    }
                                    if (isRight && isIn) {
                                        convertedData["allrightStu"] = convertedData["allrightStu"].concat(value.answers[i][j].userIds);
                                    }
                                }
                            }
                        }
                    } else {
                        $.each(value.correctAnswerTeacher.correct_response, function (k, item) {
                            if (!stuAnswerStat[k]) {
                                stuAnswerStat[k] = {
                                    rightNum: 0,
                                    right_userIds: [],
                                    wrong_userIds: [],
                                    unfinished_userIds: value.unfinishedUserIds,
                                    ref_key: (k + 1)
                                };
                                item_key.push(k + 1);
                            }
                        });
                        convertedData["allrightStu"] = [];
                    }

                }
            }

        }
        $.each(stuAnswerStat, function (k, item) {
            item.rightNum = item.right_userIds.length;
        });

        onlineNum = value.finishedNum + value.unfinishedNum;

        /**计算正确率**/
        for (i = 0; i < stuAnswerStat.length; i++) {
            percent[i] = (onlineNum > 0) ? (stuAnswerStat[i]["rightNum"] / onlineNum).toFixed(2) : 0;
        }

        convertedData["spend_time"] = value.elapsedTime ? value.elapsedTime : 0;
        convertedData["submit_count"] = onlineNum;
        convertedData["answers"] = value.answers;
        convertedData["item_key"] = item_key;
        convertedData["percent"] = percent;
        convertedData["unfinishedNum"] = value.unfinishedNum;
        convertedData["unfinishedUserIds"] = value.unfinishedUserIds;
        convertedData["stuAnswerStat"] = stuAnswerStat;

        value["convertedData"] = convertedData;
    },
    startStatistics: function () {
        this.parent.util.dragParam.isInStat = true;
        //进入统计，判断是否需要重置题目
        this.parent._startStatHandle();
        this.interaction.setViewforStat();
        this.interaction.bindEvent();
    },
    //事件发送二次封装
    eventEmitter: function (eventName, eventType, option) {
        this.parent.$dispatchEvent(eventName, eventType, option);
    },
    //国际化语言处理
    setLocationProperties: function (i18nModel) {
        this.parent.i18nModel = i18nModel;
        this.parent.$translateDeferred.resolve();
    }
};

module.exports = FillBlankService;

/***/ }),
/* 2 */
/***/ (function(module, exports) {

function Interaction(presenterView, service) {
    this.dataType = 'data-item';
    this.statisticClass = 'B';
    this.itemIndexClass = 'fillblank_interaction_alone';
    this.itemSelectClass = 'fillblank_interaction_alone_select';
    this.blankClass = 'blank';
    this.$view = $(presenterView);
    this.$resetBtn = this.$view.find('.com_btn_rectangle');
    this.$blanks = this.$view.find('.fillblank_left .blank');
    this.$leftMain = this.$view.find('.fillblank_lmain');
    this.service = service;
}

Interaction.prototype = {
    setViewforStat: function () {
        var self = this,
            index, $item;

        //隐藏重置按钮
        //self.$resetBtn.addClass('fillblank_interaction_hidden');
        //每个空添加序号
        self.$blanks.addClass(self.blankClass).each(function (k, v) {
            $item = $(this);
            index = $item.data('num');
            $item.prepend(self.createItemIndexDom(index + 1));
            $item.attr(self.dataType, index);
        });

        //将word_empty中的问号去掉
        self.$blanks.filter('.word_empty').find('.word_content').text('');
    },
    createItemIndexDom: function (index) {
        var self = this,
            $em = $('<em></em>');
        $em.addClass(self.itemIndexClass).text('(' + index + ')');
        return $em;
    },
    bindEvent: function () {
        var self = this;

        self.$view.on('mousedown touchstart', '.' + self.blankClass, function (e) {
            self.$leftMain.find('.' + self.itemIndexClass).parent().removeClass(self.itemSelectClass);
            self.clickPresenterItem(event, this);
        });
    },
    unbindEvent: function () {
        var self = this;
        self.$view.off('mousedown touchstart', '.' + self.blankClass);
    },
    clickPresenterItem: function (event, context) {
        var self = this,
            index = $(context).attr(self.dataType);
        //发送事件给统计点击到的Index
        self.service.eventEmitter("statistics_call",
            'ic_player_event', {
                service: "statistic",
                method: "clickItem",
                args: [index, self.statisticClass]
            });
        $(context).find('.' + self.itemIndexClass).parent().addClass(self.itemSelectClass);
    },
    //退出交互
    exitInteraction: function () {
        var self = this;
        //事件解绑
        self.unbindEvent();
        //显示重置按钮
        self.$resetBtn.removeClass('fillblank_interaction_hidden');
        //移除左侧空格的类名和em标签
        self.$blanks.each(function (k, v) {
            //移除blank本身的class和data属性
            //$(this).removeClass(self.blankClass);
            $(this).removeAttr(self.dataType).removeClass(self.itemSelectClass);
            //remove em子元素
            $(this).find('.' + self.itemIndexClass).remove();
        });
    }

};

module.exports = Interaction;

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

var Service = __webpack_require__(1);

var Presenter = BasicPresenter.extend({
    metaInfo: {
        name: 'FillBlankRemake',
        type: 'presenterComponent',
        subtype: 'interactionQuestion'
    },
    /**
     * Presenter的初始化方法
     * @private
     */
    $init: function () {
        this._super();
        //初始化命名空间和初始化工具箱
        this._initToolkit();
        //用于国际化的语言设置deferred
        this.$translateDeferred = $.Deferred();
    },
    /**
     * Presenter对外暴露的方法
     */
    getService: function () {
        if (!this._service_) {
            this._service_ = new Service(this);
        }
        return this._service_;
    },
    /****以下开始为icPlayer的生命周期方法*****/
    run: function (view, model) {
        var self = this;

        //初始化presenter所需的各种数据
        self._initPresenter(view, model).done(function () {
            self._bindEvent();
        });
    },
    pageShow: function () {
        //this._bindEvent();
    },
    pageLeave: function () {
        this._unbindEvent();
    },
    destroy: function () {

    },
    /**如果不需要处理icplayer的状态恢复事件, 请将以下两个方法删除掉**/
    getState: function () {

    },
    setState: function (state, options) {

    },
    /****以下开始为Presenter的私有方法*****/
    //初始化所处需要的各种数据
    _initPresenter: function (view, model) {
        var self = this,
            util = {
                isAllow: true, //是否允许做题
                hasSubmitted: false, //是否曾提交过
                view: view, //原始view
                $view: $(view), //view的jQuery对象
                $leftView: $(view).find('.com_m_sideboard_1'),
                $blanks: $(view).find('.blank'),
                model: model, //原始model
                extendModel: $.extend(true, {}, model), //深复制的model，用于题目
                question_url: model.question_url, //题目内容，用于展示和记录
                answer: {}, //操作答案的对象
                showAnswerInfo: {}, //状态恢复用是否已显示过答案以及类型
                dragParam: { //拖动过程中用到的变量
                    allowDrag: false, //是否允许拖动
                    isInStat: false, //是否处于统计
                    dragContainer: null, //拖动开始的容器,left or right
                    words: [], //拖动过程中记录左侧空格的各个属性
                    lastAnswers: [], //前一次操作的用户作答数据
                    currentWord: null, //当前匹配到的dom
                    $leftView: $(view).find('.fillblank_left'), //左侧题干区域
                    $originalDom: null, //拖动的原始元素
                    $replaceDom: $(view).find('.word_replace'), //用于拖动的dom
                    $replaceSpan: $(view).find('.word_replace .word_take_text'),
                    clickOffset: {} //拖动开始时光标位置与被拖动元素的相对位置
                }
            };

        //转换题干内容,util.question_url数据用于数据绑定与展示
        self._dataTransform(util.question_url);
        //保存一份转换后的原始数据
        util.originalData = $.extend(true, {}, util.question_url);
        $.extend(self.util, util);
        //对答案的操作函数
        var answerParam = {
            candidates: util.question_url.candidates,
            blanks: util.question_url.blanks
        };
        //数据绑定
        self.util.viewModel = self._vmRender(self.util.question_url, self.util.view);

        return self.util.toolkit.initAnwerHandle(answerParam);
    },
    //重新作答
    _resetQuestion: function () {
        var self = this,
            util = self.util;
        util.question_url = $.extend(true, {}, util.originalData);
        //重置作答结果
        util.answer.reset();

        util.$leftView.find('.blank').each(function () {
            //self._addNewOption(util.question_url,$(this));
            $(this).removeClass('word_full word_right word_wrong').addClass('word_empty').find('.word_content').text(function () {
                //如果是在统计状态就设置为空字符串，正常作答过程中设置为问号
                return util.dragParam.isInStat ? '' : '?';
            });
        });

        util.viewModel.showType('');
        util.viewModel.candidates(util.question_url.candidates);
    },
    _bindEvent: function () {
        var self = this;
        self._enableDragWords(self.util);

        //重置按钮时间绑定
        self._bindResetEvent();
    },
    _unbindEvent: function () {
        var self = this;
        //重置按钮解绑
        self.util.$view.off('click', '.com_btn_rectangle');
        self.util.$view.off('mousedown touchstart', '.word_full,.word_take');
        self.util.$view.off('mousemove mouseup touchmove touchend');
        //不允许做题变量置为false
        self.util.isAllow = false;
    },
    _toggleInteraction: function (enabled) {
        if (enabled) {
            this.util.isAllow = true;
            //事件绑定
            this._bindEvent();
        } else {
            //事件解绑
            this._unbindEvent();
            this.util.isAllow = false;
        }
    },
    //进入统计时的处理，判断是否需要重置题目
    _startStatHandle: function () {
        //如果showType不为空，就重置
        if (this.util.viewModel.showType() !== '') {
            this._resetQuestion();
        }
    },
    //重置按钮事件绑定
    _bindResetEvent: function () {
        var self = this;

        self.util.$view.on('click', '.com_btn_rectangle', function () {
            self._resetQuestion();
            //题目作答状态改变，按钮变为可提交
            self.$dispatchEvent($PresenterEvent['AnswerFlowController'].QUESTION_STATE_CHANGE,
                PresenterEventType.IC_PLAYER_EVENT, {
                    canSubmit: false
                });
        });
    },
    //右边选项拖动函数
    _enableDragWords: function (operateParam) {
        var self = this,
            util = operateParam,
            $view = util.$view,
            $blanks = util.$blanks,
            dragParam = util.dragParam,
            data = util.question_url,
            answer = util.answer,
            isMouseDown = false,
            target;


        $view.on('mousedown touchstart', '.word_take,.word_full', function (event) {
            event.preventDefault();

            if (!util.isAllow) return;
            if (isMouseDown) return;


            isMouseDown = true;
            target = event.currentTarget;

            //如果点击到左侧的空格，则增加clicked类
            if ($(target).hasClass('blank')) {
                $blanks.removeClass('clicked');
                $(target).addClass('clicked');
            }

            dragParam.lastAnswers = $.extend(true, [], answer.answers);

            //拖动开始，记录被拖动的dom
            self._recordDom(target, dragParam, util);

            self._rightDragStart(dragParam, util.question_url, event);
        });

        $view.on('mousemove touchmove', function (event) {
            if (!util.isAllow) return;
            if (!isMouseDown) return;

            event.preventDefault();

            self._rightDragMove(dragParam, util.question_url, event);
        });

        $view.on('mouseup touchend', function (event) {
            if (!util.isAllow) return;
            if (!isMouseDown) return;

            event.preventDefault();

            self._rightDragEnd(dragParam, util.question_url, answer, self);
            //拖动完成后check
            if (self._checkAnswer(dragParam.lastAnswers, answer.answers)) {
                //通知保存状态
                self.$dispatchEvent($PresenterEvent['InteractionStateRecoverFilter'].PRESENTER_STATE_CHANGE,
                    PresenterEventType.IC_PLAYER_EVENT);
                //题目作答状态改变，通知按钮
                self.$dispatchEvent($PresenterEvent['AnswerFlowController'].QUESTION_STATE_CHANGE,
                    PresenterEventType.IC_PLAYER_EVENT, {
                        canSubmit: answer.hasUserAnswer
                    });
            }

            isMouseDown = false;
        });
    },
    _rightDragStart: function (dragParam, data, event) {
        if (event.type === 'touchstart') {
            //touchstart事件阻止默认事件，会阻止发射mouse event
            event.preventDefault();
        }

        var offset = dragParam.$originalDom.offset(), //被拖动元素相对文档的偏移
            pageX = event.type === 'touchstart' ? event.originalEvent.changedTouches[0].pageX : event.pageX,
            pageY = event.type === 'touchstart' ? event.originalEvent.changedTouches[0].pageY : event.pageY,
            words, $oriEm, $replEm;

        dragParam.clickOffset = {
            left: pageX - offset.left,
            top: pageY - offset.top
        };

        //左侧拖动开始，如果是处于统计中,则替换掉元素中要显示序号
        if (dragParam.isInStat && dragParam.dragContainer === 'left') {
            $oriEm = dragParam.$originalDom.find('em');
            $replEm = dragParam.$replaceDom.find('em');

            $replEm.addClass($oriEm.attr('class')).text($oriEm.text());
        }

        //隐藏原始dom
        dragParam.$originalDom.css({
            visibility: 'hidden'
        });
        //将用于拖动的dom显示出来
        dragParam.$replaceDom
            .addClass('move')
            .css({
                top: offset.top,
                left: offset.left
            });
        dragParam.$replaceSpan.text(dragParam.$originalSpan.text());
        //.trigger(event.type);

        //每次右侧开始拖动，都记录一次左侧空格的各种属性
        words = dragParam.$leftView.find('.word_empty,.word_full');
        words.each(function (index, ele) {
            dragParam.words.push({
                dom: $(ele),
                textSpan: $(ele).find('.word_content'),
                x2: $(this).offset().left,
                y2: $(this).offset().top,
                w1: $(this).innerWidth(),
                h1: $(this).innerHeight(),
                left: $(this).offset().left,
                top: $(this).offset().top
            });
        });

        dragParam.allowDrag = true;
    },
    _rightDragMove: function (dragParam, data, event) {
        if (!dragParam.allowDrag) {
            return;
        }

        //拖动实现
        var matchs = [],
            word = {},
            $replaceDom = dragParam.$replaceDom,
            w = $replaceDom.innerWidth(),
            h = $replaceDom.innerHeight(),
            words = dragParam.words,
            len = words.length,
            pageX = event.type === 'touchmove' ? event.originalEvent.changedTouches[0].pageX : event.pageX,
            pageY = event.type === 'touchmove' ? event.originalEvent.changedTouches[0].pageY : event.pageY,
            left = pageX - dragParam.clickOffset.left,
            top = pageY - dragParam.clickOffset.top;

        $replaceDom.offset({
            left: left,
            top: top
        });

        //循环对比出相近的空格
        for (var i = 0; i < len; i++) {
            word = words[i];
            if (word.y2 > top - word.h1 && word.y2 < top + h && word.x2 > left - word.w1 && word.x2 < left + w) {
                matchs.push(word);
            }
        }

        //dragParam.currentWord，匹配到的距离最近的待填项
        if (dragParam.currentWord !== null) {
            var dom = dragParam.currentWord.dom,
                textSpan = dragParam.currentWord.textSpan;
            dom.removeClass('on');
            if (dom.hasClass('word_empty')) {
                if (!dragParam.isInStat) {
                    textSpan.text("?");
                } else {
                    textSpan.text("");
                }
            }
            dragParam.currentWord = null;
        }

        // 多个匹配，排序那个更接近,先比对left，如相同比对top
        if (matchs.length > 1) {
            matchs.sort(function (a, b) {
                var diff = Math.abs(a.left - left) - Math.abs(b.left - left);
                if (diff === 0) {
                    diff = Math.abs(a.top - top) - Math.abs(b.top - top);
                }
                return diff;
            });
        }

        if (matchs.length) {
            matchs[0].dom.addClass("on");
            dragParam.currentWord = matchs[0];
            if (matchs[0].dom.hasClass('word_empty')) {
                if (!dragParam.isInStat) {
                    matchs[0].textSpan.text("+");
                } else {
                    matchs[0].textSpan.text("");
                }

            }
        }
    },
    _rightDragEnd: function (dragParam, data, answer, parent) {
        var index = -1,
            value = '', //选项的索引和值
            oldValue = '',
            $leftView = dragParam.$leftView,
            $replaceDom = dragParam.$replaceDom,
            $replaceSpan = dragParam.$replaceSpan,
            $emptyWord = $leftView.find('.word_empty.on'),
            $fullWord = $leftView.find('.word_full.on').not(dragParam.$originalDom),
            $fullWordSpan = $fullWord.find('.word_content'),
            replaceDomPos = {
                left: $replaceDom.offset().left,
                top: $replaceDom.offset().top,
                width: $replaceDom.width(),
                height: $replaceDom.height()
            },
            leftViewPos = {
                left: $leftView.offset().left,
                top: $leftView.offset().top,
                width: $leftView.width(),
                height: $leftView.height()
            };


        //拖动结束，把words置空
        dragParam.words = [];

        //如果是拖到已填
        if ($fullWord.length > 0) {
            index = $fullWord.data('num');
            value = $replaceSpan.text();
            oldValue = $fullWordSpan.text();
            parent._addNewOption(data, oldValue); //将已填的选项放回右侧
            parent._updateWords(answer, data, dragParam);

            $fullWord.removeClass('on').find('.word_content').text(value);
        } else if ($emptyWord.length > 0) { //如果可填空中
            index = $emptyWord.data('num');
            value = $replaceSpan.text();
            $emptyWord.removeClass('word_empty on').addClass('word_full').find('.word_content').text(value);
            parent._updateWords(answer, data, dragParam);
        } else {
            dragParam.$originalDom.css({
                visibility: 'visible'
            });

            if (dragParam.$target.hasClass('word_full')) {
                if (replaceDomPos.top > leftViewPos.top &&
                    replaceDomPos.top < leftViewPos.top + leftViewPos.height &&
                    replaceDomPos.left > leftViewPos.left + leftViewPos.width) {

                    parent._addNewOption(data, dragParam.$originalSpan.text());
                    parent._updateFullWord(answer, dragParam);
                }
            }
        }

        dragParam.$originalDom.removeClass('on');
        //对replaceDom恢复
        dragParam.$replaceDom.removeClass('move word_right word_wrong');

        if (dragParam.isInStat && dragParam.dragContainer === 'left') {
            dragParam.$replaceDom.find('em').text('').attr('class', '');
        }

        dragParam.$replaceSpan.text('');

        //更新学生答题结果,updata函数需要对index检测，小于0则return
        if (index >= 0 && value !== '') {
            answer.update(index, value);
        }

        dragParam.allowDrag = false;

    },
    //拖动开始，对几个需要记录的dom元素进行保存
    _recordDom: function (target, dragParam, util) {
        dragParam.$target = $(target);
        if (dragParam.$target.hasClass('word_take')) {
            dragParam.$originalDom = dragParam.$target;
            dragParam.$originalSpan = dragParam.$originalDom.find('.word_take_text');
            dragParam.$replaceDom = util.$view.find('.word_take_replace'); //用于拖动的dom
            dragParam.$replaceSpan = dragParam.$replaceDom.find('.word_take_text');
            dragParam.dragContainer = 'right';
        } else {
            dragParam.$originalDom = dragParam.$target;
            dragParam.$originalSpan = dragParam.$originalDom.find('.word_content');
            dragParam.$replaceDom = util.$view.find('.word_full_replace'); //用于拖动的dom
            dragParam.$replaceSpan = dragParam.$replaceDom.find('.word_content');
            dragParam.dragContainer = 'left';
        }
    },
    //拖动结束后，对被拖动的是左侧的词进行操作
    _updateFullWord: function (answer, dragParam) {
        var originalIndex = dragParam.$originalDom.data('num');
        //如果拖动了已填的选项,将原选项作答结果置空
        answer.update(originalIndex, '');

        //将被拖动的已填空恢复
        dragParam.$originalDom.removeClass('word_full on')
            .addClass('word_empty')
            .css({
                visibility: 'visible'
            });

        //是否是统计状态
        if (!dragParam.isInStat) {
            dragParam.$originalDom.find('.word_content').text('?');
        } else {
            dragParam.$originalDom.find('.word_content').text('');
        }
    },
    //拖动结束后，更新两侧的选项
    _updateWords: function (answer, data, dragParam) {
        var self = this;
        if (dragParam.$target.hasClass('word_take')) { //如果拖动的是右边选项
            self._removeOriginalOption(data, dragParam.$originalDom); //移除拖动的选项
        } else {
            self._updateFullWord(answer, dragParam);
        }
    },
    //拖动结束后，检查用户作答数据是否有变化，如果有变化就发送事件保存状态，并且通知可提交
    _checkAnswer: function (oldAnswers, newAnswers) {
        var isChanged = false,
            oldAnswer, newAnswer;

        for (var i = 0, len = oldAnswers.length; i < len; i++) {
            oldAnswer = oldAnswers[i];
            newAnswer = newAnswers[i];
            if (oldAnswer.num === newAnswer.num) {
                if (oldAnswer.userAnswer !== newAnswer.userAnswer) {
                    isChanged = true;
                    break;
                }
            }
        }

        return isChanged;
    },
    //题干转换，将标识换成标签
    _dataTransform: function (data) {
        var self = this;

        data.blanks = [];
        data.article = data.article.replace(/\{\d+\}/g, function ($0) {
            var idx = parseInt($0.substring(1, $0.length - 1));
            //存放空格列表
            data.blanks.push(idx);
            return '<span class="blank word_empty" data-num="' + idx + '"><span class="word_content">?</span></span>';
        });

        //将选项随机打乱
        var n = data.candidates.length;
        var fn = self.util.toolkit.createRandomArray(n);
        var fnCandi = [];
        for (var i = 0; i < n; i++) {
            fnCandi[i] = data.candidates[fn[i]];
        }
        data.candidates = fnCandi;
    },
    //数据绑定
    _vmRender: function (data, view, parent) {
        var self = this;
        var vm = new this.util.toolkit.viewModel(data);

        this.$translateDeferred.done(function () {
            //国际化处理
            self._setLanguage(vm);
        });


        ko.applyBindings(vm, view);
        return vm;
    },
    //对选项的操作，删除
    _removeOriginalOption: function (data, $originalOption) {
        var index = $originalOption.index();

        data.candidates.splice(index, 1);
        this.util.viewModel.candidates(data.candidates);
    },
    //对选项的操作，添加
    _addNewOption: function (data, value) {
        if (value === '') return;
        data.candidates.push({
            num: '',
            value: value
        });

        this.util.viewModel.candidates(data.candidates);
    },
    //国际化处理

    _setLanguage: function (viewModel) {
        if (!this.i18nModel) {
            return;
        }

        for (var prop in viewModel.translations) {
            if (this.i18nModel[prop]) {
                viewModel.translations[prop](this.i18nModel[prop]);
            }
        }

    },
    //初始化工具箱函数
    _initToolkit: function () {
        var self = this;

        //所有的工具函数和数据模型都放在util下
        self.util = {};

        self.util.toolkit = {
            //创建一个随机数组
            createRandomArray: function (num) {
                var randomArray = [];
                for (var i = 0; i < num; i++) {
                    randomArray[i] = i;
                }
                for (var i = 0; i < num; i++) {
                    var iRand = parseInt(num * Math.random());
                    var temp = randomArray[i];
                    randomArray[i] = randomArray[iRand];
                    randomArray[iRand] = temp;
                }
                return randomArray;
            },
            initAnwerHandle: function (answerParam) {
                var $deferred = $.Deferred();
                var Answer = __webpack_require__(0);
                self.util.answer = new Answer(answerParam);
                self.util.answer.init();
                $deferred.resolve();

                return $deferred;
            },
            //数据绑定数据模型
            viewModel: function (data) {
                //标题
                this.title = ko.observable(data.title);

                //问题内容
                this.article = ko.observable(data.article);
                //选项
                this.candidates = ko.observableArray(data.candidates);
                //是否显示提交答案按钮
                this.submitBtnShow = ko.observable(false);
                //是否显示计时
                this.timeShow = ko.observable(false);
                //重置按钮显示状态
                this.resetBtnShow = ko.observable(true);
                //主内容区域显示  选项 / 全部答对提示 / 答错提示
                this.showType = ko.observable('');
                //正确答案
                this.rightAnswers = ko.observableArray();
                //用户错误统计
                this.userWrongTotal = ko.observableArray();
                //计时器
                this.timeMinute = ko.observable();
                this.timeSecond = ko.observable();
                this.secondCss = ko.pureComputed(function () {
                    var flag = false;
                    if (data.timer.timer_type == 'countdown' && parseInt(this.timeSecond()) <= 10) {
                        flag = true;
                    }
                    return flag;
                }, this);
                //国际化
                this.translations = {
                    "fillblank_rtit": ko.observable("填空选项"),
                    "reset": ko.observable("重 置"),
                    "answer_correct": ko.observable("恭喜你，全答对了，真棒！"),
                    "answer_wrong_1": ko.observable("很遗憾，你有"),
                    "answer_wrong_2": ko.observable("处错误，其正确选项依次为：")
                };
                //答案提交
                //this.submit = submitAndShowResult.bind(this);
                //this.answerReset = self._resetQuestion.bind(self);
                //白板端遮罩层
                this.showMessage = ko.observable(false);
                this.message = ko.observable('');
            }
        };
    }
}, 'FillBlankRemake');

module.exports = function () {
    return new Presenter();
};

/***/ })
/******/ ]);]]>

</presenter>


<resources>

<file src='./resources/wood/images/bg_sidecon1.png' />
<file src='./resources/wood/images/bg_sidetit1.png' />
<file src='./resources/wood/images/decl_sidecon.png' />
<file src='./resources/wood/images/decm_sidecon.png' />
<file src='./resources/wood/images/decr_sidecon.png' />
<file src='./resources/wood/images/tiankong-zan.png' />
<file src='./resources/wood/images/word_take.png' />
<file src='./resources/wood/images/word_take_bg.png' />
<file src='./resources/wood/images/word_will.png' />


</resources>

</addon>