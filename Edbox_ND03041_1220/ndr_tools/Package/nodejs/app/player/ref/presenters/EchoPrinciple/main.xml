<?xml version='1.0' encoding='UTF-8'?>
<addon id="templateid"><properties/><dependencies><jsDependency><javaScript name="kitty" version="2.0.4.1"/><javaScript name="AlamedaRequire" version="0.3.2"/><javaScript name="tools_common" version="1.3.0"/></jsDependency></dependencies><css><![CDATA[@charset "UTF-8";@-webkit-keyframes openMouthAni{0%,100%{background:url(resources/wood/images/echo_people_off.png) center center no-repeat;background-size:100% auto}50%{background:url(resources/wood/images/echo_people_open.png) center center no-repeat;background-size:100% auto}}@keyframes openMouthAni{0%,100%{background:url(resources/wood/images/echo_people_off.png) center center no-repeat;background-size:100% auto}50%{background:url(resources/wood/images/echo_people_open.png) center center no-repeat;background-size:100% auto}}@-webkit-keyframes shake{2%{-webkit-transform:translate(0,-1.5px);transform:translate(0,-1.5px)}50%{-webkit-transform:translate(0,1.5px);transform:translate(0,1.5px)}0%,100%{-webkit-transform:translate(0,0);transform:translate(0,0)}}@keyframes shake{2%{-webkit-transform:translate(-6px,0);transform:translate(-6px,0)}50%{-webkit-transform:translate(6px,0);transform:translate(6px,0)}0%,100%{-webkit-transform:translate(0,0);transform:translate(0,0)}}@-webkit-keyframes progressBarDialAni{0%{border-left-color:#fff}100%{border-left-color:rgba(255,255,255,0)}}@keyframes progressBarDialAni{0%{border-left-color:#fff}100%{border-left-color:rgba(255,255,255,0)}}@-webkit-keyframes voicewavaAni{0%{width:0}100%{width:100%}}@keyframes voicewavaAni{0%{width:0}100%{width:100%}}.exam_skin_wood .echoprinciple{width:100%;height:100%;background:url(resources/wood/images/echo_bg.png) top center no-repeat #bfd3e2;background-size:100% auto;position:relative}.exam_skin_wood .echoprinciple .echoprinciple_content_wrapper{width:100%;height:100%;padding:2.66667em 4em 5em}.exam_skin_wood .echoprinciple .echoprinciple_content{width:72em;height:37.41667em;position:relative;margin:0 auto}.exam_skin_wood .echoprinciple .echoprinciple_text_box{background:rgba(255,255,255,.8);border-radius:.33333em;position:absolute;top:2.29167em}.exam_skin_wood .echoprinciple .echoprinciple_tips{min-height:4.58333em;max-height:7.08333em;padding:.83333em 1.3em 0;line-height:2.70833em;left:1.66667em;text-align:center}.exam_skin_wood .echoprinciple .echoprinciple_tips .echoprinciple_text{font-size:2em;display:inline-block;max-height:2.83333em;overflow:hidden;text-align:left}.exam_skin_wood .echoprinciple .echoprinciple_tips.echoprinciple_tips_small{line-height:2em}.exam_skin_wood .echoprinciple .echoprinciple_tips.echoprinciple_tips_small .echoprinciple_text{font-size:1.5em}.exam_skin_wood .echoprinciple .echoprinciple_tips_show_pri{left:50%;transform:translateX(-50%);white-space:nowrap}.exam_skin_wood .echoprinciple .echoprinciple_times{width:9.16667em;height:4.58333em;right:6.91667em;line-height:4.58333em;text-align:center}.exam_skin_wood .echoprinciple .echoprinciple_text{color:#333;font-weight:700;font-size:2.5em}.exam_skin_wood .echoprinciple .echoprinciple_people{position:absolute;left:-4.4em;bottom:2.48333em;width:6.08333em;height:17.75em;background:url(resources/wood/images/echo_people_off.png) center center no-repeat;background-size:100% auto;z-index:99}.exam_skin_wood .echoprinciple .echoprinciple_people.open_mouth{background:url(resources/wood/images/echo_people_open.png) center center no-repeat;background-size:100% auto}.exam_skin_wood .echoprinciple .echoprinciple_people.open_ani{-webkit-animation:openMouthAni .5s;animation:openMouthAni .5s}.exam_skin_wood .echoprinciple .echoprinciple_people.shaking_ani{-webkit-animation-name:shake;animation-name:shake;-webkit-animation-duration:1s;animation-duration:1s;-webkit-animation-timing-function:ease-in-out;animation-timing-function:ease-in-out;-webkit-animation-iteration-count:3;animation-iteration-count:3}.exam_skin_wood .echoprinciple .echoprinciple_mountain{position:absolute;right:-4.08333em;bottom:9.16667em;width:14.33333em;height:27.04167em;background:url(resources/wood/images/echo_mountain.png) center center no-repeat;background-size:100% auto;z-index:1}.exam_skin_wood .echoprinciple .echoprinciple_voicewava_box{width:43.58333em;height:13.75em;position:absolute;right:6.91667em;top:8.25em;z-index:98}.exam_skin_wood .echoprinciple .echoprinciple_voicewava_box .wava_bg{display:inline-block;width:100%;height:100%;position:absolute;top:0}.exam_skin_wood .echoprinciple .echoprinciple_voicewava_box .wava_bg.redwava_bg{background:url(resources/wood/images/echo_voice_redwava.png) center center no-repeat;background-size:43.58333em auto;left:0}.exam_skin_wood .echoprinciple .echoprinciple_voicewava_box .wava_bg.greenwava_bg{background:url(resources/wood/images/echo_voice_greenwava.png) center center no-repeat;background-size:43.58333em auto;right:.875em}.exam_skin_wood .echoprinciple .echoprinciple_voicewava_box.voicewava_ani .redwava_bg{-webkit-animation:voicewavaAni 1s;animation:voicewavaAni 1s}.exam_skin_wood .echoprinciple .echoprinciple_voicewava_box.voicewava_ani .greenwava_bg{-webkit-animation:voicewavaAni 1s;animation:voicewavaAni 1s;-webkit-animation-delay:1s;animation-delay:1s}.exam_skin_wood .echoprinciple .echoprinciple_progress_bar_box{width:100%;height:4.16667em;position:absolute;left:0;top:31.5em;z-index:11}.exam_skin_wood .echoprinciple .progress_bar_gray{width:100%;height:.83333em;margin-top:1.25em;background-color:#a0a0a0}.exam_skin_wood .echoprinciple .progress_bar_fill_box{width:72em;margin:0 auto;height:.83333em}.exam_skin_wood .echoprinciple .progress_bar_fill{position:relative;float:right;width:0;height:100%;background-color:#ff8a00;margin-right:7.08333em}.exam_skin_wood .echoprinciple .progress_bar_wava_cnt{position:absolute;top:-21.5em;left:-1em;right:-1em;height:14em}.exam_skin_wood .echoprinciple .progress_bar_dial{width:72em;margin:0 auto;position:relative;padding-right:7.08333em;text-align:right}.exam_skin_wood .echoprinciple .progress_bar_dial_item{display:inline-block;margin-top:.41667em;position:relative}.exam_skin_wood .echoprinciple .progress_bar_dial_item:first-child{width:5.20833em}.exam_skin_wood .echoprinciple .progress_bar_dial_item:first-child .progress_bar_dial_text{margin-right:-1.58333em}.exam_skin_wood .echoprinciple .progress_bar_dial_item:nth-child(2){width:16.16667em}.exam_skin_wood .echoprinciple .progress_bar_dial_item:nth-child(2) .progress_bar_dial_text{margin-right:-1.45833em}.exam_skin_wood .echoprinciple .progress_bar_dial_item:nth-child(3){width:21.5em}.exam_skin_wood .echoprinciple .progress_bar_dial_item:nth-child(3) .progress_bar_dial_text{margin-right:-1.25em}.exam_skin_wood .echoprinciple .progress_bar_dial_item:nth-child(4){width:21.25em}.exam_skin_wood .echoprinciple .progress_bar_dial_item:nth-child(4) .progress_bar_dial_text{margin-right:-.95833em}.exam_skin_wood .echoprinciple .progress_bar_dial_item:after{content:"";width:0;height:1.45833em;border-right:2px solid #fff;position:absolute;top:-1.875em}.exam_skin_wood .echoprinciple .progress_bar_dial_text{font-size:2em;color:#fff}.exam_skin_wood .echoprinciple .progress_bar_dial_17m_box{bottom:0;position:absolute;right:0;bottom:0;width:21.25em;height:.5em;display:block;text-align:right;white-space:nowrap}.exam_skin_wood .echoprinciple .progress_bar_dial_17m_box .progress_bar_dial_1m{display:inline-block;width:1.25em;height:.5em;border-left:2px solid #fff;vertical-align:top}.exam_skin_wood .echoprinciple .progress_bar_dial_17m_box.progress_bar_dial_17m_ani .progress_bar_dial_1m{-webkit-animation:progressBarDialAni 1s;animation:progressBarDialAni 1s}.exam_skin_wood .echoprinciple .echoprinciple_keyboard_box{width:13.33333em;position:absolute;left:26.66667em;bottom:1.125em;text-align:right;z-index:99}.exam_skin_wood .echoprinciple .fractions_keyboard_list{border:1px solid #686868;background:#ebebeb;width:13.33333em;text-align:center}.exam_skin_wood .echoprinciple .fractions_keyboard_list .bd{padding:.41667em}.exam_skin_wood .echoprinciple .fractions_keyboard_list .bd .bd_num{width:3.66667em;height:2.33333em;line-height:2.33333em;color:#4d4d4d;float:left;background:#fff;border-radius:.25em;border:1px solid #9c9c9c;margin:.20833em}.exam_skin_wood .echoprinciple .fractions_keyboard_list .bd .bd_num span{font-size:1.5em}.exam_skin_wood .echoprinciple .fractions_keyboard_list .bd .bd_num.btn_del .btn_del_icon{display:block;width:3.66667em;height:1.5em;margin-top:.33333em;background:url(resources/wood/images/fractions_keyboard_del_btn.png) top center no-repeat;background-size:3em auto}.exam_skin_wood .echoprinciple .fractions_keyboard_list .bd .bd_num.btn_enter span{font-size:1.25em}.exam_skin_wood .echoprinciple .fractions_keyboard_list .bd .bd_num.ui_btn_active{background-color:#31b0ee;color:#fff}.exam_skin_wood .echoprinciple .fractions_keyboard_list .bd .bd_num.ui_btn_active.btn_del .btn_del_icon{background-position:bottom center}.exam_skin_wood .echoprinciple .fractions_keyboard_list .ft{display:inline-block;min-height:1.66667em;line-height:1.25em;padding:0 .41667em .41667em;text-align:center}.exam_skin_wood .echoprinciple .fractions_keyboard_list .ft .btn_tips{font-size:1em;color:#4d4d4d}.exam_skin_wood .echoprinciple .fractions_keyboard_rext_box{display:inline-block;margin-top:.41667em;width:11.66667em;height:3.58333em;line-height:3.58333em;border-radius:.66667em;border:.04167em solid #686868;box-shadow:.04167em .04167em .33333em rgba(80,93,102,.4) inset;background:-webkit-linear-gradient(top,#e9e9e9,#fff);background:linear-gradient(to bottom,#e9e9e9,#fff);text-align:left;position:relative}.exam_skin_wood .echoprinciple .fractions_keyboard_rext_text{display:inline-block;font-size:2em;color:#4d4d4d;font-weight:700;padding:0 .70833em}.exam_skin_wood .echoprinciple .fractions_keyboard_rext_btn{display:inline-block;position:absolute;top:.83333em;right:.83333em;width:1.91667em;height:1.91667em;border-radius:.33333em;border:1px solid #686868;background:-webkit-linear-gradient(bottom,#dfdfdf,#f2f2f2);background:linear-gradient(to top,#dfdfdf,#f2f2f2);text-align:center;vertical-align:middle}.exam_skin_wood .echoprinciple .fractions_keyboard_rext_btn .arrow_icon{display:inline-block;width:1em;height:1em;background:url(resources/wood/images/echo_arrow_icon.png) right top no-repeat;background-size:2em auto;position:absolute;top:.45833em;right:.45833em}.exam_skin_wood .echoprinciple .fractions_keyboard_rext_btn.ui_btn_active,.exam_skin_wood .echoprinciple .fractions_keyboard_rext_btn:active{background:-webkit-linear-gradient(bottom,#76b8ba,#89c5c7);background:linear-gradient(bottom,#76b8ba,#89c5c7)}.exam_skin_wood .echoprinciple .fractions_keyboard_rext_btn.ui_btn_active .arrow_icon,.exam_skin_wood .echoprinciple .fractions_keyboard_rext_btn:active .arrow_icon{background-position:right bottom;top:.25em;left:.375em}.exam_skin_wood .echoprinciple .ui_btn_down .arrow_icon{background-position:left top;top:.5em;left:.5em}.exam_skin_wood .echoprinciple .ui_btn_down.ui_btn_active .arrow_icon{background-position:left bottom;top:.29167em;left:.5em}.exam_skin_wood .echoprinciple .echoprinciple_tool_btns{position:absolute;left:0;bottom:0;width:100%;height:5em;padding:0 4.16667em;background:#cfdee9;z-index:9;text-align:center}.exam_skin_wood .echoprinciple .tool_btns_main{display:inline-block;width:72em;height:5em;line-height:4.79167em;text-align:right}.exam_skin_wood .echoprinciple .com_btns{margin-right:2.33333em;margin-left:0}.com_tooldiolag_board .exam_skin_wood .abacus{font-size:.95em}.typefaces_long .exam_skin_wood .echoprinciple .echoprinciple_tips{padding:.41667em .625em 0;width:52.08333em;line-height:1.75em}.typefaces_long .exam_skin_wood .echoprinciple .echoprinciple_tips .echoprinciple_text{padding-bottom:.20833em;max-height:3.1em;font-size:1.75em;letter-spacing:-.8px}.typefaces_long .exam_skin_wood .echoprinciple .tool_btns_main .com_btns{padding:0 .5em;line-height:1.5em;width:17.5em}.typefaces_long .exam_skin_wood .echoprinciple .tool_btns_main .com_btns:after{content:'';display:inline-block;width:0;height:100%;vertical-align:middle}.typefaces_long .exam_skin_wood .echoprinciple .tool_btns_main .com_btns .btns-primary-txt{display:inline-block;width:96%;max-height:100%;vertical-align:middle}.typefaces_ru_RU .exam_skin_wood .echoprinciple .echoprinciple_tips{padding:.41667em .625em 0;width:52.08333em;line-height:1.75em}.typefaces_ru_RU .exam_skin_wood .echoprinciple .echoprinciple_tips .echoprinciple_text{padding-bottom:.20833em;max-height:3.1em;font-size:1.75em;letter-spacing:-.8px}.typefaces_ru_RU .exam_skin_wood .echoprinciple .tool_btns_main .com_btns{padding:0 .5em;line-height:1.5em;width:17.5em}.typefaces_ru_RU .exam_skin_wood .echoprinciple .tool_btns_main .com_btns:after{content:'';display:inline-block;width:0;height:100%;vertical-align:middle}.typefaces_ru_RU .exam_skin_wood .echoprinciple .tool_btns_main .com_btns .btns-primary-txt{display:inline-block;width:96%;max-height:100%;vertical-align:middle}]]></css><view><![CDATA[<div class="exam_skin_wood" style="" id="layout"><div class="echoprinciple"><div class="echoprinciple_content_wrapper"><div class="echoprinciple_content"><div class="echoprinciple_text_box echoprinciple_tips hide_dom _js_echoprinciple_tips_big"><span class="echoprinciple_text">发声体和障碍物之间的距离>17m，人耳能分辨回声</span></div><div class="echoprinciple_text_box echoprinciple_tips hide_dom _js_echoprinciple_tips_eq"><span class="echoprinciple_text">发声体和障碍物之间的距离=17m，人耳能分辨回声</span></div><div class="echoprinciple_text_box echoprinciple_tips hide_dom _js_echoprinciple_tips_smal"><span class="echoprinciple_text">发声体和障碍物之间的距离&lt;17m，人耳不能分辨回声</span></div><div class="echoprinciple_text_box echoprinciple_tips echoprinciple_tips_show_pri hide_dom _js_echoprinciple_tips_show"><span class="echoprinciple_text">回声原理：声音的反射</span></div><div class="echoprinciple_text_box echoprinciple_times"><span class="echoprinciple_text _js_echoprinciple_time">00.00s</span></div><div class="echoprinciple_mountain"></div><audio id="echop" src="" hidden="true"></audio><audio id="echob" src="" hidden="true"></audio><div class="echoprinciple_keyboard_box"><div class="fractions_keyboard_list clearfix hide_dom _js_fractions_keyboard_list"><div class="bd clearfix"><a href="javascript:;" data-num="1" class="bd_num"><span>1</span></a> <a href="javascript:;" data-num="2" class="bd_num"><span>2</span></a> <a href="javascript:;" data-num="3" class="bd_num"><span>3</span></a> <a href="javascript:;" data-num="4" class="bd_num"><span>4</span></a> <a href="javascript:;" data-num="5" class="bd_num"><span>5</span></a> <a href="javascript:;" data-num="6" class="bd_num"><span>6</span></a> <a href="javascript:;" data-num="7" class="bd_num"><span>7</span></a> <a href="javascript:;" data-num="8" class="bd_num"><span>8</span></a> <a href="javascript:;" data-num="9" class="bd_num"><span>9</span></a> <a href="javascript:;" data-num="10" class="bd_num btn_del"><i class="btn_del_icon"></i></a> <a href="javascript:;" data-num="0" class="bd_num"><span>0</span></a> <a href="javascript:;" data-num="11" class="bd_num btn_enter"><span>Enter</span></a></div><div class="ft"><span class="btn_tips _js_input_num">(注：1≤输入的数值≤340)</span></div></div><div class="fractions_keyboard_rext_box"><span class="fractions_keyboard_rext_text _js_fractions_keyboard_rext_text">340m</span><span class="fractions_keyboard_rext_btn _js_fractions_keyboard_rext_btn"><i class="arrow_icon"></i></span></div></div></div><div class="echoprinciple_progress_bar_box"><div class="progress_bar_gray"><div class="progress_bar_fill_box _js_bar_cnt"><span class="progress_bar_fill _js_progress_bar_fill" role="progressbar" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100" style="width:43.38em"><span class="progress_bar_wava_cnt _js_progress_bar_wava_cnt"></span><span class="echoprinciple_people open_mouth hide_dom _js_echoprinciple_people_on"></span><span class="echoprinciple_people _js_echoprinciple_people"></span><span class="progress_bar_dial_17m_box progress_bar_dial_17m_ani"><span class="progress_bar_dial_1m _js_1m_dis"></span><span class="progress_bar_dial_1m"></span><span class="progress_bar_dial_1m"></span><span class="progress_bar_dial_1m"></span><span class="progress_bar_dial_1m"></span><span class="progress_bar_dial_1m"></span><span class="progress_bar_dial_1m"></span><span class="progress_bar_dial_1m"></span><span class="progress_bar_dial_1m"></span><span class="progress_bar_dial_1m"></span><span class="progress_bar_dial_1m"></span><span class="progress_bar_dial_1m"></span><span class="progress_bar_dial_1m"></span><span class="progress_bar_dial_1m"></span><span class="progress_bar_dial_1m"></span><span class="progress_bar_dial_1m"></span></span></span></div></div><div class="progress_bar_dial"><span class="progress_bar_dial_item"><span class="progress_bar_dial_text">340m</span> </span><span class="progress_bar_dial_item _js_max_dis"><span class="progress_bar_dial_text">170m</span> </span><span class="progress_bar_dial_item _js_mid_dis"><span class="progress_bar_dial_text">17m</span> </span><span class="progress_bar_dial_item _js_min_dis"><span class="progress_bar_dial_text">0m</span></span></div></div></div><div class="echoprinciple_tool_btns"><div class="tool_btns_main clearfix"><a class="com_btns btns-primary _js_play_echo" href="javascript:;"><span class="btns-primary-txt">演示回声</span> </a><a class="com_btns btns-primary _js_show_pri" href="javascript:;"><span class="btns-primary-txt">展示原理</span></a></div></div></div></div>]]></view><presenter><![CDATA[(function() {

    var i18nModel = null;

    var Presenter = BasicPresenter.extend({
        metaInfo: {
            name: "EchoPrinciple",
            type: "",
            subtype: ""
        },
        /**
         * Presenter的初始化方法
         * @private
         */
        $init: function() {
            this._super();

            this.$view = null;
            this.model = null;
            this.echoController = null;
            this.basePath = null;
        },
        /**
         * Presenter对外暴露的方法
         */
        _service_: {
            constructor: function(parent) {
                this.parent = parent;
            },
            getExtendData: function() {
                var options = {};
                options = this.parent.echoController.getState();
                return options;
            },
            setLocationProperties: function(properties) {
                //this.i18n = properties;
                i18nModel = properties || {};

            },
            getQuestionInfo: function() {
                return {
                    id: this.parent.model.question_id || '',
                    type_code: 'EchoPrinciple',
                    type_name: '回声',
                    url: '',
                    noExistStatistics: true,
                    noNeedQuizProgress: true
                }
            }
        },
        setBasePath: function(path) {
            var self = this;
            this.basePath = path;
        },
        getService: function() {
            var self = this;
            self._service_.constructor(self);

            return self._service_;
        },
        /****以下开始为icPlayer的生命周期方法*****/
        run: function(view, model) {
            var self = this;
            self.$view = $(view);
            self.model = model;
            self.model.basePath = this.basePath;
            self.model.isStudent = this.isStudent;
            var $deferred = $.Deferred();

            require(['EchoLang', 'EchoController'], function(Lang, EchoController) {
                //初始化语言包
                Lang.extend(i18nModel);

                self.echoController = EchoController.create(self.$view, self.model);
                self.echoController.render();
            }).then(function() {
                $deferred.resolve();
            });
            self.__interface = {
                resizeScreen: function (data) {
                    var ratio = eval(data.ratio)
                    self.echoController.handleResizeScreen(ratio)
                }
            }
            return $deferred.promise();

        },
        pageShow: function() {},
        pageLeave: function() {},
        destroy: function() {

            if (!!this.echoController) {
                this.echoController.destroy();

            }
        },
        /**如果不需要处理icplayer的状态恢复事件, 请将以下两个方法删除掉**/
        getState: function() {

        },
        setState: function(state, options) {

            }
            /****以下开始为Presenter的私有方法*****/


    });

    window.AddonEchoPrinciple_create = function() {
        return new Presenter();
    }


})();
define('EchoConfig', function() {

    var config = {
        MIN_DISTANCE: 1,
        MAX_DISTANCE: 340,
        DISTANCE: 170,
        RADIU: 2, //改变曲度
        _H: 0.92,
        INIT_H: 10,
        _W: 45, //红波消失
        _gW: 30, //绿波出现--> <

        //
        SHOW_W: 48, //红波消失--> <
        SHOW_gW: -28, //绿波出现--> <
        WAVA_WIDTH: 10,
        WAVA_SPACE: 10,
        WAVA_COLOR_ONE: '#ff5a00',
        WAVA_COLOR_TWO: '#009e96',

        IINT_FONTSIZE: 19.8167,


    };

    return config;
});
define('EchoController', ['EchoLang', 'EchoEventBus', 'EchoView', 'EchoKeyboard', 'EchoDrag'],
    function(Lang, EventBus, EchoView, EchoKeyboard, EchoDrag) {

        var domGather = null,
            widthGather = null;

        distance = {
            value: null
        }

        var EchoController = {
            _eventBus: null,
            _model: null,
            _$view: null,
            _echoModel: null,
            _echoView: null,
            _option: null,
            _lastMeter: null,
            _lenArray: [],
            _isDrag: null,
            _isPlaying: false,
            _isShowing: false,

            create: function($view, model) {
                var ins = Object.create(this);
                ins._$view = $view;
                ins._storeDom();
                ins._storeWidth();
                ins._option = $.extend(true, {}, {
                    domG: domGather,
                    _$view: $view,
                    _model: model,
                });
                ins._eventBus = EventBus.create();
                ins._echoView = EchoView.create(ins._option, ins._eventBus, distance);
                ins._echoDrag = EchoDrag.create(ins._option, ins._eventBus);
                ins._echoKeyboard = EchoKeyboard.create(ins._option, ins._eventBus);

                return ins;
            },
            render: function() {
                var self = this;
                this._bindEvent();
                this._echoDrag.render();
                this._echoView.render();
                this._echoKeyboard.render();
                this._i18n();
                if (this._option._model.__ExtendModel && !$.isEmptyObject(this._option._model.__ExtendModel)) {

                    this._eventBus.trigger('setBoyDistance', this._option._model.__ExtendModel.distance);

                    var animate = this._option._model.__ExtendModel.animate
                    if (typeof this._echoView[animate] === "function") {
                        setTimeout(function() {
                                self._echoView[animate]()
                            }, 1000)
                            // this._echoView[animate]()
                    }

                    domGather._js_echoprinciple_time.text(this._option._model.__ExtendModel.time);

                    var index = this._option._model.__ExtendModel.tipsEleIndex;
                    domGather._js_echoprinciple_tips_big.parent('div').find('.echoprinciple_tips').slice(0, 3).eq(index)
                        .removeClass('hide_dom');

                    if (this._option._model.__ExtendModel.isAfterShow) {
                        self._echoView._showPrinciple('', 0.0001);
                    }

                }

            },
            handleResizeScreen(ratio) {
                var progress = this._$view.find('._js_progress_bar_fill')
                progress.css('width', progress.width() * ratio)
                this._echoView.scale *= ratio
                this._storeWidth()
            },
            getState: function() {
                var self = this;
                var afterShow = domGather._js_echoprinciple_tips_show.hasClass('hide_dom') ? false : true;
                var tipsEle = domGather._js_echoprinciple_tips_big.parent('div').find('.echoprinciple_tips').slice(0, 3);
                var eleIndex;
                tipsEle.each(function(i, item) {
                    if (!$(this).hasClass('hide_dom')) {
                        eleIndex = i;
                    }
                })
                var t = domGather._js_echoprinciple_time.text();
                return {
                    distance: distance.value,
                    animate: self.animate,
                    tipsEleIndex: eleIndex,
                    isAfterShow: afterShow,
                    time: t
                }
            },

            destroy: function() {
                this._echoView.unBindEvent();
                this._echoDrag.unBindEvent();
                this._echoKeyboard.unBindEvent();
            },

            _bindEvent: function() {
                var self = this;

                this._eventBus.on('changeMoveStae', function(value) {
                    self._isDrag = value;
                })
                this._eventBus.on('changeAnimateState', function(value) {
                    self.animate = value;
                    player.controller.getEventBus().sendEvent("PLAYER.TOOL.FORBIDE_FULL",{id:self._option._model.$.unqiueId,isForbide: !!value})
                })

                this._eventBus.on('setBoyDistance', function(value) {
                    // console.log(value);

                    // if (  value === 16 && self._isDrag) {
                    //         console.log('------------------.'+17);
                    //         self._echoModel.setDistance(17);
                    //         return
                    //
                    // }
                    distance.value = value;
                    if (!self._getDirection(self._lenArray, 1) && value === 18 && self._isDrag) {

                        self._eventBus.trigger('setBoyDistance', 17)
                        return

                    }
                    if (self._getDirection(self._lenArray, 1) && value === 169 && self._isDrag) {

                        self._eventBus.trigger('setBoyDistance', 170)
                        return

                    }
                    if (!self._getDirection(self._lenArray, 1) && value === 171 && self._isDrag) {

                        self._eventBus.trigger('setBoyDistance', 170)
                        return
                    }

                    var pxVal = self._meterToPx(value);
                    var pxFixed = self._calibrationFix(value, pxVal);
                    self._echoDrag.setBoyDistance(pxFixed);
                    self._echoKeyboard.setCurrentValue(value);
                    self._lastMeter = value;
                })
                this._eventBus.on('moveBoy', function(value) {
                    var val = self._getBoyPos(value),
                        meVal = self._pxToMeter(val);
                    // pxVal = self._meterToPx(meVal);
                    self._eventBus.trigger('setBoyDistance', meVal);

                    if (self._lenArray.length < 3) {
                        self._lenArray.push(meVal)
                    } else {
                        self._lenArray.shift()
                        self._lenArray.push(meVal)
                    }
                })
            },
            _storeDom: function() {
                domGather = {
                    _js_input_num: this._$view.find('._js_input_num'),
                    _js_fractions_keyboard_rext_btn: this._$view.find('._js_fractions_keyboard_rext_btn'),
                    _js_fractions_keyboard_list: this._$view.find('._js_fractions_keyboard_list'),
                    _js_fractions_keyboard_rext_text: this._$view.find('._js_fractions_keyboard_rext_text'),
                    _js_echoprinciple_voicewava_box: this._$view.find('._js_echoprinciple_voicewava_box'), //展示原理框
                    _js_progress_bar_wava_cnt: this._$view.find('._js_progress_bar_wava_cnt'),
                    _js_show_pri: this._$view.find('._js_show_pri'),
                    _js_play_echo: this._$view.find('._js_play_echo'),
                    _js_echoprinciple_tips_big: this._$view.find('._js_echoprinciple_tips_big'),
                    _js_echoprinciple_tips_eq: this._$view.find('._js_echoprinciple_tips_eq'),
                    _js_echoprinciple_tips_smal: this._$view.find('._js_echoprinciple_tips_smal'),
                    _js_echoprinciple_tips_show: this._$view.find('._js_echoprinciple_tips_show'),
                    _js_echoprinciple_time: this._$view.find('._js_echoprinciple_time'),
                    _js_echoprinciple_people: this._$view.find('._js_echoprinciple_people'),
                    _js_echoprinciple_people_on: this._$view.find('._js_echoprinciple_people_on'),
                    _js_progress_bar: this._$view.find('._js_progress_bar_fill'),
                    _js_bar_cnt: this._$view.find('._js_bar_cnt'),
                    _js_max_dis: this._$view.find('._js_max_dis'),
                    _js_mid_dis: this._$view.find('._js_mid_dis'),
                    _js_min_dis: this._$view.find('._js_min_dis'),
                    _js_1m_dis: this._$view.find('._js_1m_dis'),
                    _js_body: $('body'),
                    progress_bar_dial_1m: this._$view.find('.progress_bar_dial_1m'),
                    echop: this._$view.find('#echop'),
                    echob: this._$view.find('#echob'),
                }
            },
            _storeWidth: function() {
                widthGather = {
                    max_dis: domGather._js_max_dis.innerWidth(),
                    mid_dis: domGather._js_mid_dis.innerWidth(),
                    min_dis: domGather._js_min_dis.innerWidth(),
                    one_dis: domGather._js_1m_dis.parent('span').outerWidth() / 16,
                    cnt_wid: domGather._js_bar_cnt.outerWidth(),
                    boy_wid: domGather._js_echoprinciple_people.outerWidth(),
                    bar_mar: parseFloat(domGather._js_progress_bar.css('marginRight')),
                    boy_left: parseFloat(domGather._js_echoprinciple_people.css('left')),
                }
                widthGather.max_bar = widthGather.max_dis + widthGather.mid_dis + widthGather.min_dis;
                widthGather.mid_bar = widthGather.mid_dis + widthGather.min_dis;

            },
            _i18n: function($view) {
                //多语言
                domGather._js_echoprinciple_tips_big.find('span').text(Lang.get('more_than'));
                domGather._js_echoprinciple_tips_eq.find('span').text(Lang.get('equal'));
                domGather._js_echoprinciple_tips_smal.find('span').text(Lang.get('less_than'));
                domGather._js_show_pri.find('span').text(Lang.get('show_priceple'));
                domGather._js_play_echo.find('span').text(Lang.get('play_echo'));
                domGather._js_echoprinciple_tips_show.find('span').text(Lang.get('echo_priceple'));
                domGather._js_input_num.text(Lang.get('input_num'));

            },
            _meterToPx: function(val) {
                var barLength,
                    w = widthGather;
                if (val >= 170) {
                    barLength = w.min_dis + w.mid_dis + w.max_dis * ((val - 170) / (340 - 170));
                } else if (val >= 17 && val < 170) {
                    barLength = w.min_dis + w.mid_dis * ((val - 17) / (170 - 17));
                } else {
                    var target = this._$view.find('.progress_bar_dial_1m').eq(16 - val);
                    var borderWidth = parseInt(target.css('borderWidth'));
                    if (target[0]) {
                        barLength = w.min_dis - target[0].offsetLeft - borderWidth / 2;
                    }
                }
                return barLength;
            },
            _pxToMeter: function(val) {
                var meVal,
                    w = widthGather;
                if (val >= w.mid_bar) {
                    meVal = (val - w.min_dis - w.mid_dis) * (340 - 170) / w.max_dis + 170;
                } else if (val > w.min_dis && val < w.mid_bar) {
                    meVal = (val - w.min_dis) * (170 - 17) / w.mid_dis + 17;
                } else {
                    meVal = val / Math.round(w.one_dis);
                }
                meVal = parseInt(meVal)
                return meVal < 1 ? 1 : meVal
            },
            _getBoyPos: function(opt) {
                var w = widthGather;
                var cntLeft = domGather._js_bar_cnt.offset().left;
                //修正鼠标位置
                var dis = opt.d + w.boy_left;
                opt.x = opt.x - dis

                var barLength = w.cnt_wid - (opt.x - cntLeft) - w.bar_mar;
                if (barLength > w.max_bar) {
                    barLength = w.max_bar;
                }
                if (barLength < w.one_dis) {
                    barLength = w.one_dis;
                }
                return barLength;
            },
            _calibrationFix: function(meter, px) {
                if (parseFloat(domGather._js_progress_bar.css('fontSize')) > 13) return px
                switch (meter) {
                    case 5:
                        px -= 1
                        break;

                }
                return --px
            },
            _getDirection: function(arr) {
                var self = this;
                var temp = arr[0],
                    result = false,
                    i,
                    len = arr.length;

                for (i = 1; i < len; i++) {
                    if (arr[i] > temp) result = true;
                    temp = arr[i];
                }
                return result
            }
        }

        return EchoController;
    });
define('EchoDrag', ['EchoConfig'], function(CF) {

    function getPagePos(ev, scale) {
        var ev = ev.originalEvent ? ev.originalEvent : ev;
        var point = {};
        scale = scale || 1;
        switch (ev.type) {
            case 'touchstart':
            case 'touchmove':
            case 'touchend':
            case 'touchcancel':
                point.x = ev.changedTouches[0].pageX / scale;
                point.y = ev.changedTouches[0].pageY / scale;
                return point;
            default:
                point.x = ev.pageX / scale;
                point.y = ev.pageY / scale;
                return point
        }
        return point;
    }

    function eventMapping(e) {
        var eventType = e.type;
        var type;
        switch (eventType) {
            case "touchstart":
                //阻止默认事件，不发射mouseEvent
                e.preventDefault();
            case "mousedown":
                type = "start";
                break;
            case "mousemove":
            case "touchmove":
                type = "move";
                break;
            case "mouseup":
            case "touchend":
                type = "end";
                break;
        }
        return type;
    }

    var echoDrag = {
        _option: null,
        _eventBus: null,
        _model: null,
        _domG: null,
        _isMoving: null,

        create: function(option, eventBus, model) {
            var ins = Object.create(this);
            ins._option = option;
            ins._eventBus = eventBus;
            ins._model = model;
            ins._domG = option.domG;
            return ins;
        },
        render: function() {
            this._bindEvent();
            this._eventBus.trigger('setBoyDistance', 170);

        },

        unBindEvent: function() {
            $(document).off('mousedown mousemove mouseup touchstart touchmove touchend');
        },

        setBoyDistance: function(value) {
            this._domG._js_progress_bar.css('width', value + 'px');
        },
        _bindEvent: function() {
            var self = this;
            this._eventBus.on('changIsMoving', function() {
                self._isMoving = false;
            })
            $(document).on('mousedown mousemove mouseup touchstart touchmove touchend', self._moveBoy.bind(self))

        },
        _moveBoy: function(e) {
            var pos = getPagePos(e),
                eventType = eventMapping(e);

            switch (eventType) {
                case "start":
                    if (this._domG._js_play_echo.hasClass('click_disabled')) return
                    if (this._domG._js_play_echo.hasClass('ui_btn_active')) return
                    if ($(e.target).hasClass('_js_echoprinciple_people')) {
                        this._domG._js_echoprinciple_tips_big.addClass('hide_dom')
                            .siblings('.echoprinciple_tips').addClass('hide_dom');

                        this._isMoving = true;
                        this._eventBus.trigger('updateTime', 0.00);
                        this._eventBus.trigger('renderSvg');

                        var boyLeft = this._domG._js_echoprinciple_people.offset().left;
                        this._mouseToBoyLeft = pos.x - boyLeft;
                        this._eventBus.trigger('changeMoveStae', true);

                    }
                    break;
                case "move":
                    if (this._isMoving) {

                        this._eventBus.trigger('moveBoy', {
                            x: pos.x,
                            d: this._mouseToBoyLeft
                        })
                    }
                    break;
                case "end":
                    this._isMoving = false;
                    break;
            }

        },
    }
    return echoDrag
});
define('EchoKeyboard', ['EchoConfig'], function(CF) {
    function eventMapping(e) {
        var eventType = e.type;
        var type;
        switch (eventType) {
            case "touchstart":
                //阻止默认事件，不发射mouseEvent
                e.preventDefault();
            case "mousedown":
                type = "start";
                break;
            case "mousemove":
            case "touchmove":
                type = "move";
                break;
            case "mouseup":
            case "touchend":
                type = "end";
                break;
        }
        return type;
    }

    var echoKeyboard = {
        _option: null,
        _eventBus: null,
        _domG: null,
        _lastValue: null,
        _fisrtOpen: null,

        create: function(option, eventBus, model) {
            var ins = Object.create(this);
            ins._option = option;
            ins._eventBus = eventBus;
            ins._domG = option.domG;
            return ins;
        },
        render: function() {
            this._bindEvent();
        },

        unBindEvent: function() {
            this._domG._js_fractions_keyboard_rext_btn.off('click touchstart');
            this._domG._js_fractions_keyboard_list.off('click touchstart');
        },
        setCurrentValue: function(value) {

            this._domG._js_fractions_keyboard_rext_text.text(value + 'm');
            //改变刻度条透明度
            this._domG.progress_bar_dial_1m.css('opacity', 1 / (17 - 70) * value + 70 / (70 - 17));

        },
        _bindEvent: function() {
            var that = this;
            this._domG._js_fractions_keyboard_rext_btn.on('click touchstart', function(e) {
                e.stopPropagation();
                e.preventDefault();
                that._keyBoardBtnEvent(e);
            })
            this._domG._js_fractions_keyboard_list.on('click touchstart', 'a', function(e) {
                e.stopPropagation();
                that._keyBoardListEvent(e);
            });

            this._option._$view.on('click touchstart',
                function(e) { //打开键盘有修改数字但没点enter
                    if (!that._domG._js_fractions_keyboard_list.hasClass('hide_dom')) {
                        that._domG._js_fractions_keyboard_list.addClass('hide_dom');
                        that._domG._js_fractions_keyboard_rext_btn.removeClass('ui_btn_down');
                        that.setCurrentValue(that._lastValue)
                    }
                })

            this._mockActive(this._domG._js_fractions_keyboard_rext_btn);
            this._mockActive(this._domG._js_fractions_keyboard_list);
        },
        _mockActive: function(ele) {
            var self = this;
            var tagName = ele.find('a').length > 0 ? 'a' : '';

            ele.on('mousedown  mouseup touchstart touchend', tagName, function(e) {
                e.preventDefault();
                var eventType = eventMapping(e);
                var tagName = e.currentTarget.tagName;
                switch (eventType) {
                    case "start":
                        $(e.currentTarget).addClass('ui_btn_active')
                            .siblings(tagName).removeClass('ui_btn_active');
                        break;
                    case "end":
                        $(e.currentTarget).removeClass('ui_btn_active')
                            .siblings(tagName).removeClass('ui_btn_active');;
                        break;
                }
            })

        },
        _getCurrentValue: function() {
            return parseInt(this._domG._js_fractions_keyboard_rext_text.text())
        },

        _keyBoardBtnEvent: function(e) {
            this._fisrtOpen = true;
            if (this._domG._js_fractions_keyboard_list.hasClass('hide_dom')) {
                this._lastValue = this._getCurrentValue();
                this._domG._js_fractions_keyboard_list.removeClass('hide_dom');
                $(e.currentTarget).addClass('ui_btn_down');
            } else {
                this._domG._js_fractions_keyboard_list.addClass('hide_dom');
                $(e.currentTarget).removeClass('ui_btn_down');
                this.setCurrentValue(this._lastValue)

            }

        },
        _keyBoardListEvent: function(e) {

            var self = this,
                inserValue,
                curreValue = this._getCurrentValue(),
                len = curreValue.toString().length,
                value = $(e.currentTarget).data('num');
            switch (value) {
                case 10: //delete
                    if (curreValue === 0) return;
                    if (len === 1) {
                        inserValue = 0
                    } else {
                        inserValue = (curreValue + '').substring(0, len - 1)
                    }
                    break;
                case 11: //enter
                    if (this._domG._js_play_echo.hasClass('click_disabled')) return
                    if (this._domG._js_play_echo.hasClass('ui_btn_active')) return
                    inserValue = curreValue;
                    if (inserValue > 340) {
                        inserValue = 340;
                        this._domG._js_echoprinciple_people.addClass('shaking_ani')
                    }
                    if (inserValue < CF.MIN_DISTANCE) {
                        inserValue = CF.MIN_DISTANCE;
                        this._domG._js_echoprinciple_people.addClass('shaking_ani')
                    }
                    this._domG._js_echoprinciple_tips_big.addClass('hide_dom')
                        .siblings('.echoprinciple_tips').addClass('hide_dom');
                    this._domG._js_fractions_keyboard_rext_btn.removeClass('ui_btn_down');
                    this._eventBus.trigger('updateTime', 0.00);

                    setTimeout(function() {
                        self._domG._js_echoprinciple_people.removeClass('shaking_ani')
                    }, 100);

                    this._eventBus.trigger('changeMoveStae', false);
                    this._eventBus.trigger('setBoyDistance', inserValue);

                    this._domG._js_fractions_keyboard_list.addClass('hide_dom');
                    this._eventBus.trigger('renderSvg');
                    break;
                default: //number
                    if (this._fisrtOpen) {
                        inserValue = value + '';
                        break;
                    }
                    if (len === 3) return
                    if (curreValue === 0) {
                        inserValue = value + ''
                    } else {
                        inserValue = curreValue + '' + value
                    }
                    inserValue = inserValue > 340 ? 340 : inserValue;
            }
            // if (inserValue > 340) inserValue = 340;
            // if (inserValue < 3) inserValue = 3;
            this._fisrtOpen = false;
            this.setCurrentValue(inserValue)
        },
    }
    return echoKeyboard
});
define('EchoLang', function() {
    var echoLang = {

        'play_echo': '演示回声',
        'show_priceple': '展示原理',
        'more_than': '发声体和障碍物之间的距离>17m，人耳能分辨回声',
        'equal': '发声体和障碍物之间的距离=17m，人耳能分辨回声',
        'less_than': '发声体和障碍物之间的距离<17m，人耳不能分辨回声',
        'echo_priceple': '回声原理：声音的反射',
        'input_num': '(注：1≤输入的数值≤340)',

        get: function(key) {
            return this[key];
        },
        extend: function(lang) {
            $.extend(this, lang);
        }

    };
    return echoLang;
});
/**
 * Created by ylf on 2015/12/13.
 */

define('EchoLogger', function() {
    // 'use strict';

    var methods = [
        'assert', 'clear', 'count', 'debug', 'dir', 'dirxml',
        'error',
        'exception', 'group', 'groupCollapsed', 'groupEnd', 'info',
        'log',
        'markTimeline', 'profile', 'profileEnd', 'table', 'time',
        'timeEnd',
        'timeline', 'timelineEnd', 'timeStamp', 'trace', 'warn'
    ];
    var length = methods.length;
    var _console = (window.console = window.console || {});
    var method = null;

    var emptyFuc = function() {};

    while (length--) {
        method = methods[length];
        // Only stub undefined methods.
        if (!_console[method]) {
            _console[method] = emptyFuc;
        }
    }

    //logger level值(debug:3, info:2, warn:1, error: 0, close: -1)
    var _logger = {
        _level: 0,
        _console: _console,
        setLevel: function(level) {
            switch (level) {
                case 'debug':
                    this._level = 3;
                    break;
                case 'info':
                    this._level = 2;
                    break;
                case 'warn':
                    this._level = 1;
                    break;
                case 'error':
                    this._level = 0;
                    break;
                default:
                    this._level = -1;
            }
        },
        debug: function() {
            if (this._level >= 3) {
                this._console.log.apply(this._console,
                    arguments);
            }
        },
        info: function(msg) {
            if (this._level >= 2) {
                this._console.info.apply(this._console,
                    arguments);
            }
        },
        warn: function(msg) {
            if (this._level >= 1) {
                this._console.warn.apply(this._console,
                    arguments);
            }
        },
        error: function(msg) {
            if (this._level >= 0) {
                this._console.error.apply(this._console,
                    arguments);
            }
        }
    };

    return _logger;

});
define('EchoView', ['EchoConfig'], function(CF) {
    var View = {
        _option: null,
        _eventBus: null,
        _model: null,
        _domG: null,

        _paper: null,
        _svgCnt: null,
        _svgW: null,
        _svgH: null,
        _count: null,
        _t: null,
        _play: null,
        _n: null,

        _fontSize: null,
        _time: null,

        _distance: null,
        scale: 1,

        create: function(option, eventBus, distance) {
            var ins = Object.create(this);
            ins._option = option;
            ins._eventBus = eventBus;
            ins._distance = distance;
            ins._domG = option.domG;
            ins._svgCnt = ins._domG._js_progress_bar_wava_cnt[0];
            return ins;
        },
        render: function() {
            this._bindEvent();
            this._getVoice();

            this._fontSize = parseFloat(this._domG._js_progress_bar_wava_cnt.css('fontSize'));
            var self = this;
            this._time = {
                setTime: function(t) {
                    self._domG._js_echoprinciple_time[0].innerHTML = '0' + (t / 1000).toFixed(2) + 's';
                }
            }
        },

        unBindEvent: function() {
            this._option._$view.off('click touchstart');
            this._domG._js_play_echo.off('click touchstart');
            this._domG._js_show_pri.off('click touchstart')
        },
        _getVoice: function() {
            this._domG.echop.attr('src', this._option._model.basePath + 'resources/wood/images/voice/voice01.mp3');
            this._domG.echob.attr('src', this._option._model.basePath + 'resources/wood/images/voice/voice02.mp3');
        },
        //自适应
        _adapting: function(value) {
            if (typeof value === "object") {
                for (i in value) {
                    value[i] = this._fontSize * value[i] / CF.IINT_FONTSIZE;
                }
                return value
            }
            return this._fontSize * value / CF.IINT_FONTSIZE;
        },
        _bindEvent: function() {
            this._domG._js_play_echo.on('click touchstart', this._playEcho.bind(this))
            this._domG._js_show_pri.on('click touchstart', this._showPrinciple.bind(this))

            this._eventBus.on('updateTime', this._updateTimetext.bind(this))
            this._eventBus.on('renderSvg', this._renderSvg.bind(this))
        },

        _renderSvg: function() {
            var me = this
            this._domG._js_progress_bar_wava_cnt.empty();
            this._svgW = this._domG._js_progress_bar_wava_cnt.innerWidth() / this.scale;
            this._svgH = this._domG._js_progress_bar_wava_cnt.innerHeight() / 2 / this.scale;
            this._paper = new kity.Paper(this._svgCnt).pipe(function() {
                this.setWidth('100%').setHeight('100%');
                this.setViewBox(0, 0, me._svgW, me._svgH*2);
            });
        },

        _displayTimeCnt: function() {
            this._domG._js_echoprinciple_time.parent('div').removeClass('hide_dom');
        },
        _mouthAnimate: function() { //嘴部动画
            var self = this;
            this._domG._js_echoprinciple_people.addClass('hide_dom');
            this._domG._js_echoprinciple_people_on.removeClass('hide_dom');
            setTimeout(function functionName() {
                self._domG._js_echoprinciple_people_on.addClass('hide_dom');
                self._domG._js_echoprinciple_people.removeClass('hide_dom');
            }, 300)
        },
        _enableBtn: function() {
            this._domG._js_play_echo.removeClass('click_disabled ui_btn_active');
            this._domG._js_show_pri.removeClass('click_disabled ui_btn_active');
        },
        _updateTimetext: function(t) {
            this._domG._js_echoprinciple_time[0].innerHTML = '0' + (t / 1000).toFixed(2) + 's';
        },
        //演示回声
        _playEcho: function(e) {
            var self = this;
            if (this._domG._js_play_echo.hasClass('click_disabled')) return;
            if (this._domG._js_play_echo.hasClass('ui_btn_active')) return;
            self._eventBus.trigger('changIsMoving');

            this._domG._js_play_echo.addClass('ui_btn_active').siblings('a').addClass('click_disabled');

            self._count = 0;
            self._n = 3;
            self._play = false;
            this._renderSvg();

            this._domG._js_echoprinciple_tips_big.addClass('hide_dom')
                .siblings('.echoprinciple_tips').addClass('hide_dom');
            var d = Math.max(1, self._distance.value);
            this._t = d / 340 * 1000; //实际时间
            this._displayTimeCnt();

            //var initT = Date.now();
            //this._option._model.isStudent ? this._showTime(initT, this._t) : this._showTimeRequst(initT, this._t);

            this._t = this._t * 2;
            this._renderWava();

            var timeAnimite = this._createTimeAnimite(2 * this._t);
            var timeLine = timeAnimite.start(this._time, 2 * this._t, 'linear')


            this._mouthAnimate();
            this._playVoiceP();

            setTimeout(function() {
                self._updateTimetext(self._t);
            }, self._t * 2)

            this._eventBus.trigger('changeAnimateState', '_playEcho');

            setTimeout(function() {
                self._enableBtn();
                self._showConclusion();
                self._eventBus.trigger('changeAnimateState', '');

            }, self._t * 2 + self._t / this._adapting(CF.WAVA_SPACE) * self._n * 2)
        },
        _showPrinciple: function(e, showTime) {
            var self = this;
            if (this._domG._js_show_pri.hasClass('click_disabled')) return;
            if (this._domG._js_show_pri.hasClass('ui_btn_active')) return;
            this._domG._js_show_pri.addClass('ui_btn_active').siblings('a').addClass('click_disabled');
            self._eventBus.trigger('changIsMoving');


            self._count = 0;
            self._n = 12;
            self._play = true;
            this._eventBus.trigger('setBoyDistance', 170);
            this._renderSvg();
            this._domG._js_echoprinciple_time.parent('div').addClass('hide_dom');
            this._domG._js_echoprinciple_tips_show.addClass('hide_dom')
                .siblings('.echoprinciple_tips').addClass('hide_dom');

            this._t = 170 / 340 * 1000;
            this._t = this._t * 2;
            this._eventBus.trigger('changeAnimateState', '_showPrinciple');

            setTimeout(function() {
                self._domG._js_echoprinciple_tips_show.removeClass('hide_dom')
                self._enableBtn();
                self._eventBus.trigger('changeAnimateState', '');

            }, showTime || self._t * 2 + self._t / this._adapting(CF.WAVA_SPACE) * self._n)

            this._renderWava(showTime);
            showTime || 　this._mouthAnimate();

            showTime || 　this._playVoiceP(self._t / this._adapting(CF.WAVA_SPACE) * (self._n - 1) * 2);


        },
        _renderWava: function(showTime) {
            var d = this._distance.value;
            var _H = this._play ? 0.00001 : this._adapting(CF.INIT_H);
            var pos1 = {
                    x: this._svgW * this._count - this._adapting(CF._gW) * this._count,
                    y: this._svgH - _H
                },
                pos2 = {
                    x: this._svgW * this._count - this._adapting(CF._gW) * this._count,
                    y: this._svgH + _H
                },
                contra = 1 - this._count,
                width = this._adapting(CF.WAVA_WIDTH) * d / CF.MAX_DISTANCE + 4,
                color = this._count === 0 ? CF.WAVA_COLOR_ONE : CF.WAVA_COLOR_TWO,
                delay = this._t / this._adapting(CF.WAVA_SPACE),

                n = this._n;
            if (this._option._model.isStudent) {
                width = this._adapting(CF.WAVA_WIDTH) * Math.min(170, d) / CF.MAX_DISTANCE + 2;
            }
            var wavaA = this._createWava(this._svgH * this._adapting(CF.RADIU), pos1, pos2, contra, width, color, n);
            this._paper.addShapes(wavaA);

            this._createAnimates(wavaA, this._t, 'linear', delay, contra, n, 　showTime);
        },
        _createAnimates: function(targets, t, easing, delay, contra, n, showTime) {
            var self = this;
            var curveAnimiArr = [];
            var l = n;
            if (this._play) {
                while (l--) {
                    var s = this._count === 0 ? 1 : -1;
                    var W = this._svgW * this._count + s * this._svgW / n * (n - l);
                    var _H = this._svgH * this._adapting(CF._H) / n * (n - l);
                    var _W = this._count === 0 ? this._adapting(CF.SHOW_W) : this._adapting(CF.SHOW_gW);
                    curveAnimiArr.push(this._createPathAnimator(
                        W, this._svgH, _W, _H, this._svgH * this._adapting(CF.RADIU), contra))
                }
            } else {
                curveAnimiArr[0] = this._createPathAnimator(
                    this._svgW * (1 - this._count), this._svgH, this._adapting(CF._W),
                    this._svgH * this._adapting(CF._H), this._svgH * this._adapting(CF.RADIU), contra);
            }
            var curveOpaAnimi = this._createOpacityAnimator(0.3);
            var index;
            targets.forEach(function(item, i) {

                // if (i == 2) delay *= 0.75
                index = self._play ? i : 0;
                t = self._play ? t / n * (index + 1) : t;
                var isReflected = self._play ? i === n - 1 : i === 0;
                curveAnimiArr[index].start(item, t, easing, showTime || delay * i, function(target) {
                    this._play || this._paper.removeItem(target.target);
                    if (this._count === 1 && isReflected) {
                        showTime || this._playVoiceB();
                    }
                    if (this._count < 1 && isReflected) {
                        this._count++;
                        this._renderWava(showTime);
                    }
                }.bind(self))


            })
            this._play || targets.forEach(function(item, i) {

                curveOpaAnimi.start(item, t, easing, delay * i)
            })
        },

        _createTimeAnimite: function(dur) {
            var TimeAnimite = kity.createClass("TimeAnimite", {
                base: kity.Animator,

                constructor: function(dur) {
                    this.callBase({
                        beginValue: 0,
                        finishValue: dur,
                        setter: function(target, value, timeline) {
                            target.setTime(value / 2);
                        }
                    });
                }
            });
            return new TimeAnimite(dur)
        },
        _createWava: function(radiu, pos1, pos2, contra, width, color, n) {
            var Wava = kity.createClass('Wava', {
                base: kity.Path,
                constructor: function(radiu, pos1, pos2, contra, width, color) {
                    this.callBase();
                    this.draw(radiu, pos1, pos2, contra);
                    this.stroke(color, width);
                },
                draw: function(radiu, pos1, pos2, contra) {
                    var d = this.getDrawer();
                    d.moveTo(pos1.x, pos1.y);
                    d.arcTo(radiu, radiu, 0, 0, contra, pos2.x, pos2.y);
                }
            })
            var curveA = [];
            while (n--) {
                var wava = new Wava(radiu, pos1, pos2, contra, width, color);
                curveA.push(wava.setVisible(true))
            }
            return curveA
        },
        _createPathAnimator: function(W, H, _W, _H, R, C) {
            var path = 'M' + (W - _W) + ',' + (H - _H) + 'A' + R + ',' + R + ',0,0,' + C + ',' + (W - _W) + ',' + (H + _H);
            var Animator = new kity.PathAnimator(path);
            return Animator;
        },
        _createOpacityAnimator: function(opacity) {
            var Animator = new kity.OpacityAnimator(opacity);
            return Animator;
        },
        _showConclusion: function() {
            var d = this._distance.value;
            if (d > 17) {
                this._domG._js_echoprinciple_tips_big.removeClass('hide_dom')
                    .siblings('.echoprinciple_tips').addClass('hide_dom')
            } else if (d === 17) {
                this._domG._js_echoprinciple_tips_eq.removeClass('hide_dom')
                    .siblings('.echoprinciple_tips').addClass('hide_dom')
            } else {
                this._domG._js_echoprinciple_tips_smal.removeClass('hide_dom')
                    .siblings('.echoprinciple_tips').addClass('hide_dom')
            }
        },
        _showTimeRequst: function(initT, t) {
            var self = this;
            var crruT = Date.now(),
                delta = (crruT - initT) / 2;
            if (delta <= 2 * t) {
                this._domG._js_echoprinciple_time[0].innerHTML = '0' + (delta / 1000).toFixed(2) + 's';
                requestAnimationFrame(function() {
                    self._showTime(initT, t)
                }, 80);
            }
        },
        _showTime: function(initT, t) {
            var self = this;
            var crruT = Date.now(),
                delta = (crruT - initT) / 2;
            if (delta <= 2 * t) {
                this._domG._js_echoprinciple_time[0].innerHTML = '0' + (delta / 1000).toFixed(2) + 's';
                setTimeout(function() {
                    self._showTime(initT, t)
                }, 90);
            }
        },
        _playVoiceP: function(t) {
            this._domG.echop[0].currentTime = 0;
            this._domG.echop[0].play();
        },
        _playVoiceB: function(t) {
            if (this._distance.value < 17) {} else {
                this._domG.echob[0].currentTime = 0;
                this._domG.echob[0].play();
            }

        },

    }
    return View
});
/**
 * Created by gps on 2016/11/11.
 * 事件管理对象
 */
define('EchoEventBus', ['EchoLogger'], function(Logger) {

    var EventBus = {
        _eventHandler: null,
        create: function() {
            var instance = Object.create(this);
            instance._eventHandler = {};
            return instance;
        },
        trigger: function() {
            //将参数转换为数组
            var arg = Array.prototype.slice.apply(arguments, [0]);
            //取第一个，并从数组中删除，事件key
            var type = arg.shift();
            if (!this._eventHandler || !this._eventHandler[type]) {
                return false;
            }
            var handlers = this._eventHandler[type];
            handlers.forEach(function(handler) {
                handler.cb.apply(handler.domain || this,
                    arg);
                Logger.debug('event-trigger', type, arg
                    .toString());
            });
            return true;
        },
        on: function(type, callback, domain) {
            if (!this._eventHandler[type]) {
                this._eventHandler[type] = [];
            }
            this._eventHandler[type].push({
                cb: callback,
                domain: domain
            });
            return true;
        },
        off: function(type, callback, domain) {
            var handlers = this._eventHandler[type];
            if (handlers && handlers.length > 0) {
                var len = handlers.length;
                var handler;
                for (var i = 0; i < len; i++) {
                    handler = handlers[i];
                    if (handler && callback === handler.cb) {
                        if (domain && domain !== handler.domain) {
                            continue;
                        }
                        handlers.splice(i, 1);
                        i--;
                        len--;
                    }
                }
            }
            if (handlers && handlers.length === 0) {
                delete this._eventHandler[type];
            }
        }
    };
    return EventBus;
});
]]></presenter><resources><file src="./resources/wood/images/echo_arrow_icon.png"/><file src="./resources/wood/images/echo_bg.png"/><file src="./resources/wood/images/echo_mountain.png"/><file src="./resources/wood/images/echo_people_off.png"/><file src="./resources/wood/images/echo_people_open.png"/><file src="./resources/wood/images/echo_voice_greenwava.png"/><file src="./resources/wood/images/echo_voice_redwava.png"/><file src="./resources/wood/images/fractions_keyboard_del_btn.png"/><file src="./resources/wood/images/voice/voice01.mp3"/><file src="./resources/wood/images/voice/voice02.mp3"/></resources></addon>