<?xml version='1.0' encoding='UTF-8'?>
<addon id="templateid"><properties><property name="question_id" displayName="题目ID" type="string" isLocalized="false"/></properties><dependencies><jsDependency><javaScript name="AlamedaRequire" version="0.3.2"/><javaScript name="out_frame" version="1.0.8"/><javaScript name="tools_common" version="1.0.0"/><javaScript name="knockout" version="3.3.0"/><javaScript name="UndoManager" version="1.0.0"/></jsDependency></dependencies><css><![CDATA[.exam_skin_wood .NumberPairEntrance_wrapper{width:100%;height:100%;overflow:hidden}.exam_skin_wood .NumberPairEntrance{width:100%;height:100%;background:url(resources/wood/images/icon_bg.png) no-repeat;background-size:100% 100%}.exam_skin_wood .NumberPairEntrance .tool_btns_box{position:relative;width:100%;float:left;height:23.79167em;background:url(resources/wood/images/icon_tool.png) no-repeat;background-size:100% 23.79167em;margin:11.25em auto}.exam_skin_wood .NumberPairEntrance .FindLocation_btn,.exam_skin_wood .NumberPairEntrance .NumberPair_btn{float:left;position:absolute;display:inline-block;cursor:pointer;width:15.83333em;height:13.33333em;top:36%;padding-top:10em;text-align:center}.exam_skin_wood .NumberPairEntrance .FindLocation_btn .text,.exam_skin_wood .NumberPairEntrance .NumberPair_btn .text{display:inline-block;font-size:2.08333em;font-weight:700;color:#5e3d04}.exam_skin_wood .NumberPairEntrance .NumberPair_btn{left:30%}.exam_skin_wood .NumberPairEntrance .NumberPair_btn .text{-webkit-transform:translateX(-20px) rotate(3deg);transform:translateX(-20px) rotate(3deg)}.exam_skin_wood .NumberPairEntrance .FindLocation_btn{left:54%}.exam_skin_wood .NumberPairEntrance .FindLocation_btn .text{-webkit-transform:translateX(-27px) translateY(-20px) rotate(-3deg);transform:translateX(-27px) translateY(-20px) rotate(-3deg)}.typefaces_long .exam_skin_wood .NumberPairEntrance .NumberPair_btn .text{font-size:1.45833em;-webkit-transform:translate(-29px,4px) rotate(3deg);transform:translate(-29px,4px) rotate(3deg)}.typefaces_long .exam_skin_wood .NumberPairEntrance .FindLocation_btn .text{font-size:1.75em;-webkit-transform:translate(-18px,4px) rotate(-3deg);transform:translate(-18px,4px) rotate(-3deg)}.typefaces_ru_RU .exam_skin_wood .NumberPairEntrance .NumberPair_btn .text{font-size:1.45833em;-webkit-transform:translate(-29px,4px) rotate(3deg);transform:translate(-29px,4px) rotate(3deg)}.typefaces_ru_RU .exam_skin_wood .NumberPairEntrance .FindLocation_btn .text{font-size:1.75em;-webkit-transform:translate(-18px,4px) rotate(-3deg);transform:translate(-18px,4px) rotate(-3deg)}@-webkit-keyframes myrotate{0%{-webkit-transform:rotateY(0);transform:rotateY(0)}50%{-webkit-transform:rotateY(90deg);transform:rotateY(90deg)}to{-webkit-transform:rotateY(0);transform:rotateY(0)}}@keyframes myrotate{0%{-webkit-transform:rotateY(0);transform:rotateY(0)}50%{-webkit-transform:rotateY(90deg);transform:rotateY(90deg)}to{-webkit-transform:rotateY(0);transform:rotateY(0)}}@-webkit-keyframes slideInDown{0%{-webkit-transform:translateY(-100%);transform:translateY(-100%);visibility:visible}to{-webkit-transform:translateY(0);transform:translateY(0)}}@keyframes slideInDown{0%{-webkit-transform:translateY(-100%);transform:translateY(-100%);visibility:visible}to{-webkit-transform:translateY(0);transform:translateY(0)}}@-webkit-keyframes slideOutUp{0%{-webkit-transform:translateY(0);transform:translateY(0);visibility:visible}to{-webkit-transform:translateY(-100%);transform:translateY(-100%)}}@keyframes slideOutUp{0%{-webkit-transform:translateY(0);transform:translateY(0);visibility:visible}to{-webkit-transform:translateY(-100%);transform:translateY(-100%)}}.exam_skin_wood .NubmerPair_wrapper{width:100%;height:100%}.exam_skin_wood .NubmerPair_wrapper .nd_NewRoman_italic_fold{font-family:ndnewromanItalicRegular!important;font-weight:700}.exam_skin_wood .NubmerPair_wrapper.teacher .NubmerPair_wrapper_teacher{display:block}.exam_skin_wood .NubmerPair_wrapper.student .NubmerPair_wrapper_teacher,.exam_skin_wood .NubmerPair_wrapper.teacher .NubmerPair_wrapper_student{display:none}.exam_skin_wood .NubmerPair_wrapper.student .NubmerPair_wrapper_student{display:block}.exam_skin_wood .NubmerPair_wrapper_teacher{width:100%;height:100%;padding-top:2.66667em;background-color:#bfd3e2}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_bottom{position:absolute;bottom:0;width:100%;height:4.91667em;background-color:#cfdee9}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main{position:absolute;left:50%;top:50%;width:80em;height:45em;padding:0 4em 4.91667em;margin:-21em auto auto -40em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_menu_box{position:relative;display:inline-block;vertical-align:middle;float:right;margin-top:8.83333em;margin-right:.625em;width:5.83333em;border-radius:.33333em;background-color:#b0c9dc}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main.menu_writeNP .np_menu_box{margin-top:5.625em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main.menu_writeNP .np_menu_box .np_item3{background-position:left -13.91667em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main.menu_writeNP .np_menu_box .np_item4{background-position:left -20.83333em;border-bottom-left-radius:.33333em;border-bottom-right-radius:.33333em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main.menu_writeNP .np_twelveStars .np_triangle{bottom:12.5em!important}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main.menu_writeNP .np_geometry{margin-top:-6.66667em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main.menu_writeNP .np_geometry .np_triangle{bottom:10.83333em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main.menu_writeNP .np_gridColor{margin-top:-8.33333em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main.menu_findLocation .np_menu_box{margin-top:8.83333em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main.menu_findLocation .np_menu_box .np_item3{background-position:left -13.91667em;border-bottom-left-radius:.33333em;border-bottom-right-radius:.33333em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main.menu_findLocation .np_menu_box .np_item4{display:none!important}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main.show_pre_1 .np_main_box{width:100%;height:100%;padding-right:7em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main.show_pre_1 .np_main_box .np_numpair_box{float:right}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main.show_pre_1 .np_main_box .np_numpair_box.change_height_850{margin-top:1.25em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main.show_pre_1 .np_main_box .np_numpair_box.change_height_780{margin-top:2.91667em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main.show_pre_2 .np_main_box{width:100%;height:100%;padding-right:14.45833em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main.show_pre_2 .np_main_box .np_numpair_box.change_height_850.scroll{margin-top:1.25em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main.show_pre_2 .np_main_box .np_numpair_box.change_height_780.scroll{margin-top:2.91667em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_menu_item{width:100%;height:6.54167em;margin-top:-1px;background:url(resources/wood/images/icon_menu.png) no-repeat;background-size:100% auto;cursor:pointer;text-align:center}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_menu_item .np_text{margin-top:4.5em;display:inline-block;max-width:5.41667em;word-break:break-all}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_menu_item .np_text .text{font-family:microsoft yahei;font-size:1.16667em;color:#292525}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_menu_item.on,.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_menu_item:active{background-color:rgba(87,143,184,.3)}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_item1{background-position:0 0;border-top-left-radius:.33333em;border-top-right-radius:.33333em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_item2{background-position:left -7em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_twelveStars{position:absolute;top:50%;margin-top:-18.04167em;right:7.29167em;width:5.83333em;height:36.04167em;border-radius:.33333em;background-color:#b0c9dc}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_twelveStars .np_twelveStars_wrapper{position:relative;width:100%;height:100%}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_twelveStars .np_twelveStars_wrapper .np_triangle{position:absolute;left:100%;bottom:10.83333em;width:0;height:0;content:"";border-left:1.04167em solid #b0c9dc;border-top:.83333em solid transparent;border-bottom:.83333em solid transparent}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_twelveStars .np_twelveStars_wrapper .np_triangle.on,.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_twelveStars .np_twelveStars_wrapper .np_triangle:active{border-left:1.04167em solid #95b7d1}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_twelveStars .np_twelveStars_wrapper .np_down_box,.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_twelveStars .np_twelveStars_wrapper .np_up_box{width:5.83333em;height:1.66667em;text-align:center}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_twelveStars .np_twelveStars_wrapper .np_moveDown,.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_twelveStars .np_twelveStars_wrapper .np_moveUp{display:inline-block;cursor:pointer;width:1.25em;margin-top:.41667em;height:.83333em;background-position:0 0}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_twelveStars .np_twelveStars_wrapper .np_moveDown.click_disabled,.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_twelveStars .np_twelveStars_wrapper .np_moveUp.click_disabled{background-position:0 100%;pointer-events:none}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_twelveStars .np_twelveStars_wrapper .np_moveUp{background:url(resources/wood/images/icon_up.png) no-repeat;background-size:100% auto}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_twelveStars .np_twelveStars_wrapper .np_moveDown{background:url(resources/wood/images/icon_down.png) no-repeat;background-size:100% auto}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_twelveStars .np_twelveStars_wrapper .np_twelveList{width:100%;height:32.29167em;overflow:hidden}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_twelveStars .np_twelveStars_wrapper .np_starItem{margin-top:-.04167em;width:5.83333em;height:6.54167em;text-align:center}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_twelveStars .np_twelveStars_wrapper .np_starItem.on,.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_twelveStars .np_twelveStars_wrapper .np_starItem:active{background-color:rgba(87,143,184,.3)}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_twelveStars .np_twelveStars_wrapper .np_starItem .star_text{margin-top:4.5em;display:inline-block;max-width:5.41667em;word-break:break-all}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_twelveStars .np_twelveStars_wrapper .np_starItem .star_text .text{font-family:microsoft yahei;font-size:1.16667em;color:#292525}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_twelveStars .np_twelveStars_wrapper .item_1{background:url(resources/wood/images/icon_item1.png) no-repeat;background-size:100% auto}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_twelveStars .np_twelveStars_wrapper .item_2{background:url(resources/wood/images/icon_item2.png) no-repeat;background-size:100% auto}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_twelveStars .np_twelveStars_wrapper .item_3{background:url(resources/wood/images/icon_item3.png) no-repeat;background-size:100% auto}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_twelveStars .np_twelveStars_wrapper .item_4{position:relative;background:url(resources/wood/images/icon_item4.png) no-repeat;background-size:100% auto}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_twelveStars .np_twelveStars_wrapper .item_5{background:url(resources/wood/images/icon_item5.png) no-repeat;background-size:100% auto}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_twelveStars .np_twelveStars_wrapper .item_6{background:url(resources/wood/images/icon_item6.png) no-repeat;background-size:100% auto}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_twelveStars .np_twelveStars_wrapper .item_7{background:url(resources/wood/images/icon_item7.png) no-repeat;background-size:100% auto}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_twelveStars .np_twelveStars_wrapper .item_8{background:url(resources/wood/images/icon_item8.png) no-repeat;background-size:100% auto}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_twelveStars .np_twelveStars_wrapper .item_9{background:url(resources/wood/images/icon_item9.png) no-repeat;background-size:100% auto}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_twelveStars .np_twelveStars_wrapper .item_10{background:url(resources/wood/images/icon_item10.png) no-repeat;background-size:100% auto}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_twelveStars .np_twelveStars_wrapper .item_11{background:url(resources/wood/images/icon_item11.png) no-repeat;background-size:100% auto}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_twelveStars .np_twelveStars_wrapper .item_12{background:url(resources/wood/images/icon_item12.png) no-repeat;background-size:100% auto}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_geometry{position:absolute;top:50%;margin-top:-3.33333em;right:7.29167em;width:5.83333em;height:13.08333em;border-radius:.33333em;background-color:#b0c9dc}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_geometry .np_triangle{position:absolute;left:100%;top:2.5em;width:0;height:0;content:"";border-left:1.04167em solid #b0c9dc;border-top:.83333em solid transparent;border-bottom:.83333em solid transparent}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_geometry .np_triangle.on,.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_geometry .np_triangle:active{border-left:1.04167em solid #95b7d1}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_geometry .np_geometryItem{width:5.83333em;height:6.54167em;margin-top:-1px;text-align:center}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_geometry .np_geometryItem.on,.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_geometry .np_geometryItem:active{background-color:rgba(87,143,184,.3)}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_geometry .item_1{border-top-left-radius:.25em;border-top-right-radius:.25em;background:url(resources/wood/images/icon_star_four.png) no-repeat;background-size:100% auto}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_geometry .item_2{border-bottom-left-radius:.25em;border-bottom-right-radius:.25em;background:url(resources/wood/images/icon_star_five.png) no-repeat;background-size:100% auto}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_gridColor{position:absolute;top:50%;right:7.29167em;width:5.83333em;border-radius:.33333em;background-color:#b0c9dc}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_gridColor .np_triangle{position:absolute;left:100%;bottom:7.5em;width:0;height:0;content:"";border-left:1.04167em solid #b0c9dc;border-top:.83333em solid transparent;border-bottom:.83333em solid transparent}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_gridColor .np_triangle.on,.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_gridColor .np_triangle:active{border-left:1.04167em solid #95b7d1}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_gridColor .np_gridColorItem{width:5.83333em;height:6.54167em;margin-top:-1px;background:url(resources/wood/images/icon_gridcolor.png) no-repeat;background-size:100% auto;text-align:center}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_gridColor .np_gridColorItem.on,.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_gridColor .np_gridColorItem:active{background-color:rgba(87,143,184,.3)}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_gridColor .np_gridColorItem .np_text{margin-top:4.5em;display:inline-block}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_gridColor .np_gridColorItem .np_text .text{font-family:microsoft yahei;font-size:1.16667em;color:#292525}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_gridColor .item_1{border-top-left-radius:.25em;border-top-right-radius:.25em;background-position:0 0}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_gridColor .item_2{background-position:left -7em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_gridColor .item_3{background-position:left -13.91667em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_gridColor .item_4{border-bottom-left-radius:.25em;border-bottom-right-radius:.25em;background-position:0 100%}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_main_box_wrapper{width:100%;height:100%;background-color:#b8cdde;float:left;text-align:center}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_main_box_wrapper:after{display:inline-block;vertical-align:middle;width:0;height:100%;content:""}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box{position:relative;display:inline-block;vertical-align:middle;background-color:#c8d7e1;z-index:5}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_10{width:29.83333em;height:29.83333em;margin-top:-2.91667em;position:relative}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_10 .np_axis_box_10{width:29.25em;height:29.25em;margin:.29167em auto;background-color:#f3f3f3}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_10 .np_axis_tick{width:2.25em;height:1.58333em;text-align:center}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_10 .np_axis_tick .text{font-size:2em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_10 .np_axis_ticks_h{bottom:-2.91667em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_10 .np_axis_ticks_h .np_axis_tick{margin-left:-1.125em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_10 .np_axis_ticks_h .tick_0{left:0}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_10 .np_axis_ticks_h .tick_1{left:10%}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_10 .np_axis_ticks_h .tick_2{left:20%}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_10 .np_axis_ticks_h .tick_3{left:30%}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_10 .np_axis_ticks_h .tick_4{left:40%}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_10 .np_axis_ticks_h .tick_5{left:50%}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_10 .np_axis_ticks_h .tick_6{left:60%}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_10 .np_axis_ticks_h .tick_7{left:70%}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_10 .np_axis_ticks_h .tick_8{left:80%}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_10 .np_axis_ticks_h .tick_9{left:90%}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_10 .np_axis_ticks_h .tick_10{left:100%}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_10 .np_axis_ticks_h .tick_11,.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_10 .np_axis_ticks_h .tick_12,.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_10 .np_axis_ticks_h .tick_13,.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_10 .np_axis_ticks_h .tick_14,.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_10 .np_axis_ticks_h .tick_15,.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_10 .np_axis_ticks_h .tick_16,.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_10 .np_axis_ticks_h .tick_17{display:none}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_10 .np_axis_ticks_v{left:-3.95833em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_10 .np_axis_ticks_v .np_axis_tick{margin-top:-.79167em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_10 .np_axis_ticks_v .tick_10{top:0}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_10 .np_axis_ticks_v .tick_9{top:10%}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_10 .np_axis_ticks_v .tick_8{top:20%}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_10 .np_axis_ticks_v .tick_7{top:30%}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_10 .np_axis_ticks_v .tick_6{top:40%}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_10 .np_axis_ticks_v .tick_5{top:50%}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_10 .np_axis_ticks_v .tick_4{top:60%}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_10 .np_axis_ticks_v .tick_3{top:70%}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_10 .np_axis_ticks_v .tick_2{top:80%}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_10 .np_axis_ticks_v .tick_1{top:90%}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_10 .np_axis_ticks_v .tick_11,.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_10 .np_axis_ticks_v .tick_12,.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_10 .np_axis_ticks_v .tick_13,.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_10 .np_axis_ticks_v .tick_14,.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_10 .np_axis_ticks_v .tick_15,.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_10 .np_axis_ticks_v .tick_16,.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_10 .np_axis_ticks_v .tick_17{display:none}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_17{width:33.91667em;height:33.91667em;margin-left:1.25em;margin-top:-1.25em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_17 .np_axis_box_10{width:33.33333em;height:33.33333em;margin:.29167em auto;background-color:#f3f3f3}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_17 .np_axis_ticks_v{left:-3.33333em;padding-top:.29167em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_17 .np_axis_ticks_v .np_axis_tick{width:1.5em;height:1.08333em;text-align:center;margin-top:-.54167em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_17 .np_axis_ticks_v .tick_17{top:.97917em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_17 .np_axis_ticks_v .tick_16{top:2.9375em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_17 .np_axis_ticks_v .tick_15{top:4.89583em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_17 .np_axis_ticks_v .tick_14{top:6.85417em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_17 .np_axis_ticks_v .tick_13{top:8.8125em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_17 .np_axis_ticks_v .tick_12{top:10.77083em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_17 .np_axis_ticks_v .tick_11{top:12.72917em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_17 .np_axis_ticks_v .tick_10{top:14.6875em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_17 .np_axis_ticks_v .tick_9{top:16.64583em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_17 .np_axis_ticks_v .tick_8{top:18.60417em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_17 .np_axis_ticks_v .tick_7{top:20.5625em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_17 .np_axis_ticks_v .tick_6{top:22.52083em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_17 .np_axis_ticks_v .tick_5{top:24.47917em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_17 .np_axis_ticks_v .tick_4{top:26.4375em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_17 .np_axis_ticks_v .tick_3{top:28.39583em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_17 .np_axis_ticks_v .tick_2{top:30.35417em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_17 .np_axis_ticks_v .tick_1{top:32.3125em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_17 .text{font-size:1.5em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_17 .np_axis_ticks_h{bottom:-2.5em;padding-left:.29167em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_17 .np_axis_ticks_h .np_axis_tick{width:1.5em;height:1.08333em;text-align:center;margin-left:-.75em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_17 .np_axis_ticks_h .tick_0{display:none}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_17 .np_axis_ticks_h .tick_1{left:.97917em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_17 .np_axis_ticks_h .tick_2{left:2.9375em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_17 .np_axis_ticks_h .tick_3{left:4.89583em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_17 .np_axis_ticks_h .tick_4{left:6.85417em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_17 .np_axis_ticks_h .tick_5{left:8.8125em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_17 .np_axis_ticks_h .tick_6{left:10.77083em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_17 .np_axis_ticks_h .tick_7{left:12.72917em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_17 .np_axis_ticks_h .tick_8{left:14.6875em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_17 .np_axis_ticks_h .tick_9{left:16.64583em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_17 .np_axis_ticks_h .tick_10{left:18.60417em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_17 .np_axis_ticks_h .tick_11{left:20.5625em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_17 .np_axis_ticks_h .tick_12{left:22.52083em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_17 .np_axis_ticks_h .tick_13{left:24.47917em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_17 .np_axis_ticks_h .tick_14{left:26.4375em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_17 .np_axis_ticks_h .tick_15{left:28.39583em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_17 .np_axis_ticks_h .tick_16{left:30.35417em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box.change_axis_17 .np_axis_ticks_h .tick_17{left:32.3125em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box .np_axis_ticks_h{position:absolute;width:100%;height:1.91667em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box .np_axis_ticks_h .np_axis_ticks_h_wrapper{width:100%;height:100%;position:relative}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box .np_axis_ticks_h .np_axis_tick{display:inline-block;position:absolute}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box .np_axis_ticks_h .np_axis_tick .text{font-weight:700;color:#333}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box .np_axis_ticks_h .np_axis_tick .text.change_color_red{color:#cb1f1f}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box .np_axis_ticks_v{position:absolute;width:100%;top:0;width:1.91667em;height:100%}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box .np_axis_ticks_v .np_axis_ticks_v_wrapper{width:100%;height:100%;position:relative}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box .np_axis_ticks_v .np_axis_tick{display:inline-block;position:absolute}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box .np_axis_ticks_v .np_axis_tick .text{font-weight:700;color:#333}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_axis_box_10_box .np_axis_ticks_v .np_axis_tick .text.change_color_red{color:#cb1f1f}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_zoo_animals{position:relative;border-top-right-radius:.33333em;border-bottom-right-radius:.33333em;margin-top:-13.09667em;vertical-align:middle;margin-left:-.33333em;display:inline-block;width:6.25em;background-color:#c8d7e1}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_zoo_animals.change_np_zoo_animals_4{margin-top:-6.59667em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_zoo_animals.change_np_zoo_animals_4 .np_zoo_animal_1{background:url(resources/wood/images/icon_animal_1.png) no-repeat;background-size:100% auto}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_zoo_animals.change_np_zoo_animals_4 .np_zoo_animal_1:before{content:"";height:1px;left:50%;margin-left:-2.5em;display:inline-block;position:absolute;width:5em;background-color:#aab7bf;bottom:1px}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_zoo_animals.change_np_zoo_animals_4 .np_zoo_animal_1.click_disabled{pointer-events:none;background:url(resources/wood/images/icon_animal_1_dis.png) no-repeat;background-size:100% auto}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_zoo_animals.change_np_zoo_animals_4 .np_zoo_animal_1 .icon{width:3.75em;height:3.75em;display:inline-block;background:url(resources/wood/images/icon_elephant.png) no-repeat;background-size:100% 100%}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_zoo_animals.change_np_zoo_animals_4 .np_zoo_animal_2{background:url(resources/wood/images/icon_animal_2.png) no-repeat;background-size:100% auto}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_zoo_animals.change_np_zoo_animals_4 .np_zoo_animal_2:before{content:"";height:1px;left:50%;margin-left:-2.5em;display:inline-block;position:absolute;width:5em;background-color:#aab7bf;bottom:1px}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_zoo_animals.change_np_zoo_animals_4 .np_zoo_animal_2.click_disabled{pointer-events:none;background:url(resources/wood/images/icon_animal_2_dis.png) no-repeat;background-size:100% auto}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_zoo_animals.change_np_zoo_animals_4 .np_zoo_animal_2 .icon{width:3.75em;height:3.75em;display:inline-block;background:url(resources/wood/images/icon_panda.png) no-repeat;background-size:100% 100%}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_zoo_animals.change_np_zoo_animals_4 .np_zoo_animal_3{background:url(resources/wood/images/icon_animal_3.png) no-repeat;background-size:100% auto}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_zoo_animals.change_np_zoo_animals_4 .np_zoo_animal_3:before{content:"";height:1px;left:50%;margin-left:-2.5em;display:inline-block;position:absolute;width:5em;background-color:#aab7bf;bottom:1px}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_zoo_animals.change_np_zoo_animals_4 .np_zoo_animal_3.click_disabled{pointer-events:none;background:url(resources/wood/images/icon_animal_3_dis.png) no-repeat;background-size:100% auto}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_zoo_animals.change_np_zoo_animals_4 .np_zoo_animal_3 .icon{width:3.75em;height:3.75em;display:inline-block;background:url(resources/wood/images/icon_dolphin.png) no-repeat;background-size:100% 100%}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_zoo_animals.change_np_zoo_animals_4 .np_zoo_animal_4{background:url(resources/wood/images/icon_animal_4.png) no-repeat;background-size:100% auto}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_zoo_animals.change_np_zoo_animals_4 .np_zoo_animal_4.click_disabled{pointer-events:none;background:url(resources/wood/images/icon_animal_4_dis.png) no-repeat;background-size:100% auto}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_zoo_animals.change_np_zoo_animals_4 .np_zoo_animal_4 .icon{width:3.75em;height:3.75em;display:inline-block;background:url(resources/wood/images/icon_monkey.png) no-repeat;background-size:100% 100%}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_zoo_animals.change_np_zoo_animals_3 .np_zoo_animal_1{background:url(resources/wood/images/icon_animal_5.png) no-repeat;background-size:100% auto}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_zoo_animals.change_np_zoo_animals_3 .np_zoo_animal_1:before{content:"";height:1px;left:50%;margin-left:-2.5em;display:inline-block;position:absolute;width:5em;background-color:#aab7bf;bottom:1px}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_zoo_animals.change_np_zoo_animals_3 .np_zoo_animal_1.click_disabled{pointer-events:none;background:url(resources/wood/images/icon_animal_5_dis.png) no-repeat;background-size:100% auto}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_zoo_animals.change_np_zoo_animals_3 .np_zoo_animal_1 .icon{width:3.75em;height:3.75em;display:inline-block;background:url(resources/wood/images/icon_eagle.png) no-repeat;background-size:100% 100%}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_zoo_animals.change_np_zoo_animals_3 .np_zoo_animal_2{background:url(resources/wood/images/icon_animal_6.png) no-repeat;background-size:100% auto}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_zoo_animals.change_np_zoo_animals_3 .np_zoo_animal_2:before{content:"";height:1px;left:50%;margin-left:-2.5em;display:inline-block;position:absolute;width:5em;background-color:#aab7bf;bottom:1px}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_zoo_animals.change_np_zoo_animals_3 .np_zoo_animal_2.click_disabled{pointer-events:none;background:url(resources/wood/images/icon_animal_6_dis.png) no-repeat;background-size:100% auto}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_zoo_animals.change_np_zoo_animals_3 .np_zoo_animal_2 .icon{width:3.75em;height:3.75em;display:inline-block;background:url(resources/wood/images/icon_ape.png) no-repeat;background-size:100% 100%}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_zoo_animals.change_np_zoo_animals_3 .np_zoo_animal_3{background:url(resources/wood/images/icon_animal_7.png) no-repeat;background-size:100% auto}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_zoo_animals.change_np_zoo_animals_3 .np_zoo_animal_3.click_disabled{pointer-events:none;background:url(resources/wood/images/icon_animal_7_dis.png) no-repeat;background-size:100% auto}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_zoo_animals.change_np_zoo_animals_3 .np_zoo_animal_3 .icon{width:3.75em;height:3.75em;display:inline-block;background:url(resources/wood/images/icon_tiger.png) no-repeat;background-size:100% 100%}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_zoo_animals.change_np_zoo_animals_3 .np_zoo_animal_4{display:none}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_zoo_animals .np_zoo_animal_1,.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_zoo_animals .np_zoo_animal_2,.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_zoo_animals .np_zoo_animal_3,.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_zoo_animals .np_zoo_animal_4{position:relative;width:6.25em;height:6.54167em;cursor:pointer;text-align:center}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_zoo_animals .np_zoo_animal_1 .icon,.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_zoo_animals .np_zoo_animal_2 .icon,.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_zoo_animals .np_zoo_animal_3 .icon,.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_zoo_animals .np_zoo_animal_4 .icon{position:absolute;z-index:10}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_zoo_animals .np_zoo_animal_1 .star_text,.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_zoo_animals .np_zoo_animal_2 .star_text,.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_zoo_animals .np_zoo_animal_3 .star_text,.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_zoo_animals .np_zoo_animal_4 .star_text{margin-top:4.5em;display:inline-block;max-width:5.41667em;word-break:break-all}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_zoo_animals .np_zoo_animal_1 .star_text .text,.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_zoo_animals .np_zoo_animal_2 .star_text .text,.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_zoo_animals .np_zoo_animal_3 .star_text .text,.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_zoo_animals .np_zoo_animal_4 .star_text .text{font-family:microsoft yahei;font-size:1.16667em;color:#333}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_numpair_box{position:relative;display:inline-block;vertical-align:middle;min-width:13.75em;margin-left:1.41667em;background-color:#bfd3e2;padding:0 .83333em 1.66667em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_numpair_box .np_scroller_np_block .np_show_wor{display:inline-block;vertical-align:middle;width:1.25em;height:1.25em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_numpair_box .np_scroller_np_block.show_right .np_show_wor{background:url(resources/wood/images/icon_right_st.png) no-repeat;background-size:100% 100%}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_numpair_box .np_scroller_np_block.show_right .change_color{color:#04740b}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_numpair_box.change_min_width{min-width:21em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_numpair_box .add_sub_abs,.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_numpair_box.change_position_add_sub .add_sub_rel{display:none}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_numpair_box.change_position_add_sub .add_sub_abs{display:block;position:absolute;right:.83333em;bottom:.83333em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_numpair_box.change_position_add_sub.change_height_850{padding:1.66667em .41667em 3.41667em .83333em!important}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_numpair_box.scroll{float:right;margin-left:0}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_numpair_box.scroll:before{position:absolute;top:0;right:0;content:"";width:1.75em;height:100%;background-color:#b8cdde}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_numpair_box.scroll .np_add_sub_coordinate_box,.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_numpair_box.scroll .np_scroller_np_block{margin-right:1.33333em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_numpair_box.scroll .np_scroller_box{overflow-y:scroll}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_numpair_box.scroll .scrollbar_insert_type::-webkit-scrollbar-thumb{border:1em solid transparent}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_numpair_box.add_scroll:before{position:absolute;top:0;right:0;content:"";width:1.75em;height:100%;background-color:#b2c8dd}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_numpair_box.add_scroll .scrollbar_insert_type::-webkit-scrollbar-thumb{border:1em solid transparent;-webkit-border-image:url(resources/wood/images/vertical-thumb.png) 11 11}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_numpair_box.change_height_850{height:35.41667em;padding:1.25em 1.04167em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_numpair_box.change_height_850 .np_scroller_np_block{height:4.08333em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_numpair_box.change_height_850.scroll{padding:1.25em .41667em 1.25em .83333em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_numpair_box.change_height_780{padding:.20833em 1.04167em .20833em .83333em;height:32.5em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_numpair_box.change_height_780.scroll{padding:.20833em .41667em .20833em .83333em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_bottom .np_back_Main{display:inline-block;vertical-align:middle;float:left;cursor:pointer;margin-top:.83333em;margin-left:5.41667em;width:3.16667em;height:3.25em;background:url(resources/wood/images/icon_back.png) no-repeat;background-size:100% auto;background-position:0 0}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_bottom .np_back_Main.ui_btn_active,.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_bottom .np_back_Main:active{background-position:0 100%}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_bottom .np_btns_list{width:18.75em;margin-right:5em;float:right;height:100%;margin-top:-.20833em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_bottom .np_btns_list .bp_btn_item{display:inline-block;margin-left:.20833em;margin-right:.33333em}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_bottom .np_btns_list .bp_btn_item .tool_operate_bar.click_disabled{pointer-events:none}.exam_skin_wood .NubmerPair_wrapper_student{position:relative;width:100%;height:100%;padding-top:2.66667em;padding-left:4em;padding-right:4em;background-color:#bfd3e2;overflow:hidden}.exam_skin_wood .NubmerPair_wrapper_student.add_scroll .NumberPair_right{padding-right:.33333em}.exam_skin_wood .NubmerPair_wrapper_student.add_scroll .NumberPair_right .np_scroller_box{overflow-y:scroll;overflow-x:hidden}.exam_skin_wood .NubmerPair_wrapper_student.add_scroll .scrollbar_insert_type::-webkit-scrollbar-thumb{border:1em solid transparent;-webkit-border-image:url(resources/wood/images/vertical-thumb.png) 11 11}.exam_skin_wood .NubmerPair_wrapper_student.add_scroll:before{position:absolute;top:0;right:0;content:"";width:1.75em;height:100%;background-color:#b2c8dd}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_toast{position:absolute;width:65em;z-index:10;top:2.66667em;left:50%;margin-left:-32.5em;text-align:center;background-color:#2f2f2f;opacity:.8;border-bottom-left-radius:.41667em;border-bottom-right-radius:.41667em;line-height:1.5;padding:.41667em .41667em 1.04167em 1.25em}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_toast.slideInDown{-webkit-animation:slideInDown 2s infinite;animation:slideInDown 2s infinite;-webkit-animation-iteration-count:1;animation-iteration-count:1;-webkit-animation-fill-mode:forwards;animation-fill-mode:forwards}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_toast.slideOutUp{-webkit-animation:slideOutUp 2s infinite;animation:slideOutUp 2s infinite;-webkit-animation-iteration-count:1;animation-iteration-count:1;-webkit-animation-fill-mode:forwards;animation-fill-mode:forwards}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_toast .text_box{text-align:left}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_toast .text_box .text{font-size:2em;color:#fff}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_toast .text_box .rightRate,.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_toast .text_box .time{font-size:2.5em}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_toast .text_box .percent,.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_toast .text_box .rightRate,.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_toast .text_box .time{color:#4cd254;opacity:1}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_toast.red .percent,.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_toast.red .rightRate{color:#ff4141!important;opacity:1}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left{position:relative;width:50.75em;height:100%;text-align:center;padding-bottom:4.91667em;float:left;z-index:5;background-color:#b8cdde}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left:after{display:inline-block;vertical-align:middle;width:0;height:100%;content:""}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left.change_width_1276{width:48.16667em}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left.change_width_1276+.NumberPair_right{width:23.83333em}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left.change_width_1276+.NumberPair_right .np_scroller_wrap{margin-left:2.08333em}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left.change_width_1218{width:46.75em}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left.change_width_1218+.NumberPair_right{width:25.25em}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left.change_width_1218+.NumberPair_right .np_scroller_wrap{margin-left:2.08333em}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left.change_width_1140{width:43.5em}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left.change_width_1140+.NumberPair_right{width:28.5em}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box{position:relative;display:inline-block;vertical-align:middle;background-color:#c8d7e1;z-index:5}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_10{width:29.83333em;height:29.83333em;margin-top:-2.91667em;margin-left:4em;position:relative}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_10 .np_axis_box_10{width:29.25em;height:29.25em;margin:.29167em auto;background-color:#f3f3f3}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_10 .np_axis_tick{width:2.25em;height:1.58333em;text-align:center}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_10 .np_axis_tick .text{font-size:2em}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_10 .np_axis_ticks_h{bottom:-2.91667em}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_10 .np_axis_ticks_h .np_axis_tick{margin-left:-1.125em}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_10 .np_axis_ticks_h .tick_0{left:0}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_10 .np_axis_ticks_h .tick_1{left:10%}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_10 .np_axis_ticks_h .tick_2{left:20%}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_10 .np_axis_ticks_h .tick_3{left:30%}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_10 .np_axis_ticks_h .tick_4{left:40%}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_10 .np_axis_ticks_h .tick_5{left:50%}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_10 .np_axis_ticks_h .tick_6{left:60%}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_10 .np_axis_ticks_h .tick_7{left:70%}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_10 .np_axis_ticks_h .tick_8{left:80%}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_10 .np_axis_ticks_h .tick_9{left:90%}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_10 .np_axis_ticks_h .tick_10{left:100%}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_10 .np_axis_ticks_h .tick_11,.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_10 .np_axis_ticks_h .tick_12,.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_10 .np_axis_ticks_h .tick_13,.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_10 .np_axis_ticks_h .tick_14,.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_10 .np_axis_ticks_h .tick_15,.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_10 .np_axis_ticks_h .tick_16,.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_10 .np_axis_ticks_h .tick_17{display:none}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_10 .np_axis_ticks_v{left:-3.95833em}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_10 .np_axis_ticks_v .np_axis_tick{margin-top:-.79167em}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_10 .np_axis_ticks_v .tick_10{top:0}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_10 .np_axis_ticks_v .tick_9{top:10%}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_10 .np_axis_ticks_v .tick_8{top:20%}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_10 .np_axis_ticks_v .tick_7{top:30%}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_10 .np_axis_ticks_v .tick_6{top:40%}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_10 .np_axis_ticks_v .tick_5{top:50%}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_10 .np_axis_ticks_v .tick_4{top:60%}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_10 .np_axis_ticks_v .tick_3{top:70%}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_10 .np_axis_ticks_v .tick_2{top:80%}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_10 .np_axis_ticks_v .tick_1{top:90%}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_10 .np_axis_ticks_v .tick_11,.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_10 .np_axis_ticks_v .tick_12,.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_10 .np_axis_ticks_v .tick_13,.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_10 .np_axis_ticks_v .tick_14,.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_10 .np_axis_ticks_v .tick_15,.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_10 .np_axis_ticks_v .tick_16,.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_10 .np_axis_ticks_v .tick_17{display:none}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_17{width:33.91667em;height:33.91667em;margin-top:-1.66667em}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_17 .np_axis_box_10{width:33.33333em;height:33.33333em;margin:.29167em auto;background-color:#f3f3f3}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_17 .np_axis_ticks_v{left:-3.33333em;padding-top:.29167em}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_17 .np_axis_ticks_v .np_axis_tick{width:1.5em;height:1.08333em;text-align:center;margin-top:-.54167em}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_17 .np_axis_ticks_v .tick_17{top:.97917em}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_17 .np_axis_ticks_v .tick_16{top:2.9375em}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_17 .np_axis_ticks_v .tick_15{top:4.89583em}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_17 .np_axis_ticks_v .tick_14{top:6.85417em}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_17 .np_axis_ticks_v .tick_13{top:8.8125em}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_17 .np_axis_ticks_v .tick_12{top:10.77083em}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_17 .np_axis_ticks_v .tick_11{top:12.72917em}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_17 .np_axis_ticks_v .tick_10{top:14.6875em}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_17 .np_axis_ticks_v .tick_9{top:16.64583em}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_17 .np_axis_ticks_v .tick_8{top:18.60417em}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_17 .np_axis_ticks_v .tick_7{top:20.5625em}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_17 .np_axis_ticks_v .tick_6{top:22.52083em}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_17 .np_axis_ticks_v .tick_5{top:24.47917em}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_17 .np_axis_ticks_v .tick_4{top:26.4375em}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_17 .np_axis_ticks_v .tick_3{top:28.39583em}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_17 .np_axis_ticks_v .tick_2{top:30.35417em}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_17 .np_axis_ticks_v .tick_1{top:32.3125em}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_17 .text{font-size:1.5em}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_17 .np_axis_ticks_h{bottom:-2.5em;padding-left:.29167em}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_17 .np_axis_ticks_h .np_axis_tick{width:1.5em;height:1.08333em;text-align:center;margin-left:-.75em}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_17 .np_axis_ticks_h .tick_0{display:none}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_17 .np_axis_ticks_h .tick_1{left:.97917em}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_17 .np_axis_ticks_h .tick_2{left:2.9375em}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_17 .np_axis_ticks_h .tick_3{left:4.89583em}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_17 .np_axis_ticks_h .tick_4{left:6.85417em}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_17 .np_axis_ticks_h .tick_5{left:8.8125em}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_17 .np_axis_ticks_h .tick_6{left:10.77083em}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_17 .np_axis_ticks_h .tick_7{left:12.72917em}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_17 .np_axis_ticks_h .tick_8{left:14.6875em}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_17 .np_axis_ticks_h .tick_9{left:16.64583em}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_17 .np_axis_ticks_h .tick_10{left:18.60417em}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_17 .np_axis_ticks_h .tick_11{left:20.5625em}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_17 .np_axis_ticks_h .tick_12{left:22.52083em}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_17 .np_axis_ticks_h .tick_13{left:24.47917em}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_17 .np_axis_ticks_h .tick_14{left:26.4375em}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_17 .np_axis_ticks_h .tick_15{left:28.39583em}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_17 .np_axis_ticks_h .tick_16{left:30.35417em}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_17 .np_axis_ticks_h .tick_17{left:32.3125em}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box .np_axis_ticks_h{position:absolute;width:100%;height:1.91667em}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box .np_axis_ticks_h .np_axis_ticks_h_wrapper{width:100%;height:100%;position:relative}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box .np_axis_ticks_h .np_axis_tick{display:inline-block;position:absolute}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box .np_axis_ticks_h .np_axis_tick .text{font-weight:700;color:#333}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box .np_axis_ticks_h .np_axis_tick .text.change_color_red{color:#cb1f1f}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box .np_axis_ticks_v{position:absolute;width:100%;top:0;width:1.91667em;height:100%}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box .np_axis_ticks_v .np_axis_ticks_v_wrapper{width:100%;height:100%;position:relative}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box .np_axis_ticks_v .np_axis_tick{display:inline-block;position:absolute}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box .np_axis_ticks_v .np_axis_tick .text{font-weight:700;color:#333}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box .np_axis_ticks_v .np_axis_tick .text.change_color_red{color:#cb1f1f}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_zoo_animals{position:relative;border-top-right-radius:.33333em;border-bottom-right-radius:.33333em;margin-left:-.33333em;margin-top:-13.09667em;display:inline-block;background-color:#c8d7e1;vertical-align:middle}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_zoo_animals.change_width{padding-left:1.70833em;padding-right:.70833em}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_zoo_animals.change_width .np_zoo_animal_1:before,.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_zoo_animals.change_width .np_zoo_animal_2:before,.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_zoo_animals.change_width .np_zoo_animal_3:before,.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_zoo_animals.change_width .np_zoo_animal_4:before{width:6.25em!important;margin-left:-3.125em!important}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_zoo_animals.change_np_zoo_animals_3 .np_zoo_animal_1{background:url(resources/wood/images/icon_animal_5.png) no-repeat;background-size:100% auto}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_zoo_animals.change_np_zoo_animals_3 .np_zoo_animal_1:before{content:"";height:1px;left:50%;margin-left:-2.5em;display:inline-block;position:absolute;width:5em;background-color:#aab7bf;bottom:1px}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_zoo_animals.change_np_zoo_animals_3 .np_zoo_animal_1.click_disabled{pointer-events:none;background:url(resources/wood/images/icon_animal_5_dis.png) no-repeat;background-size:100% auto}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_zoo_animals.change_np_zoo_animals_3 .np_zoo_animal_1 .icon{width:3.75em;height:3.75em;display:inline-block;background:url(resources/wood/images/icon_eagle.png) no-repeat;background-size:100% 100%}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_zoo_animals.change_np_zoo_animals_3 .np_zoo_animal_2{background:url(resources/wood/images/icon_animal_6.png) no-repeat;background-size:100% auto}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_zoo_animals.change_np_zoo_animals_3 .np_zoo_animal_2:before{content:"";height:1px;left:50%;margin-left:-2.5em;display:inline-block;position:absolute;width:5em;background-color:#aab7bf;bottom:1px}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_zoo_animals.change_np_zoo_animals_3 .np_zoo_animal_2.click_disabled{pointer-events:none;background:url(resources/wood/images/icon_animal_6_dis.png) no-repeat;background-size:100% auto}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_zoo_animals.change_np_zoo_animals_3 .np_zoo_animal_2 .icon{width:3.75em;height:3.75em;display:inline-block;background:url(resources/wood/images/icon_ape.png) no-repeat;background-size:100% 100%}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_zoo_animals.change_np_zoo_animals_3 .np_zoo_animal_3{background:url(resources/wood/images/icon_animal_7.png) no-repeat;background-size:100% auto}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_zoo_animals.change_np_zoo_animals_3 .np_zoo_animal_3.click_disabled{pointer-events:none;background:url(resources/wood/images/icon_animal_7_dis.png) no-repeat;background-size:100% auto}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_zoo_animals.change_np_zoo_animals_3 .np_zoo_animal_3 .icon{width:3.75em;height:3.75em;display:inline-block;background:url(resources/wood/images/icon_tiger.png) no-repeat;background-size:100% 100%}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_zoo_animals.change_np_zoo_animals_3 .np_zoo_animal_4{display:none}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_zoo_animals .np_zoo_animal_1,.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_zoo_animals .np_zoo_animal_2,.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_zoo_animals .np_zoo_animal_3,.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_zoo_animals .np_zoo_animal_4{position:relative;width:6.25em;height:6.54167em;cursor:pointer;text-align:center}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_zoo_animals .np_zoo_animal_1 .icon,.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_zoo_animals .np_zoo_animal_2 .icon,.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_zoo_animals .np_zoo_animal_3 .icon,.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_zoo_animals .np_zoo_animal_4 .icon{position:absolute;z-index:10}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_zoo_animals .np_zoo_animal_1 .star_text,.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_zoo_animals .np_zoo_animal_2 .star_text,.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_zoo_animals .np_zoo_animal_3 .star_text,.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_zoo_animals .np_zoo_animal_4 .star_text{margin-top:4.5em;display:inline-block;max-width:5.41667em;word-break:break-all}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_zoo_animals .np_zoo_animal_1 .star_text .text,.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_zoo_animals .np_zoo_animal_2 .star_text .text,.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_zoo_animals .np_zoo_animal_3 .star_text .text,.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_zoo_animals .np_zoo_animal_4 .star_text .text{font-family:microsoft yahei;font-size:1.16667em;color:#333}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_tips_num{width:2.91667em;display:inline-block;vertical-align:middle;margin-top:-23.09667em;margin-left:1.83333em;text-align:center}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_tips_num .text_box .text{font-size:2em;color:#333}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_tips_num .text_box .num_box{text-align:center;display:inline-block;width:2.91667em;height:2.5em;margin:.625em 0;line-height:2.5em;border-radius:.33333em;background-color:#cfe1ef}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_tips_num .text_box .num_box .text{font-size:2.5em;font-weight:700}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_tips_num .text_box.no_more .change_color{color:#a9b6c0}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_right{position:absolute;right:4em;width:33.33333em;display:inline-block;height:100%;padding:2.08333em 0}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_right .np_scroller_box{max-height:37.5em;display:inline-block;text-align:left}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_right .np_scroller_wrap{display:inline-block}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_right .np_scroller_np_block{height:4.16667em;margin-left:.41667em}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_right .np_scroller_np_block.show_right .np_show_wor{background:url(resources/wood/images/icon_right_st.png) no-repeat;background-size:100% 100%}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_right .np_scroller_np_block.show_right .change_color{color:#04740b!important}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_right .np_scroller_np_block.show_wrong .np_show_wor{background:url(resources/wood/images/icon_wrong_st.png) no-repeat;background-size:100% 100%}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_right .np_scroller_np_block.show_wrong .change_color{color:#cb1f1f!important}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_right .np_scroller_np_block.show_wrong .np_card{display:inline-block}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_right .np_scroller_np_block .np_num_text.right .change_color_self{color:#04740b}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_right .np_scroller_np_block .np_show_wor{margin-top:.20833em;display:inline-block;vertical-align:middle;width:1.25em;height:1.25em}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_right .np_scroller_np_block .np_card{-webkit-tap-highlight-color:rgba(255,255,255,0);position:absolute;right:-2.91667em;top:50%;cursor:pointer;margin-top:-1.16667em;display:none;vertical-align:middle;width:2.58333em;height:2.58333em;background:url(resources/wood/images/icon_card_st.png) no-repeat;background-size:100% 100%;-webkit-transform-origin:center center;transform-origin:center center;fill-opacity:1;-webkit-animation-fill-mode:forwards;animation-fill-mode:forwards}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_right .np_scroller_np_block .np_card.ui_btn_active,.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_right .np_scroller_np_block .np_card:active{-webkit-animation:myrotate 1s infinite;animation:myrotate 1s infinite;fill-opacity:0;-webkit-animation-iteration-count:1;animation-iteration-count:1}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_right .np_scroller_np_block .added_num_state{display:inline-block;border-radius:.41667em;border:1px solid #686868;line-height:3.08333em;position:relative;margin:.58333em .125em 0;height:3em;width:3.54167em;text-align:center;padding:0;vertical-align:top;background:linear-gradient(0deg,#fff 0,#e3e3e3);box-shadow:inset 0 2px 5px #c2c6c9}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_right .np_scroller_np_block .added_num_state .num_input_text{font-size:2.5em;font-weight:700;color:#000}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_right .np_scroller_np_block .added_num_state.ui_open,.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_right .np_scroller_np_block .added_num_state:active{border:.125em solid #14a4ea;background:linear-gradient(0deg,#fff 0,#e6e7e8);box-shadow:inset 0 2px 5px #c2c6c9}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_right .np_scroller_np_block .added_num_state.right .change_color_self{color:#04740b!important}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_bottom{position:absolute;bottom:0;width:100%;height:4.91667em;background-color:#cfdee9}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_bottom .np_btns_list{width:18.75em;float:right;height:100%;margin-top:-.33333em}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_bottom .np_btns_list .tool_operate_text{font-size:1.5em;margin-top:.25em}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_bottom .np_btns_list .tool_reset{margin-top:.8em}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_bottom .np_btns_list .bp_btn_item{display:inline-block;margin-left:.20833em;margin-right:.33333em}.exam_skin_wood .NubmerPair_wrapper_student .NumberPair_bottom .np_btns_list .bp_btn_item .tool_operate_bar.click_disabled{pointer-events:none}.exam_skin_wood .np_combtn_drop{white-space:normal;z-index:100;pointer-events:none;position:absolute}.exam_skin_wood .np_combtn_drop .np_numselect_wrap{width:13.41667em;height:11.83333em;border:1px solid #686868;padding:.54167em 0;background-color:#ebebeb;text-align:center;display:inline-block;pointer-events:auto}.exam_skin_wood .np_combtn_drop .np_numselect_wrap a{display:inline-block;width:3.66667em;height:2.25em;line-height:2.25em;color:#4d4d4d;background:#fff;text-align:center;border-radius:.16667em;border:1px solid #9c9c9c;margin:.20833em .125em}.exam_skin_wood .np_combtn_drop .np_numselect_wrap a.ui_btn_active,.exam_skin_wood .np_combtn_drop .np_numselect_wrap a:active{background:#31b0ee;color:#fff!important;border-color:#007ab6}.exam_skin_wood .np_combtn_drop .np_numselect_wrap a.click_disabled{pointer-events:none;background:#a9b6c0;color:#899299;border-color:#9c9c9c}.exam_skin_wood .np_combtn_drop .np_numselect_wrap a span{font-size:2em;vertical-align:top}.exam_skin_wood .np_combtn_drop .np_numselect_wrap a:last-child{width:7.75em}.exam_skin_wood .np_add_sub_coordinate_box{display:inline-block;float:right;margin-top:.41667em;margin-right:.41667em}.exam_skin_wood .np_add_sub_coordinate_box.change_position{position:absolute;right:-.33333em;bottom:.125em}.exam_skin_wood .np_add_sub_coordinate_box .btns-primary{width:3.125em;height:2.29167em;padding:0;margin:0;float:left}.exam_skin_wood .np_add_sub_coordinate_box .btns-primary.coordinate_add{border-top-right-radius:0;border-bottom-right-radius:0}.exam_skin_wood .np_add_sub_coordinate_box .btns-primary.coordinate_sub{border-top-left-radius:0;border-bottom-left-radius:0;border-left:0}.exam_skin_wood .np_add_sub_coordinate_box .btns-primary.click_disabled{background:#c5ced3;border-color:#93989a}.exam_skin_wood .np_add_sub_coordinate_box .btns-primary.click_disabled.add_coordinate{background:url(resources/wood/images/add_coordinate_btn_img_disabled.png) no-repeat;background-size:100% 100%}.exam_skin_wood .np_add_sub_coordinate_box .btns-primary.click_disabled.sub_coordinate{background:url(resources/wood/images/sub_coordinate_btn_img_disabled.png) no-repeat;background-size:100% 100%}.exam_skin_wood .np_add_sub_coordinate_box .btns-primary:not(.click_disabled):active{background:#84c1c4}.exam_skin_wood .np_add_sub_coordinate_box .btns-primary:not(.click_disabled):active .coordinate_btn_img.add_coordinate{background:url(resources/wood/images/add_coordinate_btn_img_active.png) no-repeat;background-size:100% 100%}.exam_skin_wood .np_add_sub_coordinate_box .btns-primary:not(.click_disabled):active .coordinate_btn_img.sub_coordinate{background:url(resources/wood/images/sub_coordinate_btn_img_active.png) no-repeat;background-size:100% 100%}.exam_skin_wood .np_add_sub_coordinate_box .btns-primary .coordinate_btn_img{display:inline-block;width:1.125em;height:1.125em;margin-bottom:.25em}.exam_skin_wood .np_add_sub_coordinate_box .btns-primary .coordinate_btn_img.add_coordinate{background:url(resources/wood/images/add_coordinate_btn_img.png) no-repeat;background-size:100% 100%}.exam_skin_wood .np_add_sub_coordinate_box .btns-primary .coordinate_btn_img.sub_coordinate{background:url(resources/wood/images/sub_coordinate_btn_img.png) no-repeat;background-size:100% 100%}.exam_skin_wood .np_scroller_box{height:100%;width:100%;max-height:35.95833em;overflow:hidden;position:relative}.exam_skin_wood .np_scroller_box.change_block_height .np_scroller_np_block{height:3.75em!important}.exam_skin_wood .np_scroller_box .np_scroller_np_block{text-align:right;line-height:1.5;position:relative}.exam_skin_wood .np_scroller_box .np_scroller_np_block .np_block_title{display:inline-block;vertical-align:middle;font-size:2em}.exam_skin_wood .np_scroller_box .np_scroller_np_block .np_block_title_en{margin-top:.125em}.exam_skin_wood .np_scroller_box .np_scroller_np_block .np_block_title_en,.exam_skin_wood .np_scroller_box .np_scroller_np_block .np_common_text{display:inline-block;font-size:2.5em;vertical-align:middle;font-weight:700}.exam_skin_wood .np_scroller_box .np_scroller_np_block .np_num_text{display:inline-block;vertical-align:middle;height:3.41667em;width:2.83333em;font-weight:700;text-align:center}.exam_skin_wood .np_scroller_box .np_scroller_np_block .np_num_text.change_card{position:relative;background:url(resources/wood/images/icon_card.png) no-repeat;background-size:100% 100%;cursor:pointer;margin-top:.125em;transition:all 1s;-webkit-transform-origin:center center;transform-origin:center center;-webkit-transform:rotateY(0);transform:rotateY(0);fill-opacity:1;z-index:3}.exam_skin_wood .np_scroller_box .np_scroller_np_block .np_num_text.change_card.ui_btn_active,.exam_skin_wood .np_scroller_box .np_scroller_np_block .np_num_text.change_card:active{-webkit-transform:rotateY(90deg);transform:rotateY(90deg);fill-opacity:0}.exam_skin_wood .np_scroller_box .np_scroller_np_block .np_num_text.change_card .text{display:none}.exam_skin_wood .np_scroller_box .np_scroller_np_block .np_num_text .text{font-size:2.5em}.exam_skin_wood .np_scroller_box .np_scroller_np_block .btns-primary{position:relative;margin:.58333em .125em 0;height:3em;width:3.54167em;text-align:center;padding:0;vertical-align:top}.exam_skin_wood .np_scroller_box .np_scroller_np_block .btns-primary.added_num_state{background:linear-gradient(0deg,#fff 0,#e3e3e3)}.exam_skin_wood .np_scroller_box .np_scroller_np_block .btns-primary.added_num_state:active{border:.125em solid #14a4ea;background:linear-gradient(0deg,#fff 0,#e6e7e8);box-shadow:inset 0 .08333em .08333em #cdd0d2}.exam_skin_wood .np_scroller_box .np_scroller_np_block .btns-primary.added_num_state.ui_open{border:.125em solid #14a4ea;background:linear-gradient(0deg,#fff 0,#e6e7e8)}.exam_skin_wood .np_scroller_box .np_scroller_np_block .btns-primary .num_input_text{font-size:2.5em;font-weight:700;color:#000}.exam_skin_wood .np_scroller_box .np_scroller_np_block .btns-primary:active .num_input_text{color:#fff!important}.exam_skin_wood .scrollbar_insert_type::-webkit-scrollbar{width:.91667em;height:.83333em}.typefaces_long .exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_menu_item .np_text{margin-top:4.4em}.typefaces_long .exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_menu_item .np_text .text{font-size:1.08333em;line-height:.9em;width:auto;display:-webkit-box;overflow:hidden;text-overflow:ellipsis;-webkit-line-clamp:2;-webkit-box-orient:vertical}.typefaces_long .exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_menu_item.np_item1 .np_text{margin-top:4.7em}.typefaces_long .exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_menu_item.np_item3 .np_text .text{word-wrap:break-word;word-break:break-word}.typefaces_long .exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_bottom .np_btns_list{margin-top:0;padding-top:.2em;width:30em;text-align:right}.typefaces_long .exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_bottom .np_btns_list .bp_btn_item{vertical-align:top}.typefaces_long .exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_main_box_wrapper{text-align:left;padding-left:5em}.typefaces_long .exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_main_box_wrapper .np_axis_box_10_box{text-align:center;vertical-align:top;margin-top:2.31667em}.typefaces_long .exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_main_box_wrapper .np_axis_box_10_box.change_axis_17{margin-top:1.21667em;margin-left:0}.typefaces_long .exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_main_box_wrapper .np_zoo_animals{vertical-align:top;margin-top:2.31667em}.typefaces_long .exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_main_box_wrapper .np_zoo_animals .np_zoo_animal_1,.typefaces_long .exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_main_box_wrapper .np_zoo_animals .np_zoo_animal_2,.typefaces_long .exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_main_box_wrapper .np_zoo_animals .np_zoo_animal_3,.typefaces_long .exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_main_box_wrapper .np_zoo_animals .np_zoo_animal_4{height:auto;padding-bottom:.6em}.typefaces_long .exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_main_box_wrapper .np_zoo_animals .np_zoo_animal_1 .star_text,.typefaces_long .exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_main_box_wrapper .np_zoo_animals .np_zoo_animal_2 .star_text,.typefaces_long .exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_main_box_wrapper .np_zoo_animals .np_zoo_animal_3 .star_text,.typefaces_long .exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_main_box_wrapper .np_zoo_animals .np_zoo_animal_4 .star_text{line-height:.8em}.typefaces_long .exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_main_box_wrapper .np_zoo_animals .np_zoo_animal_1 .star_text .text,.typefaces_long .exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_main_box_wrapper .np_zoo_animals .np_zoo_animal_2 .star_text .text,.typefaces_long .exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_main_box_wrapper .np_zoo_animals .np_zoo_animal_3 .star_text .text,.typefaces_long .exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_main_box_wrapper .np_zoo_animals .np_zoo_animal_4 .star_text .text{font-size:1em}.typefaces_long .exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_numpair_box{max-width:23.6em}.typefaces_long .exam_skin_wood .np_scroller_box .np_scroller_np_block{height:3.8em}.typefaces_long .exam_skin_wood .np_scroller_box .np_scroller_np_block .np_block_title{font-size:1.75em;max-width:4.1em;line-height:.9;text-align:center;float:left;height:1.9em;word-wrap:break-word;word-break:break-all;width:auto;display:-webkit-box;overflow:hidden;text-overflow:ellipsis;-webkit-line-clamp:2;-webkit-box-orient:vertical;position:relative;top:50%;-webkit-transform:translateY(-50%);transform:translateY(-50%)}.typefaces_long .exam_skin_wood .np_scroller_box .np_scroller_np_block .np_num_text{margin-left:.125em;margin-right:.125em;width:3.54167em}.typefaces_long .exam_skin_wood .np_scroller_box .np_scroller_np_block .np_num_text.change_card{background-size:auto 100%;background-position:50%}.typefaces_long .exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_twelveStars .np_twelveStars_wrapper .np_starItem .star_text .text{font-size:1em;width:auto;display:-webkit-box;overflow:hidden;text-overflow:ellipsis;-webkit-line-clamp:2;-webkit-box-orient:vertical}.typefaces_long .exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_gridColor .np_gridColorItem .np_text{margin-top:4.3em}.typefaces_long .exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_gridColor .np_gridColorItem .np_text .text{font-size:1em;width:auto;display:-webkit-box;overflow:hidden;text-overflow:ellipsis;-webkit-line-clamp:2;-webkit-box-orient:vertical}.typefaces_long .exam_skin_wood .tool_operate_bar{max-width:none}.typefaces_long .exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_bottom .np_btns_list .bp_btn_item{margin-left:2.40833em}.typefaces_long .exam_skin_wood .NubmerPair_wrapper_student .NumberPair_bottom .np_btns_list{margin-top:0;width:30em;text-align:right}.typefaces_long .exam_skin_wood .NubmerPair_wrapper_student .NumberPair_bottom .np_btns_list .tool_reset{margin-top:0}.typefaces_long .exam_skin_wood .NubmerPair_wrapper_student .NumberPair_bottom .np_btns_list .tool_operate_text{font-size:1.16667em}.typefaces_long .exam_skin_wood .NubmerPair_wrapper_student .NumberPair_bottom .np_btns_list .bp_btn_item{margin-left:.60833em;margin-right:.73333em;margin-top:.4em}.typefaces_long .exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_zoo_animals{vertical-align:top;margin-top:2.31667em}.typefaces_long .exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_zoo_animals .np_zoo_animal_1,.typefaces_long .exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_zoo_animals .np_zoo_animal_2,.typefaces_long .exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_zoo_animals .np_zoo_animal_3,.typefaces_long .exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_zoo_animals .np_zoo_animal_4{height:auto;padding-bottom:.6em}.typefaces_long .exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_zoo_animals .np_zoo_animal_1 .star_text,.typefaces_long .exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_zoo_animals .np_zoo_animal_2 .star_text,.typefaces_long .exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_zoo_animals .np_zoo_animal_3 .star_text,.typefaces_long .exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_zoo_animals .np_zoo_animal_4 .star_text{line-height:.8em}.typefaces_long .exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_zoo_animals .np_zoo_animal_1 .star_text .text,.typefaces_long .exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_zoo_animals .np_zoo_animal_2 .star_text .text,.typefaces_long .exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_zoo_animals .np_zoo_animal_3 .star_text .text,.typefaces_long .exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_zoo_animals .np_zoo_animal_4 .star_text .text{font-size:1em}.typefaces_long .exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_10,.typefaces_long .exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_zoo_animals.change_width{vertical-align:top;margin-top:4em}.typefaces_long .exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_17{vertical-align:top;margin-top:1em;margin-left:-5em}.typefaces_long .exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .change_axis_17+.np_zoo_animals+.np_tips_num{position:absolute;right:0;top:0;margin:0;width:9em}.typefaces_long .exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_tips_num{position:absolute;right:1em;top:0;margin:0;width:16em}.typefaces_ru_RU .exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_menu_item .np_text{margin-top:4.4em}.typefaces_ru_RU .exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_menu_item .np_text .text{font-size:1.08333em;line-height:.9em;width:auto;display:-webkit-box;overflow:hidden;text-overflow:ellipsis;-webkit-line-clamp:2;-webkit-box-orient:vertical}.typefaces_ru_RU .exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_menu_item.np_item1 .np_text{margin-top:4.7em}.typefaces_ru_RU .exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_menu_item.np_item3 .np_text .text{word-wrap:break-word;word-break:break-word}.typefaces_ru_RU .exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_bottom .np_btns_list{margin-top:0;padding-top:.2em;width:30em;text-align:right}.typefaces_ru_RU .exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_bottom .np_btns_list .bp_btn_item{vertical-align:top}.typefaces_ru_RU .exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_main_box_wrapper{text-align:left;padding-left:5em}.typefaces_ru_RU .exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_main_box_wrapper .np_axis_box_10_box{text-align:center;vertical-align:top;margin-top:2.31667em}.typefaces_ru_RU .exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_main_box_wrapper .np_axis_box_10_box.change_axis_17{margin-top:1.21667em;margin-left:0}.typefaces_ru_RU .exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_main_box_wrapper .np_zoo_animals{vertical-align:top;margin-top:2.31667em}.typefaces_ru_RU .exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_main_box_wrapper .np_zoo_animals .np_zoo_animal_1,.typefaces_ru_RU .exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_main_box_wrapper .np_zoo_animals .np_zoo_animal_2,.typefaces_ru_RU .exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_main_box_wrapper .np_zoo_animals .np_zoo_animal_3,.typefaces_ru_RU .exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_main_box_wrapper .np_zoo_animals .np_zoo_animal_4{height:auto;padding-bottom:.6em}.typefaces_ru_RU .exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_main_box_wrapper .np_zoo_animals .np_zoo_animal_1 .star_text,.typefaces_ru_RU .exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_main_box_wrapper .np_zoo_animals .np_zoo_animal_2 .star_text,.typefaces_ru_RU .exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_main_box_wrapper .np_zoo_animals .np_zoo_animal_3 .star_text,.typefaces_ru_RU .exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_main_box_wrapper .np_zoo_animals .np_zoo_animal_4 .star_text{line-height:.8em}.typefaces_ru_RU .exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_main_box_wrapper .np_zoo_animals .np_zoo_animal_1 .star_text .text,.typefaces_ru_RU .exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_main_box_wrapper .np_zoo_animals .np_zoo_animal_2 .star_text .text,.typefaces_ru_RU .exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_main_box_wrapper .np_zoo_animals .np_zoo_animal_3 .star_text .text,.typefaces_ru_RU .exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_main_box_wrapper .np_zoo_animals .np_zoo_animal_4 .star_text .text{font-size:1em}.typefaces_ru_RU .exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_main_box .np_numpair_box{max-width:23.6em}.typefaces_ru_RU .exam_skin_wood .np_scroller_box .np_scroller_np_block{height:3.8em}.typefaces_ru_RU .exam_skin_wood .np_scroller_box .np_scroller_np_block .np_block_title{font-size:1.75em;max-width:4.1em;line-height:.9;text-align:center;float:left;height:1.9em;word-wrap:break-word;word-break:break-all;width:auto;display:-webkit-box;overflow:hidden;text-overflow:ellipsis;-webkit-line-clamp:2;-webkit-box-orient:vertical;position:relative;top:50%;-webkit-transform:translateY(-50%);transform:translateY(-50%)}.typefaces_ru_RU .exam_skin_wood .np_scroller_box .np_scroller_np_block .np_num_text{margin-left:.125em;margin-right:.125em;width:3.54167em}.typefaces_ru_RU .exam_skin_wood .np_scroller_box .np_scroller_np_block .np_num_text.change_card{background-size:auto 100%;background-position:50%}.typefaces_ru_RU .exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_twelveStars .np_twelveStars_wrapper .np_starItem .star_text .text{font-size:1em;width:auto;display:-webkit-box;overflow:hidden;text-overflow:ellipsis;-webkit-line-clamp:2;-webkit-box-orient:vertical}.typefaces_ru_RU .exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_gridColor .np_gridColorItem .np_text{margin-top:4.3em}.typefaces_ru_RU .exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_gridColor .np_gridColorItem .np_text .text{font-size:1em;width:auto;display:-webkit-box;overflow:hidden;text-overflow:ellipsis;-webkit-line-clamp:2;-webkit-box-orient:vertical}.typefaces_ru_RU .exam_skin_wood .tool_operate_bar{max-width:none}.typefaces_ru_RU .exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_bottom .np_btns_list .bp_btn_item{margin-left:2.40833em}.typefaces_ru_RU .exam_skin_wood .NubmerPair_wrapper_student .NumberPair_bottom .np_btns_list{margin-top:0;width:30em;text-align:right}.typefaces_ru_RU .exam_skin_wood .NubmerPair_wrapper_student .NumberPair_bottom .np_btns_list .tool_reset{margin-top:0}.typefaces_ru_RU .exam_skin_wood .NubmerPair_wrapper_student .NumberPair_bottom .np_btns_list .tool_operate_text{font-size:1.16667em}.typefaces_ru_RU .exam_skin_wood .NubmerPair_wrapper_student .NumberPair_bottom .np_btns_list .bp_btn_item{margin-left:.60833em;margin-right:.73333em;margin-top:.4em}.typefaces_ru_RU .exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_zoo_animals{vertical-align:top;margin-top:2.31667em}.typefaces_ru_RU .exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_zoo_animals .np_zoo_animal_1,.typefaces_ru_RU .exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_zoo_animals .np_zoo_animal_2,.typefaces_ru_RU .exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_zoo_animals .np_zoo_animal_3,.typefaces_ru_RU .exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_zoo_animals .np_zoo_animal_4{height:auto;padding-bottom:.6em}.typefaces_ru_RU .exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_zoo_animals .np_zoo_animal_1 .star_text,.typefaces_ru_RU .exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_zoo_animals .np_zoo_animal_2 .star_text,.typefaces_ru_RU .exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_zoo_animals .np_zoo_animal_3 .star_text,.typefaces_ru_RU .exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_zoo_animals .np_zoo_animal_4 .star_text{line-height:.8em}.typefaces_ru_RU .exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_zoo_animals .np_zoo_animal_1 .star_text .text,.typefaces_ru_RU .exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_zoo_animals .np_zoo_animal_2 .star_text .text,.typefaces_ru_RU .exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_zoo_animals .np_zoo_animal_3 .star_text .text,.typefaces_ru_RU .exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_zoo_animals .np_zoo_animal_4 .star_text .text{font-size:1em}.typefaces_ru_RU .exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_10,.typefaces_ru_RU .exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_zoo_animals.change_width{vertical-align:top;margin-top:4em}.typefaces_ru_RU .exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_axis_box_10_box.change_axis_17{vertical-align:top;margin-top:1em;margin-left:-5em}.typefaces_ru_RU .exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .change_axis_17+.np_zoo_animals+.np_tips_num{position:absolute;right:0;top:0;margin:0;width:9em}.typefaces_ru_RU .exam_skin_wood .NubmerPair_wrapper_student .NumberPair_left .np_tips_num{position:absolute;right:1em;top:0;margin:0;width:16em}.exam_skin_wood .np_scroller_box .np_scroller_np_block .np_num_text.change_card{-webkit-transition:transform 1s;transition:transform 1s}.exam_skin_wood .NubmerPair_wrapper_teacher .NumberPair_main .np_twelveStars{margin-top:-17.4em}]]></css><view><![CDATA[<div class="exam_skin_wood"><div class="NumberPairEntrance_wrapper"><div class="NumberPairEntrance"><div class="tool_btns_box"><a class="NumberPair_btn"><span class="text" data-bind="text: numpair_write"></span> </a><a class="FindLocation_btn"><span class="text" data-bind="text: numpair_lookfor"></span></a></div></div></div><div class="NubmerPair_wrapper teacher hide_dom"><div class="NubmerPair_wrapper_student add_scroll"><div class="NumberPair_toast hide_dom"><p class="text_box"><span class="text" data-bind="text: numpair_stu_compleTime"></span> <span class="text time js_minute">2</span> <span class="text js_minute" data-bind="text: numpair_stu_minute"></span> <span class="text time js_second">60</span> <span class="text" data-bind="text: numpair_stu_compleDes"></span> <span class="text rightRate">100</span> <span class="text">%。</span></p></div><div class="NumberPair_left"><div class="np_axis_box_10_box change_axis_10"><div class="np_axis_box_10"><div id="stuPaper" class="paper"><svg xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid meet" style="overflow: visible"><defs><pattern id="stu_gridDot" x="0" y="0" width="1" height="1" patternUnits="userSpaceOnUse"><path d="M0,0H1V1" stroke="#a7b4bb" stroke-width="0.05" fill="none"></path></pattern><pattern id="stu_gridBlock" x="0" y="0" width="1" height="1" patternUnits="userSpaceOnUse"><path d="M0,0H1V1" stroke="#a7b4bb" stroke-width="0.05" fill="none"></path></pattern><pattern id="stu_imgBlock" x="1" y="-18" width="17" height="17" patternUnits="userSpaceOnUse"></pattern></defs><g class="transMatrix"><g class="grid_10X10"><rect x="0" y="-10" width="100%" height="100%" fill="url(#stu_gridDot)"></rect><path d="M0,0L0,-10" stroke="#a7b4bb" stroke-width="0.02" fill="none"></path><path d="M0,0L10,0" stroke="#a7b4bb" stroke-width="0.02" fill="none"></path><path d="M0,-10L10,-10" stroke="#a7b4bb" stroke-width="0.02" fill="none"></path><path d="M10,0L10,-10" stroke="#a7b4bb" stroke-width="0.02" fill="none"></path></g><g class="grid_18X18"><rect x="1" y="-18" width="100%" height="100%" fill="url(#stu_gridBlock)"></rect><path d="M1,-1L1,-18" stroke="#a7b4bb" stroke-width="0.02" fill="none"></path><path d="M1,-1L18,-1" stroke="#a7b4bb" stroke-width="0.02" fill="none"></path><path d="M1,-18L18,-18" stroke="#a7b4bb" stroke-width="0.02" fill="none"></path><path d="M18,-1L18,-18" stroke="#a7b4bb" stroke-width="0.02" fill="none"></path></g><g class="clegrid_18X18"><rect x="1" y="-18" width="100%" height="100%" fill="url(#stu_imgBlock)"></rect></g></g></svg></div></div><ul class="np_axis_ticks_h"><div class="np_axis_ticks_h_wrapper"><li class="np_axis_tick tick_0"><span class="text nd_NewRoman">0</span></li><li class="np_axis_tick tick_1"><span class="text nd_NewRoman">1</span></li><li class="np_axis_tick tick_2"><span class="text nd_NewRoman">2</span></li><li class="np_axis_tick tick_3"><span class="text nd_NewRoman">3</span></li><li class="np_axis_tick tick_4"><span class="text nd_NewRoman">4</span></li><li class="np_axis_tick tick_5"><span class="text nd_NewRoman">5</span></li><li class="np_axis_tick tick_6"><span class="text nd_NewRoman">6</span></li><li class="np_axis_tick tick_7"><span class="text nd_NewRoman">7</span></li><li class="np_axis_tick tick_8"><span class="text nd_NewRoman">8</span></li><li class="np_axis_tick tick_9"><span class="text nd_NewRoman">9</span></li><li class="np_axis_tick tick_10"><span class="text nd_NewRoman">10</span></li><li class="np_axis_tick tick_11"><span class="text nd_NewRoman">11</span></li><li class="np_axis_tick tick_12"><span class="text nd_NewRoman">12</span></li><li class="np_axis_tick tick_13"><span class="text nd_NewRoman">13</span></li><li class="np_axis_tick tick_14"><span class="text nd_NewRoman">14</span></li><li class="np_axis_tick tick_15"><span class="text nd_NewRoman">15</span></li><li class="np_axis_tick tick_16"><span class="text nd_NewRoman">16</span></li><li class="np_axis_tick tick_17"><span class="text nd_NewRoman">17</span></li></div></ul><ul class="np_axis_ticks_v"><div class="np_axis_ticks_v_wrapper"><li class="np_axis_tick tick_10"><span class="text nd_NewRoman">10</span></li><li class="np_axis_tick tick_9"><span class="text nd_NewRoman">9</span></li><li class="np_axis_tick tick_8"><span class="text nd_NewRoman">8</span></li><li class="np_axis_tick tick_7"><span class="text nd_NewRoman">7</span></li><li class="np_axis_tick tick_6"><span class="text nd_NewRoman">6</span></li><li class="np_axis_tick tick_5"><span class="text nd_NewRoman">5</span></li><li class="np_axis_tick tick_4"><span class="text nd_NewRoman">4</span></li><li class="np_axis_tick tick_3"><span class="text nd_NewRoman">3</span></li><li class="np_axis_tick tick_2"><span class="text nd_NewRoman">2</span></li><li class="np_axis_tick tick_1"><span class="text nd_NewRoman">1</span></li><li class="np_axis_tick tick_11"><span class="text nd_NewRoman">11</span></li><li class="np_axis_tick tick_12"><span class="text nd_NewRoman">12</span></li><li class="np_axis_tick tick_13"><span class="text nd_NewRoman">13</span></li><li class="np_axis_tick tick_14"><span class="text nd_NewRoman">14</span></li><li class="np_axis_tick tick_15"><span class="text nd_NewRoman">15</span></li><li class="np_axis_tick tick_16"><span class="text nd_NewRoman">16</span></li><li class="np_axis_tick tick_17"><span class="text nd_NewRoman">17</span></li></div></ul></div><ul class="np_zoo_animals change_np_zoo_animals_3 change_width hide_dom"><li class="np_zoo_animal_1 js_zoo_animal"><span class="icon hide_dom"></span> <span class="star_text"><span class="text" data-bind="text: numpair_bridPark"></span></span></li><li class="np_zoo_animal_2 js_zoo_animal"><span class="icon hide_dom"></span> <span class="star_text"><span class="text" data-bind="text: numpair_gorillaHall"></span></span></li><li class="np_zoo_animal_3 js_zoo_animal"><span class="icon hide_dom"></span> <span class="star_text"><span class="text" data-bind="text: numpair_LigerHill"></span></span></li></ul><div class="np_tips_num hide_dom"><p class="text_box"><span class="text" data-bind="text: numpair_stu_leave"></span> <span class="num_box"><span class="text nd_NewRoman change_color js_remain_num">4</span></span> <span class="text" data-bind="text: numpair_stu_leaveNum"></span></p></div><div class="NumberPair_bottom"><ul class="np_btns_list"><li class="bp_btn_item item_1 js_undo"><a href="javascript:;" class="tool_operate_bar"><span class="tool_operate_imgcnt"><i class="tool_operate_icon tool_cexiao"></i> </span><span class="tool_operate_text" data-bind="text: numpair_undo"></span></a></li><li class="bp_btn_item item_2 js_redo"><a href="javascript:;" class="tool_operate_bar"><span class="tool_operate_imgcnt"><i class="tool_operate_icon tool_restore"></i> </span><span class="tool_operate_text" data-bind="text: numpair_redo"></span></a></li><li class="bp_btn_item item_3 js_reset"><a href="javascript:;" class="tool_operate_bar"><span class="tool_operate_imgcnt"><i class="tool_operate_icon tool_reset"></i> </span><span class="tool_operate_text" data-bind="text: numpair_reset"></span></a></li></ul></div></div><div class="NumberPair_right"><div class="np_combtn_drop hide_dom"><div class="np_numselect_wrap"><a href="javascript:void(0);" class="js_keyboard_num"><span class="nd_NewRoman">0</span> </a><a href="javascript:void(0);" class="js_keyboard_num"><span class="nd_NewRoman">1</span> </a><a href="javascript:void(0);" class="js_keyboard_num"><span class="nd_NewRoman">2</span> </a><a href="javascript:void(0);" class="js_keyboard_num"><span class="nd_NewRoman">3</span> </a><a href="javascript:void(0);" class="js_keyboard_num"><span class="nd_NewRoman">4</span> </a><a href="javascript:void(0);" class="js_keyboard_num"><span class="nd_NewRoman">5</span> </a><a href="javascript:void(0);" class="js_keyboard_num"><span class="nd_NewRoman">6</span> </a><a href="javascript:void(0);" class="js_keyboard_num"><span class="nd_NewRoman">7</span> </a><a href="javascript:void(0);" class="js_keyboard_num"><span class="nd_NewRoman">8</span> </a><a href="javascript:void(0);" class="js_keyboard_num"><span class="nd_NewRoman">9</span> </a><a href="javascript:void(0);" class="js_keyboard_num"><span class="nd_NewRoman">10</span></a></div></div><div class="np_scroller_box scrollbar_insert_type rightPart"><div class="np_scroller_wrap"><div class="js_numpairBox"></div></div></div></div></div><div class="NubmerPair_wrapper_teacher"><div class="NumberPair_main menu_findLocation show_pre_1"><ul class="np_menu_box"><li class="np_menu_item np_item1 on js_scene" data-gridid="writeCoor_animateDot_scene1"><span class="np_text"><span class="text" data-bind="text: numpair_scene_zoo"></span></span></li><li class="np_menu_item np_item2"><span class="np_text"><span class="text" data-bind="text: numpair_scene_geometricFigure"></span></span></li><li class="np_menu_item np_item3"><span class="np_text"><span class="text" data-bind="text: numpair_scene_twelveStar"></span></span></li><li class="np_menu_item np_item4"><span class="np_text"><span class="text" data-bind="text: numpair_scene_gridColor"></span></span></li><div class="np_twelveStars js_item_relevant hide_dom"><div class="np_twelveStars_wrapper"><div class="np_triangle"></div><div class="np_up_box"><a class="np_moveUp click_disabled"></a></div><ul class="np_twelveList"><li class="np_starItem item_1 on js_scene" data-gridid="writeCoor_star_scene1"><span class="star_text"><span class="text" data-bind="text: numpair_aries"></span></span></li><li class="np_starItem item_2 js_scene" data-gridid="writeCoor_star_scene2"><span class="star_text"><span class="text" data-bind="text: numpair_taurus"></span></span></li><li class="np_starItem item_3 js_scene" data-gridid="writeCoor_star_scene3"><span class="star_text"><span class="text" data-bind="text: numpair_gemini"></span></span></li><li class="np_starItem item_4 js_scene" data-gridid="writeCoor_star_scene4"><span class="star_text"><span class="text" data-bind="text: numpair_cancer"></span></span></li><li class="np_starItem item_5 js_scene" data-gridid="writeCoor_star_scene5"><span class="star_text"><span class="text" data-bind="text: numpair_leo"></span></span></li><li class="np_starItem item_6 js_scene" data-gridid="writeCoor_star_scene6"><span class="star_text"><span class="text" data-bind="text: numpair_virgo"></span></span></li><li class="np_starItem item_7 js_scene" data-gridid="writeCoor_star_scene7"><span class="star_text"><span class="text" data-bind="text: numpair_libra"></span></span></li><li class="np_starItem item_8 js_scene" data-gridid="writeCoor_star_scene8"><span class="star_text"><span class="text" data-bind="text: numpair_scorpio"></span></span></li><li class="np_starItem item_9 js_scene" data-gridid="writeCoor_star_scene9"><span class="star_text"><span class="text" data-bind="text: numpair_sagittarius"></span></span></li><li class="np_starItem item_10 js_scene" data-gridid="writeCoor_star_scene10"><span class="star_text"><span class="text" data-bind="text: numpair_capricornus"></span></span></li><li class="np_starItem item_11 js_scene" data-gridid="writeCoor_star_scene11"><span class="star_text"><span class="text" data-bind="text: numpair_aquarius"></span></span></li><li class="np_starItem item_12 js_scene" data-gridid="writeCoor_star_scene12"><span class="star_text"><span class="text" data-bind="text: numpair_pisces"></span></span></li></ul><div class="np_down_box"><a class="np_moveDown"></a></div></div></div><div class="np_geometry js_item_relevant hide_dom"><div class="np_triangle on"></div><ul class="np_geometryList"><li class="np_geometryItem item_1 js_scene on" data-gridid="writeCoor_geoDot_scene1"></li><li class="np_geometryItem item_2 js_scene" data-gridid="writeCoor_geoDot_scene2"></li></ul></div><div class="np_gridColor js_item_relevant hide_dom"><div class="np_triangle on"></div><ul class="np_gridColorList"><li class="np_gridColorItem item_1 on js_scene" data-gridid="lookforCoor_drawBlock_scene1"><span class="np_text"><span class="text" data-bind="text: numpair_smilingFace"></span></span></li><li class="np_gridColorItem item_2 js_scene" data-gridid="lookforCoor_drawBlock_scene2"><span class="np_text"><span class="text" data-bind="text: numpair_panda"></span></span></li><li class="np_gridColorItem item_3 js_scene" data-gridid="lookforCoor_drawBlock_scene3"><span class="np_text"><span class="text" data-bind="text: numpair_moleManor"></span></span></li><li class="np_gridColorItem item_4 js_scene" data-gridid="lookforCoor_drawBlock_scene4"><span class="np_text"><span class="text" data-bind="text: numpair_seaKing"></span></span></li></ul></div></ul><div class="np_main_box writeNP_1"><div class="np_main_box_wrapper"><div class="np_axis_box_10_box change_axis_10"><div class="np_axis_box_10"><div id="paper" class="paper"><svg xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid meet" style="overflow: visible"><defs><pattern id="gridDot" x="0" y="0" width="1" height="1" patternUnits="userSpaceOnUse"><path d="M0,0H1V1" stroke="#a7b4bb" stroke-width="0.05" fill="none"></path></pattern><pattern id="gridBlock" x="0" y="0" width="1" height="1" patternUnits="userSpaceOnUse"><path d="M0,0H1V1" stroke="#a7b4bb" stroke-width="0.05" fill="none"></path></pattern><pattern id="imgBlock" x="1" y="-18" width="17" height="17" patternUnits="userSpaceOnUse"></pattern></defs><g class="transMatrix"><g class="grid_10X10"><rect x="0" y="-10" width="100%" height="100%" fill="url(#gridDot)"></rect><path d="M0,0L0,-10" stroke="#a7b4bb" stroke-width="0.02" fill="none"></path><path d="M0,0L10,0" stroke="#a7b4bb" stroke-width="0.02" fill="none"></path><path d="M0,-10L10,-10" stroke="#a7b4bb" stroke-width="0.02" fill="none"></path><path d="M10,0L10,-10" stroke="#a7b4bb" stroke-width="0.02" fill="none"></path></g><g class="grid_18X18"><rect x="1" y="-18" width="100%" height="100%" fill="url(#gridBlock)"></rect><path d="M1,-1L1,-18" stroke="#a7b4bb" stroke-width="0.02" fill="none"></path><path d="M1,-1L18,-1" stroke="#a7b4bb" stroke-width="0.02" fill="none"></path><path d="M1,-18L18,-18" stroke="#a7b4bb" stroke-width="0.02" fill="none"></path><path d="M18,-1L18,-18" stroke="#a7b4bb" stroke-width="0.02" fill="none"></path></g><g class="clegrid_18X18"><rect x="1" y="-18" width="100%" height="100%" fill="url(#imgBlock)"></rect></g></g></svg></div></div><ul class="np_axis_ticks_h"><div class="np_axis_ticks_h_wrapper"><li class="np_axis_tick tick_0"><span class="text nd_NewRoman">0</span></li><li class="np_axis_tick tick_1"><span class="text nd_NewRoman">1</span></li><li class="np_axis_tick tick_2"><span class="text nd_NewRoman">2</span></li><li class="np_axis_tick tick_3"><span class="text nd_NewRoman">3</span></li><li class="np_axis_tick tick_4"><span class="text nd_NewRoman">4</span></li><li class="np_axis_tick tick_5"><span class="text nd_NewRoman">5</span></li><li class="np_axis_tick tick_6"><span class="text nd_NewRoman">6</span></li><li class="np_axis_tick tick_7"><span class="text nd_NewRoman">7</span></li><li class="np_axis_tick tick_8"><span class="text nd_NewRoman">8</span></li><li class="np_axis_tick tick_9"><span class="text nd_NewRoman">9</span></li><li class="np_axis_tick tick_10"><span class="text nd_NewRoman">10</span></li><li class="np_axis_tick tick_11"><span class="text nd_NewRoman">11</span></li><li class="np_axis_tick tick_12"><span class="text nd_NewRoman">12</span></li><li class="np_axis_tick tick_13"><span class="text nd_NewRoman">13</span></li><li class="np_axis_tick tick_14"><span class="text nd_NewRoman">14</span></li><li class="np_axis_tick tick_15"><span class="text nd_NewRoman">15</span></li><li class="np_axis_tick tick_16"><span class="text nd_NewRoman">16</span></li><li class="np_axis_tick tick_17"><span class="text nd_NewRoman">17</span></li></div></ul><ul class="np_axis_ticks_v"><div class="np_axis_ticks_v_wrapper"><li class="np_axis_tick tick_10"><span class="text nd_NewRoman">10</span></li><li class="np_axis_tick tick_9"><span class="text nd_NewRoman">9</span></li><li class="np_axis_tick tick_8"><span class="text nd_NewRoman">8</span></li><li class="np_axis_tick tick_7"><span class="text nd_NewRoman">7</span></li><li class="np_axis_tick tick_6"><span class="text nd_NewRoman">6</span></li><li class="np_axis_tick tick_5"><span class="text nd_NewRoman">5</span></li><li class="np_axis_tick tick_4"><span class="text nd_NewRoman">4</span></li><li class="np_axis_tick tick_3"><span class="text nd_NewRoman">3</span></li><li class="np_axis_tick tick_2"><span class="text nd_NewRoman">2</span></li><li class="np_axis_tick tick_1"><span class="text nd_NewRoman">1</span></li><li class="np_axis_tick tick_11"><span class="text nd_NewRoman">11</span></li><li class="np_axis_tick tick_12"><span class="text nd_NewRoman">12</span></li><li class="np_axis_tick tick_13"><span class="text nd_NewRoman">13</span></li><li class="np_axis_tick tick_14"><span class="text nd_NewRoman">14</span></li><li class="np_axis_tick tick_15"><span class="text nd_NewRoman">15</span></li><li class="np_axis_tick tick_16"><span class="text nd_NewRoman">16</span></li><li class="np_axis_tick tick_17"><span class="text nd_NewRoman">17</span></li></div></ul></div><ul class="np_zoo_animals change_np_zoo_animals_4 js_item_relevant"><li class="np_zoo_animal_1 js_zoo_animal"><span class="icon hide_dom"></span> <span class="star_text"><span class="text" data-bind="text: numpair_elephantHall"></span></span></li><li class="np_zoo_animal_2 js_zoo_animal"><span class="icon hide_dom"></span> <span class="star_text"><span class="text" data-bind="text: numpair_pandaHall"></span></span></li><li class="np_zoo_animal_3 js_zoo_animal"><span class="icon hide_dom"></span> <span class="star_text"><span class="text" data-bind="text: numpair_marineMuseum"></span></span></li><li class="np_zoo_animal_4 js_zoo_animal"><span class="icon hide_dom"></span> <span class="star_text"><span class="text" data-bind="text: numpair_monkeyMountain"></span></span></li></ul><div class="np_numpair_box change_height_780"><div class="np_combtn_drop hide_dom"><div class="np_numselect_wrap"><a href="javascript:void(0);" class="js_keyboard_num"><span class="nd_NewRoman">0</span> </a><a href="javascript:void(0);" class="js_keyboard_num"><span class="nd_NewRoman">1</span> </a><a href="javascript:void(0);" class="js_keyboard_num"><span class="nd_NewRoman">2</span> </a><a href="javascript:void(0);" class="js_keyboard_num"><span class="nd_NewRoman">3</span> </a><a href="javascript:void(0);" class="js_keyboard_num"><span class="nd_NewRoman">4</span> </a><a href="javascript:void(0);" class="js_keyboard_num"><span class="nd_NewRoman">5</span> </a><a href="javascript:void(0);" class="js_keyboard_num"><span class="nd_NewRoman">6</span> </a><a href="javascript:void(0);" class="js_keyboard_num"><span class="nd_NewRoman">7</span> </a><a href="javascript:void(0);" class="js_keyboard_num"><span class="nd_NewRoman">8</span> </a><a href="javascript:void(0);" class="js_keyboard_num"><span class="nd_NewRoman">9</span> </a><a href="javascript:void(0);" class="js_keyboard_num"><span class="nd_NewRoman">10</span></a></div></div><div class="np_scroller_box scrollbar_insert_type rightPart"><div class="js_numpairBox"></div><div class="np_add_sub_coordinate_box add_sub_rel js_operate_area hide_dom"><a href="javascript:void(0);" class="com_btns btns-primary coordinate_add"><span class="coordinate_btn_img add_coordinate"></span> </a><a href="javascript:void(0);" class="com_btns btns-primary coordinate_sub click_disabled"><span class="coordinate_btn_img sub_coordinate"></span></a></div></div><div class="np_add_sub_coordinate_box add_sub_abs"><a href="javascript:void(0);" class="com_btns btns-primary coordinate_add click_disabled"><span class="coordinate_btn_img add_coordinate"></span> </a><a href="javascript:void(0);" class="com_btns btns-primary coordinate_sub"><span class="coordinate_btn_img sub_coordinate"></span></a></div></div></div></div></div><div class="NumberPair_bottom"><a class="np_back_Main"></a><ul class="np_btns_list"><li class="bp_btn_item item_1 js_undo"><a href="javascript:;" class="tool_operate_bar"><span class="tool_operate_imgcnt"><i class="tool_operate_icon tool_cexiao"></i> </span><span class="tool_operate_text" data-bind="text: numpair_undo"></span></a></li><li class="bp_btn_item item_2 js_redo"><a href="javascript:;" class="tool_operate_bar"><span class="tool_operate_imgcnt"><i class="tool_operate_icon tool_restore"></i> </span><span class="tool_operate_text" data-bind="text: numpair_redo"></span></a></li><li class="bp_btn_item item_3 js_reset"><a href="javascript:;" class="tool_operate_bar"><span class="tool_operate_imgcnt"><i class="tool_operate_icon tool_reset"></i> </span><span class="tool_operate_text" data-bind="text: numpair_reset"></span></a></li></ul></div></div></div></div>]]></view><presenter><![CDATA[/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(1);
	__webpack_require__(7);
	__webpack_require__(8);
	__webpack_require__(3);
	__webpack_require__(4);
	__webpack_require__(2);
	__webpack_require__(19);
	__webpack_require__(6);
	__webpack_require__(20);
	module.exports = __webpack_require__(5);


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _GridMain = __webpack_require__(2);

	__webpack_require__(19);

	var _TEventMain = __webpack_require__(20);

	var _STU_EventMain = __webpack_require__(21);

	/* 业务开始*/
	var ctrl = {};
	var i18nData = {};
	var Presenter = BasicPresenter.extend({
	  metaInfo: {
	    name: 'NumberPair',
	    type: PresenterType.PRESENTER_COMPONENT,
	    subtype: ''
	  },
	  /**
	   * Presenter的初始化方法
	   * @private
	   */
	  $init: function $init() {
	    this._super();
	  },
	  /**
	   * Presenter对外暴露的方法
	   */
	  _service_: {
	    constructor: function constructor(parent) {
	      this.parent = parent;
	    },
	    setLocationProperties: function setLocationProperties(properties) {
	      i18nData = properties;
	    },
	    getExtendData: function getExtendData() {
	      var options = {
	        'gridDatas': this.parent.gridMain.getAllData(),
	        'curGridId': this.parent.gridMain.getCurGridId()
	      };
	      return options;
	    },
	    getQuestionInfo: function getQuestionInfo() {
	      var url = '';
	      try {
	        url = JSON.stringify(ctrl.url);
	      } catch (e) {
	        console.log('json stringify failed');
	      }
	      return {
	        'id': ctrl.questionId,
	        'type_code': 'NumberPair',
	        'type_name': i18nData['NumberPair'] || '数对工具',
	        'url': '"' + url + '"',
	        'notExistStatistics': true,
	        'noNeedQuizProgress': true
	      };
	    }

	  },
	  getService: function getService() {
	    this._service_.constructor(this);
	    return this._service_;
	  },
	  /** **以下开始为icPlayer的生命周期方法*****/
	  run: function run(view, model) {
	    var that = this;
	    that.$view = $(view);
	    that.model = model;

	    ctrl.moduleId = model.ID;
	    ctrl.questionId = model.question_id;
	    ctrl.url = model.question_url;

	    that._initComponent();
	    /* 主业务*/
	    // "scene1": {
	    //     /*最大坐标*/
	    //     "matrix": {"maxX": 10, "maxY": 10, "minX": 0, "minY": 0},
	    //     /*坐标类型*/
	    //     "type": "dotGrid",
	    //     /*网格中默认画好的点*/
	    //     "coors": {
	    //         "coor_5_0": {"x": 5, "y": 0}
	    //     },
	    //     /*默认数对*/
	    //     "numPairs": {
	    //         "coor_5_0": {
	    //             "x": 5,
	    //             "y": 0,
	    //             "isVisibleX": false,
	    //             "isVisibleY": false,
	    //             "lineX": false,
	    //             "lineY": false,
	    //             "mark": i18nData.numpair_door,
	    //             "type": "img",
	    //             "imgSrc": that.basePath + "resources/wood/images/icon_gate.png"
	    //         }
	    //     },
	    //     /*是否需要连点成线*/
	    //     "dotConnect": false,
	    //     /*连线完是否需要显示最终图像*/
	    //     "showResImg": false,
	    //     /*点击后是否需要记录数对*/
	    //     "updateNumPairs": true,
	    //     /*学生端点击坐标是否判断正误*/
	    //     "clickToJudge": false,
	    //     /*网格是否可点击加点*/
	    //     "updateCoors": true,
	    //     /*超过右边数对最大数就不可加点*/
	    //     "hasMaxNumpair": true
	    // }
	    var testData = { 'writeCoor': { 'animateDot': { 'scene1': { 'matrix': { 'maxX': 10, 'maxY': 10, 'minX': 0, 'minY': 0 }, 'type': 'dotGrid', 'coors': { 'coor_5_0': { 'x': 5, 'y': 0 } }, 'numPairs': { 'coor_5_0': { 'x': 5, 'y': 0, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': i18nData.numpair_door, 'type': 'img', 'imgSrc': that.basePath + 'resources/wood/images/icon_gate.png' } }, 'dotConnect': false, 'showResImg': false, 'updateNumPairs': true, 'clickToJudge': false, 'updateCoors': true, 'hasMaxNumpair': true } }, 'geoDot': { 'scene1': { 'matrix': { 'maxX': 10, 'maxY': 10, 'minX': 0, 'minY': 0 }, 'type': 'dotGrid', 'coors': { 'coor_5_8': { 'x': 5, 'y': 8 }, 'coor_4_6': { 'x': 4, 'y': 6 }, 'coor_2_5': { 'x': 2, 'y': 5 }, 'coor_4_4': { 'x': 4, 'y': 4 }, 'coor_5_2': { 'x': 5, 'y': 2 }, 'coor_6_4': { 'x': 6, 'y': 4 }, 'coor_8_5': { 'x': 8, 'y': 5 }, 'coor_6_6': { 'x': 6, 'y': 6 } }, 'numPairs': { 'coor_5_8': { 'x': 5, 'y': 8, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'A' }, 'coor_4_6': { 'x': 4, 'y': 6, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'B' }, 'coor_2_5': { 'x': 2, 'y': 5, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'C' }, 'coor_4_4': { 'x': 4, 'y': 4, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'D' }, 'coor_5_2': { 'x': 5, 'y': 2, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'E' }, 'coor_6_4': { 'x': 6, 'y': 4, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'F' }, 'coor_8_5': { 'x': 8, 'y': 5, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'G' }, 'coor_6_6': { 'x': 6, 'y': 6, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'H' } }, 'dotConnect': true, 'connectSeq': { 'coor_5_8': ['coor_6_6'], 'coor_4_6': ['coor_5_8'], 'coor_2_5': ['coor_4_6'], 'coor_4_4': ['coor_2_5'], 'coor_5_2': ['coor_4_4'], 'coor_6_4': ['coor_5_2'], 'coor_8_5': ['coor_6_4'], 'coor_6_6': ['coor_8_5'] }, 'showResImg': false, 'updateNumPairs': false, 'clickToJudge': false }, 'scene2': { 'matrix': { 'maxX': 10, 'maxY': 10, 'minX': 0, 'minY': 0 }, 'type': 'dotGrid', 'coors': { 'coor_5_9': { 'x': 5, 'y': 9 }, 'coor_9_6': { 'x': 9, 'y': 6 }, 'coor_8_1': { 'x': 8, 'y': 1 }, 'coor_2_1': { 'x': 2, 'y': 1 }, 'coor_1_6': { 'x': 1, 'y': 6 } }, 'numPairs': { 'coor_5_9': { 'x': 5, 'y': 9, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'A' }, 'coor_9_6': { 'x': 9, 'y': 6, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'B' }, 'coor_8_1': { 'x': 8, 'y': 1, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'C' }, 'coor_2_1': { 'x': 2, 'y': 1, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'D' }, 'coor_1_6': { 'x': 1, 'y': 6, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'E' } }, 'dotConnect': true, 'connectSeq': { 'coor_5_9': ['coor_9_6'], 'coor_9_6': ['coor_8_1'], 'coor_8_1': ['coor_2_1'], 'coor_2_1': ['coor_1_6'], 'coor_1_6': ['coor_5_9'] }, 'showResImg': false, 'updateNumPairs': false, 'clickToJudge': false } }, 'star': { 'scene1': { 'matrix': { 'maxX': 10, 'maxY': 10, 'minX': 0, 'minY': 0 }, 'type': 'dotGrid', 'coors': { 'coor_2_4': { 'x': 2, 'y': 4 }, 'coor_5_5': { 'x': 5, 'y': 5 }, 'coor_7_6': { 'x': 7, 'y': 6 }, 'coor_8_5': { 'x': 8, 'y': 5 } }, 'numPairs': { 'coor_2_4': { 'x': 2, 'y': 4, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'A' }, 'coor_5_5': { 'x': 5, 'y': 5, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'B' }, 'coor_7_6': { 'x': 7, 'y': 6, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'C' }, 'coor_8_5': { 'x': 8, 'y': 5, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'D' } }, 'dotConnect': true, 'connectSeq': { 'coor_2_4': ['coor_5_5'], 'coor_5_5': ['coor_2_4', 'coor_7_6'], 'coor_7_6': ['coor_5_5', 'coor_8_5'], 'coor_8_5': ['coor_7_6'] }, 'showResImg': false, 'updateNumPairs': false, 'clickToJudge': false }, 'scene2': { 'matrix': { 'maxX': 10, 'maxY': 10, 'minX': 0, 'minY': 0 }, 'type': 'dotGrid', 'coors': { 'coor_4_8': { 'x': 4, 'y': 8 }, 'coor_6_6': { 'x': 6, 'y': 6 }, 'coor_6_4': { 'x': 6, 'y': 4 }, 'coor_7_4': { 'x': 7, 'y': 4 }, 'coor_8_1': { 'x': 8, 'y': 1 }, 'coor_3_7': { 'x': 3, 'y': 7 } }, 'numPairs': { 'coor_4_8': { 'x': 4, 'y': 8, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'A' }, 'coor_6_6': { 'x': 6, 'y': 6, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'B' }, 'coor_6_4': { 'x': 6, 'y': 4, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'C' }, 'coor_7_4': { 'x': 7, 'y': 4, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'D' }, 'coor_8_1': { 'x': 8, 'y': 1, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'E' }, 'coor_3_7': { 'x': 3, 'y': 7, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'F' } }, 'dotConnect': true, 'connectSeq': { 'coor_4_8': ['coor_6_6'], 'coor_6_6': ['coor_4_8', 'coor_6_4'], 'coor_6_4': ['coor_6_6', 'coor_7_4', 'coor_3_7'], 'coor_7_4': ['coor_6_4', 'coor_8_1'], 'coor_8_1': ['coor_7_4'], 'coor_3_7': ['coor_6_4'] }, 'showResImg': false, 'updateNumPairs': false }, 'scene3': { 'matrix': { 'maxX': 10, 'maxY': 10, 'minX': 0, 'minY': 0 }, 'type': 'dotGrid', 'coors': { 'coor_6_2': { 'x': 6, 'y': 2 }, 'coor_7_4': { 'x': 7, 'y': 4 }, 'coor_8_6': { 'x': 8, 'y': 6 }, 'coor_3_8': { 'x': 3, 'y': 8 }, 'coor_2_6': { 'x': 2, 'y': 6 } }, 'numPairs': { 'coor_6_2': { 'x': 6, 'y': 2, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'A' }, 'coor_7_4': { 'x': 7, 'y': 4, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'B' }, 'coor_8_6': { 'x': 8, 'y': 6, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'C' }, 'coor_3_8': { 'x': 3, 'y': 8, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'D' }, 'coor_2_6': { 'x': 2, 'y': 6, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'E' } }, 'dotConnect': true, 'connectSeq': { 'coor_6_2': ['coor_7_4'], 'coor_7_4': ['coor_6_2', 'coor_8_6', 'coor_2_6'], 'coor_8_6': ['coor_7_4', 'coor_3_8'], 'coor_3_8': ['coor_8_6', 'coor_2_6'], 'coor_2_6': ['coor_7_4', 'coor_3_8'] }, 'showResImg': false, 'updateNumPairs': false }, 'scene4': { 'matrix': { 'maxX': 10, 'maxY': 10, 'minX': 0, 'minY': 0 }, 'type': 'dotGrid', 'coors': { 'coor_2_8': { 'x': 2, 'y': 8 }, 'coor_4_5': { 'x': 4, 'y': 5 }, 'coor_4_2': { 'x': 4, 'y': 2 }, 'coor_8_3': { 'x': 8, 'y': 3 } }, 'numPairs': { 'coor_2_8': { 'x': 2, 'y': 8, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'A' }, 'coor_4_5': { 'x': 4, 'y': 5, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'B' }, 'coor_4_2': { 'x': 4, 'y': 2, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'C' }, 'coor_8_3': { 'x': 8, 'y': 3, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'D' } }, 'dotConnect': true, 'connectSeq': { 'coor_2_8': ['coor_4_5'], 'coor_4_5': ['coor_2_8', 'coor_4_2', 'coor_8_3'], 'coor_4_2': ['coor_4_5'], 'coor_8_3': ['coor_4_5'] }, 'showResImg': false, 'updateNumPairs': false }, 'scene5': { 'matrix': { 'maxX': 10, 'maxY': 10, 'minX': 0, 'minY': 0 }, 'type': 'dotGrid', 'coors': { 'coor_6_8': { 'x': 6, 'y': 8 }, 'coor_5_6': { 'x': 5, 'y': 6 }, 'coor_6_5': { 'x': 6, 'y': 5 }, 'coor_8_4': { 'x': 8, 'y': 4 }, 'coor_3_1': { 'x': 3, 'y': 1 }, 'coor_3_3': { 'x': 3, 'y': 3 } }, 'numPairs': { 'coor_6_8': { 'x': 6, 'y': 8, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'A' }, 'coor_5_6': { 'x': 5, 'y': 6, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'B' }, 'coor_6_5': { 'x': 6, 'y': 5, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'C' }, 'coor_8_4': { 'x': 8, 'y': 4, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'D' }, 'coor_3_1': { 'x': 3, 'y': 1, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'E' }, 'coor_3_3': { 'x': 3, 'y': 3, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'F' } }, 'dotConnect': true, 'connectSeq': { 'coor_6_8': ['coor_5_6'], 'coor_5_6': ['coor_6_8', 'coor_6_5'], 'coor_6_5': ['coor_5_6', 'coor_8_4', 'coor_3_3'], 'coor_8_4': ['coor_6_5', 'coor_3_1'], 'coor_3_1': ['coor_8_4', 'coor_3_3'], 'coor_3_3': ['coor_6_5', 'coor_3_1'] }, 'showResImg': false, 'updateNumPairs': false }, 'scene6': { 'matrix': { 'maxX': 10, 'maxY': 10, 'minX': 0, 'minY': 0 }, 'type': 'dotGrid', 'coors': { 'coor_4_7': { 'x': 4, 'y': 7 }, 'coor_6_6': { 'x': 6, 'y': 6 }, 'coor_7_9': { 'x': 7, 'y': 9 }, 'coor_5_4': { 'x': 5, 'y': 4 }, 'coor_8_3': { 'x': 8, 'y': 3 }, 'coor_5_1': { 'x': 5, 'y': 1 }, 'coor_3_1': { 'x': 3, 'y': 1 } }, 'numPairs': { 'coor_4_7': { 'x': 4, 'y': 7, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'A' }, 'coor_6_6': { 'x': 6, 'y': 6, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'B' }, 'coor_7_9': { 'x': 7, 'y': 9, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'C' }, 'coor_5_4': { 'x': 5, 'y': 4, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'D' }, 'coor_8_3': { 'x': 8, 'y': 3, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'E' }, 'coor_5_1': { 'x': 5, 'y': 1, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'F' }, 'coor_3_1': { 'x': 3, 'y': 1, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'G' } }, 'dotConnect': true, 'connectSeq': { 'coor_4_7': ['coor_6_6'], 'coor_6_6': ['coor_4_7', 'coor_7_9', 'coor_5_4', 'coor_8_3'], 'coor_7_9': ['coor_6_6'], 'coor_5_4': ['coor_6_6', 'coor_8_3', 'coor_3_1'], 'coor_8_3': ['coor_6_6', 'coor_5_4', 'coor_5_1'], 'coor_5_1': ['coor_8_3'], 'coor_3_1': ['coor_5_4'] }, 'showResImg': false, 'updateNumPairs': false }, 'scene7': { 'matrix': { 'maxX': 10, 'maxY': 10, 'minX': 0, 'minY': 0 }, 'type': 'dotGrid', 'coors': { 'coor_3_4': { 'x': 3, 'y': 4 }, 'coor_4_5': { 'x': 4, 'y': 5 }, 'coor_5_8': { 'x': 5, 'y': 8 }, 'coor_7_6': { 'x': 7, 'y': 6 }, 'coor_7_3': { 'x': 7, 'y': 3 }, 'coor_5_2': { 'x': 5, 'y': 2 }, 'coor_5_1': { 'x': 5, 'y': 1 } }, 'numPairs': { 'coor_3_4': { 'x': 3, 'y': 4, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'A' }, 'coor_4_5': { 'x': 4, 'y': 5, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'B' }, 'coor_5_8': { 'x': 5, 'y': 8, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'C' }, 'coor_7_6': { 'x': 7, 'y': 6, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'D' }, 'coor_7_3': { 'x': 7, 'y': 3, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'E' }, 'coor_5_2': { 'x': 5, 'y': 2, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'F' }, 'coor_5_1': { 'x': 5, 'y': 1, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'G' } }, 'dotConnect': true, 'connectSeq': { 'coor_3_4': ['coor_4_5'], 'coor_4_5': ['coor_3_4', 'coor_5_8'], 'coor_5_8': ['coor_4_5', 'coor_7_6', 'coor_7_3'], 'coor_7_6': ['coor_5_8', 'coor_7_3'], 'coor_7_3': ['coor_5_8', 'coor_7_6', 'coor_5_2'], 'coor_5_2': ['coor_7_3', 'coor_5_1'], 'coor_5_1': ['coor_5_2'] }, 'showResImg': false, 'updateNumPairs': false }, 'scene8': { 'matrix': { 'maxX': 10, 'maxY': 10, 'minX': 0, 'minY': 0 }, 'type': 'dotGrid', 'coors': { 'coor_3_4': { 'x': 3, 'y': 4 }, 'coor_3_2': { 'x': 3, 'y': 2 }, 'coor_5_3': { 'x': 5, 'y': 3 }, 'coor_5_5': { 'x': 5, 'y': 5 }, 'coor_8_8': { 'x': 8, 'y': 8 }, 'coor_9_7': { 'x': 9, 'y': 7 }, 'coor_9_5': { 'x': 9, 'y': 5 } }, 'numPairs': { 'coor_3_4': { 'x': 3, 'y': 4, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'A' }, 'coor_3_2': { 'x': 3, 'y': 2, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'B' }, 'coor_5_3': { 'x': 5, 'y': 3, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'C' }, 'coor_5_5': { 'x': 5, 'y': 5, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'D' }, 'coor_8_8': { 'x': 8, 'y': 8, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'E' }, 'coor_9_7': { 'x': 9, 'y': 7, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'F' }, 'coor_9_5': { 'x': 9, 'y': 5, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'G' } }, 'dotConnect': true, 'connectSeq': { 'coor_3_4': ['coor_3_2'], 'coor_3_2': ['coor_3_4', 'coor_5_3'], 'coor_5_3': ['coor_3_2', 'coor_5_5'], 'coor_5_5': ['coor_5_3', 'coor_9_7'], 'coor_8_8': ['coor_9_7'], 'coor_9_7': ['coor_5_5', 'coor_8_8', 'coor_9_5'], 'coor_9_5': ['coor_9_7'] }, 'showResImg': false, 'updateNumPairs': false }, 'scene9': { 'matrix': { 'maxX': 10, 'maxY': 10, 'minX': 0, 'minY': 0 }, 'type': 'dotGrid', 'coors': { 'coor_3_8': { 'x': 3, 'y': 8 }, 'coor_4_7': { 'x': 4, 'y': 7 }, 'coor_3_5': { 'x': 3, 'y': 5 }, 'coor_4_4': { 'x': 4, 'y': 4 }, 'coor_6_5': { 'x': 6, 'y': 5 }, 'coor_7_8': { 'x': 7, 'y': 8 }, 'coor_7_4': { 'x': 7, 'y': 4 }, 'coor_4_1': { 'x': 4, 'y': 1 } }, 'numPairs': { 'coor_3_8': { 'x': 3, 'y': 8, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'A' }, 'coor_4_7': { 'x': 4, 'y': 7, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'B' }, 'coor_3_5': { 'x': 3, 'y': 5, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'C' }, 'coor_4_4': { 'x': 4, 'y': 4, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'D' }, 'coor_6_5': { 'x': 6, 'y': 5, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'E' }, 'coor_7_8': { 'x': 7, 'y': 8, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'F' }, 'coor_7_4': { 'x': 7, 'y': 4, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'G' }, 'coor_4_1': { 'x': 4, 'y': 1, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'H' } }, 'dotConnect': true, 'connectSeq': { 'coor_3_8': ['coor_4_7'], 'coor_4_7': ['coor_3_8', 'coor_3_5'], 'coor_3_5': ['coor_4_7', 'coor_4_4', 'coor_6_5', 'coor_4_1'], 'coor_4_4': ['coor_3_5', 'coor_6_5'], 'coor_6_5': ['coor_3_5', 'coor_4_4', 'coor_7_8', 'coor_7_4'], 'coor_7_8': ['coor_6_5'], 'coor_7_4': ['coor_6_5'], 'coor_4_1': ['coor_3_5'] }, 'showResImg': false, 'updateNumPairs': false }, 'scene10': { 'matrix': { 'maxX': 10, 'maxY': 10, 'minX': 0, 'minY': 0 }, 'type': 'dotGrid', 'coors': { 'coor_6_8': { 'x': 6, 'y': 8 }, 'coor_5_4': { 'x': 5, 'y': 4 }, 'coor_3_1': { 'x': 3, 'y': 1 }, 'coor_8_3': { 'x': 8, 'y': 3 } }, 'numPairs': { 'coor_6_8': { 'x': 6, 'y': 8, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'A' }, 'coor_5_4': { 'x': 5, 'y': 4, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'B' }, 'coor_3_1': { 'x': 3, 'y': 1, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'C' }, 'coor_8_3': { 'x': 8, 'y': 3, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'D' } }, 'dotConnect': true, 'connectSeq': { 'coor_6_8': ['coor_8_3'], 'coor_5_4': ['coor_6_8'], 'coor_3_1': ['coor_5_4'], 'coor_8_3': ['coor_3_1'] }, 'showResImg': false, 'updateNumPairs': false }, 'scene11': { 'matrix': { 'maxX': 10, 'maxY': 10, 'minX': 0, 'minY': 0 }, 'type': 'dotGrid', 'coors': { 'coor_7_9': { 'x': 7, 'y': 9 }, 'coor_3_6': { 'x': 3, 'y': 6 }, 'coor_2_3': { 'x': 2, 'y': 3 }, 'coor_4_1': { 'x': 4, 'y': 1 }, 'coor_7_2': { 'x': 7, 'y': 2 }, 'coor_5_4': { 'x': 5, 'y': 4 }, 'coor_6_5': { 'x': 6, 'y': 5 } }, 'numPairs': { 'coor_7_9': { 'x': 7, 'y': 9, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'A' }, 'coor_3_6': { 'x': 3, 'y': 6, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'B' }, 'coor_2_3': { 'x': 2, 'y': 3, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'C' }, 'coor_4_1': { 'x': 4, 'y': 1, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'D' }, 'coor_7_2': { 'x': 7, 'y': 2, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'E' }, 'coor_5_4': { 'x': 5, 'y': 4, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'F' }, 'coor_6_5': { 'x': 6, 'y': 5, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'G' } }, 'dotConnect': true, 'connectSeq': { 'coor_7_9': ['coor_3_6'], 'coor_3_6': ['coor_7_9', 'coor_2_3', 'coor_5_4'], 'coor_2_3': ['coor_3_6', 'coor_4_1'], 'coor_4_1': ['coor_2_3', 'coor_7_2'], 'coor_7_2': ['coor_4_1'], 'coor_5_4': ['coor_3_6', 'coor_6_5'], 'coor_6_5': ['coor_5_4'] }, 'showResImg': false, 'updateNumPairs': false }, 'scene12': { 'matrix': { 'maxX': 10, 'maxY': 10, 'minX': 0, 'minY': 0 }, 'type': 'dotGrid', 'coors': { 'coor_3_2': { 'x': 3, 'y': 2 }, 'coor_4_1': { 'x': 4, 'y': 1 }, 'coor_8_2': { 'x': 8, 'y': 2 }, 'coor_5_6': { 'x': 5, 'y': 6 }, 'coor_4_7': { 'x': 4, 'y': 7 }, 'coor_5_8': { 'x': 5, 'y': 8 }, 'coor_6_7': { 'x': 6, 'y': 7 } }, 'numPairs': { 'coor_3_2': { 'x': 3, 'y': 2, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'A' }, 'coor_4_1': { 'x': 4, 'y': 1, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'B' }, 'coor_8_2': { 'x': 8, 'y': 2, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'C' }, 'coor_5_6': { 'x': 5, 'y': 6, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'D' }, 'coor_4_7': { 'x': 4, 'y': 7, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'E' }, 'coor_5_8': { 'x': 5, 'y': 8, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'F' }, 'coor_6_7': { 'x': 6, 'y': 7, 'isVisibleX': false, 'isVisibleY': false, 'lineX': false, 'lineY': false, 'mark': 'G' } }, 'dotConnect': true, 'connectSeq': { 'coor_3_2': ['coor_4_1'], 'coor_4_1': ['coor_3_2', 'coor_8_2'], 'coor_8_2': ['coor_4_1', 'coor_5_6'], 'coor_5_6': ['coor_8_2', 'coor_4_7', 'coor_6_7'], 'coor_4_7': ['coor_5_6', 'coor_5_8'], 'coor_5_8': ['coor_4_7', 'coor_6_7'], 'coor_6_7': ['coor_5_6', 'coor_5_8'] }, 'showResImg': false, 'updateNumPairs': false } } }, 'lookforCoor': { 'animateDot': { 'scene1': { 'matrix': { 'maxX': 10, 'maxY': 10, 'minX': 0, 'minY': 0 }, 'type': 'dotGrid', 'coors': {}, 'numPairs': { 'coor_5_8': { 'x': 5, 'y': 8, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': i18nData.numpair_bridPark, 'type': 'img', 'imgSrc': that.basePath + 'resources/wood/images/icon_eagle.png' }, 'coor_4_6': { 'x': 4, 'y': 6, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': i18nData.numpair_gorillaHall, 'type': 'img', 'imgSrc': that.basePath + 'resources/wood/images/icon_ape.png' }, 'coor_2_5': { 'x': 2, 'y': 5, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': i18nData.numpair_LigerHill, 'type': 'img', 'imgSrc': that.basePath + 'resources/wood/images/icon_tiger.png' } }, 'dotConnect': false, 'showResImg': false, 'updateNumPairs': false, 'clickToJudge': true, 'updateCoors': true } }, 'geoDot': { 'scene1': { 'matrix': { 'maxX': 10, 'maxY': 10, 'minX': 0, 'minY': 0 }, 'type': 'dotGrid', 'coors': {}, 'numPairs': { 'coor_5_8': { 'x': 5, 'y': 8, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'A' }, 'coor_4_6': { 'x': 4, 'y': 6, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'B' }, 'coor_2_5': { 'x': 2, 'y': 5, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'C' }, 'coor_4_4': { 'x': 4, 'y': 4, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'D' }, 'coor_5_2': { 'x': 5, 'y': 2, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'E' }, 'coor_6_4': { 'x': 6, 'y': 4, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'F' }, 'coor_8_5': { 'x': 8, 'y': 5, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'G' }, 'coor_6_6': { 'x': 6, 'y': 6, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'H' } }, 'dotConnect': true, 'connectSeq': { 'coor_5_8': ['coor_6_6'], 'coor_4_6': ['coor_5_8'], 'coor_2_5': ['coor_4_6'], 'coor_4_4': ['coor_2_5'], 'coor_5_2': ['coor_4_4'], 'coor_6_4': ['coor_5_2'], 'coor_8_5': ['coor_6_4'], 'coor_6_6': ['coor_8_5'] }, 'showResImg': false, 'updateNumPairs': false, 'clickToJudge': true, 'updateCoors': true, 'showResMark': true }, 'scene2': { 'matrix': { 'maxX': 10, 'maxY': 10, 'minX': 0, 'minY': 0 }, 'type': 'dotGrid', 'coors': {}, 'numPairs': { 'coor_5_9': { 'x': 5, 'y': 9, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'A' }, 'coor_9_6': { 'x': 9, 'y': 6, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'B' }, 'coor_8_1': { 'x': 8, 'y': 1, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'C' }, 'coor_2_1': { 'x': 2, 'y': 1, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'D' }, 'coor_1_6': { 'x': 1, 'y': 6, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'E' } }, 'dotConnect': true, 'connectSeq': { 'coor_5_9': ['coor_9_6'], 'coor_9_6': ['coor_8_1'], 'coor_8_1': ['coor_2_1'], 'coor_2_1': ['coor_1_6'], 'coor_1_6': ['coor_5_9'] }, 'showResImg': false, 'updateNumPairs': false, 'clickToJudge': true, 'updateCoors': true, 'showResMark': true } }, 'star': { 'scene1': { 'matrix': { 'maxX': 10, 'maxY': 10, 'minX': 0, 'minY': 0 }, 'type': 'dotGrid', 'coors': {}, 'numPairs': { 'coor_2_4': { 'x': 2, 'y': 4, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'A' }, 'coor_5_5': { 'x': 5, 'y': 5, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'B' }, 'coor_7_6': { 'x': 7, 'y': 6, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'C' }, 'coor_8_5': { 'x': 8, 'y': 5, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'D' } }, 'dotConnect': true, 'connectSeq': { 'coor_2_4': ['coor_5_5'], 'coor_5_5': ['coor_2_4', 'coor_7_6'], 'coor_7_6': ['coor_5_5', 'coor_8_5'], 'coor_8_5': ['coor_7_6'] }, 'showResImg': true, 'resImgSrc': that.basePath + 'resources/wood/images/bg_12.png', 'updateNumPairs': false, 'updateCoors': true, 'showResMark': true }, 'scene2': { 'matrix': { 'maxX': 10, 'maxY': 10, 'minX': 0, 'minY': 0 }, 'type': 'dotGrid', 'coors': {}, 'numPairs': { 'coor_4_8': { 'x': 4, 'y': 8, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'A' }, 'coor_6_6': { 'x': 6, 'y': 6, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'B' }, 'coor_6_4': { 'x': 6, 'y': 4, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'C' }, 'coor_7_4': { 'x': 7, 'y': 4, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'D' }, 'coor_8_1': { 'x': 8, 'y': 1, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'E' }, 'coor_3_7': { 'x': 3, 'y': 7, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'F' } }, 'dotConnect': true, 'connectSeq': { 'coor_4_8': ['coor_6_6'], 'coor_6_6': ['coor_4_8', 'coor_6_4'], 'coor_6_4': ['coor_6_6', 'coor_7_4', 'coor_3_7'], 'coor_7_4': ['coor_6_4', 'coor_8_1'], 'coor_8_1': ['coor_7_4'], 'coor_3_7': ['coor_6_4'] }, 'showResImg': true, 'resImgSrc': that.basePath + 'resources/wood/images/bg_11.png', 'updateNumPairs': false, 'clickToJudge': true, 'updateCoors': true, 'showResMark': true }, 'scene3': { 'matrix': { 'maxX': 10, 'maxY': 10, 'minX': 0, 'minY': 0 }, 'type': 'dotGrid', 'coors': {}, 'numPairs': { 'coor_6_2': { 'x': 6, 'y': 2, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'A' }, 'coor_7_4': { 'x': 7, 'y': 4, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'B' }, 'coor_8_6': { 'x': 8, 'y': 6, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'C' }, 'coor_3_8': { 'x': 3, 'y': 8, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'D' }, 'coor_2_6': { 'x': 2, 'y': 6, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'E' } }, 'dotConnect': true, 'connectSeq': { 'coor_6_2': ['coor_7_4'], 'coor_7_4': ['coor_6_2', 'coor_8_6', 'coor_2_6'], 'coor_8_6': ['coor_7_4', 'coor_3_8'], 'coor_3_8': ['coor_8_6', 'coor_2_6'], 'coor_2_6': ['coor_7_4', 'coor_3_8'] }, 'showResImg': true, 'resImgSrc': that.basePath + 'resources/wood/images/bg_10.png', 'updateNumPairs': false, 'clickToJudge': true, 'updateCoors': true, 'showResMark': true }, 'scene4': { 'matrix': { 'maxX': 10, 'maxY': 10, 'minX': 0, 'minY': 0 }, 'type': 'dotGrid', 'coors': {}, 'numPairs': { 'coor_2_8': { 'x': 2, 'y': 8, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'A' }, 'coor_4_5': { 'x': 4, 'y': 5, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'B' }, 'coor_4_2': { 'x': 4, 'y': 2, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'C' }, 'coor_8_3': { 'x': 8, 'y': 3, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'D' } }, 'dotConnect': true, 'connectSeq': { 'coor_2_8': ['coor_4_5'], 'coor_4_5': ['coor_2_8', 'coor_4_2', 'coor_8_3'], 'coor_4_2': ['coor_4_5'], 'coor_8_3': ['coor_4_5'] }, 'showResImg': true, 'resImgSrc': that.basePath + 'resources/wood/images/bg_9.png', 'updateNumPairs': false, 'clickToJudge': true, 'updateCoors': true, 'showResMark': true }, 'scene5': { 'matrix': { 'maxX': 10, 'maxY': 10, 'minX': 0, 'minY': 0 }, 'type': 'dotGrid', 'coors': {}, 'numPairs': { 'coor_6_8': { 'x': 6, 'y': 8, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'A' }, 'coor_5_6': { 'x': 5, 'y': 6, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'B' }, 'coor_6_5': { 'x': 6, 'y': 5, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'C' }, 'coor_8_4': { 'x': 8, 'y': 4, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'D' }, 'coor_3_1': { 'x': 3, 'y': 1, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'E' }, 'coor_3_3': { 'x': 3, 'y': 3, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'F' } }, 'dotConnect': true, 'connectSeq': { 'coor_6_8': ['coor_5_6'], 'coor_5_6': ['coor_6_8', 'coor_6_5'], 'coor_6_5': ['coor_5_6', 'coor_8_4', 'coor_3_3'], 'coor_8_4': ['coor_6_5', 'coor_3_1'], 'coor_3_1': ['coor_8_4', 'coor_3_3'], 'coor_3_3': ['coor_6_5', 'coor_3_1'] }, 'showResImg': true, 'resImgSrc': that.basePath + 'resources/wood/images/bg_8.png', 'updateNumPairs': false, 'clickToJudge': true, 'updateCoors': true, 'showResMark': true }, 'scene6': { 'matrix': { 'maxX': 10, 'maxY': 10, 'minX': 0, 'minY': 0 }, 'type': 'dotGrid', 'coors': {}, 'numPairs': { 'coor_4_7': { 'x': 4, 'y': 7, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'A' }, 'coor_6_6': { 'x': 6, 'y': 6, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'B' }, 'coor_7_9': { 'x': 7, 'y': 9, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'C' }, 'coor_5_4': { 'x': 5, 'y': 4, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'D' }, 'coor_8_3': { 'x': 8, 'y': 3, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'E' }, 'coor_5_1': { 'x': 5, 'y': 1, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'F' }, 'coor_3_1': { 'x': 3, 'y': 1, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'G' } }, 'dotConnect': true, 'connectSeq': { 'coor_4_7': ['coor_6_6'], 'coor_6_6': ['coor_4_7', 'coor_7_9', 'coor_5_4', 'coor_8_3'], 'coor_7_9': ['coor_6_6'], 'coor_5_4': ['coor_6_6', 'coor_8_3', 'coor_3_1'], 'coor_8_3': ['coor_6_6', 'coor_5_4', 'coor_5_1'], 'coor_5_1': ['coor_8_3'], 'coor_3_1': ['coor_5_4'] }, 'showResImg': true, 'resImgSrc': that.basePath + 'resources/wood/images/bg_7.png', 'updateNumPairs': false, 'clickToJudge': true, 'updateCoors': true, 'showResMark': true }, 'scene7': { 'matrix': { 'maxX': 10, 'maxY': 10, 'minX': 0, 'minY': 0 }, 'type': 'dotGrid', 'coors': {}, 'numPairs': { 'coor_3_4': { 'x': 3, 'y': 4, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'A' }, 'coor_4_5': { 'x': 4, 'y': 5, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'B' }, 'coor_5_8': { 'x': 5, 'y': 8, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'C' }, 'coor_7_6': { 'x': 7, 'y': 6, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'D' }, 'coor_7_3': { 'x': 7, 'y': 3, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'E' }, 'coor_5_2': { 'x': 5, 'y': 2, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'F' }, 'coor_5_1': { 'x': 5, 'y': 1, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'G' } }, 'dotConnect': true, 'connectSeq': { 'coor_3_4': ['coor_4_5'], 'coor_4_5': ['coor_3_4', 'coor_5_8'], 'coor_5_8': ['coor_4_5', 'coor_7_6', 'coor_7_3'], 'coor_7_6': ['coor_5_8', 'coor_7_3'], 'coor_7_3': ['coor_5_8', 'coor_7_6', 'coor_5_2'], 'coor_5_2': ['coor_7_3', 'coor_5_1'], 'coor_5_1': ['coor_5_2'] }, 'showResImg': true, 'resImgSrc': that.basePath + 'resources/wood/images/bg_6.png', 'updateNumPairs': false, 'clickToJudge': true, 'updateCoors': true, 'showResMark': true }, 'scene8': { 'matrix': { 'maxX': 10, 'maxY': 10, 'minX': 0, 'minY': 0 }, 'type': 'dotGrid', 'coors': {}, 'numPairs': { 'coor_3_4': { 'x': 3, 'y': 4, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'A' }, 'coor_3_2': { 'x': 3, 'y': 2, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'B' }, 'coor_5_3': { 'x': 5, 'y': 3, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'C' }, 'coor_5_5': { 'x': 5, 'y': 5, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'D' }, 'coor_8_8': { 'x': 8, 'y': 8, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'E' }, 'coor_9_7': { 'x': 9, 'y': 7, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'F' }, 'coor_9_5': { 'x': 9, 'y': 5, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'G' } }, 'dotConnect': true, 'connectSeq': { 'coor_3_4': ['coor_3_2'], 'coor_3_2': ['coor_3_4', 'coor_5_3'], 'coor_5_3': ['coor_3_2', 'coor_5_5'], 'coor_5_5': ['coor_5_3', 'coor_9_7'], 'coor_8_8': ['coor_9_7'], 'coor_9_7': ['coor_5_5', 'coor_8_8', 'coor_9_5'], 'coor_9_5': ['coor_9_7'] }, 'showResImg': true, 'resImgSrc': that.basePath + 'resources/wood/images/bg_5.png', 'updateNumPairs': false, 'clickToJudge': true, 'updateCoors': true, 'showResMark': true }, 'scene9': { 'matrix': { 'maxX': 10, 'maxY': 10, 'minX': 0, 'minY': 0 }, 'type': 'dotGrid', 'coors': {}, 'numPairs': { 'coor_3_8': { 'x': 3, 'y': 8, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'A' }, 'coor_4_7': { 'x': 4, 'y': 7, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'B' }, 'coor_3_5': { 'x': 3, 'y': 5, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'C' }, 'coor_4_4': { 'x': 4, 'y': 4, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'D' }, 'coor_6_5': { 'x': 6, 'y': 5, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'E' }, 'coor_7_8': { 'x': 7, 'y': 8, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'F' }, 'coor_7_4': { 'x': 7, 'y': 4, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'G' }, 'coor_4_1': { 'x': 4, 'y': 1, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'H' } }, 'dotConnect': true, 'connectSeq': { 'coor_3_8': ['coor_4_7'], 'coor_4_7': ['coor_3_8', 'coor_3_5'], 'coor_3_5': ['coor_4_7', 'coor_4_4', 'coor_6_5', 'coor_4_1'], 'coor_4_4': ['coor_3_5', 'coor_6_5'], 'coor_6_5': ['coor_3_5', 'coor_4_4', 'coor_7_8', 'coor_7_4'], 'coor_7_8': ['coor_6_5'], 'coor_7_4': ['coor_6_5'], 'coor_4_1': ['coor_3_5'] }, 'showResImg': true, 'resImgSrc': that.basePath + 'resources/wood/images/bg_4.png', 'updateNumPairs': false, 'clickToJudge': true, 'updateCoors': true, 'showResMark': true }, 'scene10': { 'matrix': { 'maxX': 10, 'maxY': 10, 'minX': 0, 'minY': 0 }, 'type': 'dotGrid', 'coors': {}, 'numPairs': { 'coor_6_8': { 'x': 6, 'y': 8, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'A' }, 'coor_5_4': { 'x': 5, 'y': 4, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'B' }, 'coor_3_1': { 'x': 3, 'y': 1, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'C' }, 'coor_8_3': { 'x': 8, 'y': 3, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'D' } }, 'dotConnect': true, 'connectSeq': { 'coor_6_8': ['coor_8_3'], 'coor_5_4': ['coor_6_8'], 'coor_3_1': ['coor_5_4'], 'coor_8_3': ['coor_3_1'] }, 'showResImg': true, 'resImgSrc': that.basePath + 'resources/wood/images/bg_3.png', 'updateNumPairs': false, 'clickToJudge': true, 'updateCoors': true, 'showResMark': true }, 'scene11': { 'matrix': { 'maxX': 10, 'maxY': 10, 'minX': 0, 'minY': 0 }, 'type': 'dotGrid', 'coors': {}, 'numPairs': { 'coor_7_9': { 'x': 7, 'y': 9, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'A' }, 'coor_3_6': { 'x': 3, 'y': 6, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'B' }, 'coor_2_3': { 'x': 2, 'y': 3, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'C' }, 'coor_4_1': { 'x': 4, 'y': 1, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'D' }, 'coor_7_2': { 'x': 7, 'y': 2, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'E' }, 'coor_5_4': { 'x': 5, 'y': 4, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'F' }, 'coor_6_5': { 'x': 6, 'y': 5, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'G' } }, 'dotConnect': true, 'connectSeq': { 'coor_7_9': ['coor_3_6'], 'coor_3_6': ['coor_7_9', 'coor_2_3', 'coor_5_4'], 'coor_2_3': ['coor_3_6', 'coor_4_1'], 'coor_4_1': ['coor_2_3', 'coor_7_2'], 'coor_7_2': ['coor_4_1'], 'coor_5_4': ['coor_3_6', 'coor_6_5'], 'coor_6_5': ['coor_5_4'] }, 'showResImg': true, 'resImgSrc': that.basePath + 'resources/wood/images/bg_2.png', 'updateNumPairs': false, 'clickToJudge': true, 'updateCoors': true, 'showResMark': true }, 'scene12': { 'matrix': { 'maxX': 10, 'maxY': 10, 'minX': 0, 'minY': 0 }, 'type': 'dotGrid', 'coors': {}, 'numPairs': { 'coor_3_2': { 'x': 3, 'y': 2, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'A' }, 'coor_4_1': { 'x': 4, 'y': 1, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'B' }, 'coor_8_2': { 'x': 8, 'y': 2, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'C' }, 'coor_5_6': { 'x': 5, 'y': 6, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'D' }, 'coor_4_7': { 'x': 4, 'y': 7, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'E' }, 'coor_5_8': { 'x': 5, 'y': 8, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'F' }, 'coor_6_7': { 'x': 6, 'y': 7, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'G' } }, 'dotConnect': true, 'connectSeq': { 'coor_3_2': ['coor_4_1'], 'coor_4_1': ['coor_3_2', 'coor_8_2'], 'coor_8_2': ['coor_4_1', 'coor_5_6'], 'coor_5_6': ['coor_8_2', 'coor_4_7', 'coor_6_7'], 'coor_4_7': ['coor_5_6', 'coor_5_8'], 'coor_5_8': ['coor_4_7', 'coor_6_7'], 'coor_6_7': ['coor_5_6', 'coor_5_8'] }, 'showResImg': true, 'resImgSrc': that.basePath + 'resources/wood/images/bg_1.png', 'updateNumPairs': false, 'clickToJudge': true, 'updateCoors': true, 'showResMark': true } }, 'drawBlock': { 'scene1': { 'matrix': { 'maxX': 18, 'maxY': 18, 'minX': 1, 'minY': 1 }, 'type': 'blockGrid', 'coors': {}, 'bgcoors': { 'coor_15_7': { 'x': 15, 'y': 7, 'fill': '#ffe013' }, 'coor_15_6': { 'x': 15, 'y': 6, 'fill': '#ffe013' }, 'coor_3_6': { 'x': 3, 'y': 6, 'fill': '#ffe013' }, 'coor_3_7': { 'x': 3, 'y': 7, 'fill': '#ffe013' }, 'coor_4_17': { 'x': 4, 'y': 17, 'fill': '#ffe013' }, 'coor_5_17': { 'x': 5, 'y': 17, 'fill': '#ffe013' }, 'coor_6_17': { 'x': 6, 'y': 17, 'fill': '#ffe013' }, 'coor_7_17': { 'x': 7, 'y': 17, 'fill': '#ffe013' }, 'coor_8_17': { 'x': 8, 'y': 17, 'fill': '#ffe013' }, 'coor_9_17': { 'x': 9, 'y': 17, 'fill': '#ffe013' }, 'coor_10_17': { 'x': 10, 'y': 17, 'fill': '#ffe013' }, 'coor_11_17': { 'x': 11, 'y': 17, 'fill': '#ffe013' }, 'coor_12_17': { 'x': 12, 'y': 17, 'fill': '#ffe013' }, 'coor_13_17': { 'x': 13, 'y': 17, 'fill': '#ffe013' }, 'coor_14_17': { 'x': 14, 'y': 17, 'fill': '#ffe013' }, 'coor_4_16': { 'x': 4, 'y': 16, 'fill': '#ffe013' }, 'coor_4_15': { 'x': 4, 'y': 15, 'fill': '#ffe013' }, 'coor_4_14': { 'x': 4, 'y': 14, 'fill': '#ffe013' }, 'coor_3_14': { 'x': 3, 'y': 14, 'fill': '#ffe013' }, 'coor_2_14': { 'x': 2, 'y': 14, 'fill': '#ffe013' }, 'coor_1_14': { 'x': 1, 'y': 14, 'fill': '#ffe013' }, 'coor_1_13': { 'x': 1, 'y': 13, 'fill': '#ffe013' }, 'coor_1_12': { 'x': 1, 'y': 12, 'fill': '#ffe013' }, 'coor_2_12': { 'x': 2, 'y': 12, 'fill': '#ffe013' }, 'coor_3_12': { 'x': 3, 'y': 12, 'fill': '#ffe013' }, 'coor_4_12': { 'x': 4, 'y': 12, 'fill': '#ffe013' }, 'coor_5_12': { 'x': 5, 'y': 12, 'fill': '#ffe013' }, 'coor_6_12': { 'x': 6, 'y': 12, 'fill': '#ffe013' }, 'coor_7_12': { 'x': 7, 'y': 12, 'fill': '#ffe013' }, 'coor_8_12': { 'x': 8, 'y': 12, 'fill': '#ffe013' }, 'coor_9_12': { 'x': 9, 'y': 12, 'fill': '#ffe013' }, 'coor_10_12': { 'x': 10, 'y': 12, 'fill': '#ffe013' }, 'coor_11_12': { 'x': 11, 'y': 12, 'fill': '#ffe013' }, 'coor_12_12': { 'x': 12, 'y': 12, 'fill': '#ffe013' }, 'coor_13_12': { 'x': 13, 'y': 12, 'fill': '#ffe013' }, 'coor_14_12': { 'x': 14, 'y': 12, 'fill': '#ffe013' }, 'coor_15_12': { 'x': 15, 'y': 12, 'fill': '#ffe013' }, 'coor_16_12': { 'x': 16, 'y': 12, 'fill': '#ffe013' }, 'coor_17_12': { 'x': 17, 'y': 12, 'fill': '#ffe013' }, 'coor_17_13': { 'x': 17, 'y': 13, 'fill': '#ffe013' }, 'coor_17_14': { 'x': 17, 'y': 14, 'fill': '#ffe013' }, 'coor_16_14': { 'x': 16, 'y': 14, 'fill': '#ffe013' }, 'coor_15_14': { 'x': 15, 'y': 14, 'fill': '#ffe013' }, 'coor_14_14': { 'x': 14, 'y': 14, 'fill': '#ffe013' }, 'coor_14_15': { 'x': 14, 'y': 15, 'fill': '#ffe013' }, 'coor_14_16': { 'x': 14, 'y': 16, 'fill': '#ffe013' }, 'coor_3_11': { 'x': 3, 'y': 11, 'fill': '#ffe013' }, 'coor_3_10': { 'x': 3, 'y': 10, 'fill': '#ffe013' }, 'coor_3_9': { 'x': 3, 'y': 9, 'fill': '#ffe013' }, 'coor_3_8': { 'x': 3, 'y': 8, 'fill': '#ffe013' }, 'coor_15_11': { 'x': 15, 'y': 11, 'fill': '#ffe013' }, 'coor_15_10': { 'x': 15, 'y': 10, 'fill': '#ffe013' }, 'coor_15_9': { 'x': 15, 'y': 9, 'fill': '#ffe013' }, 'coor_15_8': { 'x': 15, 'y': 8, 'fill': '#ffe013' }, 'coor_9_7': { 'x': 9, 'y': 7, 'fill': '#ef7222' } }, 'numPairs': { 'coor_4_5': { 'x': 4, 'y': 5, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'fill': '#ef7222', 'mark': 'A' }, 'coor_5_4': { 'x': 5, 'y': 4, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'fill': '#ef7222', 'mark': 'B' }, 'coor_6_3': { 'x': 6, 'y': 3, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'fill': '#ef7222', 'mark': 'C' }, 'coor_7_2': { 'x': 7, 'y': 2, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'fill': '#ef7222', 'mark': 'D' }, 'coor_8_1': { 'x': 8, 'y': 1, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'fill': '#ef7222', 'mark': 'E' }, 'coor_9_1': { 'x': 9, 'y': 1, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'fill': '#ef7222', 'mark': 'F' }, 'coor_10_1': { 'x': 10, 'y': 1, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'fill': '#ef7222', 'mark': 'G' }, 'coor_11_2': { 'x': 11, 'y': 2, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'fill': '#ef7222', 'mark': 'H' }, 'coor_12_3': { 'x': 12, 'y': 3, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'fill': '#ef7222', 'mark': 'I' }, 'coor_13_4': { 'x': 13, 'y': 4, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'fill': '#ef7222', 'mark': 'J' }, 'coor_14_5': { 'x': 14, 'y': 5, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'fill': '#ef7222', 'mark': 'K' }, 'coor_5_9': { 'x': 5, 'y': 9, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'fill': '#ef7222', 'mark': 'L' }, 'coor_6_9': { 'x': 6, 'y': 9, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'fill': '#ef7222', 'mark': 'M' }, 'coor_7_9': { 'x': 7, 'y': 9, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'fill': '#ef7222', 'mark': 'N' }, 'coor_6_10': { 'x': 6, 'y': 10, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'fill': '#ef7222', 'mark': 'O' }, 'coor_6_8': { 'x': 6, 'y': 8, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'fill': '#ef7222', 'mark': 'P' }, 'coor_11_9': { 'x': 11, 'y': 9, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'fill': '#ef7222', 'mark': 'Q' }, 'coor_12_9': { 'x': 12, 'y': 9, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'fill': '#ef7222', 'mark': 'R' }, 'coor_13_9': { 'x': 13, 'y': 9, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'fill': '#ef7222', 'mark': 'S' }, 'coor_12_10': { 'x': 12, 'y': 10, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'fill': '#ef7222', 'mark': 'T' }, 'coor_12_8': { 'x': 12, 'y': 8, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'fill': '#ef7222', 'mark': 'U' }, 'coor_7_5': { 'x': 7, 'y': 5, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'fill': '#ffe013', 'mark': 'V' }, 'coor_8_4': { 'x': 8, 'y': 4, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'fill': '#ffe013', 'mark': 'W' }, 'coor_9_3': { 'x': 9, 'y': 3, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'fill': '#ffe013', 'mark': 'X' }, 'coor_10_4': { 'x': 10, 'y': 4, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'fill': '#ffe013', 'mark': 'Y' }, 'coor_11_5': { 'x': 11, 'y': 5, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'fill': '#ffe013', 'mark': 'Z' } }, 'dotConnect': false, 'showResImg': false, 'updateNumPairs': false, 'clickToJudge': true, 'updateCoors': true, 'showResMark': true, 'hasMaxNumpair': true }, 'scene2': { 'matrix': { 'maxX': 18, 'maxY': 18, 'minX': 1, 'minY': 1 }, 'type': 'blockGrid', 'coors': {}, 'bgcoors': { 'coor_4_9': { 'x': 4, 'y': 9, 'fill': '#ffffff' }, 'coor_4_8': { 'x': 4, 'y': 8, 'fill': '#ffffff' }, 'coor_4_7': { 'x': 4, 'y': 7, 'fill': '#ffffff' }, 'coor_4_6': { 'x': 4, 'y': 6, 'fill': '#ffffff' }, 'coor_5_5': { 'x': 5, 'y': 5, 'fill': '#ffffff' }, 'coor_6_4': { 'x': 6, 'y': 4, 'fill': '#ffffff' }, 'coor_7_4': { 'x': 7, 'y': 4, 'fill': '#ffffff' }, 'coor_8_4': { 'x': 8, 'y': 4, 'fill': '#333333' }, 'coor_9_4': { 'x': 9, 'y': 4, 'fill': '#ffffff' }, 'coor_10_4': { 'x': 10, 'y': 4, 'fill': '#ffffff' }, 'coor_11_4': { 'x': 11, 'y': 4, 'fill': '#ffffff' }, 'coor_12_4': { 'x': 12, 'y': 4, 'fill': '#ffffff' }, 'coor_13_5': { 'x': 13, 'y': 5, 'fill': '#ffffff' }, 'coor_14_6': { 'x': 14, 'y': 6, 'fill': '#ffffff' }, 'coor_14_7': { 'x': 14, 'y': 7, 'fill': '#ffffff' }, 'coor_14_8': { 'x': 14, 'y': 8, 'fill': '#ffffff' }, 'coor_14_9': { 'x': 14, 'y': 9, 'fill': '#ffffff' }, 'coor_5_10': { 'x': 5, 'y': 10, 'fill': '#ffffff' }, 'coor_5_11': { 'x': 5, 'y': 11, 'fill': '#ffffff' }, 'coor_6_11': { 'x': 6, 'y': 11, 'fill': '#ffffff' }, 'coor_7_12': { 'x': 7, 'y': 12, 'fill': '#ffffff' }, 'coor_8_12': { 'x': 8, 'y': 12, 'fill': '#ffffff' }, 'coor_9_12': { 'x': 9, 'y': 12, 'fill': '#ffffff' }, 'coor_10_12': { 'x': 10, 'y': 12, 'fill': '#ffffff' }, 'coor_11_12': { 'x': 11, 'y': 12, 'fill': '#ffffff' }, 'coor_12_11': { 'x': 12, 'y': 11, 'fill': '#ffffff' }, 'coor_13_11': { 'x': 13, 'y': 11, 'fill': '#ffffff' }, 'coor_13_10': { 'x': 13, 'y': 10, 'fill': '#ffffff' }, 'coor_3_11': { 'x': 3, 'y': 11, 'fill': '#ffffff' }, 'coor_14_12': { 'x': 14, 'y': 12, 'fill': '#ffffff' }, 'coor_15_12': { 'x': 15, 'y': 12, 'fill': '#ffffff' }, 'coor_3_10': { 'x': 3, 'y': 10, 'fill': '#333333' }, 'coor_4_10': { 'x': 4, 'y': 10, 'fill': '#333333' }, 'coor_4_11': { 'x': 4, 'y': 11, 'fill': '#333333' }, 'coor_3_12': { 'x': 3, 'y': 12, 'fill': '#333333' }, 'coor_4_12': { 'x': 4, 'y': 12, 'fill': '#333333' }, 'coor_5_12': { 'x': 5, 'y': 12, 'fill': '#333333' }, 'coor_6_12': { 'x': 6, 'y': 12, 'fill': '#333333' }, 'coor_6_13': { 'x': 6, 'y': 13, 'fill': '#333333' }, 'coor_5_13': { 'x': 5, 'y': 13, 'fill': '#333333' }, 'coor_4_13': { 'x': 4, 'y': 13, 'fill': '#333333' }, 'coor_12_12': { 'x': 12, 'y': 12, 'fill': '#333333' }, 'coor_13_12': { 'x': 13, 'y': 12, 'fill': '#333333' }, 'coor_12_13': { 'x': 12, 'y': 13, 'fill': '#333333' }, 'coor_13_13': { 'x': 13, 'y': 13, 'fill': '#333333' }, 'coor_14_13': { 'x': 14, 'y': 13, 'fill': '#333333' }, 'coor_14_11': { 'x': 14, 'y': 11, 'fill': '#333333' }, 'coor_15_11': { 'x': 15, 'y': 11, 'fill': '#333333' }, 'coor_14_10': { 'x': 14, 'y': 10, 'fill': '#333333' }, 'coor_15_10': { 'x': 15, 'y': 10, 'fill': '#333333' }, 'coor_5_8': { 'x': 5, 'y': 8, 'fill': '#333333' }, 'coor_6_8': { 'x': 6, 'y': 8, 'fill': '#333333' }, 'coor_5_7': { 'x': 5, 'y': 7, 'fill': '#333333' }, 'coor_6_7': { 'x': 6, 'y': 7, 'fill': '#333333' }, 'coor_7_7': { 'x': 7, 'y': 7, 'fill': '#333333' }, 'coor_6_6': { 'x': 6, 'y': 6, 'fill': '#333333' }, 'coor_7_6': { 'x': 7, 'y': 6, 'fill': '#333333' }, 'coor_7_10': { 'x': 7, 'y': 10, 'fill': '#333333' }, 'coor_9_9': { 'x': 9, 'y': 9, 'fill': '#333333' }, 'coor_11_9': { 'x': 11, 'y': 9, 'fill': '#333333' }, 'coor_12_9': { 'x': 12, 'y': 9, 'fill': '#333333' }, 'coor_13_8': { 'x': 13, 'y': 8, 'fill': '#333333' }, 'coor_13_7': { 'x': 13, 'y': 7, 'fill': '#333333' }, 'coor_10_8': { 'x': 10, 'y': 8, 'fill': '#333333' }, 'coor_11_8': { 'x': 11, 'y': 8, 'fill': '#333333' }, 'coor_12_6': { 'x': 12, 'y': 6, 'fill': '#333333' }, 'coor_7_11': { 'x': 7, 'y': 11, 'fill': '#ffffff' }, 'coor_8_11': { 'x': 8, 'y': 11, 'fill': '#ffffff' }, 'coor_9_11': { 'x': 9, 'y': 11, 'fill': '#ffffff' }, 'coor_10_11': { 'x': 10, 'y': 11, 'fill': '#ffffff' }, 'coor_11_11': { 'x': 11, 'y': 11, 'fill': '#ffffff' }, 'coor_6_10': { 'x': 6, 'y': 10, 'fill': '#ffffff' }, 'coor_8_10': { 'x': 8, 'y': 10, 'fill': '#ffffff' }, 'coor_9_10': { 'x': 9, 'y': 10, 'fill': '#ffffff' }, 'coor_10_10': { 'x': 10, 'y': 10, 'fill': '#ffffff' }, 'coor_11_10': { 'x': 11, 'y': 10, 'fill': '#ffffff' }, 'coor_12_10': { 'x': 12, 'y': 10, 'fill': '#ffffff' }, 'coor_5_9': { 'x': 5, 'y': 9, 'fill': '#ffffff' }, 'coor_6_9': { 'x': 6, 'y': 9, 'fill': '#ffffff' }, 'coor_7_9': { 'x': 7, 'y': 9, 'fill': '#ffffff' }, 'coor_8_9': { 'x': 8, 'y': 9, 'fill': '#ffffff' }, 'coor_13_9': { 'x': 13, 'y': 9, 'fill': '#ffffff' }, 'coor_10_9': { 'x': 10, 'y': 9, 'fill': '#ffffff' }, 'coor_7_8': { 'x': 7, 'y': 8, 'fill': '#ffffff' }, 'coor_8_8': { 'x': 8, 'y': 8, 'fill': '#ffffff' }, 'coor_9_8': { 'x': 9, 'y': 8, 'fill': '#ffffff' }, 'coor_12_8': { 'x': 12, 'y': 8, 'fill': '#ffffff' }, 'coor_12_7': { 'x': 12, 'y': 7, 'fill': '#ffffff' }, 'coor_11_7': { 'x': 11, 'y': 7, 'fill': '#ffffff' }, 'coor_10_7': { 'x': 10, 'y': 7, 'fill': '#ffffff' }, 'coor_9_7': { 'x': 9, 'y': 7, 'fill': '#ffffff' }, 'coor_8_7': { 'x': 8, 'y': 7, 'fill': '#ffffff' }, 'coor_5_6': { 'x': 5, 'y': 6, 'fill': '#ffffff' }, 'coor_8_6': { 'x': 8, 'y': 6, 'fill': '#ffffff' }, 'coor_9_6': { 'x': 9, 'y': 6, 'fill': '#ffffff' }, 'coor_10_6': { 'x': 10, 'y': 6, 'fill': '#ffffff' }, 'coor_11_6': { 'x': 11, 'y': 6, 'fill': '#ffffff' }, 'coor_13_6': { 'x': 13, 'y': 6, 'fill': '#ffffff' }, 'coor_12_5': { 'x': 12, 'y': 5, 'fill': '#ffffff' }, 'coor_11_5': { 'x': 11, 'y': 5, 'fill': '#ffffff' }, 'coor_10_5': { 'x': 10, 'y': 5, 'fill': '#ffffff' }, 'coor_9_5': { 'x': 9, 'y': 5, 'fill': '#ffffff' }, 'coor_8_5': { 'x': 8, 'y': 5, 'fill': '#ffffff' }, 'coor_7_5': { 'x': 7, 'y': 5, 'fill': '#ffffff' }, 'coor_6_5': { 'x': 6, 'y': 5, 'fill': '#ffffff' } }, 'numPairs': { 'coor_8_4': { 'x': 8, 'y': 4, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'fill': '#ffffff', 'mark': 'A' }, 'coor_5_11': { 'x': 5, 'y': 11, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'fill': '#333333', 'mark': 'B' }, 'coor_13_11': { 'x': 13, 'y': 11, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'fill': '#333333', 'mark': 'C' }, 'coor_3_11': { 'x': 3, 'y': 11, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'fill': '#333333', 'mark': 'D' }, 'coor_14_12': { 'x': 14, 'y': 12, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'fill': '#333333', 'mark': 'E' }, 'coor_15_12': { 'x': 15, 'y': 12, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'fill': '#333333', 'mark': 'F' }, 'coor_7_10': { 'x': 7, 'y': 10, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'fill': '#ffffff', 'mark': 'G' }, 'coor_9_9': { 'x': 9, 'y': 9, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'fill': '#ffffff', 'mark': 'H' }, 'coor_6_9': { 'x': 6, 'y': 9, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'fill': '#333333', 'mark': 'I' }, 'coor_7_9': { 'x': 7, 'y': 9, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'fill': '#333333', 'mark': 'J' }, 'coor_8_8': { 'x': 8, 'y': 8, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'fill': '#333333', 'mark': 'K' }, 'coor_12_7': { 'x': 12, 'y': 7, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'fill': '#333333', 'mark': 'L' }, 'coor_11_7': { 'x': 11, 'y': 7, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'fill': '#333333', 'mark': 'M' }, 'coor_10_7': { 'x': 10, 'y': 7, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'fill': '#333333', 'mark': 'N' }, 'coor_8_7': { 'x': 8, 'y': 7, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'fill': '#333333', 'mark': 'O' }, 'coor_11_6': { 'x': 11, 'y': 6, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'fill': '#333333', 'mark': 'P' }, 'coor_9_5': { 'x': 9, 'y': 5, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'fill': '#333333', 'mark': 'Q' } }, 'dotConnect': false, 'showResImg': false, 'updateNumPairs': false, 'clickToJudge': true, 'updateCoors': true, 'showResMark': true, 'hasMaxNumpair': true }, 'scene3': { 'matrix': { 'maxX': 18, 'maxY': 18, 'minX': 1, 'minY': 1 }, 'type': 'cleBlockGrid', 'coors': {}, 'numPairs': { 'coor_4_15': { 'x': 4, 'y': 15, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'A' }, 'coor_14_11': { 'x': 14, 'y': 11, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'B' }, 'coor_3_4': { 'x': 3, 'y': 4, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'C' }, 'coor_3_10': { 'x': 3, 'y': 10, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'D' }, 'coor_14_6': { 'x': 14, 'y': 6, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'E' }, 'coor_9_5': { 'x': 9, 'y': 5, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'F' }, 'coor_13_17': { 'x': 13, 'y': 17, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'G' }, 'coor_9_12': { 'x': 9, 'y': 12, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'H' } }, 'dotConnect': false, 'showResImg': true, 'resImgSrc': that.basePath + 'resources/wood/images/bg_14.png', 'updateNumPairs': false, 'cleSeq': { 'coor_4_15': ['coor_1_17', 'coor_2_17', 'coor_3_17', 'coor_4_17', 'coor_5_17', 'coor_6_17', 'coor_7_17', 'coor_8_17', 'coor_1_16', 'coor_2_16', 'coor_3_16', 'coor_4_16', 'coor_5_16', 'coor_6_16', 'coor_7_16', 'coor_8_16', 'coor_1_15', 'coor_2_15', 'coor_3_15', 'coor_4_15', 'coor_5_15', 'coor_6_15', 'coor_7_15', 'coor_8_15', 'coor_1_14', 'coor_2_14', 'coor_3_14', 'coor_4_14', 'coor_5_14', 'coor_1_13', 'coor_2_13', 'coor_3_13', 'coor_1_12', 'coor_2_12', 'coor_3_12'], 'coor_13_17': ['coor_9_17', 'coor_10_17', 'coor_11_17', 'coor_12_17', 'coor_13_17', 'coor_14_17', 'coor_15_17', 'coor_16_17', 'coor_17_17', 'coor_9_16', 'coor_10_16', 'coor_11_16', 'coor_12_16', 'coor_13_16', 'coor_14_16', 'coor_15_16', 'coor_16_16', 'coor_17_16', 'coor_9_15', 'coor_10_15', 'coor_11_15', 'coor_12_15', 'coor_13_15', 'coor_14_15', 'coor_15_15', 'coor_16_15', 'coor_17_15', 'coor_14_14', 'coor_15_14', 'coor_16_14', 'coor_17_14', 'coor_15_13', 'coor_16_13', 'coor_17_13'], 'coor_3_10': ['coor_1_11', 'coor_2_11', 'coor_3_11', 'coor_4_11', 'coor_5_11', 'coor_1_10', 'coor_2_10', 'coor_3_10', 'coor_4_10', 'coor_5_10', 'coor_1_9', 'coor_2_9', 'coor_3_9', 'coor_4_9', 'coor_5_9', 'coor_6_9', 'coor_7_9', 'coor_8_9', 'coor_8_10', 'coor_9_10', 'coor_10_10', 'coor_10_9', 'coor_9_9', 'coor_1_8', 'coor_2_8', 'coor_3_8', 'coor_4_8', 'coor_5_8', 'coor_6_8', 'coor_7_8', 'coor_8_8', 'coor_9_8', 'coor_10_8', 'coor_1_7', 'coor_2_7', 'coor_3_7', 'coor_4_7', 'coor_5_7', 'coor_6_7', 'coor_1_6', 'coor_2_6', 'coor_3_6', 'coor_4_6', 'coor_5_6', 'coor_6_6'], 'coor_9_12': ['coor_6_14', 'coor_7_14', 'coor_8_14', 'coor_9_14', 'coor_10_14', 'coor_11_14', 'coor_4_13', 'coor_5_13', 'coor_6_13', 'coor_7_13', 'coor_8_13', 'coor_9_13', 'coor_10_13', 'coor_11_13', 'coor_4_12', 'coor_5_12', 'coor_6_12', 'coor_7_12', 'coor_8_12', 'coor_9_12', 'coor_10_12', 'coor_11_12', 'coor_6_11', 'coor_7_11', 'coor_8_11', 'coor_9_11', 'coor_10_11', 'coor_11_11', 'coor_6_10', 'coor_7_10'], 'coor_14_11': ['coor_12_14', 'coor_13_14', 'coor_12_13', 'coor_13_13', 'coor_14_13', 'coor_12_12', 'coor_13_12', 'coor_14_12', 'coor_15_12', 'coor_16_12', 'coor_17_12', 'coor_12_11', 'coor_13_11', 'coor_14_11', 'coor_15_11', 'coor_16_11', 'coor_17_11', 'coor_11_10', 'coor_12_10', 'coor_13_10', 'coor_14_10', 'coor_15_10', 'coor_16_10', 'coor_17_10', 'coor_11_9', 'coor_12_9', 'coor_13_9', 'coor_14_9', 'coor_15_9', 'coor_16_9', 'coor_17_9', 'coor_11_8', 'coor_13_8', 'coor_14_8', 'coor_15_8', 'coor_16_8', 'coor_17_8', 'coor_13_7', 'coor_14_7', 'coor_15_7', 'coor_13_6'], 'coor_3_4': ['coor_1_5', 'coor_2_5', 'coor_3_5', 'coor_4_5', 'coor_5_5', 'coor_6_5', 'coor_1_4', 'coor_2_4', 'coor_3_4', 'coor_4_4', 'coor_5_4', 'coor_6_4', 'coor_7_4', 'coor_8_4', 'coor_1_3', 'coor_2_3', 'coor_3_3', 'coor_4_3', 'coor_5_3', 'coor_6_3', 'coor_7_3', 'coor_8_3', 'coor_1_2', 'coor_2_2', 'coor_3_2', 'coor_4_2', 'coor_5_2', 'coor_6_2', 'coor_7_2', 'coor_8_2', 'coor_9_2', 'coor_10_2', 'coor_1_1', 'coor_2_1', 'coor_3_1', 'coor_4_1', 'coor_5_1', 'coor_6_1', 'coor_7_1', 'coor_8_1', 'coor_9_1', 'coor_10_1', 'coor_11_1'], 'coor_9_5': ['coor_12_8', 'coor_7_7', 'coor_8_7', 'coor_9_7', 'coor_10_7', 'coor_11_7', 'coor_12_7', 'coor_7_6', 'coor_8_6', 'coor_9_6', 'coor_10_6', 'coor_11_6', 'coor_12_6', 'coor_7_5', 'coor_8_5', 'coor_9_5', 'coor_10_5', 'coor_11_5', 'coor_12_5', 'coor_9_4', 'coor_10_4', 'coor_11_4', 'coor_12_4', 'coor_9_3', 'coor_10_3', 'coor_11_3', 'coor_12_3', 'coor_11_2', 'coor_12_2'], 'coor_14_6': ['coor_16_7', 'coor_17_7', 'coor_14_6', 'coor_15_6', 'coor_16_6', 'coor_17_6', 'coor_13_5', 'coor_14_5', 'coor_15_5', 'coor_16_5', 'coor_17_5', 'coor_13_4', 'coor_14_4', 'coor_15_4', 'coor_16_4', 'coor_17_4', 'coor_13_3', 'coor_14_3', 'coor_15_3', 'coor_16_3', 'coor_17_3', 'coor_13_2', 'coor_14_2', 'coor_15_2', 'coor_16_2', 'coor_17_2', 'coor_12_1', 'coor_13_1', 'coor_14_1', 'coor_15_1', 'coor_16_1', 'coor_17_1'] }, 'updateCoors': true, 'showResMark': true }, 'scene4': { 'matrix': { 'maxX': 18, 'maxY': 18, 'minX': 1, 'minY': 1 }, 'type': 'cleBlockGrid', 'coors': {}, 'numPairs': { 'coor_2_14': { 'x': 2, 'y': 14, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'A' }, 'coor_16_10': { 'x': 16, 'y': 10, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'B' }, 'coor_6_3': { 'x': 6, 'y': 3, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'C' }, 'coor_1_8': { 'x': 1, 'y': 8, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'D' }, 'coor_13_3': { 'x': 13, 'y': 3, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'E' }, 'coor_8_7': { 'x': 8, 'y': 7, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'F' }, 'coor_10_16': { 'x': 10, 'y': 16, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'G' }, 'coor_7_13': { 'x': 7, 'y': 13, 'isVisibleX': true, 'isVisibleY': true, 'lineX': false, 'lineY': false, 'mark': 'H' } }, 'dotConnect': false, 'showResImg': true, 'resImgSrc': that.basePath + 'resources/wood/images/bg_13.png', 'updateNumPairs': false, 'cleSeq': { 'coor_2_14': ['coor_1_17', 'coor_2_17', 'coor_3_17', 'coor_4_17', 'coor_5_17', 'coor_6_17', 'coor_7_17', 'coor_8_17', 'coor_1_16', 'coor_2_16', 'coor_3_16', 'coor_4_16', 'coor_5_16', 'coor_6_16', 'coor_7_16', 'coor_8_16', 'coor_1_15', 'coor_2_15', 'coor_3_15', 'coor_4_15', 'coor_5_15', 'coor_6_15', 'coor_7_15', 'coor_8_15', 'coor_1_14', 'coor_2_14', 'coor_3_14', 'coor_4_14', 'coor_5_14', 'coor_1_13', 'coor_2_13', 'coor_3_13', 'coor_1_12', 'coor_2_12', 'coor_3_12'], 'coor_10_16': ['coor_9_17', 'coor_10_17', 'coor_11_17', 'coor_12_17', 'coor_13_17', 'coor_14_17', 'coor_15_17', 'coor_16_17', 'coor_17_17', 'coor_9_16', 'coor_10_16', 'coor_11_16', 'coor_12_16', 'coor_13_16', 'coor_14_16', 'coor_15_16', 'coor_16_16', 'coor_17_16', 'coor_9_15', 'coor_10_15', 'coor_11_15', 'coor_12_15', 'coor_13_15', 'coor_14_15', 'coor_15_15', 'coor_16_15', 'coor_17_15', 'coor_14_14', 'coor_15_14', 'coor_16_14', 'coor_17_14', 'coor_15_13', 'coor_16_13', 'coor_17_13'], 'coor_1_8': ['coor_1_11', 'coor_2_11', 'coor_3_11', 'coor_4_11', 'coor_5_11', 'coor_1_10', 'coor_2_10', 'coor_3_10', 'coor_4_10', 'coor_5_10', 'coor_1_9', 'coor_2_9', 'coor_3_9', 'coor_4_9', 'coor_5_9', 'coor_6_9', 'coor_7_9', 'coor_8_9', 'coor_8_10', 'coor_9_10', 'coor_10_10', 'coor_10_9', 'coor_9_9', 'coor_1_8', 'coor_2_8', 'coor_3_8', 'coor_4_8', 'coor_5_8', 'coor_6_8', 'coor_7_8', 'coor_8_8', 'coor_9_8', 'coor_10_8', 'coor_1_7', 'coor_2_7', 'coor_3_7', 'coor_4_7', 'coor_5_7', 'coor_6_7', 'coor_1_6', 'coor_2_6', 'coor_3_6', 'coor_4_6', 'coor_5_6', 'coor_6_6'], 'coor_7_13': ['coor_6_14', 'coor_7_14', 'coor_8_14', 'coor_9_14', 'coor_10_14', 'coor_11_14', 'coor_4_13', 'coor_5_13', 'coor_6_13', 'coor_7_13', 'coor_8_13', 'coor_9_13', 'coor_10_13', 'coor_11_13', 'coor_4_12', 'coor_5_12', 'coor_6_12', 'coor_7_12', 'coor_8_12', 'coor_9_12', 'coor_10_12', 'coor_11_12', 'coor_6_11', 'coor_7_11', 'coor_8_11', 'coor_9_11', 'coor_10_11', 'coor_11_11', 'coor_6_10', 'coor_7_10'], 'coor_16_10': ['coor_12_14', 'coor_13_14', 'coor_12_13', 'coor_13_13', 'coor_14_13', 'coor_12_12', 'coor_13_12', 'coor_14_12', 'coor_15_12', 'coor_16_12', 'coor_17_12', 'coor_12_11', 'coor_13_11', 'coor_14_11', 'coor_15_11', 'coor_16_11', 'coor_17_11', 'coor_11_10', 'coor_12_10', 'coor_13_10', 'coor_14_10', 'coor_15_10', 'coor_16_10', 'coor_17_10', 'coor_11_9', 'coor_12_9', 'coor_13_9', 'coor_14_9', 'coor_15_9', 'coor_16_9', 'coor_17_9', 'coor_11_8', 'coor_13_8', 'coor_14_8', 'coor_15_8', 'coor_16_8', 'coor_17_8', 'coor_13_7', 'coor_14_7', 'coor_15_7', 'coor_13_6'], 'coor_6_3': ['coor_1_5', 'coor_2_5', 'coor_3_5', 'coor_4_5', 'coor_5_5', 'coor_6_5', 'coor_1_4', 'coor_2_4', 'coor_3_4', 'coor_4_4', 'coor_5_4', 'coor_6_4', 'coor_7_4', 'coor_8_4', 'coor_1_3', 'coor_2_3', 'coor_3_3', 'coor_4_3', 'coor_5_3', 'coor_6_3', 'coor_7_3', 'coor_8_3', 'coor_1_2', 'coor_2_2', 'coor_3_2', 'coor_4_2', 'coor_5_2', 'coor_6_2', 'coor_7_2', 'coor_8_2', 'coor_9_2', 'coor_10_2', 'coor_1_1', 'coor_2_1', 'coor_3_1', 'coor_4_1', 'coor_5_1', 'coor_6_1', 'coor_7_1', 'coor_8_1', 'coor_9_1', 'coor_10_1', 'coor_11_1'], 'coor_8_7': ['coor_12_8', 'coor_7_7', 'coor_8_7', 'coor_9_7', 'coor_10_7', 'coor_11_7', 'coor_12_7', 'coor_7_6', 'coor_8_6', 'coor_9_6', 'coor_10_6', 'coor_11_6', 'coor_12_6', 'coor_7_5', 'coor_8_5', 'coor_9_5', 'coor_10_5', 'coor_11_5', 'coor_12_5', 'coor_9_4', 'coor_10_4', 'coor_11_4', 'coor_12_4', 'coor_9_3', 'coor_10_3', 'coor_11_3', 'coor_12_3', 'coor_11_2', 'coor_12_2'], 'coor_13_3': ['coor_16_7', 'coor_17_7', 'coor_14_6', 'coor_15_6', 'coor_16_6', 'coor_17_6', 'coor_13_5', 'coor_14_5', 'coor_15_5', 'coor_16_5', 'coor_17_5', 'coor_13_4', 'coor_14_4', 'coor_15_4', 'coor_16_4', 'coor_17_4', 'coor_13_3', 'coor_14_3', 'coor_15_3', 'coor_16_3', 'coor_17_3', 'coor_13_2', 'coor_14_2', 'coor_15_2', 'coor_16_2', 'coor_17_2', 'coor_12_1', 'coor_13_1', 'coor_14_1', 'coor_15_1', 'coor_16_1', 'coor_17_1'] }, 'updateCoors': true, 'showResMark': true } } } };

	    var isStudent = this.isStudent;
	    that.paper = !isStudent ? that.$view.find('#paper').get(0) : that.$view.find('#stuPaper').get(0);
	    var paperDom = {
	      'paper': that.paper,
	      'svg': that.paper.querySelector('svg'),
	      'transGroup': that.paper.querySelector('.transMatrix'),
	      'dotGrid_10X10': that.paper.querySelector('.grid_10X10'),
	      'blockGrid_18X18': that.paper.querySelector('.grid_18X18'),
	      'cleBlockGrid_18X18': that.paper.querySelector('.clegrid_18X18')
	      /* ['writeCoor_animateDot_scene1','writeCoor_geoDot_scene','writeCoor_star_scene']
	       ['lookforCoor_animateDot_scene1','lookforCoor_geoDot_scene','lookforCoor_star_scene','lookforCoor_drawBlock_scene1']*/
	    };var defOptions = {
	      'gridDatas': {},
	      'curGridId': 'writeCoor_animateDot_scene1'
	    };
	    var extendData = model['__ExtendModel'];
	    /* 存的数据*/

	    that.gridMain = new _GridMain.GridMain(paperDom, testData, extendData || defOptions, isStudent, this.basePath);

	    that.undoManager = new UndoManager();

	    var NPWrapper = that.$view.find('.NubmerPair_wrapper');
	    var NPEntranceWrapper = that.$view.find('.NumberPairEntrance_wrapper');
	    if (isStudent) {
	      NPWrapper.removeClass('teacher hide_dom').addClass('student');
	      NPEntranceWrapper.addClass('hide_dom');
	      that.eventMain = new _STU_EventMain.SEventMain(this.$view, this.gridMain, this.undoManager, this.basePath, i18nData);
	    } else {
	      that.eventMain = new _TEventMain.TEventMain(this.$view, this.gridMain, this.undoManager, this.basePath, i18nData);
	    }
	    ko.applyBindings(i18nData, that.$view.get(0));

	    that._bindEvent();
	    that.gridMain.showTab(extendData && extendData.curGridId || defOptions.curGridId);
	  },
	  pageShow: function pageShow(view, model) {},
	  pageLeave: function pageLeave() {
	    this._unbindEvent();
	  },
	  destroy: function destroy() {},
	  /** 如果不需要处理icplayer的状态恢复事件, 请将以下两个方法删除掉**/
	  getState: function getState() {},
	  setState: function setState(state, options) {},
	  /** **以下开始为Presenter的私有方法*****/
	  _initComponent: function _initComponent() {},
	  _bindEvent: function _bindEvent() {
	    this.eventMain.bindEvent();
	  },
	  _unbindEvent: function _unbindEvent() {}
	});

	window.AddonNumberPair_create = function () {
	  return new Presenter('NumberPair');
	};

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.GridMain = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _DotGrid = __webpack_require__(3);

	var _BlockGrid = __webpack_require__(7);

	var _CleBlockGrid = __webpack_require__(8);

	var _LF_DotGrid = __webpack_require__(9);

	var _LF_BlockGrid = __webpack_require__(10);

	var _LF_CleBlockGrid = __webpack_require__(11);

	var _STU_DotGrid = __webpack_require__(12);

	var _STU_BlockGrid = __webpack_require__(14);

	var _STU_CleBlockGrid = __webpack_require__(15);

	var _STU_LF_DotGrid = __webpack_require__(16);

	var _STU_LF_BlockGrid = __webpack_require__(17);

	var _STU_LF_CleBlockGrid = __webpack_require__(18);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/*坐标取第一象限，y轴为负值*/
	var GridMain = exports.GridMain = function () {
	    function GridMain(paperDom, defData, options, isStudent, basePath) {
	        _classCallCheck(this, GridMain);

	        this.paper = paperDom.paper;
	        this.defData = $.extend(true, {}, defData);
	        this.isStudent = isStudent;
	        this.basePath = basePath;
	        /*存对象，具体场景对象*/
	        this.gridObjs = {};
	        /*存数据*/
	        this.gridDatas = options.gridDatas ? $.extend(true, {}, options.gridDatas) : {};
	        /*之后优化*/
	        this.svg = paperDom.svg;
	        this.transGroup = paperDom.transGroup;
	        this.dotGrid_10X10 = paperDom.dotGrid_10X10;
	        this.blockGrid_18X18 = paperDom.blockGrid_18X18;
	        this.cleBlockGrid_18X18 = paperDom.cleBlockGrid_18X18;

	        /*当前预设*/
	        this.curGridId = options.curGridId;
	        this.showTab(this.curGridId);

	        this.bindEvent();
	        return this;
	    }

	    /*根据type创建相应的实例*/


	    _createClass(GridMain, [{
	        key: '_createByType',
	        value: function _createByType(sceneL1, sceneData, griddata) {
	            var scene = void 0;
	            /*分gird类别*/
	            if (!this.isStudent) {
	                if (sceneL1 === 'writeCoor') {
	                    if (sceneData.type === 'cleBlockGrid') {
	                        scene = new _CleBlockGrid.CleBlockGrid(this.svg, this.transGroup, sceneData, griddata);
	                    } else if (sceneData.type === 'blockGrid') {
	                        scene = new _BlockGrid.BlockGrid(this.svg, this.transGroup, sceneData, griddata);
	                    } else {
	                        scene = new _DotGrid.DotGrid(this.svg, this.transGroup, sceneData, griddata);
	                    }
	                } else if (sceneL1 === 'lookforCoor') {
	                    if (sceneData.type === 'cleBlockGrid') {
	                        scene = new _LF_CleBlockGrid.LF_CleBlockGrid(this.svg, this.transGroup, sceneData, griddata);
	                    } else if (sceneData.type === 'blockGrid') {
	                        scene = new _LF_BlockGrid.LF_BlockGrid(this.svg, this.transGroup, sceneData, griddata);
	                    } else {
	                        scene = new _LF_DotGrid.LF_DotGrid(this.svg, this.transGroup, sceneData, griddata);
	                    }
	                }
	            } else {
	                /*学生端*/
	                var modifyData = this._initStudentData(griddata, sceneL1);
	                if (sceneL1 === 'writeCoor') {
	                    if (sceneData.type === 'cleBlockGrid') {
	                        scene = new _STU_CleBlockGrid.STU_CleBlockGrid(this.svg, this.transGroup, sceneData, modifyData);
	                    } else if (sceneData.type === 'blockGrid') {
	                        scene = new _STU_BlockGrid.STU_BlockGrid(this.svg, this.transGroup, sceneData, modifyData);
	                    } else {
	                        scene = new _STU_DotGrid.STU_DotGrid(this.svg, this.transGroup, sceneData, modifyData);
	                    }
	                } else if (sceneL1 === 'lookforCoor') {
	                    if (sceneData.type === 'cleBlockGrid') {
	                        scene = new _STU_LF_CleBlockGrid.STU_LF_CleBlockGrid(this.svg, this.transGroup, sceneData, modifyData);
	                    } else if (sceneData.type === 'blockGrid') {
	                        scene = new _STU_LF_BlockGrid.STU_LF_BlockGrid(this.svg, this.transGroup, sceneData, modifyData);
	                    } else {
	                        scene = new _STU_LF_DotGrid.STU_LF_DotGrid(this.svg, this.transGroup, sceneData, modifyData);
	                    }
	                }
	            }
	            return scene;
	        }
	    }, {
	        key: 'showTab',
	        value: function showTab(gridId) {
	            this.dotGrid_10X10.style.display = 'none';
	            this.blockGrid_18X18.style.display = 'none';
	            this.cleBlockGrid_18X18.style.display = 'none';
	            /*不存在则创建*/
	            var sceneArr = gridId.split('_');
	            var sceneL1 = sceneArr[0],
	                sceneL2 = sceneArr[1],
	                sceneL3 = sceneArr[2];
	            var sceneData = this.defData[sceneL1][sceneL2][sceneL3];

	            if (!this.gridObjs[gridId]) {
	                this.gridObjs[gridId] = this._createByType(sceneL1, sceneData, this.gridDatas[gridId]);
	                //this.gridObjs[gridId].setData(this.gridDatas[gridId]);
	                /*找位置动物监听点更新*/
	                // if (!this.isStudent && gridId === 'lookforCoor_animateDot_scene1') {
	                //     let that = this;
	                //     this.gridObjs['lookforCoor_animateDot_scene1'].listen && this.gridObjs['lookforCoor_animateDot_scene1'].listen('updateCoor', function (coor) {
	                //         $(that.paper).trigger('updateCoor', [coor]);
	                //     });
	                // }
	                if (gridId.match('lookforCoor')) {
	                    var that = this;
	                    this.gridObjs[gridId].listen && this.gridObjs[gridId].listen('updateCoor', function (coor, isDelete) {
	                        $(that.paper).trigger('updateCoor', [coor, isDelete]);
	                    });
	                    /*连线结束监听*/
	                    if (this.isStudent) {
	                        this.gridObjs[gridId].listen && this.gridObjs[gridId].listen('lineFinish', function (coor) {
	                            $(that.paper).trigger('lineFinish', [coor]);
	                        });
	                    }
	                }
	            }

	            var viewBoxVal = sceneData.matrix.minX + ' ' + -sceneData.matrix.maxY + ' ' + (sceneData.matrix.maxX - sceneData.matrix.minX) + ' ' + (sceneData.matrix.maxY - sceneData.matrix.minY);
	            this.svg.setAttribute('viewBox', viewBoxVal);
	            //this.transGroup.setAttribute('transform', 'matrix(1,0,0,-1,0,'+sceneData.matrix.maxY+')');

	            var grid = this[sceneData.type + '_' + sceneData.matrix.maxX + 'X' + sceneData.matrix.maxY];
	            grid.style.display = '';

	            this.curGridId = gridId;
	            for (var id in this.gridObjs) {
	                this.gridObjs[id].setVisibility(false);
	            }
	            this.gridObjs[gridId].setVisibility(true);

	            $(this.paper).trigger('change');
	        }
	    }, {
	        key: 'bindEvent',
	        value: function bindEvent() {
	            var _this = this;

	            var clickHandle = function clickHandle(event) {
	                if (_this.curGridId !== '') {
	                    _this.gridObjs[_this.curGridId].girdClickHandle(event);
	                    _this.undoStack.save();
	                    /*学生端的写数对都不用更新*/
	                    if (_this.gridObjs[_this.curGridId].defaultData.updateNumPairs) {
	                        if (_this.isStudent && _this.curGridId.indexOf('write') !== -1) return;
	                        $(_this.paper).trigger('change');
	                    }
	                }
	            };
	            /*点击加圆点*/
	            // [this.dotGrid_10X10, this.blockGrid_20X20, this.cleBlockGrid_20X20]
	            // 	.forEach(item => item.addEventListener('click', clickHandle, false));
	            this.svg.addEventListener('click', clickHandle, false);
	        }
	    }, {
	        key: 'getCurGridId',
	        value: function getCurGridId() {
	            return this.curGridId;
	        }
	    }, {
	        key: 'getData',
	        value: function getData() {
	            var data = $.extend(true, {}, this.curGridId && this.gridObjs[this.curGridId].getData());
	            this.gridDatas[this.curGridId] = data;
	            return data;
	        }
	    }, {
	        key: 'getDefaultData',
	        value: function getDefaultData() {
	            var defaultData = this.curGridId && this.gridObjs[this.curGridId].getDefaultData();
	            return { coors: defaultData.coors, numPairs: defaultData.numPairs };
	        }
	    }, {
	        key: 'setData',
	        value: function setData(data) {
	            this.curGridId && this.gridObjs[this.curGridId].setData(data);
	        }
	    }, {
	        key: 'reset',
	        value: function reset() {
	            // this.curGridId && this.gridObjs[this.curGridId].reset();
	            // this.setData(this.getDefaultData());
	            this.undoStack.reset($.proxy(this.setData, this));
	            $(this.paper).trigger('change');
	        }
	    }, {
	        key: 'doDetail',
	        value: function doDetail(coor) {
	            this.curGridId && this.gridObjs[this.curGridId].doDetail(coor);
	            $(this.paper).trigger('change');
	        }

	        /*数对不完整情况下用mark区分*/

	    }, {
	        key: 'drawX',
	        value: function drawX(coor, isAnimate, mark, isNotSave) {
	            var res = this.curGridId && this.gridObjs[this.curGridId].drawX(coor, isAnimate, mark);
	            if (!isNotSave) {
	                this.undoStack.save();
	            }
	            return res;
	        }
	    }, {
	        key: 'drawY',
	        value: function drawY(coor, isAnimate, mark, isNotSave) {
	            var res = this.curGridId && this.gridObjs[this.curGridId].drawY(coor, isAnimate, mark);
	            if (!isNotSave) {
	                this.undoStack.save();
	            }
	            return res;
	        }

	        /*增加点和数对*/

	    }, {
	        key: 'updateNumPairsFn',
	        value: function updateNumPairsFn(coor, mark, coorType, imgSrc) {
	            this.curGridId && this.gridObjs[this.curGridId].updateNumPairsFn(coor, mark, coorType, imgSrc);
	            //this.undoStack.save();
	        }
	    }, {
	        key: 'updateCoorsFn',
	        value: function updateCoorsFn(coor) {
	            this.curGridId && this.gridObjs[this.curGridId].updateCoorsFn(coor);
	            //this.undoStack.save();
	        }

	        /*外部增加数对*/

	    }, {
	        key: 'updateNumPairsFnOutSide',
	        value: function updateNumPairsFnOutSide(coor, mark, coorType, imgSrc) {
	            var isExist = this.curGridId && this.gridObjs[this.curGridId].updateNumPairsFnOutSide(coor, mark, coorType, imgSrc);
	            this.undoStack.save();
	            return isExist;
	        }
	    }, {
	        key: 'setUndoStack',
	        value: function setUndoStack(undoStack) {
	            undoStack.onUpdate();
	            this.undoStack = undoStack;
	        }
	    }, {
	        key: 'undo',
	        value: function undo() {
	            this.undoStack.undo($.proxy(this.setData, this));
	            $(this.paper).trigger('change');
	        }
	    }, {
	        key: 'redo',
	        value: function redo() {
	            this.undoStack.redo($.proxy(this.setData, this));
	            $(this.paper).trigger('change');
	        }

	        /*保存所有预设数据（万一要编辑保存功能）*/

	    }, {
	        key: 'getAllData',
	        value: function getAllData() {
	            for (var key in this.gridObjs) {
	                this.gridDatas[key] = this.gridObjs[key].getData();
	            }
	            return this.gridDatas;
	        }

	        /*外部触发判断答案是否正确*/

	    }, {
	        key: 'judgeAnswer',
	        value: function judgeAnswer(coor) {
	            this.curGridId && this.gridObjs[this.curGridId].judgeAnswer(coor);
	        }
	    }, {
	        key: '_initStudentData',
	        value: function _initStudentData(data, type) {
	            if (!data) return;
	            if (type === 'lookforCoor') {
	                data.coors = {};
	            }
	            var keys = Object.keys(data.numPairs);
	            var _iteratorNormalCompletion = true;
	            var _didIteratorError = false;
	            var _iteratorError = undefined;

	            try {
	                for (var _iterator = keys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                    var key = _step.value;

	                    data.numPairs[key].lineX = false;
	                    data.numPairs[key].lineY = false;
	                    if (type === 'lookforCoor') {
	                        if (isNaN(parseInt(data.numPairs[key].x)) || isNaN(parseInt(data.numPairs[key].y))) {
	                            delete data.numPairs[key];
	                        }
	                    }
	                    if (data.numPairs[key] && data.numPairs[key].imgSrc) {
	                        var index = data.numPairs[key].imgSrc.indexOf('resources/wood/images/');
	                        data.numPairs[key].imgSrc = this.basePath + data.numPairs[key].imgSrc.substr(index, data.numPairs[key].imgSrc.length);
	                    }
	                }
	            } catch (err) {
	                _didIteratorError = true;
	                _iteratorError = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion && _iterator.return) {
	                        _iterator.return();
	                    }
	                } finally {
	                    if (_didIteratorError) {
	                        throw _iteratorError;
	                    }
	                }
	            }

	            var coorKeys = Object.keys(data.coors);
	            var _iteratorNormalCompletion2 = true;
	            var _didIteratorError2 = false;
	            var _iteratorError2 = undefined;

	            try {
	                for (var _iterator2 = coorKeys[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	                    var _key = _step2.value;

	                    if (data.coors[_key].imgSrc) {
	                        var _index = data.coors[_key].imgSrc.indexOf('resources/wood/images/');
	                        data.coors[_key].imgSrc = this.basePath + data.coors[_key].imgSrc.substr(_index, data.coors[_key].imgSrc.length);
	                    }
	                }
	            } catch (err) {
	                _didIteratorError2 = true;
	                _iteratorError2 = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                        _iterator2.return();
	                    }
	                } finally {
	                    if (_didIteratorError2) {
	                        throw _iteratorError2;
	                    }
	                }
	            }

	            return data;
	        }
	    }]);

	    return GridMain;
	}();

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.DotGrid = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _Grid2 = __webpack_require__(4);

	var _Utils = __webpack_require__(5);

	var _style = __webpack_require__(6);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var DotGrid = exports.DotGrid = function (_Grid) {
	    _inherits(DotGrid, _Grid);

	    function DotGrid(svg, transGroup, defaultData, griddata) {
	        _classCallCheck(this, DotGrid);

	        var _this = _possibleConstructorReturn(this, (DotGrid.__proto__ || Object.getPrototypeOf(DotGrid)).call(this, svg, transGroup, defaultData, griddata));

	        _this.setData(_this.data);

	        return _this;
	    }

	    /*取相应点坐标，如3.5则取4等*/


	    _createClass(DotGrid, [{
	        key: 'translateCoor',
	        value: function translateCoor(point) {
	            var coor = {
	                x: point.x.toFixed(0),
	                y: point.y.toFixed(0)
	            };
	            return coor;
	        }
	    }, {
	        key: 'updateNumPairsFnOutSide',
	        value: function updateNumPairsFnOutSide() {
	            var coor = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	            var mark = arguments[1];
	            var coorType = arguments[2];
	            var imgSrc = arguments[3];
	            /*给外部增加数对调用*/
	            if (coor.x && coor.y) {
	                var key = 'coor_' + coor.x + '_' + coor.y;
	                if (this.data.numPairs[mark]) {
	                    this.data.numPairs[key] = this.data.numPairs[mark];
	                    this.data.numPairs[key].y = coor.y;
	                    this.data.numPairs[key].x = coor.x;
	                    delete this.data.numPairs[mark];
	                } else {
	                    this.data.numPairs[key] = {
	                        'x': coor.x,
	                        'y': coor.y,
	                        'isVisibleX': true,
	                        'isVisibleY': true,
	                        'lineX': false,
	                        'lineY': false,
	                        'mark': mark,
	                        'type': coorType
	                    };
	                    if (coorType === 'img') {
	                        this.data.numPairs[key].imgSrc = imgSrc;
	                    }
	                }
	                /*设置标志*/
	                if (this.data.coors[key]) {
	                    this.setCoorMark(coor, this.data.numPairs[key].mark);
	                    this.data.numPairs[key].isCorrect = true;
	                    return true;
	                }
	            } else {
	                if (!this.data.numPairs[mark]) {
	                    this.data.numPairs[mark] = {};
	                    this.data.numPairs[mark].isVisibleX = true;
	                    this.data.numPairs[mark].isVisibleY = true;
	                    this.data.numPairs[mark].lineX = false;
	                    this.data.numPairs[mark].lineY = false;
	                    this.data.numPairs[mark].mark = mark;
	                }

	                coor.x && (this.data.numPairs[mark].x = coor.x);
	                coor.y && (this.data.numPairs[mark].y = coor.y);
	                this.data.numPairs[mark].coorType = coorType;
	                if (coorType === 'img') {
	                    this.data.numPairs[mark].imgSrc = imgSrc;
	                }
	            }
	        }
	    }, {
	        key: 'updateCoorsFn',
	        value: function updateCoorsFn(coor) {
	            var fakeCoor = _Utils.utils.chFakeCoor(coor);
	            var key = 'coor_' + fakeCoor.x + '_' + fakeCoor.y;
	            if (this.data.coors && !this.data.coors[key]) {
	                var newCoor = { 'x': fakeCoor.x, 'y': fakeCoor.y };
	                this.trigger('updateCoor', newCoor);
	                this.data.coors[key] = newCoor;
	                this.setCoor(newCoor);
	            }
	        }

	        /*设置具体网格的点*/

	    }, {
	        key: 'setCoorGridType',
	        value: function setCoorGridType(coor) {
	            var coorGroup = this.group.querySelector('.coorGroup');
	            if (!coorGroup) {
	                coorGroup = _Utils.utils.createSvgObj(this.group, 'g', { 'class': 'coorGroup' });
	            }
	            var attrs = {
	                'cx': coor.x,
	                'cy': coor.y
	            };
	            _Utils.utils.assign(attrs, _style.gridEleStyle.dotNormal);
	            _Utils.utils.createSvgObj(coorGroup, 'circle', attrs);
	            /*判断颜色*/
	            coor.fill && this.setCoorColor(coor, coor.fill);
	        }
	    }, {
	        key: 'setCoorImg',
	        value: function setCoorImg(coor) {
	            var coorGroup = this.group.querySelector('.coorGroup');
	            if (!coorGroup) {
	                coorGroup = _Utils.utils.createSvgObj(this.group, 'g', { 'class': 'coorGroup' });
	            }
	            var fakeCoor = _Utils.utils.chFakeCoor(coor);
	            var key = 'coor_' + fakeCoor.x + '_' + fakeCoor.y;
	            if (this.data.numPairs[key] && this.data.numPairs[key].imgSrc) {
	                var attrs = {
	                    'x': coor.x - _style.standardStyle.imgWidth / 2,
	                    'y': coor.y - _style.standardStyle.imgHeight / 2
	                };

	                _Utils.utils.assign(attrs, _style.gridEleStyle.imgNormal);
	                var imgEle = _Utils.utils.createSvgObj(coorGroup, 'image', attrs);
	                _Utils.utils.setSvgObjAttrsNS(imgEle, this.data.numPairs[key].imgSrc);
	            }
	        }
	    }, {
	        key: 'setCoorColor',
	        value: function setCoorColor(coor, color) {
	            var coorGroup = this.group.querySelector('.coorGroup');
	            var realCoor = _Utils.utils.chRealCoor(coor);
	            var coorObjArr = coorGroup.querySelectorAll('circle');
	            for (var i = 0; i < coorObjArr.length; i++) {
	                if (parseInt(coorObjArr[i].getAttribute('cx')) === realCoor.x && parseInt(coorObjArr[i].getAttribute('cy')) === realCoor.y) {
	                    _Utils.utils.setSvgObjAttrs(coorObjArr[i], { 'fill': color });
	                    break;
	                }
	            }
	            var fakeCoor = _Utils.utils.chFakeCoor(coor);
	            var key = 'coor_' + fakeCoor.x + '_' + fakeCoor.y;
	            this.data.coors[key].fill = color;
	        }

	        /*画点前判断*/

	    }, {
	        key: 'beforeDraw',
	        value: function beforeDraw(coor, drawType, mark) {
	            var drawGroup = this.group.querySelector('.drawGroup');
	            if (!drawGroup) {
	                drawGroup = _Utils.utils.createSvgObj(this.group, 'g', { 'class': 'drawGroup' }, 'prepend');
	            }
	            this.drawGroup = drawGroup;
	            var pathEle = void 0,
	                pathEle2 = void 0;
	            var anotherDrawType = void 0;
	            if (drawType === 'X') {
	                pathEle = drawGroup.querySelector('.pathX');
	                pathEle2 = drawGroup.querySelector('.pathY');
	                anotherDrawType = 'Y';
	            } else {
	                pathEle = drawGroup.querySelector('.pathY');
	                pathEle2 = drawGroup.querySelector('.pathX');
	                anotherDrawType = 'X';
	            }
	            if (!pathEle) {
	                var pathAttrs = {
	                    'class': 'path' + drawType
	                };
	                _Utils.utils.assign(pathAttrs, _style.gridEleStyle.drawLine);
	                pathEle = _Utils.utils.createSvgObj(drawGroup, 'path', pathAttrs, 'prepend');
	            }

	            var fakeCoor = _Utils.utils.chFakeCoor(coor);
	            var key = 'coor_' + fakeCoor.x + '_' + fakeCoor.y;
	            /*数对不完整情况下用mark区分*/
	            var curNumpair = this.data.numPairs[key];
	            if (!curNumpair && mark) {
	                curNumpair = this.data.numPairs[mark];
	            }
	            if (!curNumpair['line' + anotherDrawType]) {
	                pathEle2 && (pathEle2.style.display = "none");
	            } else {
	                pathEle2 && (pathEle2.style.display = 'block');
	            }
	            pathEle.style.display = 'block';

	            /*修改数据*/
	            this.setCoorLineXY(coor, drawType, mark);
	            this.setCoorIsvisibleXY(coor, drawType, true, mark);
	            /*修改数据结束*/
	            return pathEle;
	        }
	    }, {
	        key: 'drawY',
	        value: function drawY(coor, isAnimate) {
	            var realCoor = _Utils.utils.chRealCoor(coor);
	            var miny = this.defaultData.matrix.minY;
	            /*统一加data-pair*/
	            var d1 = realCoor.x + '_' + realCoor.y + '_' + realCoor.x + '_' + miny;
	            var newAttr = {
	                'd': 'M' + realCoor.x + ' ' + realCoor.y + 'L' + realCoor.x + ' ' + miny,
	                'data-pair': d1
	            };
	            var pathEle = this.beforeDraw(coor, 'Y');
	            if (!isAnimate) {
	                _Utils.utils.setSvgObjAttrs(pathEle, newAttr);
	            } else {
	                // utils.drawLineAni(pathEle, coor, {x: realCoor.x, y: miny}, DOT_DRAW_CONFIG.shortDuring)

	                if (!this.drawPromiseY) {
	                    var defer = $.Deferred();
	                    this.drawPromiseY = defer;
	                    defer.resolve();
	                }
	                this.drawPromiseY = this.drawPromiseY.then(function () {
	                    return _Utils.utils.drawLineAni(pathEle, coor, {
	                        x: realCoor.x,
	                        y: miny
	                    }, _style.DOT_DRAW_CONFIG.shortDuring);
	                });
	            }
	            return this.drawPromiseY;
	        }
	    }, {
	        key: 'drawX',
	        value: function drawX(coor, isAnimate) {
	            var realCoor = _Utils.utils.chRealCoor(coor);
	            var minx = this.defaultData.matrix.minX;
	            var d1 = realCoor.x + '_' + realCoor.y + '_' + minx + '_' + realCoor.y;
	            var newAttr = {
	                'd': 'M' + realCoor.x + ' ' + realCoor.y + 'L' + minx + ' ' + realCoor.y,
	                'data-pair': d1
	            };
	            var pathEle = this.beforeDraw(coor, 'X');
	            if (!isAnimate) {
	                _Utils.utils.setSvgObjAttrs(pathEle, newAttr);
	            } else {
	                //utils.drawLineAni(pathEle, coor, {x: minx, y: realCoor.y}, DOT_DRAW_CONFIG.shortDuring);
	                if (!this.drawPromiseX) {
	                    var defer = $.Deferred();
	                    this.drawPromiseX = defer;
	                    defer.resolve();
	                }
	                this.drawPromiseX = this.drawPromiseX.then(function () {
	                    return _Utils.utils.drawLineAni(pathEle, coor, {
	                        x: minx,
	                        y: realCoor.y
	                    }, _style.DOT_DRAW_CONFIG.shortDuring);
	                });
	            }
	            return this.drawPromiseX;
	        }
	    }]);

	    return DotGrid;
	}(_Grid2.Grid);

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.Grid = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _Utils = __webpack_require__(5);

	var _style = __webpack_require__(6);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var defaultData = {
	    /*最大坐标*/
	    'matrix': { 'maxX': 10, 'maxY': 10, 'minX': 0, 'minY': 0 },
	    /*坐标类型*/
	    'type': 'dotGrid',
	    /*网格中默认画好的点*/
	    'coors': {
	        'coor_5_0': { 'x': 5, 'y': 0 }
	    },
	    /*默认数对，用于展示*/
	    'numPairs': {
	        'coor_5_0': { 'x': 5, 'y': 0, 'type': 'img', 'imgSrc': '', 'isVisible': false, 'lineX': true, 'lineY': true, 'fill': 'yellow', 'mark': 'A' }
	    },

	    /*是否需要连点成线*/
	    'dotConnect': false,
	    /*连线完是否需要显示最终图像*/
	    'showResImg': false,
	    /*点击表格是否需要更新数对内容*/
	    'updateNumPairs': true,
	    /*学生端点击坐标是否判断正误*/
	    "clickToJudge": false,
	    /*网格是否可点击加点*/
	    "updateCoors": true
	};

	var Grid = exports.Grid = function () {
	    function Grid(svg, transGroup) {
	        var defaultData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultData;
	        var griddata = arguments[3];

	        _classCallCheck(this, Grid);

	        this.svg = svg;
	        this.transGroup = transGroup;
	        this.defaultData = $.extend(true, {}, defaultData);
	        if (griddata) {
	            /*保存数据用*/
	            this.data = griddata;
	        } else {
	            this.data = {};
	            this.data.coors = $.extend(true, {}, defaultData.coors) || {};
	            this.data.numPairs = $.extend(true, {}, defaultData.numPairs) || {};
	        }

	        this.group = _Utils.utils.createSvgObj(this.transGroup, 'g');
	        this.order = []; //设置标志用，存数对顺序
	        this.clientList = {};
	        /*draw横纵坐标promise对象。*/
	        this.drawPromiseX = $.Deferred().resolve();
	        this.drawPromiseY = $.Deferred().resolve();
	    }

	    /**
	     * [控制层级]
	     * @param {[type]} bgGroup    [背景]
	     * @param {[type]} coorGroup  [点]
	     * @param {[type]} markGroup  [标志]
	     * @param {[type]} drawGroup  [横纵坐标]
	     * @param {[type]} defCoorCon [连线]
	     * @param {[type]} resImg     [最终图片]
	     */


	    _createClass(Grid, [{
	        key: '_addSomeGroup',
	        value: function _addSomeGroup() {
	            var bgGroup = void 0,
	                coorGroup = void 0,
	                markGroup = void 0,
	                drawGroup = void 0,
	                defCoorCon = void 0,
	                resImg = void 0;
	            bgGroup = this.group.querySelector('.bgGroup');
	            drawGroup = this.group.querySelector('.drawGroup');
	            coorGroup = this.group.querySelector('.coorGroup');
	            markGroup = this.group.querySelector('.markGroup');
	            defCoorCon = this.group.querySelector('.defCoorCon');
	            //resImg = this.group.querySelector('.resImg');
	            if (!bgGroup) {
	                bgGroup = _Utils.utils.createSvgObj(this.group, 'g', { 'class': 'bgGroup' });
	                this.bgGroup = bgGroup;
	            }
	            if (!defCoorCon) {
	                defCoorCon = _Utils.utils.createSvgObj(this.group, 'g', { 'class': 'defCoorCon' });
	                this.defCoorCon = defCoorCon;
	            }
	            if (!drawGroup) {
	                drawGroup = _Utils.utils.createSvgObj(this.group, 'g', { 'class': 'drawGroup' });
	                this.drawGroup = drawGroup;
	            }
	            if (!coorGroup) {
	                coorGroup = _Utils.utils.createSvgObj(this.group, 'g', { 'class': 'coorGroup' });
	                this.coorGroup = coorGroup;
	            }
	            if (!markGroup) {
	                markGroup = _Utils.utils.createSvgObj(this.group, 'g', { 'class': 'markGroup' });
	                this.markGroup = markGroup;
	            }
	        }
	    }, {
	        key: 'listen',
	        value: function listen(key, fn) {
	            if (!this.clientList[key]) {
	                this.clientList[key] = [];
	            }
	            this.clientList[key].push(fn);
	        }
	    }, {
	        key: 'trigger',
	        value: function trigger() {
	            var key = Array.prototype.shift.call(arguments);
	            var fns = this.clientList[key];
	            if (!fns || fns.length === 0) {
	                return false;
	            }
	            for (var i = 0, fn; fn = fns[i++];) {
	                fn.apply(this, arguments);
	            }
	        }

	        /*点击网格事件*/

	    }, {
	        key: 'girdClickHandle',
	        value: function girdClickHandle(event) {
	            var resImgObj = this.group.querySelector('.resImg');
	            if (resImgObj && resImgObj.style.display === 'block') {
	                return;
	            }
	            var pageX = event.pageX;
	            var pageY = event.pageY;
	            var point = _Utils.utils.reportMouseCoordinates(this.svg, pageX, pageY, this.transGroup);

	            var coor = this.translateCoor(point);
	            //console.log(coor);
	            // let gridType = this.defaultData.type;
	            // let coorType = gridType === 'dotGrid'? 'dot': 'block';

	            /*隐藏横纵坐标画的线, 撤销还原有问题*/
	            // let pathEle = this.group.querySelector('.pathY');
	            // let pathEle2 = this.group.querySelector('.pathX');
	            // pathEle && (pathEle.style.display='none');
	            // pathEle2 && (pathEle2.style.display='none');
	            // this._resetCoorLineXY(coor);

	            /*具体业务*/
	            this.doDetail(coor);
	        }

	        /*隐藏画的横纵坐标线*/

	    }, {
	        key: '_resetCoorLineXY',
	        value: function _resetCoorLineXY() {
	            for (var key in this.data.numPairs) {
	                this.data.numPairs[key]['lineX'] = false;
	                this.data.numPairs[key]['lineY'] = false;
	            }
	        }

	        /*画线后改变数据，子类用*/
	        /*数对不完整情况下用mark区分*/

	    }, {
	        key: 'setCoorLineXY',
	        value: function setCoorLineXY(coor, xyType, mark) {
	            var keyN = void 0;
	            if (typeof coor.x !== "undefined" && typeof coor.y !== "undefined") {
	                var fakeCoor = _Utils.utils.chFakeCoor(coor);
	                keyN = 'coor_' + fakeCoor.x + '_' + fakeCoor.y;
	            } else {
	                keyN = mark;
	            }

	            for (var key in this.data.numPairs) {
	                if (key === keyN) {
	                    this.data.numPairs[key]['line' + xyType] = true;
	                } else {
	                    this.data.numPairs[key]['line' + xyType] = false;
	                }
	                if (xyType == 'X') {
	                    if (key !== keyN) {
	                        this.data.numPairs[key]['lineY'] = false;
	                    }
	                } else if (xyType == 'Y') {
	                    if (key !== keyN) {
	                        this.data.numPairs[key]['lineX'] = false;
	                    }
	                }
	            }
	        }
	    }, {
	        key: 'setCoorIsvisibleXY',
	        value: function setCoorIsvisibleXY(coor, xyType, isVisible, mark) {
	            var keyN = void 0;
	            if (!isNaN(parseInt(coor.x)) && !isNaN(parseInt(coor.y))) {
	                var fakeCoor = _Utils.utils.chFakeCoor(coor);
	                keyN = 'coor_' + fakeCoor.x + '_' + fakeCoor.y;
	            } else {
	                keyN = mark;
	            }
	            for (var key in this.data.numPairs) {
	                if (key === keyN) {
	                    this.data.numPairs[key]['isVisible' + xyType] = isVisible;
	                }
	            }
	        }

	        /*具体业务*/

	    }, {
	        key: 'doDetail',
	        value: function doDetail(coor, coorType, imgSrc) {
	            var fakeCoor = _Utils.utils.chFakeCoor(coor);
	            //	let key = 'coor_'+fakeCoor.x+'_'+fakeCoor.y;

	            var maxX = this.defaultData.matrix.maxX,
	                minX = this.defaultData.matrix.minX,
	                maxY = this.defaultData.matrix.maxY,
	                minY = this.defaultData.matrix.minY;
	            if (fakeCoor.x > maxX - minX || fakeCoor.x < minX || fakeCoor.y > maxY - minY || fakeCoor.y < minY) {
	                return;
	            }

	            var isAddCoor = void 0;
	            /*是否增加数对*/
	            if (this.defaultData.updateNumPairs) {
	                isAddCoor = this.updateNumPairsFn(coor);
	            }
	            /*放updateNumPairsFn里，控制不超过Z*/
	            if (this.defaultData.updateCoors) {
	                if (this.defaultData.updateNumPairs && !isAddCoor) {
	                    return;
	                }
	                this.updateCoorsFn(coor, coorType, imgSrc);
	            }
	            /*是否连点成线*/
	            if (this.defaultData.dotConnect) {
	                this._drawDefCoorCon(true, coor);
	            }
	        }

	        /*更新数对和点，子类中实现*/

	    }, {
	        key: 'updateNumPairsFn',
	        value: function updateNumPairsFn(coor, mark, coorType, imgSrc) {
	            var fakeCoor = _Utils.utils.chFakeCoor(coor);
	            var key = 'coor_' + fakeCoor.x + '_' + fakeCoor.y;
	            if (this.data.numPairs && !this.data.numPairs[key]) {
	                if (!mark) {
	                    mark = 'A';
	                    for (var i = this.order.length - 1; i >= 0; i--) {
	                        var numPairMark = this.data.numPairs[this.order[i]].mark;
	                        if (numPairMark && numPairMark >= 'A' && numPairMark <= 'Z') {
	                            mark = String.fromCharCode(numPairMark.charCodeAt() + 1);
	                            break;
	                        }
	                    }
	                    if (mark > 'Z') {
	                        //alert('最多添加26个数对');
	                        return false;
	                    }
	                }
	                this.data.numPairs[key] = {
	                    'x': fakeCoor.x,
	                    'y': fakeCoor.y,
	                    'isVisibleX': false,
	                    'isVisibleY': false,
	                    'lineX': false,
	                    'lineY': false,
	                    'mark': mark,
	                    'type': coorType
	                };
	                if (coorType === 'img') {
	                    this.data.numPairs[key].imgSrc = imgSrc;
	                }
	                this.order.push(key);
	            }
	            return true;
	        }
	    }, {
	        key: 'updateCoorsFn',
	        value: function updateCoorsFn() {}

	        /*外部增加的数对*/

	    }, {
	        key: 'updateNumPairsFnOutSide',
	        value: function updateNumPairsFnOutSide(coor, mark, coorType, imgSrc) {}

	        /*设置标志*/

	    }, {
	        key: 'setCoorMark',
	        value: function setCoorMark(coor, mark) {
	            var markGroup = this.group.querySelector('.markGroup');
	            if (!markGroup) {
	                markGroup = _Utils.utils.createSvgObj(this.group, 'g', { 'class': 'markGroup' });
	                this.markGroup = markGroup;
	            };
	            var matrix = this.defaultData.matrix;
	            var loc = _Utils.utils.setTextLoc(coor, matrix.minX, matrix.minY, matrix.maxX, matrix.maxY);
	            var realCoor = _Utils.utils.chRealCoor(coor);
	            var textAttrs = {
	                'x': loc.x,
	                'y': loc.y,
	                'class': _style.standardStyle.fontClass
	            };
	            _Utils.utils.assign(textAttrs, _style.gridEleStyle.fontNormal);
	            var textEle = _Utils.utils.createSvgObj(this.markGroup, 'text', textAttrs);
	            textEle.innerHTML = mark;
	            if (this.defaultData.showResMark) {
	                this._showResMarkFn(false);
	            }
	        }

	        /*取相应点坐标，如3.5则取4等*/

	    }, {
	        key: 'translateCoor',
	        value: function translateCoor(point) {}

	        /*设置数对*/

	    }, {
	        key: 'setNumpair',
	        value: function setNumpair(coor) {
	            if (coor.lineX) {
	                this.drawX(coor, false, coor.mark);
	            }
	            if (coor.lineY) {
	                this.drawY(coor, false, coor.mark);
	            }
	        }

	        /*设置坐标点*/

	    }, {
	        key: 'setCoor',
	        value: function setCoor(coor) {
	            var fakeCoor = _Utils.utils.chFakeCoor(coor);
	            var key = 'coor_' + fakeCoor.x + '_' + fakeCoor.y;
	            var realCoor = _Utils.utils.chRealCoor(coor);
	            if (this.data.numPairs[key]) {
	                if (!this.data.numPairs[key].type) {
	                    /*设置具体网格的点*/
	                    this.setCoorGridType(realCoor);
	                    /*设置标志*/
	                    if (this.data.numPairs[key] && this.data.numPairs[key].mark) {
	                        this.setCoorMark(coor, this.data.numPairs[key].mark);
	                    }
	                } else if (this.data.numPairs[key].type === 'img') {
	                    this.setCoorImg(realCoor);
	                }
	            } else {
	                /*数对不存在要不要画点，hasMaxNumpair是否有最大数对限制*/
	                if (this.defaultData.hasMaxNumpair) {
	                    delete this.data.coors[key];
	                    return;
	                } else {
	                    this.setCoorGridType(realCoor);
	                }
	            }
	            // if(!this.data.numPairs[key] || !this.data.numPairs[key].type){/*设置具体网格的点*/
	            // 	this.setCoorGridType(realCoor);
	            // 	/*设置标志*/
	            // 	if(this.data.numPairs[key] &&　this.data.numPairs[key].mark){
	            // 		this.setCoorMark(coor, this.data.numPairs[key].mark);
	            // 	}
	            // }else if(this.data.numPairs[key].type === 'img'){
	            // 	this.setCoorImg(realCoor);
	            // }
	        }

	        /*子类中实现*/

	    }, {
	        key: 'setCoorGridType',
	        value: function setCoorGridType(coor) {}
	    }, {
	        key: 'setCoorImg',
	        value: function setCoorImg(coor) {}

	        /*设置坐标点结束*/
	        /*删除已选中的坐标点*/

	    }, {
	        key: 'delSelectedCoor',
	        value: function delSelectedCoor(coor) {
	            var data = $.extend(true, {}, this.data);
	            var fakeCoor = _Utils.utils.chFakeCoor(coor);
	            var key = 'coor_' + fakeCoor.x + '_' + fakeCoor.y;
	            data.numPairs[key] && delete data.numPairs[key];
	            data.coors[key] && delete data.coors[key];
	            this.setData(data);
	        }

	        /*画点到x轴的垂线*/
	        /*coor不完整的情况下用mark找数对*/

	    }, {
	        key: 'drawX',
	        value: function drawX(coor, isAnimate, mark) {}

	        /*画点到y轴的垂线*/

	    }, {
	        key: 'drawY',
	        value: function drawY(coor, isAnimate, mark) {}
	    }, {
	        key: '_drawTwoCoorCon',
	        value: function _drawTwoCoorCon(coor1, coor2, isAnimate) {
	            if (!coor1 || !coor2 || this.cancelDrawCon) {
	                return false;
	            }

	            var realCoor1 = _Utils.utils.chRealCoor(coor1),
	                realCoor2 = _Utils.utils.chRealCoor(coor2);

	            var d1 = realCoor1.x + '_' + realCoor1.y + '_' + realCoor2.x + '_' + realCoor2.y,
	                d2 = realCoor2.x + '_' + realCoor2.y + '_' + realCoor1.x + '_' + realCoor1.y;
	            var allPath = this.conLineGroup.querySelectorAll('path');

	            for (var i = 0; i < allPath.length; i++) {
	                var pair = allPath[i].getAttribute('data-pair');
	                if (pair === d1 || pair === d2) {
	                    return false;
	                }
	            }
	            var pathAttrs = {
	                'd': 'M ' + realCoor1.x + ' ' + realCoor1.y + ' L ' + realCoor2.x + ' ' + realCoor2.y,
	                'data-pair': d1
	            };
	            _Utils.utils.assign(pathAttrs, _style.gridEleStyle.connectLine);
	            var pathEle = _Utils.utils.createSvgObj(this.conLineGroup, 'path');
	            if (!isAnimate) {
	                _Utils.utils.setSvgObjAttrs(pathEle, pathAttrs);
	                return true;
	            } else {
	                return _Utils.utils.drawLineAni(pathEle, coor1, coor2, _style.DOT_DRAW_CONFIG.shortDuring, _style.gridEleStyle.connectLine);
	            }
	        }

	        /*显示最后图片*/

	    }, {
	        key: '_showResImg',
	        value: function _showResImg() {
	            var _this = this;

	            if (this.defaultData.showResImg && this.defaultData.resImgSrc) {
	                this.resImgObj = this.group.querySelector('.resImg');
	                if (!this.resImgObj) {
	                    var imgAttrs = {
	                        'class': 'resImg',
	                        'width': this.defaultData.matrix.maxX - this.defaultData.matrix.minX,
	                        'height': this.defaultData.matrix.maxY - this.defaultData.matrix.minY,
	                        'x': this.defaultData.matrix.minX,
	                        'y': -this.defaultData.matrix.maxY
	                    };
	                    this.resImgObj = _Utils.utils.createSvgObj(this.group, 'image', imgAttrs);
	                    _Utils.utils.setSvgObjAttrsNS(this.resImgObj, this.defaultData.resImgSrc);

	                    this.resImgObj.style.display = 'none';

	                    setTimeout(function () {
	                        _this.resImgObj.style.display = 'block';
	                        setTimeout(function () {
	                            _this.resImgObj.style.display = 'none';
	                        }, 5000);
	                    }, 2000);
	                } else {
	                    this.resImgObj.style.display = 'none';
	                }
	            }
	        }
	    }, {
	        key: '_drawDefCoorCon',
	        value: function _drawDefCoorCon(isAnimate, startCoor) {
	            var _this2 = this;

	            this.conLineGroup = this.group.querySelector('.defCoorCon');
	            if (!this.conLineGroup) {
	                this.conLineGroup = _Utils.utils.createSvgObj(this.group, 'g', { 'class': 'defCoorCon' }, 'prepend');
	            }
	            if (this.conLineGroup.childNodes.length > 0) {
	                /*是否已经连线*/
	                return;
	            } else {
	                var hasAllCoor = true;
	                for (var key in this.defaultData.numPairs) {
	                    if (!this.data.coors.hasOwnProperty(key)) {
	                        hasAllCoor = false;
	                        break;
	                    }
	                }
	                if (hasAllCoor) {
	                    this.cancelDrawCon = false;
	                }
	                if (hasAllCoor && this.defaultData.showResMark) {
	                    this._showResMarkFn(true);
	                }
	                if (hasAllCoor && this.defaultData.connectSeq) {
	                    var drawNodeAni = function drawNodeAni(key, data) {
	                        var promises = [];
	                        if (!key) {
	                            return;
	                        }
	                        var children = data[key];

	                        var _loop = function _loop(i) {
	                            var key2 = children[i];
	                            var res = _this2._drawTwoCoorCon(_this2.data.coors[key], _this2.data.coors[key2], isAnimate);
	                            if (!res) {
	                                return 'continue';
	                            } else {
	                                if (res && typeof res.then === 'function' && typeof res.done === 'function') {
	                                    promises.push(res.then(function () {
	                                        return drawNodeAni(key2, data);
	                                    }));
	                                } else {
	                                    drawNodeAni(key2, data);
	                                }
	                            }
	                        };

	                        for (var i = 0; i < children.length; i++) {
	                            var _ret = _loop(i);

	                            if (_ret === 'continue') continue;
	                        }
	                        return $.when.apply($, promises);
	                    };
	                    var firstKey = void 0;
	                    if (!startCoor) {
	                        for (var _key in this.defaultData.connectSeq) {
	                            firstKey = _key;
	                        }
	                    } else {
	                        var fakeCoor = _Utils.utils.chFakeCoor(startCoor);
	                        firstKey = 'coor_' + fakeCoor.x + '_' + fakeCoor.y;
	                    }
	                    drawNodeAni(firstKey, this.defaultData.connectSeq).done(function () {
	                        if (startCoor && _this2.defaultData.numPairs[firstKey] && !_this2.cancelDrawCon) {
	                            _this2._showResImg();
	                        }
	                    });
	                }
	            }
	        }

	        /*连点成线动画结束*/

	    }, {
	        key: 'setData',
	        value: function setData(data) {
	            if (!data) {
	                return;
	            }
	            this.data = $.extend(true, {}, data);
	            this.group.innerHTML = '';
	            /*加一些group用于控制层级*/
	            this._addSomeGroup();
	            /*加一些group用于控制层级结束*/
	            if (this.defaultData.bgcoors) {
	                //this.bgGroup = utils.createSvgObj(this.group, 'g');
	                for (var key in this.defaultData.bgcoors) {
	                    this.setBgCoor(this.defaultData.bgcoors[key]);
	                }
	            }
	            //   let conDefCoorStartCoor;
	            for (var _key2 in data.coors) {
	                this.setCoor(data.coors[_key2]);
	                //     if (data.numPairs[key]) {
	                //       conDefCoorStartCoor = data.coors[key];
	                //   }
	            }
	            this.order = [];
	            for (var _key3 in data.numPairs) {
	                this.setNumpair(data.numPairs[_key3]);
	                this.order.push(_key3);
	            }
	            this.cancelDrawCon = true;
	            if (this.defaultData.dotConnect) {
	                // this._drawDefCoorCon(false, conDefCoorStartCoor);
	                this._drawDefCoorCon();
	            }
	        }
	    }, {
	        key: 'getData',
	        value: function getData() {
	            var data = $.extend(true, {}, this.data);
	            //	console.log(data);
	            return data;
	        }
	    }, {
	        key: 'getDefaultData',
	        value: function getDefaultData() {
	            return this.defaultData;
	        }
	    }, {
	        key: 'setVisibility',
	        value: function setVisibility(isVisible) {
	            if (isVisible) {
	                this.group.style.display = '';
	            } else {
	                this.group.style.display = 'none';
	            }
	        }
	    }, {
	        key: '_showResMarkFn',
	        value: function _showResMarkFn(isVisible) {
	            var markGroup = this.group.querySelector('.markGroup');
	            if (!markGroup) {
	                return;
	            }
	            if (isVisible) {
	                markGroup.style.display = '';
	            } else {
	                markGroup.style.display = 'none';
	            }
	        }
	    }, {
	        key: '_showResImgFn',
	        value: function _showResImgFn(isVisible) {
	            var resImg = this.group.querySelector('.resImg');
	            if (!resImg) {
	                return;
	            }
	            if (isVisible) {
	                resImg.style.display = '';
	            } else {
	                resImg.style.display = 'none';
	            }
	        }
	    }]);

	    return Grid;
	}();

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.utils = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _style = __webpack_require__(6);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var SVG_NS = 'http://www.w3.org/2000/svg';
	var XLINK_NS = 'http://www.w3.org/1999/xlink';

	var __instance = function () {
	    var instance = void 0;
	    return function (newInstance) {
	        if (newInstance) instance = newInstance;
	        return instance;
	    };
	}();

	var Utils = function () {
	    function Utils() {
	        _classCallCheck(this, Utils);

	        if (__instance()) return __instance();
	        this.a = 'a';
	        __instance(this);
	    }

	    /*屏幕坐标转为svg坐标*/
	    /*获取svg对象的转化矩阵并求其逆矩阵*/


	    _createClass(Utils, [{
	        key: 'coordinateTransform',
	        value: function coordinateTransform(screenPoint, someSvgObject) {
	            var CTM = someSvgObject.getScreenCTM();
	            return screenPoint.matrixTransform(CTM.inverse());
	        }

	        /*转化坐标*/

	    }, {
	        key: 'reportMouseCoordinates',
	        value: function reportMouseCoordinates(svgElement, pageX, pageY, svgChild) {
	            var point = svgElement.createSVGPoint();
	            point.x = pageX;
	            point.y = pageY;
	            point = this.coordinateTransform(point, svgChild);
	            return point;
	        }

	        /*创建svg元素*/

	    }, {
	        key: 'createSvgObj',
	        value: function createSvgObj(parentObj, tagname) {
	            var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	            var appPre = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'append';

	            var svgEle = document.createElementNS(SVG_NS, tagname);
	            for (var attr in attributes) {
	                svgEle.setAttribute(attr, attributes[attr]);
	            }
	            if (appPre === 'prepend') {
	                $(parentObj).prepend(svgEle);
	            } else {
	                $(parentObj).append(svgEle);
	            }
	            return svgEle;
	        }

	        /*设置svg元素属性*/

	    }, {
	        key: 'setSvgObjAttrs',
	        value: function setSvgObjAttrs(svgEle) {
	            var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	            for (var attr in attributes) {
	                svgEle && svgEle.setAttribute(attr, attributes[attr]);
	            }
	        }
	    }, {
	        key: 'getSvgObjAttr',
	        value: function getSvgObjAttr(svgEle, attrName) {
	            svgEle && svgEle.getAttribute(attrName);
	        }

	        /*设置svg元素xlink属性*/

	    }, {
	        key: 'setSvgObjAttrsNS',
	        value: function setSvgObjAttrsNS(svgEle, url) {
	            svgEle && svgEle.setAttributeNS(XLINK_NS, 'xlink:href', url);
	        }
	    }, {
	        key: 'getSvgObjAttrsNS',
	        value: function getSvgObjAttrsNS(svgEle, attrName) {
	            svgEle && svgEle.getAttributeNS(XLINK_NS, attrName);
	        }
	    }, {
	        key: 'chFakeCoor',
	        value: function chFakeCoor(coor) {
	            var newCoor = $.extend(true, {}, coor);
	            newCoor.x = parseInt(coor.x);
	            newCoor.y = Math.abs(coor.y);
	            return newCoor;
	        }
	    }, {
	        key: 'chRealCoor',
	        value: function chRealCoor(coor) {
	            var newCoor = $.extend(true, {}, coor);
	            newCoor.x = parseInt(coor.x);
	            newCoor.y = coor.y === -0 ? 0 : -Math.abs(coor.y);
	            return newCoor;
	        }
	    }, {
	        key: 'spreadAnimation',
	        value: function spreadAnimation(cp, op, callback, isAnimate, endCallBack) {
	            var cx = cp.x;
	            var cy = cp.y;
	            var closetCoor = [];
	            var outerPos = 0;
	            var isStop = false;
	            if (isAnimate) {
	                step();
	            } else {
	                callback(op);
	                if (endCallBack) {
	                    endCallBack();
	                }
	            }

	            function step() {
	                outerPos++;
	                closetCoor.length = 0;
	                var x1 = cx - outerPos;
	                var x2 = cx + outerPos;
	                var y1 = cy - outerPos;
	                var y2 = cy + outerPos;
	                if (outerPos == 1) {
	                    closetCoor.push(cp);
	                }
	                for (var i = 0; i < op.length; i++) {
	                    var x = op[i].x;
	                    var y = op[i].y;
	                    if ((x == x1 || x == x2) && y >= y1 && y <= y2 || (y == y1 || y == y2) && x >= x1 && x <= x2) {
	                        closetCoor.push(op[i]);
	                    }
	                }
	                if (isStop) {
	                    if (endCallBack) {
	                        endCallBack();
	                    }
	                    return;
	                }
	                callback(closetCoor);
	                if (closetCoor.length == 0) {
	                    if (endCallBack) {
	                        endCallBack();
	                    }
	                    return;
	                }
	                setTimeout(step, 100);
	            }

	            return {
	                stop: function stop() {
	                    isStop = true;
	                }
	            };
	        }

	        /*时间转换*/

	    }, {
	        key: 'MillisecondToTime',
	        value: function MillisecondToTime(msd) {
	            var time = parseInt(msd) / 1000;
	            var minute = null;
	            var second = null;
	            if (time <= 60) {
	                second = time;
	            } else if (time > 60 && time < 60 * 60) {
	                minute = parseInt(time / 60);
	                second = time % 60;
	            }
	            return { minute: minute, second: second };
	        }

	        /*pad上Object.assign报错，所以改为这种*/

	    }, {
	        key: 'assign',
	        value: function assign(dest) {
	            for (var _len = arguments.length, items = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	                items[_key - 1] = arguments[_key];
	            }

	            // dest = $.extend(true, dest, ...items);
	            items.forEach(function (item) {
	                for (var key in item) {
	                    dest[key] = item[key];
	                }
	            });
	            //if($.isEmptyObject(dest)){
	            return dest;
	            // }
	        }

	        /*文字位置，暂时分为左上左下右上右下的情况*/

	    }, {
	        key: 'setTextLoc',
	        value: function setTextLoc(coor, minX, minY, maxX, maxY) {
	            var fakeCoor = this.chFakeCoor(coor);
	            var realCoor = this.chRealCoor(coor);
	            var middleX = Math.floor((maxX - minX) / 2);
	            var middleY = Math.floor((maxY - minY) / 2);
	            var location = {};
	            /*左上*/
	            if (fakeCoor.x >= minX && fakeCoor.x <= middleX && fakeCoor.y >= minY && fakeCoor.y < middleY) {
	                location.x = realCoor.x - _style.standardStyle.fontOffsetX - _style.standardStyle.fontSize / 4;
	                location.y = realCoor.y + _style.standardStyle.fontOffsetY + _style.standardStyle.fontSize / 4 - 0.2;
	            }
	            /*右下*/
	            else if (fakeCoor.x > middleX && fakeCoor.x <= maxX && fakeCoor.y >= minY && fakeCoor.y < middleY) {
	                    location.x = realCoor.x + _style.standardStyle.fontOffsetX - _style.standardStyle.fontSize / 2;
	                    location.y = realCoor.y + _style.standardStyle.fontOffsetY + _style.standardStyle.fontSize / 4 - 0.2;
	                }
	                /*左下*/
	                else if (fakeCoor.x >= minX && fakeCoor.x <= middleX && fakeCoor.y >= middleY && fakeCoor.y <= maxY) {
	                        location.x = realCoor.x - _style.standardStyle.fontOffsetX - _style.standardStyle.fontSize / 4;
	                        location.y = realCoor.y - _style.standardStyle.fontOffsetY + _style.standardStyle.fontSize / 2 + 0.2;
	                    }
	                    /*右上*/
	                    else if (fakeCoor.x > middleX && fakeCoor.x <= maxX && fakeCoor.y >= middleY && fakeCoor.y <= maxY) {
	                            location.x = realCoor.x + _style.standardStyle.fontOffsetX - _style.standardStyle.fontSize / 2;
	                            location.y = realCoor.y - _style.standardStyle.fontOffsetY + _style.standardStyle.fontSize / 2 + 0.2;
	                        }
	            /*边界情况*/
	            if (fakeCoor.x === minX) {
	                location.x = realCoor.x - _style.standardStyle.fontOffsetX + 0.1;
	            }
	            if (fakeCoor.x === maxX) {
	                location.x = realCoor.x + _style.standardStyle.fontOffsetX - _style.standardStyle.fontSize + 0.2;
	            }
	            if (fakeCoor.y === minY) {
	                location.y = realCoor.y - _style.standardStyle.fontOffsetY + _style.standardStyle.fontSize / 2 + 0.3;
	            }
	            if (fakeCoor.y === maxY) {
	                location.y = realCoor.y - _style.standardStyle.fontOffsetY + _style.standardStyle.fontSize;
	            }

	            return location;
	        }

	        /*画线动画 统一*/

	    }, {
	        key: 'drawLineAni',
	        value: function drawLineAni(pathEle, coor1, coor2, durTime) {
	            var _this = this;

	            var lineAttrs = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};

	            var defer = $.Deferred();
	            var realCoor1 = utils.chRealCoor(coor1),
	                realCoor2 = utils.chRealCoor(coor2);
	            /*动画时间*/
	            var start = 0,
	                during = durTime;
	            /*动画差值*/
	            var xCut = (realCoor2.x - realCoor1.x) / during;
	            var yCut = (realCoor2.y - realCoor1.y) / during;
	            var x = realCoor1.x,
	                y = realCoor1.y;
	            var d1 = realCoor1.x + '_' + realCoor1.y + '_' + realCoor2.x + '_' + realCoor2.y;
	            var newAttr = {
	                'data-pair': d1
	            };
	            this.assign(newAttr, lineAttrs);
	            var _run = function _run() {
	                start++;
	                y += yCut;
	                x += xCut;
	                newAttr.d = 'M ' + realCoor1.x + ' ' + realCoor1.y + 'L ' + x + ' ' + y;
	                _this.setSvgObjAttrs(pathEle, newAttr);
	                if (start < during) {
	                    requestAnimationFrame(_run);
	                } else {
	                    defer.resolve({});
	                }
	            };
	            _run();
	            return defer.promise();
	        }

	        /**
	         * [drawRectAni 方块网格画线（画多个小方块）动画]
	         * @param  {[type]} pathEle   [父svgObj]
	         * @param  {[type]} coor1     [点1]
	         * @param  {[type]} coor2     [点2]
	         * @param  {[type]} durTime   [画一个小矩形时间]
	         * @param  {Object} lineAttrs [其他样式]
	         * @return {[type]}           [promise对象]
	         */

	    }, {
	        key: 'drawRectAni',
	        value: function drawRectAni(pathEle, coor1, coor2, durTime) {
	            var lineAttrs = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};

	            /*一个durtime 画一个小矩形*/
	            var defer = $.Deferred();
	            var realCoor1 = utils.chRealCoor(coor1),
	                realCoor2 = utils.chRealCoor(coor2);
	            /*动画时间*/
	            var start = 0,
	                during = durTime;
	            /*动画差值*/
	            var totalDuringX = during * Math.abs(realCoor2.x - realCoor1.x);
	            var totalDuringY = during * Math.abs(realCoor2.y - realCoor1.y);

	            var rectAttrs = {};
	            this.assign(rectAttrs, lineAttrs);
	            var x = realCoor1.x,
	                y = realCoor1.y;
	            var _run = function _run() {
	                start++;
	                if (start % during === 0) {
	                    rectAttrs.x = x;
	                    rectAttrs.y = y - _style.standardStyle.height;
	                    utils.createSvgObj(pathEle, 'rect', rectAttrs);
	                    if (start < totalDuringX && totalDuringX !== 0) {
	                        x += 1;
	                    }
	                    /*两坐标差值不为0 就递增*/
	                    if (start < totalDuringY && totalDuringY !== 0) {
	                        y -= 1;
	                    }
	                }
	                if (start <= totalDuringX || start <= totalDuringY) {
	                    requestAnimationFrame(_run);
	                } else {
	                    defer.resolve({});
	                }
	            };
	            _run();
	            return defer.promise();
	        }
	    }]);

	    return Utils;
	}();

	var utils = new Utils();
	exports.utils = utils;

/***/ }),
/* 6 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _gridEleStyle;

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	var DOT_DRAW_CONFIG = {
	    start: 0,
	    during: 30,
	    shortDuring: 30
	};
	var BLOCK_DRAW_CONFIG = {
	    start: 0,
	    during: 6
	};
	var standardStyle = {
	    'r': 0.22,
	    'width': 1,
	    'height': 1,
	    'imgWidth': 1.54,
	    'imgHeight': 1.54,
	    'fontClass': 'nd_NewRoman_italic_fold',
	    'fontSize': 0.86,
	    'fontOffsetX': 0.6,
	    'fontOffsetY': 0.5,
	    'strokeWidth': 0.05,
	    'yellow': '#ffe013',
	    'orange': '#ef7222',
	    'black': '#333333',
	    'white': '#ffffff',
	    'gray': '#d9e3eb',
	    'brightgray': '#a7b4bb',
	    'darkGray': '#4d4d4d',
	    'green': '#04740b',
	    'red': '#cb1f1f',
	    'blue': '#005798'
	};
	var gridEleStyle = (_gridEleStyle = {
	    'dotNormal': {
	        'r': standardStyle.r,
	        'fill': standardStyle.darkGray
	    },
	    'dotCorrect': {
	        'r': standardStyle.r,
	        'fill': standardStyle.red
	    },
	    'dotError': {
	        'r': standardStyle.r,
	        'fill': standardStyle.green
	    },
	    'imgNormal': {
	        'width': standardStyle.imgWidth,
	        'height': standardStyle.imgHeight
	    },
	    'fontNormal': {
	        'style': 'font-size: ' + standardStyle.fontSize,
	        'fill': standardStyle.darkGray
	    },
	    'fontCorrect': {
	        'style': 'font-size: ' + standardStyle.fontSize,
	        'fill': standardStyle.green
	    },
	    'fontError': {
	        'style': 'font-size: ' + standardStyle.fontSize,
	        'fill': standardStyle.red
	    },
	    'drawLine': {
	        'stroke': standardStyle.red,
	        'stroke-width': standardStyle.strokeWidth
	    },
	    'connectLine': {
	        'stroke': standardStyle.blue,
	        'stroke-width': standardStyle.strokeWidth
	    }
	}, _defineProperty(_gridEleStyle, 'drawLine', {
	    'stroke': standardStyle.red,
	    'stroke-width': standardStyle.strokeWidth
	}), _defineProperty(_gridEleStyle, 'rectNormal', {
	    'width': standardStyle.width,
	    'height': standardStyle.height,
	    'stroke': standardStyle.brightgray,
	    'stroke-width': standardStyle.strokeWidth
	}), _defineProperty(_gridEleStyle, 'rectYellow', {
	    'width': standardStyle.width,
	    'height': standardStyle.height,
	    'stroke': standardStyle.brightgray,
	    'stroke-width': standardStyle.strokeWidth,
	    'fill': standardStyle.yellow
	}), _defineProperty(_gridEleStyle, 'rectOrange', {
	    'width': standardStyle.width,
	    'height': standardStyle.height,
	    'stroke': standardStyle.brightgray,
	    'stroke-width': standardStyle.strokeWidth,
	    'fill': standardStyle.orange
	}), _defineProperty(_gridEleStyle, 'rectBlack', {
	    'width': standardStyle.width,
	    'height': standardStyle.height,
	    'stroke': standardStyle.brightgray,
	    'stroke-width': standardStyle.strokeWidth,
	    'fill': standardStyle.black
	}), _defineProperty(_gridEleStyle, 'rectWhite', {
	    'width': standardStyle.width,
	    'height': standardStyle.height,
	    'stroke': standardStyle.brightgray,
	    'stroke-width': standardStyle.strokeWidth,
	    'fill': standardStyle.white
	}), _defineProperty(_gridEleStyle, 'rectRed', {
	    'width': standardStyle.width,
	    'height': standardStyle.height,
	    'stroke': standardStyle.red,
	    'stroke-width': standardStyle.strokeWidth,
	    'fill': 'none'
	}), _defineProperty(_gridEleStyle, 'rectGreen', {
	    'width': standardStyle.width,
	    'height': standardStyle.height,
	    'stroke': standardStyle.brightgray,
	    'stroke-width': standardStyle.strokeWidth,
	    'fill': standardStyle.green
	}), _gridEleStyle);
	exports.DOT_DRAW_CONFIG = DOT_DRAW_CONFIG;
	exports.BLOCK_DRAW_CONFIG = BLOCK_DRAW_CONFIG;
	exports.standardStyle = standardStyle;
	exports.gridEleStyle = gridEleStyle;

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.BlockGrid = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _Grid2 = __webpack_require__(4);

	var _Utils = __webpack_require__(5);

	var _style = __webpack_require__(6);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var BlockGrid = exports.BlockGrid = function (_Grid) {
	    _inherits(BlockGrid, _Grid);

	    function BlockGrid(svg, transGroup, defaultData, griddata) {
	        _classCallCheck(this, BlockGrid);

	        var _this = _possibleConstructorReturn(this, (BlockGrid.__proto__ || Object.getPrototypeOf(BlockGrid)).call(this, svg, transGroup, defaultData, griddata));

	        _this.setData(_this.data);
	        _this.reqAniFraY = null;
	        _this.reqAniFraX = null;
	        return _this;
	    }

	    _createClass(BlockGrid, [{
	        key: 'translateCoor',
	        value: function translateCoor(point) {
	            var coor = {
	                x: Math.floor(point.x),
	                y: Math.ceil(point.y)
	            };
	            return coor;
	        }
	        /**
	         * 覆盖父类的_addSomeGroup
	         * [控制层级]
	         * @param {[type]} bgGroup    [背景]
	         * @param {[type]} coorGroup  [点]
	         * @param {[type]} markGroup  [标志]
	         * @param {[type]} drawGroup  [横纵坐标]
	         * @param {[type]} defCoorCon [连线]
	         * @param {[type]} resImg     [最终图片]
	         */

	    }, {
	        key: '_addSomeGroup',
	        value: function _addSomeGroup() {
	            var bgGroup = void 0,
	                coorGroup = void 0,
	                markGroup = void 0,
	                drawGroup = void 0,
	                defCoorCon = void 0,
	                resImg = void 0;
	            bgGroup = this.group.querySelector('.bgGroup');
	            drawGroup = this.group.querySelector('.drawGroup');
	            coorGroup = this.group.querySelector('.coorGroup');
	            // markGroup = this.group.querySelector('.markGroup');
	            // defCoorCon = this.group.querySelector('.defCoorCon');
	            //resImg = this.group.querySelector('.resImg');
	            if (!bgGroup) {
	                bgGroup = _Utils.utils.createSvgObj(this.group, 'g', { 'class': 'bgGroup' });
	                this.bgGroup = bgGroup;
	            }
	            // if (!defCoorCon) {
	            //     defCoorCon = utils.createSvgObj(this.group, 'g', {'class': 'defCoorCon'});
	            //     this.defCoorCon = defCoorCon;
	            // }

	            if (!coorGroup) {
	                coorGroup = _Utils.utils.createSvgObj(this.group, 'g', { 'class': 'coorGroup' });
	                this.coorGroup = coorGroup;
	            }
	            if (!drawGroup) {
	                drawGroup = _Utils.utils.createSvgObj(this.group, 'g', { 'class': 'drawGroup' });
	                this.drawGroup = drawGroup;
	            }
	            // if (!markGroup) {
	            //     markGroup = utils.createSvgObj(this.group, 'g', {'class': 'markGroup'});
	            //     this.markGroup = markGroup;
	            // }
	        }
	    }, {
	        key: 'updateCoorsFn',
	        value: function updateCoorsFn(coor) {
	            var fakeCoor = _Utils.utils.chFakeCoor(coor);
	            var key = 'coor_' + fakeCoor.x + '_' + fakeCoor.y;
	            if (this.data.coors && !this.data.coors[key]) {
	                var newCoor = { 'x': fakeCoor.x, 'y': fakeCoor.y };
	                this.trigger('updateCoor', newCoor);
	                this.data.coors[key] = newCoor;
	                this.setCoor(newCoor);
	            }
	            // if(this.data.coors && !this.data.coors[key]){

	            // 	let newCoor = {'x': fakeCoor.x, 'y': fakeCoor.y, 'type': coorType};
	            // 	if(coorType === 'img'){
	            // 		newCoor.imgSrc = imgSrc;
	            // 	}
	            // 	if($('#createData1').find('option:selected').val() === "false"){
	            // 		this.data.coors[key] = newCoor;

	            // 	}
	            // 	this.setCoor(newCoor);
	            // }
	        }

	        /*设置具体网格的点*/

	    }, {
	        key: 'setCoorGridType',
	        value: function setCoorGridType(coor) {
	            var coorGroup = this.group.querySelector('.coorGroup');
	            if (!coorGroup) {
	                coorGroup = _Utils.utils.createSvgObj(this.group, 'g', { 'class': 'coorGroup' });
	            }
	            var fakeCoor = _Utils.utils.chFakeCoor(coor);
	            var key = 'coor_' + fakeCoor.x + '_' + fakeCoor.y;
	            var attrs = {
	                'class': 'sceneRect', /*用于区分画横纵坐标线画出来的rect*/
	                'x': coor.x,
	                'y': coor.y - _style.standardStyle.height,
	                'fill': this.data.numPairs[key] && this.data.numPairs[key].fill || 'none'
	            };
	            //attrs.fill = $('#createData').find('option:selected').val();
	            _Utils.utils.assign(attrs, _style.gridEleStyle.rectNormal);
	            /*层级，画横纵坐标层级 要在最上面*/
	            _Utils.utils.createSvgObj(coorGroup, 'rect', attrs);
	        }

	        // setCoorImg(coor){
	        // let coorGroup = this.group.querySelector('.coorGroup');
	        // if(!coorGroup){
	        // 	coorGroup = utils.createSvgObj(this.group, 'g', {'class': 'coorGroup'});
	        // }
	        // 	let attrs = {
	        // 		'x': coor.x,
	        // 		'y': coor.y - standardStyle.height
	        // 	};
	        // 	utils.assign(attrs, gridEleStyle.imgNormal);
	        // 	let imgEle = utils.createSvgObj(coorGroup, 'image', attrs);
	        // 	utils.setSvgObjAttrsNS(imgEle, coor.imgSrc);
	        // }

	        // setCoorColor(coor){
	        // 	let realCoor = utils.chRealCoor(coor);
	        // 	let color = 'none';
	        // 	let coorObjArr = this.group.querySelectorAll('.sceneRect');
	        // 	for(let i=0; i<coorObjArr.length; i++){
	        // 		if(parseInt(coorObjArr[i].getAttribute('x')) === realCoor.x && (parseInt(coorObjArr[i].getAttribute('y'))+standardStyle.height) === realCoor.y){
	        // 			if(coorObjArr[i].getAttribute('fill') === '#ffffff'){
	        // 				utils.setSvgObjAttrs(coorObjArr[i], {'fill': '#333333'});
	        // 				color = '#333333';
	        // 			}else if(coorObjArr[i].getAttribute('fill') === '#333333'){
	        // 				utils.setSvgObjAttrs(coorObjArr[i], {'fill': '#ffffff'});
	        // 				color = '#ffffff';
	        // 			}else{
	        // 				/*点击态*/
	        // 			}
	        // 			break;
	        // 		}
	        // 	}
	        // 	let fakeCoor = utils.chFakeCoor(coor);
	        // 	let key = 'coor_'+fakeCoor.x+'_'+fakeCoor.y;
	        // 	this.data.numPairs[key].fill = color;
	        // }

	    }, {
	        key: 'setBgCoor',
	        value: function setBgCoor(coor) {
	            var bgGroup = this.group.querySelector('.bgGroup');
	            if (!bgGroup) {
	                bgGroup = _Utils.utils.createSvgObj(this.group, 'g', { 'class': 'bgGroup' }, 'prepend');
	            }
	            var realCoor = _Utils.utils.chRealCoor(coor);
	            var attrs = {
	                'x': realCoor.x,
	                'y': realCoor.y - _style.standardStyle.height,
	                'fill': realCoor.fill || 'none'
	            };
	            //attrs.fill = $('#createData').find('option:selected').val();
	            _Utils.utils.assign(attrs, _style.gridEleStyle.rectNormal);
	            _Utils.utils.createSvgObj(bgGroup, 'rect', attrs, 'prepend');
	        }
	    }, {
	        key: 'beforeDraw',
	        value: function beforeDraw(coor, drawType, mark) {
	            var drawGroup = this.group.querySelector('.drawGroup');
	            if (!drawGroup) {
	                drawGroup = _Utils.utils.createSvgObj(this.group, 'g', { 'class': 'drawGroup' });
	            }
	            this.drawGroup = drawGroup;
	            var that = this;
	            //   	if(that['reqAniFra'+drawType]){
	            // 	cancelAnimationFrame(that['reqAniFra'+drawType]);
	            // }
	            var pathEle = void 0,
	                pathEle2 = void 0;
	            var anotherDrawType = void 0;
	            if (drawType === 'X') {
	                pathEle = drawGroup.querySelector('.pathX');
	                pathEle2 = drawGroup.querySelector('.pathY');
	                anotherDrawType = 'Y';
	            } else {
	                pathEle = drawGroup.querySelector('.pathY');
	                pathEle2 = drawGroup.querySelector('.pathX');
	                anotherDrawType = 'X';
	            }
	            if (!pathEle) {
	                var pathAttrs = {
	                    'class': 'path' + drawType
	                };
	                pathEle = _Utils.utils.createSvgObj(drawGroup, 'g', pathAttrs);
	            }

	            var childs = pathEle.childNodes;
	            /*先删除全部子节点后加入新的子节点。之后看看能不能优化*/
	            for (var i = childs.length - 1; i >= 0; i--) {
	                // alert(childs[i].nodeName);
	                pathEle.removeChild(childs[i]);
	            }

	            /*修改数据*/
	            var fakeCoor = _Utils.utils.chFakeCoor(coor);
	            var key = 'coor_' + fakeCoor.x + '_' + fakeCoor.y;
	            /*数对不完整情况下用mark区分*/
	            var curNumpair = this.data.numPairs[key];
	            if (!curNumpair && mark) {
	                curNumpair = this.data.numPairs[mark];
	            }
	            if (!curNumpair['line' + anotherDrawType]) {
	                pathEle2 && (pathEle2.style.display = "none");
	            } else {
	                pathEle2 && (pathEle2.style.display = 'block');
	            }
	            this.setCoorLineXY(coor, drawType);
	            this.setCoorIsvisibleXY(coor, drawType, true);
	            pathEle.style.display = 'block';
	            /*修改数据结束*/
	            return pathEle;
	        }
	    }, {
	        key: 'drawY',
	        value: function drawY(coor, isAnimate) {
	            var realCoor = _Utils.utils.chRealCoor(coor);
	            var that = this;
	            var miny = -Math.abs(that.defaultData.matrix.minY);

	            var rectAttrs = {
	                'x': realCoor.x,
	                'y': realCoor.y - _style.standardStyle.height
	            };
	            _Utils.utils.assign(rectAttrs, _style.gridEleStyle.rectRed);
	            var pathEle = this.beforeDraw(coor, 'Y');
	            if (!isAnimate) {
	                for (var i = realCoor.y; i < miny; i++) {
	                    rectAttrs.y = i;
	                    _Utils.utils.createSvgObj(pathEle, 'rect', rectAttrs);
	                }
	            } else {
	                //utils.drawRectAni(pathEle, coor, {x: coor.x, y: miny}, BLOCK_DRAW_CONFIG.during, gridEleStyle.rectRed);
	                if (!this.drawPromiseY) {
	                    var defer = $.Deferred();
	                    this.drawPromiseY = defer;
	                    defer.resolve();
	                }
	                this.drawPromiseY = this.drawPromiseY.then(function () {
	                    return _Utils.utils.drawRectAni(pathEle, coor, {
	                        x: coor.x,
	                        y: miny
	                    }, _style.BLOCK_DRAW_CONFIG.during, _style.gridEleStyle.rectRed);
	                });
	            }
	            return this.drawPromiseY;
	        }
	    }, {
	        key: 'drawX',
	        value: function drawX(coor, isAnimate) {
	            var realCoor = _Utils.utils.chRealCoor(coor);
	            var that = this;
	            var minx = that.defaultData.matrix.minX;
	            var rectAttrs = {
	                'x': realCoor.x,
	                'y': realCoor.y - _style.standardStyle.height
	            };
	            _Utils.utils.assign(rectAttrs, _style.gridEleStyle.rectRed);
	            var pathEle = this.beforeDraw(coor, 'X');

	            if (!isAnimate) {
	                for (var i = realCoor.x - 1; i >= minx; i--) {
	                    rectAttrs.x = i;
	                    _Utils.utils.createSvgObj(pathEle, 'rect', rectAttrs);
	                }
	            } else {
	                //utils.drawRectAni(pathEle, coor, {x: minx, y: coor.y}, BLOCK_DRAW_CONFIG.during, gridEleStyle.rectRed);
	                if (!this.drawPromiseX) {
	                    var defer = $.Deferred();
	                    this.drawPromiseX = defer;
	                    defer.resolve();
	                }
	                this.drawPromiseX = this.drawPromiseX.then(function () {
	                    return _Utils.utils.drawRectAni(pathEle, coor, {
	                        x: minx,
	                        y: coor.y
	                    }, _style.BLOCK_DRAW_CONFIG.during, _style.gridEleStyle.rectRed);
	                });
	            }
	            return this.drawPromiseX;
	        }
	    }]);

	    return BlockGrid;
	}(_Grid2.Grid);

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.CleBlockGrid = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _Grid2 = __webpack_require__(4);

	var _Utils = __webpack_require__(5);

	var _style = __webpack_require__(6);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var CleBlockGrid = exports.CleBlockGrid = function (_Grid) {
	    _inherits(CleBlockGrid, _Grid);

	    function CleBlockGrid(svg, transGroup, defaultData, griddata) {
	        _classCallCheck(this, CleBlockGrid);

	        var _this = _possibleConstructorReturn(this, (CleBlockGrid.__proto__ || Object.getPrototypeOf(CleBlockGrid)).call(this, svg, transGroup, defaultData, griddata));

	        _this.rectObj = {};
	        _this.createbgImg();
	        _this.createRects();
	        _this.setData(_this.data);
	        return _this;
	    }

	    _createClass(CleBlockGrid, [{
	        key: 'translateCoor',
	        value: function translateCoor(point) {
	            var coor = {
	                x: Math.floor(point.x),
	                y: Math.ceil(point.y)
	            };
	            return coor;
	        }
	        /**
	         * 覆盖父类的_addSomeGroup
	         * [控制层级]
	         * @param {[type]} bgGroup    [背景]
	         * @param {[type]} coorGroup  [点]
	         * @param {[type]} markGroup  [标志]
	         * @param {[type]} drawGroup  [横纵坐标]
	         * @param {[type]} defCoorCon [连线]
	         * @param {[type]} resImg     [最终图片]
	         */

	    }, {
	        key: '_addSomeGroup',
	        value: function _addSomeGroup() {
	            var bgGroup = void 0,
	                coorGroup = void 0,
	                markGroup = void 0,
	                drawGroup = void 0,
	                defCoorCon = void 0,
	                resImg = void 0;
	            bgGroup = this.group.querySelector('.bgGroup');
	            drawGroup = this.group.querySelector('.drawGroup');
	            coorGroup = this.group.querySelector('.coorGroup');
	            // markGroup = this.group.querySelector('.markGroup');
	            // defCoorCon = this.group.querySelector('.defCoorCon');
	            //resImg = this.group.querySelector('.resImg');
	            if (!bgGroup) {
	                bgGroup = _Utils.utils.createSvgObj(this.group, 'g', { 'class': 'bgGroup' });
	                this.bgGroup = bgGroup;
	            }
	            // if (!defCoorCon) {
	            //     defCoorCon = utils.createSvgObj(this.group, 'g', {'class': 'defCoorCon'});
	            //     this.defCoorCon = defCoorCon;
	            // }

	            if (!coorGroup) {
	                coorGroup = _Utils.utils.createSvgObj(this.group, 'g', { 'class': 'coorGroup' });
	                this.coorGroup = coorGroup;
	            }
	            if (!drawGroup) {
	                drawGroup = _Utils.utils.createSvgObj(this.group, 'g', { 'class': 'drawGroup' });
	                this.drawGroup = drawGroup;
	            }
	            // if (!markGroup) {
	            //     markGroup = utils.createSvgObj(this.group, 'g', {'class': 'markGroup'});
	            //     this.markGroup = markGroup;
	            // }
	        }
	    }, {
	        key: 'updateCoorsFn',
	        value: function updateCoorsFn(coor) {
	            var fakeCoor = _Utils.utils.chFakeCoor(coor);
	            var key = 'coor_' + fakeCoor.x + '_' + fakeCoor.y;
	            var coorsLen = Object.getOwnPropertyNames(this.data.coors).length;
	            var numpairsLen = Object.getOwnPropertyNames(this.data.numPairs).length;
	            if (coorsLen === numpairsLen) return;
	            if (this.data.coors && !this.data.coors[key]) {
	                this.trigger('updateCoor', { 'x': fakeCoor.x, 'y': fakeCoor.y });
	                if (this.data.numPairs[key]) {
	                    var newCoor = { 'x': fakeCoor.x, 'y': fakeCoor.y };
	                    this.data.coors[key] = newCoor;
	                    this.isClickCorrectGrid = true;
	                    this.setCoor(newCoor);
	                } else {
	                    /*点错盖上一半*/
	                    this.spreadAnimtion && this.spreadAnimtion.stop();
	                    var data = this.getData();
	                    var coorsKey = Object.keys(data.coors);
	                    if (coorsKey.length == 0) return;
	                    var deleteNum = coorsKey.length == 1 ? 1 : Math.floor(coorsKey.length / 2);
	                    var randomArr = [];
	                    for (var i = 0; i < coorsKey.length; i++) {
	                        randomArr.push(i);
	                    }
	                    randomArr.sort(function () {
	                        return 0.5 - Math.random();
	                    });
	                    for (var _i = 0; _i < deleteNum; _i++) {
	                        var tempKey = coorsKey[randomArr.pop()];
	                        this.trigger('updateCoor', { 'x': data.coors[tempKey].x, 'y': data.coors[tempKey].y }, true);
	                        delete data.coors[tempKey];
	                    }
	                    this.setData(data);
	                }
	            }
	            // if(this.data.coors && !this.data.coors[key]){

	            // 	let newCoor = {'x': fakeCoor.x, 'y': fakeCoor.y, 'type': coorType};
	            // 	if(coorType === 'img'){
	            // 		newCoor.imgSrc = imgSrc;
	            // 	}
	            // 	if($('#createData1').find('option:selected').val() === "false"){
	            // 		this.data.coors[key] = newCoor;

	            // 	}
	            // 	this.setCoor(newCoor);
	            // }
	        }
	    }, {
	        key: 'setCoorGridType',
	        value: function setCoorGridType(coor) {
	            var fakeCoor = _Utils.utils.chFakeCoor(coor);
	            var data = this.data;
	            var coorsLen = Object.getOwnPropertyNames(data.coors).length;
	            var numpairsLen = Object.getOwnPropertyNames(data.numPairs).length;
	            var isEnd = coorsLen == numpairsLen;
	            this.setAdjoinRectAttrs(fakeCoor, { 'fill-opacity': 0 }, this.isClickCorrectGrid, isEnd);
	            this.isClickCorrectGrid = false;
	        }
	    }, {
	        key: 'setData',
	        value: function setData(data) {
	            if (!data) {
	                return;
	            }
	            this.animation && this.animation.stop();
	            this.resetAllRect();
	            this.data = $.extend(true, {}, data);
	            this.group.innerHTML = '';
	            this.createbgImg();
	            this.createRects();
	            /*加一些group用于控制层级*/
	            this._addSomeGroup();
	            for (var key in data.coors) {
	                this.setCoor(data.coors[key]);
	            }
	            this.order = [];
	            for (var _key in data.numPairs) {
	                this.setNumpair(data.numPairs[_key]);
	                this.order.push(_key);
	            }
	        }
	    }, {
	        key: 'createbgImg',
	        value: function createbgImg() {
	            this.resImgObj = this.group.querySelector('.resImg');
	            if (!this.resImgObj) {
	                var imgAttrs = {
	                    'class': 'resImg',
	                    'width': this.defaultData.matrix.maxX - this.defaultData.matrix.minX,
	                    'height': this.defaultData.matrix.maxY - this.defaultData.matrix.minY,
	                    'x': this.defaultData.matrix.minX,
	                    'y': -this.defaultData.matrix.maxY
	                };
	                this.resImgObj = _Utils.utils.createSvgObj(this.group, 'image', imgAttrs, 'prepend');
	                _Utils.utils.setSvgObjAttrsNS(this.resImgObj, this.defaultData.resImgSrc);
	            }
	        }
	    }, {
	        key: 'createRects',
	        value: function createRects() {
	            var coorGroup = this.group.querySelector('.coorGroup');
	            if (!coorGroup) {
	                coorGroup = _Utils.utils.createSvgObj(this.group, 'g', { 'class': 'coorGroup' });
	            }
	            var minx = this.defaultData.matrix.minX;
	            var miny = this.defaultData.matrix.minY;
	            var rectAttrs = _Utils.utils.assign({}, _style.gridEleStyle.rectWhite);
	            var rectEle = null;
	            // for(let i=minx; i<this.defaultData.matrix.maxX; i++){
	            // 	for(let j= -this.defaultData.matrix.maxY-1; j<-miny; j++){
	            // 		rectAttrs.x = i;
	            // 		rectAttrs.y = j;
	            // 		rectEle = utils.createSvgObj(this.group, 'rect', rectAttrs);
	            // 		this.rectObj['coor_'+i+'_'+(-j)] = rectEle;
	            // 	}
	            // }
	            //console.log(this.rectObj)
	            for (var i = minx; i < this.defaultData.matrix.maxX; i++) {
	                for (var j = -miny; j > -this.defaultData.matrix.maxY; j--) {
	                    rectAttrs.x = i;
	                    rectAttrs.y = j - _style.standardStyle.height;
	                    rectEle = _Utils.utils.createSvgObj(coorGroup, 'rect', rectAttrs);
	                    this.rectObj['coor_' + i + '_' + -j] = rectEle;
	                }
	            }
	        }

	        /*设置旁边rect的fill*/

	    }, {
	        key: 'setAdjoinRectAttrs',
	        value: function setAdjoinRectAttrs(coor) {
	            var attrs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	            var isAnimate = arguments[2];
	            var isAccomplish = arguments[3];

	            // let realCoor = utils.chRealCoor(coor);

	            // for(let i=realCoor.x-5; i<=realCoor.x+2; i++){
	            // 	for(let j=realCoor.y-2; j<realCoor.y+1; j++){
	            // 	//	if(i>=0 && j<=0){
	            // 			this.rectObj['coor_'+i+'_'+(-j)] && utils.setSvgObjAttrs(this.rectObj['coor_'+i+'_'+(-j)], attrs);
	            // 	//	}
	            // 	}
	            // }
	            var that = this;
	            var fakeCoor = _Utils.utils.chFakeCoor(coor);
	            var key = 'coor_' + fakeCoor.x + '_' + fakeCoor.y;
	            var regExp = new RegExp("_(.+)_(.+)");
	            var endCallBack = isAccomplish ? that.hideAllRect : null;
	            if (!this.defaultData.cleSeq[key]) return;
	            var cleSeqCoor = this.defaultData.cleSeq[key].map(function (value) {
	                var result = regExp.exec(value);
	                return {
	                    x: parseInt(result[1]),
	                    y: parseInt(result[2])
	                };
	            });
	            this.spreadAnimtion = _Utils.utils.spreadAnimation({ x: fakeCoor.x, y: fakeCoor.y }, cleSeqCoor, function (cloestCoor) {
	                for (var i = 0; i < cloestCoor.length; i++) {
	                    var objKey = 'coor_' + cloestCoor[i].x + '_' + cloestCoor[i].y;
	                    if (isAnimate) {
	                        that.rectObj[objKey] && $(that.rectObj[objKey]).animate({ 'fill-opacity': 0 });
	                    } else {
	                        that.rectObj[objKey] && _Utils.utils.setSvgObjAttrs(that.rectObj[objKey], attrs);
	                    }
	                }
	            }, isAnimate, $.proxy(endCallBack, that));
	        }

	        /*全部设置为白色矩形*/

	    }, {
	        key: 'resetAllRect',
	        value: function resetAllRect() {
	            for (var key in this.rectObj) {
	                _Utils.utils.setSvgObjAttrs(this.rectObj[key], { 'fill-opacity': 1, 'stroke-opacity': 1 });
	            }
	        }
	    }, {
	        key: 'hideAllRect',
	        value: function hideAllRect() {
	            for (var key in this.rectObj) {
	                _Utils.utils.setSvgObjAttrs(this.rectObj[key], { 'fill-opacity': 0, 'stroke-opacity': 0 });
	            }
	        }
	    }, {
	        key: 'beforeDraw',
	        value: function beforeDraw(coor, drawType, mark) {
	            var drawGroup = this.group.querySelector('.drawGroup');
	            if (!drawGroup) {
	                drawGroup = _Utils.utils.createSvgObj(this.group, 'g', { 'class': 'drawGroup' });
	            }
	            this.drawGroup = drawGroup;
	            var that = this;
	            //   	if(that['reqAniFra'+drawType]){
	            // 	cancelAnimationFrame(that['reqAniFra'+drawType]);
	            // }
	            var pathEle = void 0,
	                pathEle2 = void 0;
	            var anotherDrawType = void 0;
	            if (drawType === 'X') {
	                pathEle = drawGroup.querySelector('.pathX');
	                pathEle2 = drawGroup.querySelector('.pathY');
	                anotherDrawType = 'Y';
	            } else {
	                pathEle = drawGroup.querySelector('.pathY');
	                pathEle2 = drawGroup.querySelector('.pathX');
	                anotherDrawType = 'X';
	            }
	            if (!pathEle) {
	                var pathAttrs = {
	                    'class': 'path' + drawType
	                };
	                pathEle = _Utils.utils.createSvgObj(drawGroup, 'g', pathAttrs);
	            }

	            var childs = pathEle.childNodes;
	            /*先删除全部子节点后加入新的子节点。之后看看能不能优化*/
	            for (var i = childs.length - 1; i >= 0; i--) {
	                // alert(childs[i].nodeName);
	                pathEle.removeChild(childs[i]);
	            }

	            /*修改数据*/
	            var fakeCoor = _Utils.utils.chFakeCoor(coor);
	            var key = 'coor_' + fakeCoor.x + '_' + fakeCoor.y;
	            /*数对不完整情况下用mark区分*/
	            var curNumpair = this.data.numPairs[key];
	            if (!curNumpair && mark) {
	                curNumpair = this.data.numPairs[mark];
	            }
	            if (!curNumpair['line' + anotherDrawType]) {
	                pathEle2 && (pathEle2.style.display = "none");
	            } else {
	                pathEle2 && (pathEle2.style.display = 'block');
	            }
	            this.setCoorLineXY(coor, drawType);
	            this.setCoorIsvisibleXY(coor, drawType, true);
	            pathEle.style.display = 'block';
	            /*修改数据结束*/
	            return pathEle;
	        }
	    }, {
	        key: 'drawY',
	        value: function drawY(coor, isAnimate) {
	            var realCoor = _Utils.utils.chRealCoor(coor);
	            var that = this;
	            var miny = -Math.abs(that.defaultData.matrix.minY);

	            var rectAttrs = {
	                'x': realCoor.x,
	                'y': realCoor.y - _style.standardStyle.height
	            };
	            _Utils.utils.assign(rectAttrs, _style.gridEleStyle.rectRed);
	            var pathEle = this.beforeDraw(coor, 'Y');
	            if (!isAnimate) {
	                for (var i = realCoor.y; i < miny; i++) {
	                    rectAttrs.y = i;
	                    _Utils.utils.createSvgObj(pathEle, 'rect', rectAttrs);
	                }
	            } else {
	                //utils.drawRectAni(pathEle, coor, {x: coor.x, y: miny}, BLOCK_DRAW_CONFIG.during, gridEleStyle.rectRed);
	                if (!this.drawPromiseY) {
	                    var defer = $.Deferred();
	                    this.drawPromiseY = defer;
	                    defer.resolve();
	                }
	                this.drawPromiseY = this.drawPromiseY.then(function () {
	                    return _Utils.utils.drawRectAni(pathEle, coor, {
	                        x: coor.x,
	                        y: miny
	                    }, _style.BLOCK_DRAW_CONFIG.during, _style.gridEleStyle.rectRed);
	                });
	            }
	            return this.drawPromiseY;
	        }
	    }, {
	        key: 'drawX',
	        value: function drawX(coor, isAnimate) {
	            var realCoor = _Utils.utils.chRealCoor(coor);
	            var that = this;
	            var minx = that.defaultData.matrix.minX;
	            var rectAttrs = {
	                'x': realCoor.x,
	                'y': realCoor.y - _style.standardStyle.height
	            };
	            _Utils.utils.assign(rectAttrs, _style.gridEleStyle.rectRed);
	            var pathEle = this.beforeDraw(coor, 'X');

	            if (!isAnimate) {
	                for (var i = realCoor.x - 1; i >= minx; i--) {
	                    rectAttrs.x = i;
	                    _Utils.utils.createSvgObj(pathEle, 'rect', rectAttrs);
	                }
	            } else {
	                //utils.drawRectAni(pathEle, coor, {x: minx, y: coor.y}, BLOCK_DRAW_CONFIG.during, gridEleStyle.rectRed);
	                if (!this.drawPromiseX) {
	                    var defer = $.Deferred();
	                    this.drawPromiseX = defer;
	                    defer.resolve();
	                }
	                this.drawPromiseX = this.drawPromiseX.then(function () {
	                    return _Utils.utils.drawRectAni(pathEle, coor, {
	                        x: minx,
	                        y: coor.y
	                    }, _style.BLOCK_DRAW_CONFIG.during, _style.gridEleStyle.rectRed);
	                });
	            }
	            return this.drawPromiseX;
	        }
	    }]);

	    return CleBlockGrid;
	}(_Grid2.Grid);

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.LF_DotGrid = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _DotGrid2 = __webpack_require__(3);

	var _Utils = __webpack_require__(5);

	var _style = __webpack_require__(6);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var LF_DotGrid = exports.LF_DotGrid = function (_DotGrid) {
		_inherits(LF_DotGrid, _DotGrid);

		function LF_DotGrid(svg, transGroup, defaultData, griddata) {
			_classCallCheck(this, LF_DotGrid);

			return _possibleConstructorReturn(this, (LF_DotGrid.__proto__ || Object.getPrototypeOf(LF_DotGrid)).call(this, svg, transGroup, defaultData, griddata));
		}

		_createClass(LF_DotGrid, [{
			key: '_setCoorAfterDrawXY',
			value: function _setCoorAfterDrawXY(coor) {
				var _this2 = this;

				var fakeCoor = _Utils.utils.chFakeCoor(coor);
				if (isNaN(parseInt(fakeCoor.x)) || isNaN(parseInt(fakeCoor.y))) return;
				var key = 'coor_' + fakeCoor.x + '_' + fakeCoor.y;
				// if(this.data.numPairs[key] && this.data.numPairs[key].lineX && this.data.numPairs[key].lineY){
				// if(this.drawPromiseX && this.drawPromiseY){
				$.when.apply($, [this.drawPromiseX, this.drawPromiseY]).done(function () {
					if (_this2.data.numPairs[key].lineX && _this2.data.numPairs[key].lineY) {
						/*保存数据，设置点*/
						//this.doDetail(coor); 	
						/*改变点的颜色*/
						//this.setCoorColor(coor, standardStyle.green);
						var realCoor = _Utils.utils.chRealCoor(coor);

						var highLightObj = _this2.drawGroup.querySelector('.highLightObj');
						if (!highLightObj) {
							var attrs = {
								"class": "highLightObj",
								"fill": _style.standardStyle.green,
								"cx": realCoor.x,
								"cy": realCoor.y,
								"r": _style.standardStyle.r
							};
							highLightObj = _Utils.utils.createSvgObj(_this2.drawGroup, 'circle', attrs);
						} else {
							_Utils.utils.setSvgObjAttrs(highLightObj, { "cx": realCoor.x, "cy": realCoor.y });
						}
						highLightObj.style.display = 'block';
					}
				});
				// }

				/*是否连点成线*/
				// if(this.defaultData.dotConnect){
				// 	this._drawDefCoorCon(true, coor);
				// }

				// }
			}
		}, {
			key: 'afterDraw',
			value: function afterDraw(coor) {
				this._setCoorAfterDrawXY(coor);
				//this._showResImgFn(false);
			}
		}, {
			key: 'drawY',
			value: function drawY(coor, isAnimate, mark) {
				var that = this;
				var realCoor = _Utils.utils.chRealCoor(coor);
				var miny = this.defaultData.matrix.minY;
				var maxy = this.defaultData.matrix.maxY;
				var d1 = realCoor.x + '_' + -miny + '_' + realCoor.x + '_' + -maxy;
				var newAttr = {
					'd': 'M' + realCoor.x + ' ' + -miny + 'L' + realCoor.x + ' ' + -maxy,
					'data-pair': d1
				};
				var pathEle = this.beforeDraw(coor, 'Y', mark);
				if (!isAnimate) {
					var highLightObj = that.drawGroup.querySelector('.highLightObj');
					if (highLightObj) {
						highLightObj.style.display = 'none';
					}
					_Utils.utils.setSvgObjAttrs(pathEle, newAttr);
					//this._setCoorAfterDrawXY(coor);	
					//this.afterDraw(coor);
				} else {
					// let promise = utils.drawLineAni(pathEle, {x: coor.x, y: -miny}, {x: coor.x, y:-maxy}, DOT_DRAW_CONFIG.during);
					// promise.then(() => {
					// 	//this._setCoorAfterDrawXY(coor);	
					// 	this.afterDraw(coor);
					// });
					if (!this.drawPromiseY) {
						var defer = $.Deferred();
						this.drawPromiseY = defer;
						defer.resolve();
					}
					this.drawPromiseY = this.drawPromiseY.then(function () {
						var highLightObj = that.drawGroup.querySelector('.highLightObj');
						if (highLightObj) {
							highLightObj.style.display = 'none';
						}
						return _Utils.utils.drawLineAni(pathEle, { x: coor.x, y: -miny }, { x: coor.x, y: -maxy }, _style.DOT_DRAW_CONFIG.during);
					});
				}
				this.afterDraw(coor);
				return this.drawPromiseY;
			}
		}, {
			key: 'drawX',
			value: function drawX(coor, isAnimate, mark) {
				var that = this;
				var realCoor = _Utils.utils.chRealCoor(coor);
				var minx = this.defaultData.matrix.minX;
				var maxx = this.defaultData.matrix.maxX;
				var d1 = minx + '_' + realCoor.y + '_' + maxx + '_' + realCoor.y;
				var newAttr = {
					'd': 'M' + minx + ' ' + realCoor.y + 'L' + maxx + ' ' + realCoor.y,
					'data-pair': d1
				};
				var pathEle = this.beforeDraw(coor, 'X', mark);
				if (!isAnimate) {
					var highLightObj = that.drawGroup.querySelector('.highLightObj');
					if (highLightObj) {
						highLightObj.style.display = 'none';
					}
					_Utils.utils.setSvgObjAttrs(pathEle, newAttr);
					//this._setCoorAfterDrawXY(coor);	
					//this.afterDraw(coor);	  
				} else {
					// let promise = utils.drawLineAni(pathEle, {x: minx, y: realCoor.y}, {x: maxx, y:realCoor.y}, DOT_DRAW_CONFIG.during);
					// promise.then(() => {
					// 	//this._setCoorAfterDrawXY(coor);	
					// 	this.afterDraw(coor);
					// });
					if (!this.drawPromiseX) {
						var defer = $.Deferred();
						this.drawPromiseX = defer;
						defer.resolve();
					}
					this.drawPromiseX = this.drawPromiseX.then(function () {
						var highLightObj = that.drawGroup.querySelector('.highLightObj');
						if (highLightObj) {
							highLightObj.style.display = 'none';
						}
						return _Utils.utils.drawLineAni(pathEle, { x: minx, y: realCoor.y }, { x: maxx, y: realCoor.y }, _style.DOT_DRAW_CONFIG.during);
					});
				}
				this.afterDraw(coor);
				return this.drawPromiseX;
			}
		}]);

		return LF_DotGrid;
	}(_DotGrid2.DotGrid);

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.LF_BlockGrid = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _BlockGrid2 = __webpack_require__(7);

	var _Utils = __webpack_require__(5);

	var _style = __webpack_require__(6);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var LF_BlockGrid = exports.LF_BlockGrid = function (_BlockGrid) {
		_inherits(LF_BlockGrid, _BlockGrid);

		function LF_BlockGrid(svg, transGroup, defaultData, griddata) {
			_classCallCheck(this, LF_BlockGrid);

			return _possibleConstructorReturn(this, (LF_BlockGrid.__proto__ || Object.getPrototypeOf(LF_BlockGrid)).call(this, svg, transGroup, defaultData, griddata));
		}

		_createClass(LF_BlockGrid, [{
			key: 'drawY',
			value: function drawY(coor, isAnimate) {
				var _this2 = this;

				var realCoor = _Utils.utils.chRealCoor(coor);
				var that = this;
				var miny = that.defaultData.matrix.minY;
				var maxy = that.defaultData.matrix.maxY;
				var rectAttrs = {
					'x': realCoor.x,
					'y': realCoor.y - _style.standardStyle.height
				};
				_Utils.utils.assign(rectAttrs, _style.gridEleStyle.rectRed);
				if (!isAnimate) {
					var pathEle = this.beforeDraw(coor, 'Y');
					var highLightObj = that.drawGroup.querySelector('.highLightObj');
					if (highLightObj) {
						highLightObj.style.display = 'none';
					}
					for (var i = -miny; i > -maxy; i--) {
						rectAttrs.y = i - _style.standardStyle.height;
						_Utils.utils.createSvgObj(pathEle, 'rect', rectAttrs);
					}
					//this._setCoorAfterDrawXY(coor);
					//this.afterDraw(coor);
				} else {
					// let promise = utils.drawRectAni(pathEle, {x: coor.x, y: miny}, {x: coor.x, y: maxy}, BLOCK_DRAW_CONFIG.during, gridEleStyle.rectRed);
					// promise.then(() => {
					// 	//this._setCoorAfterDrawXY(coor);	
					// 	this.afterDraw(coor);
					// });

					if (!this.drawPromiseY) {
						var defer = $.Deferred();
						this.drawPromiseY = defer;
						defer.resolve();
					}
					this.drawPromiseY = this.drawPromiseY.then(function () {

						//console.log('then');
						var pathEle = _this2.beforeDraw(coor, 'Y');
						var highLightObj = that.drawGroup.querySelector('.highLightObj');
						if (highLightObj) {
							highLightObj.style.display = 'none';
						}

						return _Utils.utils.drawRectAni(pathEle, { x: coor.x, y: miny }, { x: coor.x, y: maxy }, _style.BLOCK_DRAW_CONFIG.during, _style.gridEleStyle.rectRed);
					});
				}
				// this.afterDraw(coor);
				return this.drawPromiseY;
			}
		}, {
			key: 'drawX',
			value: function drawX(coor, isAnimate) {
				var _this3 = this;

				var realCoor = _Utils.utils.chRealCoor(coor);
				var that = this;
				var minx = that.defaultData.matrix.minX;
				var maxx = that.defaultData.matrix.maxX;

				var rectAttrs = {
					'x': realCoor.x,
					'y': realCoor.y - _style.standardStyle.height
				};
				_Utils.utils.assign(rectAttrs, _style.gridEleStyle.rectRed);

				if (!isAnimate) {

					var pathEle = this.beforeDraw(coor, 'X');
					var highLightObj = that.drawGroup.querySelector('.highLightObj');
					if (highLightObj) {
						highLightObj.style.display = 'none';
					}

					for (var i = minx; i < maxx; i++) {
						rectAttrs.x = i;
						_Utils.utils.createSvgObj(pathEle, 'rect', rectAttrs);
					}
					// this._setCoorAfterDrawXY(coor);
					//this.afterDraw(coor);
				} else {
					// let promise = utils.drawRectAni(pathEle, {x: minx, y: coor.y}, {x: maxx, y: coor.y}, BLOCK_DRAW_CONFIG.during, gridEleStyle.rectRed);
					// promise.then(() => {
					// 	// this._setCoorAfterDrawXY(coor);	
					// 	this.afterDraw(coor);
					// });
					if (!this.drawPromiseX) {
						var defer = $.Deferred();
						this.drawPromiseX = defer;
						defer.resolve();
					}
					this.drawPromiseX = this.drawPromiseX.then(function () {

						// console.log('then')
						var pathEle = _this3.beforeDraw(coor, 'X');
						var highLightObj = that.drawGroup.querySelector('.highLightObj');
						if (highLightObj) {
							highLightObj.style.display = 'none';
						}
						return _Utils.utils.drawRectAni(pathEle, { x: minx, y: coor.y }, { x: maxx, y: coor.y }, _style.BLOCK_DRAW_CONFIG.during, _style.gridEleStyle.rectRed);
					});
				}
				// this.afterDraw(coor);
				return this.drawPromiseX;
			}
		}]);

		return LF_BlockGrid;
	}(_BlockGrid2.BlockGrid);

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.LF_CleBlockGrid = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _CleBlockGrid2 = __webpack_require__(8);

	var _Utils = __webpack_require__(5);

	var _style = __webpack_require__(6);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var LF_CleBlockGrid = exports.LF_CleBlockGrid = function (_CleBlockGrid) {
		_inherits(LF_CleBlockGrid, _CleBlockGrid);

		function LF_CleBlockGrid(svg, transGroup, defaultData, griddata) {
			_classCallCheck(this, LF_CleBlockGrid);

			return _possibleConstructorReturn(this, (LF_CleBlockGrid.__proto__ || Object.getPrototypeOf(LF_CleBlockGrid)).call(this, svg, transGroup, defaultData, griddata));
		}

		_createClass(LF_CleBlockGrid, [{
			key: 'drawY',
			value: function drawY(coor, isAnimate) {
				var _this2 = this;

				var realCoor = _Utils.utils.chRealCoor(coor);
				var that = this;
				var miny = that.defaultData.matrix.minY;
				var maxy = that.defaultData.matrix.maxY;
				var rectAttrs = {
					'x': realCoor.x,
					'y': realCoor.y - _style.standardStyle.height
				};
				_Utils.utils.assign(rectAttrs, _style.gridEleStyle.rectRed);
				if (!isAnimate) {
					var pathEle = this.beforeDraw(coor, 'Y');
					var highLightObj = that.drawGroup.querySelector('.highLightObj');
					if (highLightObj) {
						highLightObj.style.display = 'none';
					}
					for (var i = -miny; i > -maxy; i--) {
						rectAttrs.y = i - _style.standardStyle.height;
						_Utils.utils.createSvgObj(pathEle, 'rect', rectAttrs);
					}
					//this._setCoorAfterDrawXY(coor);
					//this.afterDraw(coor);
				} else {
					// let promise = utils.drawRectAni(pathEle, {x: coor.x, y: miny}, {x: coor.x, y: maxy}, BLOCK_DRAW_CONFIG.during, gridEleStyle.rectRed);
					// promise.then(() => {
					// 	//this._setCoorAfterDrawXY(coor);	
					// 	this.afterDraw(coor);
					// });

					if (!this.drawPromiseY) {
						var defer = $.Deferred();
						this.drawPromiseY = defer;
						defer.resolve();
					}
					this.drawPromiseY = this.drawPromiseY.then(function () {

						//console.log('then');
						var pathEle = _this2.beforeDraw(coor, 'Y');
						var highLightObj = that.drawGroup.querySelector('.highLightObj');
						if (highLightObj) {
							highLightObj.style.display = 'none';
						}

						return _Utils.utils.drawRectAni(pathEle, { x: coor.x, y: miny }, { x: coor.x, y: maxy }, _style.BLOCK_DRAW_CONFIG.during, _style.gridEleStyle.rectRed);
					});
				}
				// this.afterDraw(coor);
				return this.drawPromiseY;
			}
		}, {
			key: 'drawX',
			value: function drawX(coor, isAnimate) {
				var _this3 = this;

				var realCoor = _Utils.utils.chRealCoor(coor);
				var that = this;
				var minx = that.defaultData.matrix.minX;
				var maxx = that.defaultData.matrix.maxX;

				var rectAttrs = {
					'x': realCoor.x,
					'y': realCoor.y - _style.standardStyle.height
				};
				_Utils.utils.assign(rectAttrs, _style.gridEleStyle.rectRed);

				if (!isAnimate) {

					var pathEle = this.beforeDraw(coor, 'X');
					var highLightObj = that.drawGroup.querySelector('.highLightObj');
					if (highLightObj) {
						highLightObj.style.display = 'none';
					}

					for (var i = minx; i < maxx; i++) {
						rectAttrs.x = i;
						_Utils.utils.createSvgObj(pathEle, 'rect', rectAttrs);
					}
					// this._setCoorAfterDrawXY(coor);
					//this.afterDraw(coor);
				} else {
					// let promise = utils.drawRectAni(pathEle, {x: minx, y: coor.y}, {x: maxx, y: coor.y}, BLOCK_DRAW_CONFIG.during, gridEleStyle.rectRed);
					// promise.then(() => {
					// 	// this._setCoorAfterDrawXY(coor);	
					// 	this.afterDraw(coor);
					// });
					if (!this.drawPromiseX) {
						var defer = $.Deferred();
						this.drawPromiseX = defer;
						defer.resolve();
					}
					this.drawPromiseX = this.drawPromiseX.then(function () {

						// console.log('then')
						var pathEle = _this3.beforeDraw(coor, 'X');
						var highLightObj = that.drawGroup.querySelector('.highLightObj');
						if (highLightObj) {
							highLightObj.style.display = 'none';
						}
						return _Utils.utils.drawRectAni(pathEle, { x: minx, y: coor.y }, { x: maxx, y: coor.y }, _style.BLOCK_DRAW_CONFIG.during, _style.gridEleStyle.rectRed);
					});
				}
				// this.afterDraw(coor);
				return this.drawPromiseX;
			}
		}]);

		return LF_CleBlockGrid;
	}(_CleBlockGrid2.CleBlockGrid);

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.STU_DotGrid = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _STU_Grid2 = __webpack_require__(13);

	var _Utils = __webpack_require__(5);

	var _style = __webpack_require__(6);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var STU_DotGrid = exports.STU_DotGrid = function (_STU_Grid) {
		_inherits(STU_DotGrid, _STU_Grid);

		function STU_DotGrid(svg, transGroup, defaultData, griddata) {
			_classCallCheck(this, STU_DotGrid);

			var _this = _possibleConstructorReturn(this, (STU_DotGrid.__proto__ || Object.getPrototypeOf(STU_DotGrid)).call(this, svg, transGroup, defaultData, griddata));

			_this.setData(_this.data);
			return _this;
		}
		/*取相应点坐标，如3.5则取4等*/


		_createClass(STU_DotGrid, [{
			key: 'translateCoor',
			value: function translateCoor(point) {
				var coor = {
					x: point.x.toFixed(0),
					y: point.y.toFixed(0)
				};
				return coor;
			}
			/*子类中实现*/

		}, {
			key: 'setCoorGridType',
			value: function setCoorGridType(coor) {
				var coorGroup = this.group.querySelector('.coorGroup');
				if (!coorGroup) {
					coorGroup = _Utils.utils.createSvgObj(this.group, 'g', { 'class': 'coorGroup' });
				}
				var fakeCoor = _Utils.utils.chFakeCoor(coor);
				var key = 'coor_' + fakeCoor.x + '_' + fakeCoor.y;
				if (this.data.coors[key].type === 'img') {
					this.setCoorImg(coor, true);
				} else {
					var attrs = {
						'cx': coor.x,
						'cy': coor.y
					};
					_Utils.utils.assign(attrs, _style.gridEleStyle.dotNormal);
					_Utils.utils.createSvgObj(coorGroup, 'circle', attrs);
					/*判断颜色*/
					coor.fill && this.setCoorColor(coor, coor.fill);
				}
			}
		}, {
			key: 'setCoorImg',
			value: function setCoorImg(coor, isByCoor) {
				var coorGroup = this.group.querySelector('.coorGroup');
				if (!coorGroup) {
					coorGroup = _Utils.utils.createSvgObj(this.group, 'g', { 'class': 'coorGroup' });
				}
				var fakeCoor = _Utils.utils.chFakeCoor(coor);
				var key = 'coor_' + fakeCoor.x + '_' + fakeCoor.y;
				var dataArr = isByCoor ? this.data.coors : this.data.numPairs;
				var isExist = false;
				/*动物已存在就直接画红点*/
				if (!isByCoor) {
					var coorKey = Object.keys(this.data.coors);
					var _iteratorNormalCompletion = true;
					var _didIteratorError = false;
					var _iteratorError = undefined;

					try {
						for (var _iterator = coorKey[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
							var i = _step.value;

							if (i !== key && dataArr[key].mark === this.data.coors[i].mark) {
								var attrs = {
									'cx': coor.x,
									'cy': coor.y
								};
								_Utils.utils.assign(attrs, _style.gridEleStyle.dotNormal);
								_Utils.utils.createSvgObj(coorGroup, 'circle', attrs);
								this.setCoorColor(coor, _style.standardStyle.red);
								isExist = true;
							}
						}
					} catch (err) {
						_didIteratorError = true;
						_iteratorError = err;
					} finally {
						try {
							if (!_iteratorNormalCompletion && _iterator.return) {
								_iterator.return();
							}
						} finally {
							if (_didIteratorError) {
								throw _iteratorError;
							}
						}
					}
				}
				if (dataArr[key] && dataArr[key].imgSrc && !isExist) {
					!isByCoor && (this.data.coors[key].mark = this.data.numPairs[key].mark);
					var _attrs = {
						'x': coor.x - _style.standardStyle.imgWidth / 2,
						'y': coor.y - _style.standardStyle.imgHeight / 2
					};
					_Utils.utils.assign(_attrs, _style.gridEleStyle.imgNormal);
					var imgEle = _Utils.utils.createSvgObj(coorGroup, 'image', _attrs);
					_Utils.utils.setSvgObjAttrsNS(imgEle, dataArr[key].imgSrc);
				}
			}
		}, {
			key: 'setCoorColor',
			value: function setCoorColor(coor, color) {
				var coorGroup = this.group.querySelector('.coorGroup');
				var realCoor = _Utils.utils.chRealCoor(coor);
				var coorObjArr = coorGroup.querySelectorAll('circle');
				for (var i = 0; i < coorObjArr.length; i++) {
					if (parseInt(coorObjArr[i].getAttribute('cx')) === realCoor.x && parseInt(coorObjArr[i].getAttribute('cy')) === realCoor.y) {
						_Utils.utils.setSvgObjAttrs(coorObjArr[i], { 'fill': color });
						break;
					}
				}
				var fakeCoor = _Utils.utils.chFakeCoor(coor);
				var key = 'coor_' + fakeCoor.x + '_' + fakeCoor.y;
				this.data.coors[key].fill = color;
			}
		}, {
			key: '_setCoorImgSrc',
			value: function _setCoorImgSrc(coor, isCorrect) {
				var coorGroup = this.group.querySelector('.coorGroup');
				var realCoor = _Utils.utils.chRealCoor(coor);
				var coorObjArr = coorGroup.querySelectorAll('image');
				var suf = isCorrect ? 'right' : 'wrong';
				for (var i = 0; i < coorObjArr.length; i++) {
					if (parseInt(coorObjArr[i].getAttribute('x')) === realCoor.x - _style.standardStyle.imgWidth / 2 && parseInt(coorObjArr[i].getAttribute('y')) === realCoor.y - _style.standardStyle.imgHeight / 2) {
						var oldImgSrc = _Utils.utils.getSvgObjAttrsNS(coorObjArr[i], 'xlink:href');
						_Utils.utils.setSvgObjAttrsNS(coorObjArr[i], oldImgSrc + '_' + suf);
						break;
					}
				}
				var fakeCoor = _Utils.utils.chFakeCoor(coor);
				var key = 'coor_' + fakeCoor.x + '_' + fakeCoor.y;
				this.data.numPairs[key].imgSrc = imgSrc;
			}
		}, {
			key: 'judgeCoorCorr',
			value: function judgeCoorCorr(coor) {
				var realCoor = _Utils.utils.chRealCoor(coor);
				var fakeCoor = _Utils.utils.chFakeCoor(coor);
				var key = 'coor_' + fakeCoor.x + '_' + fakeCoor.y;

				if (!this.data.coors[key]) {
					return;
				}
				this.data.coors[key].isTrue = true;
				var coorType = this.data.numPairs[key] && this.data.numPairs[key].type;
				this.data.numPairs[key] && !this.data.numPairs[key].type && this.setCoorMark(coor, this.data.numPairs[key].mark, true);
				if (coorType === 'img') {
					/*写书对模式才要改变图片*/
					if (!this.defaultData.clickToJudge) {
						// this._setCoorImgSrc(coor, true);
					}
				} else {
					this.setCoorColor(coor, _style.standardStyle.green);
				}
			}
		}, {
			key: 'judgeCoorErr',
			value: function judgeCoorErr(coor) {
				var realCoor = _Utils.utils.chRealCoor(coor);
				var fakeCoor = _Utils.utils.chFakeCoor(coor);
				var key = 'coor_' + fakeCoor.x + '_' + fakeCoor.y;

				if (!this.data.coors[key]) {
					return;
				}
				this.data.coors[key].isTrue = false;
				var coorType = this.data.numPairs[key] && this.data.numPairs[key].type;
				this.data.numPairs[key] && !this.data.numPairs[key].type && this.setCoorMark(coor, this.data.numPairs[key].mark, false);
				if (coorType === 'img') {
					/*写书对模式才要改变图片*/
					if (!this.defaultData.clickToJudge) {
						// this._setCoorImgSrc(coor, false);
					}
				} else {
					this.setCoorColor(coor, _style.standardStyle.red);
				}
			}
			/*画点前判断*/

		}, {
			key: 'beforeDraw',
			value: function beforeDraw(coor, drawType, mark) {
				var drawGroup = this.group.querySelector('.drawGroup');
				if (!drawGroup) {
					drawGroup = _Utils.utils.createSvgObj(this.group, 'g', { 'class': 'drawGroup' }, 'prepend');
				}
				this.drawGroup = drawGroup;
				var pathEle = void 0,
				    pathEle2 = void 0;
				var anotherDrawType = void 0;
				if (drawType === 'X') {
					pathEle = drawGroup.querySelector('.pathX');
					pathEle2 = drawGroup.querySelector('.pathY');
					anotherDrawType = 'Y';
				} else {
					pathEle = drawGroup.querySelector('.pathY');
					pathEle2 = drawGroup.querySelector('.pathX');
					anotherDrawType = 'X';
				}
				if (!pathEle) {
					var pathAttrs = {
						'class': 'path' + drawType
					};
					_Utils.utils.assign(pathAttrs, _style.gridEleStyle.drawLine);
					pathEle = _Utils.utils.createSvgObj(drawGroup, 'path', pathAttrs, 'prepend');
				}

				var fakeCoor = _Utils.utils.chFakeCoor(coor);
				var key = 'coor_' + fakeCoor.x + '_' + fakeCoor.y;
				/*数对不完整情况下用mark区分*/
				var curNumpair = this.data.numPairs[key];
				if (!curNumpair && mark) {
					curNumpair = this.data.numPairs[mark];
				}
				if (!curNumpair['line' + anotherDrawType]) {
					pathEle2 && (pathEle2.style.display = "none");
				} else {
					pathEle2 && (pathEle2.style.display = 'block');
				}
				pathEle.style.display = 'block';

				/*修改数据*/
				this.setCoorLineXY(coor, drawType, mark);
				this.setCoorIsvisibleXY(coor, drawType, true);
				/*修改数据结束*/
				return pathEle;
			}
		}, {
			key: 'drawY',
			value: function drawY(coor, isAnimate) {
				var realCoor = _Utils.utils.chRealCoor(coor);
				var miny = this.defaultData.matrix.minY;
				/*统一加data-pair*/
				var d1 = realCoor.x + '_' + realCoor.y + '_' + realCoor.x + '_' + miny;
				var newAttr = {
					'd': 'M' + realCoor.x + ' ' + realCoor.y + 'L' + realCoor.x + ' ' + miny,
					'data-pair': d1
				};
				var pathEle = this.beforeDraw(coor, 'Y');
				if (!isAnimate) {
					_Utils.utils.setSvgObjAttrs(pathEle, newAttr);
				} else {
					// utils.drawLineAni(pathEle, coor, {x: realCoor.x, y: miny}, DOT_DRAW_CONFIG.shortDuring)

					if (!this.drawPromiseY) {
						var defer = $.Deferred();
						this.drawPromiseY = defer;
						defer.resolve();
					}
					this.drawPromiseY = this.drawPromiseY.then(function () {
						return _Utils.utils.drawLineAni(pathEle, coor, { x: realCoor.x, y: miny }, _style.DOT_DRAW_CONFIG.shortDuring);
					});
				}
				return this.drawPromiseY;
			}
		}, {
			key: 'drawX',
			value: function drawX(coor, isAnimate) {
				var realCoor = _Utils.utils.chRealCoor(coor);
				var minx = this.defaultData.matrix.minX;
				var d1 = realCoor.x + '_' + realCoor.y + '_' + minx + '_' + realCoor.y;
				var newAttr = {
					'd': 'M' + realCoor.x + ' ' + realCoor.y + 'L' + minx + ' ' + realCoor.y,
					'data-pair': d1
				};
				var pathEle = this.beforeDraw(coor, 'X');
				if (!isAnimate) {
					_Utils.utils.setSvgObjAttrs(pathEle, newAttr);
				} else {
					//utils.drawLineAni(pathEle, coor, {x: minx, y: realCoor.y}, DOT_DRAW_CONFIG.shortDuring);
					if (!this.drawPromiseX) {
						var defer = $.Deferred();
						this.drawPromiseX = defer;
						defer.resolve();
					}
					this.drawPromiseX = this.drawPromiseX.then(function () {
						return _Utils.utils.drawLineAni(pathEle, coor, { x: minx, y: realCoor.y }, _style.DOT_DRAW_CONFIG.shortDuring);
					});
				}
				return this.drawPromiseX;
			}
		}]);

		return STU_DotGrid;
	}(_STU_Grid2.STU_Grid);

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.STU_Grid = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _Utils = __webpack_require__(5);

	var _style = __webpack_require__(6);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var defaultData = {
	    /*最大坐标*/
	    'matrix': { 'maxX': 10, 'maxY': 10, 'minX': 0, 'minY': 0 },
	    /*坐标类型*/
	    'type': 'dotGrid',
	    /*网格中默认画好的点*/
	    'coors': {
	        'coor_5_0': { 'x': 5, 'y': 0 }
	    },
	    /*默认数对，用于展示*/
	    'numPairs': {
	        'coor_5_0': {
	            'x': 5,
	            'y': 0,
	            'type': 'img',
	            'imgSrc': '',
	            'isVisible': false,
	            'lineX': true,
	            'lineY': true,
	            'fill': 'yellow',
	            'mark': 'A'
	        }
	    },

	    /*是否需要连点成线*/
	    'dotConnect': false,
	    /*连线完是否需要显示最终图像*/
	    'showResImg': false,
	    /*点击表格是否需要更新数对内容*/
	    'updateNumPairs': true,
	    /*学生端点击坐标是否判断正误*/
	    "clickToJudge": false,
	    /*网格是否可点击加点*/
	    "updateCoors": true
	};

	var STU_Grid = exports.STU_Grid = function () {
	    function STU_Grid(svg, transGroup) {
	        var defaultData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultData;
	        var griddata = arguments[3];

	        _classCallCheck(this, STU_Grid);

	        this.svg = svg;
	        this.transGroup = transGroup;
	        this.defaultData = $.extend(true, {}, defaultData);
	        if (griddata) {
	            /*保存数据用*/
	            this.data = griddata;
	        } else {
	            this.data = {};
	            this.data.coors = $.extend(true, {}, defaultData.coors) || {};
	            this.data.numPairs = $.extend(true, {}, defaultData.numPairs) || {};
	        }
	        this.group = _Utils.utils.createSvgObj(this.transGroup, 'g');
	        /*学生端找位置最多点击次数*/
	        this.numberPairsCounts = 0;
	        for (var key in this.data.numPairs) {
	            this.numberPairsCounts++;
	        }
	        this.clientList = {};
	        /*draw横纵坐标promise对象。*/
	        this.drawPromiseX = null;
	        this.drawPromiseY = null;
	    }
	    /**
	     * [控制层级]
	     * @param {[type]} bgGroup    [背景]
	     * @param {[type]} coorGroup  [点]
	     * @param {[type]} markGroup  [标志]
	     * @param {[type]} drawGroup  [横纵坐标]
	     * @param {[type]} defCoorCon [连线]
	     * @param {[type]} resImg     [最终图片]
	     */


	    _createClass(STU_Grid, [{
	        key: '_addSomeGroup',
	        value: function _addSomeGroup() {
	            var bgGroup = void 0,
	                coorGroup = void 0,
	                markGroup = void 0,
	                drawGroup = void 0,
	                defCoorCon = void 0,
	                resImg = void 0;
	            bgGroup = this.group.querySelector('.bgGroup');
	            drawGroup = this.group.querySelector('.drawGroup');
	            coorGroup = this.group.querySelector('.coorGroup');
	            markGroup = this.group.querySelector('.markGroup');
	            defCoorCon = this.group.querySelector('.defCoorCon');
	            //resImg = this.group.querySelector('.resImg');
	            if (!bgGroup) {
	                bgGroup = _Utils.utils.createSvgObj(this.group, 'g', { 'class': 'bgGroup' });
	                this.bgGroup = bgGroup;
	            }
	            if (!defCoorCon) {
	                defCoorCon = _Utils.utils.createSvgObj(this.group, 'g', { 'class': 'defCoorCon' });
	                this.defCoorCon = defCoorCon;
	            }
	            if (!drawGroup) {
	                drawGroup = _Utils.utils.createSvgObj(this.group, 'g', { 'class': 'drawGroup' });
	                this.drawGroup = drawGroup;
	            }
	            if (!coorGroup) {
	                coorGroup = _Utils.utils.createSvgObj(this.group, 'g', { 'class': 'coorGroup' });
	                this.coorGroup = coorGroup;
	            }
	            if (!markGroup) {
	                markGroup = _Utils.utils.createSvgObj(this.group, 'g', { 'class': 'markGroup' });
	                this.markGroup = markGroup;
	            }
	        }
	    }, {
	        key: 'listen',
	        value: function listen(key, fn) {
	            if (!this.clientList[key]) {
	                this.clientList[key] = [];
	            }
	            this.clientList[key].push(fn);
	        }
	    }, {
	        key: 'trigger',
	        value: function trigger() {
	            var key = Array.prototype.shift.call(arguments);
	            var fns = this.clientList[key];
	            if (!fns || fns.length === 0) {
	                return false;
	            }
	            for (var i = 0, fn; fn = fns[i++];) {
	                fn.apply(this, arguments);
	            }
	        }
	    }, {
	        key: 'updateNumPairsFnOutSide',
	        value: function updateNumPairsFnOutSide(name, type, value) {
	            var numpairKey = Object.keys(this.data.numPairs);
	            var _iteratorNormalCompletion = true;
	            var _didIteratorError = false;
	            var _iteratorError = undefined;

	            try {
	                for (var _iterator = numpairKey[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                    var key = _step.value;

	                    if (name === this.data.numPairs[key].mark) {
	                        this.data.numPairs[key][type] = value;
	                        break;
	                    }
	                }
	            } catch (err) {
	                _didIteratorError = true;
	                _iteratorError = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion && _iterator.return) {
	                        _iterator.return();
	                    }
	                } finally {
	                    if (_didIteratorError) {
	                        throw _iteratorError;
	                    }
	                }
	            }
	        }

	        /*点击网格事件*/

	    }, {
	        key: 'girdClickHandle',
	        value: function girdClickHandle(event) {
	            var pageX = event.pageX;
	            var pageY = event.pageY;
	            var point = _Utils.utils.reportMouseCoordinates(this.svg, pageX, pageY, this.transGroup);

	            var coor = this.translateCoor(point);
	            /*具体业务*/
	            //if(this.defaultData.clickToJudge){
	            this.doDetail(coor);
	            //}
	        }

	        /*具体业务*/

	    }, {
	        key: 'doDetail',
	        value: function doDetail(coor, coorType, imgSrc) {
	            var fakeCoor = _Utils.utils.chFakeCoor(coor);
	            var maxX = this.defaultData.matrix.maxX,
	                minX = this.defaultData.matrix.minX,
	                maxY = this.defaultData.matrix.maxY,
	                minY = this.defaultData.matrix.minY;
	            if (fakeCoor.x > maxX - minX || fakeCoor.x < minX || fakeCoor.y > maxY - minY || fakeCoor.y < minY) {
	                return;
	            }
	            // if(this.defaultData.clickToJudge){
	            // 	this.updateCoorsFn(coor, coorType, imgSrc);
	            // }
	            /*创建点*/
	            this.updateCoorsFn(coor);
	            this.judgeAnswer(coor);
	            /*是否连点成线*/
	            if (this.defaultData.dotConnect) {
	                this._drawDefCoorCon(true, coor);
	            }
	        }

	        /*判断正误*/

	    }, {
	        key: 'judgeAnswer',
	        value: function judgeAnswer(coor) {
	            var fakeCoor = _Utils.utils.chFakeCoor(coor);
	            var key = 'coor_' + fakeCoor.x + '_' + fakeCoor.y;
	            if (!this.data.coors[key] || this.data.coors[key].isLFAnimal) {
	                return;
	            }
	            /*改颜色*/
	            if (this.data.numPairs[key]) {
	                this.judgeCoorCorr(coor);
	            } else {
	                this.judgeCoorErr(coor);
	            }
	        }
	    }, {
	        key: 'judgeCoorCorr',
	        value: function judgeCoorCorr(coor) {}
	    }, {
	        key: 'judgeCoorErr',
	        value: function judgeCoorErr(coor) {}
	    }, {
	        key: 'updateCoorsFn',
	        value: function updateCoorsFn(coor) {
	            var fakeCoor = _Utils.utils.chFakeCoor(coor);
	            var key = 'coor_' + fakeCoor.x + '_' + fakeCoor.y;
	            var coorsCounts = 0;
	            for (var _key in this.data.coors) {
	                coorsCounts++;
	            }
	            if (this.data.coors && !this.data.coors[key] && coorsCounts < this.numberPairsCounts) {
	                var newCoor = { 'x': fakeCoor.x, 'y': fakeCoor.y };
	                this.data.coors[key] = newCoor;
	                this.isClickCorrectGrid = true;
	                this.setCoor(newCoor);
	                this.trigger('updateCoor', newCoor);
	            }
	        }

	        /*设置标志*/

	    }, {
	        key: 'setCoorMark',
	        value: function setCoorMark(coor, mark, isTrue) {
	            var markGroup = this.group.querySelector('.markGroup');
	            var fontStyle = _style.gridEleStyle.fontNormal;
	            if (isTrue === true) {
	                fontStyle = _style.gridEleStyle.fontCorrect;
	            } else if (isTrue === false) {
	                fontStyle = _style.gridEleStyle.fontError;
	            }
	            if (!markGroup) {
	                markGroup = _Utils.utils.createSvgObj(this.group, 'g', { 'class': 'markGroup' });
	                this.markGroup = markGroup;
	            }
	            var matrix = this.defaultData.matrix;
	            var loc = _Utils.utils.setTextLoc(coor, matrix.minX, matrix.minY, matrix.maxX, matrix.maxY);
	            var realCoor = _Utils.utils.chRealCoor(coor);
	            var textAttrs = {
	                'x': loc.x,
	                'y': loc.y,
	                'class': _style.standardStyle.fontClass
	            };
	            _Utils.utils.assign(textAttrs, fontStyle);
	            var textEle = _Utils.utils.createSvgObj(markGroup, 'text', textAttrs);
	            textEle.innerHTML = mark;
	            if (this.defaultData.showResMark) {
	                this._showResMarkFn(false);
	            }
	        }

	        /*取相应点坐标，如3.5则取4等*/

	    }, {
	        key: 'translateCoor',
	        value: function translateCoor(point) {}

	        /*设置坐标点*/

	    }, {
	        key: 'setCoor',
	        value: function setCoor(coor) {
	            var fakeCoor = _Utils.utils.chFakeCoor(coor);
	            var key = 'coor_' + fakeCoor.x + '_' + fakeCoor.y;
	            var realCoor = _Utils.utils.chRealCoor(coor);
	            if ((!this.data.numPairs[key] || !this.data.numPairs[key].type) && this.data.coors[key].type !== 'img') {
	                /*设置具体网格的点*/
	                this.setCoorGridType(realCoor);
	                /*设置标志*/
	                if (!this.defaultData.showResMark && this.data.numPairs[key] && this.data.numPairs[key].mark) {
	                    this.setCoorMark(coor, this.data.numPairs[key].mark, coor.isTrue);
	                }
	            } else if (this.data.coors[key].type === 'img' || this.data.numPairs[key].type === 'img') {
	                if (this.data.coors[key].type === 'img') {
	                    this.setCoorImg(realCoor, true);
	                } else {
	                    this.setCoorImg(realCoor);
	                }
	            }
	        }

	        /*子类中实现*/

	    }, {
	        key: 'setCoorGridType',
	        value: function setCoorGridType(coor) {}
	    }, {
	        key: 'setCoorImg',
	        value: function setCoorImg(coor) {}
	    }, {
	        key: 'setCoorLineXY',
	        value: function setCoorLineXY(coor, xyType, mark) {
	            var keyN = void 0;
	            if (typeof coor.x !== "undefined" && typeof coor.y !== "undefined") {
	                var fakeCoor = _Utils.utils.chFakeCoor(coor);
	                keyN = 'coor_' + fakeCoor.x + '_' + fakeCoor.y;
	            } else {
	                keyN = mark;
	            }

	            for (var key in this.data.numPairs) {
	                if (key === keyN) {
	                    this.data.numPairs[key]['line' + xyType] = true;
	                } else {
	                    this.data.numPairs[key]['line' + xyType] = false;
	                }
	                if (xyType == 'X') {
	                    if (key !== keyN) {
	                        this.data.numPairs[key]['lineY'] = false;
	                    }
	                } else if (xyType == 'Y') {
	                    if (key !== keyN) {
	                        this.data.numPairs[key]['lineX'] = false;
	                    }
	                }
	            }
	        }
	    }, {
	        key: 'setCoorIsvisibleXY',
	        value: function setCoorIsvisibleXY(coor, xyType, isVisible) {
	            var fakeCoor = _Utils.utils.chFakeCoor(coor);
	            var key = 'coor_' + fakeCoor.x + '_' + fakeCoor.y;
	            this.data.numPairs[key]['isVisible' + xyType] = isVisible;
	        }
	    }, {
	        key: 'setData',
	        value: function setData(data) {
	            if (!data) {
	                return;
	            }
	            this.group.innerHTML = '';
	            this._addSomeGroup();
	            if (this.defaultData.bgcoors) {
	                // this.bgGroup = utils.createSvgObj(this.group, 'g');
	                for (var key in this.defaultData.bgcoors) {
	                    this.setBgCoor(this.defaultData.bgcoors[key]);
	                }
	            }
	            this.data = $.extend(true, {}, data);
	            var conDefCoorStartCoor = void 0;
	            for (var _key2 in data.coors) {
	                this.setCoor(data.coors[_key2]);
	                this._studentLookForJudge && this._studentLookForJudge(data.coors[_key2]);
	                if (data.numPairs[_key2]) {
	                    conDefCoorStartCoor = data.coors[_key2];
	                }
	            }
	            this.order = [];
	            for (var _key3 in data.numPairs) {
	                var coor = /_(.+)_(.+)/.exec(_key3);
	                var x = parseInt(coor[1]);
	                var y = parseInt(coor[2]);
	                this.setNumpair({
	                    x: x,
	                    y: y,
	                    lineX: data.numPairs[_key3].lineX,
	                    lineY: data.numPairs[_key3].lineY,
	                    mark: data.numPairs[_key3].mark
	                });
	                this.order.push(_key3);
	            }

	            this.cancelDrawCon = true;
	            if (this.defaultData.dotConnect) {
	                this._drawDefCoorCon();
	            }
	        }

	        /*设置数对*/

	    }, {
	        key: 'setNumpair',
	        value: function setNumpair(coor) {
	            if (coor.lineX) {
	                this.drawX(coor, false, coor.mark);
	            }
	            if (coor.lineY) {
	                this.drawY(coor, false, coor.mark);
	            }
	        }
	    }, {
	        key: 'getData',
	        value: function getData() {
	            var data = $.extend(true, {}, this.data);
	            //	console.log(data);
	            return data;
	        }
	    }, {
	        key: 'getDefaultData',
	        value: function getDefaultData() {
	            return this.defaultData;
	        }
	    }, {
	        key: 'setVisibility',
	        value: function setVisibility(isVisible) {
	            if (isVisible) {
	                this.group.style.display = '';
	            } else {
	                this.group.style.display = 'none';
	            }
	        }
	    }, {
	        key: '_showResMarkFn',
	        value: function _showResMarkFn(isVisible) {
	            var markGroup = this.group.querySelector('.markGroup');
	            if (!markGroup) {
	                return;
	            }
	            if (isVisible) {
	                markGroup.style.display = '';
	            } else {
	                markGroup.style.display = 'none';
	            }
	        }
	        /*新增连线*/

	    }, {
	        key: '_drawTwoCoorCon',
	        value: function _drawTwoCoorCon(coor1, coor2, isAnimate) {
	            if (!coor1 || !coor2 || this.cancelDrawCon) {
	                return false;
	            }

	            var realCoor1 = _Utils.utils.chRealCoor(coor1),
	                realCoor2 = _Utils.utils.chRealCoor(coor2);

	            var d1 = realCoor1.x + '_' + realCoor1.y + '_' + realCoor2.x + '_' + realCoor2.y,
	                d2 = realCoor2.x + '_' + realCoor2.y + '_' + realCoor1.x + '_' + realCoor1.y;
	            var allPath = this.conLineGroup.querySelectorAll('path');

	            for (var i = 0; i < allPath.length; i++) {
	                var pair = allPath[i].getAttribute('data-pair');
	                if (pair === d1 || pair === d2) {
	                    return false;
	                }
	            }
	            var pathAttrs = {
	                'd': 'M ' + realCoor1.x + ' ' + realCoor1.y + ' L ' + realCoor2.x + ' ' + realCoor2.y,
	                'data-pair': d1
	            };
	            _Utils.utils.assign(pathAttrs, _style.gridEleStyle.connectLine);
	            var pathEle = _Utils.utils.createSvgObj(this.conLineGroup, 'path');
	            if (!isAnimate) {
	                _Utils.utils.setSvgObjAttrs(pathEle, pathAttrs);
	                return true;
	            } else {
	                return _Utils.utils.drawLineAni(pathEle, coor1, coor2, _style.DOT_DRAW_CONFIG.shortDuring, _style.gridEleStyle.connectLine);
	            }
	        }
	    }, {
	        key: '_drawDefCoorCon',
	        value: function _drawDefCoorCon(isAnimate, startCoor) {
	            var _this = this;

	            this.conLineGroup = this.group.querySelector('.defCoorCon');
	            if (!this.conLineGroup) {
	                this.conLineGroup = _Utils.utils.createSvgObj(this.group, 'g', { 'class': 'defCoorCon' }, 'prepend');
	            }
	            if (this.conLineGroup.childNodes.length > 0) {
	                /*是否已经连线*/
	                return;
	            } else {
	                var hasAllCoor = true;
	                for (var key in this.defaultData.numPairs) {
	                    if (!this.data.coors.hasOwnProperty(key)) {
	                        hasAllCoor = false;
	                        break;
	                    }
	                }
	                if (hasAllCoor) {
	                    this.cancelDrawCon = false;
	                }
	                if (hasAllCoor && this.defaultData.showResMark) {
	                    this._showResMarkFn(true);
	                }
	                if (hasAllCoor && this.defaultData.connectSeq) {
	                    var drawNodeAni = function drawNodeAni(key, data) {
	                        var promises = [];
	                        if (!key) {
	                            return;
	                        }
	                        var children = data[key];

	                        var _loop = function _loop(i) {
	                            var key2 = children[i];
	                            var res = _this._drawTwoCoorCon(_this.data.coors[key], _this.data.coors[key2], isAnimate);
	                            if (!res) {
	                                return 'continue';
	                            } else {
	                                if (res && typeof res.then === 'function' && typeof res.done === 'function') {
	                                    promises.push(res.then(function () {
	                                        return drawNodeAni(key2, data);
	                                    }));
	                                } else {
	                                    drawNodeAni(key2, data);
	                                }
	                            }
	                        };

	                        for (var i = 0; i < children.length; i++) {
	                            var _ret = _loop(i);

	                            if (_ret === 'continue') continue;
	                        }
	                        return $.when.apply($, promises);
	                    };
	                    var firstKey = void 0;
	                    if (!startCoor) {
	                        for (var _key4 in this.defaultData.connectSeq) {
	                            firstKey = _key4;
	                        }
	                    } else {
	                        var fakeCoor = _Utils.utils.chFakeCoor(startCoor);
	                        firstKey = 'coor_' + fakeCoor.x + '_' + fakeCoor.y;
	                    }
	                    drawNodeAni(firstKey, this.defaultData.connectSeq).done(function () {
	                        //  this._showResImg();
	                        if (!_this.cancelDrawCon) {
	                            _this.trigger('lineFinish');
	                        }
	                    });
	                }
	            }
	        }
	        /*连点成线动画结束*/

	    }]);

	    return STU_Grid;
	}();

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.STU_BlockGrid = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _STU_Grid2 = __webpack_require__(13);

	var _Utils = __webpack_require__(5);

	var _style = __webpack_require__(6);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var STU_BlockGrid = exports.STU_BlockGrid = function (_STU_Grid) {
	    _inherits(STU_BlockGrid, _STU_Grid);

	    function STU_BlockGrid(svg, transGroup, defaultData, griddata) {
	        _classCallCheck(this, STU_BlockGrid);

	        var _this = _possibleConstructorReturn(this, (STU_BlockGrid.__proto__ || Object.getPrototypeOf(STU_BlockGrid)).call(this, svg, transGroup, defaultData, griddata));

	        _this.setData(_this.data);
	        return _this;
	    }

	    /*取相应点坐标，如3.5则取4等*/


	    _createClass(STU_BlockGrid, [{
	        key: 'translateCoor',
	        value: function translateCoor(point) {
	            var coor = {
	                x: Math.floor(point.x),
	                y: Math.ceil(point.y)
	            };
	            return coor;
	        }
	        /**
	         * 覆盖父类的_addSomeGroup
	         * [控制层级]
	         * @param {[type]} bgGroup    [背景]
	         * @param {[type]} coorGroup  [点]
	         * @param {[type]} markGroup  [标志]
	         * @param {[type]} drawGroup  [横纵坐标]
	         * @param {[type]} defCoorCon [连线]
	         * @param {[type]} resImg     [最终图片]
	         */

	    }, {
	        key: '_addSomeGroup',
	        value: function _addSomeGroup() {
	            var bgGroup = void 0,
	                coorGroup = void 0,
	                markGroup = void 0,
	                drawGroup = void 0,
	                defCoorCon = void 0,
	                resImg = void 0;
	            bgGroup = this.group.querySelector('.bgGroup');
	            drawGroup = this.group.querySelector('.drawGroup');
	            coorGroup = this.group.querySelector('.coorGroup');
	            // markGroup = this.group.querySelector('.markGroup');
	            // defCoorCon = this.group.querySelector('.defCoorCon');
	            //resImg = this.group.querySelector('.resImg');
	            if (!bgGroup) {
	                bgGroup = _Utils.utils.createSvgObj(this.group, 'g', { 'class': 'bgGroup' });
	                this.bgGroup = bgGroup;
	            }
	            // if (!defCoorCon) {
	            //     defCoorCon = utils.createSvgObj(this.group, 'g', {'class': 'defCoorCon'});
	            //     this.defCoorCon = defCoorCon;
	            // }

	            if (!coorGroup) {
	                coorGroup = _Utils.utils.createSvgObj(this.group, 'g', { 'class': 'coorGroup' });
	                this.coorGroup = coorGroup;
	            }
	            if (!drawGroup) {
	                drawGroup = _Utils.utils.createSvgObj(this.group, 'g', { 'class': 'drawGroup' });
	                this.drawGroup = drawGroup;
	            }
	            // if (!markGroup) {
	            //     markGroup = utils.createSvgObj(this.group, 'g', {'class': 'markGroup'});
	            //     this.markGroup = markGroup;
	            // }
	        }
	        /*子类中实现*/

	    }, {
	        key: 'setCoorGridType',
	        value: function setCoorGridType(coor) {
	            var coorGroup = this.group.querySelector('.coorGroup');
	            if (!coorGroup) {
	                coorGroup = _Utils.utils.createSvgObj(this.group, 'g', { 'class': 'coorGroup' });
	            }
	            var fakeCoor = _Utils.utils.chFakeCoor(coor);
	            var key = 'coor_' + fakeCoor.x + '_' + fakeCoor.y;
	            var attrs = {
	                'class': 'sceneRect', /*用于区分画横纵坐标线画出来的rect*/
	                'x': coor.x,
	                'y': coor.y - _style.standardStyle.height,
	                'fill': this.data.numPairs[key] && this.data.numPairs[key].fill || this.data.coors[key] && this.data.coors[key].fill || 'none'
	                //attrs.fill = $('#createData').find('option:selected').val();
	            };_Utils.utils.assign(attrs, _style.gridEleStyle.rectNormal);
	            _Utils.utils.createSvgObj(coorGroup, 'rect', attrs, 'prepend');
	        }

	        // setCoorImg(coor){
	        // 	let fakeCoor = utils.chFakeCoor(coor);
	        // 	let key = 'coor_'+fakeCoor.x+'_'+fakeCoor.y;
	        // 	if(this.data.numPairs[key] && this.data.numPairs[key].imgSrc){
	        // 		let attrs = {
	        // 			'x': coor.x - standardStyle.imgWidth/2,
	        // 			'y': coor.y - standardStyle.imgHeight/2
	        // 		};

	        // 		utils.assign(attrs, gridEleStyle.imgNormal);
	        // 		let imgEle = utils.createSvgObj(this.group, 'image', attrs);
	        // 		utils.setSvgObjAttrsNS(imgEle, this.data.numPairs[key].imgSrc);
	        // 	}
	        // }

	    }, {
	        key: 'setBgCoor',
	        value: function setBgCoor(coor) {
	            var realCoor = _Utils.utils.chRealCoor(coor);
	            var attrs = {
	                'class': 'sceneRect', /*用于区分画横纵坐标线画出来的rect*/
	                'x': realCoor.x,
	                'y': realCoor.y - _style.standardStyle.height,
	                'fill': realCoor.fill || 'none'
	            };
	            //attrs.fill = $('#createData').find('option:selected').val();
	            _Utils.utils.assign(attrs, _style.gridEleStyle.rectNormal);
	            _Utils.utils.createSvgObj(this.bgGroup, 'rect', attrs);
	        }
	    }, {
	        key: 'judgeCoorCorr',
	        value: function judgeCoorCorr(coor) {
	            // let coorGroup = this.group.querySelector('.coorGroup');
	            // let realCoor = utils.chRealCoor(coor);
	            // let fakeCoor = utils.chFakeCoor(coor);
	            // let key = 'coor_'+fakeCoor.x+'_'+fakeCoor.y;
	            // let coorObjArr;
	            // if(!this.data.coors[key]){
	            // 	return;
	            // }
	            // let coorType = this.data.numPairs[key] && this.data.numPairs[key].type;

	            // coorObjArr = coorGroup.querySelectorAll('rect');
	            // for(let i=0; i<coorObjArr.length; i++){
	            // 	if(parseInt(coorObjArr[i].getAttribute('x')) === realCoor.x && parseInt(coorObjArr[i].getAttribute('y')) === realCoor.y){
	            // 		utils.setSvgObjAttrs(coorObjArr[i], {'fill': standardStyle.green});
	            // 		this.data.numPairs[key] && (this.data.numPairs[key].fill = standardStyle.green);
	            // 		break;
	            // 	}
	            // }
	        }
	    }, {
	        key: 'judgeCoorErr',
	        value: function judgeCoorErr(coor) {
	            var coorGroup = this.group.querySelector('.coorGroup');
	            var realCoor = _Utils.utils.chRealCoor(coor);
	            var fakeCoor = _Utils.utils.chFakeCoor(coor);
	            var key = 'coor_' + fakeCoor.x + '_' + fakeCoor.y;
	            var coorObjArr = void 0;
	            if (!this.data.coors[key]) {
	                return;
	            }
	            var coorType = this.data.numPairs[key] && this.data.numPairs[key].type;

	            coorObjArr = coorGroup.querySelectorAll('rect');
	            for (var i = 0; i < coorObjArr.length; i++) {
	                if (parseInt(coorObjArr[i].getAttribute('x')) === realCoor.x && parseInt(coorObjArr[i].getAttribute('y')) + 1 === realCoor.y) {
	                    _Utils.utils.setSvgObjAttrs(coorObjArr[i], { 'fill': _style.standardStyle.red });
	                    this.data.coors[key] && (this.data.coors[key].fill = _style.standardStyle.red);
	                    break;
	                }
	            }
	        }
	    }, {
	        key: 'beforeDraw',
	        value: function beforeDraw(coor, drawType, mark) {
	            var drawGroup = this.group.querySelector('.drawGroup');
	            if (!drawGroup) {
	                drawGroup = _Utils.utils.createSvgObj(this.group, 'g', { 'class': 'drawGroup' });
	            }
	            this.drawGroup = drawGroup;
	            var that = this;
	            //    if(that['reqAniFra'+drawType]){
	            //  cancelAnimationFrame(that['reqAniFra'+drawType]);
	            // }
	            var pathEle = void 0,
	                pathEle2 = void 0;
	            var anotherDrawType = void 0;
	            if (drawType === 'X') {
	                pathEle = drawGroup.querySelector('.pathX');
	                pathEle2 = drawGroup.querySelector('.pathY');
	                anotherDrawType = 'Y';
	            } else {
	                pathEle = drawGroup.querySelector('.pathY');
	                pathEle2 = drawGroup.querySelector('.pathX');
	                anotherDrawType = 'X';
	            }
	            if (!pathEle) {
	                var pathAttrs = {
	                    'class': 'path' + drawType
	                };
	                pathEle = _Utils.utils.createSvgObj(drawGroup, 'g', pathAttrs);
	            }

	            var childs = pathEle.childNodes;
	            /*先删除全部子节点后加入新的子节点。之后看看能不能优化*/
	            for (var i = childs.length - 1; i >= 0; i--) {
	                // alert(childs[i].nodeName); 
	                pathEle.removeChild(childs[i]);
	            }

	            /*修改数据*/
	            var fakeCoor = _Utils.utils.chFakeCoor(coor);
	            var key = 'coor_' + fakeCoor.x + '_' + fakeCoor.y;
	            /*数对不完整情况下用mark区分*/
	            var curNumpair = this.data.numPairs[key];
	            if (!curNumpair && mark) {
	                curNumpair = this.data.numPairs[mark];
	            }
	            if (!curNumpair['line' + anotherDrawType]) {
	                pathEle2 && (pathEle2.style.display = "none");
	            } else {
	                pathEle2 && (pathEle2.style.display = 'block');
	            }
	            this.setCoorLineXY(coor, drawType);
	            this.setCoorIsvisibleXY(coor, drawType, true);
	            pathEle.style.display = 'block';
	            /*修改数据结束*/
	            return pathEle;
	        }
	    }, {
	        key: 'drawY',
	        value: function drawY(coor, isAnimate) {
	            var realCoor = _Utils.utils.chRealCoor(coor);
	            var that = this;
	            var miny = -Math.abs(that.defaultData.matrix.minY);

	            var rectAttrs = {
	                'x': realCoor.x,
	                'y': realCoor.y - _style.standardStyle.height
	            };
	            _Utils.utils.assign(rectAttrs, _style.gridEleStyle.rectRed);
	            var pathEle = this.beforeDraw(coor, 'Y');
	            if (!isAnimate) {
	                for (var i = realCoor.y; i < miny; i++) {
	                    rectAttrs.y = i;
	                    _Utils.utils.createSvgObj(pathEle, 'rect', rectAttrs);
	                }
	            } else {
	                //utils.drawRectAni(pathEle, coor, {x: coor.x, y: miny}, BLOCK_DRAW_CONFIG.during, gridEleStyle.rectRed);
	                if (!this.drawPromiseY) {
	                    var defer = $.Deferred();
	                    this.drawPromiseY = defer;
	                    defer.resolve();
	                }
	                this.drawPromiseY = this.drawPromiseY.then(function () {
	                    return _Utils.utils.drawRectAni(pathEle, coor, { x: coor.x, y: miny }, _style.BLOCK_DRAW_CONFIG.during, _style.gridEleStyle.rectRed);
	                });
	            }
	            return this.drawPromiseY;
	        }
	    }, {
	        key: 'drawX',
	        value: function drawX(coor, isAnimate) {
	            var realCoor = _Utils.utils.chRealCoor(coor);
	            var that = this;
	            var minx = that.defaultData.matrix.minX;
	            var rectAttrs = {
	                'x': realCoor.x,
	                'y': realCoor.y - _style.standardStyle.height
	            };
	            _Utils.utils.assign(rectAttrs, _style.gridEleStyle.rectRed);
	            var pathEle = this.beforeDraw(coor, 'X');

	            if (!isAnimate) {
	                for (var i = realCoor.x - 1; i >= minx; i--) {
	                    rectAttrs.x = i;
	                    _Utils.utils.createSvgObj(pathEle, 'rect', rectAttrs);
	                }
	            } else {
	                //utils.drawRectAni(pathEle, coor, {x: minx, y: coor.y}, BLOCK_DRAW_CONFIG.during, gridEleStyle.rectRed);
	                if (!this.drawPromiseX) {
	                    var defer = $.Deferred();
	                    this.drawPromiseX = defer;
	                    defer.resolve();
	                }
	                this.drawPromiseX = this.drawPromiseX.then(function () {
	                    return _Utils.utils.drawRectAni(pathEle, coor, { x: minx, y: coor.y }, _style.BLOCK_DRAW_CONFIG.during, _style.gridEleStyle.rectRed);
	                });
	            }
	            return this.drawPromiseX;
	        }
	    }]);

	    return STU_BlockGrid;
	}(_STU_Grid2.STU_Grid);

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.STU_CleBlockGrid = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _STU_Grid2 = __webpack_require__(13);

	var _Utils = __webpack_require__(5);

	var _style = __webpack_require__(6);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var STU_CleBlockGrid = exports.STU_CleBlockGrid = function (_STU_Grid) {
		_inherits(STU_CleBlockGrid, _STU_Grid);

		function STU_CleBlockGrid(svg, transGroup, defaultData, griddata) {
			_classCallCheck(this, STU_CleBlockGrid);

			var _this = _possibleConstructorReturn(this, (STU_CleBlockGrid.__proto__ || Object.getPrototypeOf(STU_CleBlockGrid)).call(this, svg, transGroup, defaultData, griddata));

			_this.rectObj = {};
			_this.createbgImg();
			_this.createRects();
			_this.setData(_this.data);
			_this.isClickCorrectGrid = true;
			return _this;
		}
		/*取相应点坐标，如3.5则取4等*/


		_createClass(STU_CleBlockGrid, [{
			key: 'translateCoor',
			value: function translateCoor(point) {
				var coor = {
					x: Math.floor(point.x),
					y: Math.ceil(point.y)
				};
				return coor;
			}
			/**
	      * 覆盖父类的_addSomeGroup
	      * [控制层级]
	      * @param {[type]} bgGroup    [背景]
	      * @param {[type]} coorGroup  [点]
	      * @param {[type]} markGroup  [标志]
	      * @param {[type]} drawGroup  [横纵坐标]
	      * @param {[type]} defCoorCon [连线]
	      * @param {[type]} resImg     [最终图片]
	      */

		}, {
			key: '_addSomeGroup',
			value: function _addSomeGroup() {
				var bgGroup = void 0,
				    coorGroup = void 0,
				    markGroup = void 0,
				    drawGroup = void 0,
				    defCoorCon = void 0,
				    resImg = void 0;
				bgGroup = this.group.querySelector('.bgGroup');
				drawGroup = this.group.querySelector('.drawGroup');
				coorGroup = this.group.querySelector('.coorGroup');
				// markGroup = this.group.querySelector('.markGroup');
				// defCoorCon = this.group.querySelector('.defCoorCon');
				//resImg = this.group.querySelector('.resImg');
				if (!bgGroup) {
					bgGroup = _Utils.utils.createSvgObj(this.group, 'g', { 'class': 'bgGroup' });
					this.bgGroup = bgGroup;
				}
				// if (!defCoorCon) {
				//     defCoorCon = utils.createSvgObj(this.group, 'g', {'class': 'defCoorCon'});
				//     this.defCoorCon = defCoorCon;
				// }

				if (!coorGroup) {
					coorGroup = _Utils.utils.createSvgObj(this.group, 'g', { 'class': 'coorGroup' });
					this.coorGroup = coorGroup;
				}
				if (!drawGroup) {
					drawGroup = _Utils.utils.createSvgObj(this.group, 'g', { 'class': 'drawGroup' });
					this.drawGroup = drawGroup;
				}
				// if (!markGroup) {
				//     markGroup = utils.createSvgObj(this.group, 'g', {'class': 'markGroup'});
				//     this.markGroup = markGroup;
				// }
			}

			/*子类中实现*/

		}, {
			key: 'setCoorGridType',
			value: function setCoorGridType(coor) {
				var fakeCoor = _Utils.utils.chFakeCoor(coor);
				var isEnd = true;
				var numPairKeys = Object.keys(this.data.numPairs);
				var coorsKeys = Object.keys(this.data.coors);
				if (numPairKeys.length !== coorsKeys.length) {
					isEnd = false;
				} else {
					var _iteratorNormalCompletion = true;
					var _didIteratorError = false;
					var _iteratorError = undefined;

					try {
						for (var _iterator = coorsKeys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
							var key = _step.value;

							if (numPairKeys.indexOf(key) === -1) {
								isEnd = false;
								break;
							}
						}
					} catch (err) {
						_didIteratorError = true;
						_iteratorError = err;
					} finally {
						try {
							if (!_iteratorNormalCompletion && _iterator.return) {
								_iterator.return();
							}
						} finally {
							if (_didIteratorError) {
								throw _iteratorError;
							}
						}
					}
				}
				this.setAdjoinRectAttrs(fakeCoor, { 'fill-opacity': 0 }, this.isClickCorrectGrid, isEnd);
				this.isClickCorrectGrid = false;
			}
			// setCoorImg(coor){
			// 	let fakeCoor = utils.chFakeCoor(coor);
			// 	let key = 'coor_'+fakeCoor.x+'_'+fakeCoor.y;
			// 	if(this.data.numPairs[key] && this.data.numPairs[key].imgSrc){
			// 		let attrs = {
			// 			'x': coor.x - standardStyle.imgWidth/2,
			// 			'y': coor.y - standardStyle.imgHeight/2
			// 		};

			// 		utils.assign(attrs, gridEleStyle.imgNormal);
			// 		let imgEle = utils.createSvgObj(this.group, 'image', attrs);
			// 		utils.setSvgObjAttrsNS(imgEle, this.data.numPairs[key].imgSrc);
			// 	}
			// }

		}, {
			key: 'judgeCoorCorr',
			value: function judgeCoorCorr(coor) {}
		}, {
			key: 'judgeCoorErr',
			value: function judgeCoorErr(coor) {
				var fakeCoor = _Utils.utils.chFakeCoor(coor);
				var key = 'coor_' + fakeCoor.x + '_' + fakeCoor.y;
				if ($(this.rectObj[key]).is(":animated")) {
					$(this.rectObj[key]).stop();
				}
				this.rectObj[key].style['fill-opacity'] = 1;
				_Utils.utils.setSvgObjAttrs(this.rectObj[key], { 'fill-opacity': 1, 'fill': _style.standardStyle.red });
			}
		}, {
			key: 'setData',
			value: function setData(data) {
				if (!data) {
					return;
				}
				this.animation && this.animation.stop();
				this.resetAllRect();
				this.data = $.extend(true, {}, data);
				this.group.innerHTML = '';
				this.createbgImg();
				this.createRects();
				this._addSomeGroup();
				for (var key in data.coors) {
					this.setCoor(data.coors[key]);
					this.judgeAnswer(data.coors[key]);
				}
				this.order = [];
				for (var _key in data.numPairs) {
					this.setNumpair(data.numPairs[_key]);
					this.order.push(_key);
				}
			}
		}, {
			key: 'createbgImg',
			value: function createbgImg() {
				this.resImgObj = this.group.querySelector('.resImg');
				if (!this.resImgObj) {
					var imgAttrs = {
						'class': 'resImg',
						'width': this.defaultData.matrix.maxX - this.defaultData.matrix.minX,
						'height': this.defaultData.matrix.maxY - this.defaultData.matrix.minY,
						'x': this.defaultData.matrix.minX,
						'y': -this.defaultData.matrix.maxY
					};
					this.resImgObj = _Utils.utils.createSvgObj(this.group, 'image', imgAttrs, 'prepend');
					_Utils.utils.setSvgObjAttrsNS(this.resImgObj, this.defaultData.resImgSrc);
				}
			}
		}, {
			key: 'createRects',
			value: function createRects() {
				var coorGroup = this.group.querySelector('.coorGroup');
				if (!coorGroup) {
					coorGroup = _Utils.utils.createSvgObj(this.group, 'g', { 'class': 'coorGroup' });
				}
				var minx = this.defaultData.matrix.minX;
				var miny = this.defaultData.matrix.minY;
				var rectAttrs = _Utils.utils.assign({}, _style.gridEleStyle.rectWhite);
				var rectEle = null;
				// for(let i=minx; i<this.defaultData.matrix.maxX; i++){
				// 	for(let j= -this.defaultData.matrix.maxY-1; j<-miny; j++){
				// 		rectAttrs.x = i;
				// 		rectAttrs.y = j;
				// 		rectEle = utils.createSvgObj(this.group, 'rect', rectAttrs);
				// 		this.rectObj['coor_'+i+'_'+(-j)] = rectEle;
				// 	}
				// }
				//console.log(this.rectObj)
				for (var i = minx; i < this.defaultData.matrix.maxX; i++) {
					for (var j = -miny; j > -this.defaultData.matrix.maxY; j--) {
						rectAttrs.x = i;
						rectAttrs.y = j - _style.standardStyle.height;
						rectEle = _Utils.utils.createSvgObj(coorGroup, 'rect', rectAttrs);
						this.rectObj['coor_' + i + '_' + -j] = rectEle;
					}
				}
			}
			/*设置旁边rect的fill*/

		}, {
			key: 'setAdjoinRectAttrs',
			value: function setAdjoinRectAttrs(coor) {
				var attrs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
				var isAnimate = arguments[2];
				var isAccomplish = arguments[3];

				// let realCoor = utils.chRealCoor(coor);

				// for(let i=realCoor.x-5; i<=realCoor.x+2; i++){
				// 	for(let j=realCoor.y-2; j<realCoor.y+1; j++){
				// 	//	if(i>=0 && j<=0){
				// 			this.rectObj['coor_'+i+'_'+(-j)] && utils.setSvgObjAttrs(this.rectObj['coor_'+i+'_'+(-j)], attrs);
				// 	//	}
				// 	}
				// }
				var that = this;
				var fakeCoor = _Utils.utils.chFakeCoor(coor);
				var key = 'coor_' + fakeCoor.x + '_' + fakeCoor.y;
				var regExp = new RegExp("_(.+)_(.+)");
				var endCallBack = isAccomplish ? that.hideAllRect : null;
				if (!this.defaultData.cleSeq[key]) return;
				var cleSeqCoor = this.defaultData.cleSeq[key].map(function (value) {
					var result = regExp.exec(value);
					return {
						x: parseInt(result[1]),
						y: parseInt(result[2])
					};
				});
				this.spreadAnimtion = _Utils.utils.spreadAnimation({ x: fakeCoor.x, y: fakeCoor.y }, cleSeqCoor, function (cloestCoor) {
					for (var i = 0; i < cloestCoor.length; i++) {
						var objKey = 'coor_' + cloestCoor[i].x + '_' + cloestCoor[i].y;
						if (isAnimate) {
							that.rectObj[objKey] && that.rectObj[objKey].getAttribute('fill') == '#ffffff' && $(that.rectObj[objKey]).animate({ 'fill-opacity': 0 });
						} else {
							that.rectObj[objKey] && that.rectObj[objKey].getAttribute('fill') == '#ffffff' && _Utils.utils.setSvgObjAttrs(that.rectObj[objKey], attrs);
						}
					}
				}, isAnimate, $.proxy(endCallBack, that));
			}
			/*全部设置为白色矩形*/

		}, {
			key: 'resetAllRect',
			value: function resetAllRect() {
				for (var key in this.rectObj) {
					_Utils.utils.setSvgObjAttrs(this.rectObj[key], { 'fill-opacity': 1 });
				}
			}
		}, {
			key: 'beforeDraw',
			value: function beforeDraw(coor, drawType, mark) {
				var drawGroup = this.group.querySelector('.drawGroup');
				if (!drawGroup) {
					drawGroup = _Utils.utils.createSvgObj(this.group, 'g', { 'class': 'drawGroup' });
				}
				this.drawGroup = drawGroup;
				var that = this;
				//   	if(that['reqAniFra'+drawType]){
				// 	cancelAnimationFrame(that['reqAniFra'+drawType]);
				// }
				var pathEle = void 0,
				    pathEle2 = void 0;
				var anotherDrawType = void 0;
				if (drawType === 'X') {
					pathEle = drawGroup.querySelector('.pathX');
					pathEle2 = drawGroup.querySelector('.pathY');
					anotherDrawType = 'Y';
				} else {
					pathEle = drawGroup.querySelector('.pathY');
					pathEle2 = drawGroup.querySelector('.pathX');
					anotherDrawType = 'X';
				}
				if (!pathEle) {
					var pathAttrs = {
						'class': 'path' + drawType
					};
					pathEle = _Utils.utils.createSvgObj(drawGroup, 'g', pathAttrs);
				}

				var childs = pathEle.childNodes;
				/*先删除全部子节点后加入新的子节点。之后看看能不能优化*/
				for (var i = childs.length - 1; i >= 0; i--) {
					// alert(childs[i].nodeName); 
					pathEle.removeChild(childs[i]);
				}

				/*修改数据*/
				var fakeCoor = _Utils.utils.chFakeCoor(coor);
				var key = 'coor_' + fakeCoor.x + '_' + fakeCoor.y;
				/*数对不完整情况下用mark区分*/
				var curNumpair = this.data.numPairs[key];
				if (!curNumpair && mark) {
					curNumpair = this.data.numPairs[mark];
				}
				if (!curNumpair['line' + anotherDrawType]) {
					pathEle2 && (pathEle2.style.display = "none");
				} else {
					pathEle2 && (pathEle2.style.display = 'block');
				}
				this.setCoorLineXY(coor, drawType);
				this.setCoorIsvisibleXY(coor, drawType, true);
				pathEle.style.display = 'block';
				/*修改数据结束*/
				return pathEle;
			}
		}, {
			key: 'hideAllRect',
			value: function hideAllRect() {
				for (var key in this.rectObj) {
					_Utils.utils.setSvgObjAttrs(this.rectObj[key], { 'fill-opacity': 0, 'stroke-opacity': 0 });
				}
			}
		}, {
			key: 'drawY',
			value: function drawY(coor, isAnimate) {
				var realCoor = _Utils.utils.chRealCoor(coor);
				var that = this;
				var miny = -Math.abs(that.defaultData.matrix.minY);

				var rectAttrs = {
					'x': realCoor.x,
					'y': realCoor.y - _style.standardStyle.height
				};
				_Utils.utils.assign(rectAttrs, _style.gridEleStyle.rectRed);
				var pathEle = this.beforeDraw(coor, 'Y');
				if (!isAnimate) {
					for (var i = realCoor.y; i < miny; i++) {
						rectAttrs.y = i;
						_Utils.utils.createSvgObj(pathEle, 'rect', rectAttrs);
					}
				} else {
					//utils.drawRectAni(pathEle, coor, {x: coor.x, y: miny}, BLOCK_DRAW_CONFIG.during, gridEleStyle.rectRed);
					if (!this.drawPromiseY) {
						var defer = $.Deferred();
						this.drawPromiseY = defer;
						defer.resolve();
					}
					this.drawPromiseY = this.drawPromiseY.then(function () {
						return _Utils.utils.drawRectAni(pathEle, coor, { x: coor.x, y: miny }, _style.BLOCK_DRAW_CONFIG.during, _style.gridEleStyle.rectRed);
					});
				}
				return this.drawPromiseY;
			}
		}, {
			key: 'drawX',
			value: function drawX(coor, isAnimate) {
				var realCoor = _Utils.utils.chRealCoor(coor);
				var that = this;
				var minx = that.defaultData.matrix.minX;
				var rectAttrs = {
					'x': realCoor.x,
					'y': realCoor.y - _style.standardStyle.height
				};
				_Utils.utils.assign(rectAttrs, _style.gridEleStyle.rectRed);
				var pathEle = this.beforeDraw(coor, 'X');

				if (!isAnimate) {
					for (var i = realCoor.x - 1; i >= minx; i--) {
						rectAttrs.x = i;
						_Utils.utils.createSvgObj(pathEle, 'rect', rectAttrs);
					}
				} else {
					//utils.drawRectAni(pathEle, coor, {x: minx, y: coor.y}, BLOCK_DRAW_CONFIG.during, gridEleStyle.rectRed);
					if (!this.drawPromiseX) {
						var defer = $.Deferred();
						this.drawPromiseX = defer;
						defer.resolve();
					}
					this.drawPromiseX = this.drawPromiseX.then(function () {
						return _Utils.utils.drawRectAni(pathEle, coor, { x: minx, y: coor.y }, _style.BLOCK_DRAW_CONFIG.during, _style.gridEleStyle.rectRed);
					});
				}
				return this.drawPromiseX;
			}
		}]);

		return STU_CleBlockGrid;
	}(_STU_Grid2.STU_Grid);

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.STU_LF_DotGrid = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _STU_DotGrid2 = __webpack_require__(12);

	var _Utils = __webpack_require__(5);

	var _style = __webpack_require__(6);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var STU_LF_DotGrid = exports.STU_LF_DotGrid = function (_STU_DotGrid) {
		_inherits(STU_LF_DotGrid, _STU_DotGrid);

		function STU_LF_DotGrid(svg, transGroup, defaultData, griddata) {
			_classCallCheck(this, STU_LF_DotGrid);

			var _this = _possibleConstructorReturn(this, (STU_LF_DotGrid.__proto__ || Object.getPrototypeOf(STU_LF_DotGrid)).call(this, svg, transGroup, defaultData, griddata));

			_this.setData(_this.data);
			return _this;
		}

		_createClass(STU_LF_DotGrid, [{
			key: '_studentLookForJudge',
			value: function _studentLookForJudge(coor) {
				this.judgeAnswer && this.judgeAnswer(coor);
			}
		}, {
			key: '_setCoorAfterDrawXY',
			value: function _setCoorAfterDrawXY(coor) {
				var _this2 = this;

				var fakeCoor = _Utils.utils.chFakeCoor(coor);
				if (isNaN(parseInt(fakeCoor.x)) || isNaN(parseInt(fakeCoor.y))) return;
				var key = 'coor_' + fakeCoor.x + '_' + fakeCoor.y;
				//if(this.data.numPairs[key] && this.data.numPairs[key].lineX && this.data.numPairs[key].lineY){
				//	if(this.drawPromiseX && this.drawPromiseY){
				$.when.apply($, [this.drawPromiseX, this.drawPromiseY]).done(function () {
					if (_this2.data.numPairs[key].lineX && _this2.data.numPairs[key].lineY) {
						/*保存数据，设置点*/
						//this.doDetail(coor); 	
						/*改变点的颜色*/
						//this.setCoorColor(coor, standardStyle.green);
						var realCoor = _Utils.utils.chRealCoor(coor);

						var highLightObj = _this2.drawGroup.querySelector('.highLightObj');
						if (!highLightObj) {
							var attrs = {
								"class": "highLightObj",
								"fill": _style.standardStyle.green,
								"cx": realCoor.x,
								"cy": realCoor.y,
								"r": _style.standardStyle.r
							};
							highLightObj = _Utils.utils.createSvgObj(_this2.drawGroup, 'circle', attrs);
						} else {
							_Utils.utils.setSvgObjAttrs(highLightObj, { "cx": realCoor.x, "cy": realCoor.y });
						}
						highLightObj.style.display = 'block';
					}
				});
				//	}

				/*是否连点成线*/
				// if(this.defaultData.dotConnect){
				// 	this._drawDefCoorCon(true, coor);
				// }

				//	}
			}
		}, {
			key: 'afterDraw',
			value: function afterDraw(coor) {
				this._setCoorAfterDrawXY(coor);
				//this._showResImgFn(false);
			}
		}, {
			key: 'drawY',
			value: function drawY(coor, isAnimate, mark) {
				var that = this;
				var realCoor = _Utils.utils.chRealCoor(coor);
				var miny = this.defaultData.matrix.minY;
				var maxy = this.defaultData.matrix.maxY;
				var d1 = realCoor.x + '_' + -miny + '_' + realCoor.x + '_' + -maxy;
				var newAttr = {
					'd': 'M' + realCoor.x + ' ' + -miny + 'L' + realCoor.x + ' ' + -maxy,
					'data-pair': d1
				};
				var pathEle = this.beforeDraw(coor, 'Y', mark);
				if (!isAnimate) {
					var highLightObj = that.drawGroup.querySelector('.highLightObj');
					if (highLightObj) {
						highLightObj.style.display = 'none';
					}
					_Utils.utils.setSvgObjAttrs(pathEle, newAttr);
					//this._setCoorAfterDrawXY(coor);	
					//this.afterDraw(coor);
				} else {
					// let promise = utils.drawLineAni(pathEle, {x: coor.x, y: -miny}, {x: coor.x, y:-maxy}, DOT_DRAW_CONFIG.during);
					// promise.then(() => {
					// 	//this._setCoorAfterDrawXY(coor);	
					// 	this.afterDraw(coor);
					// });
					if (!this.drawPromiseY) {
						var defer = $.Deferred();
						this.drawPromiseY = defer;
						defer.resolve();
					}
					this.drawPromiseY = this.drawPromiseY.then(function () {
						var highLightObj = that.drawGroup.querySelector('.highLightObj');
						if (highLightObj) {
							highLightObj.style.display = 'none';
						}
						return _Utils.utils.drawLineAni(pathEle, { x: coor.x, y: -miny }, { x: coor.x, y: -maxy }, _style.DOT_DRAW_CONFIG.during);
					});
				}
				this.afterDraw(coor);
				return this.drawPromiseY;
			}
		}, {
			key: 'drawX',
			value: function drawX(coor, isAnimate, mark) {
				var that = this;
				var realCoor = _Utils.utils.chRealCoor(coor);
				var minx = this.defaultData.matrix.minX;
				var maxx = this.defaultData.matrix.maxX;
				var d1 = minx + '_' + realCoor.y + '_' + maxx + '_' + realCoor.y;
				var newAttr = {
					'd': 'M' + minx + ' ' + realCoor.y + 'L' + maxx + ' ' + realCoor.y,
					'data-pair': d1
				};
				var pathEle = this.beforeDraw(coor, 'X', mark);
				if (!isAnimate) {
					var highLightObj = that.drawGroup.querySelector('.highLightObj');
					if (highLightObj) {
						highLightObj.style.display = 'none';
					}
					_Utils.utils.setSvgObjAttrs(pathEle, newAttr);
					//this._setCoorAfterDrawXY(coor);	
					//this.afterDraw(coor);	  
				} else {
					// let promise = utils.drawLineAni(pathEle, {x: minx, y: realCoor.y}, {x: maxx, y:realCoor.y}, DOT_DRAW_CONFIG.during);
					// promise.then(() => {
					// 	//this._setCoorAfterDrawXY(coor);	
					// 	this.afterDraw(coor);
					// });
					if (!this.drawPromiseX) {
						var defer = $.Deferred();
						this.drawPromiseX = defer;
						defer.resolve();
					}
					this.drawPromiseX = this.drawPromiseX.then(function () {
						var highLightObj = that.drawGroup.querySelector('.highLightObj');
						if (highLightObj) {
							highLightObj.style.display = 'none';
						}
						return _Utils.utils.drawLineAni(pathEle, { x: minx, y: realCoor.y }, { x: maxx, y: realCoor.y }, _style.DOT_DRAW_CONFIG.during);
					});
				}
				this.afterDraw(coor);
				return this.drawPromiseX;
			}
		}]);

		return STU_LF_DotGrid;
	}(_STU_DotGrid2.STU_DotGrid);

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.STU_LF_BlockGrid = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _STU_BlockGrid2 = __webpack_require__(14);

	var _Utils = __webpack_require__(5);

	var _style = __webpack_require__(6);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var STU_LF_BlockGrid = exports.STU_LF_BlockGrid = function (_STU_BlockGrid) {
		_inherits(STU_LF_BlockGrid, _STU_BlockGrid);

		function STU_LF_BlockGrid(svg, transGroup, defaultData, griddata) {
			_classCallCheck(this, STU_LF_BlockGrid);

			var _this = _possibleConstructorReturn(this, (STU_LF_BlockGrid.__proto__ || Object.getPrototypeOf(STU_LF_BlockGrid)).call(this, svg, transGroup, defaultData, griddata));

			_this.setData(_this.data);
			return _this;
		}

		_createClass(STU_LF_BlockGrid, [{
			key: '_studentLookForJudge',
			value: function _studentLookForJudge(coor) {
				this.judgeAnswer && this.judgeAnswer(coor);
			}
		}, {
			key: 'drawY',
			value: function drawY(coor, isAnimate) {
				var _this2 = this;

				var realCoor = _Utils.utils.chRealCoor(coor);
				var that = this;
				var miny = that.defaultData.matrix.minY;
				var maxy = that.defaultData.matrix.maxY;
				var rectAttrs = {
					'x': realCoor.x,
					'y': realCoor.y - _style.standardStyle.height
				};
				_Utils.utils.assign(rectAttrs, _style.gridEleStyle.rectRed);
				if (!isAnimate) {
					var pathEle = this.beforeDraw(coor, 'Y');
					var highLightObj = that.drawGroup.querySelector('.highLightObj');
					if (highLightObj) {
						highLightObj.style.display = 'none';
					}
					for (var i = -miny; i > -maxy; i--) {
						rectAttrs.y = i - _style.standardStyle.height;
						_Utils.utils.createSvgObj(pathEle, 'rect', rectAttrs);
					}
					//this._setCoorAfterDrawXY(coor);
					//this.afterDraw(coor);
				} else {
					// let promise = utils.drawRectAni(pathEle, {x: coor.x, y: miny}, {x: coor.x, y: maxy}, BLOCK_DRAW_CONFIG.during, gridEleStyle.rectRed);
					// promise.then(() => {
					// 	//this._setCoorAfterDrawXY(coor);	
					// 	this.afterDraw(coor);
					// });

					if (!this.drawPromiseY) {
						var defer = $.Deferred();
						this.drawPromiseY = defer;
						defer.resolve();
					}
					this.drawPromiseY = this.drawPromiseY.then(function () {

						//console.log('then');
						var pathEle = _this2.beforeDraw(coor, 'Y');
						var highLightObj = that.drawGroup.querySelector('.highLightObj');
						if (highLightObj) {
							highLightObj.style.display = 'none';
						}

						return _Utils.utils.drawRectAni(pathEle, { x: coor.x, y: miny }, { x: coor.x, y: maxy }, _style.BLOCK_DRAW_CONFIG.during, _style.gridEleStyle.rectRed);
					});
				}
				// this.afterDraw(coor);
				return this.drawPromiseY;
			}
		}, {
			key: 'drawX',
			value: function drawX(coor, isAnimate) {
				var _this3 = this;

				var realCoor = _Utils.utils.chRealCoor(coor);
				var that = this;
				var minx = that.defaultData.matrix.minX;
				var maxx = that.defaultData.matrix.maxX;

				var rectAttrs = {
					'x': realCoor.x,
					'y': realCoor.y - _style.standardStyle.height
				};
				_Utils.utils.assign(rectAttrs, _style.gridEleStyle.rectRed);

				if (!isAnimate) {

					var pathEle = this.beforeDraw(coor, 'X');
					var highLightObj = that.drawGroup.querySelector('.highLightObj');
					if (highLightObj) {
						highLightObj.style.display = 'none';
					}

					for (var i = minx; i < maxx; i++) {
						rectAttrs.x = i;
						_Utils.utils.createSvgObj(pathEle, 'rect', rectAttrs);
					}
					// this._setCoorAfterDrawXY(coor);
					//this.afterDraw(coor);
				} else {
					// let promise = utils.drawRectAni(pathEle, {x: minx, y: coor.y}, {x: maxx, y: coor.y}, BLOCK_DRAW_CONFIG.during, gridEleStyle.rectRed);
					// promise.then(() => {
					// 	// this._setCoorAfterDrawXY(coor);	
					// 	this.afterDraw(coor);
					// });
					if (!this.drawPromiseX) {
						var defer = $.Deferred();
						this.drawPromiseX = defer;
						defer.resolve();
					}
					this.drawPromiseX = this.drawPromiseX.then(function () {

						// console.log('then')
						var pathEle = _this3.beforeDraw(coor, 'X');
						var highLightObj = that.drawGroup.querySelector('.highLightObj');
						if (highLightObj) {
							highLightObj.style.display = 'none';
						}
						return _Utils.utils.drawRectAni(pathEle, { x: minx, y: coor.y }, { x: maxx, y: coor.y }, _style.BLOCK_DRAW_CONFIG.during, _style.gridEleStyle.rectRed);
					});
				}
				// this.afterDraw(coor);
				return this.drawPromiseX;
			}
		}]);

		return STU_LF_BlockGrid;
	}(_STU_BlockGrid2.STU_BlockGrid);

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.STU_LF_CleBlockGrid = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _STU_CleBlockGrid2 = __webpack_require__(15);

	var _Utils = __webpack_require__(5);

	var _style = __webpack_require__(6);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var STU_LF_CleBlockGrid = exports.STU_LF_CleBlockGrid = function (_STU_CleBlockGrid) {
		_inherits(STU_LF_CleBlockGrid, _STU_CleBlockGrid);

		function STU_LF_CleBlockGrid(svg, transGroup, defaultData, griddata) {
			_classCallCheck(this, STU_LF_CleBlockGrid);

			return _possibleConstructorReturn(this, (STU_LF_CleBlockGrid.__proto__ || Object.getPrototypeOf(STU_LF_CleBlockGrid)).call(this, svg, transGroup, defaultData, griddata));
		}

		_createClass(STU_LF_CleBlockGrid, [{
			key: '_studentLookForJudge',
			value: function _studentLookForJudge(coor) {
				this.judgeAnswer && this.judgeAnswer(coor);
			}
		}, {
			key: 'drawY',
			value: function drawY(coor, isAnimate) {
				var _this2 = this;

				var realCoor = _Utils.utils.chRealCoor(coor);
				var that = this;
				var miny = that.defaultData.matrix.minY;
				var maxy = that.defaultData.matrix.maxY;
				var rectAttrs = {
					'x': realCoor.x,
					'y': realCoor.y - _style.standardStyle.height
				};
				_Utils.utils.assign(rectAttrs, _style.gridEleStyle.rectRed);
				if (!isAnimate) {
					var pathEle = this.beforeDraw(coor, 'Y');
					var highLightObj = that.drawGroup.querySelector('.highLightObj');
					if (highLightObj) {
						highLightObj.style.display = 'none';
					}
					for (var i = -miny; i > -maxy; i--) {
						rectAttrs.y = i - _style.standardStyle.height;
						_Utils.utils.createSvgObj(pathEle, 'rect', rectAttrs);
					}
					//this._setCoorAfterDrawXY(coor);
					//this.afterDraw(coor);
				} else {
					// let promise = utils.drawRectAni(pathEle, {x: coor.x, y: miny}, {x: coor.x, y: maxy}, BLOCK_DRAW_CONFIG.during, gridEleStyle.rectRed);
					// promise.then(() => {
					// 	//this._setCoorAfterDrawXY(coor);	
					// 	this.afterDraw(coor);
					// });

					if (!this.drawPromiseY) {
						var defer = $.Deferred();
						this.drawPromiseY = defer;
						defer.resolve();
					}
					this.drawPromiseY = this.drawPromiseY.then(function () {

						//console.log('then');
						var pathEle = _this2.beforeDraw(coor, 'Y');
						var highLightObj = that.drawGroup.querySelector('.highLightObj');
						if (highLightObj) {
							highLightObj.style.display = 'none';
						}

						return _Utils.utils.drawRectAni(pathEle, { x: coor.x, y: miny }, { x: coor.x, y: maxy }, _style.BLOCK_DRAW_CONFIG.during, _style.gridEleStyle.rectRed);
					});
				}
				// this.afterDraw(coor);
				return this.drawPromiseY;
			}
		}, {
			key: 'drawX',
			value: function drawX(coor, isAnimate) {
				var _this3 = this;

				var realCoor = _Utils.utils.chRealCoor(coor);
				var that = this;
				var minx = that.defaultData.matrix.minX;
				var maxx = that.defaultData.matrix.maxX;

				var rectAttrs = {
					'x': realCoor.x,
					'y': realCoor.y - _style.standardStyle.height
				};
				_Utils.utils.assign(rectAttrs, _style.gridEleStyle.rectRed);

				if (!isAnimate) {

					var pathEle = this.beforeDraw(coor, 'X');
					var highLightObj = that.drawGroup.querySelector('.highLightObj');
					if (highLightObj) {
						highLightObj.style.display = 'none';
					}

					for (var i = minx; i < maxx; i++) {
						rectAttrs.x = i;
						_Utils.utils.createSvgObj(pathEle, 'rect', rectAttrs);
					}
					// this._setCoorAfterDrawXY(coor);
					//this.afterDraw(coor);
				} else {
					// let promise = utils.drawRectAni(pathEle, {x: minx, y: coor.y}, {x: maxx, y: coor.y}, BLOCK_DRAW_CONFIG.during, gridEleStyle.rectRed);
					// promise.then(() => {
					// 	// this._setCoorAfterDrawXY(coor);	
					// 	this.afterDraw(coor);
					// });
					if (!this.drawPromiseX) {
						var defer = $.Deferred();
						this.drawPromiseX = defer;
						defer.resolve();
					}
					this.drawPromiseX = this.drawPromiseX.then(function () {

						// console.log('then')
						var pathEle = _this3.beforeDraw(coor, 'X');
						var highLightObj = that.drawGroup.querySelector('.highLightObj');
						if (highLightObj) {
							highLightObj.style.display = 'none';
						}
						return _Utils.utils.drawRectAni(pathEle, { x: minx, y: coor.y }, { x: maxx, y: coor.y }, _style.BLOCK_DRAW_CONFIG.during, _style.gridEleStyle.rectRed);
					});
				}
				// this.afterDraw(coor);
				return this.drawPromiseX;
			}
		}]);

		return STU_LF_CleBlockGrid;
	}(_STU_CleBlockGrid2.STU_CleBlockGrid);

/***/ }),
/* 19 */
/***/ (function(module, exports) {

	'use strict';

	(function () {
	    var lastTime = 0;
	    var vendors = ['webkit', 'moz'];
	    for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
	        window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];
	        window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] || // name has changed in Webkit
	        window[vendors[x] + 'CancelRequestAnimationFrame'];
	    }

	    if (!window.requestAnimationFrame) {
	        window.requestAnimationFrame = function (callback, element) {
	            var currTime = new Date().getTime();
	            var timeToCall = Math.max(0, 16.7 - (currTime - lastTime));
	            var id = window.setTimeout(function () {
	                callback(currTime + timeToCall);
	            }, timeToCall);
	            lastTime = currTime + timeToCall;
	            return id;
	        };
	    }
	    if (!window.cancelAnimationFrame) {
	        window.cancelAnimationFrame = function (id) {
	            clearTimeout(id);
	        };
	    }
	})();

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.TEventMain = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _Utils = __webpack_require__(5);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var TEventMain = exports.TEventMain = function () {
	  function TEventMain($view, gridMain, undoManager, basePath, i18nData) {
	    _classCallCheck(this, TEventMain);

	    this.$view = $view;
	    this.$teacherView = $view.find('.NubmerPair_wrapper_teacher');
	    this.gridMain = gridMain;
	    this.paper = this.gridMain.paper;
	    this.undoManager = undoManager;
	    this.basePath = basePath;
	    this.i18nData = i18nData;
	    this._init();
	  }

	  _createClass(TEventMain, [{
	    key: '_init',
	    value: function _init() {
	      var that = this;
	      /* 演示区*/
	      this.mainBox = this.$teacherView.find('.np_main_box_wrapper');
	      /* 数对显示区最外层*/
	      this.numpairWrapper = this.$teacherView.find('.np_numpair_box');
	      this.numpairWrapperH = this.numpairWrapper.height();
	      this.npScrollBox = this.$teacherView.find('.np_scroller_box');
	      /* 数对显示区*/
	      this.numpairBox = this.$teacherView.find('.js_numpairBox');
	      /* 是否为写数对模式*/
	      this.isWriteNP = true;
	      /* 写数对和找位置的菜单预设状态*/
	      this.writeNPStatus = {
	        'zoo': { 'subItemIndex': -1, isActive: true, animalStatus: [1, 1, 1, 1] },
	        'shape': { 'subItemIndex': 0, isActive: false },
	        'star': { 'subItemIndex': 0, 'subFirstShowIndex': 0, isActive: false }
	      };
	      this.findPosStatus = {
	        'zoo': { 'subItemIndex': -1, isActive: true, animalStatus: [1, 1, 1] },
	        'shape': { 'subItemIndex': 0, isActive: false },
	        'star': { 'subItemIndex': 0, 'subFirstShowIndex': 0, isActive: false },
	        'grid': { 'subItemIndex': 0, isActive: false }
	        /* 返回入口页按钮*/
	      };this.$backMain = this.$teacherView.find('.np_back_Main');
	      /* 入口页*/
	      this.$numberPairEntranceWrapper = this.$view.find('.NumberPairEntrance_wrapper');
	      /* 演示页*/
	      this.$nubmerPairWrapper = this.$view.find('.NubmerPair_wrapper');
	      /* 写数对页*/
	      this.$numberPairBtn = this.$view.find('.NumberPair_btn');
	      /* 找位置页*/
	      this.$findLocationBtn = this.$view.find('.FindLocation_btn');
	      /* 演示页操作区*/
	      this.$numberPairMain = this.$teacherView.find('.NumberPair_main');
	      /* 所有的预设按钮*/
	      this.$js_scene = this.$teacherView.find('.js_scene');
	      /* 一级菜单*/
	      this.$npMenuItem = this.$teacherView.find('.np_menu_item');
	      /* 动物园一级菜单*/
	      this.$zoomAnimal = this.$teacherView.find('.np_item1');
	      /* 几何图形一级菜单*/
	      this.$geometryMenu = this.$teacherView.find('.np_item2');
	      /* 十二星座一级菜单*/
	      this.$starMenu = this.$teacherView.find('.np_item3');
	      /* 网格涂色一级菜单*/
	      this.$gridColorMenu = this.$teacherView.find('.np_item4');
	      /* 二级菜单*/
	      this.$jsItemRelevant = this.$teacherView.find('.js_item_relevant');
	      /* 动物园选择栏*/
	      this.$zooAnimalList = this.$teacherView.find('.np_zoo_animals');
	      /* 动物园选择栏项*/
	      this.$zooAnimals = this.$teacherView.find('.js_zoo_animal');
	      this.$zooMoveAnimals = this.$zooAnimals.find('.icon');
	      this.$zooAnimal1 = this.$teacherView.find('.np_zoo_animal_1');
	      this.$zooAnimal2 = this.$teacherView.find('.np_zoo_animal_2');
	      this.$zooAnimal3 = this.$teacherView.find('.np_zoo_animal_3');
	      this.$zooAnimal4 = this.$teacherView.find('.np_zoo_animal_4');
	      /* 十二星座二级菜单*/
	      this.$twelveStars = this.$teacherView.find('.np_twelveStars');
	      /* 十二星座二级菜单项列表*/
	      this.$twelveStarList = this.$twelveStars.find('.np_twelveList');
	      /* 十二星座二级菜单项*/
	      this.$starItem = this.$twelveStars.find('.np_starItem');
	      /* 十二星座二级菜单向上按钮*/
	      this.$moveUp = this.$twelveStars.find('.np_up_box');
	      /* 十二星座二级菜单向下按钮*/
	      this.$moveDown = this.$twelveStars.find('.np_down_box');
	      /* 几何图形二级菜单*/
	      this.$geometry = this.$teacherView.find('.np_geometry');
	      /* 几何图形二级菜单项*/
	      this.$geometryItem = this.$teacherView.find('.np_geometryItem');
	      /* 网格涂色二级菜单*/
	      this.$gridColor = this.$teacherView.find('.np_gridColor');
	      /* 网格涂色二级菜单项*/
	      this.$gridColorItem = this.$teacherView.find('.np_gridColorItem');
	      /* svg显示区*/
	      this.$gridSvg = this.$teacherView.find('.np_axis_box_10_box');
	      /* svg显示区背景*/
	      this.$gridSvgBg = this.$gridSvg.find('.np_axis_box_10');
	      /* 垂直刻度*/
	      this.$gridAxisV = this.$gridSvg.find('.np_axis_ticks_v li');
	      /* 水平刻度*/
	      this.$gridAxisH = this.$gridSvg.find('.np_axis_ticks_h li');
	      /* 写数对动物园拖动动物标识*/
	      this.isAnimalDown = false;
	      /* 各预设一级和二级菜单*/
	      this.ItemObjs = {
	        'zoo': {
	          menuItem: this.$zoomAnimal,
	          subItem: null
	        },
	        'shape': {
	          menuItem: this.$geometryMenu,
	          subItem: this.$geometryItem
	        },
	        'star': {
	          menuItem: this.$starMenu,
	          subItem: this.$starItem
	        },
	        'grid': {
	          menuItem: this.$gridColorMenu,
	          subItem: this.$gridColorItem
	        }
	        /* 各个预设的二级菜单小三角*/
	      };this.$geometryTri = this.$geometry.find('.np_triangle');
	      this.$starTri = this.$twelveStars.find('.np_triangle');
	      this.$gridColorTri = this.$gridColor.find('.np_triangle');
	      /* 撤销*/
	      this.$js_undo = this.$teacherView.find('.js_undo');
	      /* 恢复*/
	      this.$js_redo = this.$teacherView.find('.js_redo');
	      /* 重置*/
	      this.$js_reset = this.$teacherView.find('.js_reset');
	      /* 添加删除数对操作区*/
	      this.$addSubCoordinate = this.$teacherView.find('.js_operate_area');
	      /* 添加数对按钮*/
	      this.addNumpairBtn = this.$teacherView.find('.coordinate_add');
	      /* 删除数对按钮*/
	      this.deleteNumpairBtn = this.$teacherView.find('.coordinate_sub');
	      /* 键盘*/
	      this.keyboard = this.$teacherView.find('.np_combtn_drop');
	      /* 键盘数字*/
	      this.keyboardNum = this.keyboard.find('.js_keyboard_num');
	      /* 是否处于数对编辑态*/
	      this.isEditing = false;
	      /* 添加的数对名称数组*/
	      this.newNPNames = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];
	      /* 新的数对数*/
	      this.newNPIndex = 0;
	      /* 默认数对数*/
	      this.defaultNPNum = 3;
	      /* 和小三角相关的预设是否被按下*/
	      this.isTriRelateDown = false;

	      /* 拖动的动物信息*/
	      this.animalInfos = [{
	        'isVisibleX': false,
	        'isVisibleY': false,
	        'lineX': false,
	        'lineY': false,
	        'mark': this.i18nData.numpair_elephantHall,
	        'type': 'img',
	        'imgSrc': this.basePath + 'resources/wood/images/icon_elephant.png'
	      }, {
	        'isVisibleX': false,
	        'isVisibleY': false,
	        'lineX': false,
	        'lineY': false,
	        'mark': this.i18nData.numpair_pandaHall,
	        'type': 'img',
	        'imgSrc': this.basePath + 'resources/wood/images/icon_panda.png'
	      }, {
	        'isVisibleX': false,
	        'isVisibleY': false,
	        'lineX': false,
	        'lineY': false,
	        'mark': this.i18nData.numpair_marineMuseum,
	        'type': 'img',
	        'imgSrc': this.basePath + 'resources/wood/images/icon_dolphin.png'
	      }, {
	        'isVisibleX': false,
	        'isVisibleY': false,
	        'lineX': false,
	        'lineY': false,
	        'mark': this.i18nData.numpair_monkeyMountain,
	        'type': 'img',
	        'imgSrc': this.basePath + 'resources/wood/images/icon_monkey.png'
	      }, {
	        'isVisibleX': false,
	        'isVisibleY': false,
	        'lineX': false,
	        'lineY': false,
	        'mark': this.i18nData.numpair_bridPark,
	        'type': 'img',
	        'imgSrc': this.basePath + 'resources/wood/images/icon_eagle.png'
	      }, {
	        'isVisibleX': false,
	        'isVisibleY': false,
	        'lineX': false,
	        'lineY': false,
	        'mark': this.i18nData.numpair_gorillaHall,
	        'type': 'img',
	        'imgSrc': this.basePath + 'resources/wood/images/icon_ape.png'
	      }, {
	        'isVisibleX': false,
	        'isVisibleY': false,
	        'lineX': false,
	        'lineY': false,
	        'mark': this.i18nData.numpair_LigerHill,
	        'type': 'img',
	        'imgSrc': this.basePath + 'resources/wood/images/icon_tiger.png'
	      }];

	      /* 切换场景的特殊处理策略*/
	      this.menuSpecialHandler = {
	        zoo: function zoo() {
	          that.$zoomAnimal.addClass('on');
	          that.$numberPairMain.removeClass('show_pre_2').addClass('show_pre_1');
	          if (!that.isWriteNP) {
	            that.$addSubCoordinate.removeClass('hide_dom');
	            that.numpairWrapper.removeClass('change_height_780').addClass('change_height_850');
	            that.npScrollBox.addClass('change_block_height');
	          } else {
	            that.numpairWrapper.addClass('change_min_width');
	          }
	        },
	        shape: function shape() {
	          that.$geometryMenu.addClass('on');
	        },
	        star: function star() {
	          that.$starMenu.addClass('on');
	        },
	        grid: function grid() {
	          that.$gridColorMenu.addClass('on');
	          that.$gridSvg.removeClass('change_axis_10').addClass('change_axis_17');
	          that.numpairWrapper.removeClass('change_height_780').addClass('change_height_850');
	        }

	        /* 二级菜单特殊处理*/
	      };this.itemSpecialHandler = {
	        zoo: function zoo() {},
	        shape: function shape(index) {
	          index == 0 ? that.$geometryTri.addClass('on') : that.$geometryTri.removeClass('on');
	        },
	        star: function star(index, elem) {
	          var $fourthStar = that.$starItem.not('.hide_dom').eq(3);
	          elem[0] == $fourthStar[0] ? that.$starTri.addClass('on') : that.$starTri.removeClass('on');
	        },
	        grid: function grid(index) {
	          index == 2 ? that.$gridColorTri.addClass('on') : that.$gridColorTri.removeClass('on');
	          index == 1 ? that.$gridSvgBg.css('background-color', '#d9e3ec') : that.$gridSvgBg.css('background-color', '#f3f3f3');
	        }

	        /* 二级菜单小三角处理策略*/
	      };this.menuTriHandler = {
	        geometry: function geometry() {
	          that.isTriRelateDown = true;
	          that.$geometryTri.addClass('on');
	        },
	        star: function star(e) {
	          that.isTriRelateDown = true;
	          var $target = $(e.target).closest('.np_starItem');
	          var $fourthStar = that.$starItem.not('.hide_dom').eq(3);
	          if ($target.length !== 0 && $target[0] == $fourthStar[0]) {
	            that.$starTri.addClass('on');
	          }
	        },
	        grid: function grid() {
	          that.isTriRelateDown = true;
	          that.$gridColorTri.addClass('on');
	        }
	      };
	    }
	  }, {
	    key: 'bindEvent',
	    value: function bindEvent() {
	      var that = this;
	      /* 返回选择页事件*/
	      this.$backMain.on('click', this._returnToEntrance.bind(this));
	      this.$numberPairBtn.on('click', this._enterWriteNP.bind(this));
	      this.$findLocationBtn.on('click', this._enterFindPos.bind(this));

	      /* 一级菜单点击事件绑定*/
	      this.$zoomAnimal.on('click', function () {
	        that._menuClickHandler(that.$zooAnimalList, 'zoo');
	      });
	      this.$geometryMenu.on('click', function () {
	        that._menuClickHandler(that.$geometry, 'shape');
	      });
	      this.$starMenu.on('click', function () {
	        that._menuClickHandler(that.$twelveStars, 'star');
	      });
	      this.$gridColorMenu.on('click', function () {
	        that._menuClickHandler(that.$gridColor, 'grid');
	      });
	      /* 二级菜单点击事件绑定*/
	      this.$starItem.on('click', function (e) {
	        that._itemClickHandler(e, that.$starItem, 'star');
	      });
	      this.$geometryItem.on('click', function (e) {
	        that._itemClickHandler(e, that.$geometryItem, 'shape');
	      });
	      this.$gridColorItem.on('click', function (e) {
	        that._itemClickHandler(e, that.$gridColorItem, 'grid');
	      });
	      /* 预设点击事件绑定*/
	      this.$js_scene.on('click', this._switchJsScene.bind(this));

	      /* 点击数对值*/
	      that.numpairBox.on('click', '.js_num_text:not(.added_num_state)', this._clickNumpairs.bind(this));
	      /* gridMain那边触发的change*/
	      $(that.paper).on('change', that._occurChange.bind(that));
	      /* 根据更新的点将找位置动物园置灰*/
	      $(that.paper).on('updateCoor', function (e, coor, isDelete) {
	        if (that.findPosStatus.zoo.isActive) {
	          that._updateAnimalsByCoor(coor);
	        }
	        that._judgeClickPoint(coor, isDelete);
	      });

	      /* 撤销*/
	      that.$js_undo.click(function () {
	        that.gridMain.undo();
	      });
	      /* 恢复*/
	      that.$js_redo.click(function () {
	        that.gridMain.redo();
	      });
	      /* 重置*/
	      that.$js_reset.on('click', function (event) {
	        that.gridMain.reset();
	      });

	      /* 拖动动物*/
	      that.$zooAnimalList.on('mousedown touchstart', function (e) {
	        that._dragAnimal.bind(that)(e);
	      });

	      /* 星座预设二级菜单向上*/
	      that.$moveUp.on('click', that._starMoveUp.bind(that));
	      /* 星座预设二级菜单向下*/
	      that.$moveDown.on('click', that._starMoveDown.bind(that));

	      /* 添加数对*/
	      that.addNumpairBtn.on('click', that._addNumpairs.bind(that));
	      /* 删除数对*/
	      that.deleteNumpairBtn.on('click', that._deleteNumpairs.bind(that));
	      /* 点击数对弹出键盘*/
	      that.numpairBox.on('click', '.added_num_state', that._popKeyboard.bind(that));
	      /* 键盘输入*/
	      that.keyboard.on('click touchend', that._keyboardInput.bind(that));
	      that.keyboard.on('touchstart', function (e) {
	        var num = $(e.target).closest('.js_keyboard_num');
	        if (num.length !== 0) {
	          num.addClass('ui_btn_active');
	        }
	      });

	      /* 二级菜单小三角处理*/
	      that.$geometryItem.eq(0).on('mousedown', that.menuTriHandler['geometry'].bind(that));
	      that.$twelveStarList.on('mousedown', that.menuTriHandler['star'].bind(that));
	      that.$gridColorItem.eq(2).on('mousedown', that.menuTriHandler['grid'].bind(that));

	      /* 点击其他位置隐藏键盘和二级菜单小三角形处理*/
	      $(document).on('click touchend', that._documentUp.bind(that));
	    }
	  }, {
	    key: '_returnToEntrance',
	    value: function _returnToEntrance() {
	      this.$nubmerPairWrapper.addClass('hide_dom');
	      this.$numberPairEntranceWrapper.removeClass('hide_dom');
	    }
	  }, {
	    key: '_enterWriteNP',
	    value: function _enterWriteNP() {
	      this.isWriteNP = true;
	      this.$numberPairEntranceWrapper.addClass('hide_dom');
	      this.$nubmerPairWrapper.removeClass('hide_dom');
	      this.$numberPairMain.removeClass('menu_writeNP').addClass('menu_findLocation');
	      this.$zooAnimalList.removeClass('change_np_zoo_animals_3').addClass('change_np_zoo_animals_4');
	      this.$zoomAnimal.attr('data-gridid', 'writeCoor_animateDot_scene1');
	      this.$geometryItem.each(function (i) {
	        $(this).attr('data-gridid', 'writeCoor_geoDot_scene' + (i + 1));
	      });
	      this.$starItem.each(function (i) {
	        $(this).attr('data-gridid', 'writeCoor_star_scene' + (i + 1));
	      });
	      this.$npMenuItem.removeClass('on');
	      for (var i in this.writeNPStatus) {
	        var subItemIndex = this.writeNPStatus[i].subItemIndex;
	        var isActive = this.writeNPStatus[i].isActive;
	        var menuItem = this.ItemObjs[i].menuItem;
	        var subItem = this.ItemObjs[i].subItem;
	        if (isActive) {
	          menuItem.click();
	          if (subItem) {
	            subItem.eq(subItemIndex).click();
	          }
	        } else {
	          if (subItem) {
	            subItem.removeClass('on');
	            subItem.eq(subItemIndex).addClass('on');
	          }
	        }
	      }
	      var firstStarIndex = this.writeNPStatus.star.subFirstShowIndex;
	      this.$starItem.removeClass('hide_dom').filter(':lt(' + firstStarIndex + ')').addClass('hide_dom');
	      if (!this.$starItem.not('.hide_dom').eq(3).hasClass('on')) {
	        this.$starTri.removeClass('on');
	      } else {
	        this.$starTri.addClass('on');
	      }
	      this.$moveUp.find('.np_moveUp').removeClass('click_disabled');
	      this.$moveDown.find('.np_moveDown').removeClass('click_disabled');
	      for (var _i = 0; _i < this.writeNPStatus.zoo.animalStatus.length; _i++) {
	        var status = this.writeNPStatus.zoo.animalStatus[_i];
	        var animalObject = this.$zooAnimals.eq(_i);
	        status == 0 ? animalObject.addClass('click_disabled') : animalObject.removeClass('click_disabled');
	      }
	      if (firstStarIndex == 0) {
	        this.$moveUp.find('.np_moveUp').addClass('click_disabled');
	      }
	      if (firstStarIndex == 10) {
	        this.$moveDown.find('.np_moveDown').addClass('click_disabled');
	      }
	      this.$zooAnimal1.find('.text').text(this.i18nData.numpair_elephantHall);
	      this.$zooAnimal2.find('.text').text(this.i18nData.numpair_pandaHall);
	      this.$zooAnimal3.find('.text').text(this.i18nData.numpair_marineMuseum);
	    }
	  }, {
	    key: '_enterFindPos',
	    value: function _enterFindPos() {
	      this.isWriteNP = false;
	      this.$numberPairEntranceWrapper.addClass('hide_dom');
	      this.$nubmerPairWrapper.removeClass('hide_dom');
	      this.$numberPairMain.removeClass('menu_findLocation').addClass('menu_writeNP');
	      this.$zoomAnimal.attr('data-gridid', 'lookforCoor_animateDot_scene1');
	      this.$zooAnimalList.removeClass('change_np_zoo_animals_4').addClass('change_np_zoo_animals_3');
	      this.$geometryItem.each(function (i) {
	        $(this).attr('data-gridid', 'lookforCoor_geoDot_scene' + (i + 1));
	      });
	      this.$starItem.each(function (i) {
	        $(this).attr('data-gridid', 'lookforCoor_star_scene' + (i + 1));
	      });
	      this.$npMenuItem.removeClass('on');
	      for (var i in this.findPosStatus) {
	        var subItemIndex = this.findPosStatus[i].subItemIndex;
	        var isActive = this.findPosStatus[i].isActive;
	        var menuItem = this.ItemObjs[i].menuItem;
	        var subItem = this.ItemObjs[i].subItem;
	        if (isActive) {
	          menuItem.click();
	          if (subItem) {
	            subItem.eq(subItemIndex).click();
	          }
	        } else {
	          if (subItem) {
	            subItem.removeClass('on');
	            subItem.eq(subItemIndex).addClass('on');
	          }
	        }
	      }
	      var firstStarIndex = this.findPosStatus.star.subFirstShowIndex;
	      this.$starItem.removeClass('hide_dom').filter(':lt(' + firstStarIndex + ')').addClass('hide_dom');
	      if (!this.$starItem.not('.hide_dom').eq(3).hasClass('on')) {
	        this.$starTri.removeClass('on');
	      } else {
	        this.$starTri.addClass('on');
	      }
	      this.$moveUp.find('.np_moveUp').removeClass('click_disabled');
	      this.$moveDown.find('.np_moveDown').removeClass('click_disabled');
	      for (var _i2 = 0; _i2 < this.findPosStatus.zoo.animalStatus.length; _i2++) {
	        var status = this.findPosStatus.zoo.animalStatus[_i2];
	        var animalObject = this.$zooAnimals.eq(_i2);
	        status == 0 ? animalObject.addClass('click_disabled') : animalObject.removeClass('click_disabled');
	      }
	      if (firstStarIndex == 0) {
	        this.$moveUp.find('.np_moveUp').addClass('click_disabled');
	      }
	      if (firstStarIndex == 10) {
	        this.$moveDown.find('.np_moveDown').addClass('click_disabled');
	      }
	      this.$zooAnimal1.find('.text').text(this.i18nData.numpair_bridPark);
	      this.$zooAnimal2.find('.text').text(this.i18nData.numpair_gorillaHall);
	      this.$zooAnimal3.find('.text').text(this.i18nData.numpair_LigerHill);
	    }

	    /* 一级菜单点击事件处理*/

	  }, {
	    key: '_menuClickHandler',
	    value: function _menuClickHandler(relevantObject, name) {
	      var that = this;
	      that.$npMenuItem.removeClass('on');
	      that.$addSubCoordinate.addClass('hide_dom');
	      that.$numberPairMain.removeClass('show_pre_1').addClass('show_pre_2');
	      that.$gridSvg.removeClass('change_axis_17').addClass('change_axis_10');
	      that.$jsItemRelevant.addClass('hide_dom');
	      that.npScrollBox.removeClass('change_block_height');
	      relevantObject.removeClass('hide_dom');
	      relevantObject.find('li.on').click();
	      that.numpairWrapper.removeClass('change_height_850 change_min_width').addClass('change_height_780');
	      that.menuSpecialHandler[name]();
	      that.$gridSvgBg.css('background-color', '#f3f3f3');
	      if (that.isWriteNP) {
	        for (var i in that.writeNPStatus) {
	          that.writeNPStatus[i].isActive = false;
	        }
	        that.writeNPStatus[name].isActive = true;
	      } else {
	        for (var _i3 in that.findPosStatus) {
	          that.findPosStatus[_i3].isActive = false;
	        }
	        that.findPosStatus[name].isActive = true;
	      }
	    }

	    /* 二级菜单点击事件处理*/

	  }, {
	    key: '_itemClickHandler',
	    value: function _itemClickHandler(e, elem, name) {
	      var that = this;
	      var $target = $(e.target).closest('.js_scene');
	      elem.removeClass('on');
	      $target.addClass('on');
	      var index = elem.index($target);
	      this.itemSpecialHandler[name](index, $target);
	      if (that.isWriteNP) {
	        that.writeNPStatus[name].subItemIndex = index;
	      } else {
	        that.findPosStatus[name].subItemIndex = index;
	      }
	    }

	    /* 切换历史记录*/

	  }, {
	    key: '_switchUndoStack',
	    value: function _switchUndoStack(index) {
	      if (this.undoManager.hasUndoStack(index)) {
	        this.undoStack = this.undoManager.getUndoStack(index);
	        this.gridMain.setUndoStack(this.undoStack);
	      } else {
	        this.undoStack = this.undoManager.createUndoStack(index, {
	          provider: $.proxy(function (done) {
	            done(this.gridMain.getData());
	          }, this),
	          onUpdate: $.proxy(function () {
	            this.updateUndoStyle();
	          }, this),
	          maxLength: 3
	        });
	        this.undoStack.initialize(this.gridMain.getDefaultData());
	        this.gridMain.setUndoStack(this.undoStack);
	      }
	    }
	  }, {
	    key: '_switchAxisStatus',


	    /* 切换坐标轴状态*/
	    value: function _switchAxisStatus(numpairs) {
	      var values = [];
	      for (var i in numpairs) {
	        values.push(numpairs[i]);
	      }
	      this.$gridAxisV.find('.text').removeClass('change_color_red');
	      this.$gridAxisH.find('.text').removeClass('change_color_red');
	      var _iteratorNormalCompletion = true;
	      var _didIteratorError = false;
	      var _iteratorError = undefined;

	      try {
	        for (var _iterator = values[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	          var value = _step.value;

	          if (value.lineX) {
	            this.$gridAxisV.filter('.tick_' + parseInt(value.y)).find('.text').addClass('change_color_red');
	            if (parseInt(value.y) === 0) {
	              this.$gridAxisH.filter('.tick_0').find('.text').addClass('change_color_red');
	              this.isZoreX = true;
	            } else {
	              this.isZoreX = false;
	            }
	          }
	          if (value.lineY) {
	            this.$gridAxisH.filter('.tick_' + parseInt(value.x)).find('.text').addClass('change_color_red');
	          }
	          if (value.lineX || value.lineY) break;
	        }
	      } catch (err) {
	        _didIteratorError = true;
	        _iteratorError = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion && _iterator.return) {
	            _iterator.return();
	          }
	        } finally {
	          if (_didIteratorError) {
	            throw _iteratorError;
	          }
	        }
	      }
	    }
	  }, {
	    key: '_switchJsScene',


	    /* 切换预设场景*/
	    value: function _switchJsScene(e) {
	      var $target = $(e.target).closest('.js_scene');
	      var gridId = $target.attr('data-gridId');
	      this.gridMain.showTab(gridId);
	      var index = this.$js_scene.index($target);
	      if (!this.isWriteNP) {
	        index += 15;
	      }
	      var data = this.gridMain.getData();
	      this._switchUndoStack(index);
	      this._switchAxisStatus(data.numPairs);
	      this.numpairWrapper.removeClass('scroll');
	      if (gridId.indexOf('animateDot') !== -1 || gridId.match(/lookforCoor_drawBlock_scene(1|2)/)) {
	        this.numpairWrapper.addClass('scroll');
	      }
	    }

	    /* 写数对html模板*/

	  }, {
	    key: '_createWriteNPCoorHtml',
	    value: function _createWriteNPCoorHtml(name, x, y, isVisibleX, isVisibleY) {
	      var classNameX = isVisibleY ? '' : 'change_card';
	      var classNameY = isVisibleX ? '' : 'change_card';
	      var markClassName = /[A-Za-z]/.test(name) ? 'np_block_title_en nd_NewRoman_italic' : 'np_block_title';
	      return '<div class="np_scroller_np_block">' + '<span class="' + markClassName + '">' + name + '</span> ' + '<span class="np_common_text nd_NewRoman">(</span> ' + '<span data-draw="Y" class="np_num_text js_num_text ' + classNameX + '"><span class="text nd_NewRoman">' + x + '</span></span> ' + '<span class="np_common_text nd_NewRoman">,</span> ' + '<span data-draw="X" class="np_num_text js_num_text ' + classNameY + '"><span class="text nd_NewRoman">' + y + '</span></span> ' + '<span class="np_common_text nd_NewRoman">)</span> ' + '</div>';
	    }

	    /* 找位置html模板*/

	  }, {
	    key: '_createFindNPCoorHtml',
	    value: function _createFindNPCoorHtml(name, x, y, isVisibleX, isVisibleY, isCorrect) {
	      var html = '';
	      var markClassName = /[A-Za-z]/.test(name) ? 'np_block_title_en nd_NewRoman_italic' : 'np_block_title';
	      var correctName = isCorrect ? 'show_right' : '';
	      if (x || y) {
	        if (isVisibleX && isVisibleY) {
	          var xClassName = '';
	          var yClassName = '';
	          if (!x) {
	            x = '';
	            xClassName = 'added_num_state';
	          }
	          if (!y) {
	            y = '';
	            yClassName = 'added_num_state';
	          }
	          html = '<div class="np_scroller_np_block ' + correctName + '">' + '<span class="np_show_wor"></span>' + '<span class="change_color ' + markClassName + '">' + name + '</span> ' + '<span class="np_common_text nd_NewRoman change_color">(</span> ' + '<a href="javascript:void(0)" class="com_btns btns-primary js_num_text ' + xClassName + '" data-draw="Y">' + '<span class="num_input_text nd_NewRoman change_color">' + x + '</span> </a> ' + '<span class="np_common_text nd_NewRoman change_color">,</span> ' + '<a href="javascript:void(0)" class="com_btns btns-primary js_num_text ' + yClassName + '" data-draw="X">' + '<span class="num_input_text nd_NewRoman change_color">' + y + '</span> </a> ' + '<span class="np_common_text nd_NewRoman change_color">)</span>' + '</div>';
	        }
	      } else {
	        html = '<div class="np_scroller_np_block ' + correctName + '">' + '<span class="np_show_wor"></span>' + '<span class="change_color ' + markClassName + '">' + name + '</span> ' + '<span class="np_common_text nd_NewRoman change_color">(</span> ' + '<a href="javascript:void(0)" class="com_btns btns-primary js_num_text added_num_state" data-draw="Y">' + '<span class="num_input_text nd_NewRoman change_color"></span> </a> ' + '<span class="np_common_text nd_NewRoman change_color">,</span> ' + '<a href="javascript:void(0)" class="com_btns btns-primary js_num_text added_num_state change_color" data-draw="X">' + '<span class="num_input_text nd_NewRoman change_color"></span> </a> ' + '<span class="np_common_text nd_NewRoman change_color">)</span>' + '</div>';
	        /* 加数对,coor为空*/
	        this.gridMain.updateNumPairsFnOutSide({}, name);
	      }
	      return html;
	    }

	    /* 更新右边的数对列表*/

	  }, {
	    key: '_updateNumpairBox',
	    value: function _updateNumpairBox() {
	      var numpairs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	      var liEle = '';
	      var keys = Object.keys(numpairs);
	      if (this.gridMain.curGridId === 'lookforCoor_animateDot_scene1') {
	        keys = this._resort(keys, numpairs);
	      }
	      var _iteratorNormalCompletion2 = true;
	      var _didIteratorError2 = false;
	      var _iteratorError2 = undefined;

	      try {
	        for (var _iterator2 = keys[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	          var key = _step2.value;

	          // if(numpairs[key].isVisible){
	          if (this.isWriteNP) {
	            liEle += this._createWriteNPCoorHtml(numpairs[key].mark, numpairs[key].x, numpairs[key].y, numpairs[key].isVisibleX, numpairs[key].isVisibleY);
	          } else {
	            liEle += this._createFindNPCoorHtml(numpairs[key].mark, numpairs[key].x, numpairs[key].y, numpairs[key].isVisibleX, numpairs[key].isVisibleY, numpairs[key].isCorrect);
	          }
	          // }
	        }
	      } catch (err) {
	        _didIteratorError2 = true;
	        _iteratorError2 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion2 && _iterator2.return) {
	            _iterator2.return();
	          }
	        } finally {
	          if (_didIteratorError2) {
	            throw _iteratorError2;
	          }
	        }
	      }

	      return liEle;
	    }
	  }, {
	    key: '_resort',
	    value: function _resort(keys, numpairs) {
	      var subKeys = keys.slice(3, keys.length);
	      subKeys = subKeys.sort(compare);

	      function compare(a, b) {
	        return parseInt(numpairs[a].mark.charCodeAt(0)) - parseInt(numpairs[b].mark.charCodeAt(0));
	      }

	      for (var i = 0; i < subKeys.length; i++) {
	        keys[i + 3] = subKeys[i];
	      }

	      return keys;
	    }

	    /* 处理动物园置灰效果*/

	  }, {
	    key: '_handlerAnimalStatus',
	    value: function _handlerAnimalStatus() {
	      var animalArr1 = [this.i18nData.numpair_elephantHall, this.i18nData.numpair_pandaHall, this.i18nData.numpair_marineMuseum, this.i18nData.numpair_monkeyMountain];
	      var animalArr2 = [this.i18nData.numpair_bridPark, this.i18nData.numpair_gorillaHall, this.i18nData.numpair_LigerHill];
	      if (this.gridMain.curGridId == 'lookforCoor_animateDot_scene1' || this.gridMain.curGridId == 'writeCoor_animateDot_scene1') {
	        var data = this.gridMain.getData();
	        var status = this.isWriteNP ? this.writeNPStatus : this.findPosStatus;
	        this.$zooAnimals.removeClass('click_disabled');
	        status.zoo.animalStatus.forEach(function (value, index, array) {
	          array[index] = 1;
	        });
	        var animalArr = this.isWriteNP ? animalArr1 : animalArr2;
	        var numpairs = data.numPairs;
	        var coors = data.coors;
	        for (var i in numpairs) {
	          var index = animalArr.indexOf(numpairs[i].mark);
	          if (index != -1 && i in coors) {
	            this.$zooAnimals.eq(index).addClass('click_disabled');
	            status.zoo.animalStatus[index] = 0;
	          }
	        }
	      }
	    }

	    /* 画辅助线时坐标轴对应数值亮起*/

	  }, {
	    key: '_lighthighAxis',
	    value: function _lighthighAxis(coorType, coor) {
	      var numpairs = this.gridMain.getData().numPairs;
	      if (coorType == 'X') {
	        /* 判断此时Y线是否是同一个坐标的 不是就reset文字*/
	        if (!isNaN(parseInt(coor.x))) {
	          var key = 'coor_' + coor.x + '_' + -coor.y;
	          if (numpairs[key] && !numpairs[key].lineY) {
	            this.$gridAxisH.find('.text').removeClass('change_color_red');
	          }
	        } else {
	          this.$gridAxisH.find('.text').removeClass('change_color_red');
	        }
	        this.$gridAxisV.find('.text').removeClass('change_color_red');
	        this.$gridAxisV.filter('.tick_' + parseInt(-coor.y)).find('.text').addClass('change_color_red');
	        if (coor.y === 0) {
	          this.$gridAxisH.filter('.tick_0').find('.text').addClass('change_color_red');
	          this.isZoreX = true;
	        } else {
	          this.isZoreX = false;
	        }
	      } else {
	        /* 判断此时X线是否是同一个坐标的 不是就reset文字*/
	        if (!isNaN(parseInt(coor.y))) {
	          var _key = 'coor_' + coor.x + '_' + -coor.y;
	          if (numpairs[_key] && !numpairs[_key].lineX) {
	            this.$gridAxisV.find('.text').removeClass('change_color_red');
	            this.isZoreX = false;
	          }
	        } else {
	          this.$gridAxisV.find('.text').removeClass('change_color_red');
	          this.isZoreX = false;
	        }
	        this.$gridAxisH.find('.text').removeClass('change_color_red');
	        this.$gridAxisH.filter('.tick_' + parseInt(coor.x)).find('.text').addClass('change_color_red');
	        if (this.isZoreX) {
	          this.$gridAxisH.filter('.tick_0').find('.text').addClass('change_color_red');
	        } else if (coor.x !== 0 && !this.isZoreX) {
	          this.$gridAxisH.filter('.tick_0').find('.text').removeClass('change_color_red');
	        }
	      }
	    }
	  }, {
	    key: '_clickNumpairs',


	    /* 点击数对值*/
	    value: function _clickNumpairs(e) {
	      var _this = this;

	      var coor = {};
	      var $target = $(e.target).closest('.js_num_text');
	      var spans = $target.closest('.np_scroller_np_block').find('.js_num_text');
	      if (this.isWriteNP) {
	        $target.addClass('ui_btn_active');
	        setTimeout(function () {
	          $target.removeClass('change_card');
	        }, 600);
	      }
	      var x = parseInt(spans.eq(0).text());
	      var y = parseInt(spans.eq(1).text());
	      coor.x = isNaN(x) ? undefined : x;
	      coor.y = isNaN(y) ? undefined : -y;
	      var coorType = $target.attr('data-draw');
	      var name = $target.siblings('.np_block_title, .np_block_title_en').text();
	      // this._lighthighAxis(coorType, coor);
	      // this.gridMain['draw' + coorType](coor, true, name);
	      /* 同步*/
	      if (this.isWriteNP) {
	        /* 写数对先画线后标红坐标*/
	        var res = this.gridMain['draw' + coorType](coor, true, name);
	        if (res && typeof res.then === 'function' && typeof res.done === 'function') {
	          res.done(function () {
	            _this._lighthighAxis(coorType, coor);
	          });
	        }
	      } else {
	        if (!this['redMark' + coorType]) {
	          this['redMark' + coorType] = $.Deferred().resolve();
	        }
	        /* 先标红坐标后画线*/
	        this['redMark' + coorType] = this['redMark' + coorType].then(function () {
	          _this._lighthighAxis(coorType, coor);
	          var defer = $.Deferred();
	          _this.gridMain['draw' + coorType](coor, true, name).done(function () {
	            return defer.resolve();
	          });
	          return defer.promise();
	        });
	      }
	    }

	    /* gridMain那边触发的change*/

	  }, {
	    key: '_occurChange',
	    value: function _occurChange() {
	      var data = this.gridMain.getData();
	      this.numpairBox.html(this._updateNumpairBox(data.numPairs));
	      this._handlerAnimalStatus();
	      this._switchAxisStatus(data.numPairs);
	      this.numpairWrapper.removeClass('add_scroll');
	      this.numpairWrapper.removeClass('change_position_add_sub');
	      var len = Object.keys(data.numPairs).length;
	      if (len > 8) {
	        this.numpairWrapper.addClass('add_scroll');
	        this.gridMain.curGridId === 'lookforCoor_animateDot_scene1' && this.numpairWrapper.addClass('change_position_add_sub');
	      }
	      if (len === 3) {
	        this.deleteNumpairBtn.addClass('click_disabled');
	        this.addNumpairBtn.removeClass('click_disabled');
	      } else if (len === 29) {
	        this.addNumpairBtn.addClass('click_disabled');
	        this.deleteNumpairBtn.removeClass('click_disabled');
	      } else {
	        this.addNumpairBtn.removeClass('click_disabled');
	        this.deleteNumpairBtn.removeClass('click_disabled');
	      }
	    }

	    /* 根据更新的点将找位置动物园置灰*/

	  }, {
	    key: '_updateAnimalsByCoor',
	    value: function _updateAnimalsByCoor(coor) {
	      var x = coor.x;
	      var y = coor.y;
	      if (x == 5 && y == 8) {
	        this.$zooAnimals.eq(0).addClass('click_disabled');
	        this.findPosStatus.zoo.animalStatus[0] = 0;
	      } else if (x == 4 && y == 6) {
	        this.$zooAnimals.eq(1).addClass('click_disabled');
	        this.findPosStatus.zoo.animalStatus[1] = 0;
	      } else if (x == 2 && y == 5) {
	        this.$zooAnimals.eq(2).addClass('click_disabled');
	        this.findPosStatus.zoo.animalStatus[2] = 0;
	      }
	    }

	    /* 动物拖动*/

	  }, {
	    key: '_dragAnimal',
	    value: function _dragAnimal(e) {
	      /* 拖动中的动物*/
	      var moveAnimal = void 0;
	      /* 拖动中的动物的序号*/
	      var animalIndex = 0;
	      var that = this;
	      this.isAnimalDown = true;
	      e = e.originalEvent;
	      e = e.touches ? e.touches[0] : e;
	      var boxOffset = this.mainBox.offset();
	      var restrictLeft = boxOffset.left;
	      var restrictRight = boxOffset.left + this.mainBox.width();
	      var restrictTop = boxOffset.top;
	      var restrictBottom = boxOffset.top + this.mainBox.height();
	      var $target = $(e.target).closest('.js_zoo_animal');
	      if ($target.length == 0 || $target.hasClass('click_disabled')) return;
	      animalIndex = this.$zooAnimals.index($target);
	      moveAnimal = $target.find('.icon');
	      var parentOffsetX = $target.parent().offset().left + $target.position().left;
	      var parentOffsetY = $target.parent().offset().top + $target.position().top;
	      var moveAnimalW = moveAnimal.width();
	      var moveAnimalH = moveAnimal.height();
	      // 处理白板端移动到边界bug
	      that.$zooMoveAnimals.addClass('hide_dom');
	      $(document).off('.animalMove .animalUp');
	      moveAnimal.removeClass('hide_dom').css({
	        position: 'absolute',
	        left: e.pageX - parentOffsetX - moveAnimalW / 2,
	        top: e.pageY - parentOffsetY - moveAnimalH / 2
	      });
	      $(document).on('mousemove.animalMove touchmove.animalMove', animalMove);
	      $(document).on('mouseup.animalUp touchend.animalUp', animalLay);

	      function animalMove(e) {
	        if (that.isAnimalDown) {
	          e = e.originalEvent;
	          e = e.touches ? e.touches[0] : e;
	          var x = e.pageX;
	          var y = e.pageY;
	          moveAnimal.css({
	            left: x - parentOffsetX - moveAnimalW / 2,
	            top: y - parentOffsetY - moveAnimalH / 2
	          });
	          if (x < restrictLeft || x > restrictRight || y < restrictTop || y > restrictBottom) {
	            moveAnimal.addClass('hide_dom');
	            that.isAnimalDown = false;
	            $(document).off('.animalMove .animalUp');
	          }
	        }
	      }

	      function animalLay(e) {
	        if (that.isAnimalDown) {
	          e = e.originalEvent;
	          e = e.changedTouches ? e.changedTouches[0] : e;
	          var pageX = e.pageX;
	          var pageY = e.pageY;
	          var point = _Utils.utils.reportMouseCoordinates(that.gridMain.svg, pageX, pageY, that.gridMain.transGroup);
	          point.x = Math.round(point.x);
	          point.y = Math.round(point.y);
	          var fakeCoor = _Utils.utils.chFakeCoor(point);
	          var x = fakeCoor.x;
	          var y = fakeCoor.y;
	          if (that.isWriteNP) {
	            var existedCoors = that.gridMain.getData().coors;
	            var isAdd = true;
	            for (var i in existedCoors) {
	              if (existedCoors[i].x == x && existedCoors[i].y == y) {
	                isAdd = false;
	              }
	            }
	            if (point.x <= 10 && point.x >= 0 && point.y <= 0 && point.y >= -10 && isAdd) {
	              that.gridMain.doDetail(point);
	              var animalInfo = that.animalInfos[animalIndex];
	              var data = that.gridMain.getData();
	              animalInfo.x = x;
	              animalInfo.y = y;
	              data.coors['coor_' + x + '_' + y] = animalInfo;
	              data.numPairs['coor_' + x + '_' + y] = animalInfo;
	              that.gridMain.setData(data);
	              that.undoStack.save();
	              $(that.paper).trigger('change');
	              moveAnimal.parent().addClass('click_disabled');
	              that.writeNPStatus.zoo.animalStatus[animalIndex] = 0;
	            }
	          } else {
	            var _data = that.gridMain.getData();
	            var animalX = void 0;
	            var animalY = void 0;
	            var animalTxt = moveAnimal.siblings('.star_text').text();
	            animalIndex += 4;
	            var keys = Object.keys(_data.numPairs);
	            var _iteratorNormalCompletion3 = true;
	            var _didIteratorError3 = false;
	            var _iteratorError3 = undefined;

	            try {
	              for (var _iterator3 = keys[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
	                var key = _step3.value;

	                if (_data.numPairs[key].mark === animalTxt) {
	                  animalX = _data.numPairs[key].x;
	                  animalY = _data.numPairs[key].y;
	                  break;
	                }
	              }
	            } catch (err) {
	              _didIteratorError3 = true;
	              _iteratorError3 = err;
	            } finally {
	              try {
	                if (!_iteratorNormalCompletion3 && _iterator3.return) {
	                  _iterator3.return();
	                }
	              } finally {
	                if (_didIteratorError3) {
	                  throw _iteratorError3;
	                }
	              }
	            }

	            if (x === animalX && y === animalY) {
	              var _animalInfo = that.animalInfos[animalIndex];
	              _animalInfo.x = x;
	              _animalInfo.y = y;
	              _data.coors['coor_' + x + '_' + y] = _animalInfo;
	              _data.numPairs['coor_' + x + '_' + y] = _animalInfo;
	              _data.numPairs['coor_' + x + '_' + y].isVisibleX = true;
	              _data.numPairs['coor_' + x + '_' + y].isVisibleY = true;
	              _data.numPairs['coor_' + x + '_' + y].isCorrect = true;
	              that.gridMain.setData(_data);
	              that.undoStack.save();
	              $(that.paper).trigger('change');
	              moveAnimal.parent().addClass('click_disabled');
	              that.findPosStatus.zoo.animalStatus[animalIndex - 4] = 0;
	            }
	          }
	        }
	        moveAnimal.addClass('hide_dom');
	        that.isAnimalDown = false;
	        $(document).off('.animalMove .animalUp');
	      }
	    }

	    /* 撤销还原后的更新动作*/

	  }, {
	    key: 'updateUndoStyle',
	    value: function updateUndoStyle() {
	      if (this.undoStack) {
	        if (this.undoStack.canUndo()) {
	          this.$js_undo.find('.tool_operate_bar').removeClass('click_disabled');
	        } else {
	          this.$js_undo.find('.tool_operate_bar').addClass('click_disabled');
	        }
	        if (this.undoStack.canRedo()) {
	          this.$js_redo.find('.tool_operate_bar').removeClass('click_disabled');
	        } else {
	          this.$js_redo.find('.tool_operate_bar').addClass('click_disabled');
	        }
	      }
	    }
	  }, {
	    key: '_starMoveUp',
	    value: function _starMoveUp() {
	      var firstStarIndex = this.isWriteNP ? this.writeNPStatus.star.subFirstShowIndex : this.findPosStatus.star.subFirstShowIndex;
	      if (firstStarIndex == 0) return;
	      firstStarIndex -= 5;
	      if (firstStarIndex == 0) {
	        this.$starItem.removeClass('hide_dom');
	      } else {
	        this.$starItem.filter(':gt(' + (firstStarIndex - 1) + ')').removeClass('hide_dom');
	      }
	      if (firstStarIndex == 0) {
	        this.$moveUp.find('.np_moveUp').addClass('click_disabled');
	      }
	      this.$moveDown.find('.np_moveDown').removeClass('click_disabled');
	      if (this.isWriteNP) {
	        this.writeNPStatus.star.subFirstShowIndex = firstStarIndex;
	      } else {
	        this.findPosStatus.star.subFirstShowIndex = firstStarIndex;
	      }
	      if (!this.$starItem.not('.hide_dom').eq(3).hasClass('on')) {
	        this.$starTri.removeClass('on');
	      } else {
	        this.$starTri.addClass('on');
	      }
	    }
	  }, {
	    key: '_starMoveDown',
	    value: function _starMoveDown() {
	      var firstStarIndex = this.isWriteNP ? this.writeNPStatus.star.subFirstShowIndex : this.findPosStatus.star.subFirstShowIndex;

	      if (firstStarIndex == 10) return;
	      firstStarIndex += 5;
	      this.$starItem.filter(':lt(' + firstStarIndex + ')').addClass('hide_dom');
	      if (firstStarIndex == 10) {
	        this.$moveDown.find('.np_moveDown').addClass('click_disabled');
	      }
	      this.$moveUp.find('.np_moveUp').removeClass('click_disabled');
	      if (this.isWriteNP) {
	        this.writeNPStatus.star.subFirstShowIndex = firstStarIndex;
	      } else {
	        this.findPosStatus.star.subFirstShowIndex = firstStarIndex;
	      }
	      if (!this.$starItem.not('.hide_dom').eq(3).hasClass('on')) {
	        this.$starTri.removeClass('on');
	      } else {
	        this.$starTri.addClass('on');
	      }
	    }
	  }, {
	    key: '_judgeClickPoint',
	    value: function _judgeClickPoint(coor, isDelete) {
	      var data = this.gridMain.getData();
	      var numberPair = data.numPairs;
	      var x = parseInt(coor.x);
	      var y = parseInt(coor.y);
	      var keys = Object.keys(numberPair);
	      var mark = void 0;
	      var _iteratorNormalCompletion4 = true;
	      var _didIteratorError4 = false;
	      var _iteratorError4 = undefined;

	      try {
	        for (var _iterator4 = keys[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
	          var key = _step4.value;

	          if (numberPair[key].x == x && numberPair[key].y == y) {
	            mark = numberPair[key].mark;
	            numberPair[key].isCorrect = !isDelete;
	          }
	        }
	      } catch (err) {
	        _didIteratorError4 = true;
	        _iteratorError4 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion4 && _iterator4.return) {
	            _iterator4.return();
	          }
	        } finally {
	          if (_didIteratorError4) {
	            throw _iteratorError4;
	          }
	        }
	      }

	      if (mark) {
	        var domNumberPair = this.numpairBox.find('.np_scroller_np_block');
	        domNumberPair.each(function (index, elem) {
	          if (mark == $(elem).find('.np_block_title, .np_block_title_en').text()) {
	            isDelete ? $(elem).removeClass('show_right') : $(elem).addClass('show_right');
	          }
	        });
	        this.gridMain.setData(data);
	      }
	    }
	  }, {
	    key: '_addNumpairs',
	    value: function _addNumpairs() {
	      if (!this.addNumpairBtn.hasClass('click_disabled')) {
	        var NPNum = this.$teacherView.find('.np_scroller_np_block').length;
	        if (NPNum === 29) return;
	        this.newNPIndex = NPNum - this.defaultNPNum;
	        var newNumpair = $(this._createFindNPCoorHtml(this.newNPNames[this.newNPIndex]));
	        this.numpairBox.append(newNumpair);
	        if (this.newNPIndex === 25) {
	          this.addNumpairBtn.addClass('click_disabled');
	        }
	        this.deleteNumpairBtn.removeClass('click_disabled');
	        if (NPNum + 1 > 8) {
	          this.numpairWrapper.addClass('add_scroll');
	          this.gridMain.curGridId === 'lookforCoor_animateDot_scene1' && this.numpairWrapper.addClass('change_position_add_sub');
	        }
	      }
	    }
	  }, {
	    key: '_deleteNumpairs',
	    value: function _deleteNumpairs() {
	      if (!this.deleteNumpairBtn.hasClass('click_disabled')) {
	        var $numpiarsDom = this.$teacherView.find('.np_scroller_np_block');
	        var NPNum = $numpiarsDom.length;
	        if (NPNum === 3) return;
	        var $lastNPDom = $numpiarsDom.eq($numpiarsDom.length - 1);
	        var lastNPMask = $lastNPDom.find('.np_block_title, .np_block_title_en').text();
	        var lastNPX = $lastNPDom.find('.js_num_text').eq(0).text();
	        var lastNPY = $lastNPDom.find('.js_num_text').eq(1).text();
	        if (lastNPX != ' ' && lastNPY != ' ') {
	          lastNPMask = 'coor_' + lastNPX.trim() + '_' + lastNPY.trim();
	        }
	        var data = this.gridMain.getData();
	        delete data.numPairs[lastNPMask];
	        data.coors[lastNPMask] && delete data.coors[lastNPMask];
	        this.gridMain.setData(data);
	        this.undoStack.save();
	        $(this.paper).trigger('change');
	        this.newNPIndex = NPNum - this.defaultNPNum - 1;
	        if (this.newNPIndex === 0) {
	          this.deleteNumpairBtn.addClass('click_disabled');
	        }
	        this.addNumpairBtn.removeClass('click_disabled');
	        if (NPNum - 1 <= 8) {
	          this.numpairWrapper.removeClass('add_scroll');
	          this.numpairWrapper.removeClass('change_position_add_sub');
	        }
	      }
	    }

	    /* 防止添加重复数对*/

	  }, {
	    key: '_preventDuplicate',
	    value: function _preventDuplicate(numpairs, axis, siblingTxt, keyboardNum) {
	      var arr = [];
	      for (var i in numpairs) {
	        var numpair = numpairs[i];
	        arr.push(numpair.x ? parseInt(numpair.x) : '');
	        arr.push(numpair.y ? parseInt(numpair.y) : '');
	      }
	      if (isNaN(siblingTxt)) {
	        if (arr.length > 20) {
	          var recordArr = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
	          var beginNum = axis == 'Y' ? 0 : 1;
	          for (var _i4 = beginNum; _i4 < arr.length; _i4 += 2) {
	            if (!isNaN(parseInt(arr[_i4]))) {
	              recordArr[arr[_i4]]++;
	            }
	          }
	          for (var _i5 = 0; _i5 < recordArr.length; _i5++) {
	            if (recordArr[_i5] > 10) {
	              keyboardNum.eq(_i5).addClass('click_disabled');
	            }
	          }
	        }
	      } else {
	        if (axis == 'Y') {
	          for (var _i6 = 1; _i6 < arr.length; _i6 += 2) {
	            if (arr[_i6] == siblingTxt && !isNaN(parseInt(arr[_i6 - 1]))) {
	              keyboardNum.eq(arr[_i6 - 1]).addClass('click_disabled');
	            }
	          }
	        } else {
	          for (var _i7 = 0; _i7 < arr.length; _i7 += 2) {
	            if (arr[_i7] == siblingTxt && !isNaN(parseInt(arr[_i7 + 1]))) {
	              keyboardNum.eq(arr[_i7 + 1]).addClass('click_disabled');
	            }
	          }
	        }
	      }
	    }
	  }, {
	    key: '_popKeyboard',


	    /* 点击数对弹出键盘*/
	    value: function _popKeyboard(e) {
	      e.stopPropagation();
	      var $target = $(e.target);
	      $target = $target.closest('.added_num_state');
	      this.$teacherView.find('.added_num_state').removeClass('ui_open');
	      $target.addClass('ui_open');
	      this.keyboard.removeClass('hide_dom');
	      var keyboardW = this.keyboard.width();
	      var keyboardH = this.keyboard.height();
	      var left = $target.offset().left - $target.parents('.np_numpair_box').offset().left - keyboardW + $target.outerWidth(true);
	      var top = $target.offset().top - this.numpairWrapper.offset().top + $target.outerHeight();
	      if (top > this.numpairWrapperH * 0.8) {
	        top = $target.offset().top - this.numpairWrapper.offset().top - keyboardH;
	      }
	      this.isEditing = true;
	      this.keyboard.css({
	        left: left,
	        top: top
	      });
	      this.keyboard.$linkElem = $target;
	      this.keyboardNum.removeClass('click_disabled');
	      var numpairs = this.gridMain.getData().numPairs;
	      var axis = $target.attr('data-draw');
	      var siblingTxt = parseInt($target.siblings('.js_num_text').text());
	      this._preventDuplicate(numpairs, axis, siblingTxt, this.keyboardNum);
	    }

	    /* 点击键盘输入数值*/

	  }, {
	    key: '_keyboardInput',
	    value: function _keyboardInput(e) {
	      e.stopPropagation();
	      e.preventDefault();
	      if (this.isEditing) {
	        var $target = $(e.target);
	        $target = $target.closest('.js_keyboard_num');
	        if ($target.length == 0 || $target.hasClass('click_disabled')) return;
	        this.keyboard.$linkElem.find('span').text($target.text());
	        this.keyboard.$linkElem.removeClass('added_num_state ui_open');

	        /* 更新数对*/
	        var otherAEle = this.keyboard.$linkElem.siblings('.js_num_text');
	        var thisType = this.keyboard.$linkElem.attr('data-draw').toLowerCase();
	        var otherType = otherAEle.attr('data-draw').toLowerCase();
	        var thisValue = $.trim($target.text());
	        var otherValue = $.trim(otherAEle.find('span').text());
	        var coor = {};
	        otherValue != '' && (coor[thisType] = otherValue);
	        coor[otherType] = thisValue;
	        var name = this.keyboard.$linkElem.siblings('.np_block_title, .np_block_title_en').text();
	        var isExist = this.gridMain.updateNumPairsFnOutSide(coor, name);
	        if (isExist) {
	          this.keyboard.$linkElem.parent().addClass('show_right');
	        }
	        $target.removeClass('ui_btn_active');
	      }
	      this.keyboard.addClass('hide_dom');
	    }

	    /* document的up事件*/

	  }, {
	    key: '_documentUp',
	    value: function _documentUp() {
	      if (this.isEditing) {
	        this.keyboard.addClass('hide_dom');
	        this.keyboard.$linkElem.removeClass('ui_open');
	      }
	      if (this.isTriRelateDown) {
	        if (!this.$geometryItem.eq(0).hasClass('on')) {
	          this.$geometryTri.removeClass('on');
	        }
	        if (!this.$starItem.not('.hide_dom').eq(3).hasClass('on')) {
	          this.$starTri.removeClass('on');
	        }
	        if (!this.$gridColorItem.eq(2).hasClass('on')) {
	          this.$gridColorTri.removeClass('on');
	        }
	      }
	      this.isEditing = false;
	      this.isTriRelateDown = false;
	    }
	  }]);

	  return TEventMain;
	}();

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.SEventMain = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _Utils = __webpack_require__(5);

	var _style = __webpack_require__(6);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var SEventMain = exports.SEventMain = function () {
	  function SEventMain($view, gridMain, undoManager, basePath, i18nData) {
	    _classCallCheck(this, SEventMain);

	    this.$studentView = $view.find('.NubmerPair_wrapper_student');
	    this.gridMain = gridMain;
	    this.paper = this.gridMain.paper;
	    this.undoManager = undoManager;
	    this.basePath = basePath;
	    this.i18nData = i18nData;
	    this.isWriteNP = true;
	    this._init();
	  }

	  _createClass(SEventMain, [{
	    key: '_init',
	    value: function _init() {
	      /* 左边区域*/
	      this.numberPairLeft = this.$studentView.find('.NumberPair_left');
	      /* 右边区域*/
	      this.numberPairRight = this.$studentView.find('.NumberPair_right');
	      this.numberPairRightH = this.numberPairRight.height();
	      /* svg显示区*/
	      this.$gridSvg = this.$studentView.find('.np_axis_box_10_box');
	      /* svg显示区背景*/
	      this.$gridSvgBg = this.$gridSvg.find('.np_axis_box_10');
	      /* 数对显示区*/
	      this.$numpairBox = this.$studentView.find('.js_numpairBox');
	      /* 动物列表*/
	      this.$zooAnimalList = this.$studentView.find('.np_zoo_animals');
	      this.$zooAnimals = this.$studentView.find('.js_zoo_animal');
	      this.$zooAnimal1 = this.$studentView.find('.np_zoo_animal_1');
	      this.$zooAnimal2 = this.$studentView.find('.np_zoo_animal_2');
	      this.$zooAnimal3 = this.$studentView.find('.np_zoo_animal_3');
	      /* 撤销*/
	      this.$js_undo = this.$studentView.find('.js_undo');
	      /* 恢复*/
	      this.$js_redo = this.$studentView.find('.js_redo');
	      /* 重置*/
	      this.$js_reset = this.$studentView.find('.js_reset');
	      /* 键盘*/
	      this.keyboard = this.$studentView.find('.np_combtn_drop');
	      /* 键盘数字*/
	      this.keyboardNum = this.keyboard.find('.js_keyboard_num');
	      /* 是否处于数对编辑态*/
	      this.isEditing = false;
	      /* 提示数字*/
	      this.tipsNum = this.$studentView.find('.np_tips_num');
	      /* 提示数字框*/
	      this.tipsNumBox = this.tipsNum.find('.text_box');
	      /* 剩余个数文字*/
	      this.remainNum = this.tipsNum.find('.js_remain_num');
	      /* 提示卡牌*/
	      this.$tipCard = this.$studentView.find('.np_card');
	      /* 垂直刻度*/
	      this.$gridAxisV = this.$gridSvg.find('.np_axis_ticks_v li');
	      /* 水平刻度*/
	      this.$gridAxisH = this.$gridSvg.find('.np_axis_ticks_h li');
	      /* 完成弹出框*/
	      this.finishToast = this.$studentView.find('.NumberPair_toast');
	      /* 分钟显示*/
	      this.minuteTxt = this.finishToast.find('.js_minute');
	      /* 秒显示*/
	      this.secondTxt = this.finishToast.find('.js_second');
	      /* 正确率*/
	      this.rightRate = this.finishToast.find('.rightRate');

	      /* 拖动的动物信息*/
	      this.animalInfos = [{
	        'isVisibleX': false,
	        'isVisibleY': false,
	        'lineX': false,
	        'lineY': false,
	        'mark': this.i18nData.numpair_bridPark,
	        'type': 'img',
	        'imgSrc': this.basePath + 'resources/wood/images/icon_eagle.png',
	        'isLFAnimal': true
	      }, {
	        'isVisibleX': false,
	        'isVisibleY': false,
	        'lineX': false,
	        'lineY': false,
	        'mark': this.i18nData.numpair_gorillaHall,
	        'type': 'img',
	        'imgSrc': this.basePath + 'resources/wood/images/icon_ape.png',
	        'isLFAnimal': true
	      }, {
	        'isVisibleX': false,
	        'isVisibleY': false,
	        'lineX': false,
	        'lineY': false,
	        'mark': this.i18nData.numpair_LigerHill,
	        'type': 'img',
	        'imgSrc': this.basePath + 'resources/wood/images/icon_tiger.png',
	        'isLFAnimal': true
	      }];

	      this.layoutStrategies = {
	        'writeCoor_animateDot_scene1': {
	          widthClass: 'change_width_1140'
	        },
	        'writeCoor_normal': {
	          widthClass: 'change_width_1218'
	        },
	        'lookforCoor_animateDot_scene1': {
	          widthClass: 'change_width_1276',
	          hasTipsNum: true,
	          isFindAnimals: true
	        },
	        'lookforCoor_normal': {
	          widthClass: 'change_width_1218',
	          hasTipsNum: true
	        },
	        'lookforCoor_drawBlock_1': {
	          widthClass: 'change_width_1276',
	          hasTipsNum: true,
	          isGridColor: true
	        },
	        'lookforCoor_drawBlock_2': {
	          widthClass: 'change_width_1218',
	          hasTipsNum: true,
	          isGridColor: true
	        }
	      };
	      var curGridId = this.gridMain.curGridId;
	      var layoutName = this._transformGridId(curGridId);
	      this._adjustLayout(this.layoutStrategies[layoutName]);
	      this.isWriteNP = curGridId.indexOf('writeCoor') !== -1;
	      var numPairsLen = Object.keys(this.gridMain.getData().numPairs).length;
	      if (numPairsLen >= 9) {
	        this.$studentView.addClass('add_scroll');
	      }
	      this.remainNum.text(numPairsLen);

	      this.undoStack = this.undoManager.createUndoStack(0, {
	        provider: $.proxy(function (done) {
	          done(this.gridMain.getData());
	        }, this),
	        onUpdate: $.proxy(function () {
	          this.updateUndoStyle();
	        }, this),
	        maxLength: 3
	      });
	      this.undoStack.initialize(this.gridMain.getData());
	      this.gridMain.setUndoStack(this.undoStack);

	      if (this.isWriteNP) {
	        this.$js_undo.find('a').addClass('click_disabled');
	        this.$js_redo.find('a').addClass('click_disabled');
	        this.$js_reset.find('a').addClass('click_disabled');
	      }

	      this.isFirstFinish = true;
	      this.startTime = Date.now();
	      this.studentIuputNum = 0;
	      if (this.gridMain.curGridId === 'lookforCoor_drawBlock_scene2') {
	        this.$gridSvgBg.css('background-color', '#d9e3ec');
	      }
	    }
	  }, {
	    key: 'bindEvent',
	    value: function bindEvent() {
	      var that = this;
	      /* gridMain那边触发的change*/
	      $(that.paper).on('change', that._occurChange.bind(that));

	      /* 点击数对弹出键盘*/
	      that.$numpairBox.on('click', '.added_num_state', that._popKeyboard.bind(that));
	      /* 键盘输入*/
	      that.keyboard.on('click touchend', that._keyboardInput.bind(that));
	      that.keyboard.on('touchstart', function (e) {
	        var num = $(e.target).closest('.js_keyboard_num');
	        if (num.length !== 0) {
	          num.addClass('ui_btn_active');
	        }
	      });

	      /* 拖动动物*/
	      that.$zooAnimalList.on('mousedown touchstart', function (e) {
	        that._dragAnimal.bind(that)(e);
	      });

	      /* 撤销*/
	      that.$js_undo.click(function () {
	        if (!$(this).find('a').hasClass('click_disabled')) {
	          that.gridMain.undo();
	        }
	      });
	      /* 恢复*/
	      that.$js_redo.click(function () {
	        if (!$(this).find('a').hasClass('click_disabled')) {
	          that.gridMain.redo();
	        }
	      });
	      /* 重置*/
	      that.$js_reset.on('click', function () {
	        if (!$(this).find('a').hasClass('click_disabled')) {
	          that.gridMain.reset();
	        }
	      });
	      /* 根据更新的点做处理*/
	      $(that.paper).on('updateCoor', function (e, coor) {
	        that.studentIuputNum++;
	        that._judgeCoor(coor);
	        that._countRemainNum();
	        that._updateAnimalsByCoor(coor);
	      });

	      $(that.paper).on('lineFinish', function (e, coor) {
	        that.isFirstFinish = false;
	        that._occurStat();
	      });

	      /* 点击卡牌画线*/
	      that.$numpairBox.on('click', '.np_card', function (e) {
	        that._drawlines(e);
	      });

	      /* 点击其他位置隐藏键盘*/
	      $(document).on('click touchend', that._documentUp.bind(that));
	    }
	  }, {
	    key: '_transformGridId',
	    value: function _transformGridId(id) {
	      if (id.indexOf('writeCoor_geoDot_scene') !== -1 || id.indexOf('writeCoor_star_scene') !== -1) {
	        return 'writeCoor_normal';
	      }
	      if (id.indexOf('lookforCoor_geoDot_scene') !== -1 || id.indexOf('lookforCoor_star_scene') !== -1) {
	        return 'lookforCoor_normal';
	      }
	      if (id.indexOf('lookforCoor_drawBlock_scene1') !== -1 || id.indexOf('lookforCoor_drawBlock_scene2') !== -1) {
	        return 'lookforCoor_drawBlock_1';
	      }
	      if (id.indexOf('lookforCoor_drawBlock_scene3') !== -1 || id.indexOf('lookforCoor_drawBlock_scene4') !== -1) {
	        return 'lookforCoor_drawBlock_2';
	      }
	      return id;
	    }
	  }, {
	    key: '_adjustLayout',
	    value: function _adjustLayout(options) {
	      this.numberPairLeft.addClass(options.widthClass);
	      if (options.hasTipsNum) {
	        this.tipsNum.removeClass('hide_dom');
	      }
	      if (options.isFindAnimals) {
	        this.$zooAnimalList.removeClass('hide_dom');
	      }
	      if (options.isGridColor) {
	        this.$gridSvg.removeClass('change_axis_10').addClass('change_axis_17');
	      }
	    }

	    /* 写数对html模板*/

	  }, {
	    key: '_createWriteNPCoorHtml',
	    value: function _createWriteNPCoorHtml(name) {
	      var markClassName = /[A-Za-z]/.test(name) ? 'np_block_title_en nd_NewRoman_italic change_color' : 'np_block_title change_color';
	      return '<div class="np_scroller_np_block"> ' + '<span class="np_show_wor"></span> ' + '<span class="' + markClassName + '">' + name + '</span> ' + '<span class="np_common_text nd_NewRoman change_color">(</span> ' + '<a data-draw="Y" href="javascript:void(0)" class="added_num_state js_num_text"> ' + '<span class="num_input_text nd_NewRoman change_color change_color_self"></span> </a> ' + '<span class="np_common_text nd_NewRoman change_color">,</span> ' + '<a data-draw="X" href="javascript:void(0)" class="added_num_state js_num_text"> ' + '<span class="num_input_text nd_NewRoman change_color change_color_self"></span> </a> ' + '<span class="np_common_text nd_NewRoman change_color">)</span> ' + '<span class="np_card"></span> ' + '</div>';
	    }

	    /* 找位置html模板*/

	  }, {
	    key: '_createFindNPCoorHtml',
	    value: function _createFindNPCoorHtml(name, x, y, isVisibleX, isVisibleY, isFinish, isCorrect) {
	      var html = '';
	      var markClassName = /[A-Za-z]/.test(name) ? 'np_block_title_en nd_NewRoman_italic change_color' : 'np_block_title change_color';
	      var finishClass = isFinish ? isCorrect ? 'show_right' : 'show_wrong' : '';
	      if (isVisibleX && isVisibleY) {
	        html = '<div class="np_scroller_np_block ' + finishClass + '"> ' + '<span class="np_show_wor"></span> ' + '<span class="' + markClassName + '">' + name + '</span> ' + '<span class="np_common_text nd_NewRoman change_color">(</span> ' + '<span data-draw="Y" class="np_num_text"><span class="text change_color nd_NewRoman">' + x + '</span></span> ' + '<span class="np_common_text nd_NewRoman change_color">,</span> ' + '<span data-draw="X" class="np_num_text"> ' + '<span class="text change_color nd_NewRoman">' + y + '</span> </span> ' + '<span class="np_common_text nd_NewRoman change_color">)</span> ' + '<span class="np_card"></span> ' + '</div>';
	      }
	      return html;
	    }

	    /* gridMain那边触发的change*/

	  }, {
	    key: '_occurChange',
	    value: function _occurChange() {
	      var data = this.gridMain.getData();
	      this.$numpairBox.html(this._updateNumpairBox(data.numPairs));
	      this._handlerAnimalStatus();
	      if (!this.isWriteNP) {
	        this._switchAxisStatus(data.numPairs);
	        this._judgeCorrectCoors();
	        this._countRemainNum();
	      }
	    }

	    /* 切换坐标轴状态*/

	  }, {
	    key: '_switchAxisStatus',
	    value: function _switchAxisStatus(numpairs) {
	      var values = [];
	      for (var i in numpairs) {
	        values.push(numpairs[i]);
	      }
	      this.$gridAxisV.find('.text').removeClass('change_color_red');
	      this.$gridAxisH.find('.text').removeClass('change_color_red');
	      var _iteratorNormalCompletion = true;
	      var _didIteratorError = false;
	      var _iteratorError = undefined;

	      try {
	        for (var _iterator = values[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	          var value = _step.value;

	          if (value.lineX) {
	            this.$gridAxisV.filter('.tick_' + parseInt(value.y)).find('.text').addClass('change_color_red');
	            if (parseInt(value.y) === 0) {
	              this.$gridAxisH.filter('.tick_0').find('.text').addClass('change_color_red');
	              this.isZoreX = true;
	            } else {
	              this.isZoreX = false;
	            }
	          }
	          if (value.lineY) {
	            this.$gridAxisH.filter('.tick_' + parseInt(value.x)).find('.text').addClass('change_color_red');
	          }
	          if (value.lineX || value.lineY) break;
	        }
	      } catch (err) {
	        _didIteratorError = true;
	        _iteratorError = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion && _iterator.return) {
	            _iterator.return();
	          }
	        } finally {
	          if (_didIteratorError) {
	            throw _iteratorError;
	          }
	        }
	      }
	    }
	  }, {
	    key: '_updateNumpairBox',


	    /* 更新右边的数对列表*/
	    value: function _updateNumpairBox() {
	      var numpairs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	      var liEle = '';
	      var keys = Object.keys(numpairs);
	      if (this.gridMain.curGridId === 'lookforCoor_animateDot_scene1') {
	        keys = this._resort(keys, numpairs);
	      }
	      var _iteratorNormalCompletion2 = true;
	      var _didIteratorError2 = false;
	      var _iteratorError2 = undefined;

	      try {
	        for (var _iterator2 = keys[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	          var key = _step2.value;

	          // if(numpairs[key].isVisible){
	          if (this.isWriteNP) {
	            liEle += this._createWriteNPCoorHtml(numpairs[key].mark);
	          } else {
	            liEle += this._createFindNPCoorHtml(numpairs[key].mark, numpairs[key].x, numpairs[key].y, numpairs[key].isVisibleX, numpairs[key].isVisibleY, numpairs[key].isFinish, numpairs[key].isCorrect);
	          }
	          // }
	        }
	      } catch (err) {
	        _didIteratorError2 = true;
	        _iteratorError2 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion2 && _iterator2.return) {
	            _iterator2.return();
	          }
	        } finally {
	          if (_didIteratorError2) {
	            throw _iteratorError2;
	          }
	        }
	      }

	      return liEle;
	    }
	  }, {
	    key: '_resort',
	    value: function _resort(keys, numpairs) {
	      var subKeys = keys.slice(3, keys.length);
	      subKeys = subKeys.sort(compare);

	      function compare(a, b) {
	        return parseInt(numpairs[a].mark.charCodeAt(0)) - parseInt(numpairs[b].mark.charCodeAt(0));
	      }

	      for (var i = 0; i < subKeys.length; i++) {
	        keys[i + 3] = subKeys[i];
	      }

	      return keys;
	    }

	    /* 网格画线*/

	  }, {
	    key: '_drawlines',
	    value: function _drawlines(e) {
	      var data = this.gridMain.getData();
	      var $target = $(e.target);
	      $target.addClass('ui_btn_active');
	      setTimeout(function () {
	        $target.removeClass('ui_btn_active');
	      }, 600);
	      var name = $target.siblings('.np_block_title, .np_block_title_en').text();
	      var spans = $target.closest('.np_scroller_np_block').find('.js_num_text');
	      var x = parseInt(spans.eq(0).text());
	      var y = parseInt(spans.eq(1).text());
	      var keys = Object.keys(data.numPairs);
	      var corrX = void 0;
	      var corrY = void 0;
	      var _iteratorNormalCompletion3 = true;
	      var _didIteratorError3 = false;
	      var _iteratorError3 = undefined;

	      try {
	        for (var _iterator3 = keys[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
	          var key = _step3.value;

	          if (data.numPairs[key].mark === name) {
	            var coor = /_(.+)_(.+)/.exec(key);
	            corrX = parseInt(coor[1]);
	            corrY = parseInt(coor[2]);
	          }
	        }
	        // if (x !== corrX) {
	        //     this.gridMain['drawY']({x: corrX, y: corrY}, true, name, true);
	        //     this._lighthighAxis('Y', {x: corrX, y: corrY});
	        // }
	        // if (y !== corrY) {
	        //     this.gridMain['drawX']({x: corrX, y: corrY}, true, name);
	        //     this._lighthighAxis('X', {x: corrX, y: corrY});
	        // }
	        /* 画线 显示标红字母和画线同步*/
	      } catch (err) {
	        _didIteratorError3 = true;
	        _iteratorError3 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion3 && _iterator3.return) {
	            _iterator3.return();
	          }
	        } finally {
	          if (_didIteratorError3) {
	            throw _iteratorError3;
	          }
	        }
	      }

	      var coorType = void 0,
	          coorCorr = { x: corrX, y: corrY };
	      if (x !== corrX) {
	        coorType = 'Y';
	        this._showAndDrawSync(coorType, name, coorCorr);
	      }
	      if (y !== corrY) {
	        coorType = 'X';
	        this._showAndDrawSync(coorType, name, coorCorr);
	      }
	    }

	    /* 画线 显示标红字母和画线同步*/

	  }, {
	    key: '_showAndDrawSync',
	    value: function _showAndDrawSync(coorType, name, coor) {
	      var _this = this;

	      if (this.isWriteNP) {
	        /* 写数对先画线后标红坐标*/
	        var res = this.gridMain['draw' + coorType](coor, true, name);
	        if (res && typeof res.then === 'function' && typeof res.done === 'function') {
	          res.done(function () {
	            _this._lighthighAxis(coorType, coor);
	          });
	        }
	      } else {
	        if (!this['redMark' + coorType]) {
	          var defer = $.Deferred();
	          this['redMark' + coorType] = defer;
	          defer.resolve();
	        }
	        /* 先标红坐标后画线*/
	        this['redMark' + coorType] = this['redMark' + coorType].then(function () {
	          _this._lighthighAxis(coorType, coor);
	          var defer = $.Deferred();
	          _this.gridMain['draw' + coorType](coor, true, name).done(function () {
	            return defer.resolve();
	          });
	          return defer.promise();
	        });
	      }
	    }

	    /* 画辅助线时坐标轴对应数值亮起*/

	  }, {
	    key: '_lighthighAxis',
	    value: function _lighthighAxis(coorType, coor) {
	      var numpairs = this.gridMain.getData().numPairs;
	      if (coorType == 'X') {
	        /* 判断此时Y线是否是同一个坐标的 不是就reset文字*/
	        if (!isNaN(parseInt(coor.x))) {
	          var key = 'coor_' + coor.x + '_' + coor.y;
	          if (!numpairs[key].lineY) {
	            this.$gridAxisH.find('.text').removeClass('change_color_red');
	          }
	        } else {
	          this.$gridAxisH.find('.text').removeClass('change_color_red');
	        }
	        this.$gridAxisV.find('.text').removeClass('change_color_red');
	        this.$gridAxisV.filter('.tick_' + parseInt(coor.y)).find('.text').addClass('change_color_red');
	        if (coor.y === 0) {
	          this.$gridAxisH.filter('.tick_0').find('.text').addClass('change_color_red');
	          this.isZoreX = true;
	        } else {
	          this.isZoreX = false;
	        }
	      } else {
	        /* 判断此时X线是否是同一个坐标的 不是就reset文字*/
	        if (!isNaN(parseInt(coor.y))) {
	          var _key = 'coor_' + coor.x + '_' + coor.y;
	          if (!numpairs[_key].lineX) {
	            this.$gridAxisV.find('.text').removeClass('change_color_red');
	            this.isZoreX = false;
	          }
	        } else {
	          this.$gridAxisV.find('.text').removeClass('change_color_red');
	          this.isZoreX = false;
	        }
	        this.$gridAxisH.find('.text').removeClass('change_color_red');
	        this.$gridAxisH.filter('.tick_' + parseInt(coor.x)).find('.text').addClass('change_color_red');
	        if (this.isZoreX) {
	          this.$gridAxisH.filter('.tick_0').find('.text').addClass('change_color_red');
	        } else if (coor.x !== 0 && !this.isZoreX) {
	          this.$gridAxisH.filter('.tick_0').find('.text').removeClass('change_color_red');
	        }
	      }
	    }
	  }, {
	    key: '_updateAnimalsByCoor',


	    /* 根据更新的点将找位置动物园置灰*/
	    value: function _updateAnimalsByCoor(coor) {
	      var x = parseInt(coor.x);
	      var y = parseInt(coor.y);
	      if (x === 5 && y === 8) {
	        this.$zooAnimals.eq(0).addClass('click_disabled');
	      } else if (x === 4 && y === 6) {
	        this.$zooAnimals.eq(1).addClass('click_disabled');
	      } else if (x === 2 && y === 5) {
	        this.$zooAnimals.eq(2).addClass('click_disabled');
	      }
	    }

	    /* 撤销还原后的更新动作*/

	  }, {
	    key: 'updateUndoStyle',
	    value: function updateUndoStyle() {
	      if (this.undoStack && !this.isWriteNP) {
	        if (this.undoStack.canUndo()) {
	          this.$js_undo.find('.tool_operate_bar').removeClass('click_disabled');
	        } else {
	          this.$js_undo.find('.tool_operate_bar').addClass('click_disabled');
	        }
	        if (this.undoStack.canRedo()) {
	          this.$js_redo.find('.tool_operate_bar').removeClass('click_disabled');
	        } else {
	          this.$js_redo.find('.tool_operate_bar').addClass('click_disabled');
	        }
	      }
	    }

	    /* 点击数对弹出键盘*/

	  }, {
	    key: '_popKeyboard',
	    value: function _popKeyboard(e) {
	      e.stopPropagation();
	      var $target = $(e.target);
	      $target = $target.closest('.added_num_state');
	      this.$studentView.find('.added_num_state').removeClass('ui_open');
	      $target.addClass('ui_open');
	      this.keyboard.removeClass('hide_dom');
	      var keyboardW = this.keyboard.width();
	      var left = $target.offset().left - this.numberPairRight.offset().left - keyboardW + $target.outerWidth(true);
	      var top = $target.offset().top - this.numberPairRight.offset().top + $target.outerHeight();
	      if (top > this.numberPairRightH * 0.75) {
	        var keyboardH = this.keyboard.height();
	        top = $target.offset().top - this.numberPairRight.offset().top - keyboardH;
	      }
	      this.isEditing = true;
	      this.keyboard.css({
	        left: left,
	        top: top
	      });
	      this.keyboard.$linkElem = $target;
	    }

	    /* 点击键盘输入数值*/

	  }, {
	    key: '_keyboardInput',
	    value: function _keyboardInput(e) {
	      e.stopPropagation();
	      e.preventDefault();
	      if (this.isEditing) {
	        var $target = $(e.target);
	        $target = $target.closest('.js_keyboard_num');
	        if ($target.length == 0 || $target.hasClass('click_disabled')) return;
	        this.keyboard.$linkElem.find('span').text($target.text());
	        this.keyboard.$linkElem.removeClass('ui_open');

	        /* 更新数对*/
	        var otherAEle = this.keyboard.$linkElem.siblings('.js_num_text');
	        var thisType = this.keyboard.$linkElem.attr('data-draw').toLowerCase();
	        thisType = thisType === 'x' ? 'y' : 'x';
	        var thisValue = $.trim($target.text());
	        var otherValue = $.trim(otherAEle.find('span').text());
	        var name = this.keyboard.$linkElem.siblings('.np_block_title, .np_block_title_en').text();
	        this.gridMain.updateNumPairsFnOutSide(name, thisType, thisValue);
	        this.studentIuputNum++;
	        if (otherValue) {
	          this._judegInputNumpair(name, this.keyboard.$linkElem.parents('.np_scroller_np_block'));
	        }
	        $target.removeClass('ui_btn_active');
	      }
	      this.keyboard.addClass('hide_dom');
	    }

	    /* 判断输入的数对是否正确*/

	  }, {
	    key: '_judegInputNumpair',
	    value: function _judegInputNumpair(name, elem) {
	      var data = this.gridMain.getData();
	      var keys = Object.keys(data.numPairs);
	      var _iteratorNormalCompletion4 = true;
	      var _didIteratorError4 = false;
	      var _iteratorError4 = undefined;

	      try {
	        for (var _iterator4 = keys[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
	          var key = _step4.value;

	          if (data.numPairs[key].mark === name) {
	            var coor = /_(.+)_(.+)/.exec(key);
	            var x = parseInt(coor[1]);
	            var y = parseInt(coor[2]);
	            if (x === parseInt(data.numPairs[key].x) && y === parseInt(data.numPairs[key].y)) {
	              elem.removeClass('show_wrong').addClass('show_right');
	              if (data.numPairs[key].type === 'img') {
	                if (!data.numPairs[key].oldImgSrc) {
	                  data.numPairs[key].oldImgSrc = data.numPairs[key].imgSrc;
	                }
	                var imgSrc = data.numPairs[key].oldImgSrc ? data.numPairs[key].oldImgSrc : data.numPairs[key].imgSrc;
	                data.numPairs[key].imgSrc = imgSrc.substr(0, imgSrc.indexOf('.png')) + '_right.png';
	                data.coors[key].imgSrc = data.numPairs[key].imgSrc;
	              } else {
	                data.coors[key].isTrue = true;
	                data.coors[key].fill = _style.gridEleStyle.fontCorrect.fill;
	              }
	            } else {
	              elem.removeClass('show_right').addClass('show_wrong');
	              elem.find('.added_num_state').removeClass('right');
	              if (x === parseInt(data.numPairs[key].x)) {
	                elem.find('.added_num_state').eq(0).addClass('right');
	              }
	              if (y === parseInt(data.numPairs[key].y)) {
	                elem.find('.added_num_state').eq(1).addClass('right');
	              }
	              if (data.numPairs[key].type === 'img') {
	                if (!data.numPairs[key].oldImgSrc) {
	                  data.numPairs[key].oldImgSrc = data.numPairs[key].imgSrc;
	                }
	                var _imgSrc = data.numPairs[key].oldImgSrc ? data.numPairs[key].oldImgSrc : data.numPairs[key].imgSrc;
	                data.numPairs[key].imgSrc = _imgSrc.substr(0, _imgSrc.indexOf('.png')) + '_wrong.png';
	                data.coors[key].imgSrc = data.numPairs[key].imgSrc;
	              } else {
	                data.coors[key].isTrue = false;
	                data.coors[key].fill = _style.gridEleStyle.fontError.fill;
	              }
	            }
	          }
	        }
	      } catch (err) {
	        _didIteratorError4 = true;
	        _iteratorError4 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion4 && _iterator4.return) {
	            _iterator4.return();
	          }
	        } finally {
	          if (_didIteratorError4) {
	            throw _iteratorError4;
	          }
	        }
	      }

	      this.gridMain.setData(data);
	      if (this.isFirstFinish) {
	        this._judegAllInput();
	      }
	    }
	  }, {
	    key: '_judegAllInput',
	    value: function _judegAllInput() {
	      var isAllRight = true;
	      var $numpairsDom = this.$numpairBox.find('.np_scroller_np_block');
	      $numpairsDom.each(function () {
	        if (!$(this).hasClass('show_right')) {
	          isAllRight = false;
	        }
	      });
	      if (isAllRight) {
	        this.isFirstFinish = false;
	        this._occurStat();
	      }
	    }
	  }, {
	    key: '_occurStat',
	    value: function _occurStat() {
	      var _this2 = this;

	      var finishTime = Date.now();
	      var duration = finishTime - this.startTime;
	      var data = this.gridMain.getData();
	      var answerNum = Object.keys(data.numPairs).length;
	      answerNum = this.isWriteNP ? answerNum * 2 : answerNum;
	      var correctRate = Math.round(answerNum / this.studentIuputNum * 100);
	      correctRate < 50 && this.finishToast.addClass('red');
	      var time = _Utils.utils.MillisecondToTime(duration);
	      this.finishToast.removeClass('hide_dom').addClass('slideInDown');
	      setTimeout(function () {
	        _this2.finishToast.removeClass('slideInDown').addClass('slideOutUp');
	      }, 5000);
	      this.rightRate.text(correctRate);
	      if (time.minute === null) {
	        this.minuteTxt.hide();
	        this.secondTxt.text(Math.round(time.second));
	      } else {
	        this.minuteTxt.eq(0).text(time.minute);
	        this.secondTxt.text(Math.round(time.second));
	      }
	    }

	    /* 修改剩余可点击数*/

	  }, {
	    key: '_countRemainNum',
	    value: function _countRemainNum() {
	      var data = this.gridMain.getData();
	      var num = Object.keys(data.numPairs).length - Object.keys(data.coors).length;
	      this.tipsNumBox.removeClass('no_more');
	      this.remainNum.text(num);
	      if (num === 0) {
	        this.tipsNumBox.addClass('no_more');
	        this.$zooAnimals.addClass('click_disabled');
	        this._judegCoors();
	      }
	    }

	    /* 完成后判断正误*/

	  }, {
	    key: '_judegCoors',
	    value: function _judegCoors() {
	      var $numpairsDom = this.$numpairBox.find('.np_scroller_np_block');
	      var isAllRight = true;
	      $numpairsDom.each(function () {
	        if (!$(this).hasClass('show_right')) {
	          $(this).addClass('show_wrong');
	          isAllRight = false;
	        }
	      });
	      if (isAllRight && this.isFirstFinish) {
	        this.isFirstFinish = false;
	        if (!this.gridMain.curGridId.match('lookforCoor_geoDot') && !this.gridMain.curGridId.match('lookforCoor_star')) {
	          this._occurStat();
	        }
	      }
	    }
	  }, {
	    key: '_judgeSpecialCoors',
	    value: function _judgeSpecialCoors(coor) {
	      var data = this.gridMain.getData();
	      var key = 'coor_' + coor.x + '_' + coor.y;
	      if (this.gridMain.curGridId !== 'lookforCoor_animateDot_scene1') {
	        return true;
	      }
	      if (coor.x == 5 && coor.y == 8) {
	        return data.coors[key].mark === this.i18nData.numpair_bridPark;
	      } else if (coor.x == 4 && coor.y == 6) {
	        return data.coors[key].mark === this.i18nData.numpair_gorillaHall;
	      } else if (coor.x == 2 && coor.y == 5) {
	        return data.coors[key].mark === this.i18nData.numpair_LigerHill;
	      }
	      return !data.coors[key].mark;
	    }

	    /* 根据点判断正确的所有数对坐标*/

	  }, {
	    key: '_judgeCorrectCoors',
	    value: function _judgeCorrectCoors() {
	      var that = this;
	      var $numpairsDom = this.$numpairBox.find('.np_scroller_np_block');
	      var data = this.gridMain.getData();
	      var keys = Object.keys(data.coors);
	      var _iteratorNormalCompletion5 = true;
	      var _didIteratorError5 = false;
	      var _iteratorError5 = undefined;

	      try {
	        var _loop = function _loop() {
	          var key = _step5.value;

	          $numpairsDom.each(function () {
	            var $numTxt = $(this).find('.np_num_text');
	            var x = parseInt($numTxt.eq(0).text());
	            var y = parseInt($numTxt.eq(1).text());
	            if (data.coors[key].x === x && data.coors[key].y === y && that._judgeSpecialCoors(data.coors[key])) {
	              $(this).addClass('show_right');
	              return false;
	            }
	          });
	        };

	        for (var _iterator5 = keys[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
	          _loop();
	        }
	      } catch (err) {
	        _didIteratorError5 = true;
	        _iteratorError5 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion5 && _iterator5.return) {
	            _iterator5.return();
	          }
	        } finally {
	          if (_didIteratorError5) {
	            throw _iteratorError5;
	          }
	        }
	      }
	    }

	    /* 根据点判断正确的数对坐标*/

	  }, {
	    key: '_judgeCoor',
	    value: function _judgeCoor(coor) {
	      var that = this;
	      var $numpairsDom = this.$numpairBox.find('.np_scroller_np_block');
	      $numpairsDom.each(function () {
	        var $numTxt = $(this).find('.np_num_text');
	        var x = parseInt($numTxt.eq(0).text());
	        var y = parseInt($numTxt.eq(1).text());
	        if (coor.x === x && coor.y === y && that._judgeSpecialCoors(coor)) {
	          $(this).addClass('show_right');
	          return false;
	        }
	      });
	    }

	    /* 处理动物园置灰效果*/

	  }, {
	    key: '_handlerAnimalStatus',
	    value: function _handlerAnimalStatus() {
	      var animalArr = [this.i18nData.numpair_bridPark, this.i18nData.numpair_gorillaHall, this.i18nData.numpair_LigerHill];
	      if (this.gridMain.curGridId == 'lookforCoor_animateDot_scene1') {
	        var data = this.gridMain.getData();
	        this.$zooAnimals.removeClass('click_disabled');
	        var coors = data.coors;
	        for (var i in coors) {
	          var index = animalArr.indexOf(coors[i].mark);
	          if (index != -1) {
	            this.$zooAnimals.eq(index).addClass('click_disabled');
	          } else {
	            this.$zooAnimals.eq(index).removeClass('click_disabled');
	          }
	        }
	      }
	    }

	    /* 动物拖动*/

	  }, {
	    key: '_dragAnimal',
	    value: function _dragAnimal(e) {
	      /* 拖动中的动物*/
	      var moveAnimal = void 0;
	      /* 拖动中的动物的序号*/
	      var animalIndex = 0;
	      var that = this;
	      this.isAnimalDown = true;
	      e = e.originalEvent;
	      e = e.touches ? e.touches[0] : e;
	      var $target = $(e.target).closest('.js_zoo_animal');
	      if ($target.length == 0 || $target.hasClass('click_disabled')) return;
	      animalIndex = this.$zooAnimals.index($target);
	      moveAnimal = $target.find('.icon');
	      var parentOffsetX = $target.parent().offset().left + $target.position().left;
	      var parentOffsetY = $target.parent().offset().top + $target.position().top;
	      var moveAnimalW = moveAnimal.width();
	      var moveAnimalH = moveAnimal.height();
	      moveAnimal.removeClass('hide_dom').css({
	        position: 'absolute',
	        left: e.pageX - parentOffsetX - moveAnimalW / 2,
	        top: e.pageY - parentOffsetY - moveAnimalH / 2
	      });
	      $(document).on('mousemove touchmove', animalMove);
	      $(document).on('mouseup touchend', animalLay);

	      function animalMove(e) {
	        if (that.isAnimalDown) {
	          e = e.originalEvent;
	          e = e.touches ? e.touches[0] : e;
	          var x = e.pageX;
	          var y = e.pageY;
	          moveAnimal.css({
	            left: x - parentOffsetX - moveAnimalW / 2,
	            top: y - parentOffsetY - moveAnimalH / 2
	          });
	        }
	      }

	      function animalLay(e) {
	        if (that.isAnimalDown) {
	          e = e.originalEvent;
	          e = e.changedTouches ? e.changedTouches[0] : e;
	          var pageX = e.pageX;
	          var pageY = e.pageY;
	          var point = _Utils.utils.reportMouseCoordinates(that.gridMain.svg, pageX, pageY, that.gridMain.transGroup);
	          point.x = Math.round(point.x);
	          point.y = Math.round(point.y);
	          var fakeCoor = _Utils.utils.chFakeCoor(point);
	          var x = fakeCoor.x;
	          var y = fakeCoor.y;
	          var data = that.gridMain.getData();
	          var existedCoors = that.gridMain.getData().coors;
	          var isAdd = true;
	          for (var i in existedCoors) {
	            if (existedCoors[i].x == x && existedCoors[i].y == y) {
	              isAdd = false;
	            }
	          }
	          if (point.x <= 10 && point.x >= 0 && point.y <= 0 && point.y >= -10 && isAdd) {
	            that.gridMain.doDetail(point);
	            var animalInfo = that.animalInfos[animalIndex];
	            animalInfo.x = x;
	            animalInfo.y = y;
	            data.coors['coor_' + x + '_' + y] = animalInfo;
	            that.gridMain.setData(data);
	            that.undoStack.save();
	            $(that.paper).trigger('change');
	            moveAnimal.parent().addClass('click_disabled');
	          }
	          moveAnimal.addClass('hide_dom');
	        }
	        that.isAnimalDown = false;
	        $(document).off('mousemove touchmove', animalMove);
	        $(document).off('mouseup touchend', animalLay);
	      }
	    }

	    /* document的up事件*/

	  }, {
	    key: '_documentUp',
	    value: function _documentUp() {
	      if (this.isEditing) {
	        this.keyboard.addClass('hide_dom');
	        this.keyboard.$linkElem.removeClass('ui_open');
	      }
	      this.isEditing = false;
	    }
	  }]);

	  return SEventMain;
	}();

/***/ })
/******/ ]);]]></presenter><resources><file src="./resources/wood/images/add_coordinate_btn_img_active.png"/><file src="./resources/wood/images/add_coordinate_btn_img_disabled.png"/><file src="./resources/wood/images/add_coordinate_btn_img.png"/><file src="./resources/wood/images/bg_1.png"/><file src="./resources/wood/images/bg_10.png"/><file src="./resources/wood/images/bg_11.png"/><file src="./resources/wood/images/bg_12.png"/><file src="./resources/wood/images/bg_13.png"/><file src="./resources/wood/images/bg_14.png"/><file src="./resources/wood/images/bg_15.png"/><file src="./resources/wood/images/bg_16.png"/><file src="./resources/wood/images/bg_2.png"/><file src="./resources/wood/images/bg_3.png"/><file src="./resources/wood/images/bg_4.png"/><file src="./resources/wood/images/bg_5.png"/><file src="./resources/wood/images/bg_6.png"/><file src="./resources/wood/images/bg_7.png"/><file src="./resources/wood/images/bg_8.png"/><file src="./resources/wood/images/bg_9.png"/><file src="./resources/wood/images/icon_animal_1_dis.png"/><file src="./resources/wood/images/icon_animal_1.png"/><file src="./resources/wood/images/icon_animal_2_dis.png"/><file src="./resources/wood/images/icon_animal_2.png"/><file src="./resources/wood/images/icon_animal_3_dis.png"/><file src="./resources/wood/images/icon_animal_3.png"/><file src="./resources/wood/images/icon_animal_4_dis.png"/><file src="./resources/wood/images/icon_animal_4.png"/><file src="./resources/wood/images/icon_animal_5_dis.png"/><file src="./resources/wood/images/icon_animal_5.png"/><file src="./resources/wood/images/icon_animal_6_dis.png"/><file src="./resources/wood/images/icon_animal_6.png"/><file src="./resources/wood/images/icon_animal_7_dis.png"/><file src="./resources/wood/images/icon_animal_7.png"/><file src="./resources/wood/images/icon_ape.png"/><file src="./resources/wood/images/icon_back.png"/><file src="./resources/wood/images/icon_bg.png"/><file src="./resources/wood/images/icon_card_st.png"/><file src="./resources/wood/images/icon_card.png"/><file src="./resources/wood/images/icon_dolphin_right.png"/><file src="./resources/wood/images/icon_dolphin_wrong.png"/><file src="./resources/wood/images/icon_dolphin.png"/><file src="./resources/wood/images/icon_down.png"/><file src="./resources/wood/images/icon_eagle.png"/><file src="./resources/wood/images/icon_elephant_right.png"/><file src="./resources/wood/images/icon_elephant_wrong.png"/><file src="./resources/wood/images/icon_elephant.png"/><file src="./resources/wood/images/icon_gate_right.png"/><file src="./resources/wood/images/icon_gate_wrong.png"/><file src="./resources/wood/images/icon_gate.png"/><file src="./resources/wood/images/icon_gridcolor.png"/><file src="./resources/wood/images/icon_item1.png"/><file src="./resources/wood/images/icon_item10.png"/><file src="./resources/wood/images/icon_item11.png"/><file src="./resources/wood/images/icon_item12.png"/><file src="./resources/wood/images/icon_item2.png"/><file src="./resources/wood/images/icon_item3.png"/><file src="./resources/wood/images/icon_item4.png"/><file src="./resources/wood/images/icon_item5.png"/><file src="./resources/wood/images/icon_item6.png"/><file src="./resources/wood/images/icon_item7.png"/><file src="./resources/wood/images/icon_item8.png"/><file src="./resources/wood/images/icon_item9.png"/><file src="./resources/wood/images/icon_menu.png"/><file src="./resources/wood/images/icon_menu4.png"/><file src="./resources/wood/images/icon_monkey_right.png"/><file src="./resources/wood/images/icon_monkey_wrong.png"/><file src="./resources/wood/images/icon_monkey.png"/><file src="./resources/wood/images/icon_panda_right.png"/><file src="./resources/wood/images/icon_panda_wrong.png"/><file src="./resources/wood/images/icon_panda.png"/><file src="./resources/wood/images/icon_right_st.png"/><file src="./resources/wood/images/icon_right.png"/><file src="./resources/wood/images/icon_star_five.png"/><file src="./resources/wood/images/icon_star_four.png"/><file src="./resources/wood/images/icon_tiger.png"/><file src="./resources/wood/images/icon_tool.png"/><file src="./resources/wood/images/icon_up.png"/><file src="./resources/wood/images/icon_wrong_st.png"/><file src="./resources/wood/images/icon_wrong.png"/><file src="./resources/wood/images/sub_coordinate_btn_img_active.png"/><file src="./resources/wood/images/sub_coordinate_btn_img_disabled.png"/><file src="./resources/wood/images/sub_coordinate_btn_img.png"/><file src="./resources/wood/images/vertical-thumb.png"/></resources></addon>