<?xml version='1.0' encoding='UTF-8'?>
<addon id="templateid"><properties/><dependencies><jsDependency><javaScript name="tools_common" version="1.1.0"/><javaScript name="threejs" version="73.1"/><javaScript name="tweenjs" version="0.6.2"/></jsDependency></dependencies><css><![CDATA[.addon_CylinderVolumeDerived .exam_skin_wood .cylindervolumederived_wrapper .com_btns{min-width:6.25em;height:2.5em;line-height:2.5em}.addon_CylinderVolumeDerived .exam_skin_wood .cylindervolumederived_wrapper .com_btns.btns-primary.click_disabled{background:-webkit-linear-gradient(top,#dae0e5,#e7eef4);background:linear-gradient(180deg,#dae0e5 0,#e7eef4)}.addon_CylinderVolumeDerived .exam_skin_wood .cylindervolumederived_wrapper .com_btns .btns-primary-txt{font-size:1.25em}.addon_CylinderVolumeDerived .exam_skin_wood .cylindervolumederived_wrapper .hide_dom{display:none}.addon_CylinderVolumeDerived .exam_skin_wood .cylindervolumederived_wrapper .hide_visibility{visibility:hidden}.addon_CylinderVolumeDerived .exam_skin_wood .cylindervolumederived_wrapper .tool_operate_img{display:block;margin:.54167em auto 0;width:3.33333em;height:3.16667em;background:url(resources/wood/images/cylinder_tool_operate_sprites.png) 0 -3.58333em no-repeat;background-size:auto 13.91667em}.addon_CylinderVolumeDerived .exam_skin_wood .cylindervolumederived_wrapper .tool_operate_text{padding:0 1em;text-align:center;color:#292525;display:block;font-size:1.16667em}.addon_CylinderVolumeDerived .exam_skin_wood .cylindervolumederived_wrapper{width:100%;height:100%;position:relative;padding:3.83333em 0 7em 5.33333em;background:#bfd3e2}.addon_CylinderVolumeDerived .exam_skin_wood .cylindervolumederived_inner{width:100%;height:100%;overflow:hidden;position:relative;background:#bfd3e2}.addon_CylinderVolumeDerived .exam_skin_wood .cylindervolumederived_main{width:100%;height:100%;padding-bottom:3.8em;text-align:center}.addon_CylinderVolumeDerived .exam_skin_wood .cylindervolumederived_main:after{content:"";display:inline-block;width:0;height:100%;vertical-align:middle}.addon_CylinderVolumeDerived .exam_skin_wood .cylinder_open{display:inline-block;vertical-align:middle;position:relative;min-height:26.08333em;min-width:37em}.addon_CylinderVolumeDerived .exam_skin_wood .cylinder_open .cp_bottom_area,.addon_CylinderVolumeDerived .exam_skin_wood .cylinder_open .cp_top_area{position:absolute}.addon_CylinderVolumeDerived .exam_skin_wood .cv_bottom_area,.addon_CylinderVolumeDerived .exam_skin_wood .cv_top_area,.addon_CylinderVolumeDerived .exam_skin_wood .text_with_arrow1,.addon_CylinderVolumeDerived .exam_skin_wood .text_with_arrow2{position:relative}.addon_CylinderVolumeDerived .exam_skin_wood .cylinder_open .cp_top_area{right:0;top:0}.addon_CylinderVolumeDerived .exam_skin_wood .cylinder_open .cp_bottom_area{bottom:0;left:0}.addon_CylinderVolumeDerived .exam_skin_wood .cv_top_area{height:28em}.addon_CylinderVolumeDerived .exam_skin_wood .cv_top_area .cv_left_svg,.addon_CylinderVolumeDerived .exam_skin_wood .cv_top_area .cv_right_svg{display:inline-block}.addon_CylinderVolumeDerived .exam_skin_wood .cv_bottom_area{white-space:nowrap;margin-top:-7.83333em;color:#333;text-align:left;width:50%;padding-left:4.16667em}.addon_CylinderVolumeDerived .exam_skin_wood .cv_bottom_area div{vertical-align:top}.addon_CylinderVolumeDerived .exam_skin_wood .cv_bottom_area .cv_column2_text{text-align:left}.addon_CylinderVolumeDerived .exam_skin_wood .cv_bottom_area .cv_column2_text .line_two{margin-top:.25em}.addon_CylinderVolumeDerived .exam_skin_wood .cv_bottom_area .cv_column3_text{padding-top:2.41667em}.addon_CylinderVolumeDerived .exam_skin_wood .text_with_arrow1:after,.addon_CylinderVolumeDerived .exam_skin_wood .text_with_arrow2:after{content:"";position:absolute;display:block;right:0;bottom:0;margin:auto}.addon_CylinderVolumeDerived .exam_skin_wood .cv_bottom_area .cv_column4_text{padding-top:4.91667em}.addon_CylinderVolumeDerived .exam_skin_wood .cv_bottom_area .cv_column4_text .paragraph_indent{text-indent:4.75em}.addon_CylinderVolumeDerived .exam_skin_wood .cv_bottom_area .cv_column4_text:after{content:"";position:absolute;bottom:-.41667em;display:block;width:4em;height:3.25em;background:url(resources/wood/images/icon_arrow.png) no-repeat;background-size:100% 100%}.addon_CylinderVolumeDerived .exam_skin_wood .cv_bottom_area .cv_column4_text .text_with_formula{position:relative}.addon_CylinderVolumeDerived .exam_skin_wood .cv_bottom_area .cv_column4_text .text_with_formula:after{content:"";position:absolute;left:.91667em;top:.16667em;display:block;width:2.70833em;height:1em;background:url(resources/wood/images/icon_formula.png) no-repeat;background-size:100% 100%}.addon_CylinderVolumeDerived .exam_skin_wood .cvd_action_bar{position:absolute;left:0;bottom:0;width:100%;padding:1em 2.08333em;text-align:center;margin-left:-3.3333em}.addon_CylinderVolumeDerived .exam_skin_wood .cvd_action_bar .action_button_list{display:inline-block;height:100%;min-width:22.41667em;white-space:nowrap}.addon_CylinderVolumeDerived .exam_skin_wood .cylindervolumederived_foot{position:absolute;left:0;bottom:0;height:5.75em;width:100%;background:#cfdee9;padding:0 4em;text-align:center;overflow:hidden}.addon_CylinderVolumeDerived .exam_skin_wood .cylinder_size_list{display:inline-block;height:100%;min-width:33.33333em;padding-top:.04167em}.addon_CylinderVolumeDerived .exam_skin_wood .cylinder_size_list a{display:inline-block;min-width:5.41667em;height:5.83333em;padding-top:.16667em}.addon_CylinderVolumeDerived .exam_skin_wood .cylinder_size_list a.ui_btn_active,.addon_CylinderVolumeDerived .exam_skin_wood .cylinder_size_list a:active{background:url(resources/wood/images/bg_foot_item.png) no-repeat;background-size:100% 100%}.addon_CylinderVolumeDerived .exam_skin_wood .cylinder_size_list a.ui_btn_active .tool_operate_img,.addon_CylinderVolumeDerived .exam_skin_wood .cylinder_size_list a:active .tool_operate_img{background-position:0 -10.75em}.addon_CylinderVolumeDerived .exam_skin_wood .cylinder_size_list a.ui_btn_active.item_1 .tool_operate_img,.addon_CylinderVolumeDerived .exam_skin_wood .cylinder_size_list a:active.item_1 .tool_operate_img{background-position:0 -7.16667em}.addon_CylinderVolumeDerived .exam_skin_wood .cylinder_size_list .item_1 .tool_operate_img{background-position:0 0}.addon_CylinderVolumeDerived .exam_skin_wood .padding-bottom-big{padding-bottom:5.33333em!important}.addon_CylinderVolumeDerived .exam_skin_wood .text_blue{color:#1b5db7}.addon_CylinderVolumeDerived .exam_skin_wood .text_red{color:#e1492b}.addon_CylinderVolumeDerived .exam_skin_wood .text_95{font-size:3.95833em}.addon_CylinderVolumeDerived .exam_skin_wood .text_42{font-size:1.75em}.addon_CylinderVolumeDerived .exam_skin_wood .text_72{font-size:3em}.addon_CylinderVolumeDerived .exam_skin_wood .text_82{font-size:3.41667em}.addon_CylinderVolumeDerived .exam_skin_wood .text_68{font-size:2.83333em}.addon_CylinderVolumeDerived .exam_skin_wood .text_62{font-size:2.58333em}.addon_CylinderVolumeDerived .exam_skin_wood .text_52{font-size:2.16667em}.addon_CylinderVolumeDerived .exam_skin_wood .text_48{font-size:2em}.addon_CylinderVolumeDerived .exam_skin_wood .text_38{font-size:1.58333em}.addon_CylinderVolumeDerived .exam_skin_wood .text_58{font-size:2.41667em}.addon_CylinderVolumeDerived .exam_skin_wood .text_top{vertical-align:top;line-height:1.66667em}.addon_CylinderVolumeDerived .exam_skin_wood .hightlight_box{display:inline-block;cursor:pointer}.addon_CylinderVolumeDerived .exam_skin_wood .hightlight_box.active b,.addon_CylinderVolumeDerived .exam_skin_wood .hightlight_box:active b{color:#e1492b}.addon_CylinderVolumeDerived .exam_skin_wood .small_top{font-size:.50526em}.addon_CylinderVolumeDerived .exam_skin_wood .text_with_arrow1{position:relative}.addon_CylinderVolumeDerived .exam_skin_wood .text_with_arrow1:after{content:"";position:absolute;top:1.89655em;left:3%;display:block;height:.89655em;width:.75862em;background:url(resources/wood/images/icon_arrow.png) no-repeat;background-size:100% 100%}.addon_CylinderVolumeDerived .exam_skin_wood .text_with_arrow1 .text_equal1{font-size:1.63793em;position:absolute;left:26%;top:1.15789em}.addon_CylinderVolumeDerived .exam_skin_wood .text_with_arrow1 .text_equal1 b{font-size:.50526em}.addon_CylinderVolumeDerived .exam_skin_wood .text_with_arrow2{position:relative}.addon_CylinderVolumeDerived .exam_skin_wood .text_with_arrow2:after{content:"";position:absolute;top:1.30526em;left:3%;display:block;height:.54737em;width:.46316em;background:url(resources/wood/images/icon_arrow.png) no-repeat;background-size:100% 100%}.addon_CylinderVolumeDerived .exam_skin_wood .text_with_arrow2 .text_equal2{font-size:1em;position:absolute;left:26%;top:1.36842em;left:10%}.addon_CylinderVolumeDerived .exam_skin_wood .text_with_arrow2 .text_equal2 b{font-size:.44211em}.addon_CylinderVolumeDerived .exam_skin_wood .text_with_arrow2:after{left:0}.addon_CylinderVolumeDerived .exam_skin_wood .cv_right_area{position:absolute;border-radius:.33333em;background:rgba(87,143,184,.149);min-width:24.16667em;height:24.16667em;left:43.95833em;top:3.66667em;text-align:left;padding:2.75em 1.08333em 0 1.91667em}.addon_CylinderVolumeDerived .exam_skin_wood .cv_right_area p{padding-bottom:2.08333em;white-space:nowrap}.addon_CylinderVolumeDerived .exam_skin_wood .guide_question{width:3em;height:3em;display:inline-block;background:url(resources/wood/images/guide-q.png) no-repeat;background-size:100% 100%;vertical-align:-.5em;cursor:pointer}.addon_CylinderVolumeDerived .exam_skin_wood .guide_question.active,.addon_CylinderVolumeDerived .exam_skin_wood .guide_question:active{background:url(resources/wood/images/guide-q-active.png) no-repeat;background-size:100% 100%}.addon_CylinderVolumeDerived .exam_skin_wood .btn_one_key{width:3em;height:3em;position:absolute;background:url(resources/wood/images/one-key.png) no-repeat;background-size:100% 100%;cursor:pointer;right:.91667em;bottom:.75em}.addon_CylinderVolumeDerived .exam_skin_wood .btn_one_key.active,.addon_CylinderVolumeDerived .exam_skin_wood .btn_one_key:active{background:url(resources/wood/images/one-key-active.png) no-repeat;background-size:100% 100%}.addon_CylinderVolumeDerived .exam_skin_wood .btn_pack_up{width:3em;height:3em;position:absolute;cursor:pointer;right:.91667em;bottom:.75em;background:url(resources/wood/images/pack-up.png) no-repeat;background-size:100% 100%}.addon_CylinderVolumeDerived .exam_skin_wood .btn_pack_up.active,.addon_CylinderVolumeDerived .exam_skin_wood .btn_pack_up:active{background:url(resources/wood/images/pack-up-active.png) no-repeat;background-size:100% 100%}.addon_CylinderVolumeDerived .exam_skin_wood .cylindervolumederived_mask{position:absolute;top:0;right:0;bottom:0;left:0;background:rgba(0,0,0,.4);z-index:9999;text-align:center;vertical-align:middle}.addon_CylinderVolumeDerived .exam_skin_wood .cylindervolumederived_mask .guide_wrapper{width:57.5em;height:38.16667em;border-radius:.41667em;background:#f2f6f9;position:absolute;top:0;left:0;right:0;bottom:0;margin:auto;padding:1.875em 0 1.5em}.addon_CylinderVolumeDerived .exam_skin_wood .cylindervolumederived_mask .guide_tit{font-size:1.75em}.addon_CylinderVolumeDerived .exam_skin_wood .cylindervolumederived_mask .guide_box{border:.08333em solid #95b7d1;border-radius:.20833em;background:#bfd3e2;width:44.79167em;height:23.33333em;margin:0 auto;position:relative;margin-top:2.375em;margin-bottom:1.08333em}.addon_CylinderVolumeDerived .exam_skin_wood .cylindervolumederived_mask .guide_tip{font-size:1.08333em}.addon_CylinderVolumeDerived .exam_skin_wood .cylindervolumederived_mask .guide_sure{width:10em;margin-top:2.08333em}.addon_CylinderVolumeDerived .exam_skin_wood .cv_bottom_area{white-space:nowrap;margin-top:-7.83333em;color:#333;text-align:left;width:50%;padding-left:2.86667em}.addon_CylinderVolumeDerived .exam_skin_wood .pos_left{margin-left:-21.2em;padding-top:2.3em;animation:canvas-to-left 2s linear}.addon_CylinderVolumeDerived .exam_skin_wood .pos_left_end{margin-left:-21.2em;padding-top:2.3em}.addon_CylinderVolumeDerived .exam_skin_wood .small_question1{font-size:.415em;position:absolute;left:32%;top:5.2em}.addon_CylinderVolumeDerived .exam_skin_wood .small_question2{font-size:.253em;position:absolute;left:-22%;top:5.95em}.addon_CylinderVolumeDerived .exam_skin_wood .l-cv_right_area{position:absolute;display:block;height:28em;width:24em;left:64.5%;top:2em}.addon_CylinderVolumeDerived .exam_skin_wood .l-cv_right_area p *{display:inline-block}.addon_CylinderVolumeDerived .exam_skin_wood .padding-right-2{padding-right:2em}.addon_CylinderVolumeDerived .exam_skin_wood .cv_right_area{height:27em;width:25em;overflow:auto;position:initial}.addon_CylinderVolumeDerived .exam_skin_wood .cylindervolumederived_wrapper{padding:3.83333em 5.33333em 7em 5.33333em}.addon_CylinderVolumeDerived .exam_skin_wood .cvd_action_bar{margin-left:0}.addon_CylinderVolumeDerived .exam_skin_wood .guide_hand{pointer-events:none}.addon_CylinderVolumeDerived .exam_skin_wood .nice_scroll::-webkit-scrollbar{width:1em;height:.8em}.addon_CylinderVolumeDerived .exam_skin_wood .nice_scroll::-webkit-scrollbar-thumb{border:1em solid transparent;-webkit-border-image:url(resources/wood/images/vertical-thumb.png) 11 11}.addon_CylinderVolumeDerived .exam_skin_wood .nice_scroll::-webkit-scrollbar-corner{background-color:transparent}.addon_CylinderVolumeDerived .exam_skin_wood .btn_one_key{bottom:2.5em}.addon_CylinderVolumeDerived .exam_skin_wood .guide_formula_img{position:absolute;left:4.41667em;top:4.16667em;width:12.75em;height:15.16667em}.addon_CylinderVolumeDerived .exam_skin_wood .guide_formula_img.img1{background:url(resources/wood/images/guide-img1.png) no-repeat;background-size:100% 100%}.addon_CylinderVolumeDerived .exam_skin_wood .guide_formula_img.img2{background:url(resources/wood/images/guide-img2.png) no-repeat;background-size:100% 100%}.addon_CylinderVolumeDerived .exam_skin_wood .guide_formula_box{position:absolute;right:2.5em;top:1.25em;border-radius:.33333em;background:rgba(87,143,184,.149);width:20.83333em;height:20.83333em;padding:3.58333em 0 0 2.16667em;text-align:left}.addon_CylinderVolumeDerived .exam_skin_wood .guide_hand{position:absolute;width:3.91667em;height:4.875em;top:5.83333em;background:url(resources/wood/images/guide-hand.png) no-repeat;background-size:100% 100%}.addon_CylinderVolumeDerived .exam_skin_wood .guide_hand.pos1{left:5.16667em}.addon_CylinderVolumeDerived .exam_skin_wood .guide_hand.pos2{left:10.625em}@keyframes canvas-to-left{0%{margin-left:0;padding-top:0}100%{margin-left:-21.2em;padding-top:2.3em}}]]></css><view><![CDATA[<div class="exam_skin_wood"><div class="cylindervolumederived_wrapper"><div class="cylindervolumederived_inner"><div class="cylindervolumederived_main"><div class="cylinder_over _js_canvas_box"><div class="cv_top_area"></div><div class="l-cv_right_area"><div class="cv_right_area hide_visibility nice_scroll"><p class="js_line1"><span class="hightlight_box js_v-cylinder"><b class="text_blue text_95 nd_NewRoman_italic">V</b> <b class="text_blue text_42 _i18n_cylinder">圆</b> </span><b class="text_72">=</b> <span class="hightlight_box hide_dom js_v-cube js_question1_show"><b class="text_blue text_95 nd_NewRoman_italic">V</b> <b class="text_blue text_42 _i18n_cube">长</b> </span><a href="javascript:;" class="guide_question js_question1"></a></p><p class="padding-bottom-big js_line2 js_question1_show hide_dom"><span class="hightlight_box js_v-cube"><b class="text_blue text_95 nd_NewRoman_italic">V</b> <b class="text_blue text_42 _i18n_cube">长</b> </span><b class="text_72">=</b> <a href="javascript:;" class="guide_question js_question2"></a> <span class="js_question2_show hide_dom"><b class="text_58 text_with_arrow1"><b class="_i18n_floor_area">底面积</b><a href="javascript:;" class="guide_question small_question1 js_question3"></a><b class="text_equal1 nd_NewRoman_italic js_question3_show hide_dom">πr<b class="text_top">2</b></b></b></span><b class="text_52 js_question2_show hide_dom">x</b> <span class="js_question2_show hide_dom"><b class="text_95 js_arrow2 nd_NewRoman_italic">h<a href="javascript:;" class="guide_question small_question2 js_question4 js_question3_show hide_dom"></a><b class="text_equal2 nd_NewRoman_italic js_question4_show hide_dom">h<b class="_i18n_cylinder">圆</b></b></b><b class="text_42 _i18n_cube padding-right-2">长</b></span></p><p class="hide_dom js_line3 js_question4_show"><span class="hightlight_box js_v-cylinder"><b class="text_blue text_95 nd_NewRoman_italic">V</b> <b class="text_blue text_42 _i18n_cylinder">圆</b> </span><b class="text_72">=</b> <span class="hide_dom js_question5_show"><b class="text_95 nd_NewRoman_italic">πr<b class="small_top text_top">2</b>h</b> </span><a href="javascript:;" class="guide_question js_question5"></a></p><a href="javascript:;" class="btn_one_key"></a></div></div><div class="cv_bottom_area hide_dom js_question3_show"><div><p><span class="hightlight_box js_v-bottom"><b class="text_blue text_58 _i18n_floor_area">底面积</b> </span><b class="text_52">=</b> <b class="text_95 nd_NewRoman_italic">πr</b> <b class="text_52 nd_NewRoman_italic">×</b> <b class="text_95 nd_NewRoman_italic">r</b> <b class="text_52">=</b> <b class="text_95 nd_NewRoman_italic">πr<b class="small_top text_top">2</b></b></p></div><div><p class="hide_dom js_question4_show"><b class="text_95 nd_NewRoman_italic">h</b><b class="text_42 _i18n_cube">长</b> <b class="text_52">=</b> <b class="text_95 nd_NewRoman_italic">h</b><b class="text_42 _i18n_cylinder">圆</b></p></div></div></div></div><div class="cvd_action_bar _js_btn_cnt"><div class="action_button_list"><a href="javascript:;" class="com_btns btns-primary _js_cylinder_open" data-btn="1"><span class="btns-primary-txt _i18n_cylinder_open">展开</span> </a><a href="javascript:;" class="com_btns btns-primary _js_cylinder_merge" data-btn="2"><span class="btns-primary-txt _i18n_cylinder_merge">组合</span> </a><a href="javascript:;" class="com_btns btns-primary _js_cylinder_formula" data-btn="3"><span class="btns-primary-txt _i18n_cylinder_formula">推导公式</span></a></div></div></div><div class="cylindervolumederived_foot"><div class="cylinder_size_list _js_cylinder_size"><a href="javascript:;" class="item_1" data-segn="8"><i class="tool_operate_img"></i> <span class="tool_operate_text _i18n_cylinder_size">8份</span> </a><a href="javascript:;" class="item_2 ui_btn_active" data-segn="16"><i class="tool_operate_img"></i> <span class="tool_operate_text _i18n_cylinder_size">16份</span> </a><a href="javascript:;" class="item_3" data-segn="32"><i class="tool_operate_img"></i> <span class="tool_operate_text _i18n_cylinder_size">32份</span> </a><a href="javascript:;" class="item_4" data-segn="128"><i class="tool_operate_img"></i> <span class="tool_operate_text _i18n_cylinder_size">128份</span></a></div></div></div><div class="cylindervolumederived_mask hide_dom _js_first_guide"><div class="guide_wrapper"><h2 class="guide_tit _i18n_guide_title">操作引导</h2><div class="guide_box"><div class="guide_formula_img img1 _js_guide_img"></div><div class="guide_formula_box"><p><span class="hightlight_box _js_guide_v-cylinder"><b class="text_blue text_95 nd_NewRoman_italic">V</b> <b class="text_blue text_42 _i18n_cylinder">圆</b> </span><b class="text_72">=</b> <b class="text_blue text_95 nd_NewRoman_italic hide_dom _js_guide_v-cube">V</b> <b class="text_blue text_42 hide_dom _js_guide_v-cube _i18n_cube">长</b> <a href="javascript:;" class="guide_question _js_guide_question"></a></p><i class="guide_hand pos1 _js_guide_hand"></i></div></div><span class="guide_tip _js_tips_hightlight _i18n_guide_tip1">点击公式高亮对应的图形</span> <span class="guide_tip _js_tips_steps hide_dom _i18n_guide_tip2">点击"?"逐步推导公式</span><br><a href="javascript:;" class="guide_sure com_btns btns-primary _js_guide_close"><span class="btns-primary-txt _i18n_cylinder_konw">我知道了</span></a></div></div></div>]]></view><presenter><![CDATA[/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(1);
	__webpack_require__(3);
	__webpack_require__(2);
	__webpack_require__(17);
	__webpack_require__(18);
	__webpack_require__(16);
	__webpack_require__(20);
	__webpack_require__(19);
	module.exports = __webpack_require__(4);


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _Cylinder = __webpack_require__(2);

	var _Cylinder2 = _interopRequireDefault(_Cylinder);

	var _utils = __webpack_require__(4);

	var _utils2 = _interopRequireDefault(_utils);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	(function () {
	  var Presenter = BasicPresenter.extend({
	    metaInfo: {
	      name: 'CylinderVolumeDerived',
	      type: '',
	      subtype: ''
	    },
	    /**
	     * Presenter的初始化方法
	     * @private
	     */
	    $init: function $init() {
	      this._super();
	    },
	    /**
	     * Presenter对外暴露的方法
	     */
	    _service_: {
	      constructor: function constructor(parent) {
	        this.parent = parent;
	      },
	      setLocationProperties: function setLocationProperties(properties) {
	        this.i18n = properties;
	      },
	      getExtendData: function getExtendData() {
	        var options = {};
	        options = this.parent.cylinder.getSegState();
	        return options;
	      },
	      getQuestionInfo: function getQuestionInfo() {
	        return {
	          id: this.parent.model.question_id || '',
	          type_code: 'CylinderVolumeDerived',
	          type_name: '圆柱体积公式推导',
	          url: '',
	          noExistStatistics: true,
	          noNeedQuizProgress: true
	        };
	      }
	    },
	    getService: function getService() {
	      this._service_.constructor(this);
	      return this._service_;
	    },
	    setUrlParams: function setUrlParams(urlParams) {
	      this.langType = urlParams._lang_;
	    },
	    /** **以下开始为icPlayer的生命周期方法*****/
	    run: function run(view, model) {
	      if (!_utils2.default.isWebGLSupported()) return;
	      var screenShotDef = $.Deferred();
	      var self = this;
	      self.$view = $(view);
	      self.model = model;
	      window.I18nManager.getInstance().loadLanguage('CylinderVolumeDerived', self.langType).done(function (data) {
	        self.i18n = data.lang;
	        self.init();
	        self.cylinder = new _Cylinder2.default();
	        self.cylinder.init(self.$view, model, self.basePath);
	        screenShotDef.resolve();
	      });
	      return screenShotDef.promise();
	    },
	    init: function init() {
	      this._getI18n();
	    },
	    pageShow: function pageShow() {
	      this._bindEvent();
	    },
	    pageLeave: function pageLeave() {
	      // this._unbindEvent()
	    },
	    destroy: function destroy() {
	      this._unbindEvent();
	      this.cylinder = null;
	      this.view = null;
	      this.model = null;
	      this.$view = null;
	    },
	    /** 如果不需要处理icplayer的状态恢复事件, 请将以下两个方法删除掉**/
	    getState: function getState() {},
	    setState: function setState(state, options) {},
	    /** **以下开始为Presenter的私有方法*****/
	    _bindEvent: function _bindEvent() {},
	    _unbindEvent: function _unbindEvent() {
	      this.cylinder.unbindEvent();
	    },
	    __interface: {
	      resizeScreen: function resizeScreen(data) {
	        var $dom = this.$view.find('._js_canvas_box');
	        var width = $dom.width();
	        var height = $dom.height();
	        var camFactor = (height - 56) / 222;
	        var cameraOptions = {
	          left: -width / camFactor,
	          right: width / camFactor,
	          top: height / camFactor,
	          bottom: -height / camFactor
	        };
	        this.cylinder.threeManager.camera.left = cameraOptions.left;
	        this.cylinder.threeManager.camera.right = cameraOptions.right;
	        this.cylinder.threeManager.camera.top = cameraOptions.top;
	        this.cylinder.threeManager.camera.bottom = cameraOptions.bottom;
	        this.cylinder.threeManager.camera.updateProjectionMatrix();
	        this.cylinder.threeManager.renderer.setSize(width, height);
	      }
	    },
	    _getI18n: function _getI18n() {
	      var _this = this;

	      for (var key in this.i18n) {
	        if (this.i18n[key] === undefined) {
	          // console.log("加载语言包失败，使用默认语言中文");
	        } else {
	          (function () {
	            var text = _this.i18n[key];
	            if (key === 'cylinder_size') {
	              _this.$view.find('._i18n_' + key).each(function (i, item) {
	                $(item).text(parseInt($(item).text()) + text);
	              });
	            } else {
	              _this.$view.find('._i18n_' + key).text(text);
	            }
	          })();
	        }
	      }
	    }
	  });

	  window.AddonCylinderVolumeDerived_create = function () {
	    return new Presenter();
	  };
	})();

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _config = __webpack_require__(3);

	var _config2 = _interopRequireDefault(_config);

	var _utils = __webpack_require__(4);

	var _utils2 = _interopRequireDefault(_utils);

	var _shapeFactory = __webpack_require__(5);

	var _shapeFactory2 = _interopRequireDefault(_shapeFactory);

	var _createType = __webpack_require__(6);

	var _createType2 = _interopRequireDefault(_createType);

	var _cylinderFormula = __webpack_require__(17);

	var _cylinderFormula2 = _interopRequireDefault(_cylinderFormula);

	var _cylinderFormulaInPad = __webpack_require__(18);

	var _cylinderFormulaInPad2 = _interopRequireDefault(_cylinderFormulaInPad);

	var _threeManager = __webpack_require__(19);

	var _threeManager2 = _interopRequireDefault(_threeManager);

	var _showArrowH = __webpack_require__(20);

	var _showArrowH2 = _interopRequireDefault(_showArrowH);

	var _test = __webpack_require__(21);

	var _test2 = _interopRequireDefault(_test);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/* global TWEEN */
	var Cylinder = function () {
	  function Cylinder() {
	    _classCallCheck(this, Cylinder);

	    this.segNum = _config2.default.segNum;
	    this.parameters = _config2.default.parameters;
	    this.driftX = _config2.default.driftX;

	    // 当前状态值，0-初始，1-切割圆柱，2-组合，3-公式推导
	    this.currentState = 0;

	    this.guideInfo = {
	      firstGuide: true,
	      step1: false,
	      step2: false,
	      isView: false,
	      buttonStep1Active: false
	    };

	    this.deduceInfo = {
	      question1: false,
	      question2: false,
	      question3: false,
	      question4: false,
	      cylinderActive: false,
	      cubeActive: false,
	      bottomActive: false,
	      packUpActive: false

	      // 是否在动画过程中
	    };this.isAnimate = false;

	    // 动画对象
	    this.tween0 = null;
	    this.tween1 = null;

	    // 存储位置
	    this.openPos = {};
	    this.mergePos = {};
	    this.formulaPos1 = {};
	    this.formulaPos2 = {};
	    this.position = {};

	    this.isRender = true;

	    // 统计用户点击次数
	    this.clickCount = [[0, 0, 0], [1, 0, 0], [0, 0, 0], [0, 0, 0]];
	  }

	  _createClass(Cylinder, [{
	    key: 'resetDeduceInfo',
	    value: function resetDeduceInfo() {
	      this.deduceInfo = {
	        question1: false,
	        question2: false,
	        question3: false,
	        question4: false,
	        question5: false,
	        cylinderActive: false,
	        cubeActive: false,
	        bottomActive: false,
	        packUpActive: false
	      };

	      this.deduceRecover(this.deduceInfo);
	      if (this['arrow-h-cube']) {
	        this['arrow-h-cube'].visible = false;
	        this['arrow-h-cylinder'].visible = false;
	      }

	      if (this.rightCylinderGroup) {
	        this.changeCylinderColor(false);
	        this.changeCubeColor(false);
	        this.setSectorsActive(false);
	      }
	    }
	  }, {
	    key: 'init',
	    value: function init($view, model, basePath) {
	      var self = this;
	      self.$view = $view;

	      for (var i = 1; i < 6; i++) {
	        self['$questionShow' + i] = this.$view.find('.js_question' + i + '_show');
	        self['$question' + i] = this.$view.find('.js_question' + i);
	      }

	      self.model = model;
	      self.basePath = basePath;

	      var $dom = _utils2.default.getCanvasBox($view);
	      self.threeManager = new _threeManager2.default($dom);

	      self.addLeftCylinder(true, false);

	      self.isRender = false;

	      self.needGuide();

	      self.draw = function renderScene() {
	        if (self.isRender) {
	          self.caf = requestAnimationFrame(renderScene);
	        }
	        if (self.threeManager.renderer) {
	          self.threeManager.renderer.clear();
	          self.threeManager.renderer.render(self.threeManager.scene, self.threeManager.camera);
	        }
	        // console.log(self.threeManager.scene.children.length);
	        TWEEN.update();
	      };

	      self.draw();
	      self.bindEvent();

	      // 推送功能的数据恢复
	      if (self.model.__ExtendModel && !$.isEmptyObject(self.model.__ExtendModel)) {
	        self.stateRecover(self.model.__ExtendModel);
	      }

	      // test.call(self)
	    }

	    /**
	     *@函数描述：创建公式推导中的扇形组
	     */

	  }, {
	    key: 'createSectors',
	    value: function createSectors() {
	      this.computeBestParameter();
	      var segNum = this.segNum;
	      var angle = Math.PI;
	      var group = new THREE.Object3D();
	      // 红色0xfd4b10
	      var color = 0xf74406;
	      for (var i = 0; i < segNum; i++) {
	        var piece = _shapeFactory2.default.create(_createType2.default.Sector, {
	          options: this.parameters,
	          angle: angle,
	          color: color
	        });
	        piece.position.y = this.parameters.height / 2 + 0.4;
	        group.add(piece);
	        angle += 2 * Math.PI / segNum;
	      }

	      return group;
	    }

	    /**
	     *@函数描述：创建一个完整的圆柱体, isColorful判断是否有两种颜色
	     */

	  }, {
	    key: 'createCylinder',
	    value: function createCylinder(hasLine, isColorful) {
	      var name = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'cylinder';

	      hasLine = hasLine || false;
	      this.computeBestParameter();
	      var segNum = this.segNum;
	      var angle = 0;
	      var group = new THREE.Object3D();
	      group.name = name;
	      for (var i = 0; i < segNum; i++) {
	        // 蓝色0x0379bd
	        var faceColor = 0x0379bd;
	        if (isColorful && i < segNum / 2) {
	          // 黄色0xb7a209
	          faceColor = 0xeed017;
	        }
	        var piece = _shapeFactory2.default.create(_createType2.default.CylinderPiece, {
	          options: this.parameters,
	          hasLine: hasLine,
	          angle: angle,
	          faceColor: faceColor,
	          segNum: this.segNum
	        });
	        group.add(piece);
	        angle += 2 * Math.PI / segNum;
	      }
	      return group;
	    }

	    // 左边物体上的红色扇形组

	  }, {
	    key: 'addLeftSectors',
	    value: function addLeftSectors() {
	      _utils2.default.destroyThreeObject(this.leftSectors);
	      this.leftSectors = this.createSectors();
	      this.leftCylinderGroups.add(this.leftSectors);
	      this.computePos();
	      var newPos1 = this.formulaPos1;
	      var obj = {};
	      for (var i in newPos1) {
	        if (i >= this.segNum / 2) {
	          obj[i] = newPos1[parseInt(i) - this.segNum / 2];
	          obj[i].offsetX -= _config2.default.fixPos.x;
	          obj[i].offsetZ += _config2.default.fixPos.z;
	        } else {
	          obj[i] = newPos1[parseInt(i) + this.segNum / 2];
	          obj[i].offsetX -= _config2.default.fixPos.x;
	          obj[i].offsetZ += _config2.default.fixPos.z;
	        }
	      }
	      this.setPosition(obj, this.leftSectors, true, true, true);
	    }

	    // 右边圆柱体上的红色半圆

	  }, {
	    key: 'addRightSectors',
	    value: function addRightSectors() {
	      _utils2.default.destroyThreeObject(this.rightSectors);
	      this.rightSectors = this.createSectors();
	      this.threeManager.scene.add(this.rightSectors);
	      this.computePos();
	      this.setPosition(this.formulaPos2, this.rightSectors, false, true, true);
	    }
	  }, {
	    key: 'addLeftCylinder',
	    value: function addLeftCylinder(hasLine, isColorful) {
	      this.cylinderGroup = this.createCylinder(hasLine, isColorful);
	      _utils2.default.destroyThreeObject(this.leftCylinderGroups);
	      this.leftCylinderGroups = new THREE.Object3D();
	      this.leftCylinderGroups.add(this.cylinderGroup);
	      this.threeManager.scene.add(this.leftCylinderGroups);
	    }
	  }, {
	    key: 'addRightCylinder',
	    value: function addRightCylinder(hasLine, isColorful, pos) {
	      this.rightCylinderGroup = this.createCylinder(hasLine, isColorful, 'rightCylinder');
	      _utils2.default.destroyThreeObject(this.rightCylinderGroups);
	      this.rightCylinderGroups = new THREE.Object3D();
	      this.rightCylinderGroups.add(this.rightCylinderGroup);
	      this.rightCylinderGroups.position.x = pos.offsetX;
	      this.rightCylinderGroups.position.z = pos.offsetZ;
	      this.threeManager.scene.add(this.rightCylinderGroups);
	    }

	    /**
	     *@函数描述：“切割圆柱”
	     */

	  }, {
	    key: 'cylinderOpen',
	    value: function cylinderOpen(time) {
	      var self = this;
	      self.isAnimate = true;
	      time = time !== undefined ? time : 2500;
	      this.$view.find('._js_cylinder_open').siblings().addClass('click_disabled');
	      var cylinder = this.cylinderGroup;
	      this.currentState = 1;
	      this.computePos();
	      var newPos = this.openPos;
	      this.tween0 = new TWEEN.Tween({ pos: 0 }).to({ pos: 1 }, time).easing(TWEEN.Easing.Cubic.InOut).onUpdate(function () {
	        var _this = this;

	        cylinder.children.forEach(function (v, i) {
	          v.rotation.y = newPos[i].rotateY * _this.pos;
	          v.position.z = newPos[i].offsetZ * _this.pos;
	          v.position.x = newPos[i].offsetX * _this.pos;
	        });
	      }).onComplete(function () {
	        self.isAnimate = false;
	        self.isRender = false;
	        var index = [8, 16, 32, 128].indexOf(self.segNum);
	        self.$view.find('._js_cylinder_open').siblings().removeClass('click_disabled');
	        if (self.clickCount[index][2] === 0) {
	          self.$view.find('._js_cylinder_formula').addClass('click_disabled');
	        }
	      });
	      this.tween0.start();
	    }

	    /**
	     *@函数描述：组成类似的长方体动画效果
	     */

	  }, {
	    key: 'cylinderMerge',
	    value: function cylinderMerge(times) {
	      var self = this;
	      self.isAnimate = true;
	      times = times !== undefined ? times : [1400, 2500, 500];
	      self.$view.find('._js_cylinder_merge').siblings().addClass('click_disabled');
	      var cylinder = this.cylinderGroup;
	      this.currentState = 2;
	      this.computePos();
	      var newPos = this.mergePos;
	      var segNum = this.segNum;
	      var pi = Math.PI;
	      var radius = this.parameters.radiusTop;
	      var fixZ = radius * Math.sin(pi / segNum);

	      // 动画效果：平移
	      self.tween0 = new TWEEN.Tween({ pos: fixZ }).to({ pos: 0 }, times[0]).easing(TWEEN.Easing.Cubic.InOut).onUpdate(function () {
	        var _this2 = this;

	        cylinder.children.forEach(function (v, i) {
	          v.position.z = newPos[i].offsetZ + _this2.pos;
	          if (i >= segNum / 2) {
	            v.position.z = newPos[i].offsetZ - _this2.pos;
	          }
	        });
	      });

	      // 动画效果：合并
	      var oldPos = this.driftX / this.mergePos[0].offsetX;
	      self.tween1 = new TWEEN.Tween({ pos: oldPos }).to({ pos: 1 }, times[1]).easing(TWEEN.Easing.Cubic.InOut).onUpdate(function () {
	        var _this3 = this;

	        cylinder.children.forEach(function (v, i) {
	          v.position.x = newPos[i].offsetX * _this3.pos;
	        });
	      }).onComplete(function () {});

	      // 动画效果：旋转视角
	      self.tween2 = new TWEEN.Tween({ angle: 0 }).to({ angle: _config2.default.cubeRotateAngle }, times[2]).easing(TWEEN.Easing.Cubic.InOut).onUpdate(function () {
	        // 改变组成的长方体的视角
	        self.leftCylinderGroups.position.set(0, 0, 0);
	        self.leftCylinderGroups.rotation.y = this.angle;
	      }).onComplete(function () {
	        self.isAnimate = false;
	        self.isRender = false;
	        self.$view.find('._js_cylinder_merge').siblings().removeClass('click_disabled');
	      });
	      self.tween0.chain(self.tween1);
	      self.tween1.chain(self.tween2);
	      self.tween0.start();
	    }

	    /**
	     *@函数描述：case1:计算切割圆柱后每一块圆柱体的偏移的位置以及旋转的角度
	     *          case2:计算组成类似长方体圆柱体的位移量
	     */

	  }, {
	    key: 'computePos',
	    value: function computePos() {
	      switch (this.currentState) {
	        case 1:
	          this.openPosition();
	          break;
	        case 2:
	          this.mergePosition();
	          break;
	        case 3:
	          this.formulaPosition();
	          break;
	      }
	    }

	    /**
	     *@函数描述：用于计算切割圆柱体后的位置
	     */

	  }, {
	    key: 'openPosition',
	    value: function openPosition() {
	      var segNum = this.segNum;
	      var pi = Math.PI;
	      var t = void 0;
	      var radius = this.parameters.radiusTop;
	      var fixC = 0;
	      var fixZ = radius * Math.sin(pi / segNum);
	      var obj = {};

	      for (var i = 0; i < segNum; i++) {
	        t = i % (segNum / 2);
	        obj[i] = {
	          rotateY: pi / 2 - pi * 2 * t / segNum - pi / segNum,
	          offsetZ: -2 * fixZ * (t - segNum / 4) + fixC,
	          offsetX: this.driftX
	        };
	        if (i >= segNum / 2) {
	          obj[i].offsetZ += fixZ;
	          obj[i].offsetZ *= -1;
	          obj[i].offsetX *= -1;
	        }
	      }
	      this.openPos = obj;
	    }

	    /**
	     *@函数描述：用于计算组成类似的长方体后圆柱体的位置
	     */

	  }, {
	    key: 'mergePosition',
	    value: function mergePosition() {
	      this.openPosition();
	      this.setPosition(this.openPos);

	      var segNum = this.segNum;
	      var pi = Math.PI;
	      var radius = this.parameters.radiusTop;
	      var fixZ = radius * Math.sin(pi / segNum);
	      var fixX = radius * Math.cos(pi / segNum);
	      var obj = this.openPos;

	      for (var i = 0; i < segNum; i++) {
	        obj[i].offsetX = -fixX / 2;
	        obj[i].offsetZ -= fixZ;
	        if (i >= segNum / 2) {
	          obj[i].offsetX *= -1;
	          obj[i].offsetZ += fixZ * 2;
	        }

	        // 拼合的贴近度
	        obj[i].offsetX *= 1;
	      }
	      this.mergePos = obj;
	    }

	    /**
	     *@函数描述：用于计算公式的推导的左右圆柱体的位置
	     */

	  }, {
	    key: 'formulaPosition',
	    value: function formulaPosition() {
	      this.mergePosition();
	      this.setPosition(this.mergePos);

	      var segNum = this.segNum;
	      var obj1 = this.mergePos;
	      for (var i = 0; i < segNum; i++) {
	        obj1[i].offsetX += _config2.default.fixPos.x;
	        obj1[i].offsetZ -= _config2.default.fixPos.z;
	      }
	      this.formulaPos1 = obj1;

	      var obj2 = {};
	      for (var _i = 0; _i < segNum; _i++) {
	        obj2[_i] = {
	          offsetX: _config2.default.fixPos.x + 60,
	          offsetZ: _config2.default.fixPos.z + 40
	        };
	      }
	      this.formulaPos2 = obj2;
	    }

	    /**
	     *@函数描述：设置cylinder位置,obj为位置对象,group为对象
	     */

	  }, {
	    key: 'setPosition',
	    value: function setPosition(obj, group, rotateY, posX, posZ) {
	      group = group || this.cylinderGroup;
	      rotateY = rotateY !== undefined ? rotateY : true;
	      posX = posX !== undefined ? posX : true;
	      posZ = posZ !== undefined ? posZ : true;

	      if (rotateY) {
	        group.children.forEach(function (v, i) {
	          v.rotation.y = obj[i].rotateY;
	        });
	      }
	      if (posX) {
	        group.children.forEach(function (v, i) {
	          v.position.x = obj[i].offsetX;
	        });
	      }
	      if (posZ) {
	        group.children.forEach(function (v, i) {
	          v.position.z = obj[i].offsetZ;
	        });
	      }
	    }

	    /**
	     *@函数描述：事件绑定
	     */

	  }, {
	    key: 'bindEvent',
	    value: function bindEvent() {
	      var self = this;
	      self.$view.on('click touchstart', '._js_btn_cnt a', function (e) {
	        e.preventDefault();
	        var target = $(e.currentTarget);
	        self.time && clearTimeout(self.time);
	        self.tempTime && clearTimeout(self.tempTime);

	        if (!(self.isAnimate || target.hasClass('click_disabled'))) {
	          self.$view.find('.cv_top_area').removeClass('pos_left_end pos_left');
	          self.resetDeduceInfo();
	          var btnNum = $(e.currentTarget).data('btn');

	          var index = [8, 16, 32, 128].indexOf(self.segNum);
	          self.isRender = true;
	          self.draw();

	          target.addClass('ui_btn_active').siblings().removeClass('ui_btn_active');

	          self.$view.find('.cv_bottom_area').addClass('hide_dom');
	          self.$view.find('.cv_right_area').addClass('hide_visibility');

	          self.currentState = btnNum;
	          self.clear();

	          self.threeManager.resetCamera();
	          self.addLeftCylinder(false, true);
	          switch (btnNum) {
	            case 1:
	              self.clickCount[index][1] += 1;
	              self.cylinderOpen();
	              break;
	            case 2:
	              self.clickCount[index][2] += 1;
	              self.cylinderMerge();
	              break;
	            case 3:
	              self.showFirstGuide();
	              _cylinderFormula2.default.call(self);
	              break;
	          }
	        }
	      }).on('click touchstart', '._js_cylinder_size a', function (e) {
	        e.preventDefault();
	        var target = $(e.currentTarget);
	        self.currentState = 0;
	        if (target.hasClass('ui_btn_active')) {} else {
	          self.$view.find('.cv_top_area').removeClass('pos_left_end pos_left');
	          self.isRender = true;
	          self.draw();
	          self.threeManager.resetCamera();
	          self.clear();
	          // self.threeManager.scene.children = {}
	          self.segNum = target.data('segn');

	          var index = [8, 16, 32, 128].indexOf(self.segNum);
	          self.clickCount[index][0] += 1;
	          if (self.tween0) {
	            self.tween0.stop();
	            self.isAnimate = false;
	          }
	          self.$view.find('.cv_bottom_area').addClass('hide_dom');
	          self.$view.find('.cv_right_area').addClass('hide_visibility');
	          target.addClass('ui_btn_active').siblings().removeClass('ui_btn_active');
	          self.$view.find('._js_btn_cnt a').removeClass('ui_btn_active click_disabled');

	          self.needGuide();

	          self.clear();
	          self.addLeftCylinder(true, false);
	          self.isRender = false;
	        }
	      }).on('click touchstart', '._js_guide_close', function (e) {
	        // 关闭引导页
	        e.preventDefault();
	        self.$view.find('._js_first_guide').addClass('hide_dom');
	        self.guideInfo.isView = false;
	        self.guideInfo.firstGuide = false;
	      }).on('mousedown touchstart', '._js_guide_v-cylinder', function (e) {
	        // 点击引导页第一个按钮
	        e.preventDefault();
	        self.guideStep1();
	      }).on('mouseup touchend', '._js_guide_v-cylinder', function (e) {
	        e.preventDefault();
	        self.t = setTimeout(function () {
	          self.$view.find('._js_guide_img').removeClass('img2');
	          self.$view.find('._js_guide_v-cylinder').removeClass('active');
	          self.guideInfo.buttonStep1Active = false;
	        }, 300);
	      }).on('click touchstart', '._js_guide_question', function (e) {
	        // 点击引导页第二个按钮
	        e.preventDefault();
	        self.guideStep2();
	      }).on('click touchstart', '.js_question1', function (e) {
	        e.preventDefault();
	        self.setQuestion1Status();
	      }).on('click touchstart', '.js_question2', function (e) {
	        e.preventDefault();
	        self.setQuestion2Status();
	      }).on('click touchstart', '.js_question3', function (e) {
	        e.preventDefault();
	        self.setQuestion3Status();
	      }).on('click touchstart', '.js_question4', function (e) {
	        e.preventDefault();
	        self.setQuestion4Status();
	      }).on('click touchstart', '.js_question5', function (e) {
	        e.preventDefault();
	        self.setQuestion5Status();
	      }).on('click touchstart', '.js_v-cylinder', function (e) {
	        e.preventDefault();
	        self.setButtonStatus('cylinder');
	      }).on('click touchstart', '.js_v-cube', function (e) {
	        e.preventDefault();
	        self.setButtonStatus('cube');
	      }).on('click touchstart', '.js_v-bottom', function (e) {
	        e.preventDefault();
	        self.setButtonStatus('bottom');
	      }).on('click touchstart', '.btn_one_key', function (e) {
	        e.preventDefault();
	        if (self.deduceInfo.packUpActive) {
	          self.tempRender();
	          self.resetDeduceInfo();
	        } else {
	          var data = {
	            question1: true,
	            question2: true,
	            question3: true,
	            question4: true,
	            question5: true,
	            packUpActive: true
	          };
	          $.extend(self.deduceInfo, data);
	          self.deduceRecover(self.deduceInfo);
	          self.$view.find('.btn_one_key').addClass('btn_pack_up');
	        }
	      });
	    }
	  }, {
	    key: 'tempRender',
	    value: function tempRender() {
	      var self = this;
	      self.isRender = true;
	      self.draw();
	      self.tempTime && clearTimeout(self.tempTime);
	      self.tempTime = setTimeout(function () {
	        self.isRender = false;
	      }, 1000);
	    }
	  }, {
	    key: 'setQuestion1Status',
	    value: function setQuestion1Status() {
	      this.setQuestionStatus(1);
	    }
	  }, {
	    key: 'setQuestion2Status',
	    value: function setQuestion2Status() {
	      this.setQuestionStatus(2);
	    }
	  }, {
	    key: 'setQuestion3Status',
	    value: function setQuestion3Status() {
	      this.setQuestionStatus(3);
	      this.$view.find('.js_arrow2').addClass('text_with_arrow2');
	    }
	  }, {
	    key: 'setQuestion4Status',
	    value: function setQuestion4Status() {
	      var self = this;
	      this.setQuestionStatus(4);
	      self.isRender = true;
	      self.draw();
	      setTimeout(function () {
	        self.isRender = false;
	      }, 1000);
	      if (this['arrow-h-cube']) {
	        this['arrow-h-cube'].visible = true;
	        this['arrow-h-cylinder'].visible = true;
	        return;
	      }
	      this.computePos();
	      var newPos1 = this.formulaPos1;

	      var tempXR = _config2.default.fixPos2.x - this.parameters.radiusTop;
	      var tempZR = _config2.default.fixPos2.z;

	      var tempXL = newPos1[this.segNum - 1].offsetX - this.parameters.radiusTop;
	      var tempZL = newPos1[this.segNum - 1].offsetZ;

	      this.arrowHOptions = {
	        tempXR: tempXR,
	        tempZR: tempZR,
	        tempXL: tempXL,
	        tempZL: tempZL
	      };

	      _showArrowH2.default.call(this, this.arrowHOptions);
	      // this.threeManager.render()
	    }
	  }, {
	    key: 'setQuestion5Status',
	    value: function setQuestion5Status() {
	      this.setQuestionStatus(5);
	      this.$view.find('.btn_one_key').addClass('btn_pack_up');
	      this.deduceInfo.packUpActive = true;
	    }
	  }, {
	    key: 'setButtonStatus',
	    value: function setButtonStatus(key) {
	      this.tempRender();
	      var $dom = this.$view.find('.js_v-' + key);
	      if ($dom.hasClass('active')) {
	        $dom.removeClass('active');
	        this.deduceInfo[key + 'Active'] = false;
	      } else {
	        $dom.addClass('active');
	        this.deduceInfo[key + 'Active'] = true;
	      }
	      switch (key) {
	        case 'bottom':
	          this.setSectorsActive(this.deduceInfo[key + 'Active']);
	          break;
	        case 'cylinder':
	          this.changeCylinderColor(this.deduceInfo[key + 'Active']);
	          break;
	        case 'cube':
	          this.changeCubeColor(this.deduceInfo[key + 'Active']);
	          break;
	      }
	    }
	  }, {
	    key: 'changeCylinderColor',
	    value: function changeCylinderColor(status) {
	      var _this4 = this;

	      // 蓝色0x0379bd - 0xad5532
	      // 黄色0xeed017 - 0xf96518
	      var color1 = status ? _config2.default.colorDefault[0] : _config2.default.colorActive[0];
	      var color2 = status ? _config2.default.colorDefault[1] : _config2.default.colorActive[1];
	      var colorLine = status ? 0xa83e1c : 0x0c71a1;
	      this.rightCylinderGroup.children.forEach(function (v, i) {
	        v.children[1].material.color.setHex(colorLine);
	        if (i < _this4.segNum / 2) {
	          v.children[0].material.emissive.setHex(color2);
	        } else {
	          v.children[0].material.emissive.setHex(color1);
	        }
	      });
	    }
	  }, {
	    key: 'changeCubeColor',
	    value: function changeCubeColor(status) {
	      var _this5 = this;

	      var color1 = status ? _config2.default.colorDefault[0] : _config2.default.colorActive[0];
	      var color2 = status ? _config2.default.colorDefault[1] : _config2.default.colorActive[1];
	      this.cylinderGroup.children.forEach(function (v, i) {
	        if (i < _this5.segNum / 2) {
	          v.children[0].material.emissive.setHex(color2);
	        } else {
	          v.children[0].material.emissive.setHex(color1);
	        }
	      });
	    }
	  }, {
	    key: 'setSectorsActive',
	    value: function setSectorsActive(status) {
	      if (status) {
	        if (!this.leftSectors) {
	          this.addRightSectors();
	          this.addLeftSectors();
	        } else {
	          this.leftSectors.visible = true;
	          this.rightSectors.visible = true;
	        }
	      } else {
	        if (!this.leftSectors) return;
	        this.leftSectors.visible = false;
	        this.rightSectors.visible = false;
	      }
	    }
	  }, {
	    key: 'setQuestionStatus',
	    value: function setQuestionStatus(key) {
	      this.deduceInfo['question' + key] = true;
	      this.$view.find('.js_question' + key + '_show').removeClass('hide_dom');
	      this.$view.find('.js_question' + key).addClass('hide_dom');
	    }
	  }, {
	    key: 'showFirstGuide',
	    value: function showFirstGuide() {
	      if (!this.guideInfo.firstGuide) return;
	      this.$view.find('._js_first_guide').removeClass('hide_dom');
	      this.guideInfo.isView = true;
	    }
	  }, {
	    key: 'guideStep1',
	    value: function guideStep1() {
	      var $guideDom = this.$view.find('._js_guide_question');
	      var left = $guideDom.width() / 2 + $guideDom.position().left;
	      this.$view.find('._js_guide_hand').css('left', left + 'px');
	      this.$view.find('._js_guide_img').addClass('img2');
	      this.$view.find('._js_guide_v-cylinder').addClass('active');
	      this.guideInfo.buttonStep1Active = true;
	      this.$view.find('._js_tips_hightlight').addClass('hide_dom');
	      !this.guideInfo.step2 && this.$view.find('._js_tips_steps').removeClass('hide_dom');
	      this.guideInfo.step1 = true;
	    }
	  }, {
	    key: 'guideStep2',
	    value: function guideStep2() {
	      this.$view.find('._js_guide_v-cube').removeClass('hide_dom');
	      this.$view.find('._js_guide_question').addClass('hide_dom');
	      this.$view.find('._js_guide_hand').addClass('hide_dom');
	      this.$view.find('.guide_tip').addClass('hide_dom');
	      this.guideInfo.step2 = true;
	    }

	    /**
	     *@函数描述：事件解绑
	     */

	  }, {
	    key: 'unbindEvent',
	    value: function unbindEvent() {
	      this.$view.off('click touchstart');
	      this.destroy();
	    }

	    /**
	     *@函数描述：判断是否是首次引导
	     */

	  }, {
	    key: 'needGuide',
	    value: function needGuide() {
	      var self = this;
	      var index = [8, 16, 32, 128].indexOf(self.segNum);
	      if (self.clickCount[index][1] === 0) {
	        self.$view.find('._js_cylinder_merge').addClass('click_disabled');
	        self.$view.find('._js_cylinder_formula').addClass('click_disabled');
	      }
	      if (self.clickCount[index][2] === 0) {
	        self.$view.find('._js_cylinder_formula').addClass('click_disabled');
	      }
	    }

	    /**
	     *@函数描述：清除场景和光源，为重新绘制做准备
	     */

	  }, {
	    key: 'clear',
	    value: function clear() {
	      this.threeManager.initScene();
	      this.threeManager.initLight();
	      this.openPos = {};
	      this.mergePos = {};
	      this.formulaPos1 = {};
	      this.formulaPos2 = {};
	      this.position = {};
	      _utils2.default.destroyThreeObject(this['arrow-h-cube']);
	      _utils2.default.destroyThreeObject(this['arrow-h-cylinder']);
	      this['arrow-h-cube'] = undefined;
	      this['arrow-h-cylinder'] = undefined;

	      // if (!this.deduceInfo.bottomActive) {
	      _utils2.default.destroyThreeObject(this.leftSectors);
	      _utils2.default.destroyThreeObject(this.rightSectors);
	      this.leftSectors = undefined;
	      this.rightSectors = undefined;
	      // }
	    }

	    /**
	     *@函数描述： 推送学生端时被调用
	     */

	  }, {
	    key: 'segRecover',
	    value: function segRecover(obj) {
	      var self = this;
	      var isAni = obj ? obj.isAnimate : self.isAnimate;
	      self.isRender = true;
	      self.draw();
	      self.currentState = obj.currentState;
	      self.clickCount = obj.clickCount;
	      if (isAni) {
	        switch (self.currentState) {
	          case 0:
	            self.clear();
	            self.$view.find('._js_cylinder_merge').removeClass('click_disabled');
	            self.$view.find('._js_cylinder_formula').removeClass('click_disabled');
	            self.needGuide();
	            self.addLeftCylinder(true, false);
	            break;
	          case 1:
	            self.clear();
	            self.$view.find('._js_cylinder_open').addClass('ui_btn_active');
	            self.$view.find('._js_cylinder_open').removeClass('click_disabled');
	            self.needGuide();
	            self.addLeftCylinder(false, true);
	            self.cylinderOpen();
	            break;
	          case 2:
	            self.clear();
	            self.$view.find('._js_cylinder_merge').addClass('ui_btn_active');
	            self.$view.find('._js_cylinder_merge').removeClass('click_disabled');
	            self.addLeftCylinder(false, true);
	            self.cylinderMerge();
	            break;
	          case 3:
	            self.clear();
	            self.$view.find('._js_cylinder_formula').addClass('ui_btn_active');
	            self.$view.find('._js_cylinder_formula').removeClass('click_disabled');
	            self.addLeftCylinder(false, true);
	            _cylinderFormula2.default.call(self);
	            self.recoverHightLightStatus();
	            break;
	          default:
	            break;
	        }
	      } else {
	        switch (self.currentState) {
	          case 0:
	            self.clear();
	            self.$view.find('._js_cylinder_merge').removeClass('click_disabled');
	            self.$view.find('._js_cylinder_formula').removeClass('click_disabled');
	            self.needGuide();
	            self.addLeftCylinder(true, false);
	            break;
	          case 1:
	            self.clear();
	            self.$view.find('._js_cylinder_open').addClass('ui_btn_active');
	            self.$view.find('._js_cylinder_open').removeClass('click_disabled');
	            self.needGuide();
	            self.addLeftCylinder(false, true);
	            self.cylinderOpen(0);
	            break;
	          case 2:
	            self.clear();
	            self.$view.find('._js_cylinder_merge').addClass('ui_btn_active');
	            self.$view.find('._js_cylinder_merge').removeClass('click_disabled');
	            self.addLeftCylinder(false, true);
	            self.cylinderMerge([0, 0, 0]);
	            break;
	          case 3:
	            self.clear();
	            self.$view.find('._js_cylinder_formula').addClass('ui_btn_active');
	            self.$view.find('._js_cylinder_formula').removeClass('click_disabled');
	            self.addLeftCylinder(false, true);
	            _cylinderFormulaInPad2.default.apply(self);
	            // cylinderFormula.call(self, [0])
	            self.recoverHightLightStatus();
	            break;
	          default:
	            break;
	        }
	      }
	    }

	    /**
	     *@函数描述：恢复页面ui的状态
	     */

	  }, {
	    key: 'stateRecover',
	    value: function stateRecover(obj) {
	      var self = this;
	      self.segNum = obj.segN;
	      self.currentState = obj.currentState;
	      self.addLeftCylinder(true, false);
	      // 页面ui恢复
	      if (obj.currentState !== 0) {
	        self.$view.find('._js_btn_cnt').removeClass('hide_dom').find('a').removeClass('ui_btn_active').eq(obj.currentState - 1).addClass('ui_btn_active');
	      }
	      $.each($('._js_cylinder_size a'), function (i, ele) {
	        if ($(ele).data('segn') === obj.segN) {
	          $(ele).addClass('ui_btn_active').siblings().removeClass('ui_btn_active');
	        }
	      });

	      // yindaoye
	      self.guideRecover(obj);

	      // tuidaoye
	      if (self.currentState === 3) {
	        self.deduceRecover(obj.deduceInfo);
	      }

	      self.segRecover(obj);
	    }
	  }, {
	    key: 'guideRecover',
	    value: function guideRecover(obj) {
	      var self = this;
	      // self.guideInfo.firstGuide = obj.guideInfo.firstGuide
	      if (obj.guideInfo.isView) {
	        self.$view.find('._js_first_guide').removeClass('hide_dom');
	        obj.guideInfo.step1 && self.guideStep1() && obj.guideInfo.step2 && self.guideStep2();
	        if (obj.guideInfo.step1 && obj.guideInfo.step2) {
	          this.$view.find('.guide_tip').addClass('hide_dom');
	          this.$view.find('._js_guide_hand').addClass('hide_dom');
	          this.$view.find('._js_guide_question').addClass('hide_dom');
	          this.$view.find('._js_guide_v-cube').removeClass('hide_dom');
	        }
	        self.guideInfo.buttonStep1Active = obj.guideInfo.buttonStep1Active;
	        if (!obj.guideInfo.buttonStep1Active) {
	          self.$view.find('._js_guide_img').removeClass('img2');
	          self.$view.find('._js_guide_v-cylinder').removeClass('active');
	        } else {
	          self.$view.find('._js_guide_img').addClass('img2');
	          self.$view.find('._js_guide_v-cylinder').addClass('active');
	        }
	      }
	    }
	  }, {
	    key: 'deduceRecover',
	    value: function deduceRecover(data) {
	      for (var i = 1; i < 6; i++) {
	        this['$question' + i].removeClass('hide_dom');
	        this['$questionShow' + i].addClass('hide_dom');
	        if (i === 4) {
	          this['$question' + i].addClass('hide_dom');
	        }
	      }
	      this.$view.find('.js_arrow2').removeClass('text_with_arrow2');

	      this.$view.find('.btn_one_key').removeClass('btn_pack_up');
	      data.question1 && this.setQuestion1Status();
	      data.question2 && this.setQuestion2Status();
	      data.question3 && this.setQuestion3Status();
	      data.question4 && this.setQuestion4Status();
	      data.question5 && this.setQuestion5Status();
	      this.recoverButtonState('cylinder', data.cylinderActive);
	      this.recoverButtonState('cube', data.cubeActive);
	      this.recoverButtonState('bottom', data.bottomActive);
	    }
	  }, {
	    key: 'recoverButtonState',
	    value: function recoverButtonState(key, status) {
	      this.deduceInfo[key + 'Active'] = status;
	      if (status) {
	        this.$view.find('.js_v-' + key).addClass('active');
	      } else {
	        this.$view.find('.js_v-' + key).removeClass('active');
	      }
	    }
	  }, {
	    key: 'recoverHightLightStatus',
	    value: function recoverHightLightStatus() {
	      if (this.deduceInfo.bottomActive) {
	        this.setSectorsActive(true);
	      }
	      if (this.deduceInfo.cylinderActive) {
	        this.changeCylinderColor(true);
	      }
	      if (this.deduceInfo.cubeActive) {
	        this.changeCubeColor(true);
	      }
	    }

	    /**
	     *@函数描述：获取状态恢复参数
	     */

	  }, {
	    key: 'getSegState',
	    value: function getSegState() {
	      var self = this;
	      return {
	        'segN': self.segNum,
	        'currentState': self.currentState,
	        'isAnimate': self.isAnimate,
	        'clickCount': self.clickCount,
	        'guideInfo': self.guideInfo,
	        'deduceInfo': self.deduceInfo
	      };
	    }

	    // 根据切割份数计算每块圆柱体的精度

	  }, {
	    key: 'computeBestParameter',
	    value: function computeBestParameter() {
	      var segNum = this.segNum;
	      this.parameters.radialSegments = 512 / segNum;
	    }
	  }, {
	    key: 'destroy',
	    value: function destroy() {
	      // this.unbindEvent()
	      TWEEN.removeAll();

	      this.t && clearTimeout(this.t);
	      this.tempTime && clearTimeout(this.tempTime);

	      this.clear();
	      cancelAnimationFrame(self.caf);
	      this.isRender = false;
	      // Utils.destroyThreeObject(this.leftCylinderGroups)
	      // Utils.destroyThreeObject(this.rightCylinderGroups)
	      this.threeManager.destroy();
	      // console.log('destroy')
	    }
	  }]);

	  return Cylinder;
	}();

	exports.default = Cylinder;

/***/ }),
/* 3 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	/**
	 * Created by hellohy on 2017/5/25.
	 */
	// 默认分成份数
	var defaultSegNum = 16;

	// 圆柱体的默认参数
	var defaultCylinderParms = {
	  radiusTop: 120,
	  radiusBottom: 120,
	  height: 200,
	  radialSegments: 16,
	  heightSegments: 1,
	  openEnded: false,
	  thetaStart: 0,
	  thetaLength: Math.PI * 2 / defaultSegNum

	  // 切割后圆柱体上下两部分在x轴上分离的距离
	};var driftX = 156;

	var config = {
	  segNum: defaultSegNum,
	  parameters: defaultCylinderParms,
	  driftX: driftX,
	  cubeRotateAngle: -Math.PI / 20,
	  // 左侧圆柱体的位置
	  fixPos: {
	    x: 100,
	    z: 160
	  },
	  // 右侧圆柱体的位置
	  fixPos2: {
	    x: 100 + 60,
	    z: 160 + 40
	  },
	  colorDefault: [0xad5532, 0xf96518],
	  colorActive: [0x0379bd, 0xeed017]
	};
	exports.default = config;

/***/ }),
/* 4 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	 * Created by hellohy on 2017/5/25.
	 */
	var Utils = function () {
	  function Utils() {
	    _classCallCheck(this, Utils);
	  }

	  _createClass(Utils, null, [{
	    key: 'computeBestSegments',
	    value: function computeBestSegments(segNum) {
	      return 512 / segNum;
	    }
	  }, {
	    key: 'destroyThreeObject',
	    value: function destroyThreeObject(object) {
	      if (!object) return;
	      if (object.children && object.children.length > 0) {
	        for (var i = 0; i < object.children.length; i++) {
	          Utils.destroyThreeObject(object.children[i]);
	        }
	      }
	      if (object.geometry) object.geometry.dispose();
	      if (object.material) {
	        object.material.dispose();
	        if (object.material.map && object.material.map.dispose) object.material.map.dispose();
	      }
	      object = null;
	    }
	  }, {
	    key: 'getCanvasBox',
	    value: function getCanvasBox($view) {
	      return $view.find('.cv_top_area');
	    }
	  }, {
	    key: 'isWebGLSupported',
	    value: function isWebGLSupported() {
	      var contextOptions = {
	        stencil: true
	      };
	      try {
	        if (!window.WebGLRenderingContext) {
	          return false;
	        }

	        var canvas = document.createElement('canvas'),
	            gl = canvas.getContext('webgl', contextOptions) || canvas.getContext('experimental-webgl', contextOptions);

	        return !!(gl && gl.getContextAttributes().stencil);
	      } catch (e) {
	        return false;
	      }
	    }
	  }]);

	  return Utils;
	}();

	exports.default = Utils;

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createType = __webpack_require__(6);

	var _createType2 = _interopRequireDefault(_createType);

	var _createSector = __webpack_require__(7);

	var _createSector2 = _interopRequireDefault(_createSector);

	var _createCircleArcOnCylinder = __webpack_require__(10);

	var _createCircleArcOnCylinder2 = _interopRequireDefault(_createCircleArcOnCylinder);

	var _createCircleArcOnCube = __webpack_require__(11);

	var _createCircleArcOnCube2 = _interopRequireDefault(_createCircleArcOnCube);

	var _createCylinderPiece = __webpack_require__(12);

	var _createCylinderPiece2 = _interopRequireDefault(_createCylinderPiece);

	var _createArrowR = __webpack_require__(14);

	var _createArrowR2 = _interopRequireDefault(_createArrowR);

	var _createArrowH = __webpack_require__(15);

	var _createArrowH2 = _interopRequireDefault(_createArrowH);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = {
	  create: function create(type, data) {
	    var mesh = null;
	    switch (type) {
	      case _createType2.default.Sector:
	        mesh = (0, _createSector2.default)(data.options, data.angle, data.color);
	        break;
	      case _createType2.default.CircleArcOnCylinder:
	        mesh = (0, _createCircleArcOnCylinder2.default)(data.options, data.start, data.length, data.dotNums, data.isBottom);
	        break;
	      case _createType2.default.CircleArcOnCube:
	        mesh = (0, _createCircleArcOnCube2.default)(data.options, data.segNum, data.pos);
	        break;
	      case _createType2.default.CylinderPiece:
	        mesh = (0, _createCylinderPiece2.default)(data.options, data.hasLine, data.angle, data.faceColor, data.segNum);
	        break;
	      case _createType2.default.ArrowR:
	        mesh = (0, _createArrowR2.default)(data.options, data.presenter, data.type, data.basePath, data.x, data.z);
	        break;
	      case _createType2.default.ArrowH:
	        mesh = (0, _createArrowH2.default)(data.options, data.presenter, data.type, data.basePath, data.x, data.z, data.name);
	    }
	    return mesh;
	  }
	}; /**
	    * Created by hellohy on 2017/5/25.
	    */

/***/ }),
/* 6 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	/**
	 * Created by hellohy on 2017/5/25.
	 */
	exports.default = {
	  Sector: Symbol(),
	  Sectors: Symbol(),
	  CircleArcOnCylinder: Symbol(),
	  CircleArcOnCube: Symbol(),
	  CircleArcUnderCylinder: Symbol(),
	  ArrowH: Symbol(),
	  ArrowR: Symbol(),
	  CylinderPiece: Symbol(),
	  Cylinder: Symbol()
	};

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	exports.default = function (options, angle, color) {
	  var radiusTop = options.radiusTop;
	  var radiusBottom = radiusTop;
	  var height = 1;
	  var radialSegments = options.radialSegments;
	  var heightSegments = options.heightSegments;
	  var openEnded = options.openEnded;
	  var thetaStart = angle;
	  var thetaLength = options.thetaLength;
	  var sectorGeometry = new THREE.CylinderGeometry(radiusTop - 0.1, radiusBottom - 0.1, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength);

	  var group = new THREE.Object3D();
	  var faceMaterial = new THREE.MeshPhongMaterial({
	    color: 0x156289,
	    side: THREE.DoubleSide,
	    shading: THREE.FlatShading,
	    emissive: 0xda5c31
	  });
	  faceMaterial.emissive.setHex(color);
	  var faceMesh = new THREE.Mesh(sectorGeometry, faceMaterial);
	  group.add(faceMesh);

	  // const lineMaterial = lineMaterial()
	  var parameters = {
	    radiusTop: radiusTop,
	    height: height,
	    thetaStart: angle,
	    thetaLength: thetaLength
	  };
	  var lineGeometry = (0, _CylinderLine2.default)(parameters);
	  var lineMesh = new THREE.Line(lineGeometry, (0, _lineMaterial2.default)());
	  group.add(lineMesh);
	  return group;
	};

	var _CylinderLine = __webpack_require__(8);

	var _CylinderLine2 = _interopRequireDefault(_CylinderLine);

	var _lineMaterial = __webpack_require__(9);

	var _lineMaterial2 = _interopRequireDefault(_lineMaterial);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 8 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	function CylinderLine(options) {
	  var radiusTop = options.radiusTop !== undefined ? options.radiusTop : 20;
	  var height = options.height !== undefined ? options.height : 50;
	  var thetaStart = options.thetaStart !== undefined ? options.thetaStart : 0.0;
	  var thetaLength = options.thetaLength !== undefined ? options.thetaLength : 4.5;

	  var halfHeight = height / 2;
	  var geometry = new THREE.Geometry();

	  var p1 = new THREE.Vector3(0, halfHeight + 0.1, 0);
	  var p2 = new THREE.Vector3(radiusTop * Math.sin(thetaStart) + 0.01, p1.y, radiusTop * Math.cos(thetaStart) + 0.01);
	  var p3 = new THREE.Vector3(p2.x, -p1.y + 0.5, p2.z);
	  var p4 = new THREE.Vector3(0, -p1.y + 0.5, 0);
	  var p5 = new THREE.Vector3(radiusTop * Math.sin(thetaStart + thetaLength) - 0.1, -p1.y + 0.1, radiusTop * Math.cos(thetaStart + thetaLength) - 0.1);
	  var p6 = new THREE.Vector3(p5.x, p1.y, p5.z);
	  var p7 = new THREE.Vector3(0, p1.y, 0);

	  /*        var p1 = new THREE.Vector3(0, halfHeight , 0);
	   var p2 = new THREE.Vector3(radiusTop * Math.sin(thetaStart), p1.y, radiusTop * Math.cos(thetaStart));
	   var p3 = new THREE.Vector3(p2.x, -p1.y, p2.z);
	   var p4 = new THREE.Vector3(0, -p1.y, 0);
	   var p5 = new THREE.Vector3(radiusTop * Math.sin(thetaStart + thetaLength), -p1.y, radiusTop * Math.cos(thetaStart + thetaLength));
	   var p6 = new THREE.Vector3(p5.x, p1.y, p5.z);
	   var p7 = new THREE.Vector3(0, p1.y, 0);*/

	  geometry.vertices.push(p1, p2, p3, p4, p5, p6, p7);

	  return geometry;
	}

	exports.default = CylinderLine;

/***/ }),
/* 9 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	exports.default = function () {
	  return new THREE.LineBasicMaterial({
	    // color: 0x0c71a1
	    color: 0xa83e1c
	  });
	};

/***/ }),
/* 10 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	exports.default = function (options) {
	  var start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.5 * Math.PI;
	  var length = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2 * Math.PI;
	  var dotNums = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 25;
	  var isBottom = arguments[4];

	  var end = start + length;
	  var curve = new THREE.EllipseCurve(0, 0, // ax, aY
	  options.radiusTop + 0.1, options.radiusTop + 0.1, // xRadius, yRadius
	  start, end, // aStartAngle, aEndAngle
	  false // aClockwise
	  );
	  var points = curve.getSpacedPoints(dotNums);

	  var path = new THREE.Path();
	  var geometry = path.createGeometry(points);

	  var material = void 0;
	  var line = void 0;
	  if (isBottom) {
	    material = new THREE.LineBasicMaterial({
	      color: 0x0c71a1
	    });
	    line = new THREE.Line(geometry, material);
	  } else {
	    material = new THREE.LineDashedMaterial({
	      color: 0x000000,
	      dashSize: 3,
	      gapSize: 2,
	      linewidth: 2
	    });
	    line = new THREE.LineSegments(geometry, material);
	  }

	  line.rotateZ(-Math.PI / 2);
	  line.rotateY(-Math.PI / 2);
	  line.position.y = isBottom ? -options.height / 2 - 0.1 : options.height / 2 + 0.8;

	  return line;
	};

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	exports.default = function (options, segNum, pos) {
	  // const segNum = this.segNum
	  var angle = 0;
	  var group = {};
	  var length = 2 * Math.PI / segNum;

	  var pi = Math.PI;
	  var radius = options.radiusTop;
	  var fixZ = radius * Math.sin(pi / segNum);

	  for (var i = 0; i < segNum; i++) {
	    // group[i] = this.createCircleArc(angle, length)
	    group[i] = _shapeFactory2.default.create(_createType2.default.CircleArcOnCylinder, {
	      options: options,
	      start: angle,
	      length: length,
	      dotNums: 200 / segNum
	    });
	    // this.scene.add(group[i])
	    angle += 2 * Math.PI / segNum;
	  }

	  var lineGeometry = new THREE.Geometry();
	  var p1 = new THREE.Vector3(0, options.height / 2 + 0.8, 0);
	  var p2 = new THREE.Vector3(options.radiusTop, options.height / 2 + 0.8, 0);
	  lineGeometry.vertices.push(p1, p2);
	  lineGeometry.computeLineDistances();
	  var material = new THREE.LineDashedMaterial({
	    color: 0x000000,
	    dashSize: 4,
	    gapSize: 4,
	    linewidth: 2
	  });
	  var lineMesh = new THREE.Line(lineGeometry, material);
	  lineMesh.position.x = pos[0].offsetX - _config2.default.fixPos.x;
	  lineMesh.position.z = pos[0].offsetZ + 1 + _config2.default.fixPos.z;
	  lineMesh.rotateY(-Math.PI / segNum);
	  // console.log('xxxxxxxxxx-zzzzzzzzz', pos[0].offsetX - config.fixPos.x, pos[0].offsetZ + 1 + config.fixPos.z)

	  var lineMesh2 = new THREE.Line(lineGeometry, material);
	  lineMesh2.position.x = pos[0].offsetX - _config2.default.fixPos.x;
	  lineMesh2.position.z = pos[0].offsetZ - segNum * fixZ - 0.3 + _config2.default.fixPos.z;
	  lineMesh2.rotateY(-Math.PI / segNum);

	  return {
	    group: group,
	    lineMeshLeft: lineMesh,
	    lineMeshRight: lineMesh2
	  };
	};

	var _shapeFactory = __webpack_require__(5);

	var _shapeFactory2 = _interopRequireDefault(_shapeFactory);

	var _createType = __webpack_require__(6);

	var _createType2 = _interopRequireDefault(_createType);

	var _config = __webpack_require__(3);

	var _config2 = _interopRequireDefault(_config);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	exports.default = function (options, hasLine, angle, faceColor, segNum) {
	  angle = angle !== undefined ? angle : 0;
	  faceColor = faceColor !== undefined ? faceColor : 0x000000;
	  options.thetaStart = angle;
	  options.thetaLength = Math.PI * 2 / segNum;
	  // var twoPi = Math.PI * 2;
	  var group = new THREE.Object3D();

	  var faceMaterial = new THREE.MeshPhongMaterial({
	    color: 0x8ed6ff,
	    side: THREE.DoubleSide,
	    shading: THREE.FlatShading
	  });
	  faceMaterial.emissive.setHex(faceColor);
	  var faceGeometry = (0, _CylinderGeometry2.default)(options);
	  var faceMesh = new THREE.Mesh(faceGeometry, faceMaterial);
	  faceMesh.castShadow = true;
	  group.add(faceMesh);
	  if (hasLine) {
	    var lineGeometry = (0, _CylinderLine2.default)(options);
	    var lineMesh = new THREE.Line(lineGeometry, new THREE.LineBasicMaterial({
	      color: 0x0c71a1
	    }));
	    group.add(lineMesh);
	  }
	  return group;
	};

	var _CylinderGeometry = __webpack_require__(13);

	var _CylinderGeometry2 = _interopRequireDefault(_CylinderGeometry);

	var _CylinderLine = __webpack_require__(8);

	var _CylinderLine2 = _interopRequireDefault(_CylinderLine);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 13 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	/* global Uint32Array, Uint16Array, Float32Array */
	function CylinderGeometry(options) {
	  var geometry = new THREE.BufferGeometry();

	  var radiusTop = options.radiusTop !== undefined ? options.radiusTop : 20;
	  var radiusBottom = options.radiusBottom !== undefined ? options.radiusBottom : 20;
	  var height = options.height !== undefined ? options.height : 100;
	  var radialSegments = Math.floor(options.radialSegments) || 8;
	  var heightSegments = Math.floor(options.heightSegments) || 1;
	  var openEnded = options.openEnded !== undefined ? options.openEnded : false;
	  var thetaStart = options.thetaStart !== undefined ? options.thetaStart : 0.0;
	  var thetaLength = options.thetaLength !== undefined ? options.thetaLength : 2.0 * Math.PI;

	  var scope = geometry;

	  var nbCap = 0;

	  if (openEnded === false) {
	    if (radiusTop > 0) nbCap++;
	    if (radiusBottom > 0) nbCap++;
	  }

	  // 顶点数计算
	  var vertexCount = calculateVertexCount() + 2;
	  // 边数计算
	  var indexCount = calculateIndexCount() + 12;

	  var indices = new THREE.BufferAttribute(new (indexCount > 65535 ? Uint32Array : Uint16Array)(indexCount), 1);

	  // 存放所有顶点坐标数据
	  var vertices = new THREE.BufferAttribute(new Float32Array(vertexCount * 3), 3);

	  var normals = new THREE.BufferAttribute(new Float32Array(vertexCount * 3), 3);
	  var uvs = new THREE.BufferAttribute(new Float32Array(vertexCount * 2), 2);

	  // 辅助变量

	  var index = 0;
	  var indexOffset = 0;
	  var indexArray = [];
	  var halfHeight = height / 2;

	  var groupStart = 0;

	  // 创建圆柱体

	  generateTorso();

	  if (openEnded === false) {
	    if (radiusTop > 0) generateCap(true);
	    if (radiusBottom > 0) generateCap(false);
	  }

	  // 建立实体
	  geometry.setIndex(indices);
	  geometry.addAttribute('position', vertices);
	  geometry.addAttribute('normal', normals);
	  geometry.addAttribute('uv', uvs);
	  function calculateVertexCount() {
	    var count = (radialSegments + 1) * (heightSegments + 1);

	    if (openEnded === false) {
	      count += (radialSegments + 1) * nbCap + radialSegments * nbCap;
	    }

	    return count;
	  }

	  // 边数
	  function calculateIndexCount() {
	    var count = radialSegments * heightSegments * 2 * 3;

	    if (openEnded === false) {
	      count += radialSegments * nbCap * 3;
	    }

	    return count;
	  }

	  // 生成侧面
	  function generateTorso() {
	    var x = void 0,
	        y = void 0;
	    var normal = new THREE.Vector3();
	    var vertex = new THREE.Vector3();

	    var groupCount = 0;

	    // 用于计算法向量
	    var tanTheta = (radiusBottom - radiusTop) / height;

	    // 建立顶点，法向量，面

	    for (y = 0; y <= heightSegments; y++) {
	      var indexRow = [];

	      var v = y / heightSegments;

	      // 计算当前角度
	      var radius = v * (radiusBottom - radiusTop) + radiusTop;

	      for (x = 0; x <= radialSegments; x++) {
	        var u = x / radialSegments;

	        vertex.x = radius * Math.sin(u * thetaLength + thetaStart);
	        vertex.y = -v * height + halfHeight;
	        vertex.z = radius * Math.cos(u * thetaLength + thetaStart);
	        vertices.setXYZ(index, vertex.x, vertex.y, vertex.z);

	        // 法向量
	        normal.copy(vertex);

	        // 顶部或者底部半径为0的情况

	        if (radiusTop === 0 && y === 0 || radiusBottom === 0 && y === heightSegments) {
	          normal.x = Math.sin(u * thetaLength + thetaStart);
	          normal.z = Math.cos(u * thetaLength + thetaStart);
	        }

	        normal.setY(Math.sqrt(normal.x * normal.x + normal.z * normal.z) * tanTheta).normalize();
	        normals.setXYZ(index, normal.x, normal.y, normal.z);

	        // uv
	        uvs.setXY(index, u, 1 - v);

	        // save index of vertex in respective row
	        indexRow.push(index);

	        // increase index
	        index++;
	      }

	      indexArray.push(indexRow);
	    }

	    // 建立面

	    for (x = 0; x < radialSegments; x++) {
	      for (y = 0; y < heightSegments; y++) {
	        // 通过顶点索引建立面
	        var i1 = indexArray[y][x];
	        var i2 = indexArray[y + 1][x];
	        var i3 = indexArray[y + 1][x + 1];
	        var i4 = indexArray[y][x + 1];

	        // face one
	        indices.setX(indexOffset, i1);
	        indexOffset++;
	        indices.setX(indexOffset, i2);
	        indexOffset++;
	        indices.setX(indexOffset, i4);
	        indexOffset++;

	        // face two
	        indices.setX(indexOffset, i2);
	        indexOffset++;
	        indices.setX(indexOffset, i3);
	        indexOffset++;
	        indices.setX(indexOffset, i4);
	        indexOffset++;

	        // update counters
	        groupCount += 6;
	      }
	    }

	    var uv = new THREE.Vector2();

	    var length1 = indexArray.length;
	    var length2 = indexArray[0].length;

	    var vertexTop = new THREE.Vector3(0, halfHeight, 0);
	    vertices.setXYZ(index, vertexTop.x, vertexTop.y, vertexTop.z);
	    // normal
	    normals.setXYZ(index, 0, 1, 0);
	    // uv
	    uv.x = 0.5;
	    uv.y = 0.5;
	    uvs.setXY(index, uv.x, uv.y);
	    var topCount = index;
	    index++;

	    var vertexBottom = new THREE.Vector3(0, -halfHeight, 0);
	    vertices.setXYZ(index, vertexBottom.x, vertexBottom.y, vertexBottom.z);
	    // normal
	    normals.setXYZ(index, 0, -1, 0);
	    // uv
	    uv.x = 0.5;
	    uv.y = 0.5;
	    uvs.setXY(index, uv.x, uv.y);
	    var bottomCount = index;
	    index++;

	    var p1 = indexArray[0][0];
	    var p2 = indexArray[0][length2 - 1];
	    var p3 = indexArray[length1 - 1][length2 - 1];
	    var p4 = indexArray[length1 - 1][0];

	    // 闭合面1
	    indices.setX(indexOffset, p1);
	    indexOffset++;
	    indices.setX(indexOffset, p4);
	    indexOffset++;
	    indices.setX(indexOffset, topCount);
	    indexOffset++;

	    // 闭合面2
	    indices.setX(indexOffset, topCount);
	    indexOffset++;
	    indices.setX(indexOffset, p2);
	    indexOffset++;
	    indices.setX(indexOffset, bottomCount);
	    indexOffset++;

	    // 闭合面3
	    indices.setX(indexOffset, topCount);
	    indexOffset++;
	    indices.setX(indexOffset, bottomCount);
	    indexOffset++;
	    indices.setX(indexOffset, p4);
	    indexOffset++;

	    // 闭合面4
	    indices.setX(indexOffset, p2);
	    indexOffset++;
	    indices.setX(indexOffset, bottomCount);
	    indexOffset++;
	    indices.setX(indexOffset, p3);
	    indexOffset++;

	    groupCount += 4;

	    // add a group to the geometry. this will ensure multi material support
	    scope.addGroup(groupStart, groupCount, 0);

	    // calculate new start value for groups
	    groupStart += groupCount;
	  }

	  function generateCap(top) {
	    var x = void 0;
	    var uv = new THREE.Vector2();
	    var vertex = new THREE.Vector3();

	    var groupCount = 0;

	    var radius = top === true ? radiusTop : radiusBottom;
	    var sign = top === true ? 1 : -1;

	    // save the index of the first center vertex
	    var centerIndexStart = index;

	    // first we generate the center vertex data of the cap.
	    // because the geometry needs one set of uvs per face,
	    // we must generate a center vertex per face/segment

	    for (x = 1; x <= radialSegments; x++) {
	      // vertex
	      vertices.setXYZ(index, 0, halfHeight * sign, 0);

	      // normal
	      normals.setXYZ(index, 0, sign, 0);

	      // uv
	      uv.x = 0.5;
	      uv.y = 0.5;

	      uvs.setXY(index, uv.x, uv.y);

	      // increase index
	      index++;
	    }

	    // save the index of the last center vertex
	    var centerIndexEnd = index;

	    // now we generate the surrounding vertices, normals and uvs

	    for (x = 0; x <= radialSegments; x++) {
	      var u = x / radialSegments;
	      var theta = u * thetaLength + thetaStart;

	      var cosTheta = Math.cos(theta);
	      var sinTheta = Math.sin(theta);

	      // vertex
	      vertex.x = radius * sinTheta;
	      vertex.y = halfHeight * sign;
	      vertex.z = radius * cosTheta;
	      vertices.setXYZ(index, vertex.x, vertex.y, vertex.z);

	      // normal
	      normals.setXYZ(index, 0, sign, 0);

	      // uv
	      uv.x = cosTheta * 0.5 + 0.5;
	      uv.y = sinTheta * 0.5 * sign + 0.5;
	      uvs.setXY(index, uv.x, uv.y);

	      // increase index
	      index++;
	    }

	    // generate indices

	    for (x = 0; x < radialSegments; x++) {
	      var c = centerIndexStart + x;
	      var i = centerIndexEnd + x;

	      if (top === true) {
	        // face top
	        indices.setX(indexOffset, i);
	        indexOffset++;
	        indices.setX(indexOffset, i + 1);
	        indexOffset++;
	        indices.setX(indexOffset, c);
	        indexOffset++;
	      } else {
	        // face bottom
	        indices.setX(indexOffset, i + 1);
	        indexOffset++;
	        indices.setX(indexOffset, i);
	        indexOffset++;
	        indices.setX(indexOffset, c);
	        indexOffset++;
	      }

	      // update counters
	      groupCount += 3;
	    }

	    // add a group to the geometry. this will ensure multi material support
	    scope.addGroup(groupStart, groupCount, top === true ? 1 : 2);

	    // calculate new start value for groups
	    groupStart += groupCount;
	  }

	  return geometry;
	}

	exports.default = CylinderGeometry;

/***/ }),
/* 14 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	exports.default = function (options, presenter, type, basePath, x, z) {
	  var url = basePath + '/resources/wood/images/r.png';
	  var loader = new THREE.TextureLoader();
	  loader.load(url, function (texture) {
	    var plane = new THREE.PlaneGeometry(38, 120);
	    var material = new THREE.MeshBasicMaterial({ map: texture, transparent: true, opacity: 1 });
	    var mesh = new THREE.Mesh(plane, material);
	    mesh.rotateZ(-Math.PI / 2);
	    mesh.rotateY(-Math.PI / 2);

	    mesh.position.x = x;
	    mesh.position.y = options.height / 2 + 2;
	    mesh.position.z = z;
	    if (type === 'left') {
	      presenter.leftCylinderGroups.add(mesh);
	    } else {
	      presenter.threeManager.scene && presenter.threeManager.scene.add(mesh);
	    }
	  });
	};

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	exports.default = function (options, presenter, type, basePath, x, z) {
	  var name = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 'h';

	  var loader = new THREE.TextureLoader();
	  var url = basePath + '/resources/wood/images/' + name + '.png';
	  loader.load(basePath + '/resources/wood/images/h.png', function (texture) {
	    var arrowWidth = 20;
	    var plane = new THREE.PlaneGeometry(arrowWidth, 200);
	    var material = new THREE.MeshBasicMaterial({ map: texture, transparent: true });
	    var meshArrow = new THREE.Mesh(plane, material);

	    var mesh = new THREE.Object3D();
	    mesh.add(meshArrow);
	    // mesh.add(textMesh)
	    mesh.position.x = x;
	    mesh.position.z = z;
	    mesh.rotation.y = -Math.PI / 2;
	    mesh.name = 'arrow-' + type;

	    loader.load(url, function (texture) {
	      var textWidth = 84;
	      var plane = new THREE.PlaneGeometry(textWidth, textWidth);
	      var material = new THREE.MeshBasicMaterial({ map: texture, transparent: true });
	      var meshText = new THREE.Mesh(plane, material);
	      meshText.position.x = -(textWidth + arrowWidth) / 2;
	      mesh.add(meshText);
	    });

	    if (type === 'h-cube') {
	      presenter['arrow-' + type] = mesh;
	      presenter.leftCylinderGroups.add(mesh);
	    } else {
	      presenter['arrow-' + type] = mesh;
	      presenter.threeManager.scene.add(mesh);
	    }
	  }, onProgressCallback, onErrorCallback);
	};

	var _drawContext = __webpack_require__(16);

	var _drawContext2 = _interopRequireDefault(_drawContext);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * Created by hellohy on 2017/5/26.
	 */
	function onProgressCallback() {}

	function onErrorCallback(e) {
	  console.error(e);
	}

/***/ }),
/* 16 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	exports.default = function (message, parameters) {
	  var scale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2;

	  var canvas = document.createElement('canvas');
	  var size = 256; // CHANGED
	  canvas.width = size;
	  canvas.height = size;
	  var context = canvas.getContext('2d');
	  context.fillStyle = parameters.fillStyle ? parameters.fillStyle : '#000000'; // CHANGED
	  context.strokeStyle = parameters.strokeStyle ? parameters.strokeStyle : '#000000';
	  context.textAlign = 'center';
	  var fontSize = parameters.fontSize ? parameters.fontSize : 24;
	  var font = parameters.fontFamily ? parameters.fontFamily : 'microsoft yahei';
	  var bold = parameters.bold ? 'bold ' : '';
	  context.font = bold + fontSize + 'px ' + font;
	  context.lineWidth = parameters.lineWidth ? parameters.lineWidth : 1;

	  if (parameters.strokeStyle) {
	    context.strokeText(message, size / 2, size / 2 + fontSize / 2);
	  }
	  context.fillText(message, size / 2, size / 2 + fontSize / 2);

	  var amap = new THREE.Texture(canvas);
	  amap.needsUpdate = true;
	  var plane = new THREE.Mesh(new THREE.PlaneGeometry(size / 2, size / 2), new THREE.MeshBasicMaterial({
	    map: amap,
	    transparent: true,
	    opacity: 1
	  }));

	  plane.scale.set(2, 2, 1); // CHANGED
	  plane.textLength = context.measureText(message).width;
	  return plane;
	};

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = cylinderFormula;

	var _shapeFactory = __webpack_require__(5);

	var _shapeFactory2 = _interopRequireDefault(_shapeFactory);

	var _createType = __webpack_require__(6);

	var _createType2 = _interopRequireDefault(_createType);

	var _config = __webpack_require__(3);

	var _config2 = _interopRequireDefault(_config);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/* global TWEEN */
	/**
	 *@函数描述：公式的推导
	 */
	function cylinderFormula(times) {
	  var self = this;
	  self.isAnimate = true;
	  times = times !== undefined ? times : [2500, 3000, 5000, 3000, 2000];
	  this.$view.find('._js_cylinder_formula').siblings().addClass('click_disabled');
	  if (times[0] === 0) {
	    this.$view.find('.cv_top_area').addClass('pos_left_end');
	  } else {
	    this.$view.find('.cv_top_area').addClass('pos_left');
	  }

	  this.currentState = 3;
	  this.computePos();
	  var deltaX = 100;

	  var newPos1 = this.formulaPos1;
	  var newPos2 = this.formulaPos2;

	  var tempXR = newPos2[0].offsetX - self.parameters.radiusTop;
	  var tempZR = newPos2[0].offsetZ;

	  var tempXL = newPos1[self.segNum - 1].offsetX - self.parameters.radiusTop;
	  var tempZL = newPos1[self.segNum - 1].offsetZ;

	  // 右边圆柱体
	  self.addRightCylinder(true, true, newPos2[0]);
	  self.rightCylinderGroup.visible = false;

	  self.arrowHOptions = {
	    tempXR: tempXR,
	    tempZR: tempZR,
	    tempXL: tempXL,
	    tempZL: tempZL
	  };
	  self.tween0 = new TWEEN.Tween({ pos: 0 }).to({ pos: deltaX }, times[0]).easing(TWEEN.Easing.Cubic.InOut).onUpdate(function () {
	    self.leftCylinderGroups.position.set(this.pos, 0, -this.pos * 1.6);
	    self.leftCylinderGroups.rotation.y = _config2.default.cubeRotateAngle;
	  }).onComplete(function () {
	    self.$view.find('.cv_right_area').removeClass('hide_visibility');
	    // left arrow
	    _shapeFactory2.default.create(_createType2.default.ArrowR, {
	      options: self.parameters,
	      presenter: self,
	      basePath: self.basePath,
	      type: 'left',
	      x: tempXL + 60 - _config2.default.fixPos.x,
	      z: tempZL - 10 + _config2.default.fixPos.z
	    });
	    // right arrow
	    _shapeFactory2.default.create(_createType2.default.ArrowR, {
	      options: self.parameters,
	      presenter: self,
	      basePath: self.basePath,
	      type: 'right',
	      x: tempXR + 60, // 60为箭头所在planeGeometry的高120的一半
	      z: tempZR - 10
	    });

	    self.rightCylinderGroup.visible = true;
	    // 右边圆柱体上的半圆虚线
	    var arc1 = _shapeFactory2.default.create(_createType2.default.CircleArcOnCylinder, {
	      // start: false,
	      // length: false,
	      dotNums: 200,
	      options: self.parameters
	    });
	    arc1.position.x = newPos2[0].offsetX;
	    arc1.position.z = newPos2[0].offsetZ;
	    self.threeManager.scene.add(arc1);

	    // 右边圆柱体下表面圆周线
	    var arcBottom = _shapeFactory2.default.create(_createType2.default.CircleArcOnCylinder, {
	      dotNums: 1000,
	      options: self.parameters,
	      isBottom: true
	    });
	    arcBottom.position.x = newPos2[0].offsetX;
	    arcBottom.position.z = newPos2[0].offsetZ;
	    self.threeManager.scene.add(arcBottom);

	    // 左边分割后的圆柱体上的虚线
	    self.leftCylinderTopMeshes = _shapeFactory2.default.create(_createType2.default.CircleArcOnCube, {
	      options: self.parameters,
	      segNum: self.segNum,
	      pos: newPos1
	    });
	    var arc2 = self.leftCylinderTopMeshes.group;
	    for (var i in arc2) {
	      arc2[i].rotateZ(newPos1[i].rotateY);
	      arc2[i].position.x = newPos1[i].offsetX - _config2.default.fixPos.x;
	      arc2[i].position.z = newPos1[i].offsetZ + _config2.default.fixPos.z;
	      self.leftCylinderGroups.add(arc2[i]);
	    }
	    self.leftCylinderGroups.add(self.leftCylinderTopMeshes.lineMeshLeft);
	    self.leftCylinderGroups.add(self.leftCylinderTopMeshes.lineMeshRight);
	    // self.leftCylinderGroups.position.set(this.pos, 0, -this.pos * 1.6)

	    setTimeout(function () {
	      self.isAnimate = false;
	      self.$view.find('._js_cylinder_formula').siblings().removeClass('click_disabled');
	    }, 500);
	    self.isRender = false;
	    self.$view.find('.cv_top_area').addClass('pos_left_end').removeClass('pos_left');
	  });
	  self.tween0.start();
	} /**
	   * Created by hellohy on 2017/5/27.
	   */

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = cylinderFormulaInPad;

	var _shapeFactory = __webpack_require__(5);

	var _shapeFactory2 = _interopRequireDefault(_shapeFactory);

	var _createType = __webpack_require__(6);

	var _createType2 = _interopRequireDefault(_createType);

	var _config = __webpack_require__(3);

	var _config2 = _interopRequireDefault(_config);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 *@函数描述：学生端公式推导状态恢复
	 */
	function cylinderFormulaInPad() {
	  var self = this;
	  self.isAnimate = true;

	  this.$view.find('._js_cylinder_formula').siblings().addClass('click_disabled');
	  this.$view.find('.cv_top_area').addClass('pos_left_end');
	  this.currentState = 3;
	  this.computePos();
	  var deltaX = 100;

	  var newPos1 = this.formulaPos1;
	  var newPos2 = this.formulaPos2;

	  var tempXR = newPos2[0].offsetX - self.parameters.radiusTop;
	  var tempZR = newPos2[0].offsetZ;

	  var tempXL = newPos1[self.segNum - 1].offsetX - self.parameters.radiusTop;
	  var tempZL = newPos1[self.segNum - 1].offsetZ;

	  // 右边圆柱体
	  self.addRightCylinder(true, true, newPos2[0]);
	  self.rightCylinderGroup.visible = false;

	  self.arrowHOptions = {
	    tempXR: tempXR,
	    tempZR: tempZR,
	    tempXL: tempXL,
	    tempZL: tempZL
	  };
	  self.leftCylinderGroups.position.set(deltaX, 0, -deltaX * 1.6);
	  self.leftCylinderGroups.rotation.y = _config2.default.cubeRotateAngle;

	  self.$view.find('.cv_right_area').removeClass('hide_visibility');
	  // left arrow
	  _shapeFactory2.default.create(_createType2.default.ArrowR, {
	    options: self.parameters,
	    presenter: self,
	    basePath: self.basePath,
	    type: 'left',
	    x: tempXL + 60 - _config2.default.fixPos.x,
	    z: tempZL - 10 + _config2.default.fixPos.z
	  });
	  // right arrow
	  _shapeFactory2.default.create(_createType2.default.ArrowR, {
	    options: self.parameters,
	    presenter: self,
	    basePath: self.basePath,
	    type: 'right',
	    x: tempXR + 60, // 60为箭头所在planeGeometry的高120的一半
	    z: tempZR - 10
	  });

	  self.rightCylinderGroup.visible = true;
	  // 右边圆柱体上的半圆虚线
	  var arc1 = _shapeFactory2.default.create(_createType2.default.CircleArcOnCylinder, {
	    // start: false,
	    // length: false,
	    dotNums: 200,
	    options: self.parameters
	  });
	  arc1.position.x = newPos2[0].offsetX;
	  arc1.position.z = newPos2[0].offsetZ;
	  self.threeManager.scene.add(arc1);

	  // 右边圆柱体下表面圆周线
	  var arcBottom = _shapeFactory2.default.create(_createType2.default.CircleArcOnCylinder, {
	    dotNums: 1000,
	    options: self.parameters,
	    isBottom: true
	  });
	  arcBottom.position.x = newPos2[0].offsetX;
	  arcBottom.position.z = newPos2[0].offsetZ;
	  self.threeManager.scene.add(arcBottom);

	  // 左边分割后的圆柱体上的虚线
	  self.leftCylinderTopMeshes = _shapeFactory2.default.create(_createType2.default.CircleArcOnCube, {
	    options: self.parameters,
	    segNum: self.segNum,
	    pos: newPos1
	  });
	  var arc2 = self.leftCylinderTopMeshes.group;
	  for (var i in arc2) {
	    arc2[i].rotateZ(newPos1[i].rotateY);
	    arc2[i].position.x = newPos1[i].offsetX - _config2.default.fixPos.x;
	    arc2[i].position.z = newPos1[i].offsetZ + _config2.default.fixPos.z;
	    self.leftCylinderGroups.add(arc2[i]);
	  }
	  self.leftCylinderGroups.add(self.leftCylinderTopMeshes.lineMeshLeft);
	  self.leftCylinderGroups.add(self.leftCylinderTopMeshes.lineMeshRight);
	  // self.leftCylinderGroups.position.set(this.pos, 0, -this.pos * 1.6)

	  self.isAnimate = false;
	  self.$view.find('._js_cylinder_formula').siblings().removeClass('click_disabled');
	  self.$view.find('.cv_top_area').addClass('pos_left_end').removeClass('pos_left');

	  /*  function stopRender () {
	      self.isRender = false
	    }
	  
	    self.time = setTimeout(stopRender, 3000)*/
	} /**
	   * Created by hellohy on 2017/5/27.
	   */

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
	reated by hellohy on 2017/5/26.
	


	var _utils = __webpack_require__(4);

	var _utils2 = _interopRequireDefault(_utils);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var ThreeManager = function () {
	  function ThreeManager($dom) {
	    _classCallCheck(this, ThreeManager);

	    this.domWidth = $dom.width();
	    this.domHeight = $dom.height();
	    this.renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
	    this.renderer.setSize(this.domWidth, this.domHeight);
	    // this.renderer.setClearColor(0xb8cdde, 1.0)
	    this.renderer.setClearColor(0xbfd3e2, 1.0);
	    this.renderer.shadowMap.enabled = true;
	    this.renderer.shadowMap.type = THREE.PCFShadowMap;
	    $dom.append(this.renderer.domElement);
	    this.initScene();
	    this.initCamera();
	    this.initLight();
	  }

	  _createClass(ThreeManager, [{
	    key: 'initScene',
	    value: function initScene() {
	      this.scene = new THREE.Scene();
	      this.scene.fog = new THREE.FogExp2(0x000000, 0.6);
	    }
	  }, {
	    key: 'initCamera',
	    value: function initCamera() {
	      var camFactor = (this.domHeight - 56) / 222;
	      var camera = {
	        left: -this.domWidth,
	        right: this.domWidth,
	        top: this.domHeight,
	        bottom: -this.domHeight
	      };
	      this.camera = new THREE.OrthographicCamera(camera.left / camFactor, camera.right / camFactor, camera.top / camFactor, camera.bottom / camFactor, 1, 1000);
	      this.resetCamera();
	    }
	  }, {
	    key: 'initLight',
	    value: function initLight() {
	      var spotLight1 = new THREE.SpotLight(0x555555);
	      spotLight1.position.set(400, 600, -600);
	      this.scene.add(spotLight1);

	      var spotLight2 = new THREE.SpotLight(0x333333);
	      spotLight2.position.set(0, 0, -600);
	      this.scene.add(spotLight2);

	      var spotLight3 = new THREE.SpotLight(0x555555);
	      spotLight3.position.set(-400, 0, -600);
	      this.scene.add(spotLight3);

	      /*    const spotLight4 = new THREE.SpotLight(0x999999)
	       spotLight4.position.set(400, 600, 600)
	       spotLight4.intensity = 0.2
	       this.scene.add(spotLight4)*/

	      var ambiColor = '#0c0c0c';
	      var ambientLight = new THREE.AmbientLight(ambiColor);
	      this.scene.add(ambientLight);

	      // const axisHelper = new THREE.AxisHelper(500)
	      // this.scene.add(axisHelper)
	    }
	  }, {
	    key: 'resetCamera',
	    value: function resetCamera() {
	      this.camera.position.x = -300;
	      this.camera.position.y = 200;
	      this.camera.position.z = 1;
	      this.camera.lookAt(this.scene.position);
	    }
	  }, {
	    key: 'destroy',
	    value: function destroy() {
	      $(this.renderer.domElement).remove();
	      _utils2.default.destroyThreeObject(this.scene);

	      this.scene = null;
	      if (this.renderer.hasOwnProperty('dispose')) {
	        this.renderer.dispose();
	      }
	      this.renderer = null;
	      this.camera = null;
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      if (this.renderer) {
	        this.renderer.clear();
	        this.renderer.render(this.scene, this.camera);
	        console.log('render');
	      }
	    }
	  }]);

	  return ThreeManager;
	}();

	exports.default = ThreeManager;

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	exports.default = function (options) {
	  var tempXR = options.tempXR;
	  var tempZR = options.tempZR;
	  var tempXL = options.tempXL;
	  var tempZL = options.tempZL;
	  var lang = icCreatePlayer.lang;
	  // 虚线h效果
	  _shapeFactory2.default.create(_createType2.default.ArrowH, {
	    options: this.parameters,
	    presenter: this,
	    type: 'h-cylinder',
	    basePath: this.basePath,
	    x: tempXR - 1,
	    // z: tempZR - 11.5 - 15,
	    z: tempZR,
	    name: 'hc_' + lang
	  });
	  _shapeFactory2.default.create(_createType2.default.ArrowH, {
	    options: this.parameters,
	    presenter: this,
	    type: 'h-cube',
	    basePath: this.basePath,
	    x: tempXL - 1 - _config2.default.fixPos.x,
	    // z: tempZL - 12 + config.fixPos.z - 16,
	    z: tempZL + _config2.default.fixPos.z,
	    name: 'hl_' + lang
	  });
	};

	var _shapeFactory = __webpack_require__(5);

	var _shapeFactory2 = _interopRequireDefault(_shapeFactory);

	var _createType = __webpack_require__(6);

	var _createType2 = _interopRequireDefault(_createType);

	var _config = __webpack_require__(3);

	var _config2 = _interopRequireDefault(_config);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 21 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	exports.default = function () {
	  var testData = {
	    'segN': 8,
	    'currentState': 3,
	    'isAnimate': false,
	    'clickCount': [[1, 1, 1], [1, 1, 0], [0, 0, 0], [1, 1, 1]],
	    'guideInfo': {
	      firstGuide: false,
	      step1: false,
	      step2: false,
	      isView: false,
	      buttonStep1Active: false
	    },
	    'deduceInfo': {
	      question1: true,
	      question2: true,
	      question3: true,
	      question4: true,
	      question5: true,
	      cylinderActive: true,
	      cubeActive: true,
	      bottomActive: true,
	      packUpActive: true
	    }
	  };
	  if (1) {
	    this.stateRecover(testData);
	  }
	};

/***/ })
/******/ ]);]]></presenter><resources><file src="./resources/wood/images/bg_foot_item.png"/><file src="./resources/wood/images/cylinder_tool_operate_sprites.png"/><file src="./resources/wood/images/guide-hand.png"/><file src="./resources/wood/images/guide-img1.png"/><file src="./resources/wood/images/guide-img2.png"/><file src="./resources/wood/images/guide-q-active.png"/><file src="./resources/wood/images/guide-q.png"/><file src="./resources/wood/images/h-default.png"/><file src="./resources/wood/images/h.png"/><file src="./resources/wood/images/hc_zh_CN.png"/><file src="./resources/wood/images/hc.png"/><file src="./resources/wood/images/hl_zh_CN.png"/><file src="./resources/wood/images/hl.png"/><file src="./resources/wood/images/icon_arrow.png"/><file src="./resources/wood/images/one-key-active.png"/><file src="./resources/wood/images/one-key.png"/><file src="./resources/wood/images/pack-up-active.png"/><file src="./resources/wood/images/pack-up.png"/><file src="./resources/wood/images/r.png"/><file src="./resources/wood/images/vertical-thumb.png"/></resources></addon>