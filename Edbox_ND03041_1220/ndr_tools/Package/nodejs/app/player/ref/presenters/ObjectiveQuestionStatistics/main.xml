<?xml version='1.0' encoding='UTF-8' ?>
<addon id='ObjectiveQuestionStatistics'>
<properties>

                <property name="question_id" displayName="题目ID" type="string" isLocalized="false" />
                <property name="timer_type" displayName="计时类型" type="string" isLocalized="false" />
                <property name="time_limit" displayName="限制时长" type="string" isLocalized="false" />
                <property name="question_url" displayName="题目内容" type="jsonFile" isLocalized="false" />

</properties>

<dependencies>

<jsDependency>
    <javaScript  name="knockout" version="3.3.0" />
    <javaScript  name="objective-statistics" version="1.0.2.2" />
    <javaScript  name="objective-render" version="1.0.8" />
    <javaScript  name="PresentFlowersTips" version="1.0.0" />
</jsDependency>


</dependencies>

<css>

<![CDATA[.addon_ObjectiveQuestionStatistics {
  padding: 2.25em 3.625em 0;
  font-family: 'Microsoft YaHei', Helvetica, Arial, sans-serif; }
  .addon_ObjectiveQuestionStatistics .spend_time {
    position: absolute;
    color: #796647;
    left: 3.5em;
    top: 0;
    font-size: .91667em;
    font-family: 'Microsoft YaHei', Helvetica, Arial, sans-serif; }
    .addon_ObjectiveQuestionStatistics .spend_time em {
      font-style: normal; }
  .addon_ObjectiveQuestionStatistics ul {
    list-style: none;
    margin: 0;
    padding: 0; }
  .addon_ObjectiveQuestionStatistics .header {
    position: absolute;
    left: 3.625em;
    right: 3.625em;
    z-index: 2;
    text-align: center;
    top: 0;
    background: #f3e3c8;
    border: 1px solid #d3b388;
    border-bottom-color: #ead6b4;
    height: 2.25em;
    line-height: 2.25em; }
  .addon_ObjectiveQuestionStatistics .header > div {
    display: inline-block; }
  .addon_ObjectiveQuestionStatistics .header p {
    display: inline-block; }
  .addon_ObjectiveQuestionStatistics .submitCount {
    display: inline-block;
    font-size: .91667em;
    font-family: 'Microsoft YaHei', Helvetica, Arial, sans-serif;
    height: 2.25em;
    line-height: 2.25em;
    color: #796647; }
  .addon_ObjectiveQuestionStatistics .ver-line {
    border: 3px solid white;
    margin-left: 15px; }
  .addon_ObjectiveQuestionStatistics .chart_display {
    position: relative;
    height: 100%;
    /*min-height: 200px;*/
    margin: 0 auto;
    padding: 0;
    background: #f8efde;
    border: 1px solid #d3b388;
    border-top: none;
    box-sizing: border-box;
    border-radius: 0 0 .83333em .83333em;
    box-shadow: 0 1px 10px 0 rgba(0, 0, 0, 0.1); }
    .addon_ObjectiveQuestionStatistics .chart_display .hist_a {
      cursor: pointer; }
    .addon_ObjectiveQuestionStatistics .chart_display .hist_a:active {
      opacity: .7; }
    .addon_ObjectiveQuestionStatistics .chart_display .letter {
      font-family: 'Microsoft YaHei', Helvetica, Arial, sans-serif;
      display: inline-block;
      width: 1.33333em;
      height: 1.33333em;
      line-height: 1.25em;
      border-radius: 50%;
      border: 1px solid #887b66;
      font-size: 1.16667em;
      text-align: center;
      color: #887b66;
      vertical-align: middle; }
    .addon_ObjectiveQuestionStatistics .chart_display .noanswer .letter {
      width: auto;
      border: none; }
    .addon_ObjectiveQuestionStatistics .chart_display .color-red .letter {
      border: 1px solid #ff4b13;
      color: #ff4b13; }
    .addon_ObjectiveQuestionStatistics .chart_display .text {
      display: inline-block;
      font-size: .83333em;
      vertical-align: middle;
      color: #f3b055;
      font-family: 'Microsoft YaHei', Helvetica, Arial, sans-serif;
      margin-left: .5em; }
    .addon_ObjectiveQuestionStatistics .chart_display .color-red .text {
      color: #ff4b13; }
    .addon_ObjectiveQuestionStatistics .chart_display .text em {
      font-size: 1.58333em;
      font-style: normal; }
  .addon_ObjectiveQuestionStatistics .chart_display_mini {
    position: relative;
    height: 100%;
    min-height: 3.6em;
    margin: 0 auto;
    padding: 15px 20px;
    background: #f8efde;
    border: 1px solid #d3b388;
    border-top: none;
    box-sizing: border-box;
    border-radius: 0 0 .83333em .83333em;
    box-shadow: 0 1px 10px 0 rgba(0, 0, 0, 0.1); }
    .addon_ObjectiveQuestionStatistics .chart_display_mini .letter {
      font-family: 'Microsoft YaHei', Helvetica, Arial, sans-serif;
      display: inline-block;
      width: 1.33333em;
      height: 1.33333em;
      line-height: 1.25em;
      border-radius: 50%;
      border: 1px solid #887b66;
      font-size: 1.16667em;
      text-align: center;
      color: #887b66;
      vertical-align: middle; }
    .addon_ObjectiveQuestionStatistics .chart_display_mini .noanswer .letter {
      width: auto;
      border: none; }
    .addon_ObjectiveQuestionStatistics .chart_display_mini .color-red .letter {
      border: 1px solid #ff4b13;
      color: #ff4b13; }
    .addon_ObjectiveQuestionStatistics .chart_display_mini .text {
      display: inline-block;
      font-size: .83333em;
      vertical-align: middle;
      color: #f3b055;
      font-family: 'Microsoft YaHei', Helvetica, Arial, sans-serif;
      margin-left: .5em; }
    .addon_ObjectiveQuestionStatistics .chart_display_mini .color-red .text {
      color: #ff4b13; }
    .addon_ObjectiveQuestionStatistics .chart_display_mini .text em {
      font-size: 1.58333em;
      font-style: normal; }
  .addon_ObjectiveQuestionStatistics .dialog-shake {
    animation: shake .15s;
    -webkit-animation: shake .15s; }
  .addon_ObjectiveQuestionStatistics .analysis_wrapper {
    display: none;
    position: fixed;
    width: 100%;
    height: 100%;
    left: 0;
    top: 0;
    z-index: 320;
    background-color: rgba(25, 25, 25, 0.55);
    user-select: none;
    -webkit-user-select: none; }
    .addon_ObjectiveQuestionStatistics .analysis_wrapper .btn_sendflower {
      right: 3.8em;
      position: absolute;
      bottom: 3.33em;
      cursor: pointer;
      color: #9b8971;
      height: 3em; }
      .addon_ObjectiveQuestionStatistics .analysis_wrapper .btn_sendflower .flower {
        background: url(resources/images/icon_flower.png);
        background-size: 100% 100%;
        padding: 1.25em;
        display: inline-block;
        position: relative;
        vertical-align: middle;
        left: .1em;
        top: -.2em; }
      .addon_ObjectiveQuestionStatistics .analysis_wrapper .btn_sendflower .flower_panel {
        background: url(resources/images/icon_flower_panel.png);
        line-height: 3em;
        height: 3em;
        background-size: 100% 100%;
        padding: .5em 2.666em .5em .6em;
        position: relative;
        left: 2em; }
      .addon_ObjectiveQuestionStatistics .analysis_wrapper .btn_sendflower:active {
        opacity: .92; }
    .addon_ObjectiveQuestionStatistics .analysis_wrapper .close_analysis_wrapper {
      display: inline-block;
      position: absolute;
      width: 3.25em;
      height: 3.29167em;
      background: url(resources/images/icon_close.png) left top no-repeat;
      background-size: 100% auto;
      cursor: pointer;
      top: -1.04167em;
      right: -.83333em; }
    .addon_ObjectiveQuestionStatistics .analysis_wrapper .close_analysis_wrapper:active {
      background: url(resources/images/icon_close.png) left bottom no-repeat;
      background-size: 100% auto; }
    .addon_ObjectiveQuestionStatistics .analysis_wrapper .analysis_content {
      position: absolute;
      left: 50%;
      top: 50%;
      margin: -16.375em 0 0 -24.875em;
      width: 49.75em;
      height: 32.75em;
      padding: .83333em .95833em 1.125em;
      background: url(resources/images/bg_pop_square.png) no-repeat;
      background-size: 100% 100%;
      z-index: 99;
      box-sizing: border-box; }
      .addon_ObjectiveQuestionStatistics .analysis_wrapper .analysis_content * {
        box-sizing: border-box; }
      .addon_ObjectiveQuestionStatistics .analysis_wrapper .analysis_content.class_a .statistic-stu-list {
        border-radius: .33333em; }
      .addon_ObjectiveQuestionStatistics .analysis_wrapper .analysis_content.class_c {
        height: 30.75em;
        margin-top: -15.375em; }
        .addon_ObjectiveQuestionStatistics .analysis_wrapper .analysis_content.class_c .statistic-stu-list {
          top: -0.3em; }
        .addon_ObjectiveQuestionStatistics .analysis_wrapper .analysis_content.class_c .statistic-stu-list {
          border-radius: .33333em; }
    .addon_ObjectiveQuestionStatistics .analysis_wrapper .statistic-item-content {
      position: absolute;
      left: 0;
      right: 0;
      top: 3.25em;
      margin: 1px 3.25em 0;
      z-index: 15; }
      .addon_ObjectiveQuestionStatistics .analysis_wrapper .statistic-item-content .tabbox > li {
        float: left;
        line-height: 2em;
        min-width: 4.79167em;
        margin-right: .25em;
        cursor: pointer; }
      .addon_ObjectiveQuestionStatistics .analysis_wrapper .statistic-item-content .tabbox > li.tab-on .tabbox_a {
        color: #ffaa4a;
        background: linear-gradient(to bottom, #ffeec3, #f8f2e4); }
      .addon_ObjectiveQuestionStatistics .analysis_wrapper .statistic-item-content .tabbox .tabbox_a {
        display: inline-block;
        width: 100%;
        padding: 0 .66667em;
        border-radius: .33333em .33333em 0 0;
        border: 1px solid rgba(206, 199, 180, 0.3);
        border-bottom: none;
        font-size: 1.16667em;
        color: #c6c2b7;
        text-align: center;
        font-weight: 700;
        background: linear-gradient(to bottom, #f3ecda, #eae5d7);
        box-sizing: border-box; }
    .addon_ObjectiveQuestionStatistics .analysis_wrapper .statistic-item-content ul {
      list-style: none;
      text-align: center; }
    .addon_ObjectiveQuestionStatistics .analysis_wrapper .display-none {
      visibility: hidden; }
    .addon_ObjectiveQuestionStatistics .analysis_wrapper .statistic-stu-list {
      position: absolute;
      left: 0;
      right: 0;
      bottom: 5em;
      top: 2em;
      overflow: auto;
      margin: 3.25em 3.25em 0;
      border-radius: 0 .33333em 0 0;
      border: 1px solid rgba(206, 199, 180, 0.3);
      background: #f8f2e4; }
      .addon_ObjectiveQuestionStatistics .analysis_wrapper .statistic-stu-list > ul {
        padding: 1.79167em 0 0 1.91667em; }
    .addon_ObjectiveQuestionStatistics .analysis_wrapper .statistic-stu-list li {
      display: inline-block;
      text-align: center;
      margin: 0 0.45em 1.66667em .41667em; }
      .addon_ObjectiveQuestionStatistics .analysis_wrapper .statistic-stu-list li .name {
        display: inline-block;
        width: 5.41667em;
        font-size: 1.04167em;
        color: #9b8971;
        vertical-align: middle;
        overflow: hidden;
        white-space: nowrap;
        text-overflow: ellipsis;
        text-align: left;
        padding-left: 0.5em; }
      .addon_ObjectiveQuestionStatistics .analysis_wrapper .statistic-stu-list li .head {
        display: inline-block;
        width: 1.58333em;
        height: 1.58333em;
        border-radius: 50%;
        background: #fffcf2;
        vertical-align: middle; }
        .addon_ObjectiveQuestionStatistics .analysis_wrapper .statistic-stu-list li .head img {
          width: 100%;
          height: 100%;
          border-radius: 50%;
          vertical-align: top; }
    .addon_ObjectiveQuestionStatistics .analysis_wrapper .statistic-page-list {
      left: 0;
      right: 0;
      position: absolute;
      bottom: 3.25em;
      margin: 3.25em 3.27em 0;
      padding: .33333em 0;
      border-radius: 0 0 .33333em .33333em;
      background: #f9f6ee;
      border: 1px solid rgba(206, 199, 180, 0.3);
      border-top: none; }
    .addon_ObjectiveQuestionStatistics .analysis_wrapper .statistic-page-list ul {
      list-style: none;
      text-align: center; }
    .addon_ObjectiveQuestionStatistics .analysis_wrapper .statistic-page-list li {
      display: inline-block;
      width: 2.33333em;
      height: 2.33333em;
      line-height: 2.33333em;
      font-size: 1.04167em;
      color: #887b67;
      vertical-align: top;
      cursor: pointer; }
    .addon_ObjectiveQuestionStatistics .analysis_wrapper .statistic-page-list li.on {
      color: #fe9a0e; }
    .addon_ObjectiveQuestionStatistics .analysis_wrapper .statistic-page-list li.previous {
      background-image: url(resources/images/icon_previous.png);
      background-size: 100% auto; }
    .addon_ObjectiveQuestionStatistics .analysis_wrapper .statistic-page-list li.next {
      background-image: url(resources/images/icon_next.png);
      background-size: 100% auto; }
    .addon_ObjectiveQuestionStatistics .analysis_wrapper .statistic-page-list li.previous.off, .addon_ObjectiveQuestionStatistics .analysis_wrapper .statistic-page-list li.next.off {
      opacity: .5;
      filter: alpha(opacity=50); }
    .addon_ObjectiveQuestionStatistics .analysis_wrapper .statistic-page-list li.previous:active, .addon_ObjectiveQuestionStatistics .analysis_wrapper .statistic-page-list li.next:active {
      opacity: .5;
      filter: alpha(opacity=50); }
    .addon_ObjectiveQuestionStatistics .analysis_wrapper .statistic-page-list li:active {
      color: #ccb28a; }
  .addon_ObjectiveQuestionStatistics .answer_detail_wrapper {
    user-select: none;
    -webkit-user-select: none;
    display: none;
    position: fixed;
    width: 100%;
    height: 100%;
    left: 0;
    top: 0;
    z-index: 320;
    background-color: rgba(25, 25, 25, 0.55); }
    .addon_ObjectiveQuestionStatistics .answer_detail_wrapper .detail_body {
      overflow-y: auto;
      height: calc(100% - 9em);
      padding: 0.3em 2.25em 2.25em 2.25em; }
    .addon_ObjectiveQuestionStatistics .answer_detail_wrapper .close_answer_detail_wrapper {
      display: inline-block;
      position: absolute;
      width: 2.5em;
      height: 2.5em;
      background: url(resources/images/icon_close.png) left top no-repeat;
      background-size: 100% auto;
      cursor: pointer; }
    .addon_ObjectiveQuestionStatistics .answer_detail_wrapper .close_answer_detail_wrapper:active {
      background: url(resources/images/icon_close.png) left bottom no-repeat;
      background-size: 100% auto; }
    .addon_ObjectiveQuestionStatistics .answer_detail_wrapper .answer_detail_content {
      position: relative;
      padding: .83333em .95833em 1.125em;
      background: url(resources/images/bg_pop_square.png) no-repeat;
      background-size: 100% 100%;
      z-index: 99;
      word-break: break-all;
      word-wrap: break-word; }
      .addon_ObjectiveQuestionStatistics .answer_detail_wrapper .answer_detail_content .detail_header {
        padding: 2.25em 2.25em 0em 2.25em; }
      .addon_ObjectiveQuestionStatistics .answer_detail_wrapper .answer_detail_content .detail_header h2 {
        line-height: 1.91667em;
        font-weight: 700;
        font-size: 1.08333em;
        color: #603300; }

.fill-detial-area {
  margin-bottom: 1em;
  padding: 15px 20px;
  box-sizing: content-box;
  color: #887b66; }
  .fill-detial-area .hist_list {
    margin-bottom: 1.16667em; }
  .fill-detial-area > .rp-ul {
    font-family: 'Microsoft YaHei', Helvetica, Arial, sans-serif;
    margin-bottom: .5em; }

.fill-detial-rp {
  font-size: 18px;
  color: #000000;
  font-weight: bolder; }

.fill-detial-rp-li {
  display: inline-block;
  width: 10%;
  /*height: 1.8em;*/
  line-height: 1.8em;
  color: #000000; }

.fill-mini-area {
  color: #887b66;
  font-family: 'Microsoft YaHei', Helvetica, Arial, sans-serif;
  margin-bottom: 1em; }

.fill-mini-ul {
  white-space: nowrap;
  width: 100%;
  overflow: hidden;
  position: relative;
  list-style: none;
  margin-bottom: .5em;
  padding: 15px 20px;
  box-sizing: content-box;
  cursor: pointer; }

.fill-mini-li {
  display: inline-block;
  height: 2em;
  line-height: 2em; }

.color-red {
  color: #ff4b13; }

ul.statistics_footbar_ul {
  margin: 0;
  padding: 0; }
  ul.statistics_footbar_ul.left {
    position: absolute;
    right: 64.8em;
    float: none;
    display: inline-block;
    white-space: nowrap;
    top: 0; }
  ul.statistics_footbar_ul .footbar-showAnalysis .com_btn_pic {
    background: url(resources/images/icon_analysis.png);
    background-size: 100% auto; }
  ul.statistics_footbar_ul .footbar-showResult .com_btn_pic {
    background: url(resources/images/icon_showresult.png);
    background-size: 100% auto; }
  ul.statistics_footbar_ul .footbar-examThisExam .com_btn_pic {
    background: url(resources/images/icon_exitexam.png);
    background-size: 100% auto; }
  ul.statistics_footbar_ul .footbar-exitThisExam .com_btn_pic {
    background: url(resources/images/icon_exitexam.png);
    background-size: 100% auto; }
  ul.statistics_footbar_ul .footbar-progress .com_btn_pic {
    background: url(resources/images/icon_progress.png);
    background-size: 100% auto; }
  ul.statistics_footbar_ul .footbar-endexam .com_btn_pic {
    background: url(resources/images/icon_endexam.png);
    background-size: 100% auto; }

.invisible {
  display: none !important; }

ul.statistics_footbar_ul li {
  display: inline-block;
  width: 4.08333em;
  height: 4.08333em;
  text-align: center;
  color: #0c0701;
  background: url(resources/images/btn_br_board.png) center top no-repeat;
  background-size: 100% auto;
  text-decoration: none;
  position: relative;
  cursor: pointer; }
  ul.statistics_footbar_ul li .com_btn_pic {
    display: inline-block;
    width: 2.28333em;
    height: 2.28333em;
    margin: 0 auto;
    background-size: 100% auto; }
  ul.statistics_footbar_ul li .com_btn_text {
    display: block;
    color: #0c0701;
    font-size: .66667em;
    line-height: 1.25em;
    font-family: 'Microsoft YaHei', Helvetica, Arial, sans-serif; }

ul.statistics_footbar_ul li:hover, ul.statistics_footbar_ul li:active {
  background-position: center -4.10417em; }

@keyframes shake {
  0% {
    transform: translate(0px, 0px); }

  15% {
    transform: translate(7px, 0px); }

  35% {
    transform: translate(10px, 0px); }

  50% {
    transform: translate(0px, 0px); }

  65% {
    transform: translate(-10px, 0px); }

  85% {
    transform: translate(-7px, 0px); }

  100% {
    transform: translate(0px, 0px); } }

@-webkit-keyframes shake {
  0% {
    transform: translate(0px, 0px); }

  15% {
    transform: translate(7px, 0px); }

  35% {
    transform: translate(10px, 0px); }

  50% {
    transform: translate(0px, 0px); }

  65% {
    transform: translate(-10px, 0px); }

  85% {
    transform: translate(-7px, 0px); }

  100% {
    transform: translate(0px, 0px); } }

.addon_Layout .layout_footbar, .addon_ObjectiveInteractionLayout .layout_footbar {
  left: auto !important; }
  .addon_Layout .layout_footbar.light_green, .addon_ObjectiveInteractionLayout .layout_footbar.light_green {
    background: -webkit-linear-gradient(top, #eaebe5, #e7e6e1);
    background: linear-gradient(to bottom, #eaebe5, #e7e6e1);
    border-top: 1px solid #e5e5e5;
    border-bottom: 1px solid #e5e5e5;
    height: 3.5em;
    right: 4.4em; }
    .addon_Layout .layout_footbar.light_green ul.statistics_footbar_ul, .addon_ObjectiveInteractionLayout .layout_footbar.light_green ul.statistics_footbar_ul {
      z-index: 8; }
      .addon_Layout .layout_footbar.light_green ul.statistics_footbar_ul.right:before, .addon_ObjectiveInteractionLayout .layout_footbar.light_green ul.statistics_footbar_ul.right:before {
        content: "";
        position: absolute;
        left: 0;
        top: -1px;
        bottom: -1px;
        right: -50em;
        background: -webkit-linear-gradient(top, #eaebe5, #e7e6e1);
        background: linear-gradient(to bottom, #eaebe5, #e7e6e1);
        border-top: 1px solid #e5e5e5;
        border-bottom: 1px solid #e5e5e5; }
      .addon_Layout .layout_footbar.light_green ul.statistics_footbar_ul.left, .addon_ObjectiveInteractionLayout .layout_footbar.light_green ul.statistics_footbar_ul.left {
        right: 67em; }
        .addon_Layout .layout_footbar.light_green ul.statistics_footbar_ul.left:before, .addon_ObjectiveInteractionLayout .layout_footbar.light_green ul.statistics_footbar_ul.left:before {
          content: "";
          position: absolute;
          left: -80em;
          top: -1px;
          bottom: -1px;
          right: 0;
          background: -webkit-linear-gradient(top, #eaebe5, #e7e6e1);
          background: linear-gradient(to bottom, #eaebe5, #e7e6e1);
          border-top: 1px solid #e5e5e5;
          border-bottom: 1px solid #e5e5e5; }
      .addon_Layout .layout_footbar.light_green ul.statistics_footbar_ul li, .addon_ObjectiveInteractionLayout .layout_footbar.light_green ul.statistics_footbar_ul li {
        background: none; }
        .addon_Layout .layout_footbar.light_green ul.statistics_footbar_ul li.footbar-exitThisExam .com_btn_pic, .addon_ObjectiveInteractionLayout .layout_footbar.light_green ul.statistics_footbar_ul li.footbar-exitThisExam .com_btn_pic {
          background: url(resources/images/icon_end_ts.png) center top no-repeat;
          background-size: 2.28333em auto; }
        .addon_Layout .layout_footbar.light_green ul.statistics_footbar_ul li.footbar-exitThisExam .com_btn_text, .addon_ObjectiveInteractionLayout .layout_footbar.light_green ul.statistics_footbar_ul li.footbar-exitThisExam .com_btn_text {
          color: #2f881d; }
        .addon_Layout .layout_footbar.light_green ul.statistics_footbar_ul li.footbar-exitThisExam:active .com_btn_pic, .addon_Layout .layout_footbar.light_green ul.statistics_footbar_ul li .light_green ul.statistics_footbar_ul li.footbar-exitThisExam.on .com_btn_pic, .addon_ObjectiveInteractionLayout .layout_footbar.light_green ul.statistics_footbar_ul li.footbar-exitThisExam:active .com_btn_pic, .addon_ObjectiveInteractionLayout .layout_footbar.light_green ul.statistics_footbar_ul li .light_green ul.statistics_footbar_ul li.footbar-exitThisExam.on .com_btn_pic {
          background-position: center -2.53333em; }
        .addon_Layout .layout_footbar.light_green ul.statistics_footbar_ul li.footbar-exitThisExam:active .com_btn_text, .addon_Layout .layout_footbar.light_green ul.statistics_footbar_ul li .light_green ul.statistics_footbar_ul li.footbar-exitThisExam.on .com_btn_text, .addon_ObjectiveInteractionLayout .layout_footbar.light_green ul.statistics_footbar_ul li.footbar-exitThisExam:active .com_btn_text, .addon_ObjectiveInteractionLayout .layout_footbar.light_green ul.statistics_footbar_ul li .light_green ul.statistics_footbar_ul li.footbar-exitThisExam.on .com_btn_text {
          color: #0c4900; }
]]>

</css>


<view>

<![CDATA[<div class="newstatistics_container">
    <!-- 头部统计 本题用时和提交人数 -->
    <div class="header">
        <div class="spend_time">
            <!-- ko text:answer_time --><!-- /ko -->：<span class="time_m"><em>05</em><!-- ko text:minute --><!-- /ko --></span>
            <span class="time_s"><em>21</em><!-- ko text:second --><!-- /ko --></span>
        </div>
        <div class="submitCount">
            <!-- ko text:submit_count --><!-- /ko -->：<span class="num"><em class="now">35</em></span><!-- ko text:person --><!-- /ko -->
        </div>
    </div>
    <!-- 头部统计结束 -->

    <!--统计区开始-->
    <div class="statistics-area">

        <!-- 图表展示，答题统计 -->
        <div class="chart_display_mini">
        </div>
        <!-- 图表展示结束 -->

        <!-- 图表展示，答题统计 -->
        <div class="chart_display">
        </div>
        <!-- 图表展示结束 -->


    </div>
    <!--统计区结束-->


    <!-- 查看做题情况 -->
    <div class="analysis_wrapper">

        <div class="analysis_content">
            <span class="close_analysis_wrapper"></span>
            <!--选项情况-->
            <div class="statistic-item-content"></div>
            <!--选项情况-->
            <!--学生列表-->
            <div class="statistic-stu-list">
                <!--<ul>
                    <li>52221</li>
                </ul>-->
            </div>
            <!--学生列表-->
            <!--分页按钮-->
            <div class="statistic-page-list">
                <ul>
                    <!--<li>1</li>-->
                </ul>
            </div>
            <!--分页按钮-->
            <span class="btn_sendflower">
                <span class="flower_panel">每人送一朵花<a class="flower"></a></span>
            </span>
        </div>
    </div>
    <!-- 查看做题情况结束 -->


    <!-- 显示解析 -->
    <div class="answer_detail_wrapper">

        <div class="answer_detail_content">
            <span class="close_answer_detail_wrapper"></span>
            <div class="detail_header">
                <h2 data-bind="text:analysis"></h2>
            </div>
            <div class="detail_body bar_style1"></div>
        </div>
    </div>
    <!-- 解析结束 -->

</div>]]>
</view>


<presenter>

<![CDATA[function AddonObjectiveQuestionStatistics_create()
{
    /**
     * 1.1.5
     * 获取Module当前的运行环境, 通过icPlayer提供的接口
     * 已定义的环境枚举包括
     * icCreatePlayer.RUNTIME.TEACHER_MOBILE(教师端)
     * icCreatePlayer.RUNTIME.STUDENT_MOBILE(学生端)
     * icCreatePlayer.RUNTIME.PROJECTION_MOBILE(投影端)
     * icCreatePlayer.RUNTIME.WEB(WEB端 )
     * icCreatePlayer.RUNTIME.TEACHER_PC(PC端)
     * 判断例子
     * if(currentRuntime === icCreatePlayer.RUNTIME.TEACHER_MOBILE)
     */
    var currentRuntime = player.getPlayerServices().getRuntime();
    var layoutHandler;
    var $view,$footbarUl,$analysis_content,$analysis_close,$answer_detail_content,$answer_detail_close,$footbarContainer;
    var $analysis_wrapper,$answer_detail_wrapper;
    var dialogWidth = 0,dialogHeight = 0;
    var examId;
    var footbar;
    var isApp = false,
        isTeacher = false,
        isStudent = false,
        isTeacherPc = false,
        isProjector = false,
        isWeb = false;
    var basePath;
    var i18nModel = {};//国际化数据模型

    switch (currentRuntime) {
        case icCreatePlayer.RUNTIME.TEACHER_MOBILE:
            isTeacher = true;
            isApp = true;
            break;
        case icCreatePlayer.RUNTIME.STUDENT_MOBILE:
            isStudent = true;
            isApp = true;
            break;
        case icCreatePlayer.RUNTIME.PROJECTION_MOBILE:
            isProjector = true;
            isApp = true;
            break;
        case icCreatePlayer.RUNTIME.WEB:
            isWeb = true;
            break;
        case icCreatePlayer.RUNTIME.TEACHER_PC:
            isTeacherPc = true;
            isApp = true;
            break;
        default:
            isApp = false;
            isWeb = false;
            isTeacherPc = false;
    }

    /**底部二级工具栏配置**/
    var footBarConfig = [];
    var mock,convertedData;
    //var fillRender, judgeRender, rankRender, choiceRender;//统计界面渲染器
    var questionType = "";
    var classE = ["linkup","pointsequencing","memorycard","spellpoem"];

    //监听器集合
    var bridgeListener = {};

    /**
     * native方法封装
     */
    var callNative = function(eventName, data) {
        if (isApp && Bridge && Bridge.callNative) {
            return Bridge.callNative('com.nd.pad.icr.ui.IcrJsBridge', eventName, data);
        }
        if (isTeacherPc && Bridge && Bridge.callNative) {
            return Bridge.callNative('com.nd.pad.icr.ui.IcrJsBridge', eventName, data);
        }
        return false;
    };
    var registerNativeListener = function(key, callback) {
        if (isApp && Bridge && Bridge.registerListener) {
            bridgeListener[key] = Bridge.registerListener(key, callback);
        }
        if (isTeacherPc && Bridge && Bridge.registerListener) {
            bridgeListener[key] = Bridge.registerListener(key, callback);
        }
    };
    var unbindNativeListener = function(key) {
        if (isApp && Bridge && Bridge.unRegisterListener) {
            if (!key) {
                $.each(bridgeListener, function(k, v) {
                    Bridge.unRegisterListener(k, bridgeListener[k]);
                });
                bridgeListener = {};
            } else {
                Bridge.unRegisterListener(key, bridgeListener[key]);
            }
        }
        if (isTeacherPc && Bridge && Bridge.unRegisterListener) {
            if (!key) {
                $.each(bridgeListener, function(k, v) {
                    Bridge.unRegisterListener(k, bridgeListener[k]);
                });
                bridgeListener = {};
            } else {
                Bridge.unRegisterListener(key, bridgeListener[key]);
            }
        }
    };

    /*u
     * 触发事件
     *
     * @param {string} eventName 事件名称
     * @param {Object} option 可选参数
     * @param {string} option.sourece
     添加model.ID为sourece
     */
    var fireEvent = function(eventName, option) {
        if (!option) {
            option = {};
        }
        option.source = presenter.model.ID;
        if(window.ClassroomUtils && ClassroomUtils.fireEvent){
            ClassroomUtils.fireEvent(eventName, option);
        }
    };

    var fireStuffEvent = function(item,usrIds,num){
        fireEvent("Stuff", {
            "source": "ObjectiveQuestionStatistics",
            "item":item,
            "value": {
                "num": num?num:1,//默认送1
                "userIds": usrIds // 答对的用户ID
            },
            isApp: true
        });
    };

    var QuestionType = {
        /**
         * 未知类型
         */
        UNKNOW: "unknow",

        /**
         * 选择题
         */
        CHOICE: "choice",

        /**
         * 多项选择
         */
        MULTIPLE_CHOICE: "multiplechoice",

        /**
         * 填空
         */
        TEXT_ENTRY: "textentry",

        /**
         *
         */
        MATCH: "match",

        /**
         * 排序
         */
        ORDER: "order",

        /**
         * 拼图
         */
        GRAPHIC_GAP_MATCH: "graphicgapmatch",

        /**
         * 是非题
         */
        JUDGE: "judge",

        /**
         * 作文题
         */
        COMPOSITION: "composition",

        /**
         * 连连看
         */
        LINKUP: "linkup",

        /**
         * 新排序
         */
        SEQENCING: "seqencing",

        /**
         * 表格题
         */
        TABLE: "table",

        /**
         * 竖式计算
         */
        ARITHMETIC: "arithmetic",

        /**
         * 记忆卡片
         */
        MEMORYCARD: "memorycard",

        /**
         * 字谜题
         */
        WORDPUZZLES: "wordpuzzles",

        /**
         * 疯狂猜词
         */
        GUESSWORD: "guessword",

        /**
         * 手写题
         */
        HANDWRITE: "handwrite",

        /**
         * 复合题
         */
        DATA: "data"

    };

    var createQuizStatisticsAnswers = {
        /**
         * <p>Description:   设置不同题型的统计部分           </p>
         * <p>Create Time: 2015年5月13日   </p>
         * <p>Create author: ZhuangYanHao   </p>
         *
         * @param request
         * @param quizStatistics
         */
        createDifferentQuizStatistics: function(qType, quizStatistics, qAssessmentModel, key) {
            var type = qType;
            if (type == QuestionType.CHOICE || type == QuestionType.MULTIPLE_CHOICE || type == QuestionType.JUDGE) {
                return this.createStatisticsForChoiseAndJudge(quizStatistics, qAssessmentModel, key);
            } else if (type == QuestionType.ORDER || type == QuestionType.GRAPHIC_GAP_MATCH || type == QuestionType.SEQENCING) {
                return this.createStatisticsForMatchOrderGraphic(quizStatistics, qAssessmentModel, key);
            } else if (type == QuestionType.MATCH || type == QuestionType.TABLE || type == QuestionType.LINKUP || type == QuestionType.MEMORYCARD) {
                return this.createStatisticsForMatch(quizStatistics, qAssessmentModel, key);
            } else if (type == QuestionType.TEXT_ENTRY || type == QuestionType.ARITHMETIC) {
                return this.createStatisticsForTextEntry(quizStatistics, qAssessmentModel, key);
            }
        },
        /**
         * <p>Description:  为选择和判断生成独有答题统计            </p>
         * <p>Create Time: 2015年5月7日   </p>
         * <p>Create author: ZhuangYanHao   </p>
         *
         * @param quizStatistics
         * @param qAssessmentModel
         * @param key
         */
        createStatisticsForChoiseAndJudge: function(quizStatistics, qAssessmentModel, key) {
            if (key.length >= 1) {
                key = key[0];
            }
            var answers = [];
            var returnAnswers = [];
            var items = quizStatistics;
            var simpleChoice = qAssessmentModel["modelMap"][key]["simpleChoice"];
            for (var allindex = 0; allindex < simpleChoice.length; allindex++) {
                var answerItem = {};
                answerItem["answer"] = simpleChoice[allindex]["identifier"];
                answerItem["userIds"] = [];
                var isAnswer = false;
                for (var blankindex = 0; blankindex < qAssessmentModel["correctAnswer"][key]["value"].length; blankindex++) {
                    if (qAssessmentModel["correctAnswer"][key]["value"][blankindex] == simpleChoice[allindex]["identifier"]) {
                        isAnswer = true;
                        answerItem["isCorrect"] = true;
                        break;
                    }
                }
                if (!isAnswer) {
                    answerItem["isCorrect"] = false;
                }
                returnAnswers.push(answerItem);
            }
            for (var i = 0; i < items.length; i++) {
                var answer = items[i];
                var userIds = answer["userIds"];
                var userAnswerArray = answer[key];
                for (var cIndex = 0; cIndex < userAnswerArray.length; cIndex++) {
                    var returnAnswer = {};
                    returnAnswer["answer"] = userAnswerArray[cIndex];
                    returnAnswer["userIds"] = userIds;
                    for (var j = 0; j < returnAnswers.length; j++) {
                        var currentAnswer = returnAnswers[j]["answer"];
                        if (currentAnswer == returnAnswer["answer"]) {
                            returnAnswers[j]["userIds"] = returnAnswers[j]["userIds"].concat(returnAnswer["userIds"]);
                        }
                    }
                }
            }
            answers.push(returnAnswers);
            return answers;
        },
        /**
         * <p>Description: 为排序，新排序生成答题统计           </p>
         * <p>Create Time: 2015年5月7日   </p>
         * <p>Create author: ZhuangYanHao   </p>
         *
         * @param quizStatistics
         * @param qAssessmentModel
         * @param key
         */
        createStatisticsForMatchOrderGraphic: function(quizStatistics, qAssessmentModel, key) {
            if (key instanceof Array && key.length > 0) {
                key = key[0];
            }
            var answerList = quizStatistics;
            var answers = [];
            var returnAnswers = [];
            if (answerList != null && answerList.length > 0) {
                for (var i = 0; i < answerList.length; i++) {
                    // 这些答案都是本质相同的
                    var userAnswer = answerList[i];
                    if (userAnswer != null) {
                        var returnAnswer = {};
                        if (returnAnswer["userIds"] == undefined) {
                            returnAnswer["userIds"] = [];
                        }
                        var qtiValue = userAnswer[key];
                        returnAnswer["qti"] = {};
                        returnAnswer["qti"][key] = {
                            state: userAnswer["state"],
                            value: qtiValue
                        };
                        returnAnswer["answer"] = userAnswer[key];
                        returnAnswer["isCorrect"] = userAnswer["state"] == "PASSED";
                        returnAnswer["userIds"] = returnAnswer["userIds"].concat(userAnswer["userIds"]);
                        returnAnswers.push(returnAnswer);
                    }
                }
                answers.push(returnAnswers);
            }
            return answers;
        },
        /**
         * 为连线生成答题统计
         *
         * @param quizStatistics
         * @param qAssessmentModel
         * @param key
         */
        createStatisticsForMatch: function(quizStatistics, qAssessmentModel, key) {
            if (key instanceof Array && key.length > 0) {
                key = key[0];
            }
            var sourceAnswers = quizStatistics;
            var answers = [];
            var returnAnswers = [];
            var correctAnswerList = qAssessmentModel["correctAnswer"][key]["value"];
            if (sourceAnswers != null && sourceAnswers.length > 0) {
                for (var i = 0; i < sourceAnswers.length; i++) {
                    var sourceAnswer = sourceAnswers[i];
                    if (sourceAnswer["state"] == "PASSED")
                        continue;
                    var candiAnsTmeList = sourceAnswers[i][key];
                    for (var j = 0; candiAnsTmeList != null && j < candiAnsTmeList.length; j++) {
                        var candiAnsTme = candiAnsTmeList[j];
                        if (candiAnsTme != null && !this.contains(candiAnsTme, correctAnswerList)) {
                            // if(!corrAnsTmp.equalsIgnoreCase(candiAnsTme) && candiAnsTme!=null){
                            var returnAnswer = {};
                            var qtivalue = [];
                            qtivalue.push(candiAnsTme);
                            returnAnswer["qti"] = {};
                            returnAnswer["qti"][key] = {
                                state: sourceAnswer["state"],
                                value: qtivalue
                            };
                            returnAnswer["answer"] = candiAnsTme;
                            returnAnswer["isCorrect"] = false;
                            returnAnswers.push(returnAnswer);

                            if (returnAnswer["userIds"] == undefined) {
                                returnAnswer["userIds"] = [];
                            }
                            returnAnswer["userIds"] = returnAnswer["userIds"].concat(sourceAnswer["userIds"]);
                        }
                    }
                }
                answers.push(returnAnswers);
            }
            return this.mergeRepeatAnswer(answers);
        },
        mergeRepeatAnswer:function(answers){
            var answers = answers[0];
            var answerMap = {};
            for(var i = 0; i < answers.length; i ++){
                var answer = answers[i];
                var key = answer.answer;
                if(!answerMap[key]){
                    //错误答案未重复
                    answerMap[key] = answer;
                }
                else{
                    //重复的错误答案，则将错误的userId加入到对应答案中的userIds中
                    var existAnswer = answerMap[key];
                    var userIds = existAnswer.userIds;
                    for(var index = 0; index < answer.userIds.length; index ++){
                        var userId = answer.userIds[index];
                        if(userIds.indexOf(userId) === -1){
                            userIds.push(userId);
                        }
                    }
                }
            }
            //将处理后的数组返回
            answers = [];
            var returnAnswer = [];
            for(var key in answerMap){
                if(answerMap.hasOwnProperty(key)){
                    returnAnswer.push(answerMap[key]);
                }
            }
            answers.push(returnAnswer);
            return answers;
        },
        contains: function(src, dest) {
            if (dest != null && dest != undefined) {
                for (var index = 0; index < dest.length; index++) {
                    if (src == dest[index]) {
                        return true;
                    }
                }
                return false;
            }
        },
        /**
         * @param valueElement
         * @param tValue
         * @return
         * @author zhangxg
         */
        replaceWrongXml: function(valueElement, tValue) {
            var newnode = valueElement.ownerDocument.createElement("value");
            newnode.textContent = tValue;
            valueElement.appendChild(newnode);
            return new XMLSerializer().serializeToString(valueElement.ownerDocument);
        },
        /**
         * 缓存解析结果对象
         *
         * @param resultContent
         * @return
         * @author zhangxg
         */
        cacheElement: function(resultContent) {
            var domParser = new DOMParser();
            var root = domParser.parseFromString(resultContent, 'text/xml');
            var itemResult = root.getElementsByTagName("itemResult")[0];
            var responseVariableList = itemResult.getElementsByTagName("responseVariable");
            for (var rindex = 0; rindex < responseVariableList.length; rindex++) {
                var responseVariable = responseVariableList[rindex];
                var identifier = responseVariable.getAttribute("identifier");
                if (this.startWith(identifier, "RESPONSE")) {
                    var candidateResponse = responseVariable.getElementsByTagName("candidateResponse");
                    var itemEle = null;
                    while (candidateResponse != undefined && candidateResponse.length > 0) {
                        itemEle = candidateResponse[0];
                        responseVariable.removeChild(itemEle);
                    }
                    itemEle.textContent = "";
                    responseVariable.appendChild(itemEle);
                    return itemEle;
                }
            }
            return null;
        },
        startWith: function(d, s) {
            if (s == null || s == "" || d.length == 0 || s.length > d.length)
                return false;
            return (d.substr(0, s.length) == s);

        },
        /**
         * <p>Description:  为填空题生成统计            </p>
         * <p>Create Time: 2015年5月7日   </p>
         * <p>Create author: ZhuangYanHao   </p>
         *
         * @param quizStatistics
         * @param qAssessmentModel
         * @param key
         */
        createStatisticsForTextEntry: function(quizStatistics, qAssessmentModel, key) {
            var answerList = quizStatistics;
            // 第一层的为同一个空
            var returnAnswerListList = [];
            // 这个循环不大，所以可以这么写
            for (var i = 0; i < key.length; i++) {
                var baseType = qAssessmentModel["correctAnswer"][key[i]]["baseType"];
                var currentKey = key[i];
                // 第i个空
                var returnAnswerList = [];
                returnAnswerListList.push(returnAnswerList);
                // 遍历所有学生第i个空的情况
                for (var j = 0; j < answerList.length; j++) {
                    var answer = answerList[j];
                    var candidateResponse = answer[currentKey];
                    var candidateResponsejoin;
                    if (candidateResponse instanceof Array)
                        candidateResponsejoin = candidateResponse.join("");
                    else
                        candidateResponsejoin = candidateResponse;

                    // 第一条答案，走这里
                    if (returnAnswerList.length <= 0) {
                        var returnAnswer = {};
                        returnAnswer["answer"] = candidateResponsejoin;
                        var isCorrect = this.checkAnswerForTextEntry(baseType, candidateResponsejoin, qAssessmentModel["correctAnswer"][key[i]]);
                        if (isCorrect) {
                            returnAnswer["isCorrect"] = true;
                        }
                        if (returnAnswer["userIds"] == undefined) {
                            returnAnswer["userIds"] = [];
                        }
                        returnAnswer["userIds"] = returnAnswer["userIds"].concat(answer["userIds"]);
                        returnAnswerList.push(returnAnswer);
                    } else {
                        // 这个循环不大，可以直接写
                        var isFind = false;
                        for (var z = 0; z < returnAnswerList.length; z++) {
                            var returnAnswer = returnAnswerList[z];
                            if (returnAnswer["userIds"] == undefined) {
                                returnAnswer["userIds"] = [];
                            }
                            if (returnAnswer["answer"] == candidateResponse) {
                                isFind = true;
                                returnAnswer["userIds"] = returnAnswer["userIds"].concat(answer["userIds"]);
                            }
                        }
                        if (!isFind) {
                            // 那么新加入一个
                            var addReturnAnswer = {};
                            addReturnAnswer["answer"] = candidateResponse;
                            var isCorrect = this.checkAnswerForTextEntry(baseType, candidateResponse, qAssessmentModel["correctAnswer"][key[i]]);
                            if (isCorrect) {
                                addReturnAnswer["isCorrect"] = true;
                            }
                            if (addReturnAnswer["userIds"] == undefined) {
                                addReturnAnswer["userIds"] = [];
                            }
                            addReturnAnswer["userIds"] = addReturnAnswer["userIds"].concat(answer["userIds"]);
                            returnAnswerList.push(addReturnAnswer);
                        }
                    }

                }
            }
            console.log('------------------')
            console.log("first parse");
            console.log(returnAnswerListList);
            var result = this.mergeTextEntryAnswer(returnAnswerListList);
            console.log("second parse");
            console.log(result);
            return result;
        },
        checkAnswerForTextEntry: function(baseType, userAnswer, correctAnswer) {
            if (userAnswer == null || correctAnswer == null) {
                return false;
            }
            if (baseType == "multipleString" || baseType == "string") {
                var correctList = correctAnswer["value"][0].split("|");
                for (var index = 0; index < correctList.length; index++) {
                    if (userAnswer == correctList[index]) {
                        return true;
                    }
                }
            } else {
                return correctAnswer == userAnswer;
            }
            return false;
        },
        mergeTextEntryAnswer:function(answerList){
            var result = [];
            for(var i = 0; i < answerList.length; i++){
                //填空题的可填空的个数
                var textEntry = answerList[i];
                var answer = {};
                var result_i = [];
                for(var j = 0; j < textEntry.length; j++){
                    var answer_j = textEntry[j];
                    var studentAnswer = answer_j.answer;
                    if(typeof studentAnswer !== "string"){
                        if(studentAnswer.length && studentAnswer.length > 0){
                            studentAnswer = studentAnswer[0];
                        }
                    }
                    var userIds = answer_j.userIds;
                    if(!answer[studentAnswer]){
                        //将答案插入
                        answer[studentAnswer] = answer_j;
                    }
                    else{
                        //已经由相同的答案，则将学生的ID加入
                        var existIds = answer[studentAnswer].userIds;
                        for(var index = 0; index < userIds.length; index ++){
                            var userId = userIds[index];
                            if(existIds.indexOf(userId) === -1){
                                existIds.push(userId);
                            }
                        }
                    }
                }
                for(var key in answer){
                    if(answer.hasOwnProperty(key)){
                        result_i.push(answer[key]);
                    }
                }
                result.push(result_i);
            }
            return result;
        }
    };

    /**
     * 解析QTI数据的答案(Json格式)
     */
    var QtiAssessmentParserJson = {
        //获取qti题型题目内容
        getDataQuestionAssessmentModel: function(qtype) {
            var model = null;
            if (QuestionType.LINKUP == qtype) {
                if (player.getPlayerServices().getModule('LinkUp') != null)
                    model = player.getPlayerServices().getModule('LinkUp').getDataQuestionAssessmentModel();
            } else if (QuestionType.TABLE == qtype) {
                if (player.getPlayerServices().getModule('Table') != null)
                    model = player.getPlayerServices().getModule('Table').getDataQuestionAssessmentModel();
            } else if (QuestionType.MEMORYCARD == qtype) {
                if (player.getPlayerServices().getModule('MemoryCard') != null)
                    model = player.getPlayerServices().getModule('MemoryCard').getDataQuestionAssessmentModel();
            } else if (QuestionType.SEQENCING == qtype) {
                if (player.getPlayerServices().getModule('Seqencing') != null)
                    model = player.getPlayerServices().getModule('Seqencing').getDataQuestionAssessmentModel();
            } else if (QuestionType.CHOICE == qtype || QuestionType.MULTIPLE_CHOICE == qtype || QuestionType.TEXT_ENTRY == qtype ||
                QuestionType.MATCH == qtype || QuestionType.ORDER == qtype || QuestionType.JUDGE == qtype || QuestionType.GRAPHIC_GAP_MATCH == qtype) {
                if (player.getPlayerServices().getModule('BasicQuestionViewer') != null)
                    model = player.getPlayerServices().getModule('BasicQuestionViewer').getDataQuestionAssessmentModel();
            }
            return model;
        },
        getSimpleQuestionAnswerInfo: function(answer, keys, answerJson) {
            for (var key in answerJson) {
                if (answerJson.hasOwnProperty(key)) {
                    keys.push(key);
                    answer[key] = answerJson[key].value;
                }
            }
            if(this.isAnswerRight(answerJson)){
                answer["state"] = "PASSED";
            }
            else{
                answer["state"] = "FAILED";
            }
        },
        isAnswerRight:function(answerJson){
            //空对象直接返回false
            for(var key in answerJson){
                var hasProp = true;
                if(answerJson.hasOwnProperty(key)){
                    if(answerJson[key].state && answerJson[key].state !== "PASSED"){
                        return false;
                    }
                }
            }
            if(!hasProp){
                return false;
            }
            return true;
        },
        //xml答案分类解析
        parseQTIJson: function(eventData) {
            var qAssessmentModel = this.getDataQuestionAssessmentModel(eventData["value"]["questionType"]);
            if (qAssessmentModel != null) {
                var questionInfo = eventData["value"];
                //缓存服务端所传的学生答案json信息
                var qti_answers = [];
                if (questionInfo != undefined) {
                    //获取题目类型
                    var questionType = questionInfo["questionType"];
                    var answers = [];
                    if (questionInfo["answers"][0].length > 0) {
                        //解析每一个相同的答案
                        for (var answerindex = 0; answerindex < questionInfo["answers"][0].length; answerindex++) {
                            if (questionInfo["answers"][0][answerindex]["answer"] == undefined) {
                                //没有学生提交，直接从xml文件中获取正确答案
                                var correctAnswer = qAssessmentModel.correctAnswer;
                                var keys = [];
                                for (var key in correctAnswer) {
                                    if (correctAnswer.hasOwnProperty(key)) {
                                        keys.push(key);
                                    }
                                }
                                if (keys.length > 0) {
                                    if("textentry" == questionType){
                                        eventData["value"]["correctAnswer"] = [];
                                        for(var ai=0; ai<keys.length; ai++){
                                            eventData["value"]["correctAnswer"].push(correctAnswer[keys[ai]].value);
                                        }
                                    }else{
                                        eventData["value"]["correctAnswer"] = correctAnswer[keys[0]].value;
                                    }
                                }
                                return "success";
                            }
                            //兼容答题器无法得到结果状态问题
                            if (QuestionType.CHOICE == questionType || QuestionType.MULTIPLE_CHOICE == questionType || QuestionType.JUDGE == questionType) {
                                if (player.getPlayerServices().getModule('BasicQuestionViewer') != null) {
                                    var qti = player.getPlayerServices().getModule('BasicQuestionViewer').getCurrentQti();
                                    qti.setAnswer(questionInfo["answers"][0][answerindex]["answer"]);
                                } else {
                                    return "success";
                                }
                            }
                            //获取答案的JSON信息
                            var answerJson = JSON.parse(questionInfo["answers"][0][answerindex]["answer"]);
                            qti_answers.push(questionInfo["answers"][0][answerindex]["answer"]);
                            var answer = {};
                            answer["userIds"] = questionInfo["answers"][0][answerindex]["userIds"];
                            var keys = [];
                            /**
                             * 解析不同题型，对应的答题结果
                             */
                            this.getSimpleQuestionAnswerInfo(answer, keys, answerJson);
                            /**
                             * 获取题目的正确答案
                             */
                            if (eventData["value"]["correctAnswer"] == undefined || eventData["value"]["correctAnswer"].length == 0) {
                                eventData["value"]["correctAnswer"] = [];
                                //获取正确答案
                                for (var keyindex = 0; keyindex < keys.length; keyindex++) {
                                    if (qAssessmentModel["correctAnswer"][keys[keyindex]] != undefined) {
                                        var canswer = qAssessmentModel["correctAnswer"][keys[keyindex]]["value"];
                                        if (canswer instanceof Array) {
                                            eventData["value"]["correctAnswer"] = eventData["value"]["correctAnswer"].concat(canswer);
                                        } else {
                                            eventData["value"]["correctAnswer"].push(canswer);
                                        }
                                    }
                                }
                            }

                            if (eventData["value"]["correctUserIds"] == undefined) {
                                eventData["value"]["correctUserIds"] = [];
                            }
                            if (answer['state']) {
                                if (answer["state"] == "PASSED") {
                                    eventData["value"]["correctUserIds"] = eventData["value"]["correctUserIds"].concat(answer["userIds"]);
                                }
                            } else {
                                //答题器提交的答案信息中没有state字段
                                var correctAnswer = eventData["value"]["correctAnswer"];
                                if (isRightAnswer(answer, correctAnswer, keys)) {
                                    eventData["value"]["correctUserIds"] = eventData["value"]["correctUserIds"].concat(answer["userIds"]);
                                }
                            }
                            answers.push(answer);
                        }
                        eventData["value"]["answers"] = createQuizStatisticsAnswers.createDifferentQuizStatistics(questionType, answers, qAssessmentModel, keys);
                    } else {
                        //没有学生提交，直接从xml文件中获取正确答案
                        var correctAnswer = qAssessmentModel.correctAnswer;
                        var keys = [];
                        for (var key in correctAnswer) {
                            if (correctAnswer.hasOwnProperty(key)) {
                                keys.push(key);
                            }
                        }
                        if (keys.length > 0) {
                            eventData["value"]["correctAnswer"] = correctAnswer[keys[0]].value;
                        }
                    }
                }

                return "success";
            }
            return "failure";
        }
    };

    var getQueryString = function(name) {
        var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)", "i");
        var r = window.location.search.substr(1).match(reg);
        if (r != null) return unescape(r[2]); return null;
    }

    /**
     * Module的逻辑
     * @param view 视图对象, 根据是否为预览状态传入不同的视图对象
     * @param model 模型对象
     * @param isPreview 是否为编辑环境, true=编辑环境, false=运行环境
     */
    var presenterLogic = function (view, model, isPreview) {

        footBarConfig = [
            {
                title:i18nModel['show_result'],
                icon:"icon_showresult.png",
                clazz:"footbar-showResult",
                click:showResult
            },
            {
                title:i18nModel['exit_this_exam'],
                icon:"icon_exitexam.png",
                clazz:"footbar-examThisExam",
                click:examThisExam
            }
        ];

        var w = $view.closest(".layout_containter").width();
        var h = $view.closest(".layout_containter").height();
        dialogWidth = w*0.56;
        dialogHeight = h*0.63;
        var left = "calc(50% - " + dialogWidth/2 + "px)";
        var top = "calc(50% - " + dialogHeight/2 + "px)";

        $analysis_wrapper = $view.find(".analysis_wrapper");
        $analysis_content = $analysis_wrapper.find(".analysis_content");
        $analysis_close = $analysis_wrapper.find(".close_analysis_wrapper");
        $answer_detail_wrapper = $view.find(".answer_detail_wrapper");
        $answer_detail_content = $answer_detail_wrapper.find(".answer_detail_content");
        $answer_detail_close = $answer_detail_wrapper.find(".close_answer_detail_wrapper");

        //$analysis_close.css({"right":0,"top":"-.5em"});
        //$analysis_content.css({"width":dialogWidth+"px","height":dialogHeight+"px","left":left,"top":top});
        //$analysis_content.css({"left":left,"top":top});
        $answer_detail_close.css({"right":0,"top":"-.5em"});
        $answer_detail_content.css({"width":dialogWidth+"px","height":dialogHeight+"px","left":left,"top":top});

    };

    var presenter = function () {
    };

    /**
     * 编辑环境下, 创建/刷新预览视图的方法;
     * Module在编辑环境下,model改变; 位置改变; DOM结构改变时都会促发该方法
     * @param view 预览视图(DOM对象)
     * @param model Module的模型, Key-Value结构
     */
    presenter.createPreview = function (view, model) {
        //Todo: 在此处一般进行model的数据有效性验证
        presenterLogic(view, model, true);
    };

    /**
     * 运行环境下, 初始化Module的方法
     * @param view 运行视图(DOM对象)
     * @param model Module的模型, Key-Value结构
     * @remark 该方法为Module生命周期方法,仅在Module初始化时执行一次
     */
    presenter.run = function (view, model) {

        presenter.model = model;
        presenter.$view = $(view);
        presenter.$view.css({"width":"auto"});

        footbar = '<ul class="statistics_footbar_ul"></ul>';
        $view = $(view);
        layoutReset();

        presenterLogic(view, model, false);

        //国际化数据绑定
        setI18n(i18nModel,view);
        listenEvents();
    };

    //窗口自适应start
    function winSize() {
        var t = 0,
            e = 0;
        return document.documentElement && document.documentElement.clientHeight && document.documentElement.clientWidth && (t = document.documentElement.clientWidth, e = document.documentElement.clientHeight), {
            width: t,
            height: e
        }
    }
 
    function layoutReset() {
        var t = $view[0],
            e = 1920,
            n = 1200,
            i = 24,
            o = function() {
                var o = winSize(),
                    d = 0,
                    h = o.width,
                    c = o.height;
                o.width / o.height <= e / n ? (d = o.width / e * i, h = o.width < e ? o.width : e, c = n * h / e, o.height > c) : (d = o.height / n * i, c = o.height < n ? o.height : n, h = e * c / n), t.style.fontSize = d + "px"
            };
        o(), window.onresize = function() {
            o()
        }
    }
    //窗口自适应end

    function listenEvents(){
        if (presenter.eventBus) {
            presenter.eventBus.addEventListener('QuizStatistics', presenter);
            presenter.eventBus.addEventListener('StudentAnswer', presenter);
            presenter.eventBus.addEventListener('PhoneRemoteCmd', presenter);
        }
        if (isApp) {
            if (Bridge && Bridge.registerListener) {
                bridgeListener['QuizStatistics'] = Bridge.registerListener('QuizStatistics', presenter.handleQuizStatistics);
                bridgeListener['StudentAnswer'] = Bridge.registerListener('StudentAnswer', presenter.handleAnswer);
                bridgeListener['PhoneRemoteCmd'] = Bridge.registerListener('PhoneRemoteCmd', presenter.handlePhoneRemoteCmd);
            }
        }
    }

    presenter.handlePhoneRemoteCmd = function(eventData){
        if(eventData && eventData["business_id"] == "exam" && eventData["cmd_id"] == "exit"){
            //执行模拟退出本题
            examThisExam();
        }
    }

    presenter.handleAnswer = function(eventData){
        var statData;
        if (eventData && eventData.value) {
            if (QtiAssessmentParserJson.parseQTIJson(eventData) == "success") {
                //基础题型
                statData = eventData.value;
            } else {
                //互动题型或复合题型
                statData = eventData.value;
                //复合题做特殊处理
                var type = statData.questionType;
                if (type == "data") {
                    if (eventData && eventData["value"] && eventData["value"]["answers"]) {
                        if (eventData["value"]["answers"].length == 1) {
                            var length = eventData["value"]["answers"][0].length;
                            var answers = eventData["value"]["answers"][0];
                            for (var index = 0; index < length; index++) {
                                if (answers[index]) {
                                    var answer = JSON.parse(answers[index]["answer"]);
                                    var userIds = answers[index]["userIds"];
                                    var isAllRight = true;
                                    for (var key in answer) {
                                        if (answer[key] && answer[key]["state"] != "PASSED") {
                                            isAllRight = false;
                                            break;
                                        }
                                    }
                                    if (isAllRight) {
                                        statData.correctUserIds = statData.correctUserIds.concat(userIds);
                                    }
                                }
                            }
                        }
                    }
                } else {
                    /**
                     * 此处为学科Module和互动课堂分流的入口
                     * 学科Module将此处代码重构
                     */
                    if (window.__questionStatObjects && window.__questionStatObjects[type] != null) { //通过第三方库加载
                        var stat = window.__questionStatObjects[type];
                        stat.init(gameRenderData(statData, type), function(options) {
                            var correctIds = statData.correctUserIds;
                            if (!correctIds || !correctIds.length) {
                                var summary = stat.getSummary();
                                statData.correctUserIds = gameRenderUsersId(summary) || [];
                            }
                            stat.dispose();
                        }, {
                            container: presenter.$view,
                            numSelector: presenter.SELECTOR.NUM
                        });
                    }
                }
            }
        }
        console.log("handle answer ==========data=========");
        console.log(eventData);
        console.log("handle answer =========data==========");
        fireEvent("StudentAnswerResult", {
            isApp: true,
            data: eventData
        });
    };

    presenter.setPlayerController = function (controller){
        presenter.controller = controller;
        presenter.eventBus = presenter.controller.getEventBus();
    };

    presenter.onEventReceived = function (eventName,eventData){
        console.log(arguments);

        if(eventName == 'QuizStatistics'){
            examId = eventData.value.examId;
            presenter.handleQuizStatistics(eventData);
        }else if(eventName == 'PhoneRemoteCmd'){
            presenter.handlePhoneRemoteCmd(eventData);
        }
    };

    presenter.handleQuizStatistics = function(eventData){
        if(eventData.type == 'show'){
            console.log(eventData);
            //统计处理函数
            examId = eventData.value.examId;
            questionType = eventData.value.questionType;
            $(document).trigger("statisticEvent",{"eventName":"enterStatistics","eventData":{"type":questionType}});

            eventData.value.correctAnswerTeacher = correctAnswer;
            try{
                presenter.statisticsHandler(questionType,eventData,$view.find(".chart_display"),$view.find(".chart_display_mini"),$view.find(".header"));
            }catch(e){
                console.error("统计过程出错",e);
            }
            presenter.setFootBar(questionType);
            layoutHandler.showDetialStatistics();
            if(questionType && $.inArray(questionType,classE)>=0){//若属于E类统计
                $view.closest(".layout_statistic").addClass("layout_sts_classE");
                layoutHandler.disableLayoutDrag();
            }
        }
    };
    /**
     * 运行环境下, 销毁Module时执行的方法
     * @remark 该方法为Module生命周期方法, 仅在ICPlayer切换页面时执行
     */
    presenter.destroy = function () {
        //解除绑定的Module事件
        unBindEvent();
        //ToDo:释放Module占用的内存对象
    };

    /**
     * 获得当前Module的状态信息;
     * 可用于Module的状态恢复和保存
     */
    //presenter.getState = function () {
    //    //TODO: 添加符合Module需求的状态对象
    //    var moduleState = JSON.stringify({
    //        module_id: presenter.model.ID
    //    });
    //    return moduleState;
    //};

    /**
     * 设置Module当前状态
     * @param state Module状态对象
     */
    presenter.setState = function (state) {
        var currentState;
        if(state) {
            currentState = JSON.parse(state);
            //ToDo:处理Module的状态恢复
        }
    };

    /**
     * 统计处理函数
     */
    presenter.statisticsHandler = function(questionType,answerData,detialArea,miniArea,header){
        var choiceRender,fillRender, judgeRender, rankRender,dataStatRender;

        if(window.__StatisticsRender.choiceStatRender) {
            choiceRender = __StatisticsRender.choiceStatRender;
        }
        if(window.__StatisticsRender.fillStatRender) {
            fillRender = __StatisticsRender.fillStatRender;
        }
        if(window.__StatisticsRender.judgeStatRender) {
            judgeRender = __StatisticsRender.judgeStatRender;
        }
        if(window.__StatisticsRender.rankStatRender) {
            rankRender = __StatisticsRender.rankStatRender;
        }
        if(window.__StatisticsRender.dataStatRender) {
            dataStatRender = __StatisticsRender.dataStatRender;
        }

        choiceRender.setNextHandler(fillRender);
        fillRender.setNextHandler(judgeRender);
        judgeRender.setNextHandler(rankRender);
        rankRender.setNextHandler(dataStatRender);

        //数据处理完毕
        var deffered = choiceRender.handle(questionType,answerData,detialArea,miniArea,header,i18nModel);
        if(deffered && deffered.done){
            deffered.done(function(data){
                if(data && data["allrightStu"]){
                    fireStuffEvent("THUMBS_UP",data["allrightStu"]);//点赞
                }
            });
        }
    };
    /**
     * 设置布局模组控制器
     * @param lh
     */
    presenter.setLayoutHandler = function(lh){
        layoutHandler = lh;
        //绑定Module事件
        bindEvent();
        presenter.checkFromClassroomSummary();
    };

    presenter.setBasePath = function(bp) {
        basePath = bp;
    };

    /**
     * 设置底部二级辅助工具栏
     * @param containter
     */
    presenter.setFootBar =function(type){
        $footbarUl = $footbarContainer.find(">ul.statistics_footbar_ul");
        if($footbarUl.length == 0){
            $footbarUl = $(footbar);
            $footbarUl.addClass("left");
            $footbarContainer.append($footbarUl);

            $footbarUl = $(footbar);
            $footbarUl.addClass("right");
            $footbarContainer.append($footbarUl);
        }
        $footbarContainer.find("ul.statistics_footbar_ul.li").off("click");
        $footbarContainer.find("ul.statistics_footbar_ul").empty();

        var $li,$pic,picUrl;
        for(var i=0; i<footBarConfig.length; i++){
            if(type && $.inArray(type,classE)>=0 && footBarConfig[i].title == "公布结果" && footBarConfig[i].clazz.indexOf("invisible") < 0){
                footBarConfig[i].clazz = footBarConfig[i].clazz + " invisible";
            }
            $li = $("<li class='"+footBarConfig[i].clazz+"'></li>");
            $pic = $("<span class='com_btn_pic'></span>");

            $li.append($pic);
            $li.append("<span class='com_btn_text'>"+footBarConfig[i].title+"</span>");
            if(footBarConfig[i].click){
                $li.on("click",footBarConfig[i].click);
            }
            $footbarContainer.find("ul.statistics_footbar_ul.right").append($li);
        }
        for(var i=footBarConfig.length-1; i>=0; i--){
            if(type && $.inArray(type,classE)>=0){
                break;
            }
            $li = $("<li class='"+footBarConfig[i].clazz+"'></li>");
            $pic = $("<span class='com_btn_pic'></span>");

            $li.append($pic);
            $li.append("<span class='com_btn_text'>"+footBarConfig[i].title+"</span>");
            if(footBarConfig[i].click){
                $li.on("click",footBarConfig[i].click);
            }
            $footbarContainer.find("ul.statistics_footbar_ul.left").append($li);
        }
    };

    presenter.setFootBarPanel = function(containter){
        $footbarContainer = $(containter);
    };

    presenter.checkFromClassroomSummary = function(){
        var questionId = getQueryString("classroomsummary_questionId");
        if(questionId){
            if(window.localStorage){
                $view.closest(".layout_containter").addClass("classroomsummary-detail");
                var StatisticData = localStorage.getItem("StatisticData");
                var data = JSON.parse(StatisticData);
                var content = data[questionId];

                if(content){
                    if((typeof content) == "string"){
                        content = JSON.parse(content);
                    }
                    var $detial = $view.find(".chart_display");
                    var $mini = $view.find(".chart_display_mini");
                    var header = $view.find(".header");
                    var data;

                    if(!content.value){
                        data = {};
                        data.value = content;
                        data.value.questionType = "wordpuzzles";
                    }else{
                        data = content;
                    }
                    examId = data.value.examId;
                    questionType = data.value.questionType;
                    if(questionType && $.inArray(questionType,classE)>=0){//若属于E类统计
                        $view.closest(".layout_statistic").addClass("layout_sts_classE");
                        layoutHandler.disableLayoutDrag();
                    }

                    $(document).trigger("statisticEvent",{"eventName":"enterStatistics","eventData":{"type":questionType}});

                    content.value.correctAnswerTeacher = correctAnswer;
                    presenter.statisticsHandler(questionType,data, $detial,$mini,header);
                    //presenter.setFootBar();
                    layoutHandler.showDetialStatistics();
                }
            }
        }
    }


    /**
     * 显示/隐藏 二级辅助工具栏
     */
    function toggleFooterBar(isShow){
        if(isShow == true){

        }else{

        }
    }


    /**
     * 公布结果
     */
    function showResult(e){
        $(document).trigger("statisticEvent",{"eventName":"showResult","eventData":{"type":questionType}});
        $(e.currentTarget).css({"visibility":"hidden"});
        $(e.currentTarget).closest("ul.statistics_footbar_ul").siblings("ul.statistics_footbar_ul").find("li.footbar-showResult").css({"visibility":"hidden"});
    }

    /**
     * 退出本题
     */
    function examThisExam(){
        $(document).trigger("statisticEvent",{"eventName":"exitExam","eventData":{"type":questionType}});
        layoutHandler.exitExam();
        if($footbarUl){
            $footbarUl.children("li").off("click");
            $footbarUl.empty();
        }
        var examOption = {
            type: 'hide'
        };
        fireEvent('Exam', examOption);
        /*if (isApp && Bridge && Bridge.unRegisterListener) {
           Bridge.unRegisterListener('QuizStatistics', bridgeListener['QuizStatistics']);
           Bridge.unRegisterListener('StudentAnswer', bridgeListener['StudentAnswer']);
        }*/

        //渲染库和统计库释放事件和内存
        dispose();
    }

    function dispose(){
        //渲染库事件销毁
        if(window.__StatisticsRender.choiceStatRender && window.__StatisticsRender.choiceStatRender.dispose) {
            __StatisticsRender.choiceStatRender.dispose();
        }
        if(window.__StatisticsRender.fillStatRender && window.__StatisticsRender.fillStatRender.dispose) {
            window.__StatisticsRender.fillStatRender.dispose();
        }
        if(window.__StatisticsRender.judgeStatRender && window.__StatisticsRender.judgeStatRender.dispose) {
            window.__StatisticsRender.judgeStatRender.dispose();
        }
        if(window.__StatisticsRender.rankStatRender && window.__StatisticsRender.rankStatRender.dispose) {
            window.__StatisticsRender.rankStatRender.dispose();
        }

        if(window.__questionStatObjects.choiceStatistics && window.__questionStatObjects.choiceStatistics.dispose) {
            __StatisticsRender.choiceStatRender.dispose();
        }
        if(window.__questionStatObjects.fillStatistics && window.__questionStatObjects.fillStatistics.dispose) {
            window.__questionStatObjects.fillStatistics.dispose();
        }
        if(window.__questionStatObjects.judgeStatistics && window.__questionStatObjects.judgeStatistics.dispose) {
            window.__questionStatObjects.judgeStatistics.dispose();
        }
        if(window.__questionStatObjects.rankStatistics && window.__questionStatObjects.rankStatistics.dispose) {
            window.__questionStatObjects.rankStatistics.dispose();
        }
    }

    /**
     * 绑定事件的方法
     */
    function bindEvent() {
        if(layoutHandler){
            var $chart_display_mini = $view.find(".chart_display_mini");
            $chart_display_mini.on("mouseup touchend",layoutHandler.showDetialStatistics);
        }
        //关闭查看详情对话框
        $analysis_close.on("click",function(ev){
            $analysis_wrapper.css({"display":"none"});
        });
        //关闭查看解析对话框
        $answer_detail_close.on("click",function(ev){
            $answer_detail_wrapper.css({"display":"none"});
            $(document).trigger("statisticEvent",{"eventName":"closeAnalysisDialog","eventData":{"type":questionType}});
        });
        $analysis_content.on("click",function(ev){
           ev.stopPropagation();
        });
        $answer_detail_content.on("click",function(ev){
            ev.stopPropagation();
        });
        //查看详情对话框
        $analysis_wrapper.on("click",function(ev){
            $analysis_content.addClass("dialog-shake");
            setTimeout(function(){
                $analysis_content.removeClass("dialog-shake");
            },200);
            ev.stopPropagation();
        });
        //查看解析对话框
        $answer_detail_wrapper.on("click",function(ev){
            $answer_detail_content.addClass("dialog-shake");
            setTimeout(function(){
                $answer_detail_content.removeClass("dialog-shake");
            },200);
            ev.stopPropagation();
        });
        $answer_detail_wrapper.on("mousedown",function(ev){
            ev.stopPropagation();
        });
        $analysis_wrapper.on("mousedown",function(ev){
            ev.stopPropagation();
        });
    }

    /**
     * 解除事件绑定的方法
     */
    function unBindEvent() {
        if(layoutHandler){
            var $chart_display_mini = $view.find(".chart_display_mini");
            $chart_display_mini.off("click");

            var $closeAnswerDetail = $view.find('.close_answer_detail_wrapper');
            $closeAnswerDetail.off('click');
        }
        $analysis_close.off("click");
        $answer_detail_close.off("click");
        $analysis_content.off("click");
        $analysis_wrapper.off("click");
        $answer_detail_wrapper.off("click");
    }

    var rightStu = [],wrongStu = [],unfinishedStu = [],curStuList = [];
    var currentStudent = [];
    var stuList = {
        rightStu:[],
        wrongStu:[],
        unfinishedStu:[],
        curStuList:[]
    };
    var cloneStuList = {};
    var correctAnswer;


    var _service_ = {
        parent:null,
        setParent:function(p){
            this.parent = p;
        },
        getCurrentStatus:function(){//获取当前状态
            return layoutHandler.getCurrentState();
        },
        setCorrectAnswer:function(ca){
            correctAnswer = ca;
        },
        showDetialStatistics:function(){
            layoutHandler.showDetialStatistics();
        },
        setStuList:function(views,type){
            var btn_sendflower = $view.find(".analysis_wrapper .btn_sendflower");
            var $statistic_stu_list = views.statistic_stu_list;
            var $pageUl = views.pageUl;
            $statistic_stu_list.empty();
            $pageUl.children().off("click");
            $pageUl.empty();
            btn_sendflower.off("click");

            var i,pageIndex,$stuUl,$stuLi,$pageLi;

            if(type == "rightAnswer"){
                stuList.curStuList = stuList.rightStu;
                cloneStuList.curStuList = cloneStuList.rightStu;
            }else if(type == "wrongAnswer"){
                stuList.curStuList = stuList.wrongStu;
                cloneStuList.curStuList = cloneStuList.wrongStu;
            }else if(type == "unfinished"){
                stuList.curStuList = stuList.unfinishedStu;
                cloneStuList.curStuList = cloneStuList.unfinishedStu;
            }

            if(stuList.curStuList.length > 0){

                for(i=0; i<stuList.curStuList.length; i++){
                    if(i%30 == 0){
                        pageIndex = Math.floor(i/30)+1;
                        $pageLi = $("<li class='on'>"+pageIndex+"</li>");
                        $pageLi.attr("pageIndex",pageIndex);
                        $pageUl.append($pageLi);

                        $stuUl = $("<ul></ul>");
                        $stuUl.attr("pageIndex",pageIndex);
                        $statistic_stu_list.append($stuUl);
                        if(pageIndex > 1){
                            $stuUl.css("display","none");
                            $pageLi.removeClass("on");
                        }
                    }
                    $stuLi = $("<li><span class='head'><img src='"+basePath+"/resources/images/head_img.png' style='width: 100%;height:100%;'/></span><span class='name'>"+stuList.curStuList[i]+"</span></li>");//
                    $stuUl.append($stuLi);
                }
                var pageCount = $pageUl.children().length;
                $pageUl.attr("current-page-index",1);
                $pageUl.attr("page-count",pageCount);

                var $previous = $("<li class='previous off'></li>");
                var $next = $("<li class='next'></li>");
                if(pageCount == 1){
                    $next.addClass("off");
                }
                $pageUl.prepend($previous);
                $pageUl.append($next);

                $pageUl.children().on("click",function(){
                    var count = $pageUl.attr("page-count");
                    var pageIndex = $(this).attr("pageIndex");
                    count = parseInt(count);
                    var curIndex;
                    if(pageIndex){//点击页码
                        $pageUl.attr("current-page-index",pageIndex);
                        $(this).siblings().removeClass("on");
                        $(this).addClass("on");
                        var $stuUl = $statistic_stu_list.find("ul");
                        $stuUl.each(function(){
                            var index = $(this).attr("pageIndex");
                            var css = (index == pageIndex)?"block":"none";
                            $(this).css("display",css);
                        });
                        if(pageIndex == 1){
                            $(this).siblings(".previous").addClass("off");
                            if(parseInt(pageIndex) < count){
                                $(this).siblings(".next").removeClass("off");
                            }
                        }
                        if(pageIndex == count){
                            $(this).siblings(".next").addClass("off");
                            if(parseInt(pageIndex) > 1){
                                $(this).siblings(".previous").removeClass("off");
                            }
                        }
                        /*if(parseInt(pageIndex) > 1 && parseInt(pageIndex) < count){
                            $(this).siblings(".previous").removeClass("off");
                            $(this).siblings(".next").removeClass("off");
                        }*/
                    }else{
                        curIndex = $pageUl.attr("current-page-index");
                        curIndex = parseInt(curIndex);

                        if($(this).is(".previous")){//点击上一页
                            curIndex--;
                            if(curIndex <= 1){
                                $(this).addClass("off");
                                curIndex = 1;
                            }
                            if(curIndex < pageCount){
                                $(this).siblings(".next").removeClass("off");
                            }else{
                                $(this).siblings(".next").addClass("off");
                            }
                        }else if($(this).is(".next")){//点击下一页
                            curIndex++;
                            if(curIndex >= pageCount){
                                $(this).addClass("off");
                                curIndex = pageCount;
                            }
                            if(curIndex > 1){
                                $(this).siblings(".previous").removeClass("off");
                            }else{
                                $(this).siblings(".previous").addClass("off");
                            }
                        }
                        if(curIndex<1 || curIndex>count){
                            return;
                        }
                        $pageUl.attr("current-page-index",curIndex);
                        $pageUl.find(">li[pageIndex!="+curIndex+"]").removeClass("on");
                        $pageUl.find(">li[pageIndex="+curIndex+"]").addClass("on");
                        var $stuUl = $statistic_stu_list.find("ul");
                        $stuUl.each(function(){
                            var index = $(this).attr("pageIndex");
                            var css = (index == curIndex)?"block":"none";
                            $(this).css("display",css);
                        });
                    }
                });
            }

            btn_sendflower.on("click",function(ev){
                fireStuffEvent("FLOWER",cloneStuList.curStuList);
                if(window.PresenterFlowerTip){
                    window.PresenterFlowerTip(stuList.curStuList);
                }
            });

            //设置学生列表总高度
            var $stuItem = $statistic_stu_list.find(">ul>li");
            var h = $stuItem.height();
            var margin = $stuItem.css("margin-bottom");
            margin = parseFloat(margin);
            //$statistic_stu_list.height(6*(h+margin) + 2*margin);
            $stuItem = null;
        },
        getFootbarUl:function(){
            if(!$footbarContainer){
                $footbarContainer = this.parent.$view.closest(".layout_containter").find(".layout_footbar")
            }
            return $footbarContainer.find(">ul.statistics_footbar_ul");
        },
        getFootbarConfig:function(){//获取底部菜单配置
            return footBarConfig;
        },
        toggleInteraction: function(enabled) {},
        showAnswer: function() {
            console.log("_service_:公布结果");
        },
        getOnlineStu:function(data,key,attr){

            stuList.rightStu = [];
            stuList.wrongStu = [];
            stuList.unfinishedStu = [];

            if("unfinish" == key){
                stuList.rightStu = [];
                stuList.wrongStu = [];
                stuList.unfinishedStu = data.unfinishedUserIds;
            }else{
                //处理回答正确，错误，和未回答的学生列表
                if(data.stuAnswerStat){
                    if($.isArray(data.stuAnswerStat)){
                        for(var i=0; i<data.stuAnswerStat.length; i++){
                            if(data.stuAnswerStat[i].ref_key == key){
                                stuList.rightStu = $.extend(true,[],data.stuAnswerStat[i].right_userIds);
                                stuList.wrongStu = $.extend(true,[],data.stuAnswerStat[i].wrong_userIds);
                                stuList.unfinishedStu = $.extend(true,[],data.stuAnswerStat[i].unfinished_userIds);
                                break;
                            }
                        }
                    }else if(attr){
                        for(var i=0; i<data.stuAnswerStat[attr].length; i++){
                            if(data.stuAnswerStat[attr][i].ref_key == key){
                                stuList.rightStu = $.extend(true,[],data.stuAnswerStat[attr][i].right_userIds);
                                stuList.wrongStu = $.extend(true,[],data.stuAnswerStat[attr][i].wrong_userIds);
                                stuList.unfinishedStu = $.extend(true,[],data.stuAnswerStat[attr][i].unfinished_userIds);
                                break;
                            }
                        }
                    }
                }
            }

            cloneStuList = $.extend(true,{},stuList);

            /**
             * 学号和姓名映射
             */
            if(window.ClassroomUtils && ClassroomUtils.getCurrentStudents){
                currentStudent = ClassroomUtils.getCurrentStudents();
                var tmpStu,stuId,tmpIndex;
                for(var i=0; i<currentStudent.length; i++){
                    tmpStu = currentStudent[i];
                    stuId = tmpStu["studentId"];
                    if((tmpIndex = $.inArray(stuId,stuList.rightStu)) >= 0){
                        stuList.rightStu[tmpIndex] = tmpStu["studentName"];
                    }else if((tmpIndex = $.inArray(stuId,stuList.wrongStu)) >= 0){
                        stuList.wrongStu[tmpIndex] = tmpStu["studentName"];
                    }else if((tmpIndex = $.inArray(stuId,stuList.unfinishedStu)) >= 0){
                        stuList.unfinishedStu[tmpIndex] = tmpStu["studentName"];
                    }
                }
            }

            return stuList;
        },
        resetQuestion: function() {},
        getPresenterView: function() {
            return presenter.$view;
        },
        showAnswerDetial:function(){//显示做题情况,弹出对话框
            var state = layoutHandler.getCurrentState();
            if(state == "show-detial" || state == "show-mini"){
                $analysis_wrapper.css({"display":"block"});
            }

            /**
             * 构造对话框内容
             */
            var $statistic_stu_list = $view.find(".statistic-stu-list");
            var $statistic_page_list = $view.find(".statistic-page-list");
            var $pageUl = $statistic_page_list.find("ul");
            var $statistic_item_content = $view.find(".statistic-item-content");
            $statistic_stu_list.empty();

            var views = {
                statistic_stu_list:$statistic_stu_list,
                pageUl:$pageUl,
                statistic_item_content:$statistic_item_content
            };
            return views;
        },
        showQuestionAnalysis:function() {//查看解析，弹出对话框
            console.log("_service_:查看解析");
            var state = layoutHandler.getCurrentState();
            if (state == "show-detial" || state == "show-mini") {
                $answer_detail_wrapper.css({"display": "block"});
            }

            /**
             * 构造对话框内容
             */
            var $detail_header = $view.find(".detail_header");
            var $detail_body = $view.find(".detail_body");

            var views = {
                detail_header: $detail_header,
                detail_body: $detail_body
            };

            return views;
        },
        //获取i18nModel
        getI18nModel:function(){
            return i18nModel;
        }
    };

    presenter._getService = function() {
        if(_service_ && _service_.setParent){
            _service_.setParent(this);
        }
        return _service_;
    };

    /**
     * 实现Module多语言适配的方法, 如Module存在i18n的支持, 请务必实现此方法
     * icplayer会加载当前i18n的配置信息,并通过location参数传入
     * @param location 表示当前语言环境的配置信息, 为JSON数组的键值对
     */
    presenter.setLocationProperties = function (location) {
        i18nModel = location;
    };

    /**
     *国际化数据绑定
     * model 数据模型
     * view 需要绑定的视图
     */
    function setI18n(model,view){
        ko.applyBindings(model,view);
    }

/*
    /!**
     * 以下一组为可选运行时初始化函数, icPlayer会根据运行时的不同, 在执行presenter.run 函数之前, 执行对应运行时的初始化函数;
     * 如Module在不同运行时需要执行不同初始化操作, 可进行单独实现
     *!/
        //移动环境教师端
    presenter.initTeacherMobile = function() {
    };
    //移动环境学生端
    presenter.initStudentMobile = function() {
    };
    //移动环境投影端
    presenter.initProjectionMobile = function() {
    };
    //Web端
    presenter.initWeb = function() {
    };
    //教师端PC
    presenter.initTeacherPc = function () {

    };*/

    return presenter;
}

]]>

</presenter>


<resources>

<file src='./resources/images/bg_pop_square.png' />
<file src='./resources/images/btn_br_board.png' />
<file src='./resources/images/head_img.png' />
<file src='./resources/images/icon_analysis.png' />
<file src='./resources/images/icon_close.png' />
<file src='./resources/images/icon_endexam.png' />
<file src='./resources/images/icon_end_ts.png' />
<file src='./resources/images/icon_exitexam.png' />
<file src='./resources/images/icon_flower.png' />
<file src='./resources/images/icon_flower_panel.png' />
<file src='./resources/images/icon_next.png' />
<file src='./resources/images/icon_previous.png' />
<file src='./resources/images/icon_progress.png' />
<file src='./resources/images/icon_showresult.png' />
<file src='./resources/locations/bo/lang.json' />
<file src='./resources/locations/bo/lang.po' />
<file src='./resources/locations/bo_CN/lang.json' />
<file src='./resources/locations/bo_CN/lang.po' />
<file src='./resources/locations/zh/lang.json' />
<file src='./resources/locations/zh/lang.po' />
<file src='./resources/locations/zh_CN/lang.json' />
<file src='./resources/locations/zh_CN/lang.po' />
<file src='./resources/mock.json' />


</resources>

</addon>