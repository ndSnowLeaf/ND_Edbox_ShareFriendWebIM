<?xml version='1.0' encoding='UTF-8'?>
<addon id="templateid"><properties/><dependencies><jsDependency><javaScript name="AlamedaRequire" version="0.3.2"/><javaScript name="knockout" version="3.3.0"/><javaScript name="common_css" version="1.0.0"/></jsDependency></dependencies><css><![CDATA[.exam_skin_wood .magneticInductionLine_wrapper{width:100%;height:100%;position:relative;background:#bfd3e2}.exam_skin_wood .magneticInductionLine_wrapper .magneticInductionLine_2d.hide_dom,.exam_skin_wood .magneticInductionLine_wrapper.magneticInductionLine_wrapper_student .dont_knock_left,.exam_skin_wood .magneticInductionLine_wrapper.magneticInductionLine_wrapper_student .dont_knock_top{display:none}.exam_skin_wood .magneticInductionLine_wrapper.magneticInductionLine_wrapper_student .play_area{position:relative}.exam_skin_wood .magneticInductionLine_wrapper.magneticInductionLine_wrapper_student .myCanvas{width:100%;height:100%}.exam_skin_wood .magneticInductionLine_wrapper.magneticInductionLine_wrapper_student .dont_knock_left,.exam_skin_wood .magneticInductionLine_wrapper.magneticInductionLine_wrapper_student .dont_knock_top{display:none}.exam_skin_wood .magneticInductionLine_wrapper .main_magnet_wrapper{width:80em;height:43em;position:absolute;top:50%;left:50%;margin-left:-40em;margin-top:-22.5em;text-align:left}.exam_skin_wood .magneticInductionLine_wrapper .magneticInductionLine_2d{width:68.1em;height:37.33333em}.exam_skin_wood .magneticInductionLine_wrapper .magneticInductionLine_2d.hide_dom{display:none}.exam_skin_wood .magneticInductionLine_wrapper .play_area{position:relative;float:left;width:68.1em;height:34.1em;z-index:1000}.exam_skin_wood .magneticInductionLine_wrapper .myCanvas{width:100%;height:100%;z-index:1000}.exam_skin_wood .magneticInductionLine_wrapper .video_wrapper{width:55.70833em;height:31.25em;margin-top:5.5em;margin-left:10.20833em;border-radius:.41667em;text-align:center;position:relative;vertical-align:middle;display:inline-block;z-index:0}.exam_skin_wood .magneticInductionLine_wrapper .video_wrapper.hide_dom{display:none}.exam_skin_wood .magneticInductionLine_wrapper .video_wrapper:after{content:"";display:inline-block;vertical-align:middle;height:100%;width:0}.exam_skin_wood .magneticInductionLine_wrapper .video_player_button{position:absolute;left:38.95833em;top:25.41667em;display:inline-block;width:3.16667em;height:3.16667em;background:url(resources/wood/images/play_button.png) no-repeat;background-position:center 0;background-size:100% auto;cursor:pointer;z-index:9999}.exam_skin_wood .magneticInductionLine_wrapper .video_player_button.ui_btn_active,.exam_skin_wood .magneticInductionLine_wrapper .video_player_button:active{background-position:center -3.66667em}.exam_skin_wood .magneticInductionLine_wrapper .video_player_button.play{background-position:center -7.33333em}.exam_skin_wood .magneticInductionLine_wrapper .video_player_button.play.ui_btn_active,.exam_skin_wood .magneticInductionLine_wrapper .video_player_button.play:active{background-position:center -11em}.exam_skin_wood .magneticInductionLine_wrapper .video_content{position:relative;vertical-align:middle;width:100%;height:100%;max-width:100%;max-height:100%;z-index:0}.exam_skin_wood .magneticInductionLine_wrapper .main_magnet{display:inline-block;position:absolute;left:16.5em;top:5em;margin:0 auto;z-index:0}.exam_skin_wood .magneticInductionLine_wrapper .main_magnet_bg{width:44.41667em;height:28.41667em}.exam_skin_wood .magneticInductionLine_wrapper .main_magnet_bg.bg1{background:url(resources/wood/images/magnetic_induction_line1.png) no-repeat 50%;background-size:100% auto}.exam_skin_wood .magneticInductionLine_wrapper .main_magnet_bg.bg2{background:url(resources/wood/images/magnetic_induction_line2.png) no-repeat 50%;background-size:100% auto}.exam_skin_wood .magneticInductionLine_wrapper .main_magnet_bg.bg3{background:url(resources/wood/images/magnetic_induction_line1.png) no-repeat 50%;background-size:100% auto}.exam_skin_wood .magneticInductionLine_wrapper .main_magnet_bg.bg4{background:url(resources/wood/images/magnetic_induction_line4.png) no-repeat 50%;background-size:100% auto}.exam_skin_wood .magneticInductionLine_wrapper .main_magnet_bg.bg4:after{content:"I";color:#da4242;font-style:oblique;display:inline-block;position:absolute;font-size:2.5em;top:9.16667em;left:9.83333em;font-family:Bell MT,Times New Roman,serif}.exam_skin_wood .magneticInductionLine_wrapper .main_magnet_bg.bg4 .main_magnet_content4{display:none}.exam_skin_wood .magneticInductionLine_wrapper .main_magnet_bg.bg5{background:url(resources/wood/images/magnetic_induction_line5.png) no-repeat 50%;background-size:100% auto}.exam_skin_wood .magneticInductionLine_wrapper .main_magnet_content{position:absolute}.exam_skin_wood .magneticInductionLine_wrapper .main_magnet_content .content1{width:23.5em;height:5.875em;background-size:100% auto;margin-left:10.5em;margin-top:12.33333em}.exam_skin_wood .magneticInductionLine_wrapper .main_magnet_content .content2{width:18.08333em;height:16.70833em;position:relative;background-size:100% auto;margin-left:13.125em;margin-top:9.79167em;z-index:0}.exam_skin_wood .magneticInductionLine_wrapper .main_magnet_content .content2_shadow{width:15.66667em;height:2em;display:inline-block;position:absolute;left:14.41667em;bottom:-.41667em;background:url(resources/wood/images/box_shadow.png) no-repeat 50%;background-size:100% 100%;z-index:0}.exam_skin_wood .magneticInductionLine_wrapper .main_magnet_content .content3{width:24.375em;height:13em;background-size:100% auto;margin-left:9.5em;margin-top:11.83333em}.exam_skin_wood .magneticInductionLine_wrapper .main_magnet_content .content4{width:5em;height:25em;background-size:100% auto;margin-left:19.01em;margin-top:3.66667em}.exam_skin_wood .magneticInductionLine_wrapper .main_magnet_content .content5{width:4.16667em;height:4.16667em;background-size:100% auto;margin-left:19.91667em;margin-top:12.83333em}.exam_skin_wood .magneticInductionLine_wrapper .main_magnet_content1.hide_dom,.exam_skin_wood .magneticInductionLine_wrapper .main_magnet_content2.hide_dom,.exam_skin_wood .magneticInductionLine_wrapper .main_magnet_content3.hide_dom,.exam_skin_wood .magneticInductionLine_wrapper .main_magnet_content4.hide_dom,.exam_skin_wood .magneticInductionLine_wrapper .main_magnet_content5.hide_dom{display:none}.exam_skin_wood .magneticInductionLine_wrapper .mg_text{color:#da4242;font-style:oblique;display:inline-block;position:absolute;font-family:Bell MT,Times New Roman,serif}.exam_skin_wood .magneticInductionLine_wrapper .mg_content4_text{font-size:2.5em;top:6.04167em;left:9.83333em}.exam_skin_wood .magneticInductionLine_wrapper .content1_transparent_box{position:absolute;top:12.66667em;left:11.125em;display:inline-block;width:22.25em;height:4.75em}.exam_skin_wood .magneticInductionLine_wrapper .content2_transparent_box{position:absolute;top:10.08333em;left:14.875em;display:inline-block;width:14.58333em;height:15.95833em}.exam_skin_wood .magneticInductionLine_wrapper .content3_transparent_box{position:absolute;top:12.16667em;left:11em;display:inline-block;width:22.41667em;height:5.66667em}.exam_skin_wood .magneticInductionLine_wrapper .content5_transparent_box{position:absolute;top:14.125em;left:21.16667em;display:inline-block;width:1.625em;height:1.625em}.exam_skin_wood .magneticInductionLine_wrapper .magnet_left_top{width:10.91667em;height:11.58333em;position:absolute;top:3.25em;left:5.25em;border-radius:.25em;z-index:9999}.exam_skin_wood .magneticInductionLine_wrapper .magnet_left_top.hide_dom{display:none}.exam_skin_wood .magneticInductionLine_wrapper .magnet_left_top.head{background:url(resources/wood/images/straight_wire_lefttop.png) no-repeat 50%;background-size:100% auto;background-color:#b1c9dc}.exam_skin_wood .magneticInductionLine_wrapper .magnet_left_top.head:after{content:"I";color:#da4242;font-style:oblique;display:inline-block;position:absolute;top:7.83333em;left:6.25em;font-family:Bell MT,Times New Roman,serif}.exam_skin_wood .magneticInductionLine_wrapper .magnet_left_top.overlook{padding:5.41667em 0;background:url(resources/wood/images/straight_wire.png) no-repeat 50%;background-size:auto 70%;background-color:#b1c9dc}.exam_skin_wood .magneticInductionLine_wrapper .magnet_left_top.overlook:after{content:"I";color:#da4242;font-style:oblique;display:inline-block;position:absolute;top:5.41667em;left:6.25em;font-family:Bell MT,Times New Roman,serif}.exam_skin_wood .magneticInductionLine_wrapper .dont_knock_top{position:absolute;left:0;top:0;width:68.1em;height:2.7em}.exam_skin_wood .magneticInductionLine_wrapper .dont_knock_left{position:absolute;left:0;top:0;bottom:0;width:4em}.exam_skin_wood .magneticInductionLine_wrapper .magnetic_right_menu{display:inline-block;width:5.83333em;height:25em;background:#b1c9dc;border-radius:.25em;position:absolute;right:6em;top:7.91667em;overflow:hidden}.exam_skin_wood .magneticInductionLine_wrapper .mgr_menu_list{position:relative;height:100%}.exam_skin_wood .magneticInductionLine_wrapper .mgr_item{position:relative;float:left;width:100%;height:6.25em;cursor:pointer;background:url(resources/wood/images/right_icon.png) no-repeat;background-size:5.83333em auto}.exam_skin_wood .magneticInductionLine_wrapper .mgr_item.mgr_item1{background-position:center 0}.exam_skin_wood .magneticInductionLine_wrapper .mgr_item.mgr_item2{background-position:center -6.25em}.exam_skin_wood .magneticInductionLine_wrapper .mgr_item.mgr_item3{background-position:center -12.5em}.exam_skin_wood .magneticInductionLine_wrapper .mgr_item.mgr_item4{background-position:center -18.75em}.exam_skin_wood .magneticInductionLine_wrapper .mgr_item.on{background-color:rgba(91,146,186,.3)}.exam_skin_wood .magneticInductionLine_wrapper .mgr_item_text{font-size:.83333em;top:5em;left:4.08333em}.exam_skin_wood .magneticInductionLine_wrapper .magnetic_needle_menu{min-width:42.08333em;height:5em;background:#b1c9dc;position:absolute;bottom:2.66667em;left:50%;bottom:3.83333em;margin-left:-24.16667em;border-radius:.25em;text-align:center;white-space:nowrap}.exam_skin_wood .magneticInductionLine_wrapper .magnetic_needle_menu.hide_dom{display:none}.exam_skin_wood .magneticInductionLine_wrapper .magnetic_needle_list{position:relative;height:100%;display:inline-block;vertical-align:middle;padding:.5em .5em 0}.exam_skin_wood .magneticInductionLine_wrapper .magnetic_needle_item{display:inline-block;vertical-align:middle;width:4em;height:4em}.exam_skin_wood .magneticInductionLine_wrapper .magnetic_needle_item .mni_a{margin-top:.16667em}.exam_skin_wood .magneticInductionLine_wrapper .mni_a{display:inline-block;width:3.66667em;height:3.66667em;background:url(resources/wood/images/disk_bottom.png) no-repeat;background-size:100% auto;cursor:pointer;position:relative}.exam_skin_wood .magneticInductionLine_wrapper .mni_a .magnetic_needle{display:inline-block;position:absolute;top:0;left:0;margin:0;width:100%;height:100%;background:url(resources/wood/images/magnetic_needle.png) no-repeat;background-size:100% 100%}.exam_skin_wood .magneticInductionLine_wrapper .mni_a .mg_center{display:inline-block;position:absolute;width:100%;height:100%;top:0;left:0;margin:0;background:url(resources/wood/images/mg_center.png) no-repeat;background-size:100% 100%}.exam_skin_wood .magneticInductionLine_wrapper .mni_a .mg_center:after{content:"";display:inline-block;width:100%;height:100%;background:url(resources/wood/images/highlight.png) no-repeat 50%;background-size:100% auto}.exam_skin_wood .magneticInductionLine_wrapper .mni_a.on{width:4em;height:4em;margin:0;text-align:center}.exam_skin_wood .magneticInductionLine_wrapper .mni_a.on:after{display:inline-block;content:"";width:100%;height:100%;background:url(resources/wood/images/disk_on.png) no-repeat 50%;background-size:100% auto}.exam_skin_wood .magneticInductionLine_wrapper .mni_a.play{position:absolute;top:345px;left:345px;width:136px;height:136px;opacity:.85;text-align:center;z-index:9999;-webkit-tap-highlight-color:rgba(255,255,255,0)}.exam_skin_wood .magneticInductionLine_wrapper .mni_a.play .magnetic_needle{-webkit-transition:all .5s linear;transition:all .5s linear;-webkit-transform-origin:center center;transform-origin:center center;padding:0}.exam_skin_wood .magneticInductionLine_wrapper .com_btns{position:absolute;right:15.5em;top:30.2em;display:inline-block;margin:0 .75em;padding:0 .5em;height:2.83333em;line-height:2.83333em;text-align:center;vertical-align:middle;border-radius:.41667em;z-index:9999}.exam_skin_wood .magneticInductionLine_wrapper .com_btns .btns-primary-txt{font-size:1.16667em;color:#384650}.exam_skin_wood .magneticInductionLine_wrapper .com_btns.btns-primary{border:1px solid #397274;background:-webkit-linear-gradient(bottom,#e9e9e9,#fff);background:linear-gradient(0deg,#e9e9e9 0,#fff)}.exam_skin_wood .magneticInductionLine_wrapper .com_btns.btns-primary .btns-primary-icon{display:inline-block;margin-top:-.1em;height:3em;vertical-align:middle;margin-right:.33333em;background-position:top;background-repeat:no-repeat;background-size:100% auto}.exam_skin_wood .magneticInductionLine_wrapper .com_btns.btns-primary.ui_btn_active,.exam_skin_wood .magneticInductionLine_wrapper .com_btns.btns-primary:active{background:-webkit-linear-gradient(bottom,#76b8ba,#89c5c7);background:linear-gradient(0deg,#76b8ba 0,#89c5c7)}.exam_skin_wood .magneticInductionLine_wrapper .com_btns.btns-primary.ui_btn_active .btns-primary-txt,.exam_skin_wood .magneticInductionLine_wrapper .com_btns.btns-primary:active .btns-primary-txt{color:#fff}.exam_skin_wood .magneticInductionLine_wrapper .com_btns.btns-primary.ui_btn_active .btns-primary-icon,.exam_skin_wood .magneticInductionLine_wrapper .com_btns.btns-primary:active .btns-primary-icon{background-position:bottom}.exam_skin_wood .magneticInductionLine_wrapper .com_btns.btns-primary.click_disabled{border-color:#93989a;background:-webkit-linear-gradient(top,#c8d1d7,#c1c8cc);background:linear-gradient(180deg,#c8d1d7 0,#c1c8cc);cursor:default}.exam_skin_wood .magneticInductionLine_wrapper .com_btns.btns-primary.click_disabled .btns-primary-txt{color:#969fa4}.exam_skin_wood .magneticInductionLine_wrapper .com_btns.btns-primary.click_disabled .btns-primary-icon{background-position:50%}.exam_skin_wood .magneticInductionLine_wrapper .mg_show_btn .btns-primary-icon{width:1.75em;background:url(resources/wood/images/eye.png) no-repeat}.exam_skin_wood .magneticInductionLine_wrapper .mg_show_btn.hide_dom{display:none}.exam_skin_wood .magneticInductionLine_wrapper .mg_return_btn .btns-primary-icon{width:1.58333em;background:url(resources/wood/images/return.png) no-repeat}.exam_skin_wood .magneticInductionLine_wrapper .mg_return_btn.hide_dom{display:none}.exam_skin_wood .magneticInductionLine_wrapper .magnetic_bottom{width:100%;height:4.91667em;background:#cfdee9;position:absolute;bottom:0;overflow:hidden}.exam_skin_wood .magneticInductionLine_wrapper .magnetic_bottom .mg_btn_wrap{position:absolute;right:10em;top:0;bottom:0;height:100%}.exam_skin_wood .magneticInductionLine_wrapper .magnetic_bottom .mg_btn3{top:0;left:16.66667em;padding-top:0!important;white-space:nowrap}.exam_skin_wood .magneticInductionLine_wrapper .magnetic_bottom .mg_btn3.hide_visibility{visibility:hidden}.exam_skin_wood .magneticInductionLine_wrapper .magnetic_bottom .com_applicationset_switch{background:#e8edf0;border-radius:1.04167em;display:inline-block;width:4.16667em;height:2.08333em;border:1px solid #989fa5;line-height:normal;position:relative;cursor:pointer;-webkit-transition:left .3s,background .3s;transition:left .3s,background .3s}.exam_skin_wood .magneticInductionLine_wrapper .magnetic_bottom .com_applicationset_switch:before{-webkit-transition:left .3s;transition:left .3s;content:"";width:2.08333em;height:2.08333em;border:1px solid #a3a9ae;position:absolute;left:-2px;top:-2px;border-radius:100%;background:#f2f2f2}.exam_skin_wood .magneticInductionLine_wrapper .magnetic_bottom .com_applicationset_switch.checked{background:#6a9ea1}.exam_skin_wood .magneticInductionLine_wrapper .magnetic_bottom .com_applicationset_switch.checked:before{top:-2px;left:2.08333em;background:#f5f5f5;border-color:#397274}.exam_skin_wood .magneticInductionLine_wrapper .magnetic_bottom .com_applicationset_switch input[type=checkbox]{cursor:pointer;position:relative;-webkit-appearance:none;opacity:0;width:4.16667em;height:2.08333em}.exam_skin_wood .magneticInductionLine_wrapper .magnetic_bottom .tool_operate_bar{display:inline-block;min-width:5em;text-align:center;margin:0 1.33333em;padding-top:.66667em;height:100%}.exam_skin_wood .magneticInductionLine_wrapper .magnetic_bottom .tool_operate_bar.ui_btn_active .tool_operate_icon.tool_reset,.exam_skin_wood .magneticInductionLine_wrapper .magnetic_bottom .tool_operate_bar:active .tool_operate_icon.tool_reset{background:url(resources/wood/images/tool_reset_act.png) no-repeat 50%;background-size:100% auto}.exam_skin_wood .magneticInductionLine_wrapper .magnetic_bottom .tool_operate_bar.click_disabled .tool_operate_icon.tool_reset{background:url(resources/wood/images/tool_reset_dis.png) no-repeat 50%;background-size:100% auto}.exam_skin_wood .magneticInductionLine_wrapper .magnetic_bottom .tool_operate_bar .tool_operate_imgcnt{display:block;width:100%;height:2.91667em}.exam_skin_wood .magneticInductionLine_wrapper .magnetic_bottom .tool_operate_bar .tool_operate_imgcnt:after{content:"";display:inline-block;width:0;height:100%;vertical-align:bottom}.exam_skin_wood .magneticInductionLine_wrapper .magnetic_bottom .tool_operate_bar .tool_operate_icon{display:inline-block;vertical-align:bottom;width:2.375em;height:2.16667em;background:url(resources/toolscommon/button/wood/images/tool_revert_nor.png) no-repeat 50%;background-size:100% 100%}.exam_skin_wood .magneticInductionLine_wrapper .magnetic_bottom .tool_operate_bar .tool_operate_icon.tool_reset{width:2.16667em;height:2.45833em;background:url(resources/wood/images/tool_reset_nor.png) no-repeat 50%;background-size:100% auto}.exam_skin_wood .magneticInductionLine_wrapper .magnetic_bottom .tool_operate_bar .tool_operate_text{font-size:1.16667em;line-height:1;margin-top:0;color:#292525}.typefaces_long .exam_skin_wood .magneticInductionLine_wrapper .com_btns{line-height:1.16667em}.typefaces_long .exam_skin_wood .magneticInductionLine_wrapper .com_btns .btns-primary-txt{display:inline-block;margin-top:-.05em;padding:.2em 0;overflow:hidden;max-width:12em;max-height:100%;font-size:1em;vertical-align:middle}.typefaces_long .exam_skin_wood .magneticInductionLine_wrapper .magnetic_bottom .tool_operate_bar{max-width:12.5em}.typefaces_long .exam_skin_wood .magneticInductionLine_wrapper .magnetic_bottom .com_applicationset_switch{margin-top:-.25em;margin-bottom:0}.typefaces_long .exam_skin_wood .magneticInductionLine_wrapper .magnetic_bottom .tool_operate_text{margin-top:.1em;height:2em;font-size:1.08333em}.typefaces_long .exam_skin_wood .magneticInductionLine_wrapper .magnetic_bottom .mg_btn3 .tool_reset{margin-top:1.2em}.typefaces_long .exam_skin_wood .magneticInductionLine_wrapper .magnetic_bottom .mg_btn3 .tool_operate_text{display:none}.typefaces_ru_RU .exam_skin_wood .magneticInductionLine_wrapper .com_btns{line-height:1.16667em}.typefaces_ru_RU .exam_skin_wood .magneticInductionLine_wrapper .com_btns .btns-primary-txt{display:inline-block;margin-top:-.05em;padding:.2em 0;overflow:hidden;max-width:12em;max-height:100%;font-size:1em;vertical-align:middle}.typefaces_ru_RU .exam_skin_wood .magneticInductionLine_wrapper .magnetic_bottom .tool_operate_bar{max-width:12.5em}.typefaces_ru_RU .exam_skin_wood .magneticInductionLine_wrapper .magnetic_bottom .com_applicationset_switch{margin-top:-.25em;margin-bottom:0}.typefaces_ru_RU .exam_skin_wood .magneticInductionLine_wrapper .magnetic_bottom .tool_operate_text{margin-top:.1em;height:2em;font-size:1.08333em}.typefaces_ru_RU .exam_skin_wood .magneticInductionLine_wrapper .magnetic_bottom .mg_btn3 .tool_reset{margin-top:1.2em}.typefaces_ru_RU .exam_skin_wood .magneticInductionLine_wrapper .magnetic_bottom .mg_btn3 .tool_operate_text{display:none}]]></css><view><![CDATA[<div class="exam_skin_wood"><div class="magneticInductionLine_wrapper _wrapper"><div class="main_magnet_wrapper"><div class="video_wrapper hide_dom _3d_container"><video class="video_content _video_content" preload="auto"><source src="" type="video/mp4"></video></div><div class="magneticInductionLine_2d _2d_container"><div class="play_area _play_area"><canvas id="myCanvas" class="myCanvas"></canvas></div><div class="main_magnet"><div class="main_magnet_bg _main_magnet_bg"><ul class="main_magnet_content _main_magnet"><li class="com_mmg main_magnet_content1" data-index="1"><img class="main_magnet_content content1" src="resources/wood/images/bar_magnet.png"> <span class="content1_transparent_box _box"></span></li><li class="com_mmg main_magnet_content2 hide_dom" data-index="2"><img class="main_magnet_content content2" src="resources/wood/images/u_shaped_magnet.png"> <span class="content2_shadow"></span> <span class="content2_transparent_box _box"></span></li><li class="com_mmg main_magnet_content3 hide_dom" data-index="3"><img class="main_magnet_content content3" src="resources/wood/images/solenoid.png"> <span class="content3_transparent_box _box"></span></li><li class="com_mmg main_magnet_content4 hide_dom" data-index="4"><img class="main_magnet_content content4" src="resources/wood/images/straight_wire.png"> <span class="mg_text mg_content4_text">I</span></li><li class="com_mmg main_magnet_content5 hide_dom" data-index="5"><img class="main_magnet_content content5" src="resources/wood/images/straight_wire_top.png"> <span class="content5_transparent_box _box"></span></li></ul></div></div><a class="com_btns btns-primary mg_show_btn hide_dom _btn_planform" href="javascript:;"><b class="btns-primary-icon"></b><span class="btns-primary-txt" data-bind="text:magnetic_planform">显示俯视图</span> </a><a class="com_btns btns-primary mg_return_btn hide_dom _btn_back_visual_angle" href="javascript:;"><b class="btns-primary-icon"></b><span class="btns-primary-txt" data-bind="text:magnetic_back_visual_angle">返回视角</span></a><div class="magnet_left_top hide_dom head _scene4_left_top_thumbnail"></div><div class="dont_knock_top _dont_knock_top"></div><div class="dont_knock_left _dont_knock_left"></div><div class="magnetic_needle_menu _magnetic_needle_menu_container"><ul class="magnetic_needle_list _magnetic_needle_list"><li class="magnetic_needle_item" data-index="1"><span href="javascript:;" class="mni_a"><b class="magnetic_needle"></b> <i class="mg_center"></i></span></li><li class="magnetic_needle_item" data-index="2"><span href="javascript:;" class="mni_a"><b class="magnetic_needle"></b> <i class="mg_center"></i></span></li><li class="magnetic_needle_item" data-index="3"><span href="javascript:;" class="mni_a"><b class="magnetic_needle"></b> <i class="mg_center"></i></span></li><li class="magnetic_needle_item" data-index="4"><span href="javascript:;" class="mni_a"><b class="magnetic_needle"></b> <i class="mg_center"></i></span></li><li class="magnetic_needle_item" data-index="5"><span href="javascript:;" class="mni_a"><b class="magnetic_needle"></b> <i class="mg_center"></i></span></li><li class="magnetic_needle_item" data-index="6"><span href="javascript:;" class="mni_a"><b class="magnetic_needle"></b> <i class="mg_center"></i></span></li><li class="magnetic_needle_item" data-index="7"><span href="javascript:;" class="mni_a"><b class="magnetic_needle"></b> <i class="mg_center"></i></span></li><li class="magnetic_needle_item" data-index="8"><span href="javascript:;" class="mni_a"><b class="magnetic_needle"></b> <i class="mg_center"></i></span></li><li class="magnetic_needle_item" data-index="9"><span href="javascript:;" class="mni_a"><b class="magnetic_needle"></b> <i class="mg_center"></i></span></li><li class="magnetic_needle_item" data-index="10"><span href="javascript:;" class="mni_a"><b class="magnetic_needle"></b> <i class="mg_center"></i></span></li></ul></div></div><div class="magnetic_right_menu"><ul class="mgr_menu_list _menu_list"><li class="mgr_item mgr_item1 on" data-index="1"></li><li class="mgr_item mgr_item2" data-index="2"></li><li class="mgr_item mgr_item3" data-index="3"></li><li class="mgr_item mgr_item4" data-index="4"><span class="mg_text mgr_item_text">I</span></li></ul></div></div><div class="magnetic_bottom"><div class="mg_btn_wrap"><a href="javascript:;" class="tool_operate_bar _btn_show_magnetic_line"><label class="com_applicationset_switch"><input type="checkbox"></label><span class="tool_operate_text" data-bind="text:magnetic_show_line"></span> </a><a href="javascript:;" class="tool_operate_bar mg_btn3 _btn_reset"><span class="tool_operate_imgcnt"><i class="tool_operate_icon tool_reset"></i> </span><span class="tool_operate_text" data-bind="text:magnetic_reset"></span></a></div></div></div></div>]]></view><presenter><![CDATA["use strict";

(function () {
    var helper = {
        currentScene: 1,
        magnetics: [],
        currentMoveNeedle: null,
        domObj: {}
    };

    var Presenter = BasicPresenter.extend({
        metaInfo: {
            name: "MagneticInduction",
            type: PresenterType.PRESENTER_COMPONENT,
            subtype: ""
        },
        /**
         * Presenter的初始化方法
         * @private
         */
        $init: function $init() {
            var self = this;
            self._super();
            //定义日志
            self.logger.appendHandler(function (message, context) {
                switch (context.level.name) {
                    case 'DEBUG':
                        console.debug(message);
                        break;
                    case 'INFO':
                        console.info(message);
                        break;
                    case 'WARN':
                        console.warn(message);
                        break;
                    case 'ERROR':
                        console.error(message);
                        break;
                    default:
                        console.log(message);
                        break;
                }
            }, {
                level: Logger.DEBUG
            });
        },
        /**
         * Presenter对外暴露的方法
         */
        _service_: {
            constructor: function constructor(parent) {
                this.parent = parent;
            },
            setLocationProperties: function setLocationProperties(properties) {
                helper.i18n = properties;
            },
            getExtendData: function getExtendData() {
                var options = {
                    currentScene: helper.currentScene,
                    magnetics: helper.magnetics,
                    showMagneticLineSwitch: helper.domObj.$btnShowMagneticLine.children('label').hasClass('checked'),
                    show3dMode: helper.domObj.$btnShow3dMode.children('label').hasClass('checked'),
                    width: helper.domObj.$playArea.width(),
                    height: helper.domObj.$playArea.height(),
                    extend: {
                        currentView: helper.magnetics[3].getCurrentView()
                    }
                };

                return options;
            },
            getQuestionInfo: function getQuestionInfo() {
                return {
                    id: helper.model.ID,
                    type_code: "MagneticInduction",
                    type_name: helper.i18n['magnetic_induction'],
                    url: "",
                    item: "MagneticInduction",
                    statistics_type: 'no_need',
                    dispatchOnly: true,
                    notExistStatistics: true,
                    noNeedQuizProgress: true
                };
            }
        },
        getService: function getService() {
            this._service_.constructor(this);
            return this._service_;
        },
        /****以下开始为icPlayer的生命周期方法*****/
        run: function run(view, model) {
            var self = this;
            $.extend(helper, {
                isAPP: self.isApp,
                currentScene: 1,
                magnetics: [],
                currentMoveNeedle: null,
                domObj: {}
            });
            helper.$view = $(view);
            helper.model = model;
            this.__interface = {
                resizeScreen: function resizeScreen(data) {
                    //data {ratio:4/3||3/4}
                    console.log('全屏', data);
                    var ratio = eval(data.ratio);
                    this._layoutNeedleSize();
                    for (var i = 0, iLen = helper.magnetics.length; i < iLen; i++) {
                        for (var j = 0, jLen = helper.magnetics[i]._needles.length; j < jLen; j++) {
                            helper.magnetics[i]._needles[j]._x = helper.magnetics[i]._needles[j]._x * ratio;
                            helper.magnetics[i]._needles[j]._y = helper.magnetics[i]._needles[j]._y * ratio;
                            $(helper.magnetics[i]._needles[j]._dom).css({ left: helper.magnetics[i]._needles[j]._x, top: helper.magnetics[i]._needles[j]._y });
                        }
                    }
                }
            };
            this._initImgPath();
            this._initComponent();
            if (this.isStudent) {
                helper.domObj.$wrapper.addClass('magneticInductionLine_wrapper_student');
            }

            var $deferred = $.Deferred();
            require(['Magnetic1', 'Magnetic2', 'Magnetic3', 'Magnetic4'], function (Magnetic1, Magnetic2, Magnetic3, Magnetic4) {
                helper.magnetics.push(new Magnetic1(helper));
                helper.magnetics.push(new Magnetic2(helper));
                helper.magnetics.push(new Magnetic3(helper));
                helper.magnetics.push(new Magnetic4(helper));
            }).then(function () {
                self.logger.log('require加载模块完成');
                $deferred.resolve();
            }).catch(function () {
                self.logger.error('require加载模块失败');
                $deferred.reject();
            });

            return $deferred.promise();
        },
        pageShow: function pageShow(view, model) {
            var self = this;
            ko.applyBindings(helper.i18n, view);
            this._bindEvent();
            //工具窗口是否有推送数据,因为要用到trigger，所以需要先执行_bindEvent()
            var extendData = helper.model['__ExtendModel'];
            if (!$.isEmptyObject(extendData)) {
                var Needle;
                require(['Needle'], function (Needle) {
                    helper.domObj.$menuItems.removeClass('on');
                    helper.currentScene = extendData.currentScene;
                    var widthScale = helper.domObj.$playArea.width() / extendData.width;
                    var heightScale = helper.domObj.$playArea.height() / extendData.height;
                    for (var i = 0, iLen = extendData.magnetics.length; i < iLen; i++) {
                        $.extend(true, helper.magnetics[i], extendData.magnetics[i]);
                        helper.magnetics[i].setNeedles([]);
                        for (var j = 0, jLen = extendData.magnetics[i]._needles.length; j < jLen; j++) {
                            helper.magnetics[i].getNeedles().push(new Needle(helper));
                            extendData.magnetics[i]._needles[j]._x = extendData.magnetics[i]._needles[j]._x * widthScale;
                            extendData.magnetics[i]._needles[j]._y = extendData.magnetics[i]._needles[j]._y * heightScale;
                            $.extend(helper.magnetics[i].getNeedles()[j], extendData.magnetics[i]._needles[j]);
                        }
                    }
                    //预设4的视图
                    helper.magnetics[3].setCurrentView(extendData.extend.currentView);
                    helper.domObj.$menuItems.filter('li[data-index="' + helper.currentScene + '"]').trigger('click');
                    extendData.showMagneticLineSwitch && helper.domObj.$btnShowMagneticLine.trigger('click');
                    extendData.show3dMode && helper.domObj.$btnShow3dMode.trigger('click');
                    self._layoutNeedleSize();
                });
            }
            self._layoutNeedleSize();
        },
        pageLeave: function pageLeave() {
            this._unbindEvent();
        },
        destroy: function destroy() {},
        /**如果不需要处理icplayer的状态恢复事件, 请将以下两个方法删除掉**/
        getState: function getState() {},
        setState: function setState(state, options) {},
        /****以下开始为Presenter的私有方法*****/
        _initImgPath: function _initImgPath() {
            var self = this;
            var imgs = helper.$view.find('img');
            helper.basePath = self.basePath;
            for (var i = 0, iLen = imgs.size(); i < iLen; i++) {
                $(imgs[i]).attr('src', self.basePath + $(imgs[i]).attr('src'));
            }
        },
        _initComponent: function _initComponent() {
            helper.domObj.$wrapper = helper.$view.find('._wrapper');
            //2D容器
            helper.domObj.$2dContainer = helper.$view.find('._2d_container');
            //3D容器
            helper.domObj.$3dContainer = helper.$view.find('._3d_container');
            //3D视频
            helper.domObj.$3dVideo = helper.$view.find('._video_content');
            //canvas画布
            helper.domObj.$canvas = helper.$view.find('#myCanvas');
            //磁体磁感线背景容器
            helper.domObj.$mainMagnetBg = helper.$view.find('._main_magnet_bg');
            //磁体容器
            helper.domObj.$mainMagnet = helper.$view.find('._main_magnet');
            //磁体容器的box，用于碰撞检测
            helper.domObj.$box1 = helper.$view.find('._main_magnet li[data-index="1"] ._box');
            helper.domObj.$box2 = helper.$view.find('._main_magnet li[data-index="2"] ._box');
            helper.domObj.$box2Img = helper.$view.find('._main_magnet li[data-index="2"] img');
            helper.domObj.$box3 = helper.$view.find('._main_magnet li[data-index="3"] ._box');
            helper.domObj.$box4 = helper.$view.find('._main_magnet li[data-index="4"] ._box');
            helper.domObj.$box5 = helper.$view.find('._main_magnet li[data-index="5"] ._box');
            helper.domObj.$knockTop = helper.$view.find('._dont_knock_top'); //头部不能碰撞的区域
            helper.domObj.$knockLeft = helper.$view.find('._dont_knock_left'); //左边不能碰撞的区域

            //磁体容器里的磁体项
            helper.domObj.$mainMagnetItem = helper.$view.find('._main_magnet li');
            //小磁针拖动区域
            helper.domObj.$playArea = helper.$view.find('._play_area');
            //右边的菜单列表
            helper.domObj.$menuList = helper.$view.find('._menu_list');
            //右边的菜单项
            helper.domObj.$menuItems = helper.$view.find('._menu_list li');
            //小磁针列表容器
            helper.domObj.$magneticNeedleMenuContainer = helper.$view.find('._magnetic_needle_menu_container');
            //小磁针列表
            helper.domObj.$magneticNeedleList = helper.$view.find('._magnetic_needle_list');
            //小磁针项
            helper.domObj.$magneticNeedleItems = helper.$view.find('._magnetic_needle_list li');
            //显示关闭磁感线按钮
            helper.domObj.$btnShowMagneticLine = helper.$view.find('._btn_show_magnetic_line');
            //显示关闭3D模式
            helper.domObj.$btnShow3dMode = helper.$view.find('._btn_show_3d_mode');
            //重置按钮
            helper.domObj.$btnReset = helper.$view.find('._btn_reset');
            //场景4俯视图左上角的缩略图
            helper.domObj.$scene4LeftTopThumbnail = helper.$view.find('._scene4_left_top_thumbnail');
            //显示俯视图按钮
            helper.domObj.$btnPlanform = helper.$view.find('._btn_planform');
            //返回视角按钮
            helper.domObj.$btnBackVisualAngle = helper.$view.find('._btn_back_visual_angle');
        },
        _bindEvent: function _bindEvent() {
            var self = this;
            //右边菜单项的点击处理
            helper.domObj.$menuItems.on('click', function (e) {
                var $this = $(this);
                if ($this.hasClass('on')) {
                    return;
                }
                helper.currentScene = $this.data('index');
                var currentMagnetic = helper.magnetics[helper.currentScene - 1];
                currentMagnetic.show();
            });
            //视频的点击处理
            helper.domObj.$3dVideo.on('click', function (e) {
                if (helper.domObj.$3dVideo[0].paused) {
                    if (helper.domObj.$3dVideo[0].currentTime == 0 || helper.domObj.$3dVideo[0].currentTime >= 10) {
                        helper.domObj.$3dVideo[0].load();
                    }
                    helper.domObj.$3dVideo[0].play();
                } else {
                    helper.domObj.$3dVideo[0].pause();
                }
            });
            //小磁针mousedown事件
            helper.domObj.$magneticNeedleItems.on('mousedown touchstart', function (e) {
                e.preventDefault();
                e.stopPropagation();
                var downX = self._getClientX(e),
                    downY = self._getClientY(e);
                var $this = $(this);
                var currentMagnetic = helper.magnetics[helper.currentScene - 1];
                //小磁针原始是否选中状态
                var isOriginChecked;
                if (!$this.children('span').hasClass('on')) {
                    //清除在操作区小磁针的选中状态
                    var needles = currentMagnetic.getNeedles();
                    for (var i = 0, iLen = needles.length; i < iLen; i++) {
                        needles[i].getDom().removeClass('on');
                        needles[i].setChecked(false);
                    }
                    //清除底部容器小磁针的选中状态
                    helper.domObj.$magneticNeedleItems.children('span').removeClass('on');
                    $this.children('span').addClass('on');
                    isOriginChecked = false;
                    currentMagnetic.setCheckedIndex($this.data('index'));
                } else {
                    isOriginChecked = true;
                }
                //标记是移动事件还是点击事件
                var isMoveEvent = false;
                var lastMovedX = null,
                    lastMovedY = null;
                var $needle = helper.domObj.$magneticNeedleItems.filter(':not(.hide_dom)').children('span.on');
                var $needleItem = $needle.parent();
                $needle = $needle.clone();
                $needle.addClass('play');
                $needle.width(helper.bigNeedlesize);
                $needle.height(helper.bigNeedlesize);
                helper.domObj.$playArea.append($needle);
                var needleWidth = $needle.width();
                var needleHeight = $needle.height();
                $needle.addClass('hide_dom');

                //小磁针mousemove事件
                helper.$view.on('mousemove touchmove', function (e) {
                    e.preventDefault();
                    e.stopPropagation();
                    if (downX >= self._getClientX(e) - 2 && downX <= self._getClientX(e) + 2 && downY >= self._getClientY(e) - 2 && downY <= self._getClientY(e) + 2) {
                        return;
                    }
                    isMoveEvent = true;
                    var left = self._getClientX(e) - helper.domObj.$playArea.offset().left - needleWidth / 2;
                    var top = self._getClientY(e) - helper.domObj.$playArea.offset().top - needleWidth / 2;
                    console.log('needleWidth:', needleWidth, 'needleHeight:', needleHeight);
                    var isCollide = currentMagnetic.collideCheck(left, top, needleWidth, needleHeight);
                    if (!isCollide) {
                        self._layoutNeedleSize();
                        lastMovedX = self._getClientX(e);
                        lastMovedY = self._getClientY(e);
                        $needle.removeClass('hide_dom');
                        $needleItem.addClass('hide_dom');
                        var degree = currentMagnetic.computeRotateDegree(left + needleWidth / 2, top + needleWidth / 2);
                        $needle.css({ left: left, top: top });
                        $needle.children('b').css({ transform: 'rotate(' + degree + 'deg)' });
                    }
                });
                //小磁针mouseup事件
                helper.$view.on('mouseup touchend mouseleave', function (e) {
                    e.preventDefault();
                    e.stopPropagation();
                    //清除在操作区小磁针的选中状态
                    var needles = currentMagnetic.getNeedles();
                    for (var i = 0, iLen = needles.length; i < iLen; i++) {
                        needles[i].getDom().removeClass('on');
                        needles[i].setChecked(false);
                    }

                    if (isMoveEvent) {
                        $needle.remove();
                        $needleItem.removeClass('hide_dom');
                        if (lastMovedX != null && lastMovedY != null) {
                            playAreaOperation(lastMovedX, lastMovedY, true);
                        }
                    } else {
                        //mouseup当作点击事件
                        if (isOriginChecked) {
                            $needleItem.children('span').removeClass('on');
                            return;
                        }

                        helper.domObj.$magneticNeedleItems.children('span').removeClass('on');
                        $needleItem.children('span').addClass('on');
                        //记录选中小磁针
                        currentMagnetic.setCheckedIndex($this.data('index'));
                    }

                    helper.$view.off('mousemove');
                    helper.$view.off('touchmove');
                    helper.$view.off('mouseup');
                    helper.$view.off('touchend');
                    helper.$view.off('mouseleave');
                });
            });

            //磁感线隐藏显示开关
            helper.domObj.$btnShowMagneticLine.on('click', function (e) {
                e.preventDefault();
                var $this = $(this);
                $this.children('label').toggleClass('checked');
                var currentMagnetic = helper.magnetics[helper.currentScene - 1];
                currentMagnetic.showMagneticInductionLine($this.children('label').hasClass('checked'));
            });
            //3D模式隐藏显示开关
            helper.domObj.$btnShow3dMode.on('click', function (e) {
                e.preventDefault();
                var $this = $(this);
                $this.children('label').toggleClass('checked');
                var currentMagnetic = helper.magnetics[helper.currentScene - 1];
                currentMagnetic.open3DMode($this.children('label').hasClass('checked'));
            });
            //重置按钮点击
            helper.domObj.$btnReset.on('click', function (e) {
                e.preventDefault();
                if ($(this).hasClass('click_disabled')) {
                    return;
                }
                var currentMagnetic = helper.magnetics[helper.currentScene - 1];
                currentMagnetic.reset();
            });
            //演示区点击操作
            helper.domObj.$playArea.on('click', function (e) {
                playAreaOperation(self._getClientX(e), self._getClientY(e), false);
            });

            function playAreaOperation(x, y, isCheckedCollide) {
                var left = x - helper.domObj.$playArea.offset().left;
                var top = y - helper.domObj.$playArea.offset().top;
                var currentMagnetic = helper.magnetics[helper.currentScene - 1];
                currentMagnetic.playAreaOperation(left, top, isCheckedCollide);
            }
        },
        _unbindEvent: function _unbindEvent() {
            helper.domObj.$menuItems.off('click');
            helper.domObj.$playArea.off('click');
        },
        _isTouchEvent: function _isTouchEvent(type) {
            var iste = false;
            switch (type) {
                case 'touchstart':
                case 'touchmove':
                case 'touchend':
                case 'touchcancel':
                    iste = true;
                    break;
                default:
                    iste = false;
            }
            return iste;
        },
        _getClientX: function _getClientX(e) {
            var self = this;
            if (self._isTouchEvent(e.type)) {
                return e.originalEvent.touches[0].clientX;
            } else {
                return e.clientX;
            }
        },
        _getClientY: function _getClientY(e) {
            var self = this;
            if (self._isTouchEvent(e.type)) {
                return e.originalEvent.touches[0].clientY;
            } else {
                return e.clientY;
            }
        },
        _layoutNeedleSize: function _layoutNeedleSize() {
            var currentFontSize = helper.domObj.$wrapper.css("font-size");
            var currentFontSizeNumber = parseInt(currentFontSize);
            console.log(currentFontSizeNumber);
            var smallNeedlesize = currentFontSizeNumber / 24 * 88;
            var middleNeedlesize = currentFontSizeNumber / 24 * 96;
            var bigNeedlesize = currentFontSizeNumber / 24 * 136;
            helper.smallNeedlesize = smallNeedlesize;
            helper.middleNeedlesize = middleNeedlesize;
            helper.bigNeedlesize = bigNeedlesize;

            // helper.domObj.$magneticNeedleItems.find('span').css({
            //     "width": parseInt(smallNeedlesize),
            //     "height": parseInt(smallNeedlesize)
            // });
            // helper.domObj.$magneticNeedleItems.find('span.on').css({
            //     "width": parseInt(middleNeedlesize),
            //     "height": parseInt(middleNeedlesize)
            // });
            helper.domObj.$playArea.find('span').css({
                "width": parseInt(bigNeedlesize),
                "height": parseInt(bigNeedlesize)
            });
        }
    });

    window.AddonMagneticInduction_create = function () {
        return new Presenter('MagneticInduction');
    };
})();
'use strict';

define('BaseMagnetic', ['Needle'], function (Needle) {
    var BaseMagnetic = Class.extend({
        $init: function $init(helper) {
            var self = this;
            self._helper = helper;
            self._checkedIndex = 0;
            self._needles = [];
        },
        toJSON: function toJSON() {
            return {
                _needles: this._needles,
                _checkedIndex: this._checkedIndex
            };
        },
        setHelper: function setHelper(helper) {
            var self = this;
            self._helper = helper;
        },
        setNeedles: function setNeedles(needles) {
            this._needles = needles;
        },
        getNeedles: function getNeedles() {
            return this._needles;
        },
        setCheckedIndex: function setCheckedIndex(index) {
            this._checkedIndex = index;
        },
        //切换预设，显示当前预设
        show: function show() {
            var self = this;
            self._helper.domObj.$menuItems.removeClass('on');
            self._helper.domObj.$menuItems.filter('li[data-index="' + self._helper.currentScene + '"]').addClass('on');

            self._helper.domObj.$mainMagnetItem.addClass('hide_dom');
            self._helper.domObj.$mainMagnetItem.filter('li[data-index="' + self._helper.currentScene + '"]').removeClass('hide_dom');
            //是否显示磁感线
            self.showMagneticInductionLine(self._helper.domObj.$btnShowMagneticLine.children('label').hasClass('checked'));
            //是否打开3D模式
            self.open3DMode(self._helper.domObj.$btnShow3dMode.children('label').hasClass('checked'));
            //显示小磁针列表容器
            self._helper.domObj.$magneticNeedleMenuContainer.removeClass('hide_dom');
            //隐藏预设4的两个按钮和俯视图左上角的缩略图
            self._helper.domObj.$btnPlanform.addClass('hide_dom');
            self._helper.domObj.$btnBackVisualAngle.addClass('hide_dom');
            self._helper.domObj.$scene4LeftTopThumbnail.addClass('hide_dom');
            //预设4里有可能会把重置按钮置灰
            self._helper.domObj.$btnReset.removeClass('click_disabled');

            //绘制小磁针在操作区的位置
            self.initNeedle();
        },
        initNeedle: function initNeedle() {
            var self = this;
            self._helper.domObj.$playArea.children('span').remove();

            //重置底部的小磁针状态
            for (var i = 0, iLen = self._helper.domObj.$magneticNeedleItems.size(); i < iLen; i++) {
                var $needleItem = $(self._helper.domObj.$magneticNeedleItems[i]);
                $needleItem.removeClass('hide_dom');
                $needleItem.children('span').removeClass('on');
            }
            //是否有在操作区里的标记
            var isInOperateArea = false;
            for (var i = 0, iLen = self._needles.length; i < iLen; i++) {
                var needle = self._needles[i];
                needle.setPosition(needle.getPosition().x, needle.getPosition().y);
                var $needle = $(needle.getHtml());
                $needle.width(self._helper.bigNeedlesize);
                $needle.height(self._helper.bigNeedlesize);
                self._helper.domObj.$playArea.append($needle);
                var left = needle.getPosition().x;
                var top = needle.getPosition().y;
                $needle.css({ left: left, top: top });
                $needle.children('b').css({ transform: 'rotate(' + needle.getRotate() + 'deg)' });
                self._bindNeedleEvent($needle);
                needle.setDom($needle);
                if (needle.getIndex() === self._checkedIndex) {
                    isInOperateArea = true;
                } else {
                    $needle.removeClass('on');
                }
                //如果已经拖动到操作区的隐藏
                self._helper.domObj.$magneticNeedleItems.filter('li[data-index="' + needle.getIndex() + '"]').addClass('hide_dom');
            }
            //底部小磁针选中的项
            if (!isInOperateArea && self._checkedIndex != 0) {
                self._helper.domObj.$magneticNeedleItems.filter('li[data-index="' + self._checkedIndex + '"]').children('span').addClass('on');
            }
        },
        /**
         * x,y是鼠标位置的坐标,针对playArea左上角为圆点坐标
         * @param x
         * @param y
         * @param ischeckedCollide 是否碰撞检测过
         */
        playAreaOperation: function playAreaOperation(x, y, isCheckedCollide) {
            var self = this;
            var $needle = self._helper.domObj.$magneticNeedleItems.filter(':not(.hide_dom)').children('span.on');
            var needle = null;
            if ($needle.size() != 0) {
                //底部容器中的小磁针被选择
                //碰撞检测
                var $tempNeedle = $needle.clone();
                $tempNeedle.addClass('play');
                $tempNeedle.width(self._helper.bigNeedlesize);
                $tempNeedle.height(self._helper.bigNeedlesize);
                self._helper.domObj.$playArea.append($tempNeedle);
                var needleWidth = $tempNeedle.width(),
                    needleHeight = $tempNeedle.height();
                $tempNeedle.remove();
                x = x - needleWidth / 2;
                y = y - needleHeight / 2;
                if (!isCheckedCollide) {
                    var isCollide = self.collideCheck(x, y, needleWidth, needleHeight);
                    if (isCollide) {
                        return;
                    }
                }

                self.addNewNeedle(x, y, $needle.parent().data('index'));
            } else {
                //操作区有选中的小磁针
                for (var i = 0, iLen = self.getNeedles().length; i < iLen; i++) {
                    if (self.getNeedles()[i].getChecked()) {
                        needle = self.getNeedles()[i];
                        break;
                    }
                }
                //没有选中的小磁针
                if (!needle) {
                    return;
                }
                $needle = needle.getDom();
                x = x - $needle.width() / 2;
                y = y - $needle.height() / 2;
                var isCollide = self.collideCheck(x, y, $needle.width(), $needle.height());
                if (isCollide) {
                    return;
                }

                needle.setPosition(x, y);
                $needle.css({ left: x, top: y });
                var degree = self.computeRotateDegree(x + $needle.width() / 2, y + $needle.height() / 2);
                needle.setRotate(degree);
                $needle.children('b').css({ transform: 'rotate(' + degree + 'deg)' });
            }
        },
        //显示磁感线
        showMagneticInductionLine: function showMagneticInductionLine(isShowLine) {
            var self = this;
            self._helper.domObj.$mainMagnetBg.removeClass('bg1 bg2 bg3 bg4 bg5');
            isShowLine && self._helper.domObj.$mainMagnetBg.addClass('bg' + self._helper.currentScene);
            //在3D模式下切换磁感线
            var isShow3D = self._helper.domObj.$btnShow3dMode.children('label').hasClass('checked');
            if (isShow3D) {
                self._helper.domObj.$3dVideo[0].pause();
                self._helper.domObj.$3dVideo.children('source').attr('src', '');
                if (isShowLine) {
                    self._helper.domObj.$3dVideo.children('source').attr('src', self._helper.basePath + 'resources/wood/videos/scene' + self._helper.currentScene + '_2.mp4');
                } else {
                    self._helper.domObj.$3dVideo.children('source').attr('src', self._helper.basePath + 'resources/wood/videos/scene' + self._helper.currentScene + '_1.mp4');
                }
                self._helper.domObj.$3dVideo[0].load();
                self._helper.domObj.$3dVideo[0].play();
                // var count = 1;
                // self._helper.domObj.$3dVideo.off('ended');
                // self._helper.domObj.$3dVideo.on('ended',function (e) {
                //     self._helper.domObj.$3dVideo[0].currentTime = 0.1;
                //     self._helper.domObj.$3dVideo[0].play();
                //     count++;
                //     console.log('播放次数：',count);
                // });
            }
        },
        //打开3D模式
        open3DMode: function open3DMode(isShow3D) {
            var self = this;
            var isShowLine = self._helper.domObj.$btnShowMagneticLine.children('label').hasClass('checked');
            self._helper.domObj.$3dVideo[0].pause();
            self._helper.domObj.$3dVideo.children('source').attr('src', '');
            if (isShow3D) {
                self._helper.domObj.$btnReset.addClass('hide_visibility');
                self._helper.domObj.$2dContainer.addClass('hide_dom');
                self._helper.domObj.$3dContainer.removeClass('hide_dom');
                if (isShowLine) {
                    self._helper.domObj.$3dVideo.children('source').attr('src', self._helper.basePath + 'resources/wood/videos/scene' + self._helper.currentScene + '_2.mp4');
                } else {
                    self._helper.domObj.$3dVideo.children('source').attr('src', self._helper.basePath + 'resources/wood/videos/scene' + self._helper.currentScene + '_1.mp4');
                }
                self._helper.domObj.$3dVideo[0].load();
                self._helper.domObj.$3dVideo[0].play();
                // var count = 1;
                // self._helper.domObj.$3dVideo.off('ended');
                // self._helper.domObj.$3dVideo.on('ended',function (e) {
                //     self._helper.domObj.$3dVideo[0].currentTime = 0.1;
                //     self._helper.domObj.$3dVideo[0].play();
                //     count++;
                //     console.log('播放次数：',count);
                // });
            } else {
                self._helper.domObj.$btnReset.removeClass('hide_visibility');
                self._helper.domObj.$2dContainer.removeClass('hide_dom');
                self._helper.domObj.$3dContainer.addClass('hide_dom');
            }
        },
        //重置
        reset: function reset() {
            var self = this;
            self._needles = [];
            self._helper.domObj.$playArea.children('span').remove();
            for (var i = 0, iLen = self._helper.domObj.$magneticNeedleItems.size(); i < iLen; i++) {
                var $needleItem = $(self._helper.domObj.$magneticNeedleItems[i]);
                $needleItem.removeClass('hide_dom');
                $needleItem.children('span').removeClass('on');
            }
            self._checkedIndex = 0;
        },
        /**
         *添加到操作区的新小磁针
         * x:小磁针针对playArea区域的左上角x坐标
         * y:小磁针针对playArea区域的左上角y坐标
         * index:小磁针的索引值
         */
        addNewNeedle: function addNewNeedle(x, y, index) {
            var self = this;
            var needle = new Needle(self._helper);
            needle.setPosition(x, y);
            needle.setIndex(index);
            //1、渲染到操作区
            var $needle = $(needle.getHtml());
            $needle.width(self._helper.bigNeedlesize);
            $needle.height(self._helper.bigNeedlesize);

            self._helper.domObj.$playArea.append($needle);
            var left = self._helper.isAPP ? needle.getPosition().x : needle.getPosition().x;
            var top = self._helper.isAPP ? needle.getPosition().y : needle.getPosition().y;
            $needle.css({ left: left, top: top });
            var degree = self.computeRotateDegree(left + $needle.width() / 2, top + $needle.height() / 2);
            needle.setRotate(degree);
            $needle.children('b').css({ transform: 'rotate(' + degree + 'deg)' });
            self._bindNeedleEvent($needle);

            //2、隐藏底部对应的小磁针
            for (var i = 0, iLen = self.getNeedles().length; i < iLen; i++) {
                self.getNeedles()[i].getDom().removeClass('on');
                self.getNeedles()[i].setChecked(false);
            }
            var $needleItem = self._helper.domObj.$magneticNeedleItems.filter('li[data-index="' + needle.getIndex() + '"]');
            $needleItem.children('span').removeClass('on');
            $needleItem.addClass('hide_dom');
            needle.setDom($needle);
            self._needles.push(needle);
            //当前选中的小磁针
            self._checkedIndex = needle.getIndex();
        },
        collideCheck: function collideCheck(x, y, width, height) {
            var self = this;
            if (self.playAreaCollideCheck(x, y, width, height) || self.magneticBodyCollideCheck(x, y, width, height) || self.needleCollideCheck(x, y, width, height)) {
                return true;
            } else {
                return false;
            }
        },
        playAreaCollideCheck: function playAreaCollideCheck(x, y, width, height) {
            var self = this;
            var isCollide = true;
            var leftWidth = self._helper.domObj.$knockLeft.width();
            var topHeight = self._helper.domObj.$knockTop.height();
            var areaWidth = self._helper.domObj.$playArea.width();
            var areaHeight = self._helper.domObj.$playArea.height();
            var x1 = x,
                y1 = y;
            if (!self._helper.isAPP) {
                x1 = x - leftWidth;
                y1 = y - topHeight;
            }
            if (x1 > 0 && y1 > 0 && x + width < areaWidth && y + height < areaHeight) {
                isCollide = false;
            }
            return isCollide;
        },
        //磁体碰撞检测
        magneticBodyCollideCheck: function magneticBodyCollideCheck(x, y, width, height) {
            return false;
        },
        //小磁针碰撞检测
        needleCollideCheck: function needleCollideCheck(x, y, width, height) {
            var self = this;
            var isCollide = false;
            var needles = self.getNeedles();
            for (var i = 0, iLen = needles.length; i < iLen; i++) {
                if (needles[i].getIndex() == self._checkedIndex) {
                    continue;
                }
                var width1 = needles[i].getDom().width();
                var height1 = needles[i].getDom().height();
                var x1 = needles[i].getPosition().x;
                var y1 = needles[i].getPosition().y;
                var result = self.collideArea(x, y, width, height, x1, y1, width1, height1);
                if (result[0] !== 0 || result[1] !== 0 || result[2] !== 0 || result[3] !== 0) {
                    isCollide = true;
                    break;
                }
            }
            return isCollide;
        },
        // 矩形一 top-left 坐标 (ax, ay), width0 为 width, height0 为 height
        // 矩形二 同上
        // 把两个矩形设为ABCD和EFGH
        // 如果没有相交，返回 [0, 0, 0, 0]
        // 如果相交，假设相交矩形对角坐标 (ax, ay) (ex, ey) -- ex > ax & ey > ay
        // return [ax, ay, ex, ey]
        collideArea: function collideArea(ax, ay, width0, height0, ex, ey, width1, height1) {
            // 转为对角线坐标
            var cx = width0 + ax;
            var cy = height0 + ay;
            var gx = width1 + ex;
            var gy = height1 + ey;

            // 没有相交,移动太快会有点偏差，因些取整
            if (parseInt(cx) <= parseInt(ex) || parseInt(gx) <= parseInt(ax) || parseInt(cy) <= parseInt(ey) || parseInt(gy) <= parseInt(ay)) {
                return [0, 0, 0, 0];
            }

            var rectX, rectY;

            if (ex > ax) {
                rectX = gx < cx ? [ex, gx] : [ex, cx];
            } else {
                rectX = gx > cx ? [ax, gx] : [ax, cx];
            }

            if (ey > ay) {
                rectY = gy < cy ? [ey, gy] : [ey, cy];
            } else {
                rectY = gy > cy ? [ay, gy] : [ay, cy];
            }

            return [rectX[0], rectY[0], rectX[1], rectY[1]];
        },
        // a, b 为精灵对象
        // a, b 分别拥有键值 img(精灵图像 DOM元素), pos(精灵瞬间位置 top-left 坐标), size(wdith, height 数据)
        // rect 参数为 collide() 函数返回值
        collideDetail: function collideDetail(a, b, rect) {
            // 离屏 canvas
            var canvas = this._helper.domObj.$canvas[0];
            canvas.width = this._helper.domObj.$playArea.width();
            canvas.height = this._helper.domObj.$playArea.height();
            var _ctx = canvas.getContext('2d');

            _ctx.drawImage(a.img, 0, 0, a.width, a.height);
            // 相对位置
            var data1 = _ctx.getImageData(rect[0] - a.x, rect[1] - a.y, rect[2] - rect[0], rect[3] - rect[1]).data;

            _ctx.clearRect(0, 0, b.width, b.height);
            _ctx.drawImage(b.img, 0, 0, b.width, b.height);
            var data2 = _ctx.getImageData(rect[0] - b.x, rect[1] - b.y, rect[2] - rect[0], rect[3] - rect[1]).data;

            canvas.height = canvas.height; //清空画布
            for (var i = 3; i < data1.length; i += 4) {
                if (data1[i] > 0 && data2[i] > 0) {
                    return true; // 碰撞
                }
            }

            return false;
        },
        //当前的坐标位置，小磁针的左上角的坐标，针对playeArea
        computeRotateDegree: function computeRotateDegree(x, y) {
            return 0;
        },
        eventType: function eventType() {
            if (self._helper.isAPP) {
                return {
                    eventStart: "touchstart",
                    eventMove: "touchmove",
                    eventEnd: "touchend",
                    eventLeave: "touchleave"
                };
            }
            return {
                eventStart: "mousedown",
                eventMove: "mousemove",
                eventEnd: "mouseup",
                eventLeave: "mouseleave"
            };
        },
        isTouchEvent: function isTouchEvent(type) {
            var iste = false;
            switch (type) {
                case 'touchstart':
                case 'touchmove':
                case 'touchend':
                case 'touchcancel':
                    iste = true;
                    break;
                default:
                    iste = false;
            }
            return iste;
        },
        getClientX: function getClientX(e) {
            var self = this;
            if (self.isTouchEvent(e.type)) {
                return e.originalEvent.touches[0].clientX;
            } else {
                return e.clientX;
            }
        },
        getClientY: function getClientY(e) {
            var self = this;
            if (self.isTouchEvent(e.type)) {
                return e.originalEvent.touches[0].clientY;
            } else {
                return e.clientY;
            }
        },
        _bindNeedleEvent: function _bindNeedleEvent($needle) {
            var self = this;
            $needle.off('click mousedown touchstart');
            //阻止事件冒泡，防止操作区的点击被触发
            $needle.on('click', function (e) {
                e.stopPropagation();
            });
            $needle.on('mousedown touchstart', needleMouseDownHandler);

            function needleMouseDownHandler(e) {
                e.preventDefault();
                e.stopPropagation();
                //标记是移动事件还是点击事件
                var isMoveEvent = false;
                //小磁针原始是否选中状态
                var isOriginChecked;
                var downX = self.getClientX(e),
                    downY = self.getClientY(e);
                var $needle = $(this);
                //当前选中的小磁针
                var currentNeedle = null;

                if (!$needle.hasClass('on')) {
                    //清除底部容器小磁针的选中状态
                    self._helper.domObj.$magneticNeedleItems.children('span').removeClass('on');
                    $needle.addClass('on');
                    isOriginChecked = false;
                    self.setCheckedIndex($needle.data('index'));
                } else {
                    isOriginChecked = true;
                }
                //清除在操作区小磁针的选中状态
                var needles = self.getNeedles();
                for (var i = 0, iLen = needles.length; i < iLen; i++) {
                    if ($needle.data('index') == needles[i].getIndex()) {
                        // needles[i].getDom().addClass('on');
                        needles[i].setChecked(true);
                        currentNeedle = needles[i];
                    } else {
                        needles[i].getDom().removeClass('on');
                        needles[i].setChecked(false);
                    }
                }

                var lastMovedX = null,
                    lastMovedY = null;
                var needleWidth = $needle.width();
                var needleHeight = $needle.height();

                //小磁针移动事件
                self._helper.$view.on('mousemove touchmove', needleMouseMoveHandler);
                //小磁针鼠标放开事件
                self._helper.$view.on('mouseup touchend mouseleave', needleMouseUpHandler);
                function needleMouseMoveHandler(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    if (downX >= self.getClientX(e) - 2 && downX <= self.getClientX(e) + 2 && downY >= self.getClientY(e) - 2 && downY <= self.getClientY(e) + 2) {
                        return;
                    }
                    isMoveEvent = true;
                    var left = self.getClientX(e) - self._helper.domObj.$playArea.offset().left - needleWidth / 2;
                    var top = self.getClientY(e) - self._helper.domObj.$playArea.offset().top - needleWidth / 2;
                    var isCollide = self.collideCheck(left, top, needleWidth, needleHeight);
                    if (!isCollide) {
                        lastMovedX = self.getClientX(e);
                        lastMovedY = self.getClientY(e);
                        self._helper.isAPP ? $needle.css({
                            left: left,
                            top: top
                        }) : $needle.css({ left: left, top: top });
                        currentNeedle.setPosition(left, top);
                        var degree = self.computeRotateDegree(left + needleWidth / 2, top + needleWidth / 2);
                        $needle.children('b').css({ transform: 'rotate(' + degree + 'deg)' });
                    }
                }

                function needleMouseUpHandler(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    if (isMoveEvent) {
                        if (lastMovedX != null && lastMovedY != null) {
                            var left = lastMovedX - self._helper.domObj.$playArea.offset().left;
                            var top = lastMovedY - self._helper.domObj.$playArea.offset().top;
                            self.playAreaOperation(left, top);
                        }
                    } else {
                        //当作点击事件处理
                        //清除还在底部容器的小磁针选中状态
                        self._helper.domObj.$magneticNeedleItems.children('span').removeClass('on');
                        //清除操作区其他小磁针的选中状态
                        var currentNeedle = null;
                        for (var i = 0, iLen = self.getNeedles().length; i < iLen; i++) {
                            if ($needle.data('index') != self.getNeedles()[i].getIndex()) {
                                self.getNeedles()[i].getDom().removeClass('on');
                                self.getNeedles()[i].setChecked(false);
                            } else {
                                currentNeedle = self.getNeedles()[i];
                            }
                        }
                        if (isOriginChecked) {
                            //原来是选中，点击下去不选中
                            self.setCheckedIndex(0);
                            currentNeedle.setChecked(false);
                            currentNeedle.getDom().removeClass('on');
                        } else {
                            self.setCheckedIndex($needle.data('index'));
                            currentNeedle.setChecked(true);
                        }
                    }
                    self._helper.$view.off('mousemove');
                    self._helper.$view.off('touchmove');
                    self._helper.$view.off('mouseup');
                    self._helper.$view.off('touchend');
                    self._helper.$view.off('mouseleave');
                }
            }
        }
    });

    return BaseMagnetic;
});
'use strict';

define('Magnetic1', ['BaseMagnetic'], function (BaseMagnetic) {
    var Magnetic1 = BaseMagnetic.extend({
        $init: function $init(helper) {
            this._super(helper);
        },
        //磁体碰撞检测
        magneticBodyCollideCheck: function magneticBodyCollideCheck(x, y, width, height) {
            var self = this;
            var x1 = self._helper.domObj.$box1.offset().left - self._helper.domObj.$playArea.offset().left;
            var y1 = self._helper.domObj.$box1.offset().top - self._helper.domObj.$playArea.offset().top;
            var width1 = self._helper.domObj.$box1.width();
            var height1 = self._helper.domObj.$box1.height();
            var result = self.collideArea(x, y, width, height, x1, y1, width1, height1);
            var isCollide;
            if (result[0] === 0 && result[1] === 0 && result[2] === 0 && result[3] === 0) {
                isCollide = false;
            } else {
                isCollide = true;
            }
            return isCollide;
        },
        /**
         * 计算小磁针的旋转角度
         * @param x 相对playArea的x坐标,小磁针中心点
         * @param y 相对playArea的y坐标，小磁针中心点
         * @returns {number} 旋转角度
         */
        computeRotateDegree: function computeRotateDegree(x, y) {
            var self = this;
            var degree = 0;
            var width1 = self._helper.domObj.$box1.width();
            var height1 = self._helper.domObj.$box1.height();
            var x1 = self._helper.domObj.$box1.offset().left - self._helper.domObj.$playArea.offset().left;
            var y1 = self._helper.domObj.$box1.offset().top - self._helper.domObj.$playArea.offset().top;
            var cx = x1 + width1 / 2,
                cy = y1 + height1 / 2;
            var offsetX = x - cx,
                offsetY = y - cy;
            var offsetDeg = Math.atan2(offsetY, offsetX) * 180 / Math.PI + 180;
            console.log('偏移角度：', offsetDeg);
            degree = offsetDeg * 2;
            var ratio = 1;
            if (offsetDeg > 5 && offsetDeg <= 10) {
                ratio = 1.75;
            } else if (offsetDeg > 10 && offsetDeg <= 20) {
                ratio = 1.7;
            } else if (offsetDeg > 20 && offsetDeg <= 30) {
                if (x < x1) {
                    ratio = 1.8;
                } else {
                    ratio = 1.89;
                }
            } else if (offsetDeg > 30 && offsetDeg <= 40) {
                if (x < x1) {
                    ratio = 1.73;
                } else {
                    ratio = 1.8;
                }
            } else if (offsetDeg > 40 && offsetDeg <= 50) {
                ratio = 1.6;
            } else if (offsetDeg > 50 && offsetDeg <= 60) {
                ratio = 1.4;
            } else if (offsetDeg > 60 && offsetDeg <= 70) {
                ratio = 1.3;
            } else if (offsetDeg > 70 && offsetDeg <= 80) {
                ratio = 1.1;
            } else if (offsetDeg > 80 && offsetDeg <= 85) {
                ratio = 0.98;
            } else if (offsetDeg > 100 && offsetDeg <= 110) {
                ratio = 0.9;
            } else if (offsetDeg > 110 && offsetDeg <= 120) {
                ratio = 0.85;
            } else if (offsetDeg > 120 && offsetDeg <= 130) {
                ratio = 0.85;
            } else if (offsetDeg > 130 && offsetDeg <= 140) {
                ratio = 0.8;
            } else if (offsetDeg > 140 && offsetDeg <= 150) {
                ratio = 0.8;
            } else if (offsetDeg > 150 && offsetDeg <= 160) {
                if (x < x1 + width1 + 15) {
                    ratio = 0.82;
                } else {
                    ratio = 0.89;
                }
            } else if (offsetDeg > 160 && offsetDeg <= 170) {
                ratio = 0.92;
            } else if (offsetDeg > 170 && offsetDeg <= 175) {
                ratio = 0.93;
            } else if (offsetDeg > 185 && offsetDeg <= 200) {
                ratio = 1.05;
            } else if (offsetDeg > 200 && offsetDeg <= 210) {
                if (x < x1 + width1) {
                    ratio = 1.152;
                } else {
                    ratio = 1.11;
                }
            } else if (offsetDeg > 210 && offsetDeg <= 220) {
                ratio = 1.13;
            } else if (offsetDeg > 220 && offsetDeg <= 230) {
                ratio = 1.12;
            } else if (offsetDeg > 230 && offsetDeg <= 240) {
                ratio = 1.1;
            } else if (offsetDeg > 240 && offsetDeg <= 250) {
                ratio = 1.08;
            } else if (offsetDeg > 250 && offsetDeg <= 260) {
                ratio = 1.05;
            } else if (offsetDeg > 280 && offsetDeg <= 290) {
                ratio = 0.95;
            } else if (offsetDeg > 290 && offsetDeg <= 300) {
                ratio = 0.95;
            } else if (offsetDeg > 300 && offsetDeg <= 310) {
                ratio = 0.92;
            } else if (offsetDeg > 310 && offsetDeg <= 320) {
                ratio = 0.91;
            } else if (offsetDeg > 320 && offsetDeg <= 330) {
                ratio = 0.915;
            } else if (offsetDeg > 330 && offsetDeg <= 333 && x > x1 && y > y1) {
                ratio = 0.91;
            } else if (offsetDeg > 330 && offsetDeg <= 335) {
                ratio = 0.935;
            } else if (offsetDeg > 335 && offsetDeg <= 340) {
                if (x < x1 - 15) {
                    ratio = 0.95;
                } else {
                    ratio = 0.93;
                }
            } else if (offsetDeg > 340 && offsetDeg <= 350) {
                ratio = 0.975;
            } else if (offsetDeg > 350 && offsetDeg <= 355) {
                ratio = 0.962;
            }
            console.log(ratio);
            return degree * ratio % 360;
        }
    });

    return Magnetic1;
});
'use strict';

define('Magnetic2', ['BaseMagnetic'], function (BaseMagnetic) {
    var Magnetic2 = BaseMagnetic.extend({
        $init: function $init(helper) {
            this._super(helper);
        },
        //磁体碰撞检测
        magneticBodyCollideCheck: function magneticBodyCollideCheck(x, y, width, height) {
            var self = this;
            var x1 = self._helper.domObj.$box2Img.offset().left - self._helper.domObj.$playArea.offset().left;
            var y1 = self._helper.domObj.$box2Img.offset().top - self._helper.domObj.$playArea.offset().top;
            var width1 = self._helper.domObj.$box2Img.width();
            var height1 = self._helper.domObj.$box2Img.height();
            var result = self.collideArea(x, y, width, height, x1, y1, width1, height1);
            var isCollide;
            if (result[0] === 0 && result[1] === 0 && result[2] === 0 && result[3] === 0) {
                isCollide = false;
            } else {
                var needleImg = new Image();
                var $needle = $(self._helper.domObj.$playArea.children('span')[0]);
                var bg = $needle.css('backgroundImage');
                needleImg.src = bg.substring(bg.indexOf('(') + 1, bg.lastIndexOf(')')).replace(/\"|\'/g, '');
                var needle = {
                    img: needleImg,
                    x: x,
                    y: y,
                    width: width,
                    height: height
                };
                var magneticBody = {
                    img: self._helper.domObj.$box2Img[0],
                    x: x1,
                    y: y1,
                    width: width1,
                    height: height1
                };
                isCollide = self.collideDetail(needle, magneticBody, result);
                console.log(isCollide);
            }
            return isCollide;
        },
        /**
         * 计算小磁针的旋转角度
         * @param x 相对playArea的x坐标,小磁针中心点
         * @param y 相对playArea的y坐标，小磁针中心点
         * @returns {number} 旋转角度
         */
        computeRotateDegree: function computeRotateDegree(x, y) {
            var self = this;
            var degree = 180;
            var width1 = self._helper.domObj.$box2.width();
            var height1 = self._helper.domObj.$box2.height();
            var x1 = self._helper.domObj.$box2.offset().left - self._helper.domObj.$playArea.offset().left;
            var y1 = self._helper.domObj.$box2.offset().top - self._helper.domObj.$playArea.offset().top;
            var cx = x1 + width1 / 2,
                cy = y1 + height1 / 2;
            var offsetDeg1 = Math.atan2(y - y1, x - x1) * 180 / Math.PI + 180;
            var offsetDeg2 = Math.atan2(y - y1, x - x1 - width1) * 180 / Math.PI;

            if (x > x1 && x < cx + width1 / 2 && y > y1 && y < cy + height1 / 2) {
                //U形内部
                degree = 180;
            } else if (x > cx - 5 && x < cx + 5) {
                //U形挖空的上部
                degree = 180;
            } else if (x > x1 + width1 / 4 && x < cx - 10) {
                //U形挖空的上部的左边
                if (offsetDeg1 > 120 && offsetDeg1 < 128 && offsetDeg2 > -140 && offsetDeg2 < -130) {
                    degree = 170;
                } else if (offsetDeg1 > 138 && offsetDeg2 < -140) {
                    degree = 170;
                } else {
                    degree = 140;
                }
            } else if (x > cx + 10 && x < x1 + width1 - width1 / 4) {
                //U形挖空的上部的右边
                if (offsetDeg1 > 145 && offsetDeg1 < 148 && offsetDeg2 > -140 && offsetDeg2 < -117) {
                    degree = 220;
                } else if (offsetDeg1 >= 148 && offsetDeg1 < 159 && offsetDeg2 > -141 && offsetDeg2 <= -140) {
                    degree = 211;
                } else if (offsetDeg1 > 159 && offsetDeg1 < 171 && offsetDeg2 > -168 && offsetDeg2 < -154) {
                    degree = 195;
                } else {
                    degree = 210;
                }
            } else if (x > x1 && x < cx - width1 / 4) {
                //U形S极上部
                if (offsetDeg1 > 114 && offsetDeg1 < 119 && offsetDeg2 > -169 && offsetDeg2 < -146) {
                    degree = 115;
                } else {
                    degree = 120;
                }
            } else if (x > cx + width1 / 4 && x < x1 + width1) {
                //U形N极上部
                degree = 250;
            } else if (x < x1) {
                //U形S极左边
                degree = offsetDeg1;
            } else if (x > x1 + width1) {
                //U形N极右边
                degree = offsetDeg2;
            }
            console.log('偏移角度:', degree, offsetDeg1, offsetDeg2);
            return degree;
        }
    });

    return Magnetic2;
});
'use strict';

define('Magnetic3', ['BaseMagnetic'], function (BaseMagnetic) {
    var Magnetic3 = BaseMagnetic.extend({
        $init: function $init(helper) {
            this._super(helper);
        },
        //磁体碰撞检测
        magneticBodyCollideCheck: function magneticBodyCollideCheck(x, y, width, height) {
            var self = this;
            var x1 = self._helper.domObj.$box3.offset().left - self._helper.domObj.$playArea.offset().left;
            var y1 = self._helper.domObj.$box3.offset().top - self._helper.domObj.$playArea.offset().top;
            var width1 = self._helper.domObj.$box3.width();
            var height1 = self._helper.domObj.$box3.height();
            var result = self.collideArea(x, y, width, height, x1, y1, width1, height1);
            var isCollide;
            if (result[0] === 0 && result[1] === 0 && result[2] === 0 && result[3] === 0) {
                isCollide = false;
            } else {
                isCollide = true;
            }
            return isCollide;
        },
        /**
         * 计算小磁针的旋转角度
         * @param x 相对playArea的x坐标,小磁针中心点
         * @param y 相对playArea的y坐标，小磁针中心点
         * @returns {number} 旋转角度
         */
        computeRotateDegree: function computeRotateDegree(x, y) {
            var self = this;
            var degree = 0;
            var width1 = self._helper.domObj.$box3.width();
            var height1 = self._helper.domObj.$box3.height();
            var x1 = self._helper.domObj.$box3.offset().left - self._helper.domObj.$playArea.offset().left;
            var y1 = self._helper.domObj.$box3.offset().top - self._helper.domObj.$playArea.offset().top;
            var cx = x1 + width1 / 2,
                cy = y1 + height1 / 2;
            var offsetX = x - cx,
                offsetY = y - cy;
            var offsetDeg = Math.atan2(offsetY, offsetX) * 180 / Math.PI + 180;
            console.log('偏移角度：', offsetDeg);
            degree = offsetDeg * 2;
            var ratio = 1;
            if (offsetDeg > 5 && offsetDeg <= 10) {
                ratio = 1.75;
            } else if (offsetDeg > 10 && offsetDeg <= 20) {
                ratio = 1.7;
            } else if (offsetDeg > 20 && offsetDeg <= 30) {
                if (x < x1) {
                    ratio = 1.8;
                } else {
                    ratio = 1.89;
                }
            } else if (offsetDeg > 30 && offsetDeg <= 40) {
                if (x < x1) {
                    ratio = 1.73;
                } else {
                    ratio = 1.8;
                }
            } else if (offsetDeg > 40 && offsetDeg <= 50) {
                ratio = 1.6;
            } else if (offsetDeg > 50 && offsetDeg <= 60) {
                ratio = 1.4;
            } else if (offsetDeg > 60 && offsetDeg <= 70) {
                ratio = 1.3;
            } else if (offsetDeg > 70 && offsetDeg <= 80) {
                ratio = 1.1;
            } else if (offsetDeg > 80 && offsetDeg <= 85) {
                ratio = 0.98;
            } else if (offsetDeg > 100 && offsetDeg <= 110) {
                ratio = 0.9;
            } else if (offsetDeg > 110 && offsetDeg <= 120) {
                ratio = 0.85;
            } else if (offsetDeg > 120 && offsetDeg <= 130) {
                ratio = 0.85;
            } else if (offsetDeg > 130 && offsetDeg <= 140) {
                ratio = 0.8;
            } else if (offsetDeg > 140 && offsetDeg <= 150) {
                ratio = 0.8;
            } else if (offsetDeg > 150 && offsetDeg <= 160) {
                if (x < x1 + width1 + 15) {
                    ratio = 0.82;
                } else {
                    ratio = 0.89;
                }
            } else if (offsetDeg > 160 && offsetDeg <= 170) {
                ratio = 0.92;
            } else if (offsetDeg > 170 && offsetDeg <= 175) {
                ratio = 0.93;
            } else if (offsetDeg > 185 && offsetDeg <= 200) {
                ratio = 1.05;
            } else if (offsetDeg > 200 && offsetDeg <= 210) {
                if (x < x1 + width1) {
                    ratio = 1.152;
                } else {
                    ratio = 1.11;
                }
            } else if (offsetDeg > 210 && offsetDeg <= 220) {
                ratio = 1.13;
            } else if (offsetDeg > 220 && offsetDeg <= 230) {
                ratio = 1.12;
            } else if (offsetDeg > 230 && offsetDeg <= 240) {
                ratio = 1.1;
            } else if (offsetDeg > 240 && offsetDeg <= 250) {
                ratio = 1.08;
            } else if (offsetDeg > 250 && offsetDeg <= 260) {
                ratio = 1.05;
            } else if (offsetDeg > 280 && offsetDeg <= 290) {
                ratio = 0.95;
            } else if (offsetDeg > 290 && offsetDeg <= 300) {
                ratio = 0.95;
            } else if (offsetDeg > 300 && offsetDeg <= 310) {
                ratio = 0.92;
            } else if (offsetDeg > 310 && offsetDeg <= 320) {
                ratio = 0.91;
            } else if (offsetDeg > 320 && offsetDeg <= 330) {
                ratio = 0.915;
            } else if (offsetDeg > 330 && offsetDeg <= 333 && x > x1 && y > y1) {
                ratio = 0.91;
            } else if (offsetDeg > 330 && offsetDeg <= 335) {
                ratio = 0.935;
            } else if (offsetDeg > 335 && offsetDeg <= 340) {
                if (x < x1 - 15) {
                    ratio = 0.95;
                } else {
                    ratio = 0.93;
                }
            } else if (offsetDeg > 340 && offsetDeg <= 350) {
                ratio = 0.975;
            } else if (offsetDeg > 350 && offsetDeg <= 355) {
                ratio = 0.962;
            }

            return degree * ratio % 360;
        }
    });

    return Magnetic3;
});
'use strict';

define('Magnetic4', ['BaseMagnetic'], function (BaseMagnetic) {
    var Magnetic4 = BaseMagnetic.extend({
        $init: function $init(helper) {
            var self = this;
            self._super(helper);
            self._bindEvent();
            //当前视图：前视图(FRONT_VIEW),俯视图(VERTICAL_VIEW)
            self._currentView = 'FRONT_VIEW';
        },
        collideCheck: function collideCheck(x, y, width, height) {
            var self = this;
            if (self.playAreaCollideCheck(x, y, width, height) || self.magneticBodyCollideCheck(x, y, width, height) || self.needleCollideCheck(x, y, width, height) || self.leftTopThumbnailCollideCheck(x, y, width, height) || self.btnBackVisualAngleCollideCheck(x, y, width, height)) {
                return true;
            } else {
                return false;
            }
        },
        //磁体碰撞检测
        magneticBodyCollideCheck: function magneticBodyCollideCheck(x, y, width, height) {
            var self = this;
            var x1 = self._helper.domObj.$box5.offset().left - self._helper.domObj.$playArea.offset().left;
            var y1 = self._helper.domObj.$box5.offset().top - self._helper.domObj.$playArea.offset().top;
            var width1 = self._helper.domObj.$box5.width();
            var height1 = self._helper.domObj.$box5.height();
            var result = self.collideArea(x, y, width, height, x1, y1, width1, height1);
            var isCollide;
            if (result[0] === 0 && result[1] === 0 && result[2] === 0 && result[3] === 0) {
                isCollide = false;
            } else {
                isCollide = true;
            }
            return isCollide;
        },
        //左上角缩略图的碰撞检测
        leftTopThumbnailCollideCheck: function leftTopThumbnailCollideCheck(x, y, width, height) {
            var self = this;
            var $thumb = self._helper.domObj.$scene4LeftTopThumbnail;
            var x1 = $thumb.offset().left - self._helper.domObj.$playArea.offset().left;
            var y1 = $thumb.offset().top - self._helper.domObj.$playArea.offset().top;
            var width1 = $thumb.width();
            var height1 = $thumb[0].clientHeight;
            var result = self.collideArea(x, y, width, height, x1, y1, width1, height1);
            var isCollide;
            if (result[0] === 0 && result[1] === 0 && result[2] === 0 && result[3] === 0) {
                isCollide = false;
            } else {
                isCollide = true;
            }
            return isCollide;
        },
        //返回按钮的碰撞检测
        btnBackVisualAngleCollideCheck: function btnBackVisualAngleCollideCheck(x, y, width, height) {
            var self = this;
            var $button = self._helper.domObj.$btnBackVisualAngle;
            var x1 = $button.offset().left - self._helper.domObj.$playArea.offset().left;
            var y1 = $button.offset().top - self._helper.domObj.$playArea.offset().top;
            var width1 = $button[0].clientWidth;
            var height1 = $button[0].clientHeight;
            var result = self.collideArea(x, y, width, height, x1, y1, width1, height1);
            var isCollide;
            if (result[0] === 0 && result[1] === 0 && result[2] === 0 && result[3] === 0) {
                isCollide = false;
            } else {
                isCollide = true;
            }
            return isCollide;
        },
        show: function show() {
            var self = this;
            self._helper.domObj.$menuItems.removeClass('on');
            self._helper.domObj.$menuItems.filter('li[data-index="' + self._helper.currentScene + '"]').addClass('on');
            self._helper.domObj.$mainMagnetItem.addClass('hide_dom');

            //绘制小磁针在操作区的位置
            self.initNeedle();

            //是否显示磁感线
            var isCheckedMagnetic = self._helper.domObj.$btnShowMagneticLine.children('label').hasClass('checked');
            self.showMagneticInductionLine(isCheckedMagnetic);
            if (self._currentView == 'VERTICAL_VIEW') {
                //俯视图
                self._helper.domObj.$mainMagnetItem.filter('li[data-index="5"]').removeClass('hide_dom');
                self._helper.domObj.$btnPlanform.addClass('hide_dom');
                self._helper.domObj.$btnBackVisualAngle.removeClass('hide_dom');
                self._helper.domObj.$magneticNeedleMenuContainer.removeClass('hide_dom');
                self._helper.domObj.$scene4LeftTopThumbnail.removeClass('hide_dom');
                self._helper.domObj.$btnReset.removeClass('click_disabled');
                self._showNeedles();
            } else {
                //前视图
                self._helper.domObj.$mainMagnetItem.filter('li[data-index="4"]').removeClass('hide_dom');
                self._helper.domObj.$btnPlanform.removeClass('hide_dom');
                self._helper.domObj.$btnBackVisualAngle.addClass('hide_dom');
                self._helper.domObj.$magneticNeedleMenuContainer.addClass('hide_dom');
                self._helper.domObj.$scene4LeftTopThumbnail.addClass('hide_dom');
                self._helper.domObj.$btnReset.addClass('click_disabled');
                self._hideNeedles();
            }

            //是否打开3D模式
            self.open3DMode(self._helper.domObj.$btnShow3dMode.children('label').hasClass('checked'));
        },
        //显示磁感线
        showMagneticInductionLine: function showMagneticInductionLine(isShowLine) {
            var self = this;
            self._helper.domObj.$mainMagnetBg.removeClass('bg1 bg2 bg3 bg4 bg5');
            if (isShowLine) {
                //显示磁感线
                if (self._currentView == 'FRONT_VIEW') {
                    self._helper.domObj.$mainMagnetBg.addClass('bg4');
                } else {
                    self._helper.domObj.$mainMagnetBg.addClass('bg5');
                }
                self._helper.domObj.$scene4LeftTopThumbnail.removeClass('overlook').addClass('head');
            } else {
                self._helper.domObj.$scene4LeftTopThumbnail.removeClass('head').addClass('overlook');
            }

            //在3D模式下切换磁感线
            var isShow3D = self._helper.domObj.$btnShow3dMode.children('label').hasClass('checked');
            if (isShow3D) {
                self._helper.domObj.$3dVideo[0].pause();
                self._helper.domObj.$3dVideo.children('source').attr('src', '');
                if (isShowLine) {
                    self._helper.domObj.$3dVideo.children('source').attr('src', self._helper.basePath + 'resources/wood/videos/scene' + self._helper.currentScene + '_2.mp4');
                } else {
                    self._helper.domObj.$3dVideo.children('source').attr('src', self._helper.basePath + 'resources/wood/videos/scene' + self._helper.currentScene + '_1.mp4');
                }
                self._helper.domObj.$3dVideo[0].load();
                self._helper.domObj.$3dVideo[0].play();
            }
        },
        /**
         * 计算小磁针的旋转角度
         * @param x 相对playArea的x坐标,小磁针中心点
         * @param y 相对playArea的y坐标，小磁针中心点
         * @returns {number} 旋转角度
         */
        computeRotateDegree: function computeRotateDegree(x, y) {
            var self = this;
            var degree = 0;
            var width1 = self._helper.domObj.$box5.width();
            var height1 = self._helper.domObj.$box5.height();
            var x1 = self._helper.domObj.$box5.offset().left - self._helper.domObj.$playArea.offset().left;
            var y1 = self._helper.domObj.$box5.offset().top - self._helper.domObj.$playArea.offset().top;
            var cx = x1 + width1 / 2,
                cy = y1 + height1 / 2;
            var offsetX = x - cx,
                offsetY = y - cy;
            var offsetDeg = Math.atan2(offsetY, offsetX) * 180 / Math.PI + 180;
            console.log('预设4偏移角度：', offsetDeg);
            degree = offsetDeg + 90;
            return degree;
        },
        setCurrentView: function setCurrentView(currentView) {
            this._currentView = currentView;
        },
        getCurrentView: function getCurrentView() {
            return this._currentView;
        },
        _bindEvent: function _bindEvent() {
            var self = this;
            //正视图按钮点击
            self._helper.domObj.$btnBackVisualAngle.on('click', function (e) {
                self._currentView = 'FRONT_VIEW';
                self._helper.domObj.$btnPlanform.removeClass('hide_dom');
                self._helper.domObj.$btnBackVisualAngle.addClass('hide_dom');
                self._helper.domObj.$mainMagnetBg.find('li[data-index="4"]').removeClass('hide_dom');
                self._helper.domObj.$mainMagnetBg.find('li[data-index="5"]').addClass('hide_dom');
                self._helper.domObj.$scene4LeftTopThumbnail.addClass('hide_dom');
                self._helper.domObj.$btnReset.addClass('click_disabled');
                self._hideNeedles();
                //隐藏小磁针列表
                self._helper.domObj.$magneticNeedleMenuContainer.addClass('hide_dom');
                var isCheckedMagnetic = self._helper.domObj.$btnShowMagneticLine.children('label').hasClass('checked');
                if (isCheckedMagnetic) {
                    self._helper.domObj.$scene4LeftTopThumbnail.removeClass('overlook').addClass('head');
                } else {
                    self._helper.domObj.$scene4LeftTopThumbnail.removeClass('head').addClass('overlook');
                }
                self.showMagneticInductionLine(isCheckedMagnetic);
            });

            //俯视图按钮点击
            self._helper.domObj.$btnPlanform.on('click', function (e) {
                self._currentView = 'VERTICAL_VIEW';
                self._helper.domObj.$btnPlanform.addClass('hide_dom');
                self._helper.domObj.$btnBackVisualAngle.removeClass('hide_dom');
                self._helper.domObj.$mainMagnetBg.find('li[data-index="4"]').addClass('hide_dom');
                self._helper.domObj.$mainMagnetBg.find('li[data-index="5"]').removeClass('hide_dom');
                self._helper.domObj.$scene4LeftTopThumbnail.removeClass('hide_dom');
                self._helper.domObj.$btnReset.removeClass('click_disabled');
                self._showNeedles();
                //显示小磁针列表
                self._helper.domObj.$magneticNeedleMenuContainer.removeClass('hide_dom');
                var isCheckedMagnetic = self._helper.domObj.$btnShowMagneticLine.children('label').hasClass('checked');
                self.showMagneticInductionLine(isCheckedMagnetic);
            });
        },
        _hideNeedles: function _hideNeedles() {
            var self = this;
            for (var i = 0, iLen = self.getNeedles().length; i < iLen; i++) {
                self.getNeedles()[i].getDom().addClass('hide_dom');
            }
        },
        _showNeedles: function _showNeedles() {
            var self = this;
            for (var i = 0, iLen = self.getNeedles().length; i < iLen; i++) {
                self.getNeedles()[i].getDom().removeClass('hide_dom');
            }
        }
    });

    return Magnetic4;
});
'use strict';

define('Needle', function () {
    var Needle = Class.extend({
        $init: function $init(helper) {
            this._helper = helper;
            this._html = null;
            this._index = null;
            this._x = 0;
            this._y = 0;
            this._isChecked = true;
            this._dom = null;
            this._rotate = 0;
        },
        setIndex: function setIndex(index) {
            this._index = index;
        },
        getIndex: function getIndex() {
            return this._index;
        },
        setHtml: function setHtml(html) {
            this._html = html;
        },
        getHtml: function getHtml() {
            this._html = this._html || '<span href="javascript:;" class="mni_a play on" data-index="' + this.getIndex() + '">' + '         <b class="magnetic_needle"></b>' + '         <i class="mg_center"></i>' + '     </span>';
            return this._html;
        },
        /**
         * 小磁针左上角的坐标位置
         * @param x 小磁针左上角的x坐标
         * @param y 小磁针左上角的y坐标
         */
        setPosition: function setPosition(x, y) {
            this._x = x;
            this._y = y;
        },
        //小磁针左上角的坐标位置
        getPosition: function getPosition() {
            return { x: this._x, y: this._y };
        },
        setChecked: function setChecked(checked) {
            this._isChecked = checked;
        },
        getChecked: function getChecked() {
            return this._isChecked;
        },
        setDom: function setDom(dom) {
            this._dom = dom;
        },
        getDom: function getDom() {
            return this._dom;
        },
        setRotate: function setRotate(rotate) {
            this._rotate = rotate;
        },
        getRotate: function getRotate() {
            return this._rotate;
        },
        toJSON: function toJSON() {
            return {
                _index: this._index,
                _x: this._x,
                _y: this._y,
                _isChecked: this._isChecked,
                _rotate: this._rotate
            };
        }

    });

    return Needle;
});]]></presenter><resources><file src="./resources/wood/images/bar_magnet.png"/><file src="./resources/wood/images/box_shadow.png"/><file src="./resources/wood/images/disk_bottom.png"/><file src="./resources/wood/images/disk_on.png"/><file src="./resources/wood/images/eye.png"/><file src="./resources/wood/images/highlight.png"/><file src="./resources/wood/images/magnetic_induction_line1.png"/><file src="./resources/wood/images/magnetic_induction_line2.png"/><file src="./resources/wood/images/magnetic_induction_line4.png"/><file src="./resources/wood/images/magnetic_induction_line5.png"/><file src="./resources/wood/images/magnetic_needle.png"/><file src="./resources/wood/images/mg_center.png"/><file src="./resources/wood/images/return.png"/><file src="./resources/wood/images/right_icon.png"/><file src="./resources/wood/images/solenoid.png"/><file src="./resources/wood/images/straight_wire_lefttop.png"/><file src="./resources/wood/images/straight_wire_top.png"/><file src="./resources/wood/images/straight_wire.png"/><file src="./resources/wood/images/tool_reset_act.png"/><file src="./resources/wood/images/tool_reset_dis.png"/><file src="./resources/wood/images/tool_reset_nor.png"/><file src="./resources/wood/images/u_shaped_magnet.png"/></resources></addon>