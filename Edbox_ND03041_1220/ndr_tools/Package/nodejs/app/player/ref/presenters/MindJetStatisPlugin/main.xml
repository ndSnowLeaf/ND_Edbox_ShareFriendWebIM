<?xml version='1.0' encoding='UTF-8' ?>
<addon id='MindJetStatisPlugin'>
<properties>



</properties>

<dependencies>

</dependencies>

<css>

<![CDATA[.js_nd_loader{position:absolute;z-index:999;top:0;bottom:0;left:0;right:0;width:100%!important;height:100%!important;justify-content:center;align-items:center;display:-webkit-flex;-webkit-justify-content:center;-webkit-align-items:center}.js_nd_loader_content{line-height:1;padding:7px;border-radius:5px;background-color:rgba(0,0,0,.498039);color:#fff;text-align:center;word-wrap:break-word;font-size:1.2em;letter-spacing:3px}]]>

</css>


<view>

<![CDATA[<div class="ndui-pop com_pop com_pop_mid pop_mind"><div class="ndui-pop-mask"></div><div class="ndui-pop-square"><div class="ndui-pop-wrap"><a href="###" class="ndui-pop-close right"><em></em><span class="preload_btn_close_pic1"></span><span class="preload_btn_close_pic2"></span></a> <a href="###" class="ndui-pop-close left"><em></em><span class="preload_btn_close_pic1"></span><span class="preload_btn_close_pic2"></span></a><div class="pop_wrap"><div class="content" style="height: 100%; padding: 0 !important"><div class="exam_statistics_mindMap" style="height:100%"></div></div></div><div class="com_send_flower_wrap com_send_flower_bot"><p class="flow_text"><em class="text" nd-translate="label.send.flower"></em></p><div class="com_send_flower"></div></div><div class="js_nd_loader"><div class="js_nd_loader_content"><svg version="1.1" id="loader_1" x="0px" y="0px" width="30px" height="30px" viewBox="0 0 40 40" enable-background="new 0 0 40 40" xml:space="preserve"><path opacity="0.2" fill="#FFFFFF" d="M20.201,5.169c-8.254,0-14.946,6.692-14.946,14.946c0,8.255,6.692,14.946,14.946,14.946
                s14.946-6.691,14.946-14.946C35.146,11.861,28.455,5.169,20.201,5.169z M20.201,31.749c-6.425,0-11.634-5.208-11.634-11.634
                c0-6.425,5.209-11.634,11.634-11.634c6.425,0,11.633,5.209,11.633,11.634C31.834,26.541,26.626,31.749,20.201,31.749z"></path><path fill="#FFFFFF" d="M26.013,10.047l1.654-2.866c-2.198-1.272-4.743-2.012-7.466-2.012h0v3.312h0
                C22.32,8.481,24.301,9.057,26.013,10.047z" transform="rotate(322.462 20 20)"><animateTransform attributeType="xml" attributeName="transform" type="rotate" from="0 20 20" to="360 20 20" dur="0.5s" repeatCount="indefinite"></animateTransform></path></svg><p style="margin: 2px 0px" nd-translate="label.data.loading"></p></div></div></div></div></div><div class="com_pop_close_tips" style="display: none"><div class="com_pop_close_main"><div class="com_pop_close_txt"><span class="font_size" nd-translate="label.save.confirm"></span></div><div class="com_pop_close_btns"><a class="com_pop_white_btn" data-code="yes" href="javascript:;"><span class="text_box" nd-translate="btn.yes"></span> </a><a class="com_pop_white_btn" data-code="no" href="javascript:;"><span class="text_box" nd-translate="btn.no"></span> </a><a class="com_pop_white_btn" data-code="cancel" href="javascript:;"><span class="text_box" nd-translate="btn.cancel"></span></a></div></div></div>]]>
</view>


<presenter>

<![CDATA[/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * 外部接口交互
 */


var INSTANCE_ID = 'ModifyStudentAnswer';

function API(presenter) {
  this.presenter = presenter;
}

API.prototype = {
  constructor: API,

  //建立通道
  createChannel: function() {
    if (this.__hasCreateChannel) return;

    this.__hasCreateChannel = true;
    this.presenter.$dispatchEvent('createPresenter', PresenterEventType.NATIVE_EVENT, {
      presenterId: INSTANCE_ID,
      instanceId: INSTANCE_ID
    });
  },
  destroy: function() {
    this.__hasCreateChannel = false;

  /* 退出任务后, 由PC端做自动销毁处理
          this.presenter.$dispatchEvent('destroyPresenter', PresenterEventType.NATIVE_EVENT, {
              presenterId: INSTANCE_ID,
              instanceId: INSTANCE_ID
          });
  */
  },

  //同步答案
  syncAnswer: function(studentId, answer) {
    this.createChannel();

    //同步答案
    this.presenter.$dispatchEvent('sendToPresenter', PresenterEventType.NATIVE_EVENT, {
      instanceId: INSTANCE_ID,
      type: 'send',
      data: {
        studentId: studentId,
        answer: JSON.stringify(answer)
      }
    });
  },
  //送花给学生
  sendFlower: function(studentId, count) {
    this.presenter.$dispatchEvent('Stuff', PresenterEventType.PPT_NATIVE_EVENT, {
      source: 'AnswerClassStatis',
      item: 'FLOWER',
      value: {
        num: count || 1,
        userIds: [studentId]
      }
    });
  }
};

/* harmony default export */ __webpack_exports__["a"] = (API);

/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__libs_api_js__ = __webpack_require__(0);


(function () {
    //常量定义
    var _CONSTANTS = {
        PRESENTER_NAME: 'MindJetStatisPlugin',
        INJECT_ACTION_TYPE_RENDER: 'ListItemRender',       //D类统计注入功能类型 - 列表项目被渲染
        INJECT_ACTION_TYPE_CLICK: 'ListItemClick',         //D类统计注入功能类型 - 列表项目被点击
        INJECT_ACTION_TYPE_EXIT: 'ExitExam',               //D类统计注入功能类型 - 退出本题
        INJECT_ACTION_TYPE_RESET: 'ResetExam',             //D类统计注入功能类型 - 重发本题
        CLASS_LAYOUT_CONTAINER: 'container_to_peerreview', //追加到D类统计com_layout_container层的样式名
        CLASS_INJECT_ITEM: 'comList_mark'                  //追加到D类统计ListItem上的样式名
    };

    //加载组件的数据模型
    function convert2ComponentProperties(option) {
        var properties = [];

        for (var key in option) {
            if (option.hasOwnProperty(key)) {
                var value = option[key], valueType = (typeof value).toLocaleLowerCase(),
                    item = {name: key, value: value};

                switch (valueType) {
                    case 'number':
                        item.type = 'number';
                        break;
                    case 'boolean':
                        item.type = 'boolean';
                        item.value = item.value ? 'true' : 'false';
                        break;
                    case 'object':
                        if ($.isArray(value)) {
                            item.type = 'list';
                        } else {
                            item.type = 'json';
                        }
                        item.text = JSON.stringify(item.value);
                        delete item.value;
                        break;
                    default:
                        item.type = 'string';
                }

                properties.push(item);
            }
        }

        return properties;
    }

    var Presenter = BaseController.extend({
        metaInfo: {
            name: 'MindJetStatisPlugin',
            type: PresenterType.PRESENTER_CONTROLLER,
            subType: "AnswerClassStatisticsExtend"
        },
        /**
         * Presenter的初始化方法
         * @private
         */
        $init: function () {
            this._super();
            this.__init();
        },
		__init: function() {
			this.statisticsService = null; //D类统计的service
            this.api = null; //对应api.js对象，负责与外部接口交互
            this.currentDetailData = null; //当前学生详细数据
            this.currentModifiedData = null; //当前被老师修改的答案

            this.__ScopeId__ = null;       //作用域
            this.mindJetManager = null;    //思维导图组件
            this.studentsModifiedCached = {};     //被修改过学生数据{key->学生ID, value->学生答案}
            this.confirmPopup = null;      //确认弹窗
		},
        /**
         * Presenter对外暴露的方法
         */
        _ServiceClass_: {
            constructor: function (presenter) {
                this.presenter = presenter;
            },
            /**
             * 在统计presenter run的时候会调用此方法完成自己底部view的注入
             * @param topPanel 顶部panel jQuery对象
             * @param bottomPanel 底部panel jQuery对象
             */
            injectLayout: function (topPanel, bottomPanel) {
            },
            //在这里拿到D类统计presenter的service对象，用于后续的隐藏当操作
            setStatisticsService: function (service) {
                var presenterSelf = this.presenter;
                if (service && !presenterSelf.statisticsService) {
                    presenterSelf.statisticsService = service;
                    presenterSelf.questionType = service.getCurrentState().questionType;

                    //注入列表项目的渲染过程
                    service.injectAction(_CONSTANTS.PRESENTER_NAME, _CONSTANTS.INJECT_ACTION_TYPE_RENDER, presenterSelf._injectListItem.bind(presenterSelf));

                    //注入当列表项目被点击时执行额外执行的过程：启动思维导图组件加载学生答案
                    service.injectAction(_CONSTANTS.PRESENTER_NAME, _CONSTANTS.INJECT_ACTION_TYPE_CLICK, presenterSelf._showStudentDetail.bind(presenterSelf));
					
					//注入当退出本题时
                    service.injectAction(_CONSTANTS.PRESENTER_NAME, _CONSTANTS.INJECT_ACTION_TYPE_EXIT, presenterSelf._onExamExit.bind(presenterSelf));

                    //注入重新作答时
                    service.injectAction(_CONSTANTS.PRESENTER_NAME, _CONSTANTS.INJECT_ACTION_TYPE_RESET, presenterSelf._onExamReset.bind(presenterSelf))
                }
            },
            //国际化语言包设置
            setLocationProperties: function (properties) {
                this.presenter.$translator.setData(properties);
            }
        },
        getService: function () {
            if (this._service_) return this._service_;

            this._service_ = $.extend({}, this._ServiceClass_);
            this._service_.constructor(this);
            return this._service_;
        },
        $getInterfaceMethods: function () {
            return [
                {
                    interface: 'IMindJetManager',
                    methods: ['askMindJetContentIsChanged', 'resetMindJetContent']
                }
            ];
        },
        $afterPresenterRun: function (interfaceName, metaInfo, service) {
            if (interfaceName == 'IMindJetManager') {
                if (service.__ScopeId__ === this.__ScopeId__) {
                    this.mindJetManager = service;
                }
            }
        },
        /****以下开始为icPlayer的生命周期方法*****/
        run: function (view, model) {
            this.$view = $(view);
            this.$view.hide();
            this.confirmPopup = this.$view.find('.com_pop_close_tips');
            this._setI18nLabel();
            this._bindEvent();

            //载入API
            this.api = new __WEBPACK_IMPORTED_MODULE_0__libs_api_js__["a" /* default */](this);
        },
        destroy: function () {
            this._unbindEvent();
			this.__init();
        },
        /****以下开始为Presenter的私有方法*****/
        _setI18nLabel: function () {
            var self = this;
            $.each(self.$view.find('[nd-translate]'), function () {
                var $item = $(this), i18nKey = $item.attr('nd-translate');
                if (!!i18nKey) {
                    $item.text(self.$translate(i18nKey));
                }
            });
        },
        _bindEvent: function () {
            var $view = this.$view;

            $view.find('.ndui-pop-close').on('click', this._closeStudentDetail.bind(this));
            $view.find('.com_send_flower_bot').on('click', this._sendFlower.bind(this));
			this.confirmPopup.find('.com_pop_close_btns').on('mousedown touchstart', this._onPopupBtnDown.bind(this));
			this.confirmPopup.find('.com_pop_close_btns').on('mouseup touchend', this._onPopupBtnUp.bind(this));
			this.confirmPopup.on('mouseup touchend', this._onPopupTouchEnd.bind(this));
        },
        _unbindEvent: function () {
            var $view = this.$view;

            $view.find('.ndui-pop-close,.com_send_flower_bot').off('click');
            this.confirmPopup.find('.com_pop_close_btns').off('mousedown touchstart mouseup touchend');
			this.confirmPopup.off('mouseup touchend');

            this.$removeEventListener();
        },
        _closeStudentDetail: function (event) {
            event.preventDefault();

            //Step1. 判断是否被老师修改
            if (this.mindJetManager) {
                var result = this.mindJetManager.askMindJetContentIsChanged();
                if (result.isChanged) {
                    this._showConfirmPopup(result.data);

                    return;
                }
            }

            //Step2. 关闭详情弹窗
            this.$view.hide();
        },
        _showConfirmPopup: function (modifiedData) {
            this.currentModifiedData = modifiedData;
			this.confirmPopup.find('.com_pop_white_btn').removeClass('ui_btn_active');
            this.confirmPopup.show();
        },
		_onPopupTouchEnd: function() {
			this.confirmPopup.find('.com_pop_white_btn').removeClass('ui_btn_active');
		},
		_onPopupBtnDown: function(event) {
			event.preventDefault();
			
			var $target = $(event.target).closest('.com_pop_white_btn');
			if($target[0]) {
				$target.addClass('ui_btn_active');
			}
		},
		_onPopupBtnUp: function(event) {
			event.preventDefault();
			
			var $target = $(event.target).closest('.com_pop_white_btn');
			if($target[0]) {
				var code = $target.data('code');
				switch(code) {
					case 'yes':
						this._onPopupBtnYes();
						break;
					case 'no':
						this._onPopupBtnNo();
						break;
					case 'cancel':
						this._onPopupBtnCancel();
						break;
					default:
				}
			}
		},
        _onPopupBtnYes: function () {
            var modifiedData = this.currentModifiedData;
            this.studentsModifiedCached[this.currentDetailData.answerData.studentId] = {data: modifiedData, updateTimestamp: ClassroomUtils.getMasterSystemTimeMS()};
            this._resetStudentAnswer(modifiedData);
            this.api.syncAnswer(this.currentDetailData.answerData.studentId, modifiedData);

            this.$view.hide();
            this.currentModifiedData = null;
            this.confirmPopup.hide();
        },
        _onPopupBtnNo: function () {
            this.$view.hide();
            this.currentModifiedData = null;
            this.confirmPopup.hide();
        },
        _onPopupBtnCancel: function () {
            this.currentModifiedData = null;
            this.confirmPopup.hide();
        },
        _sendFlower: function (event) {
            event.preventDefault();

            this.api.sendFlower(this.currentDetailData.answerData.studentId, 1);
            PresenterFlowerTip([this.currentDetailData.answerData.studentName]);
        },
        _resetStudentAnswer: function (dataModified) {
            this.statisticsService.refreshThumbItem(this.currentDetailData.answerData.studentId, {});
        },
        //获取学生答案
        _getStudentAnswer: function (data) {
            var studentData = data.answerData.data, studentAnswer = null;
            if ($.isArray(studentData) && studentData.length > 0) {
                $.each(studentData, function (index, item) {
                    if (item.type === 'detail') {
                        studentAnswer = JSON.parse(item.value);

                        return false;
                    }
                });
            }

            return studentAnswer;
        },
		//判断老师修改的答案是否有效（如果学生在老师修改的基础上作答了并提交到老师到，就无效了）
		_isValid4Modified: function(answerModified, studentAnswer, studentId) {
			if(!answerModified) return false;
			
			var submitTimestamp = 0; //获取学生提交答案的时间戳
			if($.isArray(studentAnswer.data) && studentAnswer.data.length > 0) {
				$.each(studentAnswer.data, function() {
					if(this.extra && !!this.extra.submitTimestamp) {
						submitTimestamp = this.extra.submitTimestamp;
						return false;
					}
				});
			}
			
			//老师修改时的时间戳与学生提交时的时间戳对比
			var isValid = answerModified.updateTimestamp > submitTimestamp;
			if(!isValid) {
				this.studentsModifiedCached[studentId] = null;  //清空老师修改的，反正没用了
			}
			
			return isValid;
		},
		//退出本题
		_onExamExit: function() {
			this.studentsModifiedCached = {};
			this.api && this.api.destroy();
        },
        //重新作答
        _onExamReset: function () {
			this.studentsModifiedCached = {};
        },
        _injectListItem: function (viewModel, data) {
            // 判断是否是被修改学生，如果不是什么都不做
            var studentId = viewModel.studentId, cache = this.studentsModifiedCached;
            if (cache.hasOwnProperty(studentId)) {
                //Step1. 列表项外框标红
                viewModel.extendStyle = _CONSTANTS.CLASS_INJECT_ITEM;

                //Step2. 列表项显示被修改的答案
                var answerModified = cache[studentId];
				if(answerModified) {
				    if(this._isValid4Modified(answerModified, data, studentId)) {
						viewModel._modifiedData = [{
							data_type: 'raw',
							type: 'thumb',
							value: JSON.stringify(answerModified.data)
						}];
					}
				}
            }
        },
        _showStudentDetail: function (data) {
            var studentId = data.answerData.studentId, cache = this.studentsModifiedCached;
            if (cache.hasOwnProperty(studentId)) {
                //Step0. 数据变量赋值
                this.currentDetailData = data;

                //Step1. 详情弹窗，显示Loading
                var $view = this.$view.show(), ndLoader = $view.find('.js_nd_loader').css('display', 'flex');

                //Step2. 获取展现数据
				var answerModified = cache[studentId], studentAnswer = null;
				if(this._isValid4Modified(answerModified, data, studentId)) {
					studentAnswer = answerModified.data;
				} else {
					studentAnswer = this._getStudentAnswer(data); //获取学生答案
				}
				
				//Step3. 加载思维导图组件,隐藏Loading
                this.mindJetManager.resetMindJetContent(studentAnswer);
                ndLoader.hide();
            } else {
                //获取学生答案
                var studentAnswer = this._getStudentAnswer(data);

                //未作答学生
                if (studentAnswer === null) return true;

                //Step0. 数据变量赋值
                this.currentDetailData = data;

                //Step1. 详情弹窗，显示Loading
                var $view = this.$view.show(), ndLoader = $view.find('.js_nd_loader').css('display', 'flex');

                //Step2. 加载思维导图组件，隐藏Loading
                if (this.mindJetManager) {
                    this.mindJetManager.resetMindJetContent(studentAnswer);
                    ndLoader.hide();
                } else {
                    var self = this,
                        layoutId = '_MindJetStudentDetail_' + new Date().getTime(),
                        properties = convert2ComponentProperties({
                            questionId: new Date().getTime() + '',
                            questionData: studentAnswer,
                            fromStatistic: true,
                            renderTo: '#' + layoutId
                        }),
                        container = $view.find('.exam_statistics_mindMap').attr('id', layoutId);

                    var promise = this.$requireComponent('MindMap', properties, container);
                    promise.then(function (presenter) {
                        self.__ScopeId__ = presenter.__ScopeId__;
                        ndLoader.hide();
                    });
                }
            }

            this._setContainerFontSize();

            return false;
        },
        _setContainerFontSize: function () {
            var $container = this.$view.find('.exam_statistics_mindMap');
            var size = function ($el) {
                return {
                    width: $el.width(),
                    height: $el.height()
                };
            };
            var e = 1920, n = 1080, i = 24,
                o = function () {
                    var o = size($container),
                        d = 0,
                        h = o.width,
                        c = o.height;
                    o.width / o.height <= e / n ? (d = o.width / e * i, h = o.width < e ? o.width : e, c = n * h / e, o.height > c) : (d = o.height / n * i, c = o.height < n ? o.height : n, h = e * c / n);
                    return d;
                };
            $container.css('fontSize', o());
            this._setContainerFontSize = function () { };
        }
    }, 'MindJetStatisPlugin');

    window.AddonMindJetStatisPlugin_create = function () {
        return new Presenter();
    }
})();

/***/ })
/******/ ]);]]>

</presenter>


<resources>


</resources>

</addon>