<?xml version='1.0' encoding='UTF-8' ?>
<addon id='ClassroomSummary'>
<properties>



</properties>

<dependencies>

<jsDependency>
    <javaScript  name="highcharts" version="4.1.9" />
</jsDependency>


</dependencies>

<css>

<![CDATA[.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .table_body .sy_answer_superman{height:2.33333em;line-height:2.33333em}.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .table_body .sy_sum_count_superman{padding-left:25%}.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .table_body .sy_sum_count_superman li{float:left;width:12%;font-size:.83333em;color:#333;text-align:left}.addon_ClassroomSummary .see_detail_wrap{width:100%;height:100%;position:fixed;display:none;z-index:10000;top:0;left:0}.addon_ClassroomSummary .see_detail_wrap .see_detail_shadow{width:100%;height:100%;position:absolute;background-color:#696969;opacity:.85}.addon_ClassroomSummary .see_detail_wrap iframe{border:none;left:3%;top:3%;position:absolute}.addon_ClassroomSummary .see_detail_wrap .close_iframe{display:inline-block;position:absolute;width:3.25em;height:3.29167em;background:url(resources/wood/images/icon_close.png) no-repeat;background-size:100% auto;cursor:pointer;top:1%;right:1.5%}.addon_ClassroomSummary .see_detail_wrap .close_iframe:active{background:url(resources/wood/images/icon_close.png) 0 100% no-repeat;background-size:100% auto}.addon_ClassroomSummary ._classroom_summary_container{position:fixed;z-index:2530;left:0;top:0;width:100%;height:100%}.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .sy_detail_list table .super-box{text-align:left!important}.addon_ClassroomSummary body,.addon_ClassroomSummary html{height:100%}.addon_ClassroomSummary .exam_classroom_diolag abbr,.addon_ClassroomSummary .exam_classroom_diolag fieldset,.addon_ClassroomSummary .exam_classroom_diolag iframe,.addon_ClassroomSummary .exam_classroom_diolag img{border:0}.addon_ClassroomSummary .exam_classroom_diolag *,.addon_ClassroomSummary .exam_classroom_diolag input,.addon_ClassroomSummary .exam_classroom_diolag select,.addon_ClassroomSummary .exam_classroom_diolag textarea{font-family:Microsoft YaHei,Helvetica,Arial,sans-serif}.addon_ClassroomSummary .exam_classroom_diolag dd,.addon_ClassroomSummary .exam_classroom_diolag dl,.addon_ClassroomSummary .exam_classroom_diolag form,.addon_ClassroomSummary .exam_classroom_diolag h1,.addon_ClassroomSummary .exam_classroom_diolag h2,.addon_ClassroomSummary .exam_classroom_diolag h3,.addon_ClassroomSummary .exam_classroom_diolag h4,.addon_ClassroomSummary .exam_classroom_diolag h5,.addon_ClassroomSummary .exam_classroom_diolag h6,.addon_ClassroomSummary .exam_classroom_diolag p,.addon_ClassroomSummary body{margin:0}.addon_ClassroomSummary body{line-height:1}.addon_ClassroomSummary .clearfix:after,.addon_ClassroomSummary .clearfix:before{display:table;content:"";line-height:0}.addon_ClassroomSummary .clearfix:after{clear:both}.addon_ClassroomSummary .exam_classroom_diolag{height:100%;box-sizing:border-box}.addon_ClassroomSummary .exam_classroom_diolag *{box-sizing:border-box;vertical-align:baseline}.addon_ClassroomSummary .exam_classroom_diolag ins{text-decoration:none}.addon_ClassroomSummary .exam_classroom_diolag del{text-decoration:line-through}.addon_ClassroomSummary .exam_classroom_diolag input,.addon_ClassroomSummary .exam_classroom_diolag select{vertical-align:middle}.addon_ClassroomSummary .exam_classroom_diolag input:focus{outline:0}.addon_ClassroomSummary .exam_classroom_diolag img{border:none;vertical-align:top}.addon_ClassroomSummary .exam_classroom_diolag address,.addon_ClassroomSummary .exam_classroom_diolag caption,.addon_ClassroomSummary .exam_classroom_diolag cite,.addon_ClassroomSummary .exam_classroom_diolag code,.addon_ClassroomSummary .exam_classroom_diolag dfn,.addon_ClassroomSummary .exam_classroom_diolag em,.addon_ClassroomSummary .exam_classroom_diolag i,.addon_ClassroomSummary .exam_classroom_diolag th{font-style:normal;font-family:Microsoft YaHei,Helvetica,Arial,sans-serif}.addon_ClassroomSummary .exam_classroom_diolag ol,.addon_ClassroomSummary .exam_classroom_diolag ul{margin:0;padding:0;list-style:none}.addon_ClassroomSummary .exam_classroom_diolag h1,.addon_ClassroomSummary .exam_classroom_diolag h2,.addon_ClassroomSummary .exam_classroom_diolag h3,.addon_ClassroomSummary .exam_classroom_diolag h4,.addon_ClassroomSummary .exam_classroom_diolag h5,.addon_ClassroomSummary .exam_classroom_diolag h6{font-weight:400}.addon_ClassroomSummary .exam_classroom_diolag blockquote,.addon_ClassroomSummary .exam_classroom_diolag q{quotes:none}.addon_ClassroomSummary .exam_classroom_diolag blockquote:after,.addon_ClassroomSummary .exam_classroom_diolag blockquote:before,.addon_ClassroomSummary .exam_classroom_diolag q:after,.addon_ClassroomSummary .exam_classroom_diolag q:before{content:"";content:none}.addon_ClassroomSummary .exam_classroom_diolag legend{display:none}.addon_ClassroomSummary .exam_classroom_diolag a{text-decoration:none;outline:0}.addon_ClassroomSummary .exam_classroom_diolag a:hover{text-decoration:none}.addon_ClassroomSummary .exam_classroom_diolag article,.addon_ClassroomSummary .exam_classroom_diolag aside,.addon_ClassroomSummary .exam_classroom_diolag details,.addon_ClassroomSummary .exam_classroom_diolag figcaption,.addon_ClassroomSummary .exam_classroom_diolag figure,.addon_ClassroomSummary .exam_classroom_diolag footer,.addon_ClassroomSummary .exam_classroom_diolag header,.addon_ClassroomSummary .exam_classroom_diolag hgroup,.addon_ClassroomSummary .exam_classroom_diolag menu,.addon_ClassroomSummary .exam_classroom_diolag nav,.addon_ClassroomSummary .exam_classroom_diolag section{display:block}.addon_ClassroomSummary .exam_classroom_diolag button,.addon_ClassroomSummary .exam_classroom_diolag input,.addon_ClassroomSummary .exam_classroom_diolag select,.addon_ClassroomSummary .exam_classroom_diolag textarea{outline:0;border:none}.addon_ClassroomSummary .exam_classroom_diolag textarea{resize:none}.addon_ClassroomSummary .exam_classroom_diolag table{border-collapse:collapse;border-spacing:0}.addon_ClassroomSummary .exam_classroom_diolag a,.addon_ClassroomSummary .exam_classroom_diolag button,.addon_ClassroomSummary .exam_classroom_diolag img,.addon_ClassroomSummary .exam_classroom_diolag input,.addon_ClassroomSummary .exam_classroom_diolag li,.addon_ClassroomSummary .exam_classroom_diolag textarea{-webkit-tap-highlight-color:rgba(255,255,255,0)}.addon_ClassroomSummary .exam_classroom_diolag .scrollbar_style_default::-webkit-scrollbar{width:.79167em;border-radius:.52083em;height:.79167em;background:url(resources/images/scrollv_bg.png) 50% 50%;padding:0 .16667em;border:.04167em solid #b2874e}.addon_ClassroomSummary .exam_classroom_diolag .scrollbar_style_default::-webkit-scrollbar:horizontal{width:.79167em;border-radius:.52083em;height:.79167em;background:url(resources/images/scrollh_bg.png) 50% 50% repeat-x;padding:.16667em 0;border:.04167em solid #b2874e}.addon_ClassroomSummary .exam_classroom_diolag .scrollbar_style_default::-webkit-scrollbar-button:increment:vertical{background:url(resources/images/scrollv_down.png) 50% 50% no-repeat;background-size:.625em .625em}.addon_ClassroomSummary .exam_classroom_diolag .scrollbar_style_default::-webkit-scrollbar-button:decrement:vertical{background:url(resources/images/srcollv_up.png) 50% 50% no-repeat;background-size:.625em .625em}.addon_ClassroomSummary .exam_classroom_diolag .scrollbar_style_default::-webkit-scrollbar-button:increment:horizontal{background:url(resources/images/scrollh_down.png) 50% 50% no-repeat;background-size:.625em .625em}.addon_ClassroomSummary .exam_classroom_diolag .scrollbar_style_default::-webkit-scrollbar-button:decrement:horizontal{background:url(resources/images/scrollh_up.png) 50% 50% no-repeat;background-size:.625em .625em}.addon_ClassroomSummary .exam_classroom_diolag .scrollbar_style_default::-webkit-scrollbar-thumb:vertical{background-image:url(resources/images/scrollv_line_mid.png),url(resources/images/scrollv_thumb_bg.png);background-repeat:no-repeat,no-repeat;background-position:50% 50%,50% 0;background-size:.375em .83333em,.79167em 100%;box-shadow:inset 0 .04167em 0 0 hsla(0,0%,100%,.95),0 .08333em 0 0 rgba(95,59,13,.42),inset 0 0 .08333em .83333em hsla(0,0%,100%,.2);border-radius:.83333em;position:absolute}.addon_ClassroomSummary .exam_classroom_diolag .scrollbar_style_default::-webkit-scrollbar-thumb:horizontal{background-image:url(resources/images/scrollh_line_mid.png),url(resources/images/scrollh_thumb_bg.png);background-repeat:no-repeat,no-repeat;background-position:50% 50%,0 50%;background-size:.83333em .375em,100% .79167em;box-shadow:inset .04167em 0 0 0 hsla(0,0%,100%,.95),.08333em 0 0 0 rgba(95,59,13,.42),inset 0 0 1.95px 20px hsla(0,0%,100%,.2);border-radius:.83333em;position:absolute}.addon_ClassroomSummary .exam_classroom_diolag .scrollbar_style_gray::-webkit-scrollbar{width:.41667em;height:.41667em}.addon_ClassroomSummary .exam_classroom_diolag .scrollbar_style_gray::-webkit-scrollbar-thumb{background:rgba(0,0,0,.2);border-radius:.20833em}.addon_ClassroomSummary .exam_classroom_diolag .scrollbar_style_light::-webkit-scrollbar{width:9px;border-radius:12.5px;padding:0 4px;height:9px}.addon_ClassroomSummary .exam_classroom_diolag .scrollbar_style_light::-webkit-scrollbar-button:increment{background:url(resources/images/scroll_thumb_t_bg.png) 50% 50% no-repeat;height:5px;width:5px}.addon_ClassroomSummary .exam_classroom_diolag .scrollbar_style_light::-webkit-scrollbar-button:decrement{background:url(resources/images/scroll_thumb_t_bg.png) 50% 50% no-repeat;height:1px;width:1px}.addon_ClassroomSummary .exam_classroom_diolag .scrollbar_style_light::-webkit-scrollbar-thumb{background-image:url(resources/images/scroll_thumb_bg_t.png);background-repeat:repeat;background-position:50% 0;box-shadow:inset 0 1px 0 0 hsla(0,0%,100%,.95),0 2px 0 0 rgba(95,59,13,.42),inset 0 0 1.95px 20px hsla(0,0%,100%,.2);border-radius:20px;position:absolute}.addon_ClassroomSummary .exam_classroom_diolag .scrollbar_style_light::-webkit-scrollbar-thumb:horizontal:hover{opacity:.5}.addon_ClassroomSummary .exam_classroom_diolag .scrollbar_style_brown::-webkit-scrollbar{width:.33333em;height:.33333em}.addon_ClassroomSummary .exam_classroom_diolag .scrollbar_style_brown::-webkit-scrollbar-thumb{background:#a1763d;border-radius:.16667em}.addon_ClassroomSummary .exam_classroom_diolag .sy_class_container{position:relative;overflow:hidden;width:100%;height:100%;background:url(resources/wood/images/bg.jpg) no-repeat;background-size:cover}.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper{position:absolute;left:50%;top:50%;margin-left:-28.58333em;margin-top:-20.54167em;padding-top:4.83333em;width:58em;height:41.08333em;box-shadow:0 3px 4px 0 rgba(1,1,1,.2)}.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .sy_le_head{position:absolute;left:0;top:0;background-color:#313131;width:100%;height:1.91667em;padding-left:.58333em;z-index:2}.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .sy_le_head h2{float:left;line-height:2.25em;font-size:.83333em;color:#fff}.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .sy_le_head a{float:right;width:1.91667em;height:1.91667em;background:url(resources/wood/images/close.png) no-repeat;background-size:contain}.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .sy_le_head a:active{background:url(resources/wood/images/close_on.png) no-repeat;background-size:contain}.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .sy_le_tab{position:absolute;left:0;top:1.91667em;background-color:#fff;width:100%;height:2.91667em;box-shadow:0 2px 2px 0 rgba(1,1,1,.1);text-align:center;z-index:2}.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .sy_tab_list{display:inline-block;padding-top:.625em}.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .sy_tab_list li{float:left}.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .sy_tab_list a{display:inline-block;height:2em;width:6.75em;line-height:1.83333em;text-align:center;color:#649c01;font-size:.83333em}.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .sy_tab_content .tab_pane,.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .sy_tab_list_single .tab_l{display:none}.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .sy_tab_list .on a,.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .sy_tab_list a:active{background-color:#649c01;color:#fff}.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .sy_tab_list .tab_l a{border:2px solid #649c01;border-top-left-radius:1em;border-bottom-left-radius:1em;border-right:none}.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .sy_tab_list .tab_r a{border:2px solid #649c01;border-top-right-radius:1em;border-bottom-right-radius:1em;border-left:none}.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .sy_tab_list_single .tab_r a,.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .sy_tab_list_single .tab_r a:active{border:none;font-size:1em;font-weight:700;background:0 0;color:#649c01;cursor:default}.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .sy_le_box{height:100%}.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .sy_tab_content{overflow-y:auto;height:100%;width:100%;background:hsla(0,0%,96%,.85);border-right:1px solid #bfc1c2}.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .sy_tab_content .tab_pane.active{display:block}.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .sy_sumtop{padding:0 1.75em;height:2.5em;line-height:2.5em;background:#e8e7e7}.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .sy_sumtop .sy_fixshow{float:left;width:33%;font-size:.91667em;color:#333;text-align:center}.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .sy_sumtop .sy_left{text-align:left}.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .sy_sumtop .sy_right{text-align:right}.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .sy_sumtop .sy_score,.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .sy_sumtop .sy_score.red{color:#e22b01}.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .sy_sumtop .sy_rate,.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .sy_sumtop .sy_score.green{color:#649c01}.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .sy_sumtop .sy_rate.red{color:#e22b01}.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .sy_sumtop .sy_rate.green{color:#649c01}.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .le_tab_the{padding-top:.625em;text-align:center;height:3.33333em;font-size:.83333em}.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .le_tab_the ul{display:inline-block;background:#fff;border:1px solid #8e8e8e}.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .le_tab_the li{float:left;width:6em;height:2em;line-height:2em}.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .le_tab_the a{position:relative;display:inline-block;width:100%;height:100%;color:#333}.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .le_tab_the a:after{content:"";position:absolute;bottom:-.33333em;left:50%;width:.66667em;height:.45833em}.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .le_tab_the a:active{background-color:#d6d6d6}.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .le_tab_the a:active:after{background:url(resources/wood/images/tab_on.png) top no-repeat;background-size:100% auto}.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .le_tab_the .on a{background-color:#d6d6d6}.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .le_tab_the .on a:after{background:url(resources/wood/images/tab_on.png) top no-repeat;background-size:100% auto}.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .sy_detail_list{display:none}.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .sy_detail_list.active{display:block}.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .sy_detail_list table{width:100%;text-align:center;padding:0;vertical-align:middle;table-layout:fixed}.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .sy_detail_list th{line-height:1.45833em;font-weight:400;font-size:.91667em;color:#777}.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .table_head{padding:0 .91667em;border-bottom:1px solid #9f9f9f}.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .ques_box{text-align:left}.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .table_body{margin-top:1px;font-size:.83333em;border-top:1px solid #9f9f9f;padding:0 .91667em 2.08333em}.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .table_body .tit td{padding-top:1.04167em;vertical-align:middle}.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .table_body .sy_answer{height:2.33333em;line-height:2.33333em;border-bottom:1px dashed #9f9f9f}.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .table_body .sy_sum_count{padding-left:12%}.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .table_body .sy_sum_count li{float:left;width:28%;font-size:.83333em;color:#333;text-align:left}.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .table_body .sy_sum_count em{color:#649c01}.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .ques_box dl{padding-bottom:.41667em}.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .ques_box dt{line-height:1.25em;padding-bottom:.75em}.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .ques_box input{display:inline-block;padding:0 .20833em;width:5em;background:0 0;border-bottom:1px solid #000;font-size:.83333em;text-align:center}.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .ques_box input[type=radio]{margin:.125em .125em 0 .20833em;display:none}.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .ques_box label{padding-left:1.58333em;cursor:pointer;line-height:1.66667em;background:url(resources/wood/images/radio.png) 0 no-repeat;background-size:1em auto}.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .ques_box label.checked{background:url(resources/wood/images/radio_on.png) 0 no-repeat;background-size:1em auto}.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .check_box{text-align:left}.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .check_box dl{padding-bottom:.41667em}.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .check_box dt{padding-bottom:.75em}.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .check_box dt input{padding:0 .20833em;width:4.16667em;background:0 0;border-bottom:1px solid #000;font-size:.83333em;text-align:center}.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .check_box input{margin:3px 3px 0 5px;display:none}.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .check_box label{padding-left:1.58333em;cursor:pointer;line-height:40px;background:url(resources/wood/images/check.png) 0 no-repeat;background-size:.91667em auto}.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .check_box label.checked{background:url(resources/wood/images/check_on.png) 0 no-repeat;background-size:.91667em auto}.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .sy_ques_de a{display:inline-block;margin-top:1.45833em;width:5.75em;height:2em;border:1px solid #649c01;background-color:#fff;line-height:1.91667em;text-align:center;font-size:.83333em;color:#649c01}.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .sy_ques_de a:active{background-color:#649c01;color:#fff}.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .sy_total{text-align:center}.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .sy_total .sno{padding-left:30px;text-align:left}.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .sy_total .table_head{padding:0 15px}.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .sy_total .table_body{padding:0 15px .83333em}.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .sy_total .table_body td{line-height:2.5em;border-bottom:1px dashed #9f9f9f;font-size:.83333em;color:#000}.addon_ClassroomSummary .exam_classroom_diolag .sy_class_wraper .sy_total .table_body .s_warn{color:#e22b01}.addon_ClassroomSummary .exam_classroom_diolag .sy_tab_flower .flower_h{padding:.83333em 0;text-align:center;font-size:.83333em;line-height:1.5em}.addon_ClassroomSummary .exam_classroom_diolag .sy_tab_flower .flower_h em{color:#f56118}.addon_ClassroomSummary .exam_classroom_diolag .sy_tab_flower .flower_h strong{color:#649c01;font-weight:400}.addon_ClassroomSummary .exam_classroom_diolag .sy_tab_flower .flower_box{padding:0 .41667em}.addon_ClassroomSummary .exam_classroom_diolag .sy_tab_flower .flower_box dl{float:left;padding:0 .20833em;width:5.625em;height:8.33333em;line-height:1.25em;text-align:center}.addon_ClassroomSummary .exam_classroom_diolag .sy_tab_flower .flower_box dt{position:relative;padding-bottom:.41667em}.addon_ClassroomSummary .exam_classroom_diolag .sy_tab_flower .flower_box dt img{width:4.16667em;height:4.16667em;border-radius:50%;border:.125em solid #feffff}.addon_ClassroomSummary .exam_classroom_diolag .sy_tab_flower .flower_box dt span{position:absolute;padding:0 .33333em;min-width:1.58333em;height:1.58333em;font-size:.83333em;text-align:center;line-height:1.5em;color:#fff;bottom:.33333em;right:.41667em;background:-webkit-linear-gradient(top,#ff8543,#ff6224);background:linear-gradient(180deg,#ff8543,#ff6224);border:2px solid #fff;border-radius:1.66667em}.addon_ClassroomSummary .exam_classroom_diolag .sy_tab_flower .flower_box dd{font-size:.83333em}.addon_ClassroomSummary .exam_classroom_diolag .sy_tab_flower .flower_box .sno{overflow:hidden;height:1.5em;font-size:.75em;text-align:center;white-space:nowrap;text-overflow:ellipsis}.addon_ClassroomSummary .exam_classroom_diolag .icon_sy_tab_flower{display:inline-block;width:1em;height:1em;margin:.125em .25em 0;background:url(resources/wood/images/icon_ktflower.png) 50% no-repeat;background-size:100% auto;vertical-align:top}.addon_ClassroomSummary .exam_classroom_diolag ::-ms-clear,.addon_ClassroomSummary .exam_classroom_diolag ::-ms-reveal{display:none}.addon_ClassroomSummary .exam_classroom_diolag .sy_scroll_change::-webkit-scrollbar{width:.66667em;height:.25em}.addon_ClassroomSummary .exam_classroom_diolag .sy_scroll_change::-webkit-scrollbar-thumb{border-radius:.33333em;background:#fff;box-shadow:0 .125em .125em 0 rgba(1,1,1,.3)}.addon_ClassroomSummary .exam_classroom_diolag .sy_scroll_change::-webkit-scrollbar-track{display:inline-block;border-left:1px solid #bfbfbf;width:1.5em;background:#dcdcdc}.addon_ClassroomSummary .exam_classroom_diolag .ToolDiolag_preload_img_01{display:none;background-image:url(resources/wood/images/push_on.png)}]]>

</css>


<view>

<![CDATA[<div class="exam_classroom_diolag _classroom_summary_container" style="font-size: 24px; display: none" id="layout"><div class="sy_class_container com_bookskin"><div class="sy_class_wraper"><div class="sy_le_head clearfix"><h2 data-bind="html:classroom_summary"></h2><a href="#" title="" class="sy_le-close"></a></div><div class="sy_le_box"><div class="sy_le_tab"><ul class="clearfix sy_tab_list"><li class="tab_l on"><a href="javascript:;" title="" data-bind="text:question_statistics"></a></li><li class="tab_r"><a href="javascript:;" title="" data-bind="text:flower_statistics"></a></li></ul></div><div class="sy_tab_content sy_scroll_change"><div class="tab_pane active _sy_tab_question"><div class="sy_sumtop"><ul class="sy_titlelist clearfix"><li class="sy_fixshow sy_left"><span data-bind="html:total_numberof_exerciese"></span><em class="sy_num"></em></li><li class="sy_fixshow"><span data-bind="html:averageAndtotal_score"></span><em class="sy_score"></em>/100</li><li class="sy_fixshow sy_right"><span data-bind="html:the_average_accuracy"></span> <em class="sy_rate"></em></li></ul></div><div class="le_tab_the"><ul class="clearfix"><li class="_question_content on"><a href="javascript:;" title="" data-bind="html:detailsOf_doing_answers"></a></li><li class="_total_view"><a href="javascript:;" title="" data-bind="html:overview_of_answerQuenstion"></a></li></ul></div><div class="le_tab_box"><div class="sy_detail_list sy_detail active"><div class="table_head"><table><thead><tr><th width="8%" data-bind="html:questionId"></th><th width="17%" class="ques_type" data-bind="html:question_type"></th><th width="63%" class="ques_box" data-bind="html:the_title"></th><th></th></tr></thead></table></div><div class="table_body"></div></div><div class="sy_detail_list sy_total"><div class="table_head"><table><thead><tr><th class="sno" width="20%" data-bind="html:studentId"></th><th width="12%" data-bind="html:studentName"></th><th width="15%" data-bind="html:get_score"></th><th width="15%" data-bind="html:accuracy"></th><th width="12%" data-bind="html:right_anwers_number"></th><th width="12%" data-bind="html:wrong_anwers_number"></th><th data-bind="html:not_do_number"></th></tr></thead></table></div><div class="table_body"><table><tbody></tbody></table></div></div></div></div><div class="tab_pane sy_tab_flower"><div class="flower_h"></div><div class="flower_box clearfix"></div></div></div></div></div></div></div><div class="see_detail_wrap" style="display: none"><div class="see_detail_shadow"></div><iframe width="94%" height="94%"></iframe><span class="close_iframe"></span></div>]]>
</view>


<presenter>

<![CDATA[/**
 * 课堂总结Module
 * 1.0.18
 *
 * @author zdw、lc
 */
function AddonClassroomSummary_create() {
    /**
     * 角色判断
     *
     * icCreatePlayer.RUNTIME.TEACHER_MOBILE(教师端)
     * icCreatePlayer.RUNTIME.STUDENT_MOBILE(学生端)
     * icCreatePlayer.RUNTIME.PROJECTION_MOBILE(投影端)
     * icCreatePlayer.RUNTIME.WEB(WEB端 )
     * icCreatePlayer.RUNTIME.TEACHER_PC(PC端)
     */
    var isTeacherPad = false,
        isTeacherPc = false,
        isProjector = false,
        isStudent = false,
        isWeb = false,
        isApp = false;
    var bridgeListenerKey = {};

    var currentRuntime = player.getPlayerServices().getRuntime();
    switch (currentRuntime) {
        case icCreatePlayer.RUNTIME.TEACHER_MOBILE :
            isTeacherPad = true;
            isApp = true;
            break;
        case icCreatePlayer.RUNTIME.STUDENT_MOBILE :
            isStudent = true;
            isApp = true;
            break;
        case icCreatePlayer.RUNTIME.PROJECTION_MOBILE :
            isProjector = true;
            isApp = true;
            break;
        case icCreatePlayer.RUNTIME.TEACHER_PC :
            isTeacherPc = true;
            isApp = true;
            break;
        case icCreatePlayer.RUNTIME.WEB :
            isWeb = true;
            isApp = false;
            break;
        default :
            isWeb = true;
            isApp = false;
            break;
    }

    var flowerStatisticData = null;

    //题目类型枚举
    var QuestionType = {
        //未知类型
        UNKNOW: "unknow",

        //选择题
        CHOICE: "choice",

        //多项选择
        MULTIPLE_CHOICE: "multiplechoice",

        //填空
        TEXT_ENTRY: "textentry",

        //连线题
        MATCH: "match",

        //排序
        ORDER: "order",

        //拼图题
        GRAPHIC_GAP_MATCH: "graphicgapmatch",

        //判断题
        JUDGE: "judge",

        //作文题
        COMPOSITION: "composition",

        // 连连看
        LINKUP: "linkup",

        //新排序
        SEQENCING: "seqencing",

        //表格题
        TABLE: "table",

        //竖式计算
        ARITHMETIC: "arithmetic",

        //记忆卡片
        MEMORYCARD: "memorycard",

        //字谜题
        WORDPUZZLES: "wordpuzzles",

        //疯狂猜词
        GUESSWORD: "guessword",

        //手写题
        HANDWRITE: "handwrite",

        //复合题
        DATA: "data"
    };

    //课堂总结需要处理的题型 - 前期只有这四个题型需要处理
    var NeedSummaryType = [
        //单选题
        'choice',

        //多项选择
        'multiplechoice',

        //填空
        'textentry',

        //判断题
        'judge'
    ];

    /**
     * 完成状态
     */
    var COMPLETIONSTATUS = {
        INCOMPLETE: "INCOMPLETE",//未完成
        COMPLETED: "COMPLETED",//完成
        PASSED: "PASSED",//正确
        FAILED: "FAILED",//错误
        UNKNOW: "UNKNOW"//未知
    };

    /**
     * 持久化的数据类型
     *
     */
     var PersistDataType = {
        'class_summary'  : 'CLASS_LESSON_SUMMARY',   //班级的课堂总结数据
        'stu_summary'    : 'STUDENT_LESSON_SUMMARY', //单个学生的课堂总结数据
        'stu_ans_list'   : 'STUDENT_EXAM_ANSWER'    //学生提交的答题数据
     };


    //填空题测试数据
    var textParser = '{"item":"","score":"","source":"","type":"show","word":"","value":{"answers":[{"isRight":false,"userIds":["2107310072","2107272293"],"answer":["666","22"]},{"isRight":true,"userIds":["2107293352"],"answer":["1","22"]}],"correctAnswer":["1","22"],"correctUserIds":["2107293352"],"users":[{"userId":"2107310072","submitTime":10},{"userId":"2107310564","submitTime":0},{"userId":"2107290943","submitTime":0},{"userId":"2107290977","submitTime":0}],"unfinishedUserIds":["2107310564","2107290943","2107308370","2107302571","2107316381","2107311587","2107303045","2107267239","2107314339","2107284495","2107307596","2107309066","2107309863","2107306602","2107307531","2107290977"],"examId":"d4810c9f-c39e-496c-b317-b0b0e9939566","questionUrl":"../testResources/dws_text.xml","questionType":"textentry","finishedNum":10,"unfinishedNum":59,"elapsedTime":15,"dispatchOnly":true,"pageName":"d4810c9f-c39e-496c-b317-b0b0e9939566"}}';

    //判断题测试数据
    var judgeParse = '{"item":"","score":"","source":"","type":"show","word":"","value":{"answers":[{"isRight":false,"userIds":["2107207574","2107293352"],"answer":["NO"]},{"isRight":true,"userIds":["2107267239","2107207193"],"answer":["YES"]}],"correctAnswer":["YES"],"correctUserIds":["2107267239","2107207193"],"users":[{"userId":"2107207574","submitTime":5},{"userId":"2107188602","submitTime":0},{"userId":"2107217082","submitTime":0},{"userId":"2107228536","submitTime":0},{"userId":"2107207193","submitTime":0}],"unfinishedUserIds":["2107188602","2107217082"],"examId":"cbaca557-87aa-4042-bdaf-98501a9b4582","questionUrl":"../testResources/dws_judge.xml","questionType":"judge","finishedNum":10,"unfinishedNum":59,"elapsedTime":10,"dispatchOnly":true,"pageName":"cbaca557-87aa-4042-bdaf-98501a9b4582"}}';

    //多项选择题测试数据
    var mchoiceParse = '{"item":"","score":"","source":"","type":"show","word":"","value":{"answers":[{"isRight":false,"userIds":["2107207574"],"answer":["B","C","D"]},{"isRight":true,"userIds":["2107207193","2107267239"],"answer":["A","B"]}],"correctAnswer":["A","B"],"correctUserIds":["2107207193","2107267239"],"users":[{"userId":"2107207574","submitTime":7},{"userId":"2107188602","submitTime":0}],"unfinishedUserIds":["2107188602","2107217082","2107228536"],"examId":"067b6163-028f-482d-a3b2-fcb6bd57b318","questionUrl":"../testResources/dws_mchoice.xml","questionType":"multiplechoice","finishedNum":31,"unfinishedNum":59,"elapsedTime":14,"dispatchOnly":true,"pageName":"067b6163-028f-482d-a3b2-fcb6bd57b318"}}';

    //单项选择题测试数据
    var choiceParse = '{"item":"","score":"","source":"","type":"show","word":"","value":{"answers":[{"isRight":false,"userIds":["2107293352","2107207193"],"answer":["C"]},{"isRight":true,"userIds":["2107303045"],"answer":["A"]}],"correctAnswer":["A"],"correctUserIds":["2107303045"],"users":[{"userId":"2107207574","submitTime":12},{"userId":"2107188602","submitTime":0},{"userId":"2107217082","submitTime":0}],"unfinishedUserIds":["2107188602","2107217082","2107228536","2107216997"],"examId":"898cb71a-783b-4c5f-ba60-e05bd29ca85e","questionUrl":"../testResources/dws_choice.xml","questionType":"choice","finishedNum":41,"unfinishedNum":59,"elapsedTime":16,"dispatchOnly":true,"pageName":"898cb71a-783b-4c5f-ba60-e05bd29ca85e"}}';

    //学生历史成绩查询
    var studentLineTestData = {};

    //学生历史成绩查询 - 模拟数据
    var mockStudentLineTestData = {
        data: {
        result: true,
        count: 100,
        data: [
            {subject_id: '', student_id: '', data: JSON.stringify({score: 100, courseware_id: '1', courseware_name: '1.1.1 第一课时'})},
            {subject_id: '', student_id: '', data: JSON.stringify({score: 80, courseware_id: '2', courseware_name: '1.2.1 第二课时'})},
            {subject_id: '', student_id: '', data: JSON.stringify({score: 50, courseware_id: '3', courseware_name: '1.3.1 第三课时'})},
            {subject_id: '', student_id: '', data: JSON.stringify({score: 10, courseware_id: '4', courseware_name: '1.3.2 第四课时'})},
            {subject_id: '', student_id: '', data: JSON.stringify({score: 100, courseware_id: '5', courseware_name: '1.4.1 第五课时'})},
            {subject_id: '', student_id: '', data: JSON.stringify({score: 90, courseware_id: '6', courseware_name: '2.1.1 第六课时'})},
            {subject_id: '', student_id: '', data: JSON.stringify({score: 70, courseware_id: '7', courseware_name: '3.1.1 第七课时'})},
            {subject_id: '', student_id: '', data: JSON.stringify({score: 20, courseware_id: '8', courseware_name: '4.1.1 第八课时'})},
            {subject_id: '', student_id: '', data: JSON.stringify({score: 80, courseware_id: '9', courseware_name: '5.1.1 第九课时'})},
            {subject_id: '', student_id: '', data: JSON.stringify({score: 100, courseware_id: '10', courseware_name: '6.1.1 第十课时'})},
            {subject_id: '', student_id: '', data: JSON.stringify({score: 100, courseware_id: '1', courseware_name: '1.1.1 第一课时'})},
        ]
        }

    };

    var mockData = [
        //填空题数据
        textParser,

        //判断题数据
        judgeParse,

        //多选题
        mchoiceParse,

        //单选题
        choiceParse
    ];
    
    var helper = {
    	rightRate:0
    };

//  //初始化qtiplayer
//  var qtiOption = {
//      //xml中表达式${ref-path}的实际值,默认值''
//      refPath: icCreatePlayer.ref_path
//  };
//  var qtiplayer = QtiPlayer.createPlayer(qtiOption);

    //课堂基础信息-run的时候就会去获取了
    var classroomBaseInfo = {};

    //课堂基础信息-run的时候就会去获取了 -- 测试模拟数据
    var mockClassroomBaseInfo = {
        lesson_id : '$SB02004444',
        subject_id : '$SB0200',
        subject_name: '数学', //学科名称
        grade_name: '五年级', //年级名称
        class_id : '495331457897',
        class_name: '初一(3)班', //班级名称
        teacher_name: '王鼎', //老师名称
        courseware_id: 'xxxx', //课件ID
        courseware_name: '1.2.1有理数 第一课时', //课件名称
        startLessonTime: 1446649044, //开始时间戳
        stu_nums: 30, //班级人数
        interaction_time: 30, //互动时间分钟
        class_time: 40, //上课时间分钟
        questions_num: 5, //练习题数
        total_score: 100, //练习总分
        avg_score: 20, //练习平均分
        stu_avg_score : 0, //学生的平均分
        right_rate: 80 //平均正确率
    };

    //题目键值数据 => 方便直接查询题目数据
    var questionInfos = {};

    //题目键值数据 => 方便直接查询题目数据 -> 示例
    // var questionInfos = {
    //     'd4810c9f-c39e-496c-b317-b0b0e9939566': {
    //         'right_rate': 0.8 //题目答对率
    //         'index'   : 1                       //对应习题列表的序号
    //         'unfinished_users' : [111, 222, 44] //没有答题的学生
    //     },
    //      'd4810c9f-c39e-496c-b317-b0b0e9939567': {
    //         'right_rate': 0.6 //题目答对率
    //         'index'   : 1                       //对应习题列表的序号
    //         'unfinished_users' : [111, 222, 44] //没有答题的学生
    //     }
    // };

    //习题列表数据
    var questionList = [];

    //习题列表数据 -> 示例
    // var questionList = [
    //     {
    //         question_id: 'd4810c9f-c39e-496c-b317-b0b0e9939566', //习题ID
    //         question_url: '../testResources/dws_choice.xml',     //习题xml
    //         question_code: 'choice',                             //习题类型
    //         score: 20,                                           //习题分数
    //         right_num: 10,                                       //答对学生数量
    //         do_num: 30,                                          //答题学生数量
    //         not_do_num: 2,                                       //未答学生数量
    //         right_answer: ['A'],                                 //正确答案
    //         answers_list: [                                      //答案列表
    //             {
    //                 answer: ['A', 'B'],                          //学生的答案
    //                 is_right: true,                              //是否答对
    //                 user_ids: ['111', '22222']                   //回答该答案学生ID数组
    //             },
    //             {
    //                 answer: ['B', 'C'],
    //                 is_right: false,
    //                 user_ids: ['111', '22222']
    //             },
    //         ]
    //     }
    // ];

    //按学号=>姓名等信息记录学生信息
    var stuInfos = {};

    //按学号=>姓名等信息记录学生信息 -- 测试模拟数据
    var mockStuInfos = {
        '2107293352': {
            'stu_id' : 2107293352,
            'stu_num': '120',
            'stu_name': '老王20号',
            'icon': '2107141207(2).jpg',
            'is_online': true,
            'score': 60, //学生得分 - 为了方便查询，做下冗余
            'right_rate' : 0.5
        },
        '2107303045': {
            'stu_id' : 2107303045,
            'stu_num': '140',
            'stu_name': '老王140号',
            'icon': '2107141207(2).jpg',
            'is_online': true,
            'score': 80,
            'right_rate' : 0.2
        },
        '2107267239': {
            'stu_id' : 2107267239,
            'stu_num': '160',
            'stu_name': '老王160号',
            'icon': '2107141207(2).jpg',
            'is_online': true,
            'score': 90,
            'right_rate' : 0.7
        },
        '2107207193': {
            'stu_id' : 2107207193,
            'stu_num': '200',
            'stu_name': '老王200号',
            'icon': '2107141207(2).jpg',
            'is_online': false,
            'score': 20,
            'right_rate' : 0.95
        },
        '2107207574': {
            'stu_id' : 2107207574,
            'stu_num': '200',
            'stu_name': '老王300号',
            'icon': '2107141207(2).jpg',
            'is_online': false,
            'score': 20,
            'right_rate' : 0.95
        }
        ,
        '2107310072': {
            'stu_id' : 2107310072,
            'stu_num': '200',
            'stu_name': '老王400号',
            'icon': '2107141207(2).jpg',
            'is_online': false,
            'score': 20,
            'right_rate' : 0.25
        }
        ,
        '2107272293': {
            'stu_id' : 2107272293,
            'stu_num': '200',
            'stu_name': '老王500号',
            'icon': '2107141207(2).jpg',
            'is_online': false,
            'score': 20,
            'right_rate' : 0.55
        }
        ,
        '2107272297': {
            'stu_id' : 2107272297,
            'stu_num': '800',
            'stu_name': '老王800号',
            'icon': '2107141207(2).jpg',
            'is_online': false,
            'score': 0,
            'right_rate' : 0.55
        }
    };

    //学生答题统计信息
    var stuStatList = [];

    //学生答题统计信息 - 测试模拟数据
    var mockStuStatList = [
        {
            stu_id : '2107293352',
            right_num : 0,      //答对题数
            wrong_num : 0,      //答错题数
            not_do_num : 0,     //未答题数
            right_rate : 0      //正确率
        },
        {
            stu_id : '2107303045',
            right_num : 0,
            wrong_num : 0,
            not_do_num : 0,
            right_rate : 0
        },
        {
            stu_id : '2107267239',
            right_num : 0,
            wrong_num : 0,
            not_do_num : 0,
            right_rate : 0
        },
        {
            stu_id : '2107207193',
            right_num : 0,
            wrong_num : 0,
            not_do_num : 0,
            right_rate : 0
        },
        {
            stu_id : '2107207574',
            right_num : 0,
            wrong_num : 0,
            not_do_num : 0,
            right_rate : 0
        },
        {
            stu_id : '2107310072',
            right_num : 0,
            wrong_num : 0,
            not_do_num : 0,
            right_rate : 0
        },
        {
            stu_id : '2107272293',
            right_num : 0,
            wrong_num : 0,
            not_do_num : 0,
            right_rate : 0
        },
        {
            stu_id : '2107272297',
            right_num : 0,
            wrong_num : 0,
            not_do_num : 0,
            right_rate : 0
        }
    ];

    //学生答题详情记录 -- 现在这部分数据统一存放在sessionStorage
    //var stuQuestionList = {};

    //学生答题详情记录 -> 示例
    // var stuQuestionList = {
    //     '2107293352': {                               //学生ID
    //         'd4810c9f-c39e-496c-b317-b0b0e9939566': {             //习题ID
    //             'question_url': 'xxx.xml',                        //习题xml
    //             'question_answer': ['A', 'B'],                    //习题答案
    //             'is_right': true                                  //学生回答是否正确
    //             'old_is_right' : true                             //上次回答是否正确
    //         },
    //         'd4810c9f-c39e-496c-b317-b0b0e9939567': {
    //             'question_url': '../testResources/dws_choice.xml',
    //             'question_answer': ['A'],
    //             'is_right': false
    //             'old_is_right' : false
    //         },
    //     }
    // };

    //定义全局定义数据
    var classroomViewModel = null;

    var StudentInfoModel = null;//学生个人答题页面
    var QuestionInfoModel = null;//单题页面

    var sheetsTmp = [];

    /**
     * 调用APP接口
     */
    var callNative = function (eventName, data) {
        if (isApp && Bridge && Bridge.callNative) {
            return Bridge.callNative('com.nd.pad.icr.ui.IcrJsBridge', eventName, data);
        }
        return false;
    };

    //显示或是隐藏“退出课堂”按钮和Toolbar
    var setExitBtn = function(isShow){
        isShow = isShow ? true : false;

        var items = [{
            moduleId : 'exit',
            visible : isShow
        }, {
            moduleId : 'toolBar',
            visible : isShow
        }];
        ClassroomUtils.setNativeModuleVisibility(items);
    };

    //调整页面大小
    //dom - 每个页面上面的具体dom节点
    var resize_adpheight = function(dom){
        var toph = $(dom).offset().top;
        var bodyh = $('body').height();
        var adpheight = bodyh - toph;
        $(dom).height(adpheight);
    }

    /**
     * 触发投影端事件
     *
     * @param {string} eventName 事件名称
     * @param {Object} option 可选参数
     * @param {string} option.item
     * @param {string} option.value
     * @param {string} option.score
     * @param {string} option.type
     * @param {string} option.word
     */
    var fireEvent = function (eventName, option) {
        if (!option) option = {};
        var eventData = {
            source: presenter.module_id,
            item: option.item || '',
            value: option.value || '',
            score: option.score || 0,
            type: option.type || '',
            word: option.word || ''
        };

        if (presenter.eventBus) {
            presenter.eventBus.sendEvent(eventName, eventData);  //返回undefined
        }
        if (option.isApp && presenter.isApp) {
            if (Bridge && Bridge.callNative) {
                Bridge.callNative("com.nd.pad.icr.ui.IcrJsBridge", "sendEvent", {
                    "eventName": eventName,
                    "eventData": eventData
                });  //返回 {'success' : true}
            }
        }
    };

    /**
     * Module的逻辑
     * @param view 视图对象, 根据是否为预览状态传入不同的视图对象
     * @param model 模型对象
     * @param isPreview 是否为编辑环境, true=编辑环境, false=运行环境
     */
    var presenterLogic = function (view, model, isPreview) {

        //初始化变量
        presenter.$view = $(view);

        //初始化课堂信息
        presenter.initClassroomInfo();

        //如果是测试环境的话
        if(isWeb) {
            ClassroomInfo.setMockData();
        }

        //设置持久化的key
        var base = classroomBaseInfo['lesson_id'] + '_' + classroomBaseInfo['class_id'] + '_' + classroomBaseInfo['subject_id'] + '_' + classroomBaseInfo['courseware_id'];
        presenter.classroom_key = 'classroom_summary_info_' + base;
        presenter.answer_key    = 'classroom_students_ans_' + base;

        //保存到sessionStorage的key
        presenter.student_ans_key = 'student_ans_key_' + base;

        //首次进来将sessionStorage里面的学生数据清空
        StudentAnswerHandle.save({});

        //查询看有没有持久化的数据，有的话，就将数据同步过来
        presenter.syncData();

        //注册统计函数
        presenter.registerSummary();

        //如果是测试环境的话，直接进入
        if(isWeb) {
            //本地测试的时候要打开这边  superman
            //ClassroomInfo.init();
        }
    };

    var students = [];

    var presenter = function () {};


    //注册答题数据统计事件
    presenter.registerSummary = function() {
        if(isApp && Bridge) {
            //注册事件同步事件
            presenter.summaryListen =  Bridge.registerListener('ClassroomSummary', function(data) {

                console.log('[ClassroomSummary]收到ClassroomSummary事件:'+JSON.stringify(data));

                var option = {'order' : [{orderProperty:'seatNumberValue', orderType : 'asc'},{orderProperty:'studentNo', orderType : 'asc'}]};
                students = ClassroomUtils.getCurrentStudents(option);
                //进行数据统计
                if(data && data.type == 'exam' && data.value) {

                    students = ClassroomUtils.getCurrentStudents(option);
					console.log('[ClassroomSummary]ClassroomSummary事件exam类型拿到学生数据:'+JSON.stringify(students));
                   
                    //基础题型重构之后，数据进行兼容
                     
                     var questionAnswers = data.value["answers"];
                     
                    if(questionAnswers.length > 0) {
                        var answer0 = data.value["answers"][0]["answer"];
                        if ((typeof answer0) == "string") {
                            $.each(questionAnswers, function(index, value) {
                                var ansData =  JSON.parse(questionAnswers[index]["answer"]);

                                if (!ansData["RESPONSE_1-1"] || data.value["flag"] == "image") {
                                    var userData = {};
//                                  $.each(ansData["user_response"], function(id, v) {
//                                      var resKey = "RESPONSE_1-" + (id +1);
//                                      userData[resKey] = ansData["user_response"][id][resKey];
//                                  });
                                    for (var resKey in ansData["user_response"][0]) {
                                    	//var resKey = "RESPONSE_1-" + (id +1);
                                        userData[resKey] = ansData["user_response"][0][resKey];
                                    }
                                    data.value["answers"][index]["answer"] = JSON.stringify(userData);  
                                }     
                            });
                        } else if ((typeof answer0) == "object") {
                            $.each(questionAnswers, function(index, value) {
                               
                                if (!ansData["RESPONSE_1-1"] || data.value["flag"] == "image") {
                                    var userData = {};
//                                  $.each(ansData["user_response"], function(id, v) {
//                                      var resKey = "RESPONSE_1-" + (id +1);
//                                      userData[resKey] = ansData["user_response"][id][resKey];
//                                  });
                                    for (var resKey in ansData["user_response"][0]) {
                                    	//var resKey = "RESPONSE_1-" + (id +1);
                                        userData[resKey] = ansData["user_response"][0][resKey];
                                    }
                                    data.value["answers"][index]["answer"] = JSON.stringify(userData);  
                                }     
                            });
                        }
                        
                    }

                   AnswerDataHandle.update(data);
                }

                //送花统计 superman
                if (data && data.type == 'flower') {
                    console.log('[ClassroomSummary]ClassroomSummary事件flower类型:'+JSON.stringify(data));
                    flowerStatisticData = data;

                    statisticFlowers.render(flowerStatisticData);
                }

                //显示课堂总结
                if(data && data.type == 'show') {
                	console.log('[ClassroomSummary]ClassroomSummary事件show类型:'+JSON.stringify(data));
                    ClassroomInfo.init(true);
                    data = null;
                }

            });
        }
    }

    //初始化用户数据和花名册数据
    presenter.initClassroomInfo = function(){
        var totalNum = 0;

        if(!isWeb && !isStudent) {
            //获取花名册信息
            //修复bug#45460
            /*var option = {'order' : [{orderProperty:'seatNumberValue', orderType : 'asc'},{orderProperty:'studentNo', orderType : 'asc'}]};
            var students = ClassroomUtils.getCurrentStudents(option);*/
            if(students) {
                totalNum = students.length;
                for(var i = 0; i < totalNum; i++) {
                    var info = {
                        'stu_id' : students[i]['studentId'],
                        'stu_num': students[i]['studentNo'],
                        'stu_name': students[i]['studentName'],
                        'icon'    : students[i]['headIcon'],
                        'is_online': students[i]['onlineStatus'] ? 1 : 0,
                        'score': 0,
                        'right_rate' : 0
                    };
                    stuInfos[students[i]['studentId']] = info;

                    var stat = {
                        stu_id : students[i]['studentId'],
                        right_num : 0,      //答对题数
                        wrong_num : 0,      //答错题数
                        not_do_num : 0,     //未答题数
                        right_rate : 0      //正确率
                    };
                    stuStatList.push(stat);
                }

                res = null;
            }

            //获取课堂信息
            var res = callNative('getLessonInfo', {});
            if(res) {
                classroomBaseInfo = {
                    lesson_id: res['lessonId'], // 课堂ID，每次上课都会重新生成，中间奔溃再次进入保持一致
                    subject_id: res['subjectId'], //学科ID
                    subject_name: res['subjectName'], //学科名称
                    grade_name: res['gradeName'], //年级名称
                    class_id: res['classId'], //班级名称
                    class_name: res['className'], //班级名称
                    teacher_name: res['teacherName'], //老师名称
                    teacher_id : res['teacherId'], //老师名称
                    courseware_id : res['coursewareId'], //课件ID
                    courseware_name: res['coursewareName'], //课件名称
                    startLessonTime: res['startLessonTime'], //开始时间戳
                    stu_nums: totalNum, //班级人数
                    interaction_time: res['interactionTime'], //互动时间分钟
                    class_time: 0, //上课时间分钟
                    questions_num: 0, //练习题数
                    total_score: 100, //练习总分
                    avg_score: 0, //练习平均分
                    stu_avg_score : 0, //学生平均分
                    right_rate: 0 //平均正确率
                };

                //如果课件名称过长的话，就进行截断加省略号
                classroomBaseInfo['origin_courseware_name'] = classroomBaseInfo['courseware_name']?classroomBaseInfo['courseware_name']:"";
                if(classroomBaseInfo['origin_courseware_name']){
                    classroomBaseInfo['courseware_name'] = classroomBaseInfo['origin_courseware_name'].length > 18
                        ? classroomBaseInfo['origin_courseware_name'].substr(0, 18) + '...'
                        : classroomBaseInfo['origin_courseware_name'];
                }
            }
        }
    };

    //同步持久化的数据
    presenter.syncData = function(){
        if(isWeb || isStudent) {
            return false;
        }

        //获取学生作答信息
        var opType = 'query';
        var opParam = {
            query_type : 'list',
            filter : {
                data_id : presenter.answer_key,
                data_type : PersistDataType['stu_ans_list']
            }
        };

        var res = ClassroomUtils.persist(opType, opParam);
        if (res.data && res.data.result && res.data.data && res.data.data[0]) {
            //恢复学生答题数据
            var data = res.data.data[0]['data'];
            data = JSON.parse(data);

            // wth添加
            classroomBaseInfo['userLen'] = data.stuStatList?data.stuStatList.length:0;
            classroomBaseInfo['unfinishedNum'] = 0;

            var tmpInfo         = data['stuInfos'] || {};

            //学生分数等信息
            $.each(stuInfos, function(k, v){
                if(tmpInfo[k]) {
                    v.score = tmpInfo[k]['score'];
                    v.right_rate = tmpInfo[k]['right_rate'];
                }
            });

            tmpInfo = null;

            //学生统计数据
            if(data['stuStatList']) {
                stuStatList     = data['stuStatList'];
            }

            //学生答题数据
            if(data['stuQuestionList']) {
                //stuQuestionList = data['stuQuestionList'];

                //将用户数据保存到sessionStorage
                StudentAnswerHandle.save(data['stuQuestionList']);
            }
        }

        //获取课堂统计信息
        opType = 'query';
        opParam = {
            query_type : 'list',
            filter : {
                data_id : presenter.classroom_key,
                data_type : PersistDataType['class_summary']
            }
        };

        var res = ClassroomUtils.persist(opType, opParam);
        if (res.data && res.data.result && res.data.data && res.data.data[0]) {
            //课堂数据
            var data = res.data.data[0]['data'];
            data = JSON.parse(data);
            console.log("状态恢复",data);
            

            var baseInfo = data['classroomBaseInfo'];
            if(baseInfo){
                classroomBaseInfo['questions_num']      = baseInfo['questions_num']?baseInfo['questions_num']:0;
                classroomBaseInfo['total_score']        = baseInfo['total_score']?baseInfo['total_score']:0;
                classroomBaseInfo['avg_score']          = baseInfo['avg_score']?baseInfo['avg_score']:0;
                classroomBaseInfo['right_rate']         = baseInfo['right_rate']?baseInfo['right_rate']:0;
                baseInfo = null;
            }


            //题目信息
            if(data['questionInfos']) {
                questionInfos = data['questionInfos'];
            }

            //题目列表信息
            if( data['questionList']) {
                questionList = data['questionList'];
            }

        }
    };

    /**
     * 编辑环境下, 创建/刷新预览视图的方法;
     * Module在编辑环境下,model改变; 位置改变; DOM结构改变时都会促发该方法
     * @param view 预览视图(DOM对象)
     * @param model Module的模型, Key-Value结构
     */
    presenter.createPreview = function (view, model) {
        //Todo: 在此处一般进行model的数据有效性验证
        presenterLogic(view, model, true);
    };

    presenter.setPlayerController = function (controller) {
        presenter.controller = controller;
        presenter.eventBus = presenter.controller.getEventBus();
        //presenter.eventBus.addEventListener('TriggerUserInput', presenter);
        //presenter.eventBus.addEventListener('ClassroomSummary', presenter);
    };

    /**
     * 监听H5发送过来的事件
     *
     */
    presenter.onEventReceived = function (eventName, eventData) {
        // if (eventName === "TriggerUserInput") {
        //     //处理投影端事件
        //     presenter.triggerUserInput(eventData);
        // }

        //处理统计数据
        // if (eventName === 'ClassroomSummary' && eventData && eventData.value) {
        //     AnswerDataHandle.udpate(eventData);
        // }
    }

    //具体处理投影端事件
    presenter.triggerUserInput = function(eventData){
        var value   = eventData.value;
        var type    = eventData.type;
        var item    = eventData.item;

        switch (type) {
            //显示花名册
            case "show_sheets":
              ClassroomInfo.showSheets(true);
              break;
            //显示首页
            case "show_index" :
              ClassroomInfo.show(true);
              break;
            default:
              break;
        }
    };

    /**
     * 运行环境下, 初始化Module的方法
     * @param view 运行视图(DOM对象)
     * @param model Module的模型, Key-Value结构
     * @remark 该方法为Module生命周期方法,仅在Module初始化时执行一次
     */
    presenter.run = function (view, model) {
        setI18n(presenter.i18nProperties, view);
        presenterLogic(view, model, false);
        //绑定Module事件
        bindEvent();
    };
    presenter.setUrlParams = function(params){
        this.urlParams = params;
    };

    //国际化处理
    presenter.setLocationProperties = function (properties) {
        presenter.i18nProperties = properties;
    };

    function setI18n(model,view){
        ko.applyBindings(model,view);
    }
    /**
     * 运行环境下, 销毁Module时执行的方法
     * @remark 该方法为Module生命周期方法, 仅在ICPlayer切换页面时执行
     */
    presenter.destroy = function () {

        //解除绑定的Module事件
        unBindEvent();

        //ToDo:释放Module占用的内存对象
        classroomBaseInfo = null;
        mockClassroomBaseInfo = null;

        questionInfos = null;
        questionList = null;

        stuInfos = null;
        mockStuInfos = null;

        stuStatList = null;
        mockStuStatList = null;

        //stuQuestionList = null;
        mockData = null;

        classroomViewModel = null;
        StudentInfoModel = null;
        QuestionInfoModel = null;
    };

    /**
     * 获得当前Module的状态信息;
     * 可用于Module的状态恢复和保存
     */
    presenter.getState = function () {
        //: 添加符合Module需求的状态对象
        return '';
    };

    /**
     * 设置Module当前状态
     * @param state Module状态对象
     */
    presenter.setState = function (state) {
        return false;

        var currentState;
        if (state) {
            currentState = JSON.parse(state);
            //ToDo:处理Module的状态恢复
        }
    };

    /**
     * 绑定事件的方法
     */
    function bindEvent() {

    }

    /**
     * 解除事件绑定的方法
     */
    function unBindEvent() {
        //首页事件
        ClassroomInfo.unbindEvent();
        QuestionInfo.unbindEvent();
        StudentInfo.unbindEvent();
        classQuestionDetail.unbindEvent();
    }

    /**
     * 实现Module多语言适配的方法, 如Module存在i18n的支持, 请务必实现此方法
     * icplayer会加载当前i18n的配置信息,并通过location参数传入
     * @param location 表示当前语言环境的配置信息, 为JSON数组的键值对
     *!/
     presenter.setLocationProperties = function (location) {
    };*/

    /*---------------------班级总结实例----------------------*/  //superman1
    //习题统计 - 答题总览
    var ClassroomInfo = (function () {
        //返回实例
        var Obj = {
            //初始化
            'init': function (needUpdate) {
                var self = this;

                //如果是测试环境的话
                if(isWeb) {
                    self.mockDataIn();
                } else {//debugger;
                    //为了处理没有答题直接进入课堂总结的问题
                    AnswerDataHandle.handleAllData();

                    //根据之前的统计数据，做最后的处理
                    // wth注释
                    //self.preHandleData();

                    //首次进来才注册事件
                    if(!classroomViewModel) {

                        //注册事件
                        self.bindEvent();

                        //历史折线图绑定事件
                        StudentHistory.init();

                        //问题详情页事件绑定
                        QuestionInfo.bindEvent();

                        //详情页数据绑定
                        classQuestionDetail.init();

                        //送花统计页面数据绑定 superman
                        statisticFlowers.init();

                        //  wth添加
                        $(presenter.$view).find('.sy_le-close').show();
                        $(presenter.$view).find('.com_back_course').show();

                        
                        $(presenter.$view).find('._classroom_summary_container').show();
                        self._resetPresentersStyle(presenter.$view);
                        classQuestionDetail.show();

                        //学生详情页事件绑定
                        StudentInfo.bindEvent();
                    }

                    //更新页面数据
                    //  wth注释
                    //self.show(needUpdate);

                    //隐藏"退出课堂"按钮
                    setExitBtn(false);
                    
                    //hsm注释  如果没有习题，不显示习题统计的标签页，只显示送花统计。TQD67289 新需求
					if(questionList.length !== 0) {
						presenter.$view.find('.sy_tab_list').removeClass('sy_tab_list_single');
					} else {
						presenter.$view.find('.sy_tab_list .tab_r').trigger('click');
						presenter.$view.find('.sy_tab_list').addClass('sy_tab_list_single');
					}
                }
            },

            //UI自适应
             '_resetPresentersStyle': function(view) {
                   var $view = $(view).find(".exam_classroom_diolag");
                    function winSize(view) {
                        return {
                            width: $(view).width(),
                            height: $(view).height()
                        }
                    }
                    var t = $(view)[0],
                        e = 1920,
                        n = 1080,
                        i = 24,
                        o = function (view) {
                            var o = winSize(view),
                                d = 0,
                                h = o.width,
                                c = o.height;
                            o.width / o.height <= e / n ? (d = o.width / e * i, h = o.width < e ? o.width : e, c = n * h / e, o.height > c) : (d = o.height / n * i, c = o.height < n ? o.height : n, h = e * c / n);
                            return d;
                        };
                    var d = o($view);
                    //this.$view.find('.layout_footbar').css("font-size", d + "px");
                    $view.css("font-size", d + "px");
            },

            //将数据做最后的处理，根据当前的题目数量，计算每题得分之类
            'preHandleData' : function(){
                //获取互动时间
                var res = callNative('getLessonInfo', {});
                if(res) {
                    var interaction_time = parseFloat((res['interactionTime']/60).toFixed(1));
                    classroomBaseInfo.interaction_time = interaction_time;
                    classroomBaseInfo.startLessonTime  = res.startLessonTime;
                }

                //获取总的练习时间
                var tmpTime = new Date().valueOf();
                var classTime = parseFloat((((tmpTime - classroomBaseInfo.startLessonTime * 1000) / 1000) / 60).toFixed(2));
                classroomBaseInfo.class_time = classTime;

                if(!isWeb && !isStudent) {
                    //重新获取花名册
                    //修复bug#45460
                    /*var option = {'order' : [{orderProperty:'seatNumberValue', orderType : 'asc'},{orderProperty:'studentNo', orderType : 'asc'}]};
                    var students = ClassroomUtils.getCurrentStudents(option);*/
                    console.log("11---->",students);

                    if(students) {
                        totalNum = students.length;

                        //花名册数据处理
                        var onlineArr = [];
                        var offlineArr = [];

                        for(var i = 0; i < totalNum; i++) {
                            stuInfos[students[i]['studentId']]['is_online'] = students[i]['onlineStatus'] ? 1 : 0;

                            if(stuInfos[students[i]['studentId']].is_online == 1) {
                                onlineArr.push(stuInfos[students[i]['studentId']]);
                            } else {
                                offlineArr.push(stuInfos[students[i]['studentId']]);
                            }
                        }

                        sheetsTmp = onlineArr.concat(offlineArr);

                        res = null;
                    }
                } else {
                    //花名册数据处理
                    var onlineArr = [];
                    var offlineArr = [];

                    $.each(stuInfos, function(k, v){
                        if(v.is_online == 1) {
                            onlineArr.push(v);
                        } else {
                            offlineArr.push(v);
                        }
                    });

                    sheetsTmp = onlineArr.concat(offlineArr);
                }

                //生成花名册界面
                var len = sheetsTmp.length;
                var html = '';
                for(var i = 0; i < len; i++) {
                    var cls = sheetsTmp[i]['is_online'] == 1 ? '' : 'icon_mask';

                    var tmp = '<li>';
                    tmp += '<a href="javascript:;" class="sheets_info_detail" stu_id="'+ sheetsTmp[i]['stu_id'] +'">';
                    tmp += '<img class="stuhead" src="'+ sheetsTmp[i]['icon']  +'">';
                    tmp += '<p class="'+ cls +'"></p>';
                    tmp += '<p class="stuname">'+ sheetsTmp[i]['stu_name'] +'</p>';
                    tmp += '</a>';
                    tmp += '</li>';

                    html += tmp;
                }

                $(presenter.$view).find('.students_sheets .stulist').html(html);
                html = null;
            },

            //测试环境的入口
            'mockDataIn' : function(){
                var self = this;

                //测试使用，需要等基础题型载入后才开始
                setTimeout(function () {
                    //模拟循环解析数据
                    for (var i = 0; i < mockData.length; i++) {
                        var eventData = mockData[i];
                         eventData = JSON.parse(eventData);

                        AnswerDataHandle.update(eventData);
                    }

                    //根据之前的统计数据，做最后的处理
                    self.preHandleData();

                    //更新页面数据
                    // wth注释
                    //self.show(true);

                    //注册事件
                    self.bindEvent();

                    //历史折线图绑定事件
                    StudentHistory.init();

                    //问题详情页事件绑定
                    QuestionInfo.bindEvent();

                    //详情页数据绑定
                    classQuestionDetail.init();

                    //送花统计页面数据绑定 superman
                    statisticFlowers.init();


                    // wth添加
                    $(presenter.$view).find('.com_back_course').show();
                    $(presenter.$view).find('._classroom_summary_container').show();
                    classQuestionDetail.show();

                    //学生详情页事件绑定
                    StudentInfo.bindEvent();

                }, 300);
            },

            //设置模拟数据
            'setMockData' : function(){
                //模拟课堂数据
                classroomBaseInfo = mockClassroomBaseInfo;

                //如果课件名称过长的话，就进行截断加省略号
                classroomBaseInfo['origin_courseware_name'] = classroomBaseInfo['courseware_name']?classroomBaseInfo['courseware_name']:"";
                if(classroomBaseInfo['courseware_name']){
                    classroomBaseInfo['courseware_name'] = classroomBaseInfo['courseware_name'].length > 18
                        ? classroomBaseInfo['courseware_name'].substr(0, 18) + '...'
                        : classroomBaseInfo['courseware_name'];
                }

                //模拟用户数据
                stuInfos = mockStuInfos;

                //模拟用户统计数据
                stuStatList = mockStuStatList;

                //设置模拟的历史数据
                studentLineTestData = mockStudentLineTestData;
            },

            //显示视图,将统计数据显示处理
            'show' : function(needUpdate){

                if(!classroomViewModel) {
                    this.showBaseData();

                    classroomViewModel = true;
                }
//debugger;
                //如果需要更新视图
                if(needUpdate) {

                    var numList = [];
                    var preCharList = [];

                    //在学生统计数据中加入姓名和学号
                    for(var i = 0; i < stuStatList.length; i++) {
                        var stuId = stuStatList[i]['stu_id'];
                        stuStatList[i]['stu_name'] = stuInfos[stuId]['stu_name'];
                        stuStatList[i]['stu_num'] = stuInfos[stuId]['stu_num'];
                        stuStatList[i]['score'] = stuInfos[stuId]['score'];

                        if($.isNumeric(stuStatList[i]['stu_num'])){
                            numList.push(stuStatList[i]);
                        }else{
                            preCharList.push(stuStatList[i]);
                        }
                    }

                    // wth注释
                    //给学生数据添加排序和名次
                    /*stuStatList.sort(function(a, b){
                        //return a.score - b.score;
                        return a.stu_num.localeCompare(b.stu_num);
                    });*/

                    // wth添加 先排字母开头的
                    if(numList.length > 0){
                        numList.sort(function(a, b){
                            return a.stu_num- b.stu_num;
                        });
                    }
                    if(preCharList.length > 0){
                        preCharList.sort(function(a, b){
                            return (a.stu_num+"").localeCompare(b.stu_num+"");
                        });
                    }
                    stuStatList = preCharList.concat(numList);


                    //将有回答问题但是得分为0的学生往后排
                    /*var haveScore = [];
                    var haveWrong = [];
                    var noAnswer = [];

                    for(var i = 0; i < stuStatList.length; i++) {
                        var tmp = stuStatList[i];
                        if(tmp.score == 0) {
                            if(tmp.wrong_num != 0) {
                                haveWrong.push(tmp);
                            } else {
                                noAnswer.push(tmp);
                            }
                        } else {
                            haveScore.push(tmp);
                        }
                    }

                    var a1 = noAnswer.concat(haveWrong);
                    var res = a1.concat(haveScore);
                    stuStatList = res;

                    stuStatList.reverse();*/

                    var len = stuStatList.length;
                    var rank = 1, tmpRank = 1;
                    for(var i = len; i > 0; i--) {
                        //如果分数一致，学生排名一样
                        if(stuStatList[i]) {
                            if(stuStatList[i]['score'] == stuStatList[i - 1]['score']) {
                                stuStatList[i - 1]['rank'] = tmpRank;
                            } else {
                                tmpRank = rank;
                                stuStatList[i - 1]['rank'] = tmpRank;
                            }
                        } else {
                            stuStatList[i - 1]['rank'] = tmpRank;
                        }

                        rank += 1;
                    }
                    this.showChangeData();

                    //将名次的方向初始化
                    $(presenter.$view).find('.students_ranking').html('<span>'+presenter.i18nProperties['the_ranking']+'</span>↓').attr('rank', 'desc')
                }

                //显示视图
                $(presenter.$view).find('._classroom_summary_container').show();
                //$(presenter.$view).find('.com_back_course').show();
                //$(presenter.$view).find('.all_page_class').hide();
                //$(presenter.$view).find('.cls_summary_container').show();//答题-

                //this.showStuDetail();

                this.showNewStuDetail();
            },

            //显示学生课堂表现明细
           'showStuDetail' : function(){
                var html = '';

                var len = stuStatList.length;
                for(var i = 0; i < len; i++) {
                    var tmp = '';
                    var data = stuStatList[i];

                    var dataInfo = stuInfos[data.stu_id];

                    var cls1 = data.score < 60 ? 'color_red' : 'color_green';
                    var cls2 = data.right_rate < 0.6 ? 'color_red' : 'color_green';

                    tmp += '<tr>';
                    tmp += '<td class="color_grey6" style="width: 20%">'+ dataInfo.stu_num +'</td>';
                    tmp += '<td data-bind="text:$data.stu_name">'+ dataInfo.stu_name +'</td>';
                    tmp += '<td class="'+ cls1 +'">'+ data.score +'</td>';
                    tmp += '<td class="'+ cls2 +'"><em>'+ (data.right_rate * 100).toFixed(1) +'</em>%</td>';
                    tmp += '<td data-bind="text:$data.right_num">'+ data.right_num +'</td>';
                    tmp += '<td data-bind="text:$data.wrong_num">'+ data.wrong_num +'</td>';
                    tmp += '<td data-bind="text:$data.not_do_num">'+ data.not_do_num +'</td>';
                    /*tmp += '<td data-bind="text:$data.rank">'+ data.rank +'</td>';
                    tmp += '<td class="enter"><a href="javascript:;" stu_id="'+ data.stu_id +'" class="btn_enter student_info_detail"></a></td>';*/

                    tmp += '</tr>';
                    html += tmp;
                }

                presenter.$view.find('.cls_show_stu_stats').html(html);
                html = null;

                //调整table_body高度
                resize_adpheight(presenter.$view.find('.cls_summary_container .table_body'));
            },

            //新UI课堂学生明显 superman
           'showNewStuDetail' : function(){
                var html = '';
				stuStatList.sort(function(a, b){
					if(b.score != a.score){
						return b.score - a.score;
					}else{
						return a.stu_id - b.stu_id;
					}
					
				});
                var len = stuStatList.length;
                for(var i = 0; i < len; i++) {
                    var tmp = '';
                    var data = stuStatList[i];

                    var dataInfo = stuInfos[data.stu_id];

                    var cls1 = data.score < 60 ? 's_warn' : '';
                    var cls2 = data.right_rate < 0.6 ? 's_warn' : '';
    
                    tmp += '<tr>';
                    tmp += '<td class="sno" width="20%">'+ dataInfo.stu_num +'</td>';
                    tmp += '<td width="12%">'+ dataInfo.stu_name +'</td>';
                    tmp += '<td width="15%" class="'+ cls1 +'">'+ data.score +'</td>';
                    tmp += '<td width="15%" class="'+ cls2 +'">'+ (data.right_rate * 100).toFixed(1) +'%</td>';
                    tmp += '<td width="12%">'+ data.right_num +'</td>';
                    tmp += '<td width="12%">'+ data.wrong_num +'</td>';
                    tmp += '<td>'+ data.not_do_num +'</td>';
            
                    tmp += '</tr>';
                    html += tmp;
                }

                presenter.$view.find('.sy_total .table_body table tbody').html(html);
                html = null;             
            },

            //显示变动的数据
            'showChangeData' : function(){
                classroomBaseInfo['time_rate'] = classroomBaseInfo['class_time'] == 0 ? 0 : (100* (classroomBaseInfo['interaction_time'] / classroomBaseInfo['class_time'])).toFixed(1);

                var tmp = presenter.$view.find('.cls_summary_container');
                $(tmp).find('.questions_num').html(classroomBaseInfo.questions_num);
                $(tmp).find('.interaction_time').html(classroomBaseInfo.interaction_time);
                $(tmp).find('.class_time').html(classroomBaseInfo.class_time);
                $(tmp).find('.stu_avg_score').html(classroomBaseInfo.stu_avg_score);
                if(classroomBaseInfo.stu_avg_score>=60){
                    $(tmp).find('.stu_avg_score').css({"color":"green"});
                }else{
                    $(tmp).find('.stu_avg_score').css({"color":"red"});
                }
                $(tmp).find('.time_rate').html(classroomBaseInfo.time_rate);
                $(tmp).find('.right_rate').html(classroomBaseInfo.right_rate);
            },

            //显示不会变动的数据
            'showBaseData' : function(){
                var tmp = presenter.$view.find('.cls_summary_container');

                var startLessonTime = this.stampParse(classroomBaseInfo['startLessonTime']);

                //$(tmp).find('.courseware_name').html(classroomBaseInfo.courseware_name);
                $(tmp).find('.stu_nums').html(classroomBaseInfo.stu_nums);
                $(tmp).find('.teacher_name').html(classroomBaseInfo.teacher_name);
                $(tmp).find('.class_name').html(classroomBaseInfo.grade_name + classroomBaseInfo.class_name);
                $(tmp).find('.startLessonTime').html(startLessonTime);
                $(tmp).find('.subject_name').html(classroomBaseInfo.subject_name);
            },

            //显示花名册
            'showSheets' : function(){
                $(presenter.$view).find('.all_page_class').hide();
                $(presenter.$view).find('.students_sheets').show();
            },

            //隐藏花名册
            'hideSheets' : function(){
                $(presenter.$view).find('.students_sheets').hide();
            },

            //隐藏视图
            'hide': function () {
                //$(presenter.$view).find('.cls_summary_container').hide();
            },

            //绑定事件
            'bindEvent': function () {
                var self = this;

                //绑定事件
                $(presenter.$view).on('click', '.cls_summary_container .student_info_summary', function(){
                    //进入花名册
                    self.showSheets();
                });

                $(presenter.$view).on('click', '.cls_summary_container .question_list_detail', function(){
                    self.hide();
                    self.hideSheets();
                    //列表页
                    classQuestionDetail.show();
                });

                $(presenter.$view).on('click', '.cls_summary_container .student_info_detail', function(){
                    var stuId = $(this).attr('stu_id');

                    self.hideSheets();
                    self.hide();
                    StudentInfo.init(stuId);
                });

                //绑定返回班级课堂总结
                $(presenter.$view).on('click', '.students_sheets .go_back_classroom', function(){
                    self.show();
                });

                $(presenter.$view).on('click', '.students_sheets .sheets_info_detail', function(){
                    var stuId = $(this).attr('stu_id');

                    self.hideSheets();
                    StudentInfo.init(stuId);
                });

                //排序处理
                $(presenter.$view).on('click', '.students_ranking', function(){
                    var rank = $(this).attr('rank');

                    if(rank == 'desc') {
                        //数据做升序处理
                        stuStatList.reverse();

                        rank = 'asc';
                    } else {
                        //数据做倒序处理
                        stuStatList.reverse();

                        rank = 'desc';
                    }

                    //显示数据
                    self.showStuDetail();

                    //设置当前状态
                    $(this).attr('rank', rank)
                    if(rank == 'asc') {
                        $(this).html('<span>'+presenter.i18nProperties['the_ranking']+'</span>↑');
                    } else {
                        $(this).html('<span>'+presenter.i18nProperties['the_ranking']+'</span>↓');
                    }
                });

                //注册退出按钮 superman
                // $(presenter.$view).on('click', '.com_back_course', function(){
                $(presenter.$view).off('click', '.sy_le-close').on('click', '.sy_le-close', function(){
                      
                    //隐藏主页面
                    $(presenter.$view).find('.exam_classroom_diolag').hide();

                    //将退出按钮隐藏
                    $(this).hide();

                    //修复bug: 57472
                    $(presenter.$view).find('._question_content').addClass("on").siblings().removeClass('on');
                    $(presenter.$view).find('.sy_detail').show();
                    $(presenter.$view).find('.sy_total').hide();

                    $(presenter.$view).find('.sy_tab_list .tab_l').addClass("on").siblings().removeClass('on');
                    $(presenter.$view).find('._sy_tab_question').show();
                    $(presenter.$view).find('.sy_tab_flower').hide();


                    //显示"退出课堂"按钮
                    //setExitBtn(true);
                    callNative("classroomSummaryExit",{});//点击返回，发送通知
                    classroomViewModel = null;
                });

                //设置页面滚动收缩
                var isfixed = false;

                $(presenter.$view).find('.cls_summary_container .table_body').on('scroll', function(){
                    if($(presenter.$view).find(".cls_summary_container .table_body").scrollTop() > 0 ){
                        if(isfixed){
                            return;
                        }
                        isfixed = true;
                        $(presenter.$view).find('.cls_summary_container .sumwrap').addClass('s_scrolldown');
                        resize_adpheight($(presenter.$view).find('.cls_summary_container .table_body'));
                    } else {
                        if(!isfixed){
                            return;
                        }
                        isfixed = false;
                        $(presenter.$view).find('.cls_summary_container .sumwrap').removeClass('s_scrolldown');
                        resize_adpheight($(presenter.$view).find('.cls_summary_container .table_body'));
                    }
                });

                $(presenter.$view).on('click', '.cls_summary_container .btn_unfold', function(){
                    $(presenter.$view).find('.cls_summary_container .sumwrap').removeClass('s_scrolldown');
                    resize_adpheight($(presenter.$view).find('.cls_summary_container .table_body'));
                    $(presenter.$view).find(".cls_summary_container .table_body").scrollTop(0);
                });
            },

            //日期转换
            'stampParse' : function(timestamp){
                timestamp = parseInt(timestamp);

                var date = new Date(timestamp * 1000);
                var Y = date.getFullYear();
                    M = (date.getMonth() + 1 < 10 ? '0' + (date.getMonth() + 1) : date.getMonth() + 1);
                    D = date.getDate();
                    h = date.getHours() < 10  ? '0' + date.getHours() : date.getHours();
                    m = date.getMinutes() < 10 ? '0' + date.getMinutes() : date.getMinutes() ;

                var res = Y + '-' + M + '-' + D + ' ' + h  + ':' + m;
                return res;
            },

            //解绑事件
            'unbindEvent': function () {
                $(presenter.$view).off('click', '.cls_summary_container .student_info_summary');
                $(presenter.$view).off('click', '.cls_summary_container .question_list_detail');
                $(presenter.$view).off('click', '.cls_summary_container .student_info_detail');
                $(presenter.$view).off('click', '.students_sheets .go_back_classroom');
                $(presenter.$view).off('click', '.students_sheets .sheets_info_detail');
                $(presenter.$view).off('click', '.cls_summary_container .students_ranking');
                 $(presenter.$view).off('click', '.sy_le-close');
            },

            //释放资源
            'destroy': function () {

            }
        };
        return Obj;
    })();
    /*---------------------/班级总结实例----------------------*/


    /*---------------------学生个人实例----------------------*/
    var StudentInfo = (function () {
        //返回实例
        var Obj = {
            //初始化
            'init': function (stuid) {
                this.showSingelinfo(stuid);
                this.show();
                var orderInfo = this.getUrls(stuid || '2107293352');
                this.getQuestionInfo(orderInfo);
            },

            //学生个人页面头部题目信息
            'showSingelinfo': function(stuid) {
                var studentView = $(presenter.$view).find('.single_person_container');
                var courseware_name = presenter.i18nProperties['personal_summary'] + classroomBaseInfo.courseware_name;
                var gradClass_name = classroomBaseInfo.grade_name + classroomBaseInfo.class_name;
                var time = ClassroomInfo.stampParse(classroomBaseInfo.startLessonTime);
                var stu_id = stuInfos[stuid].stu_id;//ID
                var stu_name = stuInfos[stuid].stu_name;
                var stu_num = stuInfos[stuid].stu_num;//学号
                var test_score = stuInfos[stuid].score;
                var teacher_name = classroomBaseInfo.teacher_name;
                var subject_name = classroomBaseInfo.subject_name;
                var questions_num = classroomBaseInfo.questions_num;
                var right_rate = stuInfos[stuid].right_rate.toPercent(2);

                $(studentView).find('.courseware_name').html(courseware_name);//课件名称
                $(studentView).find('.stu_name').html(stu_name);//学生姓名
                $(studentView).find('.subject_name').html(subject_name);//科目
                $(studentView).find('.stu_num').html(stu_num);//学号
                $(studentView).find('.questions_num').html(questions_num);//练习题数
                $(studentView).find('.teacher_name').html(teacher_name);//老师名字
                $(studentView).find('.gradClass_name').html(gradClass_name);//年级班级名称
                $(studentView).find('.test_score').html(test_score);//学生练习得分
                $(studentView).find('.time').html(time);//上课时间
                $(studentView).find('.right_rate').html(right_rate);//学生正确率
                $(studentView).find('.stuId').attr('data-index', stu_id);
            },

            //统计题目urls以及得分信息
            'getUrls': function(stuid) {
                var orderArrayCorrect=[];
                var orderArrayWrong=[];
                //var stuQuesList = stuQuestionList[stuid];
                var stuQuesList = StudentAnswerHandle.get(stuid);

                for (value in stuQuesList) {
                    var order ={};

                    order.question_url = stuQuesList[value].question_url;
                    order.index = questionInfos[value].index;
                    order.right_answer = questionInfos[value].right_answer;
                    order.answers = stuQuesList[value].question_answer;
                    order.is_right = stuQuesList[value].is_right;
                    order.correct_radio = questionInfos[value].right_rate;
                    if (!stuQuesList[value].is_right)
                        orderArrayWrong.push(order);
                    else orderArrayCorrect.push(order);
                }
                orderArrayWrong = orderArrayWrong.concat(orderArrayCorrect);//题目按照错误在先，正确在后顺序排序
                return orderArrayWrong;
            },
            //题目作答信息
            'getQuestionInfo' : function(orderInfo) {
                var html='';
                var objhtml = presenter.$view.find('.single_person_container tbody');
                for (var i =0; i<orderInfo.length;i++) {
                    var index = orderInfo[i].index || 0;

                    var cls1 = orderInfo[i].correct_radio >= 0.6 ? 'color_green' : 'color_red';
                    var cls2 = orderInfo[i].is_right ? 'color_green' : 'color_red';

                    html += '<tr class="tit"><td>'+(i+1)+'</td><td id="timu" style="width: 70%"></td><td class="enter" rowspan="1"><a href="###" class="btn_enter" data-index="'+index+'"></a></td></tr>'+
                    '<tr class="s_answer">'+
                        '<td colspan="4">'+
                            '<ul class="sum_count detail clearfix">'+
                                '<li>'+presenter.i18nProperties['score_of_question']+classroomBaseInfo.avg_score+' '+presenter.i18nProperties['scores']+'</li>'+
                                '<li>'+presenter.i18nProperties['class_scored']+'：<em class="'+ cls1 +'">'+orderInfo[i].correct_radio.toPercent(1)+'</em></li>'+
                                '<li>'+presenter.i18nProperties['correct_answers']+'<em class="wordBreak">'+orderInfo[i].right_answer+'</em></li>'+
                                '<li>'+presenter.i18nProperties['do_respondence']+'：<em class="'+ cls2 +' wordBreak">'+orderInfo[i].answers+'</em></li>'+
                            '</ul>'+
                        '</td>'+
                    '</tr>';
                }
                objhtml.html(html);
                html = null;

                for (var index = 0; index < orderInfo.length; index++) {
                    var url = orderInfo[index].question_url;
                    var type = orderInfo[index].question_type;  //superman兼容 原来内容，现在不会用
                    var objInsert = presenter.$view.find('.single_person_container tbody .tit #timu').eq(index);
                     unloadTestContent(url, objInsert, type);
                }

                resize_adpheight($(presenter.$view).find('.single_person_container .table_body'));
            },

            //显示视图
            'show': function () {
                $(presenter.$view).find('.single_person_container').css('display', 'block');
                this.showDetail();
                StudentHistory.hide();
            },
            'showDetail': function() {
                $(presenter.$view).find('.students_answer_detail').show();

                //防止从折线图回来没有滚动栏的问题
                resize_adpheight($(presenter.$view).find('.single_person_container .table_body'));
            },
            'hideDetail': function() {
                $(presenter.$view).find('.students_answer_detail').hide();
            },
            //显示折线图
            'showLine': function(stuid) {
                $(presenter.$view).find('.single_person_container .show_line').css('display','block');
            },
            //显示做题信息
            'showQuenstion':function(){
                $(presenter.$view).find('.single_person_container .sumcon').css('display','block');
            },
            //隐藏视图
            'hide': function () {
                $(presenter.$view).find('.single_person_container').css('display', 'none');
            },

            //绑定事件
            'bindEvent': function () {
                var self = this;

                //设置页面滚动收缩
                var isfixed = false;

                //显示成绩折线图
                $(presenter.$view).off('click', '.single_person_container .students_history_data').on('click', '.single_person_container .students_history_data', function(){
                    var stu_id = $(this).attr('data-index');
                    // var stu_id = $(this).attr('stu_id');
                    StudentInfo.hideDetail();
                    //显示
                    StudentHistory.show(stu_id);

                    //如果从折线图跳回，要设置，要不然滚动没有效果
                    isfixed = false;
                });

                //选择其他同学
                $(presenter.$view).off('click', '.single_person_container .goto_students_sheets').on('click', '.single_person_container .goto_students_sheets', function(){
                    self.hide();
                    ClassroomInfo.showSheets();
                });

                //班级课堂总结
                $(presenter.$view).off('click', '.single_person_container .goback_classroom').on('click', '.single_person_container .goback_classroom', function(){
                    self.hide();
                    ClassroomInfo.show();
                });
                presenter.$view.off('click', '.single_person_container .btn_enter').on('click', '.single_person_container .btn_enter', function() {
                    var index = $(this).data("index");
                    //跳转到习题详情页
                    self.hide();

                    QuestionInfo.init(index);
                })

                $(presenter.$view).find('.single_person_container .table_body').off('scroll').on('scroll', function(){
                    //如果内部高度比外部高度小，就不做处理
                    var innerHeight = $(presenter.$view).find('.single_person_container .table_body table').height();
                    var outHeight = $(presenter.$view).find('.single_person_container .table_body').height();

                    if(innerHeight <= outHeight) {
                        return false;
                    }

                    if($(presenter.$view).find(".single_person_container .table_body").scrollTop() > 0 ){
                        if(isfixed){
                            return;
                        }
                        isfixed = true;
                        $(presenter.$view).find('.single_person_container .sumwrap').addClass('s_scrolldown');
                        resize_adpheight($(presenter.$view).find('.single_person_container .table_body'));
                    } else {
                        if(!isfixed){
                            return;
                        }
                        isfixed = false;
                        $(presenter.$view).find('.single_person_container .sumwrap').removeClass('s_scrolldown');
                        resize_adpheight($(presenter.$view).find('.single_person_container .table_body'));
                    }
                });

                $(presenter.$view).on('click', '.single_person_container .btn_unfold', function(){
                    $(presenter.$view).find('.single_person_container .sumwrap').removeClass('s_scrolldown');
                    resize_adpheight($(presenter.$view).find('.single_person_container .table_body'));
                    $(presenter.$view).find(".single_person_container .table_body").scrollTop(0);
                });
            },

            //解绑事件
            'unbindEvent': function () {
                $(presenter.$view).off('click', '.single_person_container .students_history_data');
                $(presenter.$view).off('click', '.single_person_container .goback_classroom');
                $(presenter.$view).off('click', '.single_person_container .btn_enter');
            },

            //释放资源
            'destroy': function () {

            }
        };
        return Obj;
    })();
    /*---------------------/学生个人实例----------------------*/

    //实现解析并渲染题目  superman兼容
    function unloadTestContent(url, obj, type) {
        function getQtiContainerId() {
            return 'ClassroomSummary' + presenter.__unqiueId;
        }

        var renderOption = {
            //渲染配置
            showHint: false,
            showLock: true,
            showMedia: false,
            showTitleArea: true,
            //showCorrectAnswer: true,
            randomSeed: [19, 14, 17, 2, 24, 16, 4, 21, 20, 5, 22, 11, 18, 13, 15, 7, 8, 28, 1, 0, 29, 10, 23, 12, 26, 25, 27, 3, 6, 9],
            //screenshotLayout: type //确定采用截图还是原来的试题渲染方式
            //hideAnswerArea:true
        };
        if (type) {////确定采用截图还是原来的试题渲染方式
        	renderOption.hideAnswerArea = true;
        }else{
        	renderOption.showCorrectAnswer = true;
        }
        var refPath = url.substring(0,url.lastIndexOf('/pages/'))+'/_ref';
        //初始化qtiplayer;
	    var qtiOption = {
	        //xml中表达式${ref-path}的实际值,默认值''
	        refPath: refPath
	    };
	    var qtiplayer = QtiPlayer.createPlayer(qtiOption);

        qtiplayer.load(url, function () {
            qtiplayer.render(obj, renderOption, function () {
                //console.log("finished");
            });
            // qtiplayer.getAssessmentModel().modelMap;
        });
    }

    //实现小数的百分制
    Number.prototype.toPercent = function (n) {
        n = n || 2;
        return ( Math.round(this * Math.pow(10, n + 2)) / Math.pow(10, n) ).toFixed(n) + '%';
    }

/*---------------------习题详情实例----------------------*/

    var QuestionInfo = (function () {  //superman
        //返回实例

        var Obj = {
            //初始化
            'init': function (index) {
                var testUrl = questionList[index].question_url;//获取题目url
                var mainUrl = testUrl.substring(0,testUrl.lastIndexOf("/")) + "/main.xml";
                var iframeUrl = window.location.pathname + "?main=" + mainUrl + "&classroomsummary_questionId=" + questionList[index].question_id+"&_lang_="+presenter.urlParams['_lang_']+"&isScreenShot="+questionList[index].question_type+"&hidePage=footer,toolbar";

                var wrap = presenter.$view.find(".see_detail_wrap");
                var $f = $($(wrap).find(">iframe"));

                var $wrap = $(wrap);

                $wrap.css("display","block");
                $f.attr("src",iframeUrl);

                var $close = $wrap.find(">.close_iframe");
                $close.off("click");
                $close.on("click",function(ev){
                    $f.attr("src","about:blank");
                    $f[0].contentWindow.document.write('');
                    $f[0].contentWindow.close();
                    $(this).parent().css("display","none");
                    Bridge.unRegisterListener('StatisticData',bridgeListenerKey["StatisticData"]);
                });

                Bridge.unRegisterListener('StatisticData',bridgeListenerKey["StatisticData"]);
                bridgeListenerKey["StatisticData"] = Bridge.registerListener('StatisticData', function(data){
                    if(window.localStorage){
                        var statisticData = {};
                        var tmp,str;
                        //修复bug#87511
                        if((typeof data) == "object"){//兼容pc端重构，data由原来的字符串变为对象
                            tmp = data;
                        }else{
                            tmp = JSON.parse(data);
                        }
                        tmp.value.correctFromClassSummary = questionList[index].right_answer;
                        str = JSON.stringify(tmp);
                        statisticData[questionList[index].question_id] = str;
                        localStorage.setItem("StatisticData",JSON.stringify(statisticData));
                    }
                });

                Bridge.callNative('com.nd.pad.icr.ui.IcrJsBridge', "getStatisticDataByPageId", {pageId:questionList[index].question_id});


                // 查看详情测试先注释
                /*var obj = presenter.$view.find('.single_dotest_container .timu');//题目渲染位置
                this.showTestInfo(index);
                this.show();
                this.preNext(index);
                this.showTextSelect(index);
                getStudentAnswer(index);
                unloadTestContent(testUrl, obj);
                showChartBar(index,'填空1');
                showChartPie(index);*/
            },

            //显示单题页面头部信息
            'showTestInfo': function (index) {
                var courseware_name = "单题作答详情-" + classroomBaseInfo.courseware_name;//课件名称
                var stu_nums = classroomBaseInfo.stu_nums;//班级人数
                var question_score = questionList[index].score;//题目分数
                var question_code = this.getQuestionType(questionList[index].question_code);//题目类型
                var question_donum = questionList[index].do_num;//题目作答人数
                var question_id = questionList[index].question_id;//题目id
                var queshow_id = parseInt(index) +1;
                var right_rate = questionInfos[question_id].right_rate.toPercent(2);
                var right_answer = questionInfos[question_id].right_answer;
                var studentView = $(presenter.$view).find('.single_dotest_container');

                $(studentView).find('.courseware_name').html(courseware_name);
                $(studentView).find('.queshow_id').html(queshow_id);
                $(studentView).find('.question_code').html(question_code);
                $(studentView).find('.question_score').html(question_score);
                $(studentView).find('.right_rate').html(right_rate);
                $(studentView).find('.right_answer').html(right_answer);
                $(studentView).find('.question_donum').html(question_donum);

                if (question_code == presenter.i18nProperties['text_fill_up_question'] || question_code == presenter.i18nProperties['judge_question']) {
                    $(studentView).find('.beizhu').hide();
                } else $(studentView).find('.beizhu').show();
            },

            //题型判断
            'getQuestionType':function(type){
                if(type == QuestionType.CHOICE)
                {
                    return presenter.i18nProperties['single_choice_question'];
                }else if(type == QuestionType.MULTIPLE_CHOICE){
                    return presenter.i18nProperties['mutiple_choice_question'];
                }else if(type == QuestionType.JUDGE){
                    return presenter.i18nProperties['judge_question'];
                }else if(type == QuestionType.TEXT_ENTRY){
                    return presenter.i18nProperties['text_fill_up_question'];
                }

                return presenter.i18nProperties['other_question'];
            },
            //上一题，下一题目样式、属性处理
            'preNext': function(index) {
                $(presenter.$view).find('.single_dotest_container .pre_question').attr('data-index', index);
                $(presenter.$view).find('.single_dotest_container .next_question').attr('data-index', index);
                if ( index == questionList.length-1) {
                    $(presenter.$view).find('.single_dotest_container .next_question').addClass("s_disabled");
                } else {
                    $(presenter.$view).find('.single_dotest_container .next_question').removeClass("s_disabled");
                }
                if ( index == 0) {
                    $(presenter.$view).find('.single_dotest_container .pre_question').addClass("s_disabled");
                } else {
                    $(presenter.$view).find('.single_dotest_container .pre_question').removeClass("s_disabled");
                }
            },
            //如果是填空题目，显示下拉框
            'showTextSelect': function(index){
                var question_code = questionList[index].question_code;
                var correctAnswer = questionList[index].right_answer;
                if (question_code == 'textentry') {
                    var obj = $(presenter.$view).find('.single_dotest_container .btn_select .text_num');
                    $(presenter.$view).find('.single_dotest_container .btn_select').attr("data-index",index);
                    var html = '';
                    for (var i=0; i< correctAnswer.length; i++) {
                        html += '<option  class="text_option"  style="width:300px">'+"填空"+(i+1)+'</option>';
                    }
                    obj.html(html);
                }
            },
            //显示视图
            'show': function (index) {
                 $(presenter.$view).find('.cls_summary_detail').hide();
                 $(presenter.$view).find('.single_person_container').hide();
                 $(presenter.$view).find('.single_dotest_container .btn_select').hide();//如果不是填空题，隐藏掉下拉列表
                $(presenter.$view).find('.single_dotest_container').css('display', 'block');
            },

            //隐藏视图
            'hide': function () {
                $(presenter.$view).find('.single_dotest_container').hide()
            },

            //绑定事件
            'bindEvent': function (index) {
                var self = this;
                //上一题
                $(presenter.$view).on('click', '.single_dotest_container .pre_question', function(){
                    var index = $(this).attr('data-index');
                    if(!index || index ==0) {
                        return false;
                    }
                    else index = parseInt(index)-1;
                    QuestionInfo.init(index);
                });
                //下一题
                $(presenter.$view).on('click', '.single_dotest_container .next_question', function(){
                    var index = $(this).attr('data-index');
                    if(!index || index == questionList.length-1) {
                        return false;
                    }
                    else index = parseInt(index) +1;
                    QuestionInfo.init(index);
                });
                //返回班级课堂总结
                $(presenter.$view).on('click', '.single_dotest_container .go_back_classroom', function(){
                    self.hide();
                    ClassroomInfo.show();
                });
                //进入个人页面
                $(presenter.$view).on('click', '.single_dotest_container .single_stu', function(){
                    var stuId = $(this).attr('data-stuid');
                    self.hide();
                    StudentInfo.init(stuId);
                });
                //填空题时，下拉列表处理
                $(presenter.$view).find('.single_dotest_container .btn_select .text_num').change(function(){
                    var id = $(this).val();
                    var index = $(presenter.$view).find('.single_dotest_container .btn_select').attr("data-index");
                    showChartBar(index,id);
                });

            },

            //解绑事件
            'unbindEvent': function () {
                $(presenter.$view).off('click', '.single_dotest_container .pre_question');
                $(presenter.$view).off('click', '.single_dotest_container .next_question');
                $(presenter.$view).off('click', '.single_dotest_container .go_back_classroom');
                $(presenter.$view).off('click', '.single_dotest_container .single_stu');
            },

            //释放资源
            'destroy': function () {

            }
        };
        return Obj;
    })();

    //实现柱状图
    function showChartBar(index,id) {
        var selectNumRiao;
        if (questionList[index].question_code=='choice'||'multiplechoice'||'judge') {
            selectNumRiao = selectStuNumChJ(index);
        }
        if (questionList[index].question_code=='textentry') {
            selectNumRiao = TextentryInfo(index)[id];
        }

        Highcharts.setOptions({
          colors: ['#C1232B','#B5C334','#6495ED','#4B0082','#2F4F4F','#FCCE10','#E87C25','#27727B','#DA70D6',
                                '#0000FF','#90EE90','#48D1CC','#696969','#00BFFF','#FFB6C1','#ADFF2F']
        });
        $(presenter.$view).find('#chartBar').highcharts({   //图表展示容器，与div的id保持一致
            chart: {
                backgroundColor: '#fbfbfb',
                type: 'column'                         //指定图表的类型，默认是折线图（line）
            },
            title: {
                text: null      //指定图表标题
            },
            tooltip: {
                    enabled: false
            },
            credits: {
                enabled: false
            },
            xAxis: {
                gridLineWidth: 1,
                title: {
                    align: 'high',
                    text: '选项'
                },
                categories: selectNumRiao[0]   //指定x轴分组
            },
            yAxis: {
                title: {
                    align: 'high',
                    text: '人数（人）'                  //指定y轴的标题
                }
            },
            plotOptions: {
                column: {
                    colorByPoint: true,
                    cursor: 'pointer',
                    dataLabels: {
                        enabled: true,
                        style: {
                            fontWeight: 'bold'
                        },
                        formatter: function() {
                            return this.y+'人'+'<br/>'+(this.y/selectNumRiao[2]).toPercent(2);
                        }
                    }
                }
            },
            series: [{
                animation: false,                               //指定数据列
                name: null,                          //数据列名
                data: selectNumRiao[1],
                showInLegend: false,
                tooltip: {
                    enabled: false
                }
            }]
        });
    }

    //显示饼图
    function showChartPie(index) {
        var answerCollect = answersAnalysis(index);

        $(presenter.$view).find('#chartPie').highcharts({
            chart: {
                backgroundColor: '#fbfbfb',
                plotBackgroundColor: null,
                plotBorderWidth: null,
                plotShadow: false
            },
            credits: {
                enabled: false
            },
            tooltip: {
                    enabled: false
            },
            title: {
                text: null
            },
            plotOptions: {
                pie: {
                    allowPointSelect: true,
                    cursor: 'pointer',
                    dataLabels: {
                        enabled: true,
                        color: '#000000',
                        connectorColor: '#000000',
                        format: '<b>{point.name}</b>:{point.y}人 {point.percentage:.1f} %'
                    }
                }
            },
            series: [{
                animation: false,
                type: 'pie',
                name: null,
                data: answerCollect
            }]
        });

    }

//单选题、多选题、判断题，获取每个选项被选的人数
    function selectStuNumChJ(index) {
        var  a = new Date();
        var answerCount = {};
        var answerContentLable =[];
        var selectNum = [];
        var testUrl = questionList[index].question_url;//获取题目url
        var questionCode = questionList[index].question_code;//题目类型
        var stu_nums = classroomBaseInfo.stu_nums;//班级总人数
        var notDoNum = questionList[index].not_do_num;
        var answers_list = questionList[index].answers_list;
        for (var i = 0, len = answers_list.length; i < len; i++ ) {
            var answercontent = answers_list[i].answer;
            for (var j = 0; j < answercontent.length; j++ ) {
                var ans = answercontent[j];
                if (answerCount[ans]) answerCount[ans] += answers_list[i]['user_ids'].length;
                else answerCount[ans] = answers_list[i]['user_ids'].length;
            }
        }
        if (questionCode =='judge') {
            answerContentLable =['YES','NO',presenter.i18nProperties['not_doing']];
            selectNum[0]=answerCount['YES'] || 0;
            selectNum[1]=answerCount['NO'] || 0;
            selectNum[2]=notDoNum || 0;
        }
        if (questionCode == 'choice'  || questionCode == 'multiplechoice') {
            // answerContentLable =['A','B','C','D','未作答'];
            // selectNum[0]=answerCount['A'] || 0;
            // selectNum[1]=answerCount['B'] || 0;
            // selectNum[2]=answerCount['C'] || 0;
            // selectNum[3]=answerCount['D'] || 0;
            // selectNum[4]=notDoNum || 0;
            // qtiplayer.load(testUrl, function () {
            //    var allContent =   qtiplayer.getAssessmentModel().modelMap['RESPONSE_1-1'].simpleChoice;
            //     // console.log("题目类型：",questionCode,qtiplayer.getAssessmentModel().modelMap['RESPONSE_1-1'].simpleChoice);

            // });
            var answerArray = [];
            $.each(answerCount,function(k,v){
                answerArray.push({key:k,value:v});
             });
            answerArray = answerArray.sort(function(a,b) {
                return a.key > b.key;
            });
            $.each(answerArray, function(i,n){
                answerContentLable[i] = n.key;
                selectNum[i] = n.value;
            });
            answerContentLable.push(presenter.i18nProperties['not_doing']);
            var donot = notDoNum || 0;
            selectNum.push(donot);
        }
        return [answerContentLable,selectNum,stu_nums];
    }
//获取 正确、错误、未作答对应的人数、比率
    function answersAnalysis(index) {
        //var answerCollect = {};
        var answerCollect = [];
        var stu_nums = classroomBaseInfo.stu_nums;//班级总人数
        var questionAnswer = questionList[index].answers_list;
        var notDoNum = questionList[index].not_do_num;
        var correct = 0, wrong = 0;
        for (var i = 0, len = questionAnswer.length; i < len; i++) {
            if (questionAnswer[i].is_right) {
                correct +=questionAnswer[i].user_ids.length;
            } else {
                wrong+= questionAnswer[i].user_ids.length;
            }
        }
        // answerCollect['正确'] = {num: correct, radio: (correct / stu_nums).toPercent(1)};
        // answerCollect['错误'] = {num: wrong, radio: (wrong / stu_nums).toPercent(1)};
        // answerCollect['未作答'] = {num: notDoNum, radio: (notDoNum / stu_nums).toPercent(1)};
        answerCollect[0] = {name: '正确', y:correct};
        answerCollect[1] = {name: '错误', y:wrong};
        answerCollect[2] = {name: presenter.i18nProperties['not_doing'], y:notDoNum};
        return answerCollect;
    }
//填空题目处理,获取出现次数最多的前三个填空内容
    function  TextentryInfo(index) {
        var starttime =  new Date();
        var correctAnswer = questionList[index].right_answer;
        var answers_list = questionList[index].answers_list;
        var notDoNum = questionList[index].not_do_num;
        var stu_nums = classroomBaseInfo.stu_nums;//班级总人数
        var textcontCount = {};
        $(presenter.$view).find('.single_dotest_container .btn_select').show();
        for (var h =0, le = correctAnswer.length; h < le; h++ ) {//
            var textName = "填空" +(h+1);
            var arry = [];
            var answerConts =[];
            var ans = {};
            var allNum = 0;
            var otherNum=0;
            for (var i=0; i < answers_list.length; i++) {
                var answer = answers_list[i].answer[h];
                if (answer=='') answer = "未填写";
                if (ans[answer]) ans[answer]+= answers_list[i].user_ids.length;
                else ans[answer] = answers_list[i].user_ids.length;
            }
            $.each(ans,function(k,v){
                answerConts.push({key:k,value:v});
                allNum += v;
             });
             answerConts = answerConts.sort(function(c,d){
                return d.value - c.value;
             });
             var content = [],count=[];
             var lend = answerConts.length < 3? answerConts.length : 3;
             for (var i =0; i< lend;i++) {
                content.push(answerConts[i].key);
                count.push(answerConts[i].value);
                otherNum += answerConts[i].value;
             }
             content.push("其他答案");
             count.push(allNum-otherNum);
             content.push("未作答");
             count.push(notDoNum);
             textcontCount[textName] = [content,count,stu_nums];
        }//
        return textcontCount;
    }
//单题页面显示个人答题情况
    function getStudentAnswer(index) {
        var stu_answerlists = [];
        var answers_list = questionList[index].answers_list;
        var score = questionList[index].score;
        var htmlAll='';
        var htmlRight='', htmlWrong='';
        for (var i = 0, len = answers_list.length; i < len; i++) {
            var user_ids = answers_list[i].user_ids;
            var stu_score = answers_list[i].is_right ? score : 0;//本题所得分数
            var stu_answer = answers_list[i].answer;//答案内容
            if (answers_list[i].is_right) {
                for (var j=0, lend =user_ids.length; j < lend; j++ ) {
                    var html = '<tr>';
                    var stu_id = user_ids[j];
                    var stu_num = stuInfos[stu_id].stu_num;//学号
                    var stu_name = stuInfos[stu_id].stu_name;//名字
                    var Allscore = stuInfos[stu_id].score;//所得总分
                    html += '<td>'+stu_name+'</td>'+'<td class="color_grey6">'+stu_num+'</td>'+'<td class="color_green wordBreak">'+stu_answer+'</td>'+
                    '<td>'+stu_score+'</td>'+'<td>'+Allscore+'</td>'+'<td class="enter"><a href="javascript:;" class="btn_enter single_stu" data-stuid="'+stu_id+ '"></a></td>'+'</tr>';
                    htmlRight +=html;
                }
            } else {
                for (var j=0, lend =user_ids.length; j < lend; j++ ) {
                    var html = '<tr>';
                    var stu_id = user_ids[j];
                    var stu_num = stuInfos[stu_id].stu_num;//学号
                    var stu_name = stuInfos[stu_id].stu_name;//名字
                    var Allscore = stuInfos[stu_id].score;//所得总分
                    html += '<td>'+stu_name+'</td>'+'<td class="color_grey6">'+stu_num+'</td>'+'<td class="color_red wordBreak">'+stu_answer+'</td>'+
                    '<td>'+stu_score+'</td>'+'<td>'+Allscore+'</td>'+'<td class="enter"><a href="javascript:;" class="btn_enter single_stu" data-stuid="'+stu_id+ '"></a></td>'+'</tr>';
                    htmlWrong +=html;
                }
            }
            htmlAll = htmlWrong+htmlRight;
        }
        $(presenter.$view).find('.single_dotest_container .stu_dotest').html(htmlAll);
    }
    /**
     * [getChartLineOptions 获取折线图配置数据]
     * @param  {[type]} value [学生数据]
     * @return {[type]}       [折线图配置数据]
     */
    function getChartLineOptions(value) {
        var LessonData = [];
        var scoreData = [];
        var pointData = [];
        var currentId = classroomBaseInfo.courseware_id;
        var i = 0;
        $.each(value, function(k, v) {
            var item;
            var score;
            var point = {name: v.courseware_name, value: v.score, xAxis: i, yAxis: v.score};
            // if (v.courseware_id === currentId) {
            //     item = {
            //       value: v.courseware_name + '(当前)',
            //       textStyle: {
            //         color: '#ff9711'
            //       }
            //     };
            //     score = {
            //       value: v.score,
            //       itemStyle: {
            //         normal: {
            //           borderColor: '#ff9711'
            //         }
            //       }
            //     };
            // } else {
            //     item = v.courseware_name;
            //     score = v.score;
            // }
            item = v.courseware_name;
            score = v.score;

            LessonData.push(item);
            scoreData.push(score);
            pointData.push(point);
            i++;
        });
        return {
          plotOptions: {
            series: {
              animation: false,
              allowPointSelect: false,
              color: '#12b0f4'
            }
          },
          chart: {
            animation: false
          },
          title: {
            text: '',
            x: -20 //center
          },
          legend: {
            enabled: false
          },
          // renderAsImage: true,
          xAxis: {
            title: {
                text: ''
            },
            categories: LessonData
          },

          yAxis: {
            title: {
                text: ''
            },
            plotLines: [{
                value: 0,
                width: 1,
                color: '#808080'
            }]
          },
          credits: {
            enabled: false
          },
          series: [{
            name: '分数',
            data: scoreData
          }]
        };
        // echarts;
        // return {
        //   color: ['#12b0f4'],
        //   animation: false,
        //   // renderAsImage: true,
        //   xAxis: [{
        //     type: 'category',
        //     boundaryGap: true,
        //     axisLine: {
        //       lineStyle: {
        //         color: '#aaa',
        //         width: 2,
        //         type: 'solid'
        //       },
        //     },
        //     splitLine: {
        //       show: false
        //     },
        //     splitArea: {
        //       show: false
        //     },
        //     axisTick: {
        //       show: false
        //     },
        //     axisLabel: {
        //       margin: 20
        //     },
        //     data: LessonData
        //   }],
        //   yAxis: [{
        //     type: 'value',
        //     boundaryGap: true,
        //     axisLabel: {
        //       formatter: '{value}',
        //       margin: 15
        //     },
        //     splitArea: {
        //       show: false
        //     },
        //     min: 0,
        //     max: 100,
        //     splitNumber: 10,
        //     splitLine: {
        //       lineStyle: {
        //         type: 'dashed',
        //         color: '#ccc'
        //       }
        //     },
        //     axisLine: false
        //   }],
        //   series: [{
        //     name: '',
        //     type: 'line',
        //     data: scoreData,
        //     markPoint: {
        //       clickable: false,
        //       symbol: 'pin',
        //       data: pointData,
        //     },
        //     symbol: 'emptyCircle',
        //     symbolSize: 4,
        //     smooth: false
        //   }]
        // };

    }

    /**
     * [resizeChart 重置折线图表高度]
     * @param  {[type]} charDom [图表dom]
     */
    function resizeChart(charDom) {
        var toph = charDom.offset().top;
        var bodyh = $('body').height();
        var adpheight = bodyh - toph;
        charDom.height(adpheight);
    }
    /**
     * author: 林宁
     * [showChartLine 显示个人历次成绩折线图]
     * @param  {[string]} userId [学生id]
     */
    function showChartLine(userId, count) {
        var charDom = presenter.$view.find('#line-chart');
        resizeChart(charDom);
        // 使用echarts
        // var lineChart = echarts.init(charDom[0]);
        var value = getPersonalInfo(userId, count);
        var options = getChartLineOptions(value);
        // hightCharts
        charDom.highcharts(options);
        // echarts渲染
        // lineChart.setOption(options);
    }

    function getPersonalInfo(userId, count) {
        var maxLesson = count || presenter.$view.find('#max-lesson').attr('data-lesson');
        var valueString;
        var returnValue = [];
        var index = 0;
        var opParam = {
            filter: {
                student_id: userId,
                subject_id: classroomBaseInfo.subject_id
            },
            query_type : 'list'
        };
        if (maxLesson === 'max') {
            //maxLesson = +maxLesson;
        } else {
            maxLesson = +maxLesson;
            opParam.page = {
                page_index: 0,
                page_size: maxLesson
            };
        }

        //按时间倒序
        opParam.order = [{order_property : 'last_update_time' , order_type : 'desc'}];

        var studentData = ClassroomUtils.persist('query', opParam);

        studentData = studentData || mockStudentLineTestData;
        if (studentData && studentData.data && studentData.data.result && studentData.data.data) {
            $.each(studentData.data.data, function(k, lesson) {
                if (maxLesson === 'max' || index < maxLesson) {
                    var data = JSON.parse(lesson.data);
                    returnValue.unshift(data);
                } else {
                    return false;
                }
                index ++;
            });
        }
        return returnValue;
    }

    /*---------------------/习题详情实例----------------------*/


    /*----------------------送花统计----------------superman-----*/
    var  statisticFlowers= (function () {
        //返回实例
        var Obj = {

            //初始化
            'init': function () { 
                this.bindEvent();

                if (!flowerStatisticData) {
                    //如果flowerStatisticData为空，则向natvie发事件，主动要数据
                    var option = {
                        type: "get_flower",
                        isApp: true
                    };
                    ClassroomUtils.fireEvent('ClassroomSummary', option);
                }

                this.render(flowerStatisticData);
            },
            //显示视图
            'show': function () {
                $(presenter.$view).find('.sy_tab_flower').addClass('active');
            },

            //隐藏视图
            'hide': function () {
                $(presenter.$view).find('.sy_tab_flower').removeClass('active');
            },

            //绑定事件
            'bindEvent': function () {
            },

            //送花统计页面渲染
            'render': function (data) {
                if (data && data.value && data.value.users.length > 0) {
                    var totalFlower = data.value.totalFlower;
                    var totalPraiseStu = data.value.totalPraiseStudent;
                    var users = data.value.users;

                    var content = '<p>'+presenter.i18nProperties['total_flower']+'<em>' + totalFlower + '</em>'+presenter.i18nProperties['cloud']+'<span class="icon_sy_tab_flower"></span>，'+presenter.i18nProperties['sum_total']+'<strong>' + totalPraiseStu + '</strong>'+presenter.i18nProperties['student_praised_num']+'。'+presenter.i18nProperties['congratulations_flow_student_praised']+'<span class="icon_sy_tab_flower"></span></p>';
                    
                    $(presenter.$view).find('.sy_tab_flower .flower_h').html(content);

                    this.sortStudents(users);
                    //遍历users渲染
                    var renderHtml = '';
                    $.each(users, function(index, item){
                        renderHtml += '<dl>';
                        renderHtml += '<dt><img src="'+item.headPhoto+'" alt=""><span>'+item.flower+'</span></dt><dd>'+item.nickName+'</dd><dd class="sno">'+item.userId+'</dd>';
                        renderHtml += '</dl>';
                    });
   
                    $(presenter.$view).find('.sy_tab_flower .flower_box').html(renderHtml);

                } else {
                    $(presenter.$view).find('.sy_tab_flower .flower_h').html("<p>"+presenter.i18nProperties['nobody_get_flower']+"</p>");
                }
            },

            //学生先按鲜花数再按座位号排序
            'sortStudents': function(users) {
                users.sort(function(a, b) {
                    if (a.flower == b.flower) {
                        return a.seatNumber - b.seatNumber;
                    } else {
                        return b.flower - a.flower;
                    }
                });
            },

            //解绑事件
            'unbindEvent': function () {
            },

            //释放资源
            'destroy': function () {
            }
        };
        return Obj;
    })();
    /*----------------------/送花统计---------------------*/


    /*----------------------课堂练习作答明细---------------------*/ //superman2
    //习题统计 - 答题详情
    var classQuestionDetail = (function () {
        //返回实例
        var Obj = {
            //初始化
            'init': function () {
                this.showBaseData();
                this.bindEvent();
            },

            //显示变动的数据
            'showChangeData' : function(){
                var tmp = presenter.$view.find('.cls_summary_detail');
                $(tmp).find('.questions_num').html(classroomBaseInfo.questions_num);
                $(tmp).find('.interaction_time').html(classroomBaseInfo.interaction_time);
                $(tmp).find('.class_time').html(classroomBaseInfo.class_time);
                $(tmp).find('.stu_avg_score').html(classroomBaseInfo.stu_avg_score);
                if(classroomBaseInfo.stu_avg_score >= 60){
                    $(tmp).find('.stu_avg_score').css({"color":"green"});
                }else{
                    $(tmp).find('.stu_avg_score').css({"color":"red"});
                }
                $(tmp).find('.time_rate').html(classroomBaseInfo.time_rate);
                $(tmp).find('.right_rate').html(classroomBaseInfo.right_rate);
            },

            //显示不会变动的数据
            'showBaseData' : function(){
                var tmp = presenter.$view.find('.cls_summary_detail');
                var startLessonTime = ClassroomInfo.stampParse(classroomBaseInfo['startLessonTime']);

                $(tmp).find('.stu_nums').html(classroomBaseInfo.stu_nums);
                //$(tmp).find('.courseware_name').html(classroomBaseInfo.courseware_name);
                $(tmp).find('.teacher_name').html(classroomBaseInfo.teacher_name);
                $(tmp).find('.class_name').html(classroomBaseInfo.grade_name + classroomBaseInfo.class_name);
                $(tmp).find('.startLessonTime').html(startLessonTime);
                $(tmp).find('.subject_name').html(classroomBaseInfo.subject_name);
            },

            //显示新UI头部数据
            'showHeadData': function() {
                //presenter.$view.find('.cls_summary_container').show();
                var tmp = presenter.$view.find('.sy_tab_content .sy_sumtop .sy_titlelist');
                $(tmp).find('.sy_num').html(classroomBaseInfo.questions_num);
//              $(tmp).find('.sy_score').html(classroomBaseInfo.stu_avg_score);
//              $(tmp).find('.sy_rate').html(classroomBaseInfo.right_rate + '%');
                $(tmp).find('.sy_score').html(helper.rightRate);
                $(tmp).find('.sy_rate').html(helper.rightRate + '%');
                if (helper.rightRate >= 60) {
                	$(tmp).find('.sy_score').removeClass('red').addClass('green');
                	$(tmp).find('.sy_rate').removeClass('red').addClass('green');
                }else {
                	$(tmp).find('.sy_score').removeClass('green').addClass('red');
                	$(tmp).find('.sy_rate').removeClass('green').addClass('red');
                }
            },

            //显示视图
            'show': function () {
                //this.showChangeData(); 

                //$(presenter.$view).find('.cls_summary_detail').show()
                classQuestionDetail.renderForQuestionDetail(questionList,questionInfos);

                this.showHeadData(); 

                //调整table_body高度
                //resize_adpheight(presenter.$view.find('.cls_summary_detail .table_body'));
            },

            //隐藏视图
            'hide': function () {
                $(presenter.$view).find('.cls_summary_detail').hide();
            },

            //绑定事件
            'bindEvent': function () {
                var self = this;

                //添加新UI事件绑定 superman
                $(presenter.$view).on('click', '.sy_tab_list .tab_l', function(e){
                    $(presenter.$view).find('.sy_tab_list .tab_l').addClass("on").siblings().removeClass('on');
                    $(presenter.$view).find('._sy_tab_question').show();
                    $(presenter.$view).find('.sy_tab_flower').hide();
                });

                $(presenter.$view).on('click', '.sy_tab_list .tab_r', function(e){
                    $(presenter.$view).find('.sy_tab_list .tab_r').addClass("on").siblings().removeClass('on');
                    $(presenter.$view).find('._sy_tab_question').hide();
                    $(presenter.$view).find('.sy_tab_flower').show();
                });

                $(presenter.$view).on('click', '._question_content', function(e){
                    $(presenter.$view).find('._question_content').addClass("on").siblings().removeClass('on');
                    $(presenter.$view).find('.sy_detail').show();
                    $(presenter.$view).find('.sy_total').hide();
                });

                $(presenter.$view).on('click', '._total_view', function(e){
                    $(presenter.$view).find('._total_view').addClass("on").siblings().removeClass('on');
                    $(presenter.$view).find('.sy_total').show();
                    $(presenter.$view).find('.sy_detail').hide();
                    ClassroomInfo.show();
                });



                $(presenter.$view).on('click', '.cls_summary_detail .go_to_classroom', function(){
                    self.hide();
                    //课堂练习页面
                    // wth添加
                    ClassroomInfo.show(true);
                    // wth注释
                    //ClassroomInfo.show();
                });

                $(presenter.$view).on('click', '.cls_summary_detail .student_info_summary', function(){
                    self.hide();
                   //课堂练习页面
                   ClassroomInfo.showSheets();
                });

                //单题作答详情  superman
                // $(presenter.$view).on('click', classQuestionDetail.SELECTOR.QUESTION_ANSWER_DETAIL + ' td a', function(){
                $(presenter.$view).on('click', '.sy_detail .sy_ques_de a', function(){
                    var index = $(this).data("index");

                    // 查看详情测试先注释
                    //self.hide();

                   //进入习题详情页
                   QuestionInfo.init(index);
                });

                //设置页面滚动收缩
                var isfixed = false;

                $(presenter.$view).find('.cls_summary_detail .table_body').on('scroll', function(){
                    //如果内部高度比外部高度小，就不做处理
                    var innerHeight = $(presenter.$view).find('.cls_summary_detail .table_body table').height();
                    var outHeight = $(presenter.$view).find('.cls_summary_detail .table_body').height();

                    if(innerHeight <= outHeight) {
                        return false;
                    }

                    if($(presenter.$view).find(".cls_summary_detail .table_body").scrollTop() > 0 ){
                        if(isfixed){
                            return;
                        }
                        isfixed = true;
                        $(presenter.$view).find('.cls_summary_detail .sumwrap').addClass('s_scrolldown');
                        resize_adpheight($(presenter.$view).find('.cls_summary_detail .table_body'));
                    } else {
                        if(!isfixed){
                            return;
                        }
                        isfixed = false;
                        $(presenter.$view).find('.cls_summary_detail .sumwrap').removeClass('s_scrolldown');
                        resize_adpheight($(presenter.$view).find('.cls_summary_detail .table_body'));
                    }
                });

                $(presenter.$view).on('click', '.cls_summary_detail .btn_unfold', function(){
                    $(presenter.$view).find('.cls_summary_detail .sumwrap').removeClass('s_scrolldown');
                    resize_adpheight($(presenter.$view).find('.cls_summary_detail .table_body'));
                    $(presenter.$view).find(".cls_summary_detail .table_body").scrollTop(0);
                });
            },

            //解绑事件
            'unbindEvent': function () {
                $(presenter.$view).off('click', '.cls_summary_detail .student_info_summary');
                $(presenter.$view).off('click', '.cls_summary_detail .go_to_classroom');
                $(classQuestionDetail.SELECTOR.QUESTION_ANSWER_DETAIL).undelegate('td a','click');

                $(presenter.$view).off('click', '.sy_tab_list .tab_l'); 
                $(presenter.$view).off('click', '.sy_tab_list .tab_r');
                $(presenter.$view).off('click', '._question_content');
                $(presenter.$view).off('click', '._total_view');
                $(presenter.$view).off('click', '.sy_detail .sy_ques_de a');
            },

            //释放资源
            'destroy': function () {

            },
            'SELECTOR':{
                QUESTION_ANSWER_DETAIL: ".cls_summary_detail .sumwrap .sumcon .detail_list .table_body",//题目列表容器
                QUESTION_ANSWER_TITLE: ".cls_summary_detail .sumcon .sum_title .tit_h2",
                QUESTION_ANSWER_TITLE_BTN: ".cls_summary_detail .sumcon .sum_title .title_btn .sum_btn_border",
                QUESTION_ANSWER_TABLE_HEAD: ".cls_summary_detail .sumwrap .sumcon .detail_list .table_head"
            },
            'renderForQuestionDetail': function (urls,infos) {
                var self = this;
                presenter.$view.find(classQuestionDetail.SELECTOR.QUESTION_ANSWER_TITLE).text(presenter.i18nProperties['details_of_classroom_exercises']);
                presenter.$view.find(classQuestionDetail.SELECTOR.QUESTION_ANSWER_TITLE_BTN).text(presenter.i18nProperties['details_of_student_exercises']);
                presenter.$view.find(classQuestionDetail.SELECTOR.QUESTION_ANSWER_TABLE_HEAD).html('<thead> <tr> <th>'+presenter.i18nProperties['questionId']+'</th> <th style="width: 10%">'+presenter.i18nProperties['question_type']+'</th> <th class="text_left" style="width: 70%">'+presenter.i18nProperties['the_title']+'</th> <th></th> </tr> </thead>');
                var html = "<table><tbody>";
                var right_rate = "";
                var tmp = [];
                var rightAnswer;
                 var new_html = "<table><tbody>";
                /*if(urls && $.isArray(urls)){
                    urls.reverse();
                }
                if(infos && $.isArray(infos)){
                    infos.reverse();
                }*/
               var totalRightRate =0;
                for (var index = 0; index < urls.length; index++) {
                    //暂时隐藏查看详情按钮
                    /*html += '<tr class="tit">'
                                 +'<td>'+(index + 1)+'</td>'
                                 +'<td style="width: 10%">'+ this.getQuestionType(urls[index].question_code)+'</td>'
                                 +'<td class="text_left" style="width: 70%"></td>'
                                 +'<td class="enter" rowspan="1"><a href="###" class="btn_enter" data-index="'+index+'"></a></td></tr>'
                    + '<tr class="s_answer">'
                        +'<td colspan="5">'
                           +'<ul class="sum_count clearfix">'
                             +'<li>题目分数：'+urls[index].score+'分</li>'
                             +'<li>答对率：<em class="color_red">'+((infos[urls[index].question_id].right_rate) * 100)+'%</em></li>'
                             +'<li>正确答案：<em class="color_green">'+urls[index].right_answer+'</em></li>'
                           +'</ul></td></tr>';*/
                    if(urls[index].question_code == "judge"){
                        if(urls[index].right_answer && urls[index].right_answer[0] && urls[index].right_answer[0] == "YES"){
                            rightAnswer = presenter.i18nProperties['yes'];
                        }else if(urls[index].right_answer && urls[index].right_answer[0] && urls[index].right_answer[0] == "NO"){
                            rightAnswer = presenter.i18nProperties['no'];
                        }
                    } else if (urls[index].question_code == "multiplechoice" && urls[index].right_answer) {
                        //修复bug: 59527
                       rightAnswer = urls[index].right_answer.sort();
                    } else{
                        rightAnswer = urls[index].right_answer;
                    }
                    //debugger;
                    // wth注释
                    //right_rate = Math.floor(((infos[urls[index].question_id].right_rate) * 100)) + "";
                    // wth添加
                    right_rate = ((infos[urls[index].question_id].right_rate) * 100).toFixed(1);

                    var tmp = right_rate.split(".");
                    if(tmp.length == 2 && tmp[1] == "0"){
                        right_rate = tmp[0];
                    }
                    //所有题答对率的总和，用于计算显示头部的平均分和平均正确率
                    totalRightRate += Number(right_rate);
                    right_rate = right_rate + '%';

                    //增加查看详情
                    var flag = false;
                    var questionflag = urls[index].question_type;  //superman兼容
                    //questionflag = true; //测试用

                    if (questionflag && !urls[index].right_answer.length) {
                        var calStuNum = '';
                        var calData = self.getAnswerStuNum(index);

                        if (urls[index].question_code == "judge") {
                            //截图判断题，当标准答案没有设置时，添加选项被选人数一行
                            calStuNum = '<tr class="sy_answer_superman">'
                            +'<td colspan="5">'
                            +'<ul class="sy_sum_count_superman clearfix">'
                            +'<li>'+presenter.i18nProperties['yes']+' :（'+calData['YES']+presenter.i18nProperties['person']+'）</li>'
                            +'<li>'+presenter.i18nProperties['no']+':（'+calData['NO']+presenter.i18nProperties['person']+'）</li>'
                            +'</ul></td></tr>';
                            //截图判断题，当标准答案没有设置时，答案，正确率两项设置为'—'
                            
                            rightAnswer = '—';
                            right_rate = '—';
                           
                        } else if (urls[index].question_code == "choice") {
                            //截图单选题，当标准答案没有设置时，添加选项被选人数一行
                            calStuNum = '<tr class="sy_answer_superman">'
                            +'<td colspan="10">'
                            +'<ul class="sy_sum_count_superman clearfix">'
                            +'<li>A: （'+calData['A']+presenter.i18nProperties['person']+'）</li>'
                            +'<li>B: （'+calData['B']+presenter.i18nProperties['person']+'）</li>'
                            +'<li>C: （'+calData['C']+presenter.i18nProperties['person']+'）</li>'
                            +'<li>D: （'+calData['D']+presenter.i18nProperties['person']+'）</li>'
                            +'<li>E: （'+calData['E']+presenter.i18nProperties['person']+'）</li>'
                            +'<li>F: （'+calData['F']+presenter.i18nProperties['person']+'）</li>'
                            +'</ul></td></tr>';
                            //截图单选题，当标准答案没有设置时，答案，正确率两项设置为'—'
                            rightAnswer = '—';
                            right_rate = '—';
                            
                        }

                        //新UI，superman
                        new_html += '<tr class="tit">'
                        +'<td width="8%">'+(index + 1)+'</td>'
                        +'<td width="17%" class="ques-type">'+ this.getQuestionType(urls[index].question_code)+'</td>'
                        +'<td width="63%" class="clearfix ques-box super-box"></td>'
                        +'<td class="sy_ques_de"><a href="#" title="" data-index="'+index+'">'+presenter.i18nProperties['view_detail']+'</a></td>'
                        + '</tr>'
                        +calStuNum
                        + '<tr class="sy_answer">'
                        +'<td colspan="5">'
                        +'<ul class="sy_sum_count clearfix">'
                        +'<li>'+presenter.i18nProperties['score_of_question']+'<em>'+urls[index].score+presenter.i18nProperties['scores']+'</em></li>'
                        +'<li>'+presenter.i18nProperties['rate_of_right']+'<em>'+right_rate+'</em></li>'
                        +'<li>'+presenter.i18nProperties['the_right_answer']+'<em>'+rightAnswer+'</em></li>'
                        +'</ul></td></tr>';

                    } else {
                        //新UI，superman
                        new_html += '<tr class="tit">'
                        +'<td width="8%">'+(index + 1)+'</td>'
                        +'<td width="17%" class="ques-type">'+ this.getQuestionType(urls[index].question_code)+'</td>'
                        +'<td width="63%" class="clearfix ques-box super-box"></td>'
                        +'<td class="sy_ques_de"><a href="#" title="" data-index="'+index+'">'+presenter.i18nProperties['view_detail']+'</a></td>'
                        + '</tr>'
                        + '<tr class="sy_answer">'
                        +'<td colspan="5">'
                        +'<ul class="sy_sum_count clearfix">'
                        +'<li>'+presenter.i18nProperties['score_of_question']+'<em>'+urls[index].score+presenter.i18nProperties['scores']+'</em></li>'
                        +'<li>'+presenter.i18nProperties['rate_of_right']+'<em>'+right_rate+'</em></li>'
                        +'<li>'+presenter.i18nProperties['the_right_answer']+'<em>'+rightAnswer+'</em></li>'
                        +'</ul></td></tr>';
                    }
                                  
                }
                //用于显示头部的平均分和平均正确率
                helper.rightRate = urls.length == 0 ? '0' : (totalRightRate / urls.length).toFixed(1);
                helper.rightRate = helper.rightRate.split('.')[1]==='0'?helper.rightRate.split('.')[0]:helper.rightRate;
                new_html += '</tbody></table>';

                presenter.$view.find('.sy_detail .table_body').html(new_html);

                // html += '</tbody></table>';
                // presenter.$view.find(classQuestionDetail.SELECTOR.QUESTION_ANSWER_DETAIL).html(html);

                for(var index =0; index < urls.length; index++){
                    var renderurl = urls[index].question_url;
                    var type = urls[index].question_type;  //superman兼容
                    // var renderobj = $($(presenter.$view.find(classQuestionDetail.SELECTOR.QUESTION_ANSWER_DETAIL)[0]).find('.tit')[index]).find('.text_left')[0];
                    var renderobj = $($(presenter.$view.find('.sy_detail .table_body')[0]).find('.tit')[index]).find('.ques-box')[0];  
                    unloadTestContent(renderurl,renderobj, type);
                    //unloadTestContent(renderurl,renderobj);
                }

                // $(classQuestionDetail.SELECTOR.QUESTION_ANSWER_DETAIL).delegate( "td a", "click", function(e) {
                //     var index = $(e.target).data("index");

                //     //跳转到习题详情页
                //     QuestionInfo.init(index);
                //     //todo 题目详细入口
                // } );
            },
            'getQuestionType':function(type){
                if(type == QuestionType.CHOICE){
                    return presenter.i18nProperties['single_choice_question'];
                }else if(type == QuestionType.MULTIPLE_CHOICE){
                    return presenter.i18nProperties['mutiple_choice_question'];
                }else if(type == QuestionType.JUDGE){
                    return presenter.i18nProperties['judge_question'];
                }else if(type == QuestionType.TEXT_ENTRY){
                    return presenter.i18nProperties['text_fill_up_question'];
                }

                return presenter.i18nProperties['other_question'];
            },

            //对于截图单选、判断题，答题详情页面中统计选项被选项的人数
            'getAnswerStuNum': function (index) {
                var answerCount = {};
                var answers_list = questionList[index].answers_list;
                var question_code = questionList[index].question_code;
                for (var i = 0, len = answers_list.length; i < len; i++ ) {
                    var answercontent = answers_list[i].answer;
                    for (var j = 0; j < answercontent.length; j++ ) {
                        var ans = answercontent[j];
                        if (answerCount[ans]) answerCount[ans] += answers_list[i]['user_ids'].length;
                        else answerCount[ans] = answers_list[i]['user_ids'].length;
                    }
                }
                //判断题没有被选的选项，人数设置为0
                if (question_code == 'judge') {
                    if (!answerCount['YES']) {
                        answerCount['YES'] = '0';
                    }
                    if (!answerCount['NO']) {
                        answerCount['NO'] = '0';
                    }
                }
                //单选题没有被选的选项，人数设置为0
                if (question_code == 'choice') {
                    if (!answerCount['A']) {
                        answerCount['A'] = '0';
                    }
                    if (!answerCount['B']) {
                        answerCount['B'] = '0';
                    }
                    if (!answerCount['C']) {
                        answerCount['C'] = '0';
                    }
                    if (!answerCount['D']) {
                        answerCount['D'] = '0';
                    }
                    if (!answerCount['E']) {
                        answerCount['E'] = '0';
                    }
                    if (!answerCount['F']) {
                        answerCount['F'] = '0';
                    }
                }
                return answerCount;
            }
        };
        return Obj;
    })();

    /*----------------------历次课堂练习成绩折线图---------------------*/
    var StudentHistory = (function () {
        //返回实例
        var Obj = {
            //初始化
            'stu_id': '',
            'init': function () {
                this.bindEvent();
            },

            //显示视图
            'show': function (stu_id) {
                //数据处理
                this.stu_id = stu_id;
                presenter.$view.find('.presonal-line-chart').removeClass('hide').addClass('show');
                showChartLine(stu_id);
            },

            //隐藏视图
            'hide': function () {
                presenter.$view.find('.presonal-line-chart').removeClass('show').addClass('hide');
            },

            //绑定事件
            'bindEvent': function () {
                presenter.$view.on('click', '#hideLineChart', function() {
                    StudentInfo.showDetail();
                    StudentHistory.hide();
                });
                presenter.$view.on('click', '.presonal-line-chart #max-lesson', function() {
                    var parent = $(this).parent();
                    if (parent.hasClass('s_open')) {
                        parent.removeClass('s_open');
                    } else {
                        parent.addClass('s_open');
                    }
                });
                presenter.$view.on('click', '.presonal-line-chart .option li', function() {
                    var text = $(this).attr('data-lesson-text');
                    var count = $(this).attr('data-lesson-count');
                    presenter.$view.find('.presonal-line-chart').find('#max-lesson').text(text).attr('data-lesson', count);
                    var obj = $(presenter.$view).find('.presonal-line-chart .btn_select');
                    if (obj.hasClass('s_open')) {
                        obj.removeClass('s_open');
                    } else {
                        obj.addClass('s_open');
                    }
                    showChartLine(StudentHistory.stu_id, count);
                });
            },

            //解绑事件
            'unbindEvent': function () {

            },

            //释放资源
            'destroy': function () {

            }
        };
        return Obj;
    })();
    /*----------------------/历次课堂练习成绩折线图---------------------*/


    /**
     * 数组去重
     * @param data
     * @returns {*|Array}
     */
    function uniqueArray(data){
        data = data || [];
        var current, tmp, indexs;
        for (var i = 0; i < data.length - 1; i++) {
            current = data[i];
            indexs = [];
            for (var j = i + 1; j < data.length; j++) {
                tmp = data[j];
                if (current == tmp) {
                    indexs.push(j);
                }
            }
            if (indexs.length > 0) {
                for (var k = indexs.length - 1; k >= 0; k--) {
                    data.splice(indexs[k], 1);
                }
            }
        }
        return data;
    }


    /*---------------------每次作答数据处理----------------------*/
    var AnswerDataHandle = {
        //数据调度
        update: function (eventData) {
            var questionType = eventData.value.questionType;
            var needSum = this.filter(questionType);

            //不需要统计
            if (needSum === false) {
                eventData = null;
                return false;
                console.log('[ClassroomSummary]该题型课堂总结不支持【'+questionType+'】，没有进入解析');
            } else {
                console.log('[ClassroomSummary]进入解析【'+questionType+'】数据：'+JSON.stringify(eventData));

                //分析学生的作答数据 -- 如果是使用模拟数据就不要解析了
                if(!isWeb) {
                    SummaryQtiAssessmentParser.parseQTIxml(eventData);
                }

                var value = eventData.value;


                // wth添加
                // classroomBaseInfo['userLen'] = value.users?value.users.length:0;
                classroomBaseInfo['userLen'] = value.unfinishedNum + value.finishedNum;
                classroomBaseInfo['unfinishedNum'] = value.unfinishedNum?value.unfinishedNum:0;
                //修复bug#45460
                /*var option = {'order' : [{orderProperty:'seatNumberValue', orderType : 'asc'},{orderProperty:'studentNo', orderType : 'asc'}]};
                var students = ClassroomUtils.getCurrentStudents(option);*/
                if(students) {
                    //debugger;
                    var j,stuExit,tmpstuStat;
                    var totalNum = students.length;
                    for(var i = 0; i < totalNum; i++) {
                        stuExit = false;
                        var info = {
                            'stu_id' : students[i]['studentId'],
                            'stu_num': students[i]['studentNo'],
                            'stu_name': students[i]['studentName'],
                            'icon'    : students[i]['headIcon'],
                            'is_online': students[i]['onlineStatus'] ? 1 : 0,
                            'score': 0,
                            'right_rate' : 0
                        };
                        stuInfos[students[i]['studentId']] = info;

                        for(j=0;j<stuStatList.length; j++){
                            tmpstuStat = stuStatList[j];
                            if(tmpstuStat["stu_id"] == info["stu_id"]){
                                stuExit = true;
                                break;
                            }
                        }
                        if(stuExit == false){
                            var stat = {
                                stu_id : students[i]['studentId'],
                                right_num : 0,      //答对题数
                                wrong_num : 0,      //答错题数
                                not_do_num : 0,     //未答题数
                                right_rate : 0      //正确率
                            };
                            stuStatList.push(stat);
                        }
                    }
                }


                //debugger;
                //存入题目信息 - 如果之前没有答过题，就返回false
                var oldUnfinishedUsers = this.parseQuestionList(value);

                //存入用户数据
                this.parseUserList(value, oldUnfinishedUsers);

                //每次都要统计一下数据
                this.handleAllData();

                //将计算内存释放
                eventData = null;

                //将数据通过接口持久化到教师端
                this.saveData();
            }
        },

        //对统计数据进行过滤
        filter: function (questionType) {
            if (!questionType || $.inArray(questionType, NeedSummaryType) === -1) {
                return false;
            } else {
                return true;
            }
        },

        //解析答题数据，存入题目信息
        'parseQuestionList': function (value) {

            // wth 对可能出现的重复提交问题做去重处理
            if(value){
                var i=0;
                if(value.answers){
                    for(i=0; i<value.answers.length; i++){
                        if(value.answers[i].userIds){
                            value.answers[i].userIds = uniqueArray(value.answers[i].userIds);
                        }
                    }
                }
                if(value.users){
                    var current,tmp,indexs;
                    for(var i=0; i<value.users.length-1; i++){
                        current = value.users[i];
                        indexs = [];
                        for(var j=i+1; j<value.users.length; j++){
                            tmp = value.users[j];
                            if(current.userId == tmp.userId){
                                indexs.push(j);
                            }
                        }
                        if(indexs.length > 0){
                            for(var k=indexs.length-1; k>=0; k--){
                                value.users.splice(indexs[k],1);
                            }
                        }
                    }
                }
            }

            //value.finishedNum = value.users?value.users.length:0;


            var answerList = [];
            for (var i = 0; i < value.answers.length; i++) {
                answerList.push({
                    user_ids: value.answers[i]['userIds'],
                    is_right: value.answers[i]['isRight'],
                    answer: value.answers[i]['answer']
                });
            }

            var rightNumTmp = value.correctUserIds ? value.correctUserIds.length : 0;

            //superman兼容
            var flag = false;
             if (value.questionType == 'choice' || value.questionType == 'judge') {
                if (value.flag && value.flag == 'image') {
                    flag = true;
                }
             }


            var list = {
                'question_id': value.pageName,
                'question_url': value.questionUrl,
                'question_code': value.questionType,
                'score': 0, //每道题的分数，要由最后所有的数据来统计
                'right_num': rightNumTmp,
                'right_rate': (value.finishedNum+value.unfinishedNum) == 0 ? 0 : parseFloat((rightNumTmp / (value.finishedNum+value.unfinishedNum)).toFixed(3)),
                'do_num': value.finishedNum,
                'not_do_num': value.unfinishedNum,
                'right_answer': value.correctAnswer,
                'answers_list': answerList,
                'question_type': flag //superman兼容
            };

            //如果这题已经答过，就将之前的答题数据清除
            //var lastUsers;
            var oldUnfinishedUsers = false;
            if(questionInfos[value.pageName]) {
                //lastUsers = questionInfos[value.pageName]["users"]?questionInfos[value.pageName]["users"]:[];
                //记录之前未答题的学生
                oldUnfinishedUsers = questionInfos[value.pageName]['unfinished_users'];

                var markIndex = -1;
                for(var i = 0; i < questionList.length; i++) {
                    if(questionList[i]['question_id'] == value.pageName) {
                        markIndex = i;
                        break;
                    }
                }

                if(markIndex > -1) {
                    questionList.splice(markIndex, 1);
                }
            }

            //将新答的数据插入习题列表
            questionList.push(list);

            // wth注释
            /*questionInfos[value.pageName] = {
                'right_rate': value.finishedNum == 0 ? 0 : parseFloat((rightNumTmp / value.finishedNum).toFixed(2)),
                'unfinished_users' : value.unfinishedUserIds,
                'right_answer' : value.correctAnswer
            };*/
            //debugger;
            // wth添加

            questionInfos[value.pageName] = {
                'right_rate': (value.finishedNum+value.unfinishedNum) == 0 ? 0 : parseFloat((rightNumTmp / (value.finishedNum+value.unfinishedNum)).toFixed(3)),
                'unfinished_users' : value.unfinishedUserIds,
                'users':value.users,
                'right_answer' : value.correctAnswer
            };

            /*if(lastUsers){
                var id,online;
                for(var k=0; k<lastUsers.length; k++){
                    id = lastUsers[k]["userId"];
                    online = false;
                    for(var t=0; t<value.users.length;t++){
                        if(id ==value.users[t]["userId"]){
                            online = true;
                            break;
                        }
                    }
                    if(online == false){
                        if($.inArray(id,questionInfos[value.pageName]['unfinished_users']) < 0){
                            questionInfos[value.pageName]['unfinished_users'].push(id);
                        }
                    }
                }
            }*/

            //修复bug#45460
            var currentStudents = students;
            //var currentStudents = ClassroomUtils.getCurrentStudents();
            if(ClassroomUtils && ClassroomUtils.getCurrentStudents && currentStudents){
                var id,online;
                for(var k=0; k<currentStudents.length; k++){
                    id = currentStudents[k]["studentId"];
                    online = false;
                    if(value.users){
                        for(var t=0; t<value.users.length;t++){
                            if(id ==value.users[t]["userId"]){
                                online = true;
                                break;
                            }
                        }
                        if(online == false){
                            if($.inArray(id,questionInfos[value.pageName]['unfinished_users']) < 0){
                                questionInfos[value.pageName]['unfinished_users'].push(id);
                            }
                        }
                    }
                }
            }


            // wth注释
            //将数据按正确率逆序排列
            /*questionList.sort(function(a, b){
                return a.right_rate - b.right_rate;
            });*/

            //更新每个题目的index
            for(var j = 0; j < questionList.length; j++) {
                if(questionInfos[questionList[j]['question_id']]) {
                    questionInfos[questionList[j]['question_id']]['index'] = j;
                }
            }

            //如果上次有答题，就返回之前未答题的用户数据
            return oldUnfinishedUsers;
        },

        //解析用户数据，存入用户信息
        //oldUnfinishedUsers - false:没有答过题，数组：上次答题没有回答的用户
        'parseUserList': function (value, oldUnfinishedUsers) {
            //debugger;
            var answers         = value.answers;
            var questionId      = value.pageName;
            var questionUrl     = value.questionUrl

            var stuQuestionList = StudentAnswerHandle.get();

            //先把数据处理成stu_id => 答题数据的格式
            var tmpAnswer = {};
            for (var i = 0; i < answers.length; i++) {
                var tmp = answers[i];
                for (var j = 0; j < answers[i]['userIds'].length; j++) {
                    var userId = answers[i]['userIds'][j];
                    tmpAnswer[userId] = {'is_right': tmp.isRight, 'answer': tmp.answer};

                    //将答题数据写入题目列表
                    if (!stuQuestionList[userId]) {
                        stuQuestionList[userId] = {};
                    }

                    //已经答过该题
                    if (stuQuestionList[userId][questionId]) {
                        //上次答题是否正确
                        tmpAnswer[userId]['old_is_right'] =  stuQuestionList[userId][questionId]['is_right'];

                        //如果这次没有答题，就要将之前的答题数据清除
                        if($.inArray(userId, value.unfinishedUserIds) !== -1) {
                            delete stuQuestionList[userId][questionId];
                        } else {
                            stuQuestionList[userId][questionId]['is_right'] = tmp.isRight;
                            stuQuestionList[userId][questionId]['question_answer'] = tmp.answer;
                        }

                    } else {
                        stuQuestionList[userId][questionId] = {
                            'question_url': questionUrl,
                            'question_answer': tmp.answer,
                            'is_right': tmp.isRight
                        };
                    }
                }
            }

            //将这次没有没有回答的用户的数据，加入判断数组中
            for(var k = 0; k < value.unfinishedUserIds.length; k++) {
                var uid = value.unfinishedUserIds[k];
                if(stuQuestionList[uid] && stuQuestionList[uid][questionId]) {
                    tmpAnswer[uid] = {};
                    tmpAnswer[uid]['old_is_right'] = stuQuestionList[uid][questionId]['is_right'];
                }
            }

            //循环用户数据
            for (var i = 0; i < stuStatList.length; i++) {
                var stuId = stuStatList[i]['stu_id'];
                var answerInfo = tmpAnswer[stuId];

                if (answerInfo && answerInfo.answer) {
                    //这次有回答
                    if(oldUnfinishedUsers === false) {
                        if (answerInfo.is_right) {
                            stuStatList[i]['right_num'] += 1;
                        } else {
                            stuStatList[i]['wrong_num'] += 1;
                        }
                    } else {
                        if($.inArray(stuId, oldUnfinishedUsers) !== -1) {
                            //上次没有回答
                            stuStatList[i]['not_do_num'] -= 1;
                            if(stuStatList[i]['not_do_num'] < 0){
                                stuStatList[i]['not_do_num'] = 0;
                            }

                            if (answerInfo.is_right) {
                                stuStatList[i]['right_num'] += 1;
                            } else {
                                stuStatList[i]['wrong_num'] += 1;
                            }

                        } else {
                            //上次有回答
                            if(answerInfo['old_is_right']) {
                                if (!answerInfo.is_right) {
                                    stuStatList[i]['right_num'] -= 1;
                                    stuStatList[i]['wrong_num'] += 1;
                                    if(stuStatList[i]['right_num'] < 0){
                                        stuStatList[i]['right_num'] = 0;
                                    }
                                }
                            } else {
                                if (answerInfo.is_right) {
                                    stuStatList[i]['right_num'] += 1;
                                    stuStatList[i]['wrong_num'] -= 1;
                                    if(stuStatList[i]['wrong_num'] < 0){
                                        stuStatList[i]['wrong_num'] = 0;
                                    }
                                }
                            }
                        }
                    }
                } else {
                    //判断上次答题情况
                    if(oldUnfinishedUsers === false) {
                        stuStatList[i]['not_do_num'] += 1;
                        if(stuStatList[i]['not_do_num'] > questionList.length){
                            stuStatList[i]['not_do_num'] = questionList.length;
                        }
                    } else {
                        if($.inArray(stuId, oldUnfinishedUsers) !== -1) {
                            //上次没有回答
                        } else {
                            //上次有回答
                            stuStatList[i]['not_do_num'] += 1;
                            if(stuStatList[i]['not_do_num'] > questionList.length){
                                stuStatList[i]['not_do_num'] = questionList.length;
                            }

                            // wth 修复33789
                            // wth注释
                            //var oir = stuQuestionList[stuId][questionId]['old_is_right'];
                            if(!stuQuestionList[stuId]){//修复bug#47851
                                continue;
                            }
                            var oir = stuQuestionList[stuId][questionId]['is_right'];//

                            if(oir){
                                stuStatList[i]['right_num'] -= 1;
                                if(stuStatList[i]['right_num'] < 0){
                                    stuStatList[i]['right_num'] = 0;
                                }
                            }else{
                                stuStatList[i]['wrong_num'] -= 1;
                                if(stuStatList[i]['wrong_num'] < 0){
                                    stuStatList[i]['wrong_num'] = 0;
                                }
                            }
                            /*if(answerInfo) {
                                if(answerInfo['old_is_right']){
                                    stuStatList[i]['right_num'] -= 1;
                                }else{
                                    stuStatList[i]['wrong_num'] -= 1;
                                }
                            }*/

                            // wth添加
                            /*if(answerInfo['old_is_right']) {
                                stuStatList[i]['right_num'] -= 1;
                            } else {
                                stuStatList[i]['wrong_num'] -= 1;
                            }*/
                        }
                    }
                }
            }


            //将学生答题数据保存回sessionStorage
            StudentAnswerHandle.save(stuQuestionList);

            //销毁临时数据
            tmpAnswer = null;
        },

        //持久化数据
        'saveData': function () {
            //如果是web端就不进行处理
            if(isWeb || isStudent) {
                return false;
            }

            var self = this;

            //保存整堂课的数据
            self.saveClassroomData();

            //保存学生提交的答案的数据
            self.saveAnswerData();

            //保存单个学生的总结数据
            self.saveStuData();
        },

        //保存整堂课的数据
        'saveClassroomData' : function() {
            var data = {};

            var baseInfo = {
                interaction_time: classroomBaseInfo['interaction_time'], //互动时间分钟
                class_time: classroomBaseInfo['class_time'], //上课时间分钟
                questions_num: classroomBaseInfo['questions_num'], //练习题数
                total_score: classroomBaseInfo['total_score'], //练习总分
                avg_score: classroomBaseInfo['avg_score'], //练习平均分
                right_rate: classroomBaseInfo['right_rate'], //平均正确率
                user_len:classroomBaseInfo['userLen'],//在线数
                unfinishedNum:classroomBaseInfo['unfinishedNum']//未完成数
            };

            var saveData = {};
            saveData['classroomBaseInfo'] = baseInfo;
            saveData['questionInfos']     = questionInfos;
            saveData['questionList']      = questionList;
            saveData = JSON.stringify(saveData);

            var data = {
                'data_id' : presenter.classroom_key,
                'data_type' : PersistDataType['class_summary'],
                'data' : saveData
            };

            var opParam = {
                'data' : data,
                'force_update' : true
            };

            // wth注释
            /*var opType = 'saveOrUpdate';
            var res = ClassroomUtils.persist(opType, opParam);

            if(res && res.data && res.data.result) {
                console.log('保存整堂课的数据', opParam, res);
            }*/
        },

        //保存学生提交的答案的数据
        'saveAnswerData' : function() {
            var data = {};

            var tmpInfo = {};
            $.each(stuInfos, function(k, v){
                tmpInfo[k] = {
                    score : v.score,
                    right_rate : v.right_rate
                };
            });

            var stuQuestionList = StudentAnswerHandle.get();

            var saveData = {};
            saveData['stuInfos']        = tmpInfo;
            saveData['stuStatList']     = stuStatList;
            saveData['stuQuestionList'] = stuQuestionList;
            saveData = JSON.stringify(saveData);

            var data = {
                'data_id' : presenter.answer_key,
                'data_type' : PersistDataType['stu_ans_list'],
                'data' : saveData
            };

            var opParam = {
                'data' : data,
                'force_update' : true
            };

            // wth注释
            /*var opType = 'saveOrUpdate';
            var res = ClassroomUtils.persist(opType, opParam);

            if(res && res.data && res.data.result) {
                //console.log('保存学生提交的答案', opParam, res);
            }*/
        },

        //保存单个学生的总结数据
        'saveStuData' : function() {
            //批量插入学生的答题数据
            var defaultData = {
                subject_id : classroomBaseInfo.subject_id,
                class_id : classroomBaseInfo.class_id,
                teacher_id : classroomBaseInfo['teacher_id']
            };

            var data = [];
            $.each(stuInfos, function(k, v){
                var strData = JSON.stringify({
                    'score' : v.score,
                    'courseware_id' : classroomBaseInfo.courseware_id,
                    'courseware_name' : classroomBaseInfo.courseware_name
                });

                var tmp = {
                    data_id : classroomBaseInfo['subject_id'] + '_' + classroomBaseInfo['courseware_id'] + k + 'stu_scores',
                    student_id : k,
                    data_type : PersistDataType['stu_summary'],
                    data : strData
                };

                data.push(tmp);
            });

            var opParam = {
                'default_data' : defaultData,
                'data' : data,
                'force_update' : true
            };

            // wth注释
            //var res = ClassroomUtils.persist('saveOrUpdateBatch', opParam);
            //console.log('批量保存学生的数据', opParam, res);
        },

        //处理统计数据
        handleAllData : function(){
            //练习总数
            classroomBaseInfo.questions_num = questionList.length;

            //练习平均分
            classroomBaseInfo.avg_score = classroomBaseInfo.questions_num == 0 ? 0 : Math.round((100 / classroomBaseInfo.questions_num)*10) / 10;

            //给每个题目添加得分
            for(var i = 0; i < questionList.length; i++) {
                questionList[i]['score'] = classroomBaseInfo.avg_score;
            }

            //记录平均正确率
            var totalRate = 0;
            var totalScore = 0;

            //统计学生最后的得分
            var stuTotal = stuStatList.length;
            for(var j = 0; j < stuTotal; j++) {
                var tmpStu = stuStatList[j];

                //更新用户的正确率
                if(tmpStu['right_num'] == 0) {
                    var rightNum = 0;
                } else {
                    // wth注释
                    //var rightNum = parseFloat((tmpStu['right_num'] / (tmpStu['right_num'] + tmpStu['wrong_num'] + tmpStu['not_do_num'])).toFixed(1));
                    // wth添加
                    var rightNum = parseFloat((tmpStu['right_num'] / (tmpStu['right_num'] + tmpStu['wrong_num'] + tmpStu['not_do_num'])));
                }

                //记录平均正确率
                totalRate += rightNum;

                var tmpScore = 0;
                if(tmpStu['right_num'] != 0) {
                    tmpScore = classroomBaseInfo.questions_num == tmpStu['right_num'] ? 100 :  classroomBaseInfo.avg_score *  tmpStu['right_num'];
                }

                var stuId = tmpStu['stu_id'];

                stuStatList[j]['right_rate'] = rightNum;
                stuStatList[j]['score'] = tmpScore;

                //记录学生的总分
                totalScore += tmpScore;

                //更新用户数据得分
                if(stuInfos[stuId]) {
                    stuInfos[stuId]['score'] = tmpScore;
                    stuInfos[stuId]['right_rate'] = rightNum;
                }
            }

            // wth添加 平均正确率计算
            var total_right_rate = 0;
            if(questionInfos){
                for(var question in questionInfos){
                    total_right_rate = total_right_rate + questionInfos[question]["right_rate"];
                }
            }

            // wth注释
            /*//计算班级的平均正确率
            classroomBaseInfo['right_rate'] = stuTotal == 0 ? 0 : ((totalRate / stuTotal) * 100).toFixed(2);

            //计算班级平均分
            classroomBaseInfo['stu_avg_score'] = stuTotal == 0 ? 0 : parseFloat((totalScore / stuTotal).toFixed(1));*/

            // wth添加
            //计算班级的平均正确率  单题答对率的总和/总题数
            //classroomBaseInfo['right_rate'] = stuTotal == 0 ? 0 : ((totalRate / (classroomBaseInfo['userLen']+classroomBaseInfo['unfinishedNum'])) * 100).toFixed(1);//单题答对率的总和/在线数
            //classroomBaseInfo['right_rate'] = classroomBaseInfo.questions_num == 0 ? 0 : ((total_right_rate / classroomBaseInfo.questions_num) * 100).toFixed(1);//单题答对率的总和/总题数

            // classroomBaseInfo['right_rate'] = stuTotal == 0 ? 0 : parseFloat((totalScore / (classroomBaseInfo['userLen']+classroomBaseInfo['unfinishedNum'])).toFixed(1));//叶璇说和平均分是一样的
            
            //下面计算会出现 bug:64662问题
            //classroomBaseInfo['right_rate'] = stuTotal == 0 ? 0 : parseFloat((totalScore / (classroomBaseInfo['userLen'])).toFixed(1));//叶璇说和平均分是一样的
            //计算班级平均分=总得分/总题数
            //classroomBaseInfo['stu_avg_score'] = stuTotal == 0 ? 0 : parseFloat((totalScore / (classroomBaseInfo['userLen'])).toFixed(1));

			//hsm 修复bug:64662 ，平均分和平均正确率这两个数值一样
			classroomBaseInfo['right_rate'] = classroomBaseInfo.questions_num == 0 ? 0 : ((total_right_rate / classroomBaseInfo.questions_num) * 100).toFixed(1);//单题答对率的总和/总题数
			classroomBaseInfo['stu_avg_score'] = classroomBaseInfo.questions_num == 0 ? 0 : ((total_right_rate / classroomBaseInfo.questions_num) * 100).toFixed(1);//单题答对率的总和/总题数
			
            if((classroomBaseInfo['userLen']+classroomBaseInfo['unfinishedNum']) == 0){
                classroomBaseInfo['right_rate'] = 0+"";
                classroomBaseInfo['stu_avg_score'] = 0;
            }else{
                var rr = classroomBaseInfo['right_rate']+"";
                var tmp = rr.split(".");
                if(tmp.length == 2 && tmp[1] == "0"){
                    classroomBaseInfo['right_rate'] = tmp[0];
                }

                var sas = classroomBaseInfo['stu_avg_score']+"";
                var tmp = sas.split(".");
                if(tmp.length == 2 && tmp[1] == "0"){
                    classroomBaseInfo['stu_avg_score'] = Number(tmp[0]);
                }
            }
        }
    };

    /*---------------------/每次作答数据处理----------------------*/


    /*---------------------处理学生的具体答题信息----------------------*/
    var StudentAnswerHandle = {
        //保存学生数据
        'save' : function(dataList){
            var dataStr = JSON.stringify(dataList);
            sessionStorage.setItem(presenter.student_ans_key, dataStr);
        },

        //获取所有数据，或是某个学生的数据
        'get' : function(stuId){
            stuId = stuId ? stuId : false;

            var tmp = sessionStorage.getItem(presenter.student_ans_key);
            if(tmp == null) {
                return {};
            }

            tmp = JSON.parse(tmp);
            if(stuId) {
                if(tmp[stuId]) {
                    return tmp[stuId];
                } else {
                    return {};
                }
            } else {
                return tmp;
            }
        }
    };

    /*---------------------/处理学生的具体答题信息----------------------*/


    /*---------------------答案数据解析----------------------*/
    var SummaryQtiAssessmentParser = {
        //xml答案分类解析
        parseQTIxml: function (eventData) {
            var qAssessmentModel = this.getDataQuestionAssessmentModel(eventData["value"]["questionType"]);
            if (qAssessmentModel != null) {
                var key = [];
                key = this.keepKeyOrder(qAssessmentModel);

                if (eventData["value"]["correctAnswer"] == undefined || eventData["value"]["correctAnswer"].length == 0) {
                    eventData["value"]["correctAnswer"] = [];
                    //获取正确答案
                    for (var keyindex = 0; keyindex < key.length; keyindex++) {
                        if (qAssessmentModel["correctAnswer"][key[keyindex]] != undefined) {
                            var canswer = qAssessmentModel["correctAnswer"][key[keyindex]]["value"];
                            if (canswer instanceof Array) {
                                eventData["value"]["correctAnswer"] = eventData["value"]["correctAnswer"].concat(canswer);
                            } else {
                                eventData["value"]["correctAnswer"].push(canswer);
                            }
                        }
                    }
                }
            }
            //只对多选题的答题进行排序，其他题型不排序 修复bug:101680
            if (eventData.value && eventData.value.questionType === 'multiplechoice') {
	            eventData["value"]["correctAnswer"].sort();//排序
            }

            var questionInfo = eventData["value"];
            if (questionInfo != undefined) {
                //获取题目类型
                var questionType = questionInfo["questionType"];

                var answers = [];
                if (questionInfo["answers"].length > 0) {
                    var domParser;
                    var typeOfJson = false;//默认xml
                    var answer0 = questionInfo["answers"][0]["answer"];
                    if(answer0 && (typeof answer0) == "string" && answer0.indexOf("<assessmentResult") == 0){//xml格式
                        typeOfJson = false;
                        domParser = new DOMParser();
                    }else{//JSON格式
                        typeOfJson = true;
                    }

                    //解析每一个相同的答案
                    for (var answerindex = 0; answerindex < questionInfo["answers"].length; answerindex++) {

                        //兼容答题器无法得到结果状态问题
                        if (QuestionType.CHOICE == questionType || QuestionType.MULTIPLE_CHOICE == questionType || QuestionType.JUDGE == questionType || QuestionType.TEXT_ENTRY) {
                            if (player.getPlayerServices().getModule('BasicQuestionViewer') != null) {
                                var qti = player.getPlayerServices().getModule('BasicQuestionViewer').getCurrentQti();
                                // wth xml格式
                                if(typeOfJson == false){
                                    qti.setState(questionInfo["answers"][answerindex]["answer"]);
                                    questionInfo["answers"][answerindex]["answer"] = qti.getState();
                                }else{
                                    // wth添加 json格式
                                    qti.setAnswer(JSON.parse(questionInfo["answers"][answerindex]["answer"]));
                                    questionInfo["answers"][answerindex]["answer"] = qti.getAnswer();
                                }
                            }else{
                                if(typeOfJson == true){
                                    questionInfo["answers"][answerindex]["answer"] = JSON.parse(questionInfo["answers"][answerindex]["answer"]);
                                }
                            }
                        }

                        var answer = {};
                        answer["userIds"] = questionInfo["answers"][answerindex]["userIds"];

                        if(typeOfJson == true){//JSON格式

                            var completionStatus = COMPLETIONSTATUS.INCOMPLETE;
                            var isPass = true,isIncomplete = true;
                            for(var questionId in questionInfo["answers"][answerindex]["answer"]){

                                //superman兼容
                                // if (questionId != "RESPONSE_1-1") {
                                //     continue;
                                // }

                                if (questionInfo["flag"] != "image") { //正常题目
                                    //
                                    if(isIncomplete == true && questionInfo["answers"][answerindex]["answer"][questionId]["state"] != COMPLETIONSTATUS.INCOMPLETE){
                                        isIncomplete = false;
                                    }
                                    if(questionInfo["answers"][answerindex]["answer"][questionId]["state"] != COMPLETIONSTATUS.PASSED){
                                        isPass = false;
                                    }
                                    if(!questionInfo["answers"][answerindex]["answer"][questionId]["state"]){//答题器没有state
                                        if(questionInfo["answers"][answerindex]["answer"][questionId].value &&
                                            questionInfo["answers"][answerindex]["answer"][questionId].value.length &&
                                            eventData.value.correctAnswer && eventData.value.correctAnswer.length == questionInfo["answers"][answerindex]["answer"][questionId].value.length){
                                            var pass = true;
                                            questionInfo["answers"][answerindex]["answer"][questionId].value.sort();//排序
                                            for(var t=0; t<eventData.value.correctAnswer.length; t++){
                                                if(eventData.value.correctAnswer[t] != questionInfo["answers"][answerindex]["answer"][questionId].value[t]){
                                                    pass = false;
                                                    break;
                                                }
                                            }
                                            if(pass == true){
                                                isPass = true;
                                            }
                                            isIncomplete = false;
                                        }
                                    }
                                    //
                                } else if (questionInfo["flag"] && questionInfo["flag"] == "image") {//截图工具

                                        if(questionInfo["answers"][answerindex]["answer"][questionId].value && questionInfo["answers"][answerindex]["answer"][questionId].value.length && eventData.value.correctAnswer && eventData.value.correctAnswer.length == questionInfo["answers"][answerindex]["answer"][questionId].value.length){
                                            var pass = true;
                                            for(var t=0; t<eventData.value.correctAnswer.length; t++){
                                                if(eventData.value.correctAnswer[t] != questionInfo["answers"][answerindex]["answer"][questionId].value[t]){
                                                    pass = false;
                                                    break;
                                                }
                                            }
                                            if(pass == true){
                                                isPass = true;
                                            } else {
                                                isPass = false;
                                            }
                                            isIncomplete = false;
                                        }
                                    //
                                }                   
                            }

                            if(isIncomplete == true){//未完成
                                answer["completionStatus"] = COMPLETIONSTATUS.INCOMPLETE;
                            }else if(isPass == true){
                                answer["completionStatus"] = COMPLETIONSTATUS.PASSED;
                            }else if(isPass != true){
                                answer["completionStatus"] = COMPLETIONSTATUS.FAILED;
                            }

                            var value = [];
                            if(QuestionType.CHOICE == questionType || QuestionType.MULTIPLE_CHOICE == questionType || QuestionType.JUDGE == questionType){
                                for(var questionId in questionInfo["answers"][answerindex]["answer"]){
                                    value = questionInfo["answers"][answerindex]["answer"][questionId]["value"];
                                    break;
                                }
                                answer["candidateResponse"] = value;
                            }else if(QuestionType.TEXT_ENTRY){
                                answer["candidateResponse"] = [];
                                for(var questionId in questionInfo["answers"][answerindex]["answer"]){
                                    value = questionInfo["answers"][answerindex]["answer"][questionId]["value"];
                                    answer["candidateResponse"].push(value);
                                }
                            }


                            if (eventData["value"]["correctUserIds"] == undefined) {
                                eventData["value"]["correctUserIds"] = [];
                            }
                            if (answer["completionStatus"] == "PASSED") {
                                eventData["value"]["correctUserIds"] = eventData["value"]["correctUserIds"].concat(answer["userIds"]);
                            }
                            answers.push(answer);

                        }else{//xml格式
                            var xmlDoc = domParser.parseFromString(questionInfo["answers"][answerindex]["answer"], 'text/xml');

                            /**
                             * 开始解析公共部分
                             */
                            answer = this.parseGlobalResult(answer, xmlDoc);

                            /**
                             * 解析不同题型，对应的答题结果
                             */
                            var itemResult = xmlDoc.getElementsByTagName("itemResult")[0];
                            var responseVariableList = itemResult.getElementsByTagName("responseVariable");
                            for (var rindex = 0; rindex < responseVariableList.length; rindex++) {
                                var responseVariable = responseVariableList[rindex];
                                var identifier = responseVariable.getAttribute("identifier");
                                if (this.startWith(identifier, "RESPONSE")) { // 以 RESPONSE 开头的节点就是答题结果
                                    /********************* 根据不同题型，解析答案 ***********************/
                                    //answer["answerString"] = questionInfo["answers"][answerindex]["answer"];
                                    if (QuestionType.CHOICE == questionType) {
                                        // 单选题
                                        this.parseResultChoice(answer, responseVariable);
                                    } else if (QuestionType.MULTIPLE_CHOICE == questionType) {
                                        // 多选题
                                        this.parseResultMultipleChoice(answer, responseVariable);
                                    } else if (QuestionType.TEXT_ENTRY == questionType || questionType == QuestionType.ARITHMETIC) {
                                        // 填空题
                                        this.parseResultTextentry(answer, qAssessmentModel, responseVariable);
                                    } else if (QuestionType.MATCH == questionType || QuestionType.LINKUP == questionType || QuestionType.TABLE == questionType || questionType == QuestionType.MEMORYCARD) {
                                        // 连线题
                                        this.parseResultMatch(answer, responseVariable);
                                    } else if (QuestionType.ORDER == questionType || QuestionType.SEQENCING == questionType) {
                                        // 排序题
                                        this.parseResultOrder(answer, responseVariable);
                                    } else if (QuestionType.JUDGE == questionType) {
                                        // 判断题
                                        this.parseResultJudge(answer, responseVariable);
                                    } else if (QuestionType.GRAPHIC_GAP_MATCH == questionType) {
                                        // 拼图题
                                        this.parseResultGraphGapMatch(answer, responseVariable);
                                    }
                                }
                            }
                            if (eventData["value"]["correctUserIds"] == undefined) {
                                eventData["value"]["correctUserIds"] = [];
                            }
                            if (answer["completionStatus"] == "PASSED") {
                                eventData["value"]["correctUserIds"] = eventData["value"]["correctUserIds"].concat(answer["userIds"]);
                            }
                            answers.push(answer);
                        }
                    }
                    eventData["value"]["answers"] = this.setAnswers(questionType, answers);
                }
            }
        },

        //设置答案
        setAnswers: function (type, ansewers) {
            var resAnsers = [];

            for (var i = 0; i < ansewers.length; i++) {
                var tmp = {
                    isRight: ansewers[i].completionStatus == 'PASSED' ? true : false,
                    userIds: ansewers[i].userIds
                };

                if (type == QuestionType.TEXT_ENTRY) {
                    var tmpText = [];
                    for (var j = 0; j < ansewers[i].candidateResponse.length; j++) {
                        if (ansewers[i].candidateResponse[j].length > 1) {
                            tmpText[j] = ansewers[i].candidateResponse[j].join('');
                        } else {
                            tmpText[j] = ansewers[i].candidateResponse[j];
                        }
                    }

                    tmp.answer = tmpText;
                } else {
                    tmp.answer = ansewers[i].candidateResponse;
                }

                resAnsers[i] = tmp;
            }

            return resAnsers;
        },

        //获取qti题型题目内容
        getDataQuestionAssessmentModel: function (qtype) {
            var model = null;
            if (QuestionType.LINKUP == qtype) {
                if (player.getPlayerServices().getModule('LinkUp') != null)
                    model = player.getPlayerServices().getModule('LinkUp').getDataQuestionAssessmentModel();
            } else if (QuestionType.TABLE == qtype) {
                if (player.getPlayerServices().getModule('Table') != null)
                    model = player.getPlayerServices().getModule('Table').getDataQuestionAssessmentModel();
            } else if (QuestionType.MEMORYCARD == qtype) {
                if (player.getPlayerServices().getModule('MemoryCard') != null)
                    model = player.getPlayerServices().getModule('MemoryCard').getDataQuestionAssessmentModel();
            } else if (QuestionType.SEQENCING == qtype) {
                if (player.getPlayerServices().getModule('Seqencing') != null)
                    model = player.getPlayerServices().getModule('Seqencing').getDataQuestionAssessmentModel();
            } else if (QuestionType.CHOICE == qtype || QuestionType.MULTIPLE_CHOICE == qtype || QuestionType.TEXT_ENTRY == qtype ||
                QuestionType.MATCH == qtype || QuestionType.ORDER == qtype || QuestionType.JUDGE == qtype || QuestionType.GRAPHIC_GAP_MATCH == qtype) {
                if (player.getPlayerServices().getModule('BasicQuestionViewer') != null)
                    model = player.getPlayerServices().getModule('BasicQuestionViewer').getDataQuestionAssessmentModel();
            }
            return model;
        },

        keepKeyOrder: function (assessmentModel) {
            var keyArray = [];
            var keyString = [];
            var order = 0;
            if (assessmentModel.modelMap != undefined) {
                for (var key in assessmentModel.modelMap) {
                    if (key != undefined && key.length) {
                        keyString[order] = key;
                        var keyvalue = key.substr(9);
                        var result = keyvalue.split("-");
                        keyvalue = "";
                        for (var resultindex = 0; resultindex < result.length; resultindex++) {
                            keyvalue += result[resultindex];
                        }
                        keyvalue = parseInt(keyvalue);
                        keyArray[order] = keyvalue;
                        order++;
                    }
                }
            } else if (assessmentModel.model != undefined) {
                for (var kindex = 0; kindex < assessmentModel.model.length; kindex++) {
                    var key = assessmentModel.model[kindex]["modelId"];
                    if (key != undefined && key.length) {
                        keyString[order] = key;
                        var keyvalue = key.substr(9);
                        var result = keyvalue.split("-");
                        keyvalue = "";
                        for (var resultindex = 0; resultindex < result.length; resultindex++) {
                            keyvalue += result[resultindex];
                        }
                        keyvalue = parseInt(keyvalue);
                        keyArray[order] = keyvalue;
                        order++;
                    }
                }
            }

            var array = keyArray;
            var i = 1, j, len = array.length, key, keystr;
            for (; i < len; i++) {
                j = i;
                key = array[j];
                keystr = keyString[j];
                while (--j > -1) {
                    if (array[j] > key) {
                        array[j + 1] = array[j];
                        keyString[j + 1] = keyString[j];
                    }
                    else {
                        break;
                    }
                }
                array[j + 1] = key;
                keyString[j + 1] = keystr;
            }
            return keyString;
        },
        parseGlobalResult: function (answer, xmlDoc) {
            var itemResult = xmlDoc.getElementsByTagName("itemResult")[0];
            var outcomeVariableList = itemResult.getElementsByTagName("outcomeVariable");
            var responseVariableList = itemResult.getElementsByTagName("responseVariable");

            for (var eindex = 0; eindex < outcomeVariableList.length; eindex++) {
                var outcomeVariable = outcomeVariableList[eindex];
                var identifier = outcomeVariable.getAttribute("identifier");
                if (identifier != undefined && identifier != null) {
                    if ("completionStatus".toUpperCase() === identifier.toUpperCase()) {
                        var completionStatus = outcomeVariable.getElementsByTagName("value")[0].firstChild.nodeValue;
                        var value = $.trim(completionStatus);
                        var status = this.getStatusByName(value);
                        answer["completionStatus"] = status;
                    } else if ("SCORE".toUpperCase() === identifier.toUpperCase()) {
                        var score = outcomeVariable.getElementsByTagName("value")[0].firstChild.nodeValue;
                        var value = $.trim(score);
                        answer["score"] = value;
                    }
                }
            }

            for (var rindex = 0; rindex < responseVariableList.length; rindex++) {
                var responseVariable = responseVariableList[rindex];
                var identifier = responseVariable.getAttribute("identifier");
                if (identifier != undefined && identifier != null) {
                    if ("duration".toUpperCase() === identifier.toUpperCase()) {
                        var candidateResponse = responseVariable.getElementsByTagName("candidateResponse")[0];
                        if (candidateResponse.getElementsByTagName("value") != undefined) {
                            var value = candidateResponse.getElementsByTagName("value")[0].firstChild.nodeValue;
                            var duration = $.trim(value);
                            answer["duration"] = duration;
                        }
                    } else if ("numAttempts".toUpperCase() === identifier.toUpperCase()) {
                        var candidateResponse = responseVariable.getElementsByTagName("candidateResponse")[0];
                        if (candidateResponse.getElementsByTagName("value") != undefined) {
                            var value = candidateResponse.getElementsByTagName("value")[0].firstChild.nodeValue;
                            var numAttempts = $.trim(value);
                            answer["numAttempts"] = numAttempts;
                        }
                    }
                }
            }
            return answer;
        },
        getStatusByName: function (value) {
            if (value != null && "" != $.trim(value)) {
                var v = value.toUpperCase();
                for (var status in COMPLETIONSTATUS) {
                    if (COMPLETIONSTATUS[status] == v) {
                        return COMPLETIONSTATUS[status];
                    }
                }
            }
            return COMPLETIONSTATUS["UNKNOW"];
        },
        startWith: function (d, s) {
            if (s == null || s == "" || d.length == 0 || s.length > d.length)
                return false;
            return (d.substr(0, s.length) == s);

        },
        /****************************************************************************************/
        /**
         * 解析单选题答题结果
         * @param answer
         * @param xmlDoc
         */
        parseResultChoice: function (answer, xmlDoc) {
            /** 标准答案 */
            return this.parseCandidateChoiceResponse(answer, xmlDoc);
        },
        parseCandidateChoiceResponse: function (answer, root) {
            if (root.getElementsByTagName("candidateResponse") != undefined) {
                var candidateResponse = root.getElementsByTagName("candidateResponse");
                var valueElementList = candidateResponse[0].getElementsByTagName("value");
                var candidateResponseResponse = [];
                if (valueElementList != undefined) {
                    for (var index = 0; index < valueElementList.length; index++) {
                        var valueElementIter = valueElementList[index].firstChild.nodeValue;
                        var value = $.trim(valueElementIter);
                        candidateResponseResponse.push(value);
                    }
                }
                answer["candidateResponse"] = candidateResponseResponse;
            }
        },
        /**
         * 解析多选题答题结果
         * @param answer
         * @param xmlDoc
         */
        parseResultMultipleChoice: function (answer, xmlDoc) {
            /** 标准答案 */
            this.parseCandidateChoiceResponse(answer, xmlDoc);
        },
        /**
         * 解析填空题答题结果
         * @param answer
         * @param assessment
         * @param responseVariable
         */
        parseResultTextentry: function (answer, assessment, responseVariable) {
            var candidateResponse = responseVariable.getElementsByTagName("candidateResponse")[0];
            var identifier = responseVariable.getAttribute("identifier");
            var idx = identifier.indexOf("_");
            var sequence = identifier.substring(idx + 1);
            var sSequence = sequence.split("-");
            var textIdx = parseInt(sSequence[1]);
            var valueList = [];
            if (candidateResponse.getElementsByTagName("value")[0] != undefined && candidateResponse.getElementsByTagName("value")[0].firstChild != undefined)
                valueList = candidateResponse.getElementsByTagName("value")[0].firstChild.nodeValue;
            var valueSize = valueList.length;
            var isOneMore = valueSize > 1;
            var sValue = null;
            if (isOneMore)
                sValue = [];
            var candidateResponseResponse = answer["candidateResponse"];
            if (candidateResponseResponse == null || candidateResponseResponse == undefined) {
                candidateResponseResponse = [];
                var size = Object.keys(assessment["correctAnswer"]).length;
                for (var i = 0; i < size; i++)
                    candidateResponseResponse.push("");
                answer["candidateResponse"] = candidateResponseResponse;
            }
            for (var i = 0; i < valueList.length; i++) {
                var valueElement = valueList[i];
                var value = valueElement;
                if (isOneMore) {
                    sValue[i] = value;
                    candidateResponseResponse[textIdx - 1] = sValue;
                } else {
                    candidateResponseResponse[textIdx - 1] = value;
                }
            }
        },
        /**
         * 解析连线题答题结果
         * @param answer
         * @param xmlDoc
         */
        parseResultMatch: function (answer, xmlDoc) {
            this.parseCandidateChoiceResponse(answer, xmlDoc);
        }, /**
         * 解析排序题答题结果
         * @param answer
         * @param xmlDoc
         */
        parseResultOrder: function (answer, xmlDoc) {
            this.parseCandidateChoiceResponse(answer, xmlDoc);
        },

        /**
         * 解析判断题答题结果
         * @param answer
         * @param xmlDoc
         */
        parseResultJudge: function (answer, xmlDoc) {
            this.parseCandidateChoiceResponse(answer, xmlDoc);
        },

        /**
         * 解析拼图题答题结果
         * @param answer
         * @param xmlDoc
         */
        parseResultGraphGapMatch: function (answer, xmlDoc) {
            this.parseCandidateChoiceResponse(answer, xmlDoc);
        }

    };
    /*---------------------/答案数据解析----------------------*/

    return presenter;
}

]]>

</presenter>


<resources>

<file src='./resources/choice_single.xml' />
<file src='./resources/locations/bo/lang.json' />
<file src='./resources/locations/bo_CN/lang.json' />
<file src='./resources/locations/zh/lang.json' />
<file src='./resources/locations/zh_CN/lang.json' />
<file src='./resources/locations/zh_HK/lang.json' />
<file src='./resources/wood/images/bg.jpg' />
<file src='./resources/wood/images/check.png' />
<file src='./resources/wood/images/check_on.png' />
<file src='./resources/wood/images/close.png' />
<file src='./resources/wood/images/close_on.png' />
<file src='./resources/wood/images/footer_back_normal_right.png' />
<file src='./resources/wood/images/icon_close.png' />
<file src='./resources/wood/images/icon_ktflower.png' />
<file src='./resources/wood/images/num_bg.png' />
<file src='./resources/wood/images/radio.png' />
<file src='./resources/wood/images/radio_on.png' />
<file src='./resources/wood/images/tab_on.png' />


</resources>

</addon>