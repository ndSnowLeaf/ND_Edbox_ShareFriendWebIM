<?xml version='1.0' encoding='UTF-8' ?>
<addon id='PointSequencing'>
<properties>

                <property name="question_id" displayName="question_title" type="string" isLocalized="false" />
                <property name="question_url" displayName="question_content" type="jsonFile" isLocalized="false" />

</properties>

<dependencies>

</dependencies>

<css>



</css>


<view>


</view>


<presenter>

<![CDATA[(function () {
    var Presenter = BasicPresenter.extend({
        // getQuestionInfo: function () {     return {         id: this.presenterModel.question_id,         type_code:
        // 'pointsequencing',         type_name: '点排序',         url: this.presenterModel.question_id,         dispatchOnly: true
        //     } },
        /**
         * Presenter的初始化方法
         * @private
         */
        $init: function () {
            this._super();
            this.model = [];
            this.componentSetting = {};
            //定义日志
            this.logger.appendHandler(function (message, context) {
                console.log(message);
            }, {level: Logger.DEBUG});
        },
        /****以下开始为icPlayer的生命周期方法*****/
        run: function (view, model) {
            //将View的width和height设置为0
            view.style['width'] = 0;
            view.style['height'] = 0;
            this.presenterModel = model;
            var self = this;
            //适配颗粒中定义的数据
            self._adaptedOriginData(model);
            self.logger.debug("PointSequencing model " + JSON.stringify(model));
            //构建组件配置
            self._configComponents();
            //加载启动器
            self.model.push({
                name: "Components",
                type: "json",
                text: JSON.stringify(self.componentSetting)
            });
            return self.$requireComponent('ComponentLoader', self.model, $(view), {
                left: 0,
                top: 0,
                width: 0,
                height: 0
            });
        },
        destroy: function () {},
        /****以下开始为Presenter的私有方法*****/
        _adaptedOriginData: function (model) {
            var self = this;
            //添加题型所需要的数据
            this.model.push({"name": "questionType", "type": "string", "value": "PointSequencingRemake"});
            this.model.push({
                name: "TimerController",
                type: "string",
                value: JSON.stringify([
                    {
                        name: "timer_type",
                        type: "string",
                        value: model.question_url.timer.timer_type
                    }, {
                        name: "time_limit",
                        type: "string",
                        value: parseInt(model.question_url.timer.time_minute) * 60 + parseInt(model.question_url.timer.time_second)
                    }, {
                        name: "isPauseOnSubmit",
                        type: "boolean",
                        value: "true"
                    }
                ])
            });
            this.model.push({
                name: "InteractionSubmitButton",
                type: "string",
                value: JSON.stringify([
                    {
                        name: "can_modify",
                        type: "string",
                        value: false
                    }, {
                        name: "linkQuestionType",
                        type: "string",
                        value: "pointsequencing"
                    }, {
                        name: "linkQuestionId",
                        type: "string",
                        value: model['question_id']
                    }, {
                        name: "view_type",
                        type: "string",
                        value: "new_em_button"
                    }
                ])
            });
            this.model.push({
                name: "InteractionTimer",
                type: "string",
                value: JSON.stringify([
                    {
                        "name": "view_type",
                        "type": "string",
                        "value": "new_timer"
                    }
                ])
            });
            this.model.push({
                name: "PointSequencingRemake",
                type: "string",
                value: JSON.stringify([
                    {
                        "name": "questionId",
                        "type": "string",
                        "value": model.question_id
                    }, {
                        name: "questionData",
                        type: "json",
                        text: JSON.stringify(model.question_url)
                    }
                ])
            });

            this.model.push({
                name: "ObjectiveInteractionLayout",
                type: "string",
                value: JSON.stringify([
                    {
                        name: "questionType",
                        type: "string",
                        value: "Compare"
                    }, {
                        name: "specialTemplate",
                        type: "string",
                        value: "false"
                    }
                ])
            });
            this.model.push({
                name: "AnswerFlowController",
                type: "string",
                value: JSON.stringify([
                    {
                        name: "showResultOnSubmit",
                        type: "string",
                        value: "true"
                    }
                ])
            });
            this.model.push({name: "ObjectiveStatisticsRemake", type: "string", value: JSON.stringify([])});
            this.model.push({
                name: 'ClassroomStatusController',
                type: 'string',
                value: JSON.stringify([
                    {
                        name: 'questionId',
                        type: 'string',
                        value: model.question_id
                    }
                ])
            });
        },
        _configComponents: function () {
            //根据不同的运行场景定义需要加载的组件

            if (this.isPPTShell || this.isWeb) {
                //如果是PPTShell的场景
                this.componentSetting = {
                    controllers: [
                        {
                            presenter: "InteractionStateRecoverFilter"
                        }, {
                            presenter: 'I18nFilter'
                        }, {
                            presenter: "AnswerFlowController",
                            depends: [
                                {
                                    property: "TimerService",
                                    presenter: "TimerController"
                                }
                            ]
                        }, {
                            presenter: "ObjectiveStatController"
                        }, {
                            presenter: 'ClassroomStatusController'
                        }
                    ],
                    layout: "ObjectiveInteractionLayout",
                    components: [
                        {
                            presenter: "InteractionTimer",
                            renderTo: "TopLeftPanel"
                        }, {
                            presenter: "InteractionSubmitButton",
                            renderTo: "BottomPanel"
                        }, {
                            presenter: "PointSequencingRemake",
                            renderTo: "CenterPanel"
                        }, {
                            presenter: "ObjectiveStatisticsRemake",
                            renderTo: "StatisticsPanel"
                        }
                    ]
                };
            } else if (this.isApp) {
                //如果是学生端Pad或Web的场景
                this.componentSetting = {
                    controllers: [
                        {
                            presenter: "InteractionStateRecoverFilter"
                        }, {
                            presenter: 'I18nFilter'
                        }, {
                            presenter: "AnswerFlowController",
                            depends: [
                                {
                                    property: "TimerService",
                                    presenter: "TimerController"
                                }
                            ]
                        }, {
                            presenter: "AnswerProgressController"
                        }
                    ],
                    layout: "ObjectiveInteractionLayout",
                    components: [
                        {
                            presenter: "InteractionTimer",
                            renderTo: "TopLeftPanel"
                        }, {
                            presenter: "InteractionSubmitButton",
                            renderTo: "TopRightPanel"
                        }, {
                            presenter: "PointSequencingRemake",
                            renderTo: "CenterPanel"
                        }
                    ]
                };
            }
        }
    }, "PointSequencing");

    window.AddonPointSequencing_create = function () {
        return new Presenter();
    }
})();

]]>

</presenter>


<resources>

<file src='./resources/locations/bo_CN/lang.json' />
<file src='./resources/locations/bo_CN/zh.po' />
<file src='./resources/locations/zh/lang.json' />
<file src='./resources/locations/zh/zh.po' />
<file src='./resources/locations/zh_CN/lang.json' />
<file src='./resources/locations/zh_CN/zh_CN.po' />


</resources>

</addon>