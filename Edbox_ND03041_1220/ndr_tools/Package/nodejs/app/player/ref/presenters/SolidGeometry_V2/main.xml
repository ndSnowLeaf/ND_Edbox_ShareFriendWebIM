<?xml version='1.0' encoding='UTF-8'?><addon id="templateid"><properties/><dependencies><jsDependency><javaScript name="threejs" version="73.1"/><javaScript name="threejs_canvasrender" version="73.1"/><javaScript name="threejs_projector" version="73.1"/><javaScript name="common_css" version="1.0.0"/><javaScript name="webglControl" version="1.0.0"/></jsDependency></dependencies><css><![CDATA[.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_point .cube_point_list .cube_point_cell.on .txt,.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_point .cube_point_list .cube_point_cell.on a .txt,.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_tool_cell .a_item.hover .txt{color:#fff}.addon_SolidGeometry_V2{-webkit-user-select:none;-webkit-touch-callout:none;user-select:none;-webkit-tap-highlight-color:transparent}.addon_SolidGeometry_V2 .com_CubeGeometry abbr,.addon_SolidGeometry_V2 .com_CubeGeometry fieldset,.addon_SolidGeometry_V2 .com_CubeGeometry iframe,.addon_SolidGeometry_V2 .com_CubeGeometry img{border:0}.addon_SolidGeometry_V2 .com_CubeGeometry *,.addon_SolidGeometry_V2 .com_CubeGeometry input,.addon_SolidGeometry_V2 .com_CubeGeometry select,.addon_SolidGeometry_V2 .com_CubeGeometry textarea{font-family:'Microsoft YaHei',Helvetica,Arial,sans-serif}.addon_SolidGeometry_V2 .com_CubeGeometry a,.addon_SolidGeometry_V2 .com_CubeGeometry input:focus{outline:0}.addon_SolidGeometry_V2 .com_CubeGeometry *{box-sizing:border-box;vertical-align:baseline}.addon_SolidGeometry_V2 .com_CubeGeometry dd,.addon_SolidGeometry_V2 .com_CubeGeometry dl,.addon_SolidGeometry_V2 .com_CubeGeometry form,.addon_SolidGeometry_V2 .com_CubeGeometry h1,.addon_SolidGeometry_V2 .com_CubeGeometry h2,.addon_SolidGeometry_V2 .com_CubeGeometry h3,.addon_SolidGeometry_V2 .com_CubeGeometry h4,.addon_SolidGeometry_V2 .com_CubeGeometry h5,.addon_SolidGeometry_V2 .com_CubeGeometry h6,.addon_SolidGeometry_V2 .com_CubeGeometry p{margin:0}.addon_SolidGeometry_V2 .com_CubeGeometry ins{text-decoration:none}.addon_SolidGeometry_V2 .com_CubeGeometry del{text-decoration:line-through}.addon_SolidGeometry_V2 .com_CubeGeometry a,.addon_SolidGeometry_V2 .com_CubeGeometry a:hover{text-decoration:none}.addon_SolidGeometry_V2 .com_CubeGeometry input,.addon_SolidGeometry_V2 .com_CubeGeometry select{vertical-align:middle}.addon_SolidGeometry_V2 .com_CubeGeometry img{border:none;vertical-align:top}.addon_SolidGeometry_V2 .com_CubeGeometry address,.addon_SolidGeometry_V2 .com_CubeGeometry caption,.addon_SolidGeometry_V2 .com_CubeGeometry cite,.addon_SolidGeometry_V2 .com_CubeGeometry code,.addon_SolidGeometry_V2 .com_CubeGeometry dfn,.addon_SolidGeometry_V2 .com_CubeGeometry em,.addon_SolidGeometry_V2 .com_CubeGeometry i,.addon_SolidGeometry_V2 .com_CubeGeometry th{font-style:normal;font-family:'Microsoft YaHei',Helvetica,Arial,sans-serif}.addon_SolidGeometry_V2 .com_CubeGeometry ol,.addon_SolidGeometry_V2 .com_CubeGeometry ul{margin:0;padding:0;list-style:none}.addon_SolidGeometry_V2 .com_CubeGeometry h1,.addon_SolidGeometry_V2 .com_CubeGeometry h2,.addon_SolidGeometry_V2 .com_CubeGeometry h3,.addon_SolidGeometry_V2 .com_CubeGeometry h4,.addon_SolidGeometry_V2 .com_CubeGeometry h5,.addon_SolidGeometry_V2 .com_CubeGeometry h6{font-weight:400}.addon_SolidGeometry_V2 .com_CubeGeometry blockquote,.addon_SolidGeometry_V2 .com_CubeGeometry q{quotes:none}.addon_SolidGeometry_V2 .com_CubeGeometry blockquote:after,.addon_SolidGeometry_V2 .com_CubeGeometry blockquote:before,.addon_SolidGeometry_V2 .com_CubeGeometry q:after,.addon_SolidGeometry_V2 .com_CubeGeometry q:before{content:"";content:none}.addon_SolidGeometry_V2 .com_CubeGeometry legend{display:none}.addon_SolidGeometry_V2 .com_CubeGeometry article,.addon_SolidGeometry_V2 .com_CubeGeometry aside,.addon_SolidGeometry_V2 .com_CubeGeometry details,.addon_SolidGeometry_V2 .com_CubeGeometry figcaption,.addon_SolidGeometry_V2 .com_CubeGeometry figure,.addon_SolidGeometry_V2 .com_CubeGeometry footer,.addon_SolidGeometry_V2 .com_CubeGeometry header,.addon_SolidGeometry_V2 .com_CubeGeometry hgroup,.addon_SolidGeometry_V2 .com_CubeGeometry menu,.addon_SolidGeometry_V2 .com_CubeGeometry nav,.addon_SolidGeometry_V2 .com_CubeGeometry section{display:block}.addon_SolidGeometry_V2 .com_CubeGeometry button,.addon_SolidGeometry_V2 .com_CubeGeometry input,.addon_SolidGeometry_V2 .com_CubeGeometry select,.addon_SolidGeometry_V2 .com_CubeGeometry textarea{outline:0;border:none}.addon_SolidGeometry_V2 .com_CubeGeometry textarea{resize:none}.addon_SolidGeometry_V2 .com_CubeGeometry table{border-collapse:collapse;border-spacing:0}.addon_SolidGeometry_V2 .com_CubeGeometry a,.addon_SolidGeometry_V2 .com_CubeGeometry button,.addon_SolidGeometry_V2 .com_CubeGeometry img,.addon_SolidGeometry_V2 .com_CubeGeometry input,.addon_SolidGeometry_V2 .com_CubeGeometry li,.addon_SolidGeometry_V2 .com_CubeGeometry textarea{-webkit-tap-highlight-color:rgba(255,255,255,0)}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry{text-align:center}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_dot{position:absolute;width:.66667em;height:.66667em;background:#5e5e5e;border:.125em solid #fff;border-radius:50%}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_dot.on{background:#fff;border-color:#11b0b6}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_tool_list{display:block;position:relative;height:2.75em;background-color:#f0f0f0;border:1px solid #619b9c;box-shadow:-1px 1px 7px 0 rgba(4,0,0,.6);z-index:2}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_point .cube_point_list .cube_point_cell.on,.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_tool_cell .a_item.hover{background-color:#11b0b6}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_point .cube_point_list .cube_point_cell.on a{background-color:#11b0b6;width:3.375em;height:100%;display:inline-block}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_point .cube_point_list .cube_point_cell.on::before{width:0}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_point .cube_point_list .cube_point_cell a{width:3.4em;height:100%;display:inline-block}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_fill[data-color=black] .a_item.hover .cube_icon{background:url(resources/wood/images/fill_black_hover.png) center center no-repeat;background-size:1.25em 1.25em}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_fill[data-color=white] .a_item.hover .cube_icon{background:url(resources/wood/images/fill_white_hover.png) center center no-repeat;background-size:1.25em 1.25em}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_fill[data-color=red] .a_item.hover .cube_icon{background:url(resources/wood/images/fill_red_hover.png) center center no-repeat;background-size:1.25em 1.25em}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_fill[data-color=orange] .a_item.hover .cube_icon{background:url(resources/wood/images/fill_orange_hover.png) center center no-repeat;background-size:1.25em 1.25em}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_fill[data-color=yellow] .a_item.hover .cube_icon{background:url(resources/wood/images/fill_yellow_hover.png) center center no-repeat;background-size:1.25em 1.25em}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_fill[data-color=green] .a_item.hover .cube_icon{background:url(resources/wood/images/fill_green_hover.png) center center no-repeat;background-size:1.25em 1.25em}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_fill[data-color=blue] .a_item.hover .cube_icon{background:url(resources/wood/images/fill_blue_hover.png) center center no-repeat;background-size:1.25em 1.25em}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_fill[data-color=purple] .a_item.hover .cube_icon{background:url(resources/wood/images/fill_purple_hover.png) center center no-repeat;background-size:1.25em 1.25em}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_copy .a_item.hover .cube_icon{background:url(resources/wood/images/icon-copy-hover.png) center center no-repeat;background-size:1.25em 1.25em}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_delete .a_item.hover .cube_icon{background:url(resources/wood/images/icon-del-hover.png) center center no-repeat;background-size:1.25em 1.25em}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_tool_cell{float:left;position:relative;width:2.75em;height:2.66667em;cursor:pointer;list-style-type:none}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_tool_cell .a_item{display:inline-block;padding-top:1.83333em;width:2.79166667em;height:100%}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_tool_cell .a_item.hover .cube_icon{-webkit-transform:scale(1.1);transform:scale(1.1);-webkit-transition:-webkit-transform .15s ease-out;transition:-webkit-transform .15s ease-out;transition:transform .15s ease-out;transition:transform .15s ease-out,-webkit-transform .15s ease-out}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_tool_cell:before{content:'';position:absolute;top:.4em;bottom:.4em;right:-1px;width:1px;background-color:#619b9c}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_tool_cell .cube_icon{position:absolute;left:0;top:.35em;width:100%;height:1.25em}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_tool_cell .txt{display:block;width:100%;line-height:1em;font-size:.5em;color:#333}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_sub_item{display:none;position:absolute;top:3.33333em;left:50%;margin-left:-11.45833em;width:22.91667em;background:#f0f0f0;border-radius:.20833em;box-shadow:-1px 1px 7px 0 rgba(4,0,0,.6);list-style-type:none;border:1px solid #619b9c}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_sub_item:before{content:'';position:absolute;left:50%;top:-.457em;margin-left:-.41667em;width:.9583333em;height:.4583333em;z-index:99;background:url(resources/wood/images/triangle.png) no-repeat;background-size:100% 100%}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_color_list{height:3.08333em;border-bottom:1px solid #9bbdbe}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_color_list .cube_color_cell{float:left;position:relative;margin:.375em 0 0 .45833em;width:2.33333em;height:2.33333em;border-radius:.33333em}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_color_list .color_black_dashed:before,.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_color_list .color_orange_dashed:before,.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_color_list .color_red_dashed:before,.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_color_list .color_white_dashed:before{margin-left:-1.67em;margin-top:-1.625em;width:3.41666em;height:3.25em;content:'';display:none;position:absolute;left:50%;top:50%}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_color_list .color_black_dashed:before{background:url(resources/wood/images/dashed-black-hover.png) center center no-repeat;background-size:100% 100%}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_color_list .color_white_dashed:before{background:url(resources/wood/images/dashed-white-hover.png) center center no-repeat;background-size:100% 100%}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_color_list .color_red_dashed:before{background:url(resources/wood/images/dashed-red-hover.png) center center no-repeat;background-size:100% 100%}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_color_list .color_orange_dashed:before{background:url(resources/wood/images/dashed-orange-hover.png) center center no-repeat;background-size:100% 100%}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_color_list .color_yellow_dashed:before{content:'';display:none;background:url(resources/wood/images/dashed-yellow-hover.png) center center no-repeat;background-size:100% 100%;position:absolute;left:50%;top:50%;margin-left:-1.6665em;margin-top:-1.625em;width:3.41666em;height:3.25em}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_color_list .color_blue_dashed:before,.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_color_list .color_green_dashed:before,.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_color_list .color_purple_dashed:before{margin-left:-1.67em;margin-top:-1.625em;width:3.41666em;height:3.25em;display:none;position:absolute;left:50%;top:50%;content:''}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_color_list .color_green_dashed:before{background:url(resources/wood/images/dashed-green-hover.png) center center no-repeat;background-size:100% 100%}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_color_list .color_blue_dashed:before{background:url(resources/wood/images/dashed-blue-hover.png) center center no-repeat;background-size:100% 100%}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_color_list .color_purple_dashed:before{background:url(resources/wood/images/dashed-purple-hover.png) center center no-repeat;background-size:100% 100%}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_fillColor .cube_color_cell:before{content:'';display:none;position:absolute;left:50%;top:50%;margin-left:-1.29167em;margin-top:-1.29167em;width:2.33333em;height:2.33333em;border:.125em solid #fff;border-radius:.41667em;-webkit-box-shadow:0 6px 10px 0 rgba(1,1,1,.45)}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_color_list .cube_color_cell:hover:before,.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_color_list .on:before{display:block}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_color_list .color_black{background:#000}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_color_list .color_white{background:#fff}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_color_list .color_red{background:#fc5300}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_color_list .color_orange{background:#ffa200}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_color_list .color_yellow{background:#ffde00}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_color_list .color_green{background:#5ea700}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_color_list .color_blue{background:#37adff}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_color_list .color_purple{background:#a41fd0}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_color_list .color_black_dashed{background:url(resources/wood/images/dashed-black.png) center center no-repeat;background-size:100% 100%}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_color_list .color_white_dashed{background:url(resources/wood/images/dashed-white.png) center center no-repeat;background-size:100% 100%}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_color_list .color_red_dashed{background:url(resources/wood/images/dashed-red.png) center center no-repeat;background-size:100% 100%}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_color_list .color_orange_dashed{background:url(resources/wood/images/dashed-orange.png) center center no-repeat;background-size:100% 100%}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_color_list .color_yellow_dashed{background:url(resources/wood/images/dashed-yellow.png) center center no-repeat;background-size:100% 100%}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_color_list .color_green_dashed{background:url(resources/wood/images/dashed-green.png) center center no-repeat;background-size:100% 100%}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_color_list .color_blue_dashed{background:url(resources/wood/images/dashed-blue.png) center center no-repeat;background-size:100% 100%}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_color_list .color_purple_dashed{background:url(resources/wood/images/dashed-purple.png) center center no-repeat;background-size:100% 100%}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_opacity{position:relative;padding:0 .41667em 0 4.58333em;height:1.66667em}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_opacity .txt{display:block;position:absolute;left:0;top:0;bottom:0;padding-left:.41667em;width:4.58333em;line-height:1.41667em;color:#333;white-space:nowrap;font-size:1em}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_opacity .txt .font{font-size:.5em}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_opacity .cube_opacity_progress{position:relative;top:.70833em;width:100%;height:.25em;background:#5a5a5a;border-radius:.125em}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_opacity .cube_opacity_level{position:absolute;top:0;left:0;bottom:0;background:#11b0b6;border-radius:.125em}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_opacity .cube_btn{position:absolute;top:-.375em;right:-.25em;width:.54167em;height:1.04167em;background:url(resources/wood/images/btn-level.png) center top no-repeat;background-size:100% 100%}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_opacity .cube_btn:active{background-image:url(resources/wood/images/btn-level-active.png)}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_border_width{overflow:hidden;border-bottom-left-radius:.20833em;border-bottom-right-radius:.20833em;height:1.66667em;width:100%}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_border_width .cube_border_cell{float:left;position:relative;width:25%;height:100%;border-right:1px solid #9bbdbe}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_border_width .cube_border_cell:before{content:'';position:absolute;left:50%;top:50%;margin-left:-2.16667em;width:4.375em;background:#333}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_border_width .cube_border_cell.width_s:before{margin-top:-.04167em;height:.08333em}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_border_width .cube_border_cell.width_n:before{margin-top:-.04167em;height:.125em;border-radius:.08333em}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_border_width .cube_border_cell.width_l:before{margin-top:-.08333em;height:.20833em;border-radius:.125em}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_border_width .cube_border_cell.width_xl:before{margin-top:-.16667em;height:.33333em;border-radius:.16667em;border-right:0 none}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_border_width .cube_border_cell.on,.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_border_width .cube_border_cell:hover{background:#11b0b6}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_border_width .cube_border_cell.on:before,.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_border_width .cube_border_cell:hover:before{background:#fff}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_fill[data-color=black] .cube_icon{background:url(resources/wood/images/fill_black.png) center center no-repeat;background-size:1.25em 1.25em}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_fill[data-color=white] .cube_icon{background:url(resources/wood/images/fill_white.png) center center no-repeat;background-size:1.25em 1.25em}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_fill[data-color=red] .cube_icon{background:url(resources/wood/images/fill_red.png) center center no-repeat;background-size:1.25em 1.25em}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_fill[data-color=orange] .cube_icon{background:url(resources/wood/images/fill_orange.png) center center no-repeat;background-size:1.25em 1.25em}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_fill[data-color=yellow] .cube_icon{background:url(resources/wood/images/fill_yellow.png) center center no-repeat;background-size:1.25em 1.25em}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_fill[data-color=green] .cube_icon{background:url(resources/wood/images/fill_green.png) center center no-repeat;background-size:1.25em 1.25em}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_fill[data-color=blue] .cube_icon{background:url(resources/wood/images/fill_blue.png) center center no-repeat;background-size:1.25em 1.25em}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_fill[data-color=purple] .cube_icon{background:url(resources/wood/images/fill_purple.png) center center no-repeat;background-size:1.25em 1.25em}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_border .cube_icon:before{content:'';position:absolute;left:50%;top:.125em;margin-left:-.5em;width:1em;height:1em;border:1px dashed #fff}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_border[data-color=black] .cube_icon:before{border-color:#000}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_border[data-color=white] .cube_icon:before{border-color:#fff}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_border[data-color=red] .cube_icon:before{border-color:#fc5300}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_border[data-color=orange] .cube_icon:before{border-color:#ffa200}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_border[data-color=yellow] .cube_icon:before{border-color:#ffde00}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_border[data-color=green] .cube_icon:before{border-color:#5ea700}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_border[data-color=blue] .cube_icon:before{border-color:#37adff}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_border[data-color=purple] .cube_icon:before{border-color:#a41fd0}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_point .cube_sub_item{left:auto;margin-left:0;right:-.41667em;width:10.2em}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_point .cube_sub_item:before{left:auto;margin-left:0;right:1.29em}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_point .cube_point_list{overflow:hidden;height:3.33333em;width:100%;border-radius:.20833em}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_point .cube_point_list .cube_point_cell{float:left;position:relative;width:3.37em;height:100%;background-position:center center;background-repeat:no-repeat}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_point .cube_point_list .cube_point_cell:before{content:'';display:inline-block;position:absolute;top:.5em;bottom:.5em;width:1px;background-color:#9bbdbe;right:-1px}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_point .cube_point_list .cube_point_cell.point_3:before{background:0 0}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_point .cube_point_list .cube_point_cell.point_1 a{background-image:url(resources/wood/images/point_1.png);border-top-left-radius:.20833em;border-bottom-left-radius:.20833em}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_point .cube_point_list .cube_point_cell.point_2 a{background-image:url(resources/wood/images/point_2.png)}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_point .cube_point_list .cube_point_cell.point_3 a{border-right:0 none;background-image:url(resources/wood/images/point_3.png);border-top-right-radius:.20833em;border-bottom-right-radius:.20833em}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_point .cube_point_list .cube_point_cell a{background-size:1.458333em 1.875em;background-position:center center;background-repeat:no-repeat}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_point .cube_point_list .cube_point_cell:hover a{background-size:1.75em auto}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_point .cube_icon{top:.08333em;height:1.66667em;background-size:1.45833em 100%;background-position:center center;background-repeat:no-repeat}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_point[data-point=point_1] .cube_icon{background-image:url(resources/wood/images/point_1.png)}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_point[data-point=point_2] .cube_icon{background-image:url(resources/wood/images/point_2.png)}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_point[data-point=point_3] .cube_icon{background-image:url(resources/wood/images/point_3.png)}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_copy .cube_icon{background:url(resources/wood/images/icon-copy.png) center center no-repeat;background-size:1.25em 1.25em}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_delete:before{display:none}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_delete .cube_icon{background:url(resources/wood/images/icon-del.png) center center no-repeat;background-size:1.25em 1.25em}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_btn_close{position:absolute;right:-1.6em;top:30%;margin-top:-.75em;width:2.25em;height:2.5em;background:url(resources/wood/images/btn-close.png) center top no-repeat;background-size:100% 100%}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_btn_close:active,.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_btn_close:hover{background-image:url(resources/wood/images/btn-close-active.png)}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_tools{display:none;position:fixed}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_point .cube_sub_item.subItemUp{top:-4.02333em}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_point .cube_sub_item.subItemUp:before{top:3.56em}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_sub_item.subItemUp{top:-5.43333em}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_sub_item.subItemUp:before{top:4.97em}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_opacity .cube_opacity_contain{width:100%;height:100%}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_tool_cell.curr .cube_sub_item{display:block}.addon_SolidGeometry_V2 .move_icon{position:fixed;width:48px;height:48px;margin-left:-24px;margin-top:-24px;background-image:url(resources/wood/images/pointer.png);background-color:rgba(255,255,255,.01);-webkit-background-size:100%;background-size:100%;display:none}.addon_SolidGeometry_V2 .move_icon:active,.addon_SolidGeometry_V2 .move_icon:hover{background-image:url(resources/wood/images/pointer_active.png)}.addon_SolidGeometry_V2 .bg_pop{display:none;position:fixed;width:100%;height:100%;z-index:1000;text-align:center;pointer-events:none}.addon_SolidGeometry_V2 .bg_pop .text{display:inline-block;margin-top:15%;padding:30px 67px;border-radius:5px;font-size:20px;color:#fff;background:rgba(0,0,0,.66)}.addon_SolidGeometry_V2 .com_CubeGeometry .cubegeometry .cube_point .cube_point_list .cube_point_cell{background-size:35px auto}]]></css><view><![CDATA[<div class="exam_skin_wood"><div class="com_CubeGeometry" style="font-size:24px" id="layout"><div class="cubegeometry"><div class="cube_tools" style="left: 25rem; top: 18rem"><ul class="cube_tool_list"><li class="cube_tool_cell cube_fill curr" data-color="orange"><a href="###" class="a_item"><span class="txt">填充</span> <i class="cube_icon"></i></a><div class="cube_sub_item"><ul class="cube_color_list cube_fillColor"><li color-hex="0x000000" color-name="black" class="color_black cube_color_cell"></li><li color-hex="0xffffff" color-name="white" class="color_white cube_color_cell"></li><li color-hex="0xfc5300" color-name="red" class="color_red cube_color_cell"></li><li color-hex="0xffa200" color-name="orange" class="color_orange cube_color_cell on"></li><li color-hex="0xffde00" color-name="yellow" class="color_yellow cube_color_cell"></li><li color-hex="0x5ea700" color-name="green" class="color_green cube_color_cell"></li><li color-hex="0x37adff" color-name="blue" class="color_blue cube_color_cell"></li><li color-hex="0xa41fd0" color-name="purple" class="color_purple cube_color_cell"></li></ul><div class="cube_opacity"><span class="txt"><em class="font">透明度：0%</em></span><div class="cube_opacity_contain"><div class="cube_opacity_progress"><div class="cube_opacity_level" style="width: 0%"><a class="cube_btn"></a></div></div></div></div></div></li><li class="cube_tool_cell cube_border" data-color="black"><a href="###" class="a_item"><span class="txt">边框</span> <i class="cube_icon"></i></a><div class="cube_sub_item"><ul class="cube_color_list cube_color_dashed"><li color-hex="0x000000" color-name="black" class="color_black_dashed cube_color_cell"></li><li color-hex="0xffffff" color-name="white" class="color_white_dashed cube_color_cell"></li><li color-hex="0xfc5300" color-name="red" class="color_red_dashed cube_color_cell on"></li><li color-hex="0xffa200" color-name="orange" class="color_orange_dashed cube_color_cell"></li><li color-hex="0xffde00" color-name="yellow" class="color_yellow_dashed cube_color_cell"></li><li color-hex="0x5ea700" color-name="green" class="color_green_dashed cube_color_cell"></li><li color-hex="0x37adff" color-name="blue" class="color_blue_dashed cube_color_cell"></li><li color-hex="0xa41fd0" color-name="purple" class="color_purple_dashed cube_color_cell"></li></ul><ul class="cube_border_width"><li border-width="1" class="cube_border_cell width_s on"></li><li border-width="2" class="cube_border_cell width_n"></li><li border-width="4" class="cube_border_cell width_l"></li><li border-width="5" class="cube_border_cell width_xl" style="border-right:0"></li></ul></div></li><li class="cube_tool_cell cube_point" data-point="point_1"><a href="###" class="a_item"><span class="txt">顶点</span> <i class="cube_icon"></i></a><div class="cube_sub_item"><ul class="cube_point_list"><li point-type="point_1" class="point_1 cube_point_cell on"><a href="###"></a></li><li point-type="point_2" class="point_2 cube_point_cell"><a href="###"></a></li><li point-type="point_3" class="point_3 cube_point_cell"><a href="###"></a></li></ul></div></li><li class="cube_tool_cell cube_copy"><a href="###" class="a_item"><span class="txt">复制</span> <i class="cube_icon"></i></a></li><li class="cube_tool_cell cube_delete"><a href="###" class="a_item"><span class="txt">删除</span> <i class="cube_icon"></i></a></li></ul><a class="cube_btn_close"></a></div></div></div><div class="bg_pop"><p class="text"></p></div><span class="move_icon"></span></div>]]></view><presenter><![CDATA['use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var AddonSolidGeometry_V2_create = function AddonSolidGeometry_V2_create()  {
  /******/
  var presenter = function (modules) {
    // webpackBootstrap
    /******/ // The module cache
    /******/
    var installedModules = {};

    /******/ // The require function
    /******/
    function __webpack_require__(moduleId) {

      /******/ // Check if module is in cache
      /******/
      if (installedModules[moduleId])
        /******/
        return installedModules[moduleId].exports;

      /******/ // Create a new module (and put it into the cache)
      /******/
      var module = installedModules[moduleId] = {
        /******/
        exports: {},
        /******/
        id: moduleId,
        /******/
        loaded: false
        /******/
      };

      /******/ // Execute the module function
      /******/
      modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

      /******/ // Flag the module as loaded
      /******/
      module.loaded = true;

      /******/ // Return the exports of the module
      /******/
      return module.exports;
      /******/
    }

    /******/ // expose the modules object (__webpack_modules__)
    /******/
    __webpack_require__.m = modules;

    /******/ // expose the module cache
    /******/
    __webpack_require__.c = installedModules;

    /******/ // __webpack_public_path__
    /******/
    __webpack_require__.p = "";

    /******/ // Load entry module and return exports
    /******/
    return __webpack_require__(0);
    /******/
  }(
  /************************************************************************/
  /******/
  [
  /* 0 */
  /***/
  function (module, exports, __webpack_require__) {

    module.exports = __webpack_require__(1);

    /***/
  },
  /* 1 */
  /***/
  function (module, exports, __webpack_require__) {

    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        'default': obj
      };
    }

    var _appPresenter = __webpack_require__(2);

    var _appPresenter2 = _interopRequireDefault(_appPresenter);

    exports['default'] = function () {
      return _appPresenter2['default'];
    };

    module.exports = exports['default'];

    /***/
  },
  /* 2 */
  /***/
  function (module, exports, __webpack_require__) {

    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        'default': obj
      };
    }

    var _presenterRun = __webpack_require__(3);

    var _presenterRun2 = _interopRequireDefault(_presenterRun);

    var _presenterInterface = __webpack_require__(41);

    var _presenterInterface2 = _interopRequireDefault(_presenterInterface);

    var _presenterDestroy = __webpack_require__(42);

    var _presenterDestroy2 = _interopRequireDefault(_presenterDestroy);

    var _presenterSetPlayerController = __webpack_require__(43);

    var _presenterSetPlayerController2 = _interopRequireDefault(_presenterSetPlayerController);

    var _presenterOnEventReceived = __webpack_require__(44);

    var _presenterOnEventReceived2 = _interopRequireDefault(_presenterOnEventReceived);

    var _presenterSetLangType = __webpack_require__(45);

    var _presenterSetLangType2 = _interopRequireDefault(_presenterSetLangType);

    exports['default'] = {
      run: _presenterRun2['default'],
      destroy: _presenterDestroy2['default'],
      __interface: _presenterInterface2['default'],
      setPlayerController: _presenterSetPlayerController2['default'],
      onEventReceived: _presenterOnEventReceived2['default'],
      setUrlParams: _presenterSetLangType2['default']
    };
    module.exports = exports['default'];

    /***/
  },
  /* 3 */
  /***/
  function (module, exports, __webpack_require__) {

    /**
     * 运行环境下, 初始化Module的方法
     * @param view 运行视图(DOM对象)
     * @param model Module的模型, Key-Value结构
     * @remark 该方法为Module生命周期方法,仅在Module初始化时执行一次
     */
    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        'default': obj
      };
    }

    var _presenterLogic = __webpack_require__(4);

    var _presenterLogic2 = _interopRequireDefault(_presenterLogic);

    var _presenter = __webpack_require__(2);

    var _presenter2 = _interopRequireDefault(_presenter);

    exports['default'] = function (view, model) {
      return window.I18nManager.getInstance().loadLanguage('SolidGeometry_V2', _presenter2['default'].langType).done(function (data) {
        _presenter2['default'].i18n = data.lang;
        (0, _presenterLogic2['default'])(view, model, false);
      });
    };

    module.exports = exports['default'];

    /***/
  },
  /* 4 */
  /***/
  function (module, exports, __webpack_require__) {

    /**
     * Module的逻辑
     * @param view 视图对象, 根据是否为预览状态传入不同的视图对象
     * @param model 模型对象
     * @param isPreview 是否为编辑环境, true=编辑环境, false=运行环境
     */
    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        'default': obj
      };
    }

    var _presenter = __webpack_require__(2);

    var _presenter2 = _interopRequireDefault(_presenter);

    var _initI18N = __webpack_require__(5);

    var _initI18N2 = _interopRequireDefault(_initI18N);

    var _listenerManager = __webpack_require__(6);

    var _listenerManager2 = _interopRequireDefault(_listenerManager);

    var _EventEventManager = __webpack_require__(7);

    var _EventEventManager2 = _interopRequireDefault(_EventEventManager);

    var _threeThreeManger = __webpack_require__(29);

    var _threeThreeManger2 = _interopRequireDefault(_threeThreeManger);

    var _addPlugin = __webpack_require__(40);

    var _addPlugin2 = _interopRequireDefault(_addPlugin);

    exports['default'] = function (view, model, isPreview) {
      // 将 model 值赋给 this
      _presenter2['default'].model = model;
      // 将 view 值存入 presenter
      _presenter2['default'].view = view;

      // 添加webglControl组件
      (0, _addPlugin2['default'])();

      // icPlayer消息管理
      _presenter2['default'].listenerManager = new _listenerManager2['default']();
      _presenter2['default'].listenerManager.init(_presenter2['default'].eventBus);

      // 浏览器消息管理
      _presenter2['default'].eventManager = new _EventEventManager2['default']();
      _presenter2['default'].eventManager.bindEvents();

      // three.js图形管理
      _presenter2['default'].threeManager = new _threeThreeManger2['default']();
      _presenter2['default'].threeManager.init($(_presenter2['default'].view).find('.SolidGeometry_Canvas:first'));

      // 使用 basePath 替换 view 中的图片 url
      var $imgs = $(view).find('img');

      $imgs.each(function () {
        $(this).attr('src', _presenter2['default'].path + $(this).attr('data-src'));
        // 禁止拖拽
        this.ondragstart = function () {
          return false;
        };
      });

      $(view).find('.a_item').each(function () {
        this.ondragstart = function () {
          return false;
        };
      });

      // 设置多语言
      (0, _initI18N2['default'])();
    };

    module.exports = exports['default'];

    /***/
  },
  /* 5 */
  /***/
  function (module, exports, __webpack_require__) {

    /**
     * 多语言设置
     */

    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        'default': obj
      };
    }

    var _presenter = __webpack_require__(2);

    var _presenter2 = _interopRequireDefault(_presenter);

    exports['default'] = function () {
      var $view = $(_presenter2['default'].view);
      $view.find('.cube_fill').find('.txt:first').html(_presenter2['default'].i18n['fill']);
      $view.find('.cube_border').find('.txt:first').html(_presenter2['default'].i18n['border']);
      $view.find('.cube_point').find('.txt:first').html(_presenter2['default'].i18n['vertex']);
      $view.find('.cube_copy').find('.txt:first').html(_presenter2['default'].i18n['copy']);
      $view.find('.cube_delete').find('.txt:first').html(_presenter2['default'].i18n['delete']);
    };

    module.exports = exports['default'];

    /***/
  },
  /* 6 */
  /***/
  function (module, exports, __webpack_require__) {

    /**
     * Created by lyp on 2016/9/8.
     */

    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var _createClass = function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    var _presenter = __webpack_require__(2);

    var _presenter2 = _interopRequireDefault(_presenter);

    /**
     * 消息类
     */

    var Listener = function () {
      function Listener(name, fn) {
        _classCallCheck(this, Listener);

        // 事件类型
        this.name = name;
        // 事件回调
        this.fn = fn;
      }

      /**
       * 消息管制类
       */

      /**
       * 值比较
       * @param listener
       * @returns {*}
       */

      _createClass(Listener, [{
        key: "compare",
        value: function compare(listener) {
          if (listener instanceof Listener) {
            return this.name === listener.name && this.fn === listener.fn;
          }
          return undefined;
        }
      }]);

      return Listener;
    }();

    var ListenerManager = function () {
      function ListenerManager() {
        _classCallCheck(this, ListenerManager);

        // 存放事件对象
        this.listenArray = null;
      }

      /**
       * 初始化，绑定eventBus消息
       * @param eventBus
       */

      _createClass(ListenerManager, [{
        key: "init",
        value: function init(eventBus) {
          if (!eventBus) {
            return false;
          }
          this.listenArray = [];
          eventBus.addEventListener("mousemove", _presenter2["default"]);
          eventBus.addEventListener("mousedown", _presenter2["default"]);
          eventBus.addEventListener("mouseup", _presenter2["default"]);
          // 工具失去焦点
          eventBus.addEventListener("blur", _presenter2["default"]);
          // 工具获得焦点
          eventBus.addEventListener("focus", _presenter2["default"]);
          eventBus.addEventListener("click", _presenter2["default"]);
          return true;
        }

        /**
         * 释放资源
         */
      }, {
        key: "dispose",
        value: function dispose() {
          this.listenArray.length = 0;
          this.listenArray = null;
        }

        /**
         * 添加时间绑定
         * @param name 事件类型
         * @param fn 事件回调对象
         */
      }, {
        key: "addListener",
        value: function addListener(name, fn) {
          this.listenArray.push(new Listener(name, fn));
        }

        /**
         * 取消事件监听
         * @param 事件类型
         * @param 事件回调对象
         */
      }, {
        key: "removeListener",
        value: function removeListener(name, fn) {
          var compareListener = new Listener(name, fn);
          for (var i = 0; i < this.listenArray.length; i++) {
            if (compareListener.compare(this.listenArray[i])) {
              this.listenArray.splice(i, 1);
              break;
            }
          }
        }

        /**
         * 执行事件
         * @param name
         * @param event
         */
      }, {
        key: "run",
        value: function run(name, event) {
          if (event.type == 'mousedown' || event.type == 'click') {
            if ($(event.target).closest('.cube_tool_list:visible').length != 0) {
              return;
            }
            if ($(event.target).closest('.cube_btn_close:visible').length != 0) {
              return;
            }
            event.preventDefault();
            event.stopPropagation();
          }
          // 是否点击到了菜单栏
          if ($(event.target).closest('.cube_tools:visible').length != 0) {
            return;
          }
          this.listenArray.forEach(function (each) {
            each.name === name && each.fn(event);
          });
        }
      }]);

      return ListenerManager;
    }();

    exports["default"] = ListenerManager;
    module.exports = exports["default"];

    /***/
  },
  /* 7 */
  /***/
  function (module, exports, __webpack_require__) {

    /**
     * Created by liuyuanpeng on 2016/6/28.
     * 浏览器事件统一管理处
     */
    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    var _createClass = function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ('value' in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        'default': obj
      };
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError('Cannot call a class as a function');
      }
    }

    var _presenter = __webpack_require__(2);

    var _presenter2 = _interopRequireDefault(_presenter);

    var _constants = __webpack_require__(8);

    var _DomEvents = __webpack_require__(9);

    var _DomEvents2 = _interopRequireDefault(_DomEvents);

    var eventManager = function () {
      function eventManager() {
        _classCallCheck(this, eventManager);

        this.view = $(_presenter2['default'].view);
        this.domEvents = new _DomEvents2['default']();
        this.toolList = this.view.find('.cube_tool_list');
        this.faceColorList = this.view.find('.cube_fill .cube_fillColor');
        this.borderColorList = this.view.find('.cube_border .cube_color_dashed');
        this.borderWidthList = this.view.find('.cube_border .cube_border_width');
        this.vertexList = this.view.find('.cube_point .cube_point_list');
        this.copyBtn = this.view.find('.cube_copy');
        this.deleteBtn = this.view.find('.cube_delete');
        this.closeBtn = this.view.find('.cube_btn_close');
        this.faceOpacityBtn = this.view.find('.cube_btn');
        this.faceOpacityLevel = this.view.find('.cube_opacity_level');
        this.faceOpacityProgress = this.view.find('.cube_opacity_progress');
        this.faceOpacityContain = this.view.find('.cube_opacity_contain');
        this.domEvents.init();
      }

      /**
       * 绑定事件
       */

      _createClass(eventManager, [{
        key: 'bindEvents',
        value: function bindEvents() {
          var _this = this;

          /**
           * 菜单栏功能键切换
           */
          this.toolList.on('click', 'li', function (e) {
            _this.domEvents.toolCellEvent(e);
          });

          /**
           * 填充色功能
           */
          this.faceColorList.on('click', 'li', function (e) {
            _this.domEvents.modifyFaceColorEvent(e);
          });

          /**
           * 透明功能
           */
          this.faceOpacityBtn.on('mousedown touchstart', function (e) {
            e.stopPropagation();
            _this.domEvents.modifyFaceOpacityStartEvent(e);
            $(_this.faceOpacityContain).on('mousemove touchmove', function (e) {
              _this.domEvents.modifyFaceOpacityMoveEvent(e);
            });

            $(_this.faceOpacityContain).on('mouseup touchend', function (e) {
              _this.domEvents.modifyFaceOpacityEndEvent(e);
            });

            $(_this.faceOpacityContain).on('mouseleave touchcancel', function (e) {
              _this.domEvents.modifyFaceOpacityEndEvent(e);
            });
          });

          this.faceOpacityContain.on('mousedown touchstart', function (e) {
            e.stopPropagation();
            _this.domEvents.modifyFaceOpacityEvent(e);
          });

          /**
           * 线色功能
           */
          this.borderColorList.on('click', 'li', function (e) {
            _this.domEvents.modifyBorderColorEvent(e);
          });

          /**
           * 线宽功能
           */
          this.borderWidthList.on('click', 'li', function (e) {
            _this.domEvents.modifyBorderWidthEvent(e);
          });

          /**
           * 顶点功能
           */
          this.vertexList.on('click', 'li', function (e) {
            _this.domEvents.modifyVertexEvent(e);
          });

          /**
           * 复制
           */
          this.copyBtn.on('click', function (e) {
            _this.domEvents.copyEvent(e);
          });

          /**
           * 删除
           */
          this.deleteBtn.on('click', function (e) {
            _this.domEvents.deleteEvent(e);
          });

          /**
           * 关闭
           */
          this.closeBtn.on('click', function (e) {
            _this.domEvents.closeEvent(e);
          });

          //绑定mousehover事件
          var that = this;
          this.toolList.on('mouseover touchstart', '.a_item', function (e) {
            if (e.type === 'touchstart') {
              that.toolList.off('mouseover', '.a_item');
              that.toolList.off('mouseout', '.a_item');
              that.toolList.off('mouseleave', '.a_item');
            }
            that.toolList.find('.a_item').removeClass('hover');
            $(this).addClass('hover');
          });
          this.toolList.on('mouseout mouseleave touchend touchcancel', '.a_item', function (e) {
            if (e.type === 'mouseout') {
              $(this).removeClass('hover');
            } else {
              that.toolList.find('.a_item').removeClass('hover');
            }
          });
        }

        /**
         * 解除绑定
         */
      }, {
        key: 'unbindEvents',
        value: function unbindEvents() {
          this.toolList.off();
          this.faceColorList.off();
          this.faceOpacityBtn.off();
          this.borderColorList.off();
          this.borderWidthList.off();
          this.vertexList.off();
          this.copyBtn.off();
          this.deleteBtn.off();
          this.closeBtn.off();
        }
      }]);

      return eventManager;
    }();

    exports['default'] = eventManager;
    module.exports = exports['default'];

    /***/
  },
  /* 8 */
  /***/
  function (module, exports) {

    /**
     * Created by liuyuanpeng on 2016/9/8.
     * 定义全局控制变量
     */

    // 单个图形最大数目
    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    var MAX_COUNT = 5;

    exports.MAX_COUNT = MAX_COUNT;
    // 所有图形最大数目
    var MAX_ALL_COUNT = 20;

    exports.MAX_ALL_COUNT = MAX_ALL_COUNT;
    // 是否启用动画
    var USE_ANIMATE = false;

    exports.USE_ANIMATE = USE_ANIMATE;
    // 图形类型
    var GEOMETRY_TYPE = {
      SPHERE: 'sphere', // 球体
      HEMI_SPHERE: 'hemisphere', // 半球体
      CUBE: 'cube', // 正方体
      RECTANGULARCUBE: 'rectangularcube', // 长方体
      CYLINDER: 'cylinder', // 圆台
      SIMPLE_CYLINDER: 'simplecylinder', // 圆柱体
      CONE: 'cone', // 圆锥
      TETRA: 'tetra', // 三棱锥
      PYRAMID: 'pyramid', // 四棱锥
      DIHEDRON: 'dihedron' // 二面体
    };

    exports.GEOMETRY_TYPE = GEOMETRY_TYPE;
    // 立体几何图形结构
    var OBJECT_PART = {
      VERTEX_PART: 'vertex',
      MESH_PART: 'mesh',
      LINE_PART: 'line',
      TEXT_PART: 'text',
      LINE_PART_MESH: 'line_mesh',
      VERTEX_PART_MESH: 'vertex_mesh',
      MESH_PART_MESH: 'mesh_mesh',
      TEXT_PART_MESH: 'text_mesh'
    };

    exports.OBJECT_PART = OBJECT_PART;
    // DOM类名定义
    var VIEW_CLASS_NAME = {
      TOOLBAR: 'tool_bar' // 工具栏
    };

    exports.VIEW_CLASS_NAME = VIEW_CLASS_NAME;
    // 操作框的尺寸
    var CONTROLLER_OPTION = {
      POINT_SIZE: 15,
      POINT_INNER_SIZE: 10,
      POINT_INNER_COLOR: '#333333',
      POINT_BACK_COLOR: '#aaaaaa',
      POINT_OUTLINE_COLOR: '#333333'
    };

    exports.CONTROLLER_OPTION = CONTROLLER_OPTION;
    // 定义操作类型
    var CONTROLLER_TYPE = {
      // 取消选择
      CANCEL_CTRL: 'cancel',
      // 选择
      SELECT_CTRL: 'select',
      // 缩放
      SCALE_CTRL: 'scale',
      // 移动
      MOVE_CTRL: 'move',
      // 手动旋转
      MANUAL_ROTATE_CTRL: 'manual_rotate',
      // 自动旋转
      AUTO_ROTATE_CTRL: 'auto_rotate'
    };

    exports.CONTROLLER_TYPE = CONTROLLER_TYPE;
    // 缩放按钮序号
    var SCALE_INDEX = {
      LEFT_TOP_INDEX: 'left_top',
      LEFT_BOTTOM_INDEX: 'left_bottom',
      RIGHT_TOP_INDEX: 'right_top',
      RIGHT_BOTTOM_INDEX: 'right_bottom',
      NONE_INDEX: false
    };

    exports.SCALE_INDEX = SCALE_INDEX;
    // click容差
    var CLICK_TOLERANCE = 5;

    exports.CLICK_TOLERANCE = CLICK_TOLERANCE;
    // 逃逸时间控制
    var ESCAPE_MAX_TIME = 100;

    exports.ESCAPE_MAX_TIME = ESCAPE_MAX_TIME;
    // 平局速度样品点数控制
    var AVERAGE_SIMPLE_POINT_COUNTS = 5;

    exports.AVERAGE_SIMPLE_POINT_COUNTS = AVERAGE_SIMPLE_POINT_COUNTS;
    // z轴空间定义
    var Z_STEP = 3000;

    exports.Z_STEP = Z_STEP;
    // 最小缩放比例
    var MIN_SCALE = 0.5;

    exports.MIN_SCALE = MIN_SCALE;
    // 控制最高转速
    var MAX_DELTA_MOVE = 10;
    exports.MAX_DELTA_MOVE = MAX_DELTA_MOVE;

    /***/
  },
  /* 9 */
  /***/
  function (module, exports, __webpack_require__) {

    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    var _createClass = function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ('value' in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        'default': obj
      };
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError('Cannot call a class as a function');
      }
    }

    var _presenter = __webpack_require__(2);

    var _presenter2 = _interopRequireDefault(_presenter);

    var _ShapeShapeFactory = __webpack_require__(10);

    var _ShapeShapeFactory2 = _interopRequireDefault(_ShapeShapeFactory);

    var DomEvents = function () {
      function DomEvents() {
        _classCallCheck(this, DomEvents);

        this.view = $(_presenter2['default'].view);
        this.currentSel = null;
        this.toolList = null;
        this.toolCell = null;
        this.faceColor = null;
        this.faceColorList = null;
        this.borderColor = null;
        this.borderColorList = null;
        this.borderWidthList = null;
        this.vertexList = null;
        this.faceOpacityLevel = null;
        this.faceOpacityProgress = null;
        this.faceOpacityFont = null;
        this.faceOpacityBtn = null;
        this.faceOpacityContain = null;
        this.startPoint = null;
        this.movePoint = null;
      }

      _createClass(DomEvents, [{
        key: 'init',
        value: function init() {
          this.toolList = this.view.find('.cube_tool_list');
          this.toolCell = this.view.find('.cube_tool_cell');
          this.faceColor = this.view.find('.cube_fill');
          this.faceColorList = this.view.find('.cube_fill .cube_color_cell');
          this.borderColor = this.view.find('.cube_border');
          this.borderColorList = this.view.find('.cube_border .cube_color_cell');
          this.borderWidthList = this.view.find('.cube_border .cube_border_cell');
          this.vertexType = this.view.find('.cube_point');
          this.vertexList = this.view.find('.cube_point .cube_point_cell');
          this.faceOpacityLevel = this.view.find('.cube_opacity_level');
          this.faceOpacityProgress = this.view.find('.cube_opacity_progress');
          this.faceOpacityFont = this.view.find('.cube_opacity .font');
          this.faceOpacityBtn = this.view.find('.cube_btn');
          this.faceOpacityContain = this.view.find('.cube_opacity_contain');
          return this;
        }

        /**
         * 处理工具栏功能切换
         * @param e Event对象
         */
      }, {
        key: 'toolCellEvent',
        value: function toolCellEvent(e) {
          // 这里不能阻止事件冒泡
          if ($(e.target).closest('.cube_sub_item').length > 0) {
            return;
          };
          var current = $(e.target).closest('.cube_tool_cell');
          if (current.hasClass('curr')) {
            current.removeClass('curr');
          } else {
            if (this.toolCell.hasClass('curr')) {
              this.toolCell.removeClass('curr');
            }
            current.addClass('curr');
          }
        }

        /**
         * 修改填充颜色
         * @param e Event对象
         */
      }, {
        key: 'modifyFaceColorEvent',
        value: function modifyFaceColorEvent(e) {
          e.stopPropagation();
          var current = $(e.target).closest('.cube_color_cell'),
              colorHex = current.attr('color-hex'),
              colorName = current.attr('color-name');

          if (this.faceColorList.hasClass('on')) {
            this.faceColorList.removeClass('on');
          }
          // 颜色按钮选中
          current.addClass('on');
          // 根据颜色值修改面色
          this.currentSel = this._getCurrentShape();
          this.currentSel.controller.setFaceColor(Number.parseInt(colorHex, 16));
          // 根据颜色修改按钮图标
          this.faceColor.attr('data-color', colorName);
        }

        /**
         * 修改透明度
         * @param e Event对象
         */
      }, {
        key: 'modifyFaceOpacityStartEvent',
        value: function modifyFaceOpacityStartEvent(e) {
          e.stopPropagation();
          var pointer = event.changedTouches ? event.changedTouches[0] : event;
          this.startPoint = pointer.clientX;
        }
      }, {
        key: 'modifyFaceOpacityMoveEvent',
        value: function modifyFaceOpacityMoveEvent(e) {
          e.stopPropagation();
          var pointer = event.changedTouches ? event.changedTouches[0] : event;
          this.movePoint = pointer.clientX;
          var dist = this.movePoint - this.startPoint;
          this.startPoint = this.movePoint;
          this.faceOpacityLevel.css("width", this.faceOpacityLevel.width() + dist + "px");
          if (this.faceOpacityLevel.width() >= this.faceOpacityProgress.width()) {
            this.faceOpacityLevel.css("width", this.faceOpacityProgress.width() + "px");
          }
          if (this.faceOpacityLevel.width() <= 0) {
            this.faceOpacityLevel.css("width", 0);
          }
          var percent = Math.round(this.faceOpacityLevel.width() * 100 / this.faceOpacityProgress.width());
          this.faceOpacityFont.text(_presenter2['default'].i18n['opacity'] + '：' + percent + '%');

          // 通过百分比设置图形透明度
          this.currentSel = this._getCurrentShape();
          if ((100 - percent) / 100 <= 0) {
            // 解决101PPT上透明度为0时，鼠标事件向下透，0.004*100以便四舍五入
            this.currentSel.controller.setFaceOpacity(0.004);
          } else {
            this.currentSel.controller.setFaceOpacity((100 - percent) / 100);
          }
        }
      }, {
        key: 'modifyFaceOpacityEndEvent',
        value: function modifyFaceOpacityEndEvent(e) {
          e.stopPropagation();
          $(this.faceOpacityContain).off('mousemove touchmove');
          $(this.faceOpacityContain).off('mouseup touchend');
          $(this.faceOpacityContain).off('mouseleave touchcancel');
        }
      }, {
        key: 'modifyFaceOpacityEvent',
        value: function modifyFaceOpacityEvent(e) {
          e.stopPropagation();
          var pointer = event.changedTouches ? event.changedTouches[0] : event;
          this.startPoint = pointer.clientX;
          var left = this.faceOpacityProgress.offset().left;
          if (this.startPoint - left < 0 || this.startPoint - left > this.faceOpacityProgress.width()) {
            return;
          }
          var percent = Math.round((this.startPoint - left) * 100 / this.faceOpacityProgress.width());
          this.faceOpacityFont.text(_presenter2['default'].i18n['opacity'] + '：' + percent + '%');
          this.faceOpacityLevel.css("width", this.startPoint - left + "px");

          // 通过百分比设置图形透明度
          this.currentSel = this._getCurrentShape();
          if ((100 - percent) / 100 <= 0) {
            this.currentSel.controller.setFaceOpacity(0.004);
          } else {
            this.currentSel.controller.setFaceOpacity((100 - percent) / 100);
          }
        }

        /**
         * 修改线颜色
         * @param e Event对象
         */
      }, {
        key: 'modifyBorderColorEvent',
        value: function modifyBorderColorEvent(e) {
          e.stopPropagation();
          var current = $(e.target).closest('.cube_color_cell'),
              colorHex = current.attr('color-hex'),
              colorName = current.attr('color-name');

          if (this.borderColorList.hasClass('on')) {
            this.borderColorList.removeClass('on');
          }
          current.addClass('on');
          // 根据颜色值修改线色
          this.currentSel = this._getCurrentShape();
          this.currentSel.controller.setLineColor(Number.parseInt(colorHex, 16));
          // 根据颜色修改按钮图标
          this.borderColor.attr('data-color', colorName);
        }

        /**
         * 修改线宽
         * @param e Event对象
         */
      }, {
        key: 'modifyBorderWidthEvent',
        value: function modifyBorderWidthEvent(e) {
          e.stopPropagation();
          var current = $(e.target).closest('.cube_border_cell'),
              borderWidth = current.attr('border-width');

          if (this.borderWidthList.hasClass('on')) {
            this.borderWidthList.removeClass('on');
          }
          current.addClass('on');
          // 根据值修改线宽
          this.currentSel = this._getCurrentShape();
          this.currentSel.controller.setLineWidth(Number.parseFloat(borderWidth, 10));
          _presenter2['default'].threeManager.controller.update();
        }

        /**
         * 修改顶点
         * @param e Event对象
         */
      }, {
        key: 'modifyVertexEvent',
        value: function modifyVertexEvent(e) {
          e.stopPropagation();
          var current = $(e.target).closest('.cube_point_cell'),
              pointType = current.attr('point-type');

          if (this.vertexList.hasClass('on')) {
            this.vertexList.removeClass('on');
          }
          current.addClass('on');
          this.vertexType.attr("data-point", pointType);
          // 根据值修改线宽
          this.currentSel = this._getCurrentShape();
          switch (pointType) {
            case 'point_1':
              this.currentSel.controller.showVertex(false);
              this.currentSel.controller.showText(false);
              break;
            case 'point_2':
              this.currentSel.controller.showVertex(true);
              this.currentSel.controller.showText(false);
              break;
            case 'point_3':
              this.currentSel.controller.showVertex(false);
              this.currentSel.controller.showText(true);
              break;
            default:
              this.currentSel.controller.showVertex(false);
              this.currentSel.controller.showText(false);
          }
          _presenter2['default'].threeManager.controller.update();
        }

        /**
         * 复制
         */
      }, {
        key: 'copyEvent',
        value: function copyEvent(e) {
          e.stopPropagation();
          _presenter2['default'].threeManager.copySolid();
        }

        /**
         * 删除
         * @param e Event对象
         */
      }, {
        key: 'deleteEvent',
        value: function deleteEvent(e) {
          e.stopPropagation();
          this.closeEvent(e);
          this.currentSel = this._getCurrentShape();
          _presenter2['default'].threeManager.removeSolid();
        }

        /**
         * 关闭
         */
      }, {
        key: 'closeEvent',
        value: function closeEvent(e) {
          // this.currentSel = this._getCurrentShape();
          e.stopPropagation();
          _presenter2['default'].threeManager.controller.hide();
        }

        /**
         * 获取当前选中图形
         */
      }, {
        key: '_getCurrentShape',
        value: function _getCurrentShape() {
          // let currentSel = presenter.threeManager.currentSel;
          // let shapesOrder = presenter.threeManager.shapesOrder;
          // return shapesOrder[currentSel - 1];
          return _presenter2['default'].threeManager.getCurrentObject();
        }

        /**
         * 获取当前选中图形的BasicSolid
         */
      }, {
        key: 'getBasicSolid',
        value: function getBasicSolid() {
          // let currentSel = presenter.threeManager.currentSel;
          // let shapesOrder = presenter.threeManager.shapesOrder;
          // return shapesOrder[currentSel - 1];
          return _presenter2['default'].threeManager.getBasicSolid();
        }
      }]);

      return DomEvents;
    }();

    exports['default'] = DomEvents;;
    module.exports = exports['default'];

    /***/
  },
  /* 10 */
  /***/
  function (module, exports, __webpack_require__) {

    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        'default': obj
      };
    }

    var _CubeShape = __webpack_require__(11);

    var _CubeShape2 = _interopRequireDefault(_CubeShape);

    var _RectangularCube = __webpack_require__(12);

    var _RectangularCube2 = _interopRequireDefault(_RectangularCube);

    var _SphereShape = __webpack_require__(19);

    var _SphereShape2 = _interopRequireDefault(_SphereShape);

    var _CylinderShape = __webpack_require__(20);

    var _CylinderShape2 = _interopRequireDefault(_CylinderShape);

    var _PyramidShape = __webpack_require__(21);

    var _PyramidShape2 = _interopRequireDefault(_PyramidShape);

    var _TetraShape = __webpack_require__(23);

    var _TetraShape2 = _interopRequireDefault(_TetraShape);

    var _SimpleCylinderShape = __webpack_require__(24);

    var _SimpleCylinderShape2 = _interopRequireDefault(_SimpleCylinderShape);

    var _ConeCylinderShape = __webpack_require__(25);

    var _ConeCylinderShape2 = _interopRequireDefault(_ConeCylinderShape);

    var _HemisphereShape = __webpack_require__(26);

    var _HemisphereShape2 = _interopRequireDefault(_HemisphereShape);

    var _Dihedron = __webpack_require__(27);

    var _Dihedron2 = _interopRequireDefault(_Dihedron);

    var _constants = __webpack_require__(8);

    exports['default'] = function (type) {
      var solidGeometry = undefined;
      switch (type) {
        /**
         * 立方体
         */
        case _constants.GEOMETRY_TYPE.CUBE:
          {
            solidGeometry = new _CubeShape2['default'](200);
          }
          break;
        /**
         * 长方体
         */
        case _constants.GEOMETRY_TYPE.RECTANGULARCUBE:
          {
            solidGeometry = new _RectangularCube2['default'](100, 200, 200);
          }

          break;
        /**
         * 圆柱
         */
        case _constants.GEOMETRY_TYPE.SIMPLE_CYLINDER:
          {
            solidGeometry = new _SimpleCylinderShape2['default'](100, 200, 100);
          }

          break;
        /**
         * 圆台
         */
        case _constants.GEOMETRY_TYPE.CYLINDER:
          {
            solidGeometry = new _CylinderShape2['default'](40, 100, 200, 100);
          }
          break;
        /**
         * 圆锥
         */
        case _constants.GEOMETRY_TYPE.CONE:
          {
            solidGeometry = new _ConeCylinderShape2['default'](100, 200, 100);
          }
          break;
        /**
         * 三棱锥
         */
        case _constants.GEOMETRY_TYPE.TETRA:
          {
            solidGeometry = new _TetraShape2['default'](150);
          }
          break;
        /**
         * 四棱锥
         */
        case _constants.GEOMETRY_TYPE.PYRAMID:
          {
            solidGeometry = new _PyramidShape2['default'](150);
          }
          break;
        /**
         * 球体
         */
        case _constants.GEOMETRY_TYPE.SPHERE:
          {
            solidGeometry = new _SphereShape2['default'](100);
          }
          break;
        /**
         * 半球体
         */
        case _constants.GEOMETRY_TYPE.HEMI_SPHERE:
          {
            solidGeometry = new _HemisphereShape2['default'](100);
          }
          break;
        /**
         * 二面体
         */
        case _constants.GEOMETRY_TYPE.DIHEDRON:
          {
            solidGeometry = new _Dihedron2['default'](100);
          }
          break;

        default:
          break;
      }
      return solidGeometry;
    };

    module.exports = exports['default'];

    /***/
  },
  /* 11 */
  /***/
  function (module, exports, __webpack_require__) {

    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    var _createClass = function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ('value' in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();

    var _get = function get(_x, _x2, _x3) {
      var _again = true;
      _function: while (_again) {
        var object = _x,
            property = _x2,
            receiver = _x3;
        _again = false;
        if (object === null) object = Function.prototype;
        var desc = Object.getOwnPropertyDescriptor(object, property);
        if (desc === undefined) {
          var parent = Object.getPrototypeOf(object);
          if (parent === null) {
            return undefined;
          } else {
            _x = parent;
            _x2 = property;
            _x3 = receiver;
            _again = true;
            desc = parent = undefined;
            continue _function;
          }
        } else if ('value' in desc) {
          return desc.value;
        } else {
          var getter = desc.get;
          if (getter === undefined) {
            return undefined;
          }
          return getter.call(receiver);
        }
      }
    };

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        'default': obj
      };
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError('Cannot call a class as a function');
      }
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== 'function' && superClass !== null) {
        throw new TypeError('Super expression must either be null or a function, not ' + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    var _RectangularCube2 = __webpack_require__(12);

    var _RectangularCube3 = _interopRequireDefault(_RectangularCube2);

    var _constants = __webpack_require__(8);

    var CubeShape = function (_RectangularCube) {
      _inherits(CubeShape, _RectangularCube);

      function CubeShape(size) {
        _classCallCheck(this, CubeShape);

        _get(Object.getPrototypeOf(CubeShape.prototype), 'constructor', this).call(this, size, size, size, _constants.GEOMETRY_TYPE.CUBE);
      }

      /**
       * 获取初始化四元数旋转
       * @returns {THREE.Quaternion}
       */

      _createClass(CubeShape, [{
        key: 'getInitQuaternion',
        value: function getInitQuaternion() {
          var quaternion = new THREE.Quaternion();
          quaternion.set(0.13, -0.8, -0.15, 0.58);
          return quaternion;
        }
      }]);

      return CubeShape;
    }(_RectangularCube3['default']);

    exports['default'] = CubeShape;
    module.exports = exports['default'];

    /***/
  },
  /* 12 */
  /***/
  function (module, exports, __webpack_require__) {

    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    var _createClass = function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ('value' in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();

    var _get = function get(_x2, _x3, _x4) {
      var _again = true;
      _function: while (_again) {
        var object = _x2,
            property = _x3,
            receiver = _x4;
        _again = false;
        if (object === null) object = Function.prototype;
        var desc = Object.getOwnPropertyDescriptor(object, property);
        if (desc === undefined) {
          var parent = Object.getPrototypeOf(object);
          if (parent === null) {
            return undefined;
          } else {
            _x2 = parent;
            _x3 = property;
            _x4 = receiver;
            _again = true;
            desc = parent = undefined;
            continue _function;
          }
        } else if ('value' in desc) {
          return desc.value;
        } else {
          var getter = desc.get;
          if (getter === undefined) {
            return undefined;
          }
          return getter.call(receiver);
        }
      }
    };

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        'default': obj
      };
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError('Cannot call a class as a function');
      }
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== 'function' && superClass !== null) {
        throw new TypeError('Super expression must either be null or a function, not ' + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    var _BasicSolid2 = __webpack_require__(13);

    var _BasicSolid3 = _interopRequireDefault(_BasicSolid2);

    var _constants = __webpack_require__(8);

    var RectangularCube = function (_BasicSolid) {
      _inherits(RectangularCube, _BasicSolid);

      function RectangularCube(x, y, z) {
        var name = arguments.length <= 3 || arguments[3] === undefined ? _constants.GEOMETRY_TYPE.RECTANGULARCUBE : arguments[3];

        _classCallCheck(this, RectangularCube);

        _get(Object.getPrototypeOf(RectangularCube.prototype), 'constructor', this).call(this, name);
        this.x = x;
        this.y = y;
        this.z = z;
      }

      _createClass(RectangularCube, [{
        key: 'getGeometry',
        value: function getGeometry() {
          return new THREE.BoxGeometry(this.x, this.y, this.z);
        }
      }, {
        key: 'getLine',
        value: function getLine() {
          return [[[0, 1], [0, 2], [0, 5], [1, 3], [1, 4], [2, 3], [2, 7], [3, 6], [4, 5], [4, 6], [5, 7], [6, 7]]];
        }
      }, {
        key: 'getVertex',
        value: function getVertex() {
          return [0, 1, 2, 3, 4, 5, 6, 7];
        }

        /**
         * 获取初始化四元数旋转
         * @returns {THREE.Quaternion}
         */
      }, {
        key: 'getInitQuaternion',
        value: function getInitQuaternion() {
          var quaternion = new THREE.Quaternion();
          // 绕轴(1,1,1)旋转30°
          quaternion.set(0.62, -0.52, -0.46, 0.35);
          return quaternion;
        }
      }]);

      return RectangularCube;
    }(_BasicSolid3['default']);

    exports['default'] = RectangularCube;
    module.exports = exports['default'];

    /***/
  },
  /* 13 */
  /***/
  function (module, exports, __webpack_require__) {

    /**
     * Created by liuyuanpeng on 2016/9/9.
     */

    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    var _createClass = function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ('value' in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        'default': obj
      };
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError('Cannot call a class as a function');
      }
    }

    var _constants = __webpack_require__(8);

    var _BorderShape = __webpack_require__(14);

    var _BorderShape2 = _interopRequireDefault(_BorderShape);

    var _VertexShape = __webpack_require__(15);

    var _VertexShape2 = _interopRequireDefault(_VertexShape);

    var _TextSprite = __webpack_require__(16);

    var _TextSprite2 = _interopRequireDefault(_TextSprite);

    var _TorusShape = __webpack_require__(17);

    var _TorusShape2 = _interopRequireDefault(_TorusShape);

    var _UtilsDestroyThreeObject = __webpack_require__(18);

    var _UtilsDestroyThreeObject2 = _interopRequireDefault(_UtilsDestroyThreeObject);

    var _presenter = __webpack_require__(2);

    var _presenter2 = _interopRequireDefault(_presenter);

    var BasicSolid = function () {
      function BasicSolid(typeName) {
        _classCallCheck(this, BasicSolid);

        this.name = typeName;
        this.faceMaterial = null;
        this.lineMaterial = null;
        this.vertexMaterial = null;
        this.data = {
          faceColor: 0xffa200,
          lineColor: 'black',
          vertexColor: 'red',
          lineWidth: 1,
          faceOpacity: 1,
          vertexVisible: false,
          textVisible: false
        };
        this.object = null;
        this.geometry = null;
      }

      /**
       * 面的材质
       * @returns {null|THREE.MeshBasicMaterial|*}
       */

      _createClass(BasicSolid, [{
        key: 'getFaceMaterial',
        value: function getFaceMaterial() {
          if (!this.faceMaterial) {
            this.faceMaterial = new THREE.MeshLambertMaterial({
              color: this.data.faceColor,
              transparent: true,
              opacity: this.data.faceOpacity,
              overdraw: 0.5 //过渡渲染设置，兼容context('2d')
            });
          }
          return this.faceMaterial;
        }

        /**
         * 设置面颜色
         */
      }, {
        key: 'setFaceColor',
        value: function setFaceColor(color) {
          this.data.faceColor = color;
          this.faceMaterial.color = new THREE.Color(color);
          _presenter2['default'].threeManager.render();
        }

        /**
         * 设置面透明度
         */
      }, {
        key: 'setFaceOpacity',
        value: function setFaceOpacity(opacity) {
          this.data.faceOpacity = opacity;
          this.faceMaterial.opacity = opacity;
          _presenter2['default'].threeManager.render();
        }

        /**
         * 线的材质
         * @returns {null|THREE.MeshBasicMaterial|*}
         */
      }, {
        key: 'getLineMaterial',
        value: function getLineMaterial() {
          if (!this.lineMaterial) {
            this.lineMaterial = new THREE.MeshLambertMaterial({
              color: this.data.lineColor,
              overdraw: 0.5
            });
          }
          return this.lineMaterial;
        }

        /**
         * 设置线颜色
         * @param color
         */
      }, {
        key: 'setLineColor',
        value: function setLineColor(color) {
          this.data.lineColor = color;
          this.lineMaterial.color = new THREE.Color(color);
          _presenter2['default'].threeManager.render();
        }

        /**
         * 设置线宽
         * @param width
         */
      }, {
        key: 'setLineWidth',
        value: function setLineWidth(width) {
          if (this.data.lineWidth === width) {
            return;
          }
          this.data.lineWidth = width;
          var meshmesh = this.getPart(_constants.OBJECT_PART.MESH_PART_MESH);
          meshmesh.updateMatrixWorld(true);
          var mesh = this.getPart(_constants.OBJECT_PART.MESH_PART);
          mesh.updateMatrix();
          var matrix = new THREE.Matrix4();
          matrix.multiplyMatrices(mesh.matrix, meshmesh.matrix);
          this.updateLines(matrix, mesh.scale.x);
        }

        /**
         * 顶点的材质
         * @returns {null|THREE.MeshBasicMaterial|*}
         */
      }, {
        key: 'getVertexMaterial',
        value: function getVertexMaterial() {
          if (!this.vertexMaterial) {
            this.vertexMaterial = new THREE.MeshLambertMaterial({
              color: this.data.vertexColor,
              overdraw: 0.5
            });
          }
          return this.vertexMaterial;
        }

        /**
         * 设置顶点颜色
         * @param color
         */
      }, {
        key: 'setVertexColor',
        value: function setVertexColor(color) {
          this.data.vertexColor = color;
          this.vertexMaterial.color = new THREE.Color(color);
        }

        /**
         * 设置顶点的显示和隐藏
         * @param bShow
         */
      }, {
        key: 'showVertex',
        value: function showVertex() {
          var bShow = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];

          this.data.vertexVisible = bShow;
          var vertexs = this.getPart(_constants.OBJECT_PART.VERTEX_PART);
          if (vertexs) {
            vertexs.visible = bShow;
          }
        }

        /**
         * 设置顶点文字的显示与隐藏
         * @param bShow
         */
      }, {
        key: 'showText',
        value: function showText() {
          var bShow = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];

          this.data.textVisible = bShow;
          var texts = this.getPart(_constants.OBJECT_PART.TEXT_PART);
          if (texts) {
            texts.visible = bShow;
          }
        }

        /**
         * 获取分割的部分
         * @param part
         */
      }, {
        key: 'getPart',
        value: function getPart(part) {
          if (this.object) {
            return this.object.getObjectByName(part);
          }
          return null;
        }

        /**
         * 获取基础面的框架
         */
      }, {
        key: 'getGeometry',
        value: function getGeometry() {}

        /**
         * 获取棱
         */
      }, {
        key: 'getLine',
        value: function getLine() {}

        /**
         * 构建棱的结构：
         * [
         *     // 线段
         *     [
         *         [顶点序号1， 顶点序号2],[顶点序号3, 顶点序号4],...]
         *     ],
         *     // 圆
         *     [
         *         {center: 圆心1, radius: 半径1}， {center: 圆心2，radius: 半径2},...
         *     ]
         * ]
         *
         */

        /**
         * 获取顶点
         */

      }, {
        key: 'getVertex',
        value: function getVertex() {}
        /**
         * 构建顶点的结构：
         * [顶点序号1, 顶点序号2, 顶点序号3, ...]
         */

        /**
         * 获取初始化四元数旋转
         * @returns {THREE.Quaternion}
         */

      }, {
        key: 'getInitQuaternion',
        value: function getInitQuaternion() {
          var quaternion = new THREE.Quaternion();
          quaternion.set(0.13, -0.8, -0.15, 0.58);
          return quaternion;
        }

        /**
         * 设置拥有者
         * @param obj
         * @param owner
         */
      }, {
        key: 'setContainer',
        value: function setContainer(obj, container) {
          obj.container = container;
        }

        /**
         * 更新面
         */
      }, {
        key: 'createMeshs',
        value: function createMeshs() {
          var geometry = this.getGeometry();
          this.geometry = geometry;
          if (geometry) {
            geometry.center();
            this.object = new THREE.Object3D();
            this.object.name = this.name;
            var meshPart = new THREE.Object3D();
            meshPart.name = _constants.OBJECT_PART.MESH_PART;
            this.object.add(meshPart);
            // 一律会居中处理
            geometry.center();
            var material = this.getFaceMaterial();
            if (this.name === _constants.GEOMETRY_TYPE.DIHEDRON) {
              material.side = THREE.DoubleSide;
            }
            var solid = new THREE.Mesh(geometry, material);
            solid.name = _constants.OBJECT_PART.MESH_PART_MESH;
            this.setContainer(solid, this.object);
            meshPart.add(solid);
            // 图形控制器 *****
            this.object.controller = this;
            return solid;
          } else {
            return null;
          }
        }

        /**
         * 更新棱
         */
      }, {
        key: 'updateLines',
        value: function updateLines(matrix, scale) {
          var _this = this;

          if (!matrix) {
            matrix = this.getPart(_constants.OBJECT_PART.MESH_PART_MESH).matrixWorld;
          }
          var geometry = this.geometry;
          var oldLine = this.getPart(_constants.OBJECT_PART.LINE_PART);
          if (oldLine) {
            this.object.remove(oldLine);
            (0, _UtilsDestroyThreeObject2['default'])(oldLine);
          }
          var lineData = this.getLine();
          if (lineData) {
            (function () {
              var lines = new THREE.Object3D();
              if (lineData.length > 0 && lineData[0].length > 0) {
                (function () {
                  var segmentData = lineData[0];
                  var scope = _this;
                  segmentData.forEach(function (item) {
                    var pointStart = geometry.vertices[item[0]].clone().applyMatrix4(matrix);
                    var pointEnd = geometry.vertices[item[1]].clone().applyMatrix4(matrix);
                    // 在这里创建直线并添加到lines
                    var borderShape = new _BorderShape2['default'](pointStart, pointEnd, scope.data.lineWidth);
                    var border = borderShape.createBorder(scope.getLineMaterial());
                    scope.setContainer(border, scope.object);
                    border.name = _constants.OBJECT_PART.LINE_PART_MESH;
                    lines.add(border);
                  });
                })();
              }
              if (lineData.length > 1 && lineData[1].length > 0) {
                (function () {
                  var circleData = lineData[1];
                  var scope = _this;
                  circleData.forEach(function (item) {
                    var pointCenter = item.center.applyMatrix4(matrix);
                    var radius = item.radius * scale;
                    var rotation = item.rotation;
                    // 在这里创建圆并添加到lines
                    var torusShape = new _TorusShape2['default'](pointCenter, radius, rotation, scope.data.lineWidth);
                    var torus = torusShape.createTorus(scope.getLineMaterial());
                    scope.setContainer(torus, scope.object);
                    torus.name = _constants.OBJECT_PART.LINE_PART_MESH;
                    lines.add(torus);
                  });
                })();
              }
              lines.name = _constants.OBJECT_PART.LINE_PART;
              _this.object.add(lines);
              _presenter2['default'].threeManager.render();
            })();
          }
        }

        /**
         * 更新顶点
         */
      }, {
        key: 'createVertexs',
        value: function createVertexs(matrix) {
          var _this2 = this;

          var geometry = this.geometry;
          var vertexData = this.getVertex();
          if (vertexData) {
            var _ret4 = function () {
              var vertexs = _this2.getPart(_constants.OBJECT_PART.VERTEX_PART);
              if (vertexs) {
                // 更新
                vertexData.forEach(function (item, index) {
                  var position = vertexs.children[index].position;
                  position.copy(geometry.vertices[item]);
                  position.applyMatrix4(matrix);
                });
                return {
                  v: undefined
                };
              }
              // 创建
              vertexs = new THREE.Object3D();
              vertexs.name = _constants.OBJECT_PART.VERTEX_PART;
              var scope = _this2;

              vertexData.forEach(function (item) {
                var shpereCenter = geometry.vertices[item];
                //在这里创建顶点，并添加到vertexs
                var vertexShape = new _VertexShape2['default'](shpereCenter);
                var vertex = vertexShape.createVertex(scope.getVertexMaterial());
                scope.setContainer(vertex, scope.object);
                vertex.name = _constants.OBJECT_PART.VERTEX_PART_MESH;
                vertex.position.applyMatrix4(matrix);
                vertexs.add(vertex);
              });
              vertexs.visible = _this2.data.vertexVisible;
              _this2.object.add(vertexs);
            }();

            if ((typeof _ret4 === 'undefined' ? 'undefined' : _typeof(_ret4)) === 'object') return _ret4.v;
          }
        }

        /**
         * 创建文字
         */
      }, {
        key: 'createText',
        value: function createText(matrix, scale) {
          var _this3 = this;

          var geometry = this.geometry;
          var vertexData = this.getVertex();
          if (vertexData) {
            var _ret5 = function () {
              var space = 30;
              var texts = _this3.getPart(_constants.OBJECT_PART.TEXT_PART);
              if (texts) {
                // 更新
                vertexData.forEach(function (item, index) {
                  var position = texts.children[index].position;
                  var vectorPosition = geometry.vertices[item].clone();
                  position.copy(vectorPosition);
                  position.setLength(position.length() + space / scale);
                  position.applyMatrix4(matrix);
                });
                _this3.updateQuaternionText();
                return {
                  v: undefined
                };
              }

              // 创建
              texts = new THREE.Object3D();
              var textArr = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];
              texts.name = _constants.OBJECT_PART.TEXT_PART;
              var scope = _this3;
              vertexData.forEach(function (item) {
                var shpereCenter = geometry.vertices[item].clone();
                //在这里创建顶点文字，并添加到texts
                var textSprite = new _TextSprite2['default'](textArr[item]);
                var text = textSprite.make();
                text.position.copy(shpereCenter);
                scope.setContainer(text, scope.object);
                text.name = _constants.OBJECT_PART.TEXT_PART_MESH;
                text.position.setLength(text.position.length() + space / scale);
                text.position.applyMatrix4(matrix);
                texts.add(text);
              });
              texts.visible = _this3.data.textVisible;
              _this3.object.add(texts);
              _this3.updateQuaternionText();
            }();

            if ((typeof _ret5 === 'undefined' ? 'undefined' : _typeof(_ret5)) === 'object') return _ret5.v;
          }
        }

        /**
         * 创建初始图形，包括基础面，棱，顶点
         */
      }, {
        key: 'createSolid',
        value: function createSolid() {
          if (!this.createMeshs()) {
            return null;
          }

          // 设置旋转
          var quaternion = this.getInitQuaternion();
          this.object.rotation.setFromQuaternion(quaternion);

          // 获取面的矩阵变换
          var meshmesh = this.getPart(_constants.OBJECT_PART.MESH_PART_MESH);
          meshmesh.updateMatrix();
          var mesh = this.getPart(_constants.OBJECT_PART.MESH_PART);
          mesh.updateMatrix();
          var matrix = new THREE.Matrix4();
          matrix.multiplyMatrices(mesh.matrix, meshmesh.matrix);

          // 创建棱、顶点、文字
          this.updateLines(matrix, mesh.scale.x);
          this.createVertexs(matrix);
          this.createText(matrix, mesh.scale.x);

          return this.object;
        }

        /**
         * 更新图形
         */
      }, {
        key: 'updateSolid',
        value: function updateSolid() {
          var meshmesh = this.getPart(_constants.OBJECT_PART.MESH_PART_MESH);
          meshmesh.updateMatrixWorld(true);
          var mesh = this.getPart(_constants.OBJECT_PART.MESH_PART);
          mesh.updateMatrix();
          var matrix = new THREE.Matrix4();
          matrix.multiplyMatrices(mesh.matrix, meshmesh.matrix);
          this.updateLines(matrix, mesh.scale.x);
          this.createVertexs(matrix);
          this.createText(matrix, mesh.scale.x);
          _presenter2['default'].threeManager.render();
        }
      }, {
        key: 'updateQuaternionText',
        value: function updateQuaternionText() {
          var quaternion = this.object.quaternion.clone().inverse();
          var vertexs = this.getPart(_constants.OBJECT_PART.TEXT_PART);
          if (vertexs) {
            vertexs.children.forEach(function (item) {
              item.quaternion.copy(quaternion);
            });
          }
          _presenter2['default'].threeManager.render();
        }

        /**
         * 释放资源
         */
      }, {
        key: 'dispose',
        value: function dispose() {
          this.name = null;
          this.faceMaterial = null;
          this.lineMaterial = null;
          this.vertexMaterial = null;
          this.data = null;
          this.object = null;
          this.geometry = null;
        }
      }]);

      return BasicSolid;
    }();

    exports['default'] = BasicSolid;
    module.exports = exports['default'];

    /***/
  },
  /* 14 */
  /***/
  function (module, exports) {

    /**
     * 创建边框线
     * @param pointA 边框线的起点坐标
     * @param pointB 边框线的终点坐标
     * @param radius 圆柱体及球体的半径
     * @param segments 球体的精度
     */
    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    var _createClass = function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ('value' in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError('Cannot call a class as a function');
      }
    }

    var BorderShape = function () {
      function BorderShape(pointA, pointB) {
        var radius = arguments.length <= 2 || arguments[2] === undefined ? 2 : arguments[2];
        var segments = arguments.length <= 3 || arguments[3] === undefined ? 4 : arguments[3];

        _classCallCheck(this, BorderShape);

        this.pointA = pointA;
        this.pointB = pointB;
        this.radius = radius;
        this.segments = segments;
        this.border = null;
        this.cylinderGeometry = null;
        this.sphereHeaderGeometry = null;
        this.sphereFooterGeometry = null;
        this.data = {};
        this.data.color = 'black';
      }

      /**
       * 创建边框线主体
       */

      _createClass(BorderShape, [{
        key: 'createBorderBody',
        value: function createBorderBody(dist) {
          this.cylinderGeometry = new THREE.CylinderGeometry(this.radius, this.radius, dist, this.segments, this.segments);

          return this.cylinderGeometry;
        }

        /**
         * 创建边框线上端点
         */
      }, {
        key: 'createBorderHeader',
        value: function createBorderHeader(dist) {
          this.sphereHeaderGeometry = new THREE.SphereGeometry(this.radius, this.segments, this.segments, 0, Math.PI * 2, 0, Math.PI * 2);
          this.sphereHeaderGeometry.translate(0, dist / 2, 0);

          return this.sphereHeaderGeometry;
        }

        /**
         * 创建边框线下端点
         */
      }, {
        key: 'createBorderFooter',
        value: function createBorderFooter(dist) {
          this.sphereFooterGeometry = new THREE.SphereGeometry(this.radius, this.segments, this.segments, 0, Math.PI * 2, 0, Math.PI * 2);
          this.sphereFooterGeometry.translate(0, -dist / 2, 0);

          return this.sphereFooterGeometry;
        }

        // 获取边框线
      }, {
        key: 'createBorder',
        value: function createBorder(material) {
          var center = undefined,
              vector = undefined,
              dist = undefined,
              cylinder = undefined,
              sphereHeader = undefined,
              sphereFooter = undefined;

          this.border = new THREE.Object3D();

          // 两点间的中心点
          center = new THREE.Vector3((this.pointA.x + this.pointB.x) / 2, (this.pointA.y + this.pointB.y) / 2, (this.pointA.z + this.pointB.z) / 2);

          // 两点间的矢量
          vector = new THREE.Vector3().subVectors(this.pointB, this.pointA);

          // 两点间的距离
          dist = this.pointB.distanceTo(this.pointA);

          // 创建边框线主体
          cylinder = this.createBorderBody(dist);

          // 创建边框线端点
          sphereHeader = this.createBorderHeader(dist);
          sphereFooter = this.createBorderFooter(dist);

          var geometry = new THREE.Geometry();
          geometry.merge(cylinder);
          geometry.merge(sphereHeader);
          geometry.merge(sphereFooter);
          this.border = new THREE.Mesh(geometry, material);
          this.border.position.copy(center);

          // 设置边框线与图形的边缘贴合
          this.border.quaternion.setFromUnitVectors(this.border.up, vector.normalize());

          return this.border;
        }

        // 销毁边框线
      }, {
        key: 'dispose',
        value: function dispose() {
          this.cylinderGeometry.dispose();
          this.sphereHeaderGeometry.dispose();
          this.sphereFooterGeometry.dispose();
        }
      }]);

      return BorderShape;
    }();

    exports['default'] = BorderShape;;
    module.exports = exports['default'];

    /***/
  },
  /* 15 */
  /***/
  function (module, exports) {

    /**
     * @param point 顶点的坐标
     * @param radius 顶点的半径
     * @param segments 顶点的精度
     */
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var _createClass = function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    var VertexShape = function () {
      function VertexShape(point) {
        var radius = arguments.length <= 1 || arguments[1] === undefined ? 10 : arguments[1];
        var segments = arguments.length <= 2 || arguments[2] === undefined ? 16 : arguments[2];

        _classCallCheck(this, VertexShape);

        this.point = point;
        this.radius = radius;
        this.segments = segments;
        this.sphere = null;
      }

      /**
       * 创建顶点
       */

      _createClass(VertexShape, [{
        key: "createVertex",
        value: function createVertex(material) {
          this.sphereGeometry = new THREE.SphereGeometry(this.radius, this.segments, this.segments, 0, Math.PI * 2, 0, Math.PI * 2);
          this.sphere = new THREE.Mesh(this.sphereGeometry, material);
          this.sphere.position.copy(this.point);

          return this.sphere;
        }

        /**
         * 销毁
         */
      }, {
        key: "dispose",
        value: function dispose() {
          this.sphereGeometry.dispose();
          this.sphere.dispose();
        }
      }]);

      return VertexShape;
    }();

    exports["default"] = VertexShape;;
    module.exports = exports["default"];

    /***/
  },
  /* 16 */
  /***/
  function (module, exports) {

    /**
     * @param message 要显示的字母
     * @param parameters 对字母相关的设置
     */
    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    var _createClass = function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ('value' in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError('Cannot call a class as a function');
      }
    }

    var TextSprite = function () {
      function TextSprite(message, parameters) {
        _classCallCheck(this, TextSprite);

        this.message = message;
        this.parameters = parameters;
        this.sprite = null;
      }

      /**
       * 创建文字
       */

      _createClass(TextSprite, [{
        key: 'make',
        value: function make() {
          var fontface = undefined,
              fontsize = undefined,
              borderThickness = undefined,
              textColor = undefined,
              canvas = undefined,
              context = undefined,
              metrics = undefined,
              textWidth = undefined,
              texture = undefined,
              spriteMaterial = undefined,
              size = undefined;

          if (this.parameters === undefined) {
            this.parameters = {};
          }
          size = Number.parseFloat($('.cube_opacity .txt').css('fontSize'));

          // 获取当前显示文字的大小，以便设置顶点字母文字的大小
          fontface = this.parameters.hasOwnProperty("fontface") ? this.parameters["fontface"] : "黑体";
          // fontsize = this.parameters.hasOwnProperty("fontsize") ? this.parameters["fontsize"] : 18;
          fontsize = this.parameters.hasOwnProperty("fontsize") ? this.parameters["fontsize"] : 100 + size * 1.5;
          // borderThickness = this.parameters.hasOwnProperty("borderThickness") ? this.parameters["borderThickness"] : 4;
          borderThickness = this.parameters.hasOwnProperty("borderThickness") ? this.parameters["borderThickness"] : size;
          textColor = this.parameters.hasOwnProperty("textColor") ? this.parameters["textColor"] : {
            r: 0,
            g: 0,
            b: 0,
            a: 1.0
          };

          canvas = document.createElement('canvas');
          canvas.width = canvas.width / 2.2;
          canvas.height = canvas.height * 1.2;
          context = canvas.getContext('2d');
          // context.font = "Bold " + fontsize + "px " + fontface;
          context.font = fontsize + "px " + fontface;
          metrics = context.measureText(this.message);
          textWidth = metrics.width;

          context.lineWidth = borderThickness / 2;
          context.strokeStyle = "rgba(255, 255 , 255, 1.0)";
          context.strokeText(this.message, borderThickness, fontsize + borderThickness);
          context.fillStyle = "rgba(" + textColor.r + ", " + textColor.g + ", " + textColor.b + ", 1.0)";
          context.fillText(this.message, borderThickness, fontsize + borderThickness);

          texture = new THREE.Texture(canvas);
          texture.needsUpdate = true;

          var planeGeometry = new THREE.PlaneGeometry(textWidth, textWidth);
          var planeMaterial = new THREE.MeshBasicMaterial({
            map: texture,
            side: THREE.DoubleSide,
            transparent: true,
            opacity: 1
          });
          var plane = new THREE.Mesh(planeGeometry, planeMaterial);
          plane.scale.set(0.8, 0.8, 0.8);
          return plane;
        }

        /**
         * 销毁文字
         */
      }, {
        key: 'dispose',
        value: function dispose() {
          this.sprite.material.map.dispose();
          this.sprite.material.dispose();
        }
      }]);

      return TextSprite;
    }();

    exports['default'] = TextSprite;;
    module.exports = exports['default'];

    /***/
  },
  /* 17 */
  /***/
  function (module, exports) {

    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var _createClass = function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    var TorusShape = function () {
      function TorusShape(point, radius) {
        var rotation = arguments.length <= 2 || arguments[2] === undefined ? -Math.PI / 2 : arguments[2];
        var tube = arguments.length <= 3 || arguments[3] === undefined ? 2 : arguments[3];
        var segments = arguments.length <= 4 || arguments[4] === undefined ? 64 : arguments[4];

        _classCallCheck(this, TorusShape);

        this.point = point;
        this.radius = radius;
        this.rotation = rotation;
        this.tube = tube;
        this.segments = segments;
        this.torusGeometry = null;
        this.torus = null;
      }

      /**
       * 创建圆环
       */

      _createClass(TorusShape, [{
        key: "createTorus",
        value: function createTorus(material) {
          this.torusGeometry = new THREE.TorusGeometry(this.radius, this.tube, this.segments / 4, this.segments, Math.PI * 2);
          this.torus = new THREE.Mesh(this.torusGeometry, material);
          this.torus.position.copy(this.point);
          this.torus.rotation.x = this.rotation;

          return this.torus;
        }

        /**
         * 销毁
         */
      }, {
        key: "dispose",
        value: function dispose() {
          this.torusGeometry.dispose();
          this.torus.dispose();
        }
      }]);

      return TorusShape;
    }();

    exports["default"] = TorusShape;;
    module.exports = exports["default"];

    /***/
  },
  /* 18 */
  /***/
  function (module, exports) {

    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = destroyThreeObject;

    function destroyThreeObject(object) {
      "use strict";

      if (!object) return;
      if (object.children && object.children.length > 0) {
        for (var i = 0; i < object.children.length; i++) {
          destroyThreeObject(object.children[i]);
        }
      }
      if (object.geometry) object.geometry.dispose();
      if (object.material) {
        object.material.dispose();
        if (object.material.map && object.material.map.dispose) object.material.map.dispose();
      }
      object = null;
    }

    module.exports = exports["default"];

    /***/
  },
  /* 19 */
  /***/
  function (module, exports, __webpack_require__) {

    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    var _createClass = function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ('value' in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();

    var _get = function get(_x3, _x4, _x5) {
      var _again = true;
      _function: while (_again) {
        var object = _x3,
            property = _x4,
            receiver = _x5;
        _again = false;
        if (object === null) object = Function.prototype;
        var desc = Object.getOwnPropertyDescriptor(object, property);
        if (desc === undefined) {
          var parent = Object.getPrototypeOf(object);
          if (parent === null) {
            return undefined;
          } else {
            _x3 = parent;
            _x4 = property;
            _x5 = receiver;
            _again = true;
            desc = parent = undefined;
            continue _function;
          }
        } else if ('value' in desc) {
          return desc.value;
        } else {
          var getter = desc.get;
          if (getter === undefined) {
            return undefined;
          }
          return getter.call(receiver);
        }
      }
    };

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        'default': obj
      };
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError('Cannot call a class as a function');
      }
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== 'function' && superClass !== null) {
        throw new TypeError('Super expression must either be null or a function, not ' + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    var _BasicSolidJs = __webpack_require__(13);

    var _BasicSolidJs2 = _interopRequireDefault(_BasicSolidJs);

    var _constants = __webpack_require__(8);

    //require('script!../Controller/SphereGeometry')

    var SphereShape = function (_BasicSolid) {
      _inherits(SphereShape, _BasicSolid);

      function SphereShape(radius) {
        var isHemiSphere = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
        var name = arguments.length <= 2 || arguments[2] === undefined ? _constants.GEOMETRY_TYPE.SPHERE : arguments[2];

        _classCallCheck(this, SphereShape);

        _get(Object.getPrototypeOf(SphereShape.prototype), 'constructor', this).call(this, name);
        this.radius = radius;
        this.isHemiSphere = isHemiSphere;
      }

      _createClass(SphereShape, [{
        key: 'getGeometry',
        value: function getGeometry() {
          return new THREE.SphereGeometry(this.radius, 100, 100, 0, Math.PI * 2);
        }
      }, {
        key: 'getLine',
        value: function getLine() {
          return [[], [{
            center: new THREE.Vector3(0, 0, 0),
            radius: this.radius,
            rotation: 0
          }]];
        }

        /**
         * 获取初始化四元数旋转
         * @returns {THREE.Quaternion}
         */
      }, {
        key: 'getInitQuaternion',
        value: function getInitQuaternion() {
          var quaternion = new THREE.Quaternion();
          // 绕轴(1,1,1)旋转30°
          quaternion.set(0.82, 0.04, -0.02, 0.56);
          return quaternion;
        }
      }]);

      return SphereShape;
    }(_BasicSolidJs2['default']);

    exports['default'] = SphereShape;
    module.exports = exports['default'];

    /***/
  },
  /* 20 */
  /***/
  function (module, exports, __webpack_require__) {

    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    var _createClass = function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ('value' in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();

    var _get = function get(_x2, _x3, _x4) {
      var _again = true;
      _function: while (_again) {
        var object = _x2,
            property = _x3,
            receiver = _x4;
        _again = false;
        if (object === null) object = Function.prototype;
        var desc = Object.getOwnPropertyDescriptor(object, property);
        if (desc === undefined) {
          var parent = Object.getPrototypeOf(object);
          if (parent === null) {
            return undefined;
          } else {
            _x2 = parent;
            _x3 = property;
            _x4 = receiver;
            _again = true;
            desc = parent = undefined;
            continue _function;
          }
        } else if ('value' in desc) {
          return desc.value;
        } else {
          var getter = desc.get;
          if (getter === undefined) {
            return undefined;
          }
          return getter.call(receiver);
        }
      }
    };

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        'default': obj
      };
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError('Cannot call a class as a function');
      }
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== 'function' && superClass !== null) {
        throw new TypeError('Super expression must either be null or a function, not ' + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    var _BasicSolid2 = __webpack_require__(13);

    var _BasicSolid3 = _interopRequireDefault(_BasicSolid2);

    var _constants = __webpack_require__(8);

    var CylinderShape = function (_BasicSolid) {
      _inherits(CylinderShape, _BasicSolid);

      function CylinderShape(radiusTop, radiusBottom, height, radiusSegments) {
        var name = arguments.length <= 4 || arguments[4] === undefined ? _constants.GEOMETRY_TYPE.CYLINDER : arguments[4];

        _classCallCheck(this, CylinderShape);

        _get(Object.getPrototypeOf(CylinderShape.prototype), 'constructor', this).call(this, name);
        this.radiusTop = radiusTop;
        this.radiusBottom = radiusBottom;
        this.height = height;
        this.radiusSegments = radiusSegments;
      }

      _createClass(CylinderShape, [{
        key: 'getGeometry',
        value: function getGeometry() {
          return new THREE.CylinderGeometry(this.radiusTop, this.radiusBottom, this.height, this.radiusSegments);
        }
      }, {
        key: 'getLine',
        value: function getLine() {
          return [[], [{
            center: new THREE.Vector3(0, this.height / 2, 0),
            radius: this.radiusTop
          }, {
            center: new THREE.Vector3(0, -this.height / 2, 0),
            radius: this.radiusBottom
          }]];
        }

        /**
         * 获取初始化四元数旋转
         * @returns {THREE.Quaternion}
         */
      }, {
        key: 'getInitQuaternion',
        value: function getInitQuaternion() {
          var quaternion = new THREE.Quaternion();
          // 绕轴(1,1,1)旋转30°
          quaternion.set(0.15, 0, 0, 0.98);
          return quaternion;
        }
      }]);

      return CylinderShape;
    }(_BasicSolid3['default']);

    exports['default'] = CylinderShape;
    module.exports = exports['default'];

    /***/
  },
  /* 21 */
  /***/
  function (module, exports, __webpack_require__) {

    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    var _createClass = function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ('value' in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();

    var _get = function get(_x, _x2, _x3) {
      var _again = true;
      _function: while (_again) {
        var object = _x,
            property = _x2,
            receiver = _x3;
        _again = false;
        if (object === null) object = Function.prototype;
        var desc = Object.getOwnPropertyDescriptor(object, property);
        if (desc === undefined) {
          var parent = Object.getPrototypeOf(object);
          if (parent === null) {
            return undefined;
          } else {
            _x = parent;
            _x2 = property;
            _x3 = receiver;
            _again = true;
            desc = parent = undefined;
            continue _function;
          }
        } else if ('value' in desc) {
          return desc.value;
        } else {
          var getter = desc.get;
          if (getter === undefined) {
            return undefined;
          }
          return getter.call(receiver);
        }
      }
    };

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        'default': obj
      };
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError('Cannot call a class as a function');
      }
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== 'function' && superClass !== null) {
        throw new TypeError('Super expression must either be null or a function, not ' + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    var _BasicSolidJs = __webpack_require__(13);

    var _BasicSolidJs2 = _interopRequireDefault(_BasicSolidJs);

    var _constants = __webpack_require__(8);

    __webpack_require__(22);

    var PyramidShape = function (_BasicSolid) {
      _inherits(PyramidShape, _BasicSolid);

      function PyramidShape(radius) {
        _classCallCheck(this, PyramidShape);

        _get(Object.getPrototypeOf(PyramidShape.prototype), 'constructor', this).call(this, _constants.GEOMETRY_TYPE.PYRAMID);
        this.radius = radius;
      }

      _createClass(PyramidShape, [{
        key: 'getGeometry',
        value: function getGeometry() {
          return new THREE.PyramidGeometry(this.radius);
        }
      }, {
        key: 'getLine',
        value: function getLine() {
          return [[[0, 1], [0, 3], [0, 4], [1, 2], [1, 4], [2, 3], [2, 4], [3, 4]]];
        }
      }, {
        key: 'getVertex',
        value: function getVertex() {
          return [0, 1, 2, 3, 4];
        }

        /**
         * 获取初始化四元数旋转
         * @returns {THREE.Quaternion}
         */
      }, {
        key: 'getInitQuaternion',
        value: function getInitQuaternion() {
          var quaternion = new THREE.Quaternion();
          // 绕轴(1,1,1)旋转30°
          quaternion.set(0.04, -1.02, -0.12, 0.25);
          return quaternion;
        }
      }]);

      return PyramidShape;
    }(_BasicSolidJs2['default']);

    exports['default'] = PyramidShape;
    module.exports = exports['default'];

    /***/
  },
  /* 22 */
  /***/
  function (module, exports) {

    /**
     * @author timothypratley / https://github.com/timothypratley
     */

    'use strict';

    THREE.PyramidGeometry = function (radius, detail) {

      var vertices = [0.5, 0, 0, 0, 0, -0.5, -0.5, 0, 0, 0, 0, 0.5, 0, 1, 0];

      var indices = [0, 1, 4, 3, 0, 4, 2, 3, 4, 1, 2, 4, 1, 3, 2, 1, 0, 3];

      THREE.PolyhedronGeometry.call(this, vertices, indices, radius, detail);

      this.type = 'PyramidGeometry';

      this.parameters = {
        radius: radius,
        detail: detail
      };
    };

    THREE.PyramidGeometry.prototype = Object.create(THREE.PolyhedronGeometry.prototype);
    THREE.PyramidGeometry.prototype.constructor = THREE.PyramidGeometry;

    THREE.PyramidGeometry.prototype.clone = function () {

      var parameters = this.parameters;

      return new THREE.PyramidGeometry(parameters.radius, parameters.detail);
    };

    THREE.PyramidGeometry.prototype.frame = function () {
      var geometry = new THREE.Geometry();
      for (var i = 0; i < 4; i++) {
        var f = this.faces[i];
        geometry.vertices.push(this.vertices[f.a]);
        geometry.vertices.push(this.vertices[f.b]);
        geometry.vertices.push(this.vertices[f.c]);
        geometry.vertices.push(this.vertices[f.a]);
      }
      return geometry;
    };

    /***/
  },
  /* 23 */
  /***/
  function (module, exports, __webpack_require__) {

    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    var _createClass = function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ('value' in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();

    var _get = function get(_x, _x2, _x3) {
      var _again = true;
      _function: while (_again) {
        var object = _x,
            property = _x2,
            receiver = _x3;
        _again = false;
        if (object === null) object = Function.prototype;
        var desc = Object.getOwnPropertyDescriptor(object, property);
        if (desc === undefined) {
          var parent = Object.getPrototypeOf(object);
          if (parent === null) {
            return undefined;
          } else {
            _x = parent;
            _x2 = property;
            _x3 = receiver;
            _again = true;
            desc = parent = undefined;
            continue _function;
          }
        } else if ('value' in desc) {
          return desc.value;
        } else {
          var getter = desc.get;
          if (getter === undefined) {
            return undefined;
          }
          return getter.call(receiver);
        }
      }
    };

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        'default': obj
      };
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError('Cannot call a class as a function');
      }
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== 'function' && superClass !== null) {
        throw new TypeError('Super expression must either be null or a function, not ' + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    var _BasicSolid2 = __webpack_require__(13);

    var _BasicSolid3 = _interopRequireDefault(_BasicSolid2);

    var _constants = __webpack_require__(8);

    var TetraShape = function (_BasicSolid) {
      _inherits(TetraShape, _BasicSolid);

      function TetraShape(radius) {
        _classCallCheck(this, TetraShape);

        _get(Object.getPrototypeOf(TetraShape.prototype), 'constructor', this).call(this, _constants.GEOMETRY_TYPE.TETRA);
        this.radius = radius;
      }

      _createClass(TetraShape, [{
        key: 'getGeometry',
        value: function getGeometry() {
          return new THREE.TetrahedronGeometry(this.radius);
        }
      }, {
        key: 'getLine',
        value: function getLine() {
          return [[[0, 1], [0, 2], [0, 3], [1, 2], [1, 3], [2, 3]]];
        }
      }, {
        key: 'getVertex',
        value: function getVertex() {
          return [0, 1, 2, 3];
        }

        /**
         * 获取初始化四元数旋转
         * @returns {THREE.Quaternion}
         */
      }, {
        key: 'getInitQuaternion',
        value: function getInitQuaternion() {
          var quaternion = new THREE.Quaternion();
          // 绕轴(1,1,1)旋转30°
          quaternion.set(-0.22, -0.81, -0.51, -0.14);
          return quaternion;
        }
      }]);

      return TetraShape;
    }(_BasicSolid3['default']);

    exports['default'] = TetraShape;
    module.exports = exports['default'];

    /***/
  },
  /* 24 */
  /***/
  function (module, exports, __webpack_require__) {

    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    var _createClass = function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ('value' in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();

    var _get = function get(_x, _x2, _x3) {
      var _again = true;
      _function: while (_again) {
        var object = _x,
            property = _x2,
            receiver = _x3;
        _again = false;
        if (object === null) object = Function.prototype;
        var desc = Object.getOwnPropertyDescriptor(object, property);
        if (desc === undefined) {
          var parent = Object.getPrototypeOf(object);
          if (parent === null) {
            return undefined;
          } else {
            _x = parent;
            _x2 = property;
            _x3 = receiver;
            _again = true;
            desc = parent = undefined;
            continue _function;
          }
        } else if ('value' in desc) {
          return desc.value;
        } else {
          var getter = desc.get;
          if (getter === undefined) {
            return undefined;
          }
          return getter.call(receiver);
        }
      }
    };

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        'default': obj
      };
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError('Cannot call a class as a function');
      }
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== 'function' && superClass !== null) {
        throw new TypeError('Super expression must either be null or a function, not ' + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    var _CylinderShape2 = __webpack_require__(20);

    var _CylinderShape3 = _interopRequireDefault(_CylinderShape2);

    var _constants = __webpack_require__(8);

    var SimpleCylinderShape = function (_CylinderShape) {
      _inherits(SimpleCylinderShape, _CylinderShape);

      function SimpleCylinderShape(faceRadius, height, radiusSegments) {
        _classCallCheck(this, SimpleCylinderShape);

        _get(Object.getPrototypeOf(SimpleCylinderShape.prototype), 'constructor', this).call(this, faceRadius, faceRadius, height, radiusSegments, _constants.GEOMETRY_TYPE.SIMPLE_CYLINDER);
        this.faceRadius = faceRadius;
      }

      _createClass(SimpleCylinderShape, [{
        key: 'getLine',
        value: function getLine() {
          return [[], [{
            center: new THREE.Vector3(0, this.height / 2, 0),
            radius: this.faceRadius
          }, {
            center: new THREE.Vector3(0, -this.height / 2, 0),
            radius: this.faceRadius
          }]];
        }

        /**
         * 获取初始化四元数旋转
         * @returns {THREE.Quaternion}
         */
      }, {
        key: 'getInitQuaternion',
        value: function getInitQuaternion() {
          var quaternion = new THREE.Quaternion();
          // 绕轴(1,1,1)旋转30°
          quaternion.set(0.12, 0, 0, 0.98);
          return quaternion;
        }
      }]);

      return SimpleCylinderShape;
    }(_CylinderShape3['default']);

    exports['default'] = SimpleCylinderShape;
    module.exports = exports['default'];

    /***/
  },
  /* 25 */
  /***/
  function (module, exports, __webpack_require__) {

    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    var _createClass = function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ('value' in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();

    var _get = function get(_x, _x2, _x3) {
      var _again = true;
      _function: while (_again) {
        var object = _x,
            property = _x2,
            receiver = _x3;
        _again = false;
        if (object === null) object = Function.prototype;
        var desc = Object.getOwnPropertyDescriptor(object, property);
        if (desc === undefined) {
          var parent = Object.getPrototypeOf(object);
          if (parent === null) {
            return undefined;
          } else {
            _x = parent;
            _x2 = property;
            _x3 = receiver;
            _again = true;
            desc = parent = undefined;
            continue _function;
          }
        } else if ('value' in desc) {
          return desc.value;
        } else {
          var getter = desc.get;
          if (getter === undefined) {
            return undefined;
          }
          return getter.call(receiver);
        }
      }
    };

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        'default': obj
      };
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError('Cannot call a class as a function');
      }
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== 'function' && superClass !== null) {
        throw new TypeError('Super expression must either be null or a function, not ' + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    var _CylinderShape2 = __webpack_require__(20);

    var _CylinderShape3 = _interopRequireDefault(_CylinderShape2);

    var _constants = __webpack_require__(8);

    var ConeCylinderShape = function (_CylinderShape) {
      _inherits(ConeCylinderShape, _CylinderShape);

      function ConeCylinderShape(faceRadius, height, radiusSegments) {
        _classCallCheck(this, ConeCylinderShape);

        _get(Object.getPrototypeOf(ConeCylinderShape.prototype), 'constructor', this).call(this, 0, faceRadius, height, radiusSegments, _constants.GEOMETRY_TYPE.CONE);
        this.faceRadius = faceRadius;
        this.height = height;
      }

      _createClass(ConeCylinderShape, [{
        key: 'getLine',
        value: function getLine() {
          return [[], [{
            center: new THREE.Vector3(0, -this.height / 2, 0),
            radius: this.faceRadius
          }]];
        }
      }, {
        key: 'getVertex',
        value: function getVertex() {
          return [0];
        }

        /**
         * 获取初始化四元数旋转
         * @returns {THREE.Quaternion}
         */
      }, {
        key: 'getInitQuaternion',
        value: function getInitQuaternion() {
          var quaternion = new THREE.Quaternion();
          // 绕轴(1,1,1)旋转30°
          quaternion.set(0.17, 0, 0, 0.98);
          return quaternion;
        }
      }]);

      return ConeCylinderShape;
    }(_CylinderShape3['default']);

    exports['default'] = ConeCylinderShape;
    module.exports = exports['default'];

    /***/
  },
  /* 26 */
  /***/
  function (module, exports, __webpack_require__) {

    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    var _createClass = function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ('value' in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();

    var _get = function get(_x, _x2, _x3) {
      var _again = true;
      _function: while (_again) {
        var object = _x,
            property = _x2,
            receiver = _x3;
        _again = false;
        if (object === null) object = Function.prototype;
        var desc = Object.getOwnPropertyDescriptor(object, property);
        if (desc === undefined) {
          var parent = Object.getPrototypeOf(object);
          if (parent === null) {
            return undefined;
          } else {
            _x = parent;
            _x2 = property;
            _x3 = receiver;
            _again = true;
            desc = parent = undefined;
            continue _function;
          }
        } else if ('value' in desc) {
          return desc.value;
        } else {
          var getter = desc.get;
          if (getter === undefined) {
            return undefined;
          }
          return getter.call(receiver);
        }
      }
    };

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        'default': obj
      };
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError('Cannot call a class as a function');
      }
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== 'function' && superClass !== null) {
        throw new TypeError('Super expression must either be null or a function, not ' + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    var _SphereShapeJs = __webpack_require__(19);

    var _SphereShapeJs2 = _interopRequireDefault(_SphereShapeJs);

    var _constants = __webpack_require__(8);

    var HemisphereShape = function (_SphereShape) {
      _inherits(HemisphereShape, _SphereShape);

      function HemisphereShape(radius) {
        _classCallCheck(this, HemisphereShape);

        _get(Object.getPrototypeOf(HemisphereShape.prototype), 'constructor', this).call(this, radius, true, _constants.GEOMETRY_TYPE.HEMI_SPHERE);
        this.radius = radius;
      }

      _createClass(HemisphereShape, [{
        key: 'getGeometry',
        value: function getGeometry() {
          var sphereGeometry = new THREE.SphereGeometry(this.radius, 100, 100, 0, Math.PI);
          var circleGeometry = new THREE.CircleGeometry(this.radius, 100);
          circleGeometry.rotateX(Math.PI);
          sphereGeometry.merge(circleGeometry);
          return sphereGeometry;
        }
      }, {
        key: 'getLine',
        value: function getLine() {
          return [[], [{
            center: new THREE.Vector3(0, 0, -this.radius / 2),
            radius: this.radius,
            rotation: 0
          }]];
        }

        /**
         * 获取初始化四元数旋转
         * @returns {THREE.Quaternion}
         */
      }, {
        key: 'getInitQuaternion',
        value: function getInitQuaternion() {
          var quaternion = new THREE.Quaternion();
          // 绕轴(1,1,1)旋转30°
          quaternion.set(-0.2, 0.72, -0.61, -0.16);
          return quaternion;
        }
      }]);

      return HemisphereShape;
    }(_SphereShapeJs2['default']);

    exports['default'] = HemisphereShape;
    module.exports = exports['default'];

    /***/
  },
  /* 27 */
  /***/
  function (module, exports, __webpack_require__) {

    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    var _createClass = function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ('value' in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();

    var _get = function get(_x2, _x3, _x4) {
      var _again = true;
      _function: while (_again) {
        var object = _x2,
            property = _x3,
            receiver = _x4;
        _again = false;
        if (object === null) object = Function.prototype;
        var desc = Object.getOwnPropertyDescriptor(object, property);
        if (desc === undefined) {
          var parent = Object.getPrototypeOf(object);
          if (parent === null) {
            return undefined;
          } else {
            _x2 = parent;
            _x3 = property;
            _x4 = receiver;
            _again = true;
            desc = parent = undefined;
            continue _function;
          }
        } else if ('value' in desc) {
          return desc.value;
        } else {
          var getter = desc.get;
          if (getter === undefined) {
            return undefined;
          }
          return getter.call(receiver);
        }
      }
    };

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        'default': obj
      };
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError('Cannot call a class as a function');
      }
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== 'function' && superClass !== null) {
        throw new TypeError('Super expression must either be null or a function, not ' + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    var _BasicSolid2 = __webpack_require__(13);

    var _BasicSolid3 = _interopRequireDefault(_BasicSolid2);

    var _constants = __webpack_require__(8);

    __webpack_require__(28);

    var Dihedron = function (_BasicSolid) {
      _inherits(Dihedron, _BasicSolid);

      function Dihedron(radius) {
        var name = arguments.length <= 1 || arguments[1] === undefined ? _constants.GEOMETRY_TYPE.DIHEDRON : arguments[1];

        _classCallCheck(this, Dihedron);

        _get(Object.getPrototypeOf(Dihedron.prototype), 'constructor', this).call(this, name);
        this.radius = radius;
      }

      _createClass(Dihedron, [{
        key: 'getGeometry',
        value: function getGeometry() {
          return new THREE.Dihedron(this.radius);
        }
      }, {
        key: 'getLine',
        value: function getLine() {
          return [[[0, 1], [0, 3], [1, 2], [2, 3], [0, 5], [3, 4], [4, 5]]];
        }
      }, {
        key: 'getVertex',
        value: function getVertex() {
          return [0, 1, 2, 3, 4, 5];
        }

        /**
         * 获取初始化四元数旋转
         * @returns {THREE.Quaternion}
         */
      }, {
        key: 'getInitQuaternion',
        value: function getInitQuaternion() {
          var quaternion = new THREE.Quaternion();
          // 绕轴(1,1,1)旋转30°
          quaternion.set(-0.37, 0.75, -0.36, 0.37);
          return quaternion;
        }
      }]);

      return Dihedron;
    }(_BasicSolid3['default']);

    exports['default'] = Dihedron;
    module.exports = exports['default'];

    /***/
  },
  /* 28 */
  /***/
  function (module, exports) {

    /**
     * @author timothypratley / https://github.com/timothypratley
     */
    //夹角60度
    'use strict';

    THREE.Dihedron = function (radius, detail) {

      var vertices = [0.5, -0.5, -0.29, 0.5, 0.5, -0.29, -0.5, 0.5, -0.29, -0.5, -0.5, -0.29, -0.5, 0, 0.58, 0.5, 0, 0.58];

      var indices = [0, 1, 2, 0, 2, 3, 0, 5, 4, 0, 4, 3];

      THREE.PolyhedronGeometry.call(this, vertices, indices, radius, detail);

      this.type = 'Dihedron';

      this.parameters = {
        radius: radius,
        detail: detail
      };
    };

    THREE.Dihedron.prototype = Object.create(THREE.PolyhedronGeometry.prototype);
    THREE.Dihedron.prototype.constructor = THREE.Dihedron;

    THREE.Dihedron.prototype.clone = function () {

      var parameters = this.parameters;

      return new THREE.Dihedron(parameters.radius, parameters.detail);
    };

    THREE.Dihedron.prototype.frame = function () {
      var geometry = new THREE.Geometry();
      var lines = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 0], [0, 3]];
      for (var i = 0; i < lines.length; i++) {
        var point = lines[i];
        geometry.vertices.push(this.vertices[point[0]]);
        geometry.vertices.push(this.vertices[point[1]]);
      }
      return geometry;
    };

    /***/
  },
  /* 29 */
  /***/
  function (module, exports, __webpack_require__) {

    /**
     * three.js 管理
     */
    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    var _createClass = function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ('value' in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        'default': obj
      };
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError('Cannot call a class as a function');
      }
    }

    var _UtilsAutoDetectRender = __webpack_require__(30);

    var _UtilsAutoDetectRender2 = _interopRequireDefault(_UtilsAutoDetectRender);

    var _constants = __webpack_require__(8);

    var _ControllerControllerHelper = __webpack_require__(31);

    var _ControllerControllerHelper2 = _interopRequireDefault(_ControllerControllerHelper);

    var _presenter = __webpack_require__(2);

    var _presenter2 = _interopRequireDefault(_presenter);

    var _ShapeShapeFactory = __webpack_require__(10);

    var _ShapeShapeFactory2 = _interopRequireDefault(_ShapeShapeFactory);

    var _UtilsToDegrees = __webpack_require__(34);

    var _UtilsToDegrees2 = _interopRequireDefault(_UtilsToDegrees);

    var _UtilsToRadians = __webpack_require__(35);

    var _UtilsToRadians2 = _interopRequireDefault(_UtilsToRadians);

    var _UtilsTimerManager = __webpack_require__(36);

    var _UtilsTimerManager2 = _interopRequireDefault(_UtilsTimerManager);

    var _UtilsDestroyThreeObject = __webpack_require__(18);

    var _UtilsDestroyThreeObject2 = _interopRequireDefault(_UtilsDestroyThreeObject);

    var _UtilsShowHint = __webpack_require__(37);

    var _UtilsShowHint2 = _interopRequireDefault(_UtilsShowHint);

    var _UtilsCloseTool = __webpack_require__(38);

    var _UtilsCloseTool2 = _interopRequireDefault(_UtilsCloseTool);

    var _UtilsStringUtil = __webpack_require__(39);

    var _UtilsStringUtil2 = _interopRequireDefault(_UtilsStringUtil);

    var threeManager = function () {
      function threeManager() {
        _classCallCheck(this, threeManager);

        // 场景
        this.scene = null;
        //相机
        this.camera = null;
        // 渲染器
        //this.renderer = null;
        // 渲染器属性
        //this.rendererOption = null;
        // 射线
        this.raycaster = null;
        // 屏幕尺寸
        this.rect = null;
        // canvas元素
        //this.canvas = null;
        // 动画是否启用
        this.useAnimate = _constants.USE_ANIMATE;
        // 动画
        //this.animateFrame = null;

        this.timerManager = null;

        //控制器
        this.controller = null;

        //保存图形顺序
        this.shapesOrder = null;

        //当前图形索引
        this.hasSelect = false;

        // 灯光
        this.light = null;

        //当前操作类型
        this.controllerType = null;
        //缩放操作点
        this.scaleIndex = null;

        //辅助XY面
        this._xyPlane = null;

        // dom坐标
        this.downPoint = null;

        //拖动旋转
        this.prePosition = null;

        //辅助坐标
        this.downVector = null;

        //记录时间点
        this.preTime = null;

        //需要保存的数据
        this.moveOffset = null;

        //基础播放器事件绑定
        this.bindPointerDown = null;
        this.bindFocus = null;
        this.bindPointerMove = null;
        this.bindPointerUp = null;
        this.bindBlur = null;
        // 定时器
        this.bindAutoRotate = null;

        //渲染动画绑定
        this.bindAnimate = null;

        // 旋转变换
        this.deltaRotationQuaternion = null;
        this.deltaMove = null;

        // 记录缩放点
        this.pivot = null;

        // 记录缩放前图形大小
        this.oldWidth = null;
        this.oldHeight = null;
      }

      /**
       * 初始化
       * @param canvas
       */

      _createClass(threeManager, [{
        key: 'init',
        value: function init() {
          // 获取canvas
          //this.canvas = (canvas && canvas.length > 0) ? canvas : null;

          // 创建场景
          this.scene = new THREE.Scene();

          // 渲染选项
          //this.rendererOption = {
          //    alpha: true,
          //    antialias: true // 反锯齿，仅在web-gl下有效
          //};

          // 获取屏幕尺寸
          this.rect = {
            top: 0,
            left: 0,
            width: document.body.clientWidth,
            height: document.body.clientHeight
          };

          // 判断是否构建canvas
          //if (this.canvas) {
          //    $.extend(this.rendererOption, {canvas: canvas.get(0)});
          //}

          // 创建渲染器
          //this.renderer = autoDetectRender(this.rendererOption);
          //this.renderer.setSize(this.rect.width, this.rect.height);
          //this.renderer.setClearColor(0xFFFFFF, 0);

          //if (!this.canvas) {
          //    $(presenter.view).append(this.renderer.domElement);
          //    this.canvas = $(this.renderer.domElement);
          //}

          //this.canvas.css('pointer-events', 'none');

          // 射线初始化
          this.raycaster = new THREE.Raycaster();
          this.raycaster.linePrecision = 1;

          // 相机初始化
          var RATIO = 2;
          this.camera = new THREE.OrthographicCamera(this.rect.width / -RATIO, this.rect.width / RATIO, this.rect.height / RATIO, this.rect.height / -RATIO, -200000, 200000);
          this.camera.position.set(0, 0, 1);
          this.camera.lookAt({
            x: 0,
            y: 0,
            z: 0
          });

          if (!_presenter2['default'].webglControl.addView(this.scene, this.camera, true, this.onFocus.bind(this), this.onBlur.bind(this))) {
            (0, _UtilsCloseTool2['default'])();
          }

          // 控制器
          this.controller = new _ControllerControllerHelper2['default'](this.camera);
          this.add(this.controller.transform.controller);

          // 定时器管理
          this.timerManager = new _UtilsTimerManager2['default']();

          //图形顺序
          this.shapesOrder = [];

          // 操作缩放点
          this.scaleIndex = _constants.SCALE_INDEX.NONE_INDEX;

          // 辅助XY面
          this._xyPlane = new THREE.Mesh(new THREE.PlaneGeometry(1, 1, 1, 1), new THREE.MeshBasicMaterial({
            visible: false
          }));
          this._xyPlane.scale.set(2000, 2000, 1);
          this._xyPlane.name = 'help';
          this.add(this._xyPlane);

          //拖动旋转
          this.prePosition = {
            x: 0,
            y: 0
          };

          // 记录时间点
          this.preTime = undefined;

          //基础播放器事件绑定
          this.bindPointerDown = this.onPointerDown.bind(this);
          this.bindFocus = this.onFocus.bind(this);
          this.bindPointerMove = this.onPointerMove.bind(this);
          this.bindPointerUp = this.onPointerUp.bind(this);
          this.bindBlur = this.onBlur.bind(this);
          _presenter2['default'].listenerManager.addListener('mousedown', this.bindPointerDown);
          _presenter2['default'].listenerManager.addListener('focus', this.bindFocus);
          _presenter2['default'].listenerManager.addListener('blur', this.bindBlur);

          // 定时器
          this.bindAutoRotate = this.autoRotate.bind(this);

          // 灯光
          this.light = new THREE.Object3D();
          var directionalLight = new THREE.DirectionalLight(0xffffff, 0.5);
          directionalLight.position.set(-1, 1, 1);
          this.light.add(directionalLight);

          var ambientLight = new THREE.AmbientLight(0xffffff);
          this.light.add(ambientLight);
          this.light.name = 'light';

          this.add(this.light);

          // 旋转变换
          this.deltaRotationQuaternion = new THREE.Quaternion();
          this.deltaMove = new THREE.Vector2();

          //记录缩放点
          this.pivot = new THREE.Vector3();

          // 渲染事件绑定
          //this.bindAnimate = this.animate.bind(this);

          //动画
          //if (this.useAnimate) {
          //    this.animate();
          //}
        }

        /**
         * 释放资源
         */
      }, {
        key: 'dispose',
        value: function dispose() {
          // 动画
          //if (this.animateFrame) {
          //    cancelAnimationFrame(this.animateFrame);
          //}

          // 渲染事件绑定
          //this.bindAnimate = null;

          // 场景
          _presenter2['default'].webglControl.removeScene(this.scene);
          (0, _UtilsDestroyThreeObject2['default'])(this.scene);
          this.scene = null;
          //相机
          this.camera = null;
          // 渲染器
          //this.renderer.dispose && this.renderer.dispose();
          //this.renderer = null;

          // 渲染器属性
          //this.rendererOption = null;
          // 射线
          this.raycaster = null;

          // 屏幕尺寸
          this.rect = null;

          // canvas元素
          //this.canvas.remove();
          //this.canvas = null;

          // 动画是否启用
          this.useAnimate = _constants.USE_ANIMATE;

          //控制器
          this.controller.dispose();
          this.controller = null;

          // 定时器管理
          this.timerManager = null;

          // 图形顺序
          this.shapesOrder.length = 0;
          this.shapesOrder = null;

          //保存图形顺序
          this.shapesOrder = null;

          //当前图形索引
          this.hasSelect = null;

          // 灯光
          this.light = null;

          // 当前操作类型
          this.controllerType = null;
          //缩放操作点
          this.scaleIndex = null;

          // 辅助XY面
          this._xyPlane = null;

          // dom坐标
          this.downPoint = null;

          // 拖动旋转
          this.prePosition = null;

          // 辅助坐标
          this.downVector = null;

          // 记录时间点
          this.preTime = null;

          //需要保存的数据
          this.moveOffset = null;

          //基础播放器事件绑定
          this.bindPointerDown = null;
          this.bindFocus = null;
          this.bindPointerMove = null;
          this.bindPointerUp = null;
          this.bindBlur = null;

          // 定时器
          this.bindAutoRotate = null;

          // 旋转变换
          this.deltaRotationQuaternion = null;
          this.deltaMove = null;

          // 记录缩放点
          this.pivot = null;

          // 记录缩放前图形大小
          this.oldWidth = null;
          this.oldHeight = null;
        }

        /**
         * 获取辅助坐标{x:x, y:y, z:0}
         * @param pointer
         * @returns {*}
         */
      }, {
        key: 'getHelpPosition',
        value: function getHelpPosition(pointer) {
          var intersect = this.intersectObjects(pointer, this._xyPlane);
          if (intersect) {
            return intersect.point;
          }
          return null;
        }

        /**
         * 返回射线目标
         * @param pointer
         * @param objects
         * @returns {*}
         */
      }, {
        key: 'intersectObjects',
        value: function intersectObjects(pointer, objects) {
          if (!objects) {
            return false;
          }
          var x = (pointer.clientX - this.rect.left) / this.rect.width;
          var y = (pointer.clientY - this.rect.top) / this.rect.height;

          var pointerVector = new THREE.Vector2();
          pointerVector.set(x * 2 - 1, -(y * 2) + 1);
          this.raycaster.setFromCamera(pointerVector, this.camera);

          var intersections = undefined;
          if (objects instanceof Array) {
            intersections = this.raycaster.intersectObjects(objects, true);
          } else {
            intersections = this.raycaster.intersectObject(objects, true);
          }
          return intersections[0] ? intersections[0] : false;
        }

        /**
         * 获取屏幕坐标
         * @param coordinate 3D坐标
         * @returns {{x: *, y: *}}
         */
      }, {
        key: 'getScreenPosition',
        value: function getScreenPosition(coordinate) {
          var vector = new THREE.Vector3();
          vector.copy(coordinate);

          var widthHalf = 0.5 * this.rect.width;
          var heightHalf = 0.5 * this.rect.height;

          vector.project(this.camera);

          vector.x = vector.x * widthHalf + widthHalf;
          vector.y = -(vector.y * heightHalf) + heightHalf;

          return {
            x: Math.round(vector.x + this.rect.left),
            y: Math.round(vector.y + this.rect.top)
          };
        }

        /**
         * 获取缩放按钮序号
         * @param pointer
         * @returns {*}
         */
      }, {
        key: 'getIndexOfScale',
        value: function getIndexOfScale(pointer) {
          if (!this.controller.visible) {
            return false;
          }
          var intersect = this.intersectObjects(pointer, this.controller.getScaleController());
          if (intersect) {
            return intersect.object.name;
          }
          return _constants.SCALE_INDEX.NONE_INDEX;
        }

        /**
         * 获取立体图形上的第一射线交点
         * @param pointer
         * @returns {*}
         */
      }, {
        key: 'getIntersectOfObjects',
        value: function getIntersectOfObjects(pointer) {
          return this.intersectObjects(pointer, this.shapesOrder);
        }

        /**
         * 获取当前图形的第一射线交点
         * @param pointer
         * @returns {*}
         */
      }, {
        key: 'getIntersectOfCurrentObject',
        value: function getIntersectOfCurrentObject(pointer) {
          return this.intersectObjects(pointer, this.getCurrentObject().controller.getPart(_constants.OBJECT_PART.MESH_PART));
        }
      }, {
        key: 'getIntersectOfMoveFrame',
        value: function getIntersectOfMoveFrame(pointer) {
          if (!this.controller.visible) {
            return false;
          }
          return this.intersectObjects(pointer, this.controller.transform.objectBoxFrame);
        }

        /**
         * 获取当前图形
         * @returns {*}
         */
      }, {
        key: 'getCurrentObject',
        value: function getCurrentObject() {
          if (this.shapesOrder && this.shapesOrder.length > 0 && this.hasSelect) {
            return this.shapesOrder[this.shapesOrder.length - 1];
          }
          return null;
        }

        /**
         * 按下事件
         * @param event
         */
      }, {
        key: 'onPointerDown',
        value: function onPointerDown(event) {
          var pointer = null;
          if (event.originalEvent) {
            pointer = event.originalEvent.changedTouches ? event.originalEvent.changedTouches[0] : event.originalEvent;
          } else if (event.touches) {
            pointer = event.touches[0];
          } else {
            pointer = event.changedTouches ? event.changedTouches[0] : event;
          }
          this.downPoint = pointer;
          //第一射线交点
          var intersect = null;
          //辅助坐标
          this.downVector = this.getHelpPosition(pointer);

          // 是否在缩放按钮
          if (this.scaleIndex = this.getIndexOfScale(pointer)) {
            this.controller.transform.setAxis(this.scaleIndex);
            this.controllerType = _constants.CONTROLLER_TYPE.SCALE_CTRL;
            var object = this.getCurrentObject();
            var mesh = object.getObjectByName(_constants.OBJECT_PART.MESH_PART);
            this.computeSolidMeshBox3(mesh);
            this.pivot.z = 0;
            this.oldWidth = this.meshBox3.max.x - this.meshBox3.min.x;
            this.oldHeight = this.meshBox3.max.y - this.meshBox3.min.y;
            switch (this.scaleIndex) {
              case 1:
                this.pivot.x = this.meshBox3.min.x - object.position.x;
                this.pivot.y = this.meshBox3.min.y - object.position.y;
                break;
              case 2:
                this.pivot.x = this.meshBox3.min.x - object.position.x;
                this.pivot.y = this.meshBox3.max.y - object.position.y;
                break;
              case 3:
                this.pivot.x = this.meshBox3.max.x - object.position.x;
                this.pivot.y = this.meshBox3.max.y - object.position.y;
                break;
              case 4:
                this.pivot.x = this.meshBox3.max.x - object.position.x;
                this.pivot.y = this.meshBox3.min.y - object.position.y;
                break;
              default:
                break;
            }
            var matrix = new THREE.Matrix4();
            matrix.makeRotationFromQuaternion(object.quaternion);
            this.pivot.applyMatrix4(matrix.getInverse(matrix));
            this.oldScale = mesh.scale.clone();
            var offset = this.pivot.clone().divide(this.oldScale);
            var solidMesh = object.getObjectByName(_constants.OBJECT_PART.MESH_PART_MESH);
            solidMesh.position.sub(offset);
            mesh.position.add(this.pivot);
          }
          // 是否在移动按钮
          else if ($(event.target).closest('.move_icon:visible').length != 0 || (intersect = this.getIntersectOfMoveFrame(pointer))) {
              this.controllerType = _constants.CONTROLLER_TYPE.MOVE_CTRL;
              this.moveOffset = this.getCurrentObject().position.clone().sub(this.downVector);
            }
            // 是否在图形上
            else if (intersect = this.getIntersectOfObjects(pointer)) {
                this.timerManager.kill();
                this.controllerType = _constants.CONTROLLER_TYPE.SELECT_CTRL;
                //记录交点位置
                this.prePosition.x = pointer.clientX;
                this.prePosition.y = pointer.clientY;
                this.changeSelect(intersect.object.container);
                this.controller.hide();
              }
              // 取消选择图形
              else {
                  this.controllerType = _constants.CONTROLLER_TYPE.CANCEL_CTRL;
                  return;
                }

          _presenter2['default'].listenerManager.addListener('mousemove', this.bindPointerMove);
          _presenter2['default'].listenerManager.addListener('mouseup', this.bindPointerUp);
        }

        /**
         * 获取焦点事件
         * @param event
         */
      }, {
        key: 'onFocus',
        value: function onFocus() {
          _presenter2['default'].webglControl.reIndexScene(this.scene);
          this.changeSelect(this.getSolidByIndex(0));
        }

        /**
         * 移动事件
         * @param event
         */
      }, {
        key: 'onPointerMove',
        value: function onPointerMove(event) {
          var pointer = null;
          if (event.originalEvent) {
            pointer = event.originalEvent.changedTouches ? event.originalEvent.changedTouches[0] : event.originalEvent;
          } else if (event.touches) {
            pointer = event.touches[0];
          } else {
            pointer = event.changedTouches ? event.changedTouches[0] : event;
          }
          var moveVector = this.getHelpPosition(pointer);
          var object = this.getCurrentObject();
          var mesh = object.getObjectByName(_constants.OBJECT_PART.MESH_PART);

          switch (this.controllerType) {
            // 移动操作
            case _constants.CONTROLLER_TYPE.MOVE_CTRL:
              {
                var position = moveVector.clone().add(this.moveOffset);
                if (position.x > this.rect.width / 2) {
                  position.x = this.rect.width / 2;
                } else if (position.x < -this.rect.width / 2) {
                  position.x = -this.rect.width / 2;
                }
                if (position.y > this.rect.height / 2) {
                  position.y = this.rect.height / 2;
                } else if (position.y < -this.rect.height / 2) {
                  position.y = -this.rect.height / 2;
                }
                object.position.copy(position);
                object.controller.updateSolid();
                this.controller.update();
              }
              break;
            // 缩放操作
            case _constants.CONTROLLER_TYPE.SCALE_CTRL:
              {
                var deltaMove = {
                  x: pointer.clientX - this.downPoint.clientX,
                  y: pointer.clientY - this.downPoint.clientY
                };
                var deltaScaleX = (this.scaleIndex <= 2 ? 1 : -1) * deltaMove.x / this.oldWidth + 1;
                var deltaScaleY = (this.scaleIndex == 2 || this.scaleIndex == 3 ? 1 : -1) * deltaMove.y / this.oldHeight + 1;
                var deltaScale = Math.min(deltaScaleX, deltaScaleY);

                // 判断边界
                var offset = this.pivot.clone().divide(mesh.scale);
                var solidMesh = object.getObjectByName(_constants.OBJECT_PART.MESH_PART_MESH);
                var positionMove = solidMesh.position.clone().add(offset);
                var position = object.position.clone().add(positionMove.multiply(mesh.scale).applyQuaternion(object.quaternion));
                if (position.x > this.rect.width / 2 || position.x < -this.rect.width / 2 || position.y > this.rect.height / 2 || position.y < -this.rect.height / 2) {
                  return;
                }

                if (deltaScale * this.oldScale.x < _constants.MIN_SCALE) {
                  mesh.scale.set(_constants.MIN_SCALE, _constants.MIN_SCALE, _constants.MIN_SCALE);
                } else {
                  mesh.scale.copy(this.oldScale.clone().multiplyScalar(deltaScale));
                }
                object.controller.updateSolid();
                this.controller.update();
              }
              break;
            // 在这里处理旋转操作
            case _constants.CONTROLLER_TYPE.SELECT_CTRL:
            case _constants.CONTROLLER_TYPE.MANUAL_ROTATE_CTRL:
              {
                // 判断是否超过容差偏移量
                if (Math.abs(pointer.clientX - this.downPoint.clientX) >= _constants.CLICK_TOLERANCE || Math.abs(pointer.clientY - this.downPoint.clientY) >= _constants.CLICK_TOLERANCE) {
                  this.controllerType = _constants.CONTROLLER_TYPE.MANUAL_ROTATE_CTRL;
                }
                this.deltaMove.set(pointer.clientX - this.prePosition.x, pointer.clientY - this.prePosition.y);
                this.deltaRotationQuaternion.setFromEuler(new THREE.Euler((0, _UtilsToRadians2['default'])(this.deltaMove.y), (0, _UtilsToRadians2['default'])(this.deltaMove.x), 0, 'XYZ'));

                object.quaternion.multiplyQuaternions(this.deltaRotationQuaternion, object.quaternion);
                this.prePosition.x = pointer.clientX;
                this.prePosition.y = pointer.clientY;

                this.preTime = Date.now();

                object.controller.updateQuaternionText();
              }

              break;
            default:
              break;
          }
        }

        /**
         * 结束事件
         * @param event
         */
      }, {
        key: 'onPointerUp',
        value: function onPointerUp(event) {
          var object = this.getCurrentObject();
          var mesh = object.getObjectByName(_constants.OBJECT_PART.MESH_PART);

          switch (this.controllerType) {
            case _constants.CONTROLLER_TYPE.MOVE_CTRL:
              break;
            case _constants.CONTROLLER_TYPE.SCALE_CTRL:
              {
                var solidMesh = object.getObjectByName(_constants.OBJECT_PART.MESH_PART_MESH);
                var offset = this.pivot.clone().divide(mesh.scale);
                var position = solidMesh.position.clone().add(offset);
                mesh.position.sub(this.pivot);
                solidMesh.position.set(0, 0, 0);
                object.position.add(position.multiply(mesh.scale).applyQuaternion(object.quaternion));
                object.controller.updateSolid();
                this.scaleIndex = null;
                this.controller.transform.setAxis(this.scaleIndex);
              }
              break;
            case _constants.CONTROLLER_TYPE.SELECT_CTRL:
              this.controller.update();
              this.controller.show();
              break;
            case _constants.CONTROLLER_TYPE.MANUAL_ROTATE_CTRL:
              {
                if (Date.now() - this.preTime < _constants.ESCAPE_MAX_TIME) {
                  // 自转
                  this.deltaMove.length() > _constants.MAX_DELTA_MOVE && this.deltaMove.setLength(_constants.MAX_DELTA_MOVE);
                  this.deltaRotationQuaternion.setFromEuler(new THREE.Euler((0, _UtilsToRadians2['default'])(this.deltaMove.y), (0, _UtilsToRadians2['default'])(this.deltaMove.x), 0, 'XYZ'));
                  this.timerManager.addTimer(this.bindAutoRotate, 50);
                } else {
                  this.controller.update();
                  this.controller.show();
                }
              }
              break;
            default:
              break;
          }

          _presenter2['default'].listenerManager.removeListener('mousemove', this.bindPointerMove);
          _presenter2['default'].listenerManager.removeListener('mouseup', this.bindPointerUp);
        }

        /**
         * 失去焦点
         */
      }, {
        key: 'onBlur',
        value: function onBlur() {
          this.timerManager && this.timerManager.kill();
          this.hasSelect = false;
          this.controller.detach();
        }

        /**
         * 自动旋转
         */
      }, {
        key: 'autoRotate',
        value: function autoRotate() {
          var object = this.getCurrentObject();
          object.quaternion.multiplyQuaternions(this.deltaRotationQuaternion, object.quaternion);
          object.controller.updateQuaternionText();
        }

        /**
         * 渲染当前场景
         */
      }, {
        key: 'render',
        value: function render() {
          _presenter2['default'].webglControl.render();
          //this.useAnimate || this.renderer.render(this.scene, this.camera);
        }

        /**
         * 动画
         */
        //animate() {
        //this.animateFrame = requestAnimationFrame(this.bindAnimate);
        //this.renderer.render(this.scene, this.camera);
        //}

        /**
         * 添加图形
         * @param object
         */
      }, {
        key: 'add',
        value: function add(object) {
          this.scene.add(object);
        }

        /**
         * 移除图形
         * @param object
         */
      }, {
        key: 'remove',
        value: function remove(object) {
          this.scene.remove(object);
        }

        /**
         * 添加图形
         * @param solid
         */
      }, {
        key: 'addSolid',
        value: function addSolid(solidType, data) {
          if (this.isMax(solidType)) {
            return;
          }
          var shape = (0, _ShapeShapeFactory2['default'])(solidType);
          if (data) {
            shape.data = data;
          }
          if (shape) {
            if (this.timerManager) {
              this.timerManager.kill();
            }
            var solid = shape.createSolid();
            if (solid) {
              this.add(solid);
              solid.updateMatrixWorld(true);
              this.shapesOrder.push(solid);
              this.hasSelect = true;
              solid.position.z = (this.shapesOrder.length - 1) * _constants.Z_STEP;
              this.controller.attach(solid);
              //if (!this.canvas.is(':visible')) {
              //    this.canvas.show();
              //}
            }
          } else {
            return false;
          }
        }

        /**
         * 删除图形
         * @param solid
         */
      }, {
        key: 'removeSolid',
        value: function removeSolid() {
          var solid = this.getCurrentObject();
          this.remove(solid);
          (0, _UtilsDestroyThreeObject2['default'])(solid);
          this.shapesOrder.splice(this.shapesOrder.length - 1, 1);
          if (this.shapesOrder.length == 0) {
            //移除工具底层框架
            this.controller.detach();
            (0, _UtilsCloseTool2['default'])();
            return;
          }
          this.controller.attach(this.getCurrentObject());
        }

        /**
         * 复制图形
         * @param solid
         */
      }, {
        key: 'copySolid',
        value: function copySolid() {
          var object = this.getCurrentObject();
          var basicSolid = object.controller;
          //创建一个新的图形，新图形的data和原图形一样
          var data = $.extend(true, {}, basicSolid.data);
          data.quaternion = object.quaternion;
          data.scale = object.getObjectByName(_constants.OBJECT_PART.MESH_PART).scale;
          if (window.player) {
            window.player.addTool('SolidGeometry', {
              type: basicSolid.name,
              data: data
            });
          } else {
            this.addSolid(basicSolid.name, data);
            var solid = this.getCurrentObject();
            solid.quaternion.copy(object.quaternion);
            solid.getObjectByName(_constants.OBJECT_PART.MESH_PART).scale.copy(object.getObjectByName(_constants.OBJECT_PART.MESH_PART).scale);
            solid.controller.updateSolid();
            this.controller.update();
            this.render();
          }
        }

        /**
         * 根据索引复制图形
         * @param index
         */
      }, {
        key: 'copySolidByIndex',
        value: function copySolidByIndex(index) {
          this.copySolid(this.getSolidByIndex(index));
        }

        /**
         * 根据图形获取索引
         * @param solid
         */
      }, {
        key: 'getIndexBySolid',
        value: function getIndexBySolid(solid) {
          return this.shapesOrder.indexOf(solid);
        }

        /**
         * 根据索引获取图形
         * @param index
         */
      }, {
        key: 'getSolidByIndex',
        value: function getSolidByIndex(index) {
          return this.shapesOrder[index];
        }

        /**
         * 重新设定z轴
         */
      }, {
        key: 'reZIndex',
        value: function reZIndex() {
          this.shapesOrder.forEach(function (item, index) {
            item.position.z = _constants.Z_STEP * index;
          });
        }

        /**
         * 更改当前选择图形
         * @param solid
         */
      }, {
        key: 'changeSelect',
        value: function changeSelect(solid) {
          var scope = this;
          if (solid === this.getCurrentObject()) {
            return;
          }
          this.hasSelect = true;
          this.shapesOrder.forEach(function (item, index) {
            if (item === solid && (index != scope.shapesOrder.length - 1 || index == 0)) {
              scope.shapesOrder.splice(index, 1);
              scope.shapesOrder.push(solid);
              scope.reZIndex();
              scope.controller.attach(solid);
              return;
            }
            if (index == scope.shapesOrder.length - 1 && item != solid) {
              scope.shapesOrder.push(solid);
            }
          });
          if (this.shapesOrder.length == 0) {
            this.shapesOrder.push(solid);
          }
          this.reZIndex();
          scope.controller.attach(solid);
        }

        /**
         * 图形个数控制
         * @param solidType
         * @returns {boolean}
         */
      }, {
        key: 'isMax',
        value: function isMax(solidType) {
          var solidCount = 0;
          this.scene.children.forEach(function (item) {
            if (item.name === solidType) {
              solidCount++;
            }
          });
          if (solidCount >= _constants.MAX_COUNT) {
            (0, _UtilsShowHint2['default'])(_UtilsStringUtil2['default'].format(_presenter2['default'].i18n['same_limit_tip'], _constants.MAX_COUNT));
            return true;
          }

          var allCount = 0;
          this.scene.children.forEach(function (item) {
            if (item.name != 'tool' && item.name != 'help' && item.name != 'light') {
              allCount++;
            }
          });
          if (allCount >= _constants.MAX_ALL_COUNT) {
            (0, _UtilsShowHint2['default'])(_UtilsStringUtil2['default'].format(_presenter2['default'].i18n['limit_tip'], _constants.MAX_ALL_COUNT));
            return true;
          }

          return false;
        }

        /**
         * 获取当前图形的区域
         */
      }, {
        key: 'getCurrentArea',
        value: function getCurrentArea() {
          var area3D = this.controller.transform.getArea();
          if (area3D) {
            var point = this.getScreenPosition(area3D.position);
            var space = 25;
            return {
              left: point.x - space,
              top: point.y - space,
              width: area3D.width + space * 2,
              height: area3D.height + space * 2
            };
          }
          return null;
        }

        /**
         *
         */
      }, {
        key: 'computeSolidMeshBox3',
        value: function computeSolidMeshBox3(object) {
          var scope = new THREE.Box3();
          var v1 = new THREE.Vector3();
          object.updateMatrixWorld(true);
          scope.makeEmpty();
          object.traverse(function (node) {
            if (node.name != _constants.OBJECT_PART.MESH_PART_MESH) {
              return;
            }
            var geometry = node.geometry;
            if (geometry !== undefined) {
              if (geometry instanceof THREE.Geometry) {
                var vertices = geometry.vertices;
                for (var i = 0, il = vertices.length; i < il; i++) {
                  v1.copy(vertices[i]);
                  v1.applyMatrix4(node.matrixWorld);
                  scope.expandByPoint(v1);
                }
              } else if (geometry instanceof THREE.BufferGeometry && geometry.attributes['position'] !== undefined) {
                var positions = geometry.attributes['position'].array;
                for (var i = 0, il = positions.length; i < il; i += 3) {
                  v1.set(positions[i], positions[i + 1], positions[i + 2]);
                  v1.applyMatrix4(node.matrixWorld);
                  scope.expandByPoint(v1);
                }
              }
            }
          });
          this.meshBox3 = scope;
        }
      }]);

      return threeManager;
    }();

    exports['default'] = threeManager;
    module.exports = exports['default'];

    /***/
  },
  /* 30 */
  /***/
  function (module, exports) {

    /**
     * Created by lyp on 2016/2/17.
     */

    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports['default'] = autoDetectRender;
    var isWebGLRenderer = undefined;

    exports.isWebGLRenderer = isWebGLRenderer;

    function autoDetectRender(options, noWebGL) {
      if (!noWebGL && isWebGLSupported()) {
        exports.isWebGLRenderer = isWebGLRenderer = true;
        return new THREE.WebGLRenderer(options);
      }

      exports.isWebGLRenderer = isWebGLRenderer = false;
      return new THREE.CanvasRenderer(options);
    }

    function isWebGLSupported() {
      var contextOptions = {
        stencil: true
      };
      try {
        if (!window.WebGLRenderingContext) {
          return false;
        }

        var canvas = document.createElement('canvas'),
            gl = canvas.getContext('webgl', contextOptions) || canvas.getContext('experimental-webgl', contextOptions);
        var result = !!(gl && gl.getContextAttributes().stencil);
        canvas = null;
        gl = null;
        return result;
      } catch (e) {
        return false;
      }
    }

    /***/
  },
  /* 31 */
  /***/
  function (module, exports, __webpack_require__) {

    /**
     * 菜单栏及Object3D操作框统一控制模块
     * Created by liuyuanpeng on 2016/9/12.
     */

    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    var _createClass = function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ('value' in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        'default': obj
      };
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError('Cannot call a class as a function');
      }
    }

    var _TransformController = __webpack_require__(32);

    var _TransformController2 = _interopRequireDefault(_TransformController);

    var _viewToolbarHelper = __webpack_require__(33);

    var _viewToolbarHelper2 = _interopRequireDefault(_viewToolbarHelper);

    var ControllerHelper = function () {
      function ControllerHelper(camera) {
        _classCallCheck(this, ControllerHelper);

        this.init(camera);
        this.visible = false;
      }

      /**
       * 初始化
       * @param camera
       */

      _createClass(ControllerHelper, [{
        key: 'init',
        value: function init(camera) {
          this.transform = new _TransformController2['default'](camera);
          this.transform.init();
          this.toolbar = new _viewToolbarHelper2['default']("cube_tools");
        }

        /**
         * 获取缩放控制按钮
         * @returns {null|*}
         */
      }, {
        key: 'getScaleController',
        value: function getScaleController() {
          if (this.transform && this.transform.pickerController) {
            return this.transform.pickerController;
          }
          return null;
        }

        /**
         * 显示操作框
         */
      }, {
        key: 'show',
        value: function show() {
          this.transform.show();
          this.toolbar.show();
          this.visible = true;
        }

        /**
         * 隐藏操作框
         */
      }, {
        key: 'hide',
        value: function hide() {
          this.transform.hide();
          this.toolbar.hide();
          this.visible = false;
        }

        /**
         * 更新操作框
         */
      }, {
        key: 'update',
        value: function update(bTranslate) {
          this.transform.update(bTranslate);
          this.toolbar.update();
        }

        /**
         * 设置位置
         * @param rect 立体图形的平面矩形框 {left, top, width, height}
         */
      }, {
        key: 'adjustPosition',
        value: function adjustPosition(rect) {
          this.toolbar.adjustPosition(rect);
        }

        /**
         * 获取需要添加到场景的操作对象
         * @returns {*|null}
         */
      }, {
        key: 'getThreeObject',
        value: function getThreeObject() {
          if (this.transform) {
            return this.transform.controller;
          }
        }

        /**
         * 添加图形控制
         * @param object
         */
      }, {
        key: 'attach',
        value: function attach(object) {
          this.transform.attach(object);
          this.show();
        }

        /**
         * 移除图形控制
         */
      }, {
        key: 'detach',
        value: function detach() {
          this.transform.detach();
          this.hide();
        }

        /**
         * 释放资源
         */
      }, {
        key: 'dispose',
        value: function dispose() {
          this.transform.dispose();
          this.transform = null;
          this.toolbar.dispose();
          this.toolbar = null;
        }
      }]);

      return ControllerHelper;
    }();

    exports['default'] = ControllerHelper;
    module.exports = exports['default'];

    /***/
  },
  /* 32 */
  /***/
  function (module, exports, __webpack_require__) {

    /**
     * Created by liuyuanpeng on 2016/9/12.
     * Object3D操作框控制模块
     */
    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    var _createClass = function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ('value' in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        'default': obj
      };
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError('Cannot call a class as a function');
      }
    }

    var _constants = __webpack_require__(8);

    var _presenter = __webpack_require__(2);

    var _presenter2 = _interopRequireDefault(_presenter);

    var TransformController = function () {
      function TransformController(camera) {
        _classCallCheck(this, TransformController);

        this.camera = camera;
        this.radius = 10;
        this.radiusIn = 6;
        this.init();
        this.moveIcon = $(_presenter2['default'].view).find('.move_icon:first');
      }

      /**
       * 创建操作框
       */

      _createClass(TransformController, [{
        key: 'init',
        value: function init() {
          if (this.controller) {
            return;
          }
          this.pickerController = new THREE.Object3D();
          this.normalController = new THREE.Object3D();
          this.highlightController = new THREE.Object3D();
          this.controller = new THREE.Object3D();
          this.controller.name = 'tool';
          this.controller.visible = false;
          this.controller.add(this.pickerController, this.normalController, this.highlightController);
          this.normalController.position.z = 100;
          this.highlightController.position.z = 100;
          this.drawIcons();
        }

        /**
         * 设置当前操作点
         * @param axis
         */
      }, {
        key: 'setAxis',
        value: function setAxis(axis) {
          this.axis = axis;
          this.updateController();
          _presenter2['default'].threeManager.render();
        }

        /**
         * 添加图形进行控制
         * @param object
         */
      }, {
        key: 'attach',
        value: function attach(object) {
          this.object = object;
          this.controller.position.z = object.position.z + _constants.Z_STEP;
          this.update();
          this.show();
        }

        /**
         * 解除图形控制
         */
      }, {
        key: 'detach',
        value: function detach() {
          this.hide();
          this.boundingBox = null;
          this.object = null;
          this.axis = null;
          _presenter2['default'].threeManager.render();
        }

        /**
         * 释放资源
         */
      }, {
        key: 'dispose',
        value: function dispose() {
          this.object = null;
          this.controller = null;
          this.boundingBox = null;
          this.axis = null;
        }

        /**
         * 显示图形
         */
      }, {
        key: 'show',
        value: function show() {
          this.controller.visible = true;
          this.moveIcon.show();
          _presenter2['default'].threeManager.render();
        }

        /**
         * 隐藏图形
         */
      }, {
        key: 'hide',
        value: function hide() {
          this.controller.visible = false;
          _presenter2['default'].threeManager.render();
          this.moveIcon.hide();
        }

        /**
         * 更新图形
         */
      }, {
        key: 'update',
        value: function update(bTranslate) {
          if (bTranslate) {
            this.controller.position.copy(this.object);
          } else {
            this.computeBoundingBox();
          }

          _presenter2['default'].threeManager.render();
        }

        /**
         *
         */
      }, {
        key: 'getArea',
        value: function getArea() {
          return {
            position: new THREE.Vector3(this.box3.min.x - this.radius, this.box3.max.y + this.radius, 0),
            width: this.box3.max.x - this.box3.min.x + this.radius * 2,
            height: this.box3.max.y - this.box3.min.y + this.radius * 2
          };
        }

        /**
         * 获取object3D对象
         */
      }, {
        key: 'getObject',
        value: function getObject() {
          return this.controller;
        }
      }, {
        key: 'computeBoundingBox',
        value: function computeBoundingBox() {
          var scope = new THREE.Box3();
          var v1 = new THREE.Vector3();
          var object = this.object;
          object.updateMatrixWorld(true);
          scope.makeEmpty();
          var vertexs = this.object.controller.getPart(_constants.OBJECT_PART.VERTEX_PART);
          var vertexVisible = vertexs ? vertexs.visible : false;
          var texts = this.object.controller.getPart(_constants.OBJECT_PART.TEXT_PART);
          var textVisible = texts ? texts.visible : false;

          object.traverse(function (node) {
            if (node.name === _constants.OBJECT_PART.VERTEX_PART_MESH && !vertexVisible) {
              return;
            }
            if (node.name === _constants.OBJECT_PART.TEXT_PART_MESH && !textVisible) {
              return;
            }
            var geometry = node.geometry;
            if (geometry !== undefined) {
              if (geometry instanceof THREE.Geometry) {
                var vertices = geometry.vertices;
                for (var i = 0, il = vertices.length; i < il; i++) {
                  v1.copy(vertices[i]);
                  v1.applyMatrix4(node.matrixWorld);
                  scope.expandByPoint(v1);
                }
              } else if (geometry instanceof THREE.BufferGeometry && geometry.attributes['position'] !== undefined) {
                var positions = geometry.attributes['position'].array;
                for (var i = 0, il = positions.length; i < il; i += 3) {
                  v1.set(positions[i], positions[i + 1], positions[i + 2]);
                  v1.applyMatrix4(node.matrixWorld);
                  scope.expandByPoint(v1);
                }
              }
            }
          });
          this.box3 = scope;
          this.verticesBox = this.box3.clone();
          var objectScale = this.object.scale.x;
          this.box3.max.x /= objectScale;
          this.box3.max.y /= objectScale;
          this.box3.min.x /= objectScale;
          this.box3.min.y /= objectScale;
          this.updateController();
        }
      }, {
        key: 'updateController',
        value: function updateController() {
          if (this.box3 instanceof THREE.Box3) {
            this.controller.visible = true;
            var box3 = this.box3.clone();
            if (this.object) {
              var objectScale = this.object.scale.x;
              var gap = 0;
              box3.max.x *= objectScale;
              box3.max.y *= objectScale;
              box3.min.x *= objectScale;
              box3.min.y *= objectScale;

              box3.max.x += gap;
              box3.max.y += gap;
              box3.min.x -= gap;
              box3.min.y -= gap;

              box3.max.x = Math.round(box3.max.x);
              box3.max.y = Math.round(box3.max.y);
              box3.min.x = Math.round(box3.min.x);
              box3.min.y = Math.round(box3.min.y);
            }
            if (!this.objectBoxFrame) {
              this.objectBoxFrame = new THREE.Object3D();
              var _geometry = new THREE.Geometry();

              var blackLine = new THREE.LineSegments(_geometry.clone(), new THREE.LineBasicMaterial({
                color: 'gray'
              }));

              for (var i = 0; i < 8; i++) {
                _geometry.vertices.push(new THREE.Vector3());
              }

              _geometry.faces.push(new THREE.Face3(0, 4, 5, new THREE.Vector3(0, 0, 1), [], 0), new THREE.Face3(0, 5, 1, new THREE.Vector3(0, 0, 1), [], 0), new THREE.Face3(1, 5, 6, new THREE.Vector3(0, 0, 1), [], 0), new THREE.Face3(1, 6, 2, new THREE.Vector3(0, 0, 1), [], 0), new THREE.Face3(2, 6, 7, new THREE.Vector3(0, 0, 1), [], 0), new THREE.Face3(2, 7, 3, new THREE.Vector3(0, 0, 1), [], 0), new THREE.Face3(3, 7, 4, new THREE.Vector3(0, 0, 1), [], 0), new THREE.Face3(3, 4, 0, new THREE.Vector3(0, 0, 1), [], 0));

              var whiteLine = new THREE.Mesh(_geometry.clone(), new THREE.MeshBasicMaterial({
                color: 0xffffff,
                overdraw: 0.5
              }));
              _geometry = null;
              this.objectBoxFrame.add(whiteLine);
              this.objectBoxFrame.add(blackLine);
              for (var i = 0; i < 4; i++) {
                var planGeometry = new THREE.PlaneGeometry(100, 100);
                var transparentLine = new THREE.Mesh(planGeometry, new THREE.MeshBasicMaterial({
                  color: 'white',
                  transparent: true,
                  opacity: 0.01
                }));
                transparentLine.position.z = -2;
                this.objectBoxFrame.add(transparentLine);
              }

              this.objectBoxFrame.position.z = 0.1;
              this.controller.add(this.objectBoxFrame);
            }
            var geometry = this.objectBoxFrame.children[0].geometry;
            var space = 1;
            var size = 10;

            geometry.vertices[0].set(box3.max.x + space * 2, box3.max.y + space * 2, 0);
            geometry.vertices[1].set(box3.max.x + space * 2, box3.min.y - space * 2, 0);
            geometry.vertices[2].set(box3.min.x - space * 2, box3.min.y - space * 2, 0);
            geometry.vertices[3].set(box3.min.x - space * 2, box3.max.y + space * 2, 0);
            geometry.vertices[4].set(box3.max.x, box3.max.y, 0);
            geometry.vertices[5].set(box3.max.x, box3.min.y, 0);
            geometry.vertices[6].set(box3.min.x, box3.min.y, 0);
            geometry.vertices[7].set(box3.min.x, box3.max.y, 0);

            this.objectBoxFrame.children[1].geometry.vertices = [new THREE.Vector3(box3.max.x, box3.max.y), new THREE.Vector3(box3.max.x, box3.min.y), new THREE.Vector3(box3.max.x, box3.min.y), new THREE.Vector3(box3.min.x, box3.min.y), new THREE.Vector3(box3.min.x, box3.min.y), new THREE.Vector3(box3.min.x, box3.max.y), new THREE.Vector3(box3.min.x, box3.max.y), new THREE.Vector3(box3.max.x, box3.max.y), new THREE.Vector3(box3.max.x + space * 2, box3.max.y + space * 2), new THREE.Vector3(box3.max.x + space * 2, box3.min.y - space * 2), new THREE.Vector3(box3.max.x + space * 2, box3.min.y - space * 2), new THREE.Vector3(box3.min.x - space * 2, box3.min.y - space * 2), new THREE.Vector3(box3.min.x - space * 2, box3.min.y - space * 2), new THREE.Vector3(box3.min.x - space * 2, box3.max.y + space * 2), new THREE.Vector3(box3.min.x - space * 2, box3.max.y + space * 2), new THREE.Vector3(box3.max.x + space * 2, box3.max.y + space * 2)];

            var controllerFrameBox = box3.clone();
            controllerFrameBox.max.x += 1;
            controllerFrameBox.max.y += 1;
            controllerFrameBox.min.x -= 1;
            controllerFrameBox.min.y -= 1;

            this.objectBoxFrame.children[2].geometry.vertices[1].set(controllerFrameBox.max.x + size, controllerFrameBox.max.y + size, 0);
            this.objectBoxFrame.children[2].geometry.vertices[3].set(controllerFrameBox.max.x + size, controllerFrameBox.max.y - size, 0);
            this.objectBoxFrame.children[2].geometry.vertices[2].set(controllerFrameBox.min.x - size, controllerFrameBox.max.y - size, 0);
            this.objectBoxFrame.children[2].geometry.vertices[0].set(controllerFrameBox.min.x - size, controllerFrameBox.max.y + size, 0);

            this.objectBoxFrame.children[3].geometry.vertices[1].set(controllerFrameBox.max.x + size, controllerFrameBox.max.y + size, 0);
            this.objectBoxFrame.children[3].geometry.vertices[3].set(controllerFrameBox.max.x + size, controllerFrameBox.min.y - size, 0);
            this.objectBoxFrame.children[3].geometry.vertices[2].set(controllerFrameBox.max.x - size, controllerFrameBox.min.y + size, 0);
            this.objectBoxFrame.children[3].geometry.vertices[0].set(controllerFrameBox.max.x - size, controllerFrameBox.max.y - size, 0);

            this.objectBoxFrame.children[4].geometry.vertices[1].set(controllerFrameBox.max.x + size, controllerFrameBox.min.y + size, 0);
            this.objectBoxFrame.children[4].geometry.vertices[3].set(controllerFrameBox.max.x + size, controllerFrameBox.min.y - size, 0);
            this.objectBoxFrame.children[4].geometry.vertices[2].set(controllerFrameBox.min.x - size, controllerFrameBox.min.y - size, 0);
            this.objectBoxFrame.children[4].geometry.vertices[0].set(controllerFrameBox.min.x - size, controllerFrameBox.min.y + size, 0);

            this.objectBoxFrame.children[5].geometry.vertices[1].set(controllerFrameBox.min.x + size, controllerFrameBox.max.y + size, 0);
            this.objectBoxFrame.children[5].geometry.vertices[3].set(controllerFrameBox.min.x + size, controllerFrameBox.min.y - size, 0);
            this.objectBoxFrame.children[5].geometry.vertices[2].set(controllerFrameBox.min.x - size, controllerFrameBox.min.y - size, 0);
            this.objectBoxFrame.children[5].geometry.vertices[0].set(controllerFrameBox.min.x - size, controllerFrameBox.max.y + size, 0);

            this.objectBoxFrame.children[0].geometry.computeBoundingSphere();
            this.objectBoxFrame.children[2].geometry.computeBoundingSphere();
            this.objectBoxFrame.children[3].geometry.computeBoundingSphere();
            this.objectBoxFrame.children[4].geometry.computeBoundingSphere();
            this.objectBoxFrame.children[5].geometry.computeBoundingSphere();

            this.objectBoxFrame.children[0].geometry.verticesNeedUpdate = true;
            this.objectBoxFrame.children[1].geometry.verticesNeedUpdate = true;
            this.objectBoxFrame.children[2].geometry.verticesNeedUpdate = true;
            this.objectBoxFrame.children[3].geometry.verticesNeedUpdate = true;
            this.objectBoxFrame.children[4].geometry.verticesNeedUpdate = true;
            this.objectBoxFrame.children[5].geometry.verticesNeedUpdate = true;

            var positions = [new THREE.Vector3(box3.max.x, box3.max.y), new THREE.Vector3(box3.max.x, box3.min.y), new THREE.Vector3(box3.min.x, box3.min.y), new THREE.Vector3(box3.min.x, box3.max.y), new THREE.Vector3(box3.max.x, box3.max.y)];
            for (var i = 0; i < 4; i++) {
              this.normalController.children[i].position.copy(positions[i]);
              this.highlightController.children[i].position.copy(positions[i]);
              this.highlightController.children[i].visible = false;
              this.pickerController.children[i].position.copy(positions[i]);
            }

            if (this.axis) {
              var index = parseInt(this.axis);
              var obj = index >= 1 ? this.highlightController.children[index - 1] : false;
              obj && (obj.visible = true);
            }

            var moveIconPosition = this.normalController.children[1].position.clone();
            moveIconPosition.y += 40;
            var screenPosition = _presenter2['default'].threeManager.getScreenPosition(moveIconPosition);
            this.moveIcon.css('left', screenPosition.x);
            this.moveIcon.css('top', screenPosition.y);
          } else {
            this.controller.visible = false;
          }
        }
      }, {
        key: 'getCircle',
        value: function getCircle(radius) {

          var CircleShape = new THREE.Shape();

          for (var i = 0; i <= 64; i++) {
            var r = radius;
            var theta = i / 64 * Math.PI * 2;
            if (i == 0) {
              CircleShape.moveTo(r * Math.sin(theta), r * Math.cos(theta));
            } else {
              CircleShape.lineTo(r * Math.sin(theta), r * Math.cos(theta));
            }
          }
          return CircleShape.createPointsGeometry();
        }
      }, {
        key: 'drawIcons',
        value: function drawIcons() {
          var _this = this;

          var scaleRadius = this.radius;
          var scaleRadiusIn = this.radiusIn;
          var segments = 16;

          var lineGrayMaterial = new THREE.LineBasicMaterial({
            color: 0xCACACA
          });
          var meshWhiteMaterial = new THREE.MeshBasicMaterial({
            color: 0XEFEFEF,
            overdraw: 0.5
          });
          var meshGrayMaterial = new THREE.MeshBasicMaterial({
            color: 0x5E5E5E,
            overdraw: 0.5
          });
          var meshBlueMaterial = new THREE.MeshBasicMaterial({
            color: 0x37ADff,
            overdraw: 0.5
          });

          var _loop = function _loop(i) {
            var meshOutGeometry = undefined,
                meshInGeometry = undefined,
                outline = undefined;

            meshOutGeometry = new THREE.CircleGeometry(scaleRadius, segments);
            meshInGeometry = new THREE.CircleGeometry(scaleRadiusIn, segments);
            outline = new THREE.Line(_this.getCircle(scaleRadius), lineGrayMaterial.clone());

            var meshOut = new THREE.Mesh(meshOutGeometry, meshWhiteMaterial.clone());
            meshOut.position.z = -50;
            var meshIn = new THREE.Mesh(meshInGeometry, meshGrayMaterial.clone());
            var obj = new THREE.Object3D();
            obj.add(outline, meshOut, meshIn);
            _this.normalController.add(obj);
            obj.traverse(function (node) {
              node.name = i + 2;
            });
          };

          for (var i = 0; i < 4; i++) {
            _loop(i);
          }

          for (var i = 0; i < 4; i++) {
            var meshOutGeometry = undefined,
                meshInGeometry = undefined,
                outline = undefined;
            meshOutGeometry = new THREE.CircleGeometry(scaleRadius, segments);
            meshInGeometry = new THREE.CircleGeometry(scaleRadiusIn, segments);
            outline = new THREE.Line(this.getCircle(scaleRadius), lineGrayMaterial.clone());

            var meshOut = new THREE.Mesh(meshOutGeometry, meshBlueMaterial.clone());
            meshOut.position.z = -10;
            var meshIn = new THREE.Mesh(meshInGeometry, meshWhiteMaterial.clone());
            meshIn.position.z = -50;
            var obj = new THREE.Object3D();
            obj.add(outline, meshOut, meshIn);
            this.highlightController.add(obj);
          }
          this.createPickerController();
        }
      }, {
        key: 'createPickerController',
        value: function createPickerController() {
          var radius = 15,
              segments = 16;
          var circle = new THREE.Mesh(new THREE.CircleGeometry(radius, segments), new THREE.MeshBasicMaterial({
            color: 'white',
            transparent: true,
            opacity: 0.01
          }));
          circle.name = 1;
          this.pickerController.add(circle.clone());
          for (var i = 1; i <= 3; i++) {
            circle.name = i + 1;
            this.pickerController.add(circle.clone());
          }
        }
      }]);

      return TransformController;
    }();

    exports['default'] = TransformController;
    module.exports = exports['default'];

    /***/
  },
  /* 33 */
  /***/
  function (module, exports, __webpack_require__) {

    /**
     * Created by liuyuanpeng on 2016/9/12.
     * 菜单栏统一管理
     */
    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    var _createClass = function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ('value' in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        'default': obj
      };
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError('Cannot call a class as a function');
      }
    }

    var _presenter = __webpack_require__(2);

    var _presenter2 = _interopRequireDefault(_presenter);

    var _constants = __webpack_require__(8);

    var ToolbarHelper = function () {
      function ToolbarHelper() {
        var className = arguments.length <= 0 || arguments[0] === undefined ? _constants.VIEW_CLASS_NAME.TOOLBAR : arguments[0];

        _classCallCheck(this, ToolbarHelper);

        this.view = $(_presenter2['default'].view).find('.' + className);
        this.ColorMap = {
          "000000": "black",
          "16777215": "white",
          "16536320": "red",
          "16753152": "orange",
          "16768512": "yellow",
          "6203136": "green",
          "3649023": "blue",
          "10756048": "purple"
        };
        this.toolList = this.view.find('.cube_tool_list');
        this.subItemList = this.toolList.find(".cube_sub_item");
        this.faceColorList = this.view.find('.cube_fill .cube_color_list');
        this.borderColorList = this.view.find('.cube_border .cube_color_list');
        this.borderWidthList = this.view.find('.cube_border .cube_border_width');
        this.vertexList = this.view.find('.cube_point .cube_point_list');
        this.copyBtn = this.view.find('.cube_copy');
        this.deleteBtn = this.view.find('.cube_delete');
        this.closeBtn = this.view.find('.cube_btn_close');
        this.faceOpacityBtn = this.view.find('.cube_btn');
        this.faceOpacityContain = this.view.find('.cube_opacity');
        this.itemNumber = 5;
        this.itemWidth = 65.415625;
        this.width = 327.078125; //一级菜单宽度
        this.height = 65.415625; //一级菜菜单高度
        this.offsetLeft = 239.8573313125; //左边超出宽度
        this.offsetRight = 43.6104563125; //右边超出宽度
        this.offsetHeight = 122.90204368750001; //二级菜单的高度
        this.minDist2Bounding = 15; //一级菜单距边界的最小距离。
        this.init();
      }

      /**
       * 初始化
       */

      _createClass(ToolbarHelper, [{
        key: 'init',
        value: function init() {}

        /**
         * 显示菜单
         */
      }, {
        key: 'show',
        value: function show() {
          this.update();
          this.view.show();
        }

        /**
         * 隐藏菜单
         */
      }, {
        key: 'hide',
        value: function hide() {
          this.view.hide();
        }

        /**
         * 更新菜单
         */
      }, {
        key: 'update',
        value: function update() {
          var currObj = _presenter2['default'].threeManager.getCurrentObject().controller;
          if (currObj) {
            var data = currObj.data;
            var faceColor = typeof data.faceColor == "number" ? this.ColorMap[data.faceColor == 0 ? "000000" : data.faceColor] : data.faceColor;
            var borderColor = typeof data.lineColor == "number" ? this.ColorMap[data.lineColor == 0 ? "000000" : data.lineColor] : data.lineColor;
            var pointType = data.vertexVisible && "point_2" || data.textVisible && "point_3" || "point_1";
            this.toolList.find("li.cube_tool_cell").removeClass("curr");
            //更新填充菜单
            this.toolList.find(".cube_fill").attr({
              "data-color": faceColor
            });
            this.faceColorList.find('li[color-name="' + faceColor + '"]').addClass("on").siblings().removeClass("on");
            this.faceOpacityContain.find(".txt em").text(_presenter2['default'].i18n['opacity'] + "：" + (100 - Math.round(data.faceOpacity * 100)) + "%");
            this.faceOpacityContain.find(".cube_opacity_level").css({
              "width": 100 - Math.round(data.faceOpacity * 100) + "%"
            });
            //更新边框菜单
            if (!currObj.getLine()) {
              this.toolList.find(".cube_border").hide();
            } else {
              this.toolList.find(".cube_border").show().attr({
                "data-color": borderColor
              });
              this.borderColorList.find('li[color-name="' + borderColor + '"]').addClass("on").siblings().removeClass("on");
              this.borderWidthList.find('li[border-width="' + data.lineWidth + '"]').addClass("on").siblings().removeClass("on");
            }
            //更新顶点菜单
            if (!currObj.getVertex()) {
              this.width = this.width - this.itemWidth;
              this.toolList.find(".cube_point").hide();
            } else {
              this.toolList.find(".cube_point").show().attr({
                "data-point": pointType
              });
              this.vertexList.find('li[point-type="' + pointType + '"]').addClass("on").siblings().removeClass("on");
            }

            //更新菜单位置
            var rect = _presenter2['default'].threeManager.getCurrentArea();
            this.adjustPosition(rect);
          }
        }

        /**
         * 设置位置
         * @param rect 立体图形的平面矩形框 {left, top, width, height}
         */
      }, {
        key: 'adjustPosition',
        value: function adjustPosition(rect) {
          var maxWidth = _presenter2['default'].threeManager.rect.width;
          var maxHeight = _presenter2['default'].threeManager.rect.height;
          var currObj = _presenter2['default'].threeManager.getCurrentObject().controller;
          //计算菜单的实际宽度
          if (currObj) {
            var menuNumber = currObj.getLine() ? 5 : 4;
            menuNumber = currObj.getVertex() ? menuNumber : menuNumber - 1;
            this.width = menuNumber * this.itemWidth;
          }
          //left ,top 都是指一级菜单的left和top
          var left = rect.left + (rect.width - this.width) / 2;
          var top = rect.top + rect.height;
          left = left < this.minDist2Bounding ? this.minDist2Bounding : left;
          left = left + this.width + this.offsetRight > maxWidth - this.minDist2Bounding ? maxWidth - this.width - this.offsetRight - this.minDist2Bounding : left;
          //下面放不下，放上面
          var bottomCanPlace = top + this.height + this.offsetHeight < maxHeight;
          top = bottomCanPlace ? top : rect.top - this.height;
          // 上面放不了，放右边
          var topCanPlace = bottomCanPlace || top > this.offsetHeight;
          top = topCanPlace ? top : rect.top + rect.height / 2;
          left = topCanPlace ? left : rect.left + rect.width;
          //右边放不了，放左边
          var rightCanPlace = topCanPlace || left + this.width + this.offsetRight + this.minDist2Bounding < maxWidth;
          left = rightCanPlace ? left : rect.left - this.width - this.offsetRight;
          //左边放不了，放中间
          var leftCanPlace = rightCanPlace || left - this.minDist2Bounding > 0;
          left = leftCanPlace ? left : rect.left + rect.width / 2 - this.width / 2;
          top = leftCanPlace ? top : rect.top + rect.height / 2 - this.height / 2;
          this.view.css({
            left: left,
            top: top
          });
          //在顶部时，二级菜单向上展开
          if (!bottomCanPlace && topCanPlace) {
            this.subItemList.addClass("subItemUp");
          } else {
            this.subItemList.removeClass("subItemUp");
          }
        }

        /**
         * 释放资源
         */
      }, {
        key: 'dispose',
        value: function dispose() {
          this.view = null;
        }
      }]);

      return ToolbarHelper;
    }();

    exports['default'] = ToolbarHelper;
    module.exports = exports['default'];

    /***/
  },
  /* 34 */
  /***/
  function (module, exports) {

    /**
     * Created by liuyuanpeng on 2016/9/22.
     */

    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    exports["default"] = function (angle) {
      return angle * (180 / Math.PI);
    };

    module.exports = exports["default"];

    /***/
  },
  /* 35 */
  /***/
  function (module, exports) {

    /**
     * Created by liuyuanpeng on 2016/9/22.
     */

    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    exports["default"] = function (angle) {
      return angle * (Math.PI / 180);
    };

    module.exports = exports["default"];

    /***/
  },
  /* 36 */
  /***/
  function (module, exports) {

    /**
     * 定时器管理
     * Created by liuyuanpeng on 2016/9/22.
     */

    /**
     * 定时器对象
     */
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var _createClass = function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    var TimerManager = function () {
      function TimerManager() {
        _classCallCheck(this, TimerManager);

        this.interval = null;
      }

      /**
       * 释放定时器
       */

      _createClass(TimerManager, [{
        key: "dispose",
        value: function dispose() {
          this.interval && this.kill();
          this.interval = null;
        }

        /**
         * 添加定时器
         * @param callback
         * @param millisec
         */
      }, {
        key: "addTimer",
        value: function addTimer(callback, millisec) {
          this.kill();
          this.interval = setInterval(callback, millisec);
        }

        /**
         * 销毁定时器
         */
      }, {
        key: "kill",
        value: function kill() {
          if (this.interval) {
            clearInterval(this.interval);
            this.interval = null;
          }
        }
      }]);

      return TimerManager;
    }();

    exports["default"] = TimerManager;
    module.exports = exports["default"];

    /***/
  },
  /* 37 */
  /***/
  function (module, exports, __webpack_require__) {

    /**
     * Created by liuyuanpeng on 2016/9/27.
     */
    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        'default': obj
      };
    }

    var _presenter = __webpack_require__(2);

    var _presenter2 = _interopRequireDefault(_presenter);

    exports['default'] = function (msg) {
      var node = $(_presenter2['default'].view).find('.bg_pop');
      node.find('.text').html(msg);
      node.show();
      setTimeout(function () {
        node.find('.text').html('');
        node.hide();
      }, 2000);
    };

    module.exports = exports['default'];

    /***/
  },
  /* 38 */
  /***/
  function (module, exports, __webpack_require__) {

    /**
     * Created by liuyuanpeng on 2016/9/28.
     */
    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        'default': obj
      };
    }

    var _presenter = __webpack_require__(2);

    var _presenter2 = _interopRequireDefault(_presenter);

    exports['default'] = function () {
      setTimeout(function () {
        _presenter2['default'].playerController.getCommands().closeTool();
      }, 100);
    };

    module.exports = exports['default'];

    /***/
  },
  /* 39 */
  /***/
  function (module, exports) {

    /**
     * arg0 模板字符串 如a{0}b{1}c
     * arg1...n 需替换到模板中的字符串
     * @returns 替换后的字符串
     */
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = {
      format: function format() {
        var args = arguments;
        if (!args[0] || Object.prototype.toString.call(args[0]).slice(8, -1) !== "String") return args[0];
        return args[0].replace(/\{(\d+)\}/g, function (m, i) {
          return args[i * 1 + 1];
        });
      }
    };
    module.exports = exports["default"];

    /***/
  },
  /* 40 */
  /***/
  function (module, exports, __webpack_require__) {

    /**
     * Created by liuyuanpeng on 2017/2/27.
     */
    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        'default': obj
      };
    }

    var _presenter = __webpack_require__(2);

    var _presenter2 = _interopRequireDefault(_presenter);

    exports['default'] = function () {
      if (icCreatePlayer.plugin && icCreatePlayer.plugin.webglControl) {
        _presenter2['default'].webglControl = icCreatePlayer.plugin.webglControl;
      }
    };

    module.exports = exports['default'];

    /***/
  },
  /* 41 */
  /***/
  function (module, exports, __webpack_require__) {

    /**
     * Created by lyp on 2015/12/29.
     */

    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        'default': obj
      };
    }

    var _presenter = __webpack_require__(2);

    var _presenter2 = _interopRequireDefault(_presenter);

    var _constants = __webpack_require__(8);

    exports['default'] = {
      // icPlayer消息是否归为本工具处理
      isPointInPath: function isPointInPath(event) {
        /**
         *  is in toolbar ? return true;
         */
        if ($(event.target).closest('.cube_tool_list:visible').length != 0) {
          return true;
        }

        if ($(event.target).closest('.cube_btn_close:visible').length != 0) {
          return true;
        }

        if ($(event.target).closest('.move_icon:visible').length != 0) {
          return true;
        }

        /**
         * constroller is visible && is in controller ? return true;
         */
        var pointer = undefined;
        if (event.touches) {
          if (event.touches.length === 1) {
            pointer = event.changedTouches[0];
          } else {
            return false;
          }
        } else {
          pointer = event;
        }

        if (_presenter2['default'].threeManager.controller.visible) {
          if (_presenter2['default'].threeManager.getIndexOfScale(pointer)) {
            return true;
          }
          if (_presenter2['default'].threeManager.getIntersectOfMoveFrame(pointer)) {
            return true;
          }
        }

        if (_presenter2['default'].threeManager.getIntersectOfObjects(pointer)) {
          return true;
        }

        _presenter2['default'].threeManager.onBlur();
        return false;
      },
      // tool.xml定义的执行接口
      execute: function execute(params) {
        var type = params.type ? params.type : params.toolOptions ? params.toolOptions.type : '';
        var data = params.data;
        if (type) {
          // 根据类型返回
          if (data) {
            var three = _presenter2['default'].threeManager;
            three.addSolid(type, data);
            var solid = three.getCurrentObject();
            solid.quaternion.copy(data.quaternion);
            solid.getObjectByName(_constants.OBJECT_PART.MESH_PART).scale.copy(data.scale);
            solid.controller.updateSolid();
            three.controller.update();
            three.render();
          } else {
            _presenter2['default'].threeManager.addSolid(type);
          }
        }
      }
    };
    module.exports = exports['default'];

    /***/
  },
  /* 42 */
  /***/
  function (module, exports, __webpack_require__) {

    /**
     ** Created by liuyuanpeng on 2016/9/8.
     * 释放资源
     */
    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        'default': obj
      };
    }

    var _presenter = __webpack_require__(2);

    var _presenter2 = _interopRequireDefault(_presenter);

    exports['default'] = function () {
      // icPlayer消息释放
      _presenter2['default'].listenerManager.dispose();
      _presenter2['default'].listenerManager = null;

      // 浏览器消息释放
      _presenter2['default'].eventManager.unbindEvents();
      _presenter2['default'].eventManager = null;

      // three.js释放
      _presenter2['default'].threeManager.dispose();
      _presenter2['default'].threeManager = null;
    };

    module.exports = exports['default'];

    /***/
  },
  /* 43 */
  /***/
  function (module, exports, __webpack_require__) {

    /**
     * Created by lyp on 2016/1/11.
     */
    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    exports['default'] = setPlayerController;

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        'default': obj
      };
    }

    var _presenter = __webpack_require__(2);

    var _presenter2 = _interopRequireDefault(_presenter);

    function setPlayerController(controller) {
      // 绑定playerController
      _presenter2['default'].playerController = controller;

      // 绑定eventBus
      _presenter2['default'].eventBus = _presenter2['default'].playerController.getEventBus();
    }

    module.exports = exports['default'];

    /***/
  },
  /* 44 */
  /***/
  function (module, exports, __webpack_require__) {

    /**
     * Created by lyp on 2016/1/11.
     */

    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        'default': obj
      };
    }

    var _presenter = __webpack_require__(2);

    var _presenter2 = _interopRequireDefault(_presenter);

    /**
     * eventBus事件回调
     * @param eventName
     * @param event
     */

    exports['default'] = function (eventName, event) {
      // `eventBus`事件统一由`listenerManager`管理
      _presenter2['default'].listenerManager && _presenter2['default'].listenerManager.run(eventName, event);
    };

    module.exports = exports['default'];

    /***/
  },
  /* 45 */
  /***/
  function (module, exports, __webpack_require__) {

    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        'default': obj
      };
    }

    var _presenter = __webpack_require__(2);

    var _presenter2 = _interopRequireDefault(_presenter);

    exports['default'] = function (obj) {
      _presenter2['default'].langType = obj._lang_;
    };

    module.exports = exports['default'];

    /***/
  }]);
  return presenter();
};]]></presenter><resources><file src="./resources/wood/images/border_black.png"/><file src="./resources/wood/images/btn-close-active.png"/><file src="./resources/wood/images/btn-close.png"/><file src="./resources/wood/images/btn-level-active.png"/><file src="./resources/wood/images/btn-level.png"/><file src="./resources/wood/images/dashed-black-hover.png"/><file src="./resources/wood/images/dashed-black.png"/><file src="./resources/wood/images/dashed-blue-hover.png"/><file src="./resources/wood/images/dashed-blue.png"/><file src="./resources/wood/images/dashed-green-hover.png"/><file src="./resources/wood/images/dashed-green.png"/><file src="./resources/wood/images/dashed-orange-hover.png"/><file src="./resources/wood/images/dashed-orange.png"/><file src="./resources/wood/images/dashed-purple-hover.png"/><file src="./resources/wood/images/dashed-purple.png"/><file src="./resources/wood/images/dashed-red-hover.png"/><file src="./resources/wood/images/dashed-red.png"/><file src="./resources/wood/images/dashed-white-hover.png"/><file src="./resources/wood/images/dashed-white.png"/><file src="./resources/wood/images/dashed-yellow-hover.png"/><file src="./resources/wood/images/dashed-yellow.png"/><file src="./resources/wood/images/fill_black_hover.png"/><file src="./resources/wood/images/fill_black.png"/><file src="./resources/wood/images/fill_blue_hover.png"/><file src="./resources/wood/images/fill_blue.png"/><file src="./resources/wood/images/fill_green_hover.png"/><file src="./resources/wood/images/fill_green.png"/><file src="./resources/wood/images/fill_orange_hover.png"/><file src="./resources/wood/images/fill_orange.png"/><file src="./resources/wood/images/fill_purple_hover.png"/><file src="./resources/wood/images/fill_purple.png"/><file src="./resources/wood/images/fill_red_hover.png"/><file src="./resources/wood/images/fill_red.png"/><file src="./resources/wood/images/fill_white_hover.png"/><file src="./resources/wood/images/fill_white.png"/><file src="./resources/wood/images/fill_yellow_hover.png"/><file src="./resources/wood/images/fill_yellow.png"/><file src="./resources/wood/images/icon-copy-hover.png"/><file src="./resources/wood/images/icon-copy.png"/><file src="./resources/wood/images/icon-del-hover.png"/><file src="./resources/wood/images/icon-del.png"/><file src="./resources/wood/images/point_1.png"/><file src="./resources/wood/images/point_2.png"/><file src="./resources/wood/images/point_3.png"/><file src="./resources/wood/images/pointer_active.png"/><file src="./resources/wood/images/pointer.png"/><file src="./resources/wood/images/triangle.png"/></resources></addon>