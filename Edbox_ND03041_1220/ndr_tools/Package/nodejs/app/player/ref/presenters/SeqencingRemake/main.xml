<?xml version='1.0' encoding='UTF-8' ?>
<addon id='SeqencingRemake'>
<properties>



</properties>

<dependencies>

</dependencies>

<css>

<![CDATA[.exam_skin_wood .textsort{position:relative;width:100%;height:100%}.exam_skin_wood .textsort .com_m_sideboard_1{position:relative;float:left;width:38%;height:100%;padding:3.5em 0 .58333em;margin-left:.66667em;margin-right:.66667em}.exam_skin_wood .textsort .com_m_sidehead{position:absolute;left:0;top:.83333em;right:0;height:2.75em;border-top-left-radius:.75em;border-top-right-radius:.75em}.exam_skin_wood .textsort .com_m_sidecon{height:100%;border-bottom:.375em solid transparent;box-shadow:.0625em .10825em .79167em 0 rgba(75,40,0,.75);border-bottom-left-radius:.75em;border-bottom-right-radius:.75em;overflow:auto}.exam_skin_wood .textsort .coursebox{position:relative;height:99%;overflow:hidden;margin-top:.5%}.exam_skin_wood .textsort .text_main_box{position:absolute;top:.625em;left:.83333em;right:.83333em}.exam_skin_wood .textsort .text_main_box:after,.exam_skin_wood .textsort .text_main_box:before{position:absolute;left:0;content:"";height:.83333em;width:.83333em}.exam_skin_wood .textsort .text_main_box:before{top:0;border:.16667em solid hsla(0,0%,60%,.5);border-bottom:none;border-right:none}.exam_skin_wood .textsort .text_main_box:after{bottom:0;border:.16667em solid hsla(0,0%,60%,.5);border-top:none;border-right:none}.exam_skin_wood .textsort .text_main_bg{position:relative;overflow-y:auto;text-align:left;padding:.41667em;width:100%;height:9em}.exam_skin_wood .textsort .text_main_bg:after,.exam_skin_wood .textsort .text_main_bg:before{right:0;height:.83333em;width:.83333em;position:absolute;content:""}.exam_skin_wood .textsort .text_main_bg:before{top:0;border:.16667em solid hsla(0,0%,60%,.5);border-bottom:none;border-left:none}.exam_skin_wood .textsort .text_main_bg:after{bottom:0;border:.16667em solid hsla(0,0%,60%,.5);border-top:none;border-left:none}.exam_skin_wood .textsort .text_main_bg .text_titi_box{display:table;height:8.08333em;width:100%}.exam_skin_wood .textsort .text_main_bg .text_titinp{display:table-cell;line-height:1.26;font-size:1.5em;word-wrap:break-word;word-break:break-word;vertical-align:middle;color:#2e2e2e;outline:0}.exam_skin_wood .textsort .text_main_bg .text_titinp.text_s{line-height:1.41667em;font-size:1em}.exam_skin_wood .textsort .text_main_bg .text_titinp.style_tips{color:#878787;text-align:center}.exam_skin_wood .textsort .insert_mvp{position:absolute;top:10.20833em;left:.83333em;right:.83333em;bottom:.83333em}.exam_skin_wood .textsort .insert_mvp .insert_pic_bg{display:-webkit-box;display:-ms-flexbox;display:flex;height:100%;overflow:auto;position:relative;text-align:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center}.exam_skin_wood .textsort .insert_mvp .insert_pic_box{position:relative;overflow:hidden;text-align:center;-webkit-box-pack:center;-webkit-box-align:center}.exam_skin_wood .textsort .insert_mvp .insert_pic_box img{width:24.5em;height:17em}.exam_skin_wood .textsort .insert_mvp .insert_video_box{position:relative;height:100%}.exam_skin_wood .textsort .insert_mvp .insert_video_box .vidio_wrap{position:relative;height:100%;background:#010101}.exam_skin_wood .textsort .insert_mvp .insert_video_box .vidio_wrap .video_loading{position:absolute;text-align:center;left:50%;top:50%;color:#999;width:4.16667em;height:1.16667em;line-height:1.16667em;margin:-.58333em 0 0 -2.08333em}.exam_skin_wood .textsort .insert_mvp .insert_video_box .playcolwrap{background:hsla(0,0%,100%,.17);text-align:center;position:absolute;bottom:0;left:0;width:100%;height:100%}.exam_skin_wood .textsort .insert_mvp .insert_video_box .playcolwrap .btn_play{position:absolute;left:.41667em;top:50%;margin-top:-1.16667em;width:2.375em;height:2.375em;background:url(resources/wood/images/paixu_voice_play.png) 50% no-repeat;background-size:80% auto}.exam_skin_wood .textsort .insert_mvp .insert_video_box .playcolwrap .btn_play:active{opacity:.9}.exam_skin_wood .textsort .insert_mvp .insert_video_box .playcolwrap .btn_pause{background:url(resources/wood/images/paixu_voice_pause.png) 50% no-repeat;background-size:80% auto}.exam_skin_wood .textsort .insert_mvp .insert_video_box .playcolwrap .probar{position:relative;height:.16667em;border-radius:.125em;background:#979799;vertical-align:middle}.exam_skin_wood .textsort .insert_mvp .insert_video_box .playcolwrap .probar .bar{position:absolute;left:0;top:0;width:0;height:100%;border-top-left-radius:.125em;border-bottom-left-radius:.125em;background:#fbbe46}.exam_skin_wood .textsort .insert_mvp .insert_video_box .playcolwrap .probar .bar .btn_dot{position:absolute;top:-.16667em;right:-.16667em;width:.5em;height:.5em;background:#fbbe46;border-radius:50%;box-shadow:0 0 .20833em rgba(0,0,0,.3)}.exam_skin_wood .textsort .insert_mvp .insert_video_box .playcolwrap .time{position:absolute;right:.41667em;top:50%;height:2.375em;line-height:2.375em;margin-top:-1.16667em;display:inline-block;font-size:.58333em;color:#88888f}.exam_skin_wood .textsort .insert_mvp .insert_mt_box{position:absolute;left:0;right:0;bottom:0;top:0;background:hsla(0,0%,48%,.1)}.exam_skin_wood .textsort .insert_mvp .insert_mt_box:before{position:absolute;top:0;left:0;content:"";border:2px solid hsla(0,0%,60%,.5);border-bottom:none;border-right:none;height:.83333em;width:.83333em}.exam_skin_wood .textsort .insert_mvp .insert_mt_box:after{position:absolute;bottom:0;left:0;content:"";border:2px solid hsla(0,0%,60%,.5);border-top:none;border-right:none;height:.83333em;width:.83333em}.exam_skin_wood .textsort .insert_mvp .insert_mt_box .insert_mt_bg{position:relative;height:100%;overflow:hidden;text-align:left;font-size:.83333em}.exam_skin_wood .textsort .insert_mvp .insert_mt_box .insert_mt_bg:before{position:absolute;top:0;right:0;content:"";border:2px solid hsla(0,0%,60%,.5);border-bottom:none;border-left:none;height:.83333em;width:.83333em}.exam_skin_wood .textsort .insert_mvp .insert_mt_box .insert_mt_bg:after{position:absolute;bottom:0;right:0;content:"";border:2px solid hsla(0,0%,60%,.5);border-top:none;border-left:none;height:.83333em;width:.83333em}.exam_skin_wood .textsort .insert_mvp .insert_mt_box .vidio_wrap{height:80%;background:url(resources/wood/images/icobg_voice.png) 50% no-repeat;background-size:contain}.exam_skin_wood .textsort .match_board_bg{left:.33333em;top:.83333em;right:.33333em;bottom:.5em;position:absolute;border-radius:.75em;background:rgba(144,90,19,.2)}.exam_skin_wood .textsort .com_m_mainboard_1{position:relative;height:100%;overflow:hidden}.exam_skin_wood .textsort .com_layout_container.inner{width:100%;height:100%!important;border-radius:1em;overflow:hidden}.exam_skin_wood .textsort .com_layout_container.inner .com_layout_main{top:.75em;right:.79167em;left:.5em;bottom:.75em;padding-bottom:3px}.exam_skin_wood .paixulist_li_move .listtxt,.exam_skin_wood .textsort .paixulist .listtxt{padding:.33333em .66667em;text-align:left;outline:0;word-wrap:break-word;word-break:break-word}.exam_skin_wood .textsort .com_layout_container.inner .com_layout_main:after{display:inline-block;width:0;height:100%;vertical-align:middle;content:""}.exam_skin_wood .textsort .paixulist{display:inline-block;vertical-align:middle;width:38em}.exam_skin_wood .textsort .paixulist li{position:relative;margin:1em 2.5em 0;border:.16667em solid #f1d8b4;border-radius:.75em;background:#fff}.exam_skin_wood .textsort .paixulist li:before{content:"";display:block;position:absolute;left:-.20833em;right:-.20833em;top:-.25em;bottom:-.45833em;background:url(resources/wood/images/paixulist.png) no-repeat;background-size:100% 100%;z-index:-1}.exam_skin_wood .textsort .paixulist li.ui_btn_active{opacity:.3;filter:alpha(opacity=30)}.exam_skin_wood .textsort .paixulist li.ui_btn_active .paixu_txt{visibility:hidden}.exam_skin_wood .textsort .paixulist li:first-child{margin-top:.41667em}.exam_skin_wood .textsort .paixulist li em{position:absolute;top:50%;right:-2.5em;width:2em;height:2em;margin-top:-1em;background:url(resources/wood/images/icon_paixu_re_r.png) 50% no-repeat;background-size:auto 100%;display:none}.exam_skin_wood .textsort .paixulist li.sort_right_list em{display:block}.exam_skin_wood .textsort .paixulist .listtxt{position:relative;z-index:10;color:#2e2e2e;border:.125em solid #7c5a2b;border-radius:.58333em;background:#f9f9f9}.exam_skin_wood .paixulist_num{position:absolute;width:1.33333em;height:2em;line-height:2em;font-size:1.5em;text-align:left;left:-1.33333em;top:50%;margin-top:-1em;color:#5d390d}.exam_skin_wood .paixu_txt{line-height:1.26;color:#2e2e2e;font-size:1.5em}.exam_skin_wood .paixulist_li_move{display:none;position:absolute;width:33.08333em;left:30.8em;top:8em;border:.16667em solid #f1d8b4;border-radius:.75em;background:#fff;z-index:33}.exam_skin_wood .paixulist_li_move:before{content:"";display:block;position:absolute;left:-.20833em;right:-.20833em;top:-.25em;bottom:-.45833em;background:url(resources/wood/images/paixulist.png) no-repeat;background-size:100% 100%;z-index:-1}.exam_skin_wood .paixulist_li_move .listtxt{position:relative;z-index:10;color:#2e2e2e;border:.125em solid #7c5a2b;border-radius:.58333em;background:#f9f9f9}.exam_skin_wood .paixulist_li_move.ui_btn_active{display:block;border-color:#ffde03}.exam_skin_wood .paixulist_li_move.ui_btn_active .listtxt{border-color:#ea9f0d}.exam_skin_wood .com_wrapper_pad .textsort .com_layout_main{padding-left:2em}]]>

</css>


<view>

<![CDATA[<div class="com_layout_exam_content textsort _textsort"><div class="com_layout_main_exam"><div class="com_layout_tit"><h2 class="tit js_lang_support" data-lang-key="sequencing.title"></h2></div><div class="com_layout_main"><div class="com_m_sideboard_1"><div class="com_m_sidehead"></div><div class="com_m_sidecon"><div class="coursebox"><div class="text_main_box"><div class="text_main_bg"><div class="text_titi_box"><div class="text_titinp"></div></div></div></div><div class="insert_mvp"><div class="insert_pic_bg scrollbar_style_gray" style="display:none"><div class="insert_pic_box"></div></div><div class="insert_video_box" style="display:none"><div class="vidio_wrap"></div></div><div class="insert_mt_box" style="display:none"><div class="insert_mt_bg"><div class="insert_video_box"><div class="playcolwrap"></div></div></div></div></div></div></div></div><div class="com_m_mainboard_1"><div class="match_board_bg"><div class="com_layout_container inner"><div class="com_layout_main scrollbar_style_simple _list_container"><ul class="paixulist _listUl"></ul></div></div></div></div></div></div><div class="paixulist_li_move ui_btn_active _move_container" style="display: none"><p class="listtxt"><span class="paixu_txt _paixu_txt">寻梦？撑一支长篙，向青草更青处漫溯；</span></p></div></div>]]>
</view>


<presenter>

<![CDATA[/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

function SeqencingRemakeService(parent) {
  this.parent = parent;
  this.status = {};
}

SeqencingRemakeService.prototype = {

  getQuestionInfo: function() {
    return {
      id: this.parent.model.question_id,
      type_code: 'seqencing',
      type_name: '新排序',
      dispatchOnly: true
    }
  },

  setLocationProperties: function(data) {
    this.parent.$translator.setData(data);
    this.parent._tranlateStaticText();
  },

  getResult: function() {
    var correctAnswer = [];
    var candiAnswer = [];
    var responseObj = this.parent.model.question_url.correctAnswer;
    $.each(responseObj.value, function(index, item) {
      correctAnswer.push(item);
    });
    $.each(this.parent.$view.find('.paixulist li'), function(index, item) {
      candiAnswer.push($(item).attr('identifier'));
    });

    var isCorrect = true;
    for (var i = 0; i < correctAnswer.length && isCorrect; i++) {
      if (correctAnswer[i] !== candiAnswer[i]) {
        isCorrect = false;
        break;
      }
    }

    var returnAnswer = {
      answer: {
        "answer_result": isCorrect,
        "correct_response": correctAnswer,
        "user_response": candiAnswer
      },
      answerState: this.parent.answerState,
      questionId: this.parent.model.question_id
    };

    this.parent.logger.debug("SeqencingRemake getResult " + JSON.stringify(returnAnswer));
    return returnAnswer;
  },

  getStatisticClass: function() {
    this.parent.logger.debug("SeqencingRemake getStatisticClass " + this.parent.statisticClass);
    return this.parent.statisticClass;
  },

  convertDataForStatistics: function(oriData) {
    //
    var value = oriData.value;
    var convertedData = {};
    //题目类型
    convertedData.questionType = value.questionType;
    //用时
    convertedData.elapsedTime = value.elapsedTime;
    //已作答人数
    convertedData.finishedNum = value.finishedNum;
    //未作答人数
    convertedData.unfinishedNum = value.unfinishedNum;
    //总人数
    convertedData.totalNum = value.unfinishedNum + value.finishedNum;

    convertedData.unfinishedUsers = value.unfinishedUserIds;
    convertedData.correctUsers = [];
    convertedData.wrongUsers = [];

    if (value.answers && value.answers[0].length > 0) {
      for (var index = 0; index < value.answers[0].length; index++) {
        var object = value.answers[0][index];
        if (object && object.userIds) {
          var data = JSON.parse(object.answer);
          if (value.questionType && (value.questionType == "seqencing")) {
            if (data) {
              if (data.answer_result) {
                convertedData.correctUsers = convertedData.correctUsers.concat(object.userIds);
              } else {
                convertedData.wrongUsers = convertedData.wrongUsers.concat(object.userIds);
              }
            } else {
              convertedData.wrongUsers = convertedData.wrongUsers.concat(object.userIds);
            }
          }
        }
      }
    }
    convertedData.allrightStu = [];
    convertedData.allrightStu = convertedData.allrightStu.concat(convertedData.correctUsers);
    convertedData.spend_time = value ? value.elapsedTime ? value.elapsedTime : 0 : 0;
    convertedData.submit_count = value ? value.finishedNum + value.unfinishedNum : 0;
    convertedData.correctNum = convertedData.correctUsers.length;
    convertedData.wrongNum = convertedData.wrongUsers.length;
    // return convertedData;
    value["convertedData"] = convertedData;
  //
  },
  /**
   * 显示答案
   * @param answer 需要显示的答案,如果对象为空则显示正确答案
   */
  showAnswer: function(showAnswerType, commitedAnswer) {
    this.parent.logger.debug("SeqencingRemake showAnswer showAnswerType:" + showAnswerType + "  commitedAnswer: " + commitedAnswer);
    var answer = null;
    var correctAnswer = [];
    var responseObj = this.parent.model.question_url.correctAnswer;
    $.each(responseObj.value, function(index, item) {
      correctAnswer.push(item);
    });
    //显示已提交的答案
    if (commitedAnswer) {
      answer = [];
      var committedAnswer = commitedAnswer.answer.user_response;
      if (committedAnswer) {
        for (var index = 0, len = committedAnswer.length; index < len; index++) {
          answer.push(committedAnswer[index]);
        }
      }
    } else {
      //状态恢复
      this.parent.showAnswerInfo = {
        'hasShow': true,
        'type': showAnswerType
      };

      switch (showAnswerType) {
        //显示正确答案
        case "correct": {
          answer = [];
          answer = correctAnswer;
          break;
        }
        //显示当前学生答案用
        case "user": {
          answer = [];
          $.each(this.parent.$view.find('.paixulist li'), function(index, item) {
            answer.push($(item).attr('identifier'));
          });
          break;
        }
        //统计使用
        default: {
          answer = [];
          var responseObj = this.parent.model.question_url.correctAnswer;
          $.each(responseObj.value, function(index, item) {
            answer.push(item);
          });
          break;
        }
      }
    }
    //根据传入的答题顺序恢复学生答题顺序选项
    this.parent._recoverOptions(answer, this.parent.$view.find(".paixulist"));
    //正确项打钩
    var optionItems = this.parent.$view.find('.paixulist li');
    $.each(correctAnswer, function(index, item) {
      var $optionItem = $(optionItems[index]);
      if ($optionItem.attr('identifier') == item) { //正确项打勾
        $optionItem.addClass("sort_right_list");
      }
    });
    //公布结果之后，不能作答 this.parent._disableOptionItemSortable(); this.parent._stopMedia();
    this.lockQuestion();
  },

  showResultHint: function(option) {
    this.parent.logger.debug("SeqencingRemake showResultHint " + option);
    var result = this.getResult();
    var tip;
    if (result.answer.answer_result) {
      tip = this.parent.$translator.translate('sequencing.tip.right');

    } else {
      tip = this.parent.$translator.translate('sequencing.tip.wrong');
    }
    this.parent.$dispatchEvent($PresenterEvent['ObjectiveInteractionLayout'].NOTICE_TIP, PresenterEventType.IC_PLAYER_EVENT, {
      value: {
        type: 'show',
        text: tip,
        autoDismiss: true
      }
    });
  },
  //将题目重置为未作答状态
  resetQuestion: function() {
    this.parent.logger.debug("SeqencingRemake resetQuesion ");
    var optionItems = this.parent.$view.find('.paixulist li');
    $.each(optionItems, function(index, item) {
      var $optionItem = $(optionItems[index]);
      $optionItem.removeClass("sort_right_list");
    });

    //根据传入的答题顺序恢复学生答题顺序选项
    this.parent._recoverOptions(this.parent.stateAnswer, this.parent.$view.find('.paixulist'));
    // this.parent._renderingOptionItems(); 任意排序
    if (this.parent.media) {
      this.parent.media.pause();
      this.parent.media.load();
    }

    // this.parent._enableOptionItemSortable();
    this.parent._enableMedia();

    this.parent.showAnswerInfo = {
      'hasShow': false,
      'type': undefined
    };
    this.parent.answerState = "NO_ANSWER";
    this.parent.lockView = false;
    //通知状态变化
    this.parent.$dispatchEvent($PresenterEvent['InteractionStateRecoverFilter'].PRESENTER_STATE_CHANGE, PresenterEventType.IC_PLAYER_EVENT);
  },
  _getState: function() {
    var userAnswers = [];
    $.each(this.parent.$view.find('.paixulist li'), function(index, item) {
      userAnswers.push($(item).attr('identifier'));
    });

    var state = {
      userAnswers: userAnswers,
      showAnswerInfo: this.parent.showAnswerInfo,
      answerState: this.parent.answerState,
      lockView: this.parent.lockView,
      playProgress: this.parent.playProgress
    };
    this.parent.logger.debug("SeqencingRemake getState " + JSON.stringify(state));
    return JSON.stringify(state);
  },
  getState: function() {
    this.parent.playerController.startFlow('css_classroom_status_changed', {
      presenterCode: this.parent.metaInfo.name
    });
    return this._getState();
  },

  setState: function(state) {
    var self = this;
    this.parent.logger.debug("SeqencingRemake setState " + JSON.stringify(state));
    var stateObj = JSON.parse(state);

    if (stateObj) {
      //根据传入的答题顺序恢复学生答题顺序选项
      this.parent._recoverOptions(stateObj.userAnswers, this.parent.$view.find('.paixulist'));
      if (stateObj.showAnswerInfo) {
        if (stateObj.showAnswerInfo.hasShow) {
          this.showAnswer(stateObj.showAnswerInfo.type);
        }
      }
      this.parent.answerState = stateObj.answerState;
      //处理状态恢复时，题目是否可以作答
      if (stateObj.lockView) {
        self.lockQuestion();
      }

      this.parent.playProgress = stateObj.playProgress;
      //恢复播放进度
      if (!$.isEmptyObject(this.parent.playProgress)) {
        this.parent.playProgress.currentTime = this.parent.playProgress.currentTime - 1 > 0 ? this.parent.playProgress.currentTime - 1 : 0;
        NDMediaPlayer.mediaSkip(this.parent.playProgress.mediaType, this.parent.playProgress.index, this.parent.playProgress.currentTime);
      }
    }
  },

  getClassroomStatus: function() {
    return this._getState();
  },
  setClassroomStatus: function(status) {
    this.status = status;
    !!this.status && this.setState(status);
    this.parent.$dispatchEvent('css_recover_complete', PresenterEventType.IC_PLAYER_EVENT, {
      presenterCode: this.parent.metaInfo.name
    });
  },
  clearClassroomStatus: function() {
    this.setClassroomStatus(null);
  },
  startStatistics: function() {
    //TODO:C类统计没有交互，暂时不处理
  },

  //将题目设置为不可作答状态
  lockQuestion: function() {
    this.parent.lockView = true;
    this.parent.logger.debug("SeqencingRemake lockQuestion ");
    // this.parent._disableOptionItemSortable();
    this.parent._stopMedia();
  },

  //将题目设置为可作答状态
  unlockQuestion: function() {
    this.parent.lockView = false;
    this.parent.logger.debug("SeqencingRemake unlockQuestion ");
    // this.parent._enableOptionItemSortable();
    this.parent._enableMedia();
  },

  //将题目设置为结束作答状态,点击“退出本题”按钮时会调用
  finishQuestion: function() {
    this.unlockQuestion();
    this.parent.logger.debug("SeqencingRemake finishQuestion ");
  }
};

/* harmony default export */ __webpack_exports__["a"] = (SeqencingRemakeService);


/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__libs_SeqencingRemakeService_js__ = __webpack_require__(0);


(function() {

  var Utils = {
    //$(ref-path) 替换处理
    'handleRefPath': function(text) {
      if (typeof text === 'string') {
        return text.replace(/\$\(ref-path\)/ig, icCreatePlayer.ref_path);
      }
      return text;
    },
    //释放音视频对象
    'removeMedia': function(media, offEvents) {
      if (media) {
        var $media = $(media);
        media.pause();
        media.src = '';
        media.load();
        offEvents && $media.off(offEvents);
        $media.remove();
        media = null;
      }
    }
  };

  var Presenter = BasicPresenter.extend({
    metaInfo: {
      name: "SeqencingRemake",
      type: PresenterType.PRESENTER_COMPONENT,
      subtype: SubPresenterType.INTERACTION_QUESTION
    },
    /**
     * Presenter的初始化方法
     * @private
     */
    $init: function() {
      this._super();
      this.$view = this.model = null;
      this.media = null;
      this.sortable = null;
      //答题情况三种状态
      this.answerState = "NO_ANSWER";
      this.statisticClass = "C";
      this.showAnswerInfo = {
        'hasShow': false,
        'type': undefined
      };
      this.showHintInfo = {
        'hasShow': false,
        'result': undefined
      };
      this.stateAnswer = [];
      this.lockView = false;

      //存li集合，当前mousedown元素 , 移动元素 , 每个li位置
      this.$main = null;
      this.seqLi = null;
      this.currDom = null;
      // this.targetDom = null;
      this.isMoving = false;
      this._move_container = null;
      this._list_container = null;
      this._listUl = null;
      this._listConH = 0;
      this._listUlH = 0;

      // this.seqLiMaps = [];
      this.middleH = 0;
      // this._listUlTop = 0;
      this.scrollH = 70;

      this.startX = 0; //presenter区
      this.startY = 0;
      this.endX = 0;
      this.endY = 0;

      this.ansBox_startX = 0; //右边答题区
      this.ansBox_startY = 0;
      this.ansBox_endX = 0;
      this.ansBox_endY = 0;

      // this.timeoutFun = null; this.touchFeg = false;//解决多指触摸

    },
    /**
     * Presenter对外暴露的方法
     */
    _service_: null,
    getService: function() {
      if (!this._service_) {
        this._service_ = new __WEBPACK_IMPORTED_MODULE_0__libs_SeqencingRemakeService_js__["a" /* default */](this);
      }
      return this._service_;
    },
    /****以下开始为icPlayer的生命周期方法*****/
    run: function(view, model) {
      var self = this;
      self.$view = $(view);
      self.model = model;
      //视图渲染
      self._renderingModelView();
      //启用选项排序功能
      self._bindOptionItemSortable();
      //启动媒体播放功能
      self._enableMedia();
    },

    pageShow: function() {
      this._bindEvent();
    },

    pageLeave: function() {
      this._unbindEvent();
    },

    destroy: function() {
      var self = this;
      if (self.sortable || false) {
        self.sortable.destroy();
        self.sortable = null;
      }
      Utils.removeMedia(self.media, "play pause seeked timeupdate");
      self.$view = null;
      self.stateAnswer = null;
    },
    /****以下开始为Presenter的私有方法*****/
    _bindEvent: function() {},
    _unbindEvent: function() {
      this.$view.off('touchstart touchmove touchend mousedown mousemove mouseup');
    },

    //视图渲染
    _renderingModelView: function() {
      var self = this;
      //Step1. 题干
      self._renderingSideTitle();
      //Step2. 选项
      self._renderingOptionItems();
    },

    //滚动条滚动
    _containerScroll: function(direction) {
      var that = this;
      if (direction == 'up') { // 上滚
        if (that._list_container.scrollTop() + that.scrollH >= that.ansBox_endY) {
          //that._list_container.animate({scrollTop: that.ansBox_endY}, 10);
          that._list_container.scrollTop(that.ansBox_endY);
        } else {
          that._list_container.scrollTop(that._list_container.scrollTop() + that.scrollH);
          // if(that._list_container.scrollTop() < that.ansBox_endY){    that.timeoutFun = setTimeout(function (event) {
          // that._containerScroll('up');    },500); }else{    clearTimeout(that.timeoutFun); }

        }
      } else { // 下滚

        if (that._list_container.scrollTop() - that.scrollH <= 0) {
          //that._list_container.animate({scrollTop: 0}, 10);
          that._list_container.scrollTop(0);
        } else {
          that._list_container.scrollTop(that._list_container.scrollTop() - that.scrollH);
        }
      }
    },
    //交换两个元素位置
    _exchange: function(a, b) {
      if (a.get(0) === b.get(0)) {
        return;
      }
      if (a.index() > b.index()) {
        return this._exchange(b, a);
      } else if (a.index() + 1 == b.index()) { //相邻
        b.after(a);
      } else {
        var n = a.next(),
          p = b.prev();
        n.before(b);
        p.after(a);
      }
      a.removeClass('sort_right_list');
      b.removeClass('sort_right_list');
      this.answerState = "COMPLETE"; //当用户移动选项，就表示完成
      this.$dispatchEvent($PresenterEvent['InteractionStateRecoverFilter'].PRESENTER_STATE_CHANGE, PresenterEventType.IC_PLAYER_EVENT);
      this.$dispatchEvent($PresenterEvent['AnswerFlowController'].QUESTION_STATE_CHANGE, PresenterEventType.IC_PLAYER_EVENT, {
        canSubmit: true
      });
    },
    //mousedown事件
    _downHandler: function(obj, x, y) {
      var that = this;
      if (that.lockView)
        return;
      that.seqLi.removeClass('ui_btn_active');
      obj.addClass('ui_btn_active');
      that.currDom = obj;

      // fix 统计界面拖拽异常
      this.startY = this.$main.offset().top;
      // this.endY = this.startY + this.$main.innerHeight();
      this.ansBox_startY = this._list_container.offset().top;

      var content = obj.find('._paixu_txt').html();
      var left = obj.offset().left - obj.closest('.com_layout_exam_content').offset().left;
      that._move_container.css({
        // left: x - that.startX - that.currDom.innerWidth() / 2,
        left: ~~left,
        top: y - that.startY - that.currDom.innerHeight() / 2
      }).html('<p class="listtxt"><span class="paixu_txt">' + content + '</span></p>').show();
    },
    _moveHandler: function(x, y) {
      var that = this;
      if (that.lockView)
        return;

      //&& x >= that.startX && x <= that.endX
      if (y >= that.startY && y <= that.endY) { //在可拖动区域
        that._move_container.css({
          // left: x - that.startX - that.currDom.innerWidth() / 2,
          top: y - that.startY - that.currDom.innerHeight() / 2
        });
        //滚动条
        if (that._listUlH > that._listConH) { //有滚动条
          var moveElemHeight = this.currDom.height();
          // console.log('ans_startX:'+that.ansBox_startY + ', ans_endX:'+(that.ansBox_startY + that._listConH));
          if (y >= that.ansBox_startY + that._listConH - moveElemHeight) {
            that._containerScroll('up');
          } else if (y <= that.ansBox_startY + moveElemHeight) {
            that._containerScroll('down');
          }
        }

      } else {
        this._upHandler(x, y);
      }
    },
    _upHandler: function(x, y) {
      var that = this;
      if (that.lockView)
        return;

      //&& x >= that.ansBox_startX && x <= that.ansBox_endX
      if (y >= that.ansBox_startY && y <= that.ansBox_endY) { //在作答区域
        var i = 0,
          j = 0,
          liStartY = 0,
          liEndY = 0;
        for (i = 0; i < that.seqLi.length; i++) {
          liStartY = that.seqLi.eq(i).attr('data-starty');
          liEndY = that.seqLi.eq(i).attr('data-endy');

          if (y >= liStartY && y <= liEndY) { //在某个选项区域
            //判断是否可提交 if(that.currDom && that.currDom.index() != i) { }
            that._exchange(that.currDom, that.seqLi.eq(i));

            for (j = 0; j < that.seqLi.length; j++) {
              that.seqLi.eq(j).attr({
                'data-starty': that.seqLi.eq(j).offset().top - that.middleH + that._list_container.scrollTop(),
                'data-endy': that.seqLi.eq(j).offset().top + that.seqLi.eq(j).outerHeight() + that.middleH + that._list_container.scrollTop()
              });
            }

            break;
          }
        }
      }
      if (that.currDom) {
        that.currDom.removeClass('ui_btn_active');
        that._move_container.hide();
        that.currDom = null;
        this.isMoving = false;
      }

    },
    //mousemove事件 mouseup事件
    _bindOptionItemSortable: function() {

      this.$view.on('touchstart', '.seqLi', function(e) {
        e.preventDefault();
        if (!this.isMoving) { //只允许单指
          this.isMoving = true;
          this._downHandler($(e.currentTarget), e.originalEvent.touches[0].clientX, e.originalEvent.touches[0].clientY);
        }
      }.bind(this)).on('touchmove', function(e) {
        if (!this.isMoving)
          return;
        this._moveHandler(e.originalEvent.touches[0].clientX, e.originalEvent.touches[0].clientY)
      }.bind(this)).on('touchend', function(e) {
        if (!this.isMoving)
          return;
        this._upHandler(e.originalEvent.changedTouches[0].clientX, e.originalEvent.changedTouches[0].clientY + this._list_container.scrollTop());
        this.isMoving = false;
      }.bind(this)).on('mousedown', '.seqLi', function(e) {
        this.isMoving = true;
        this._downHandler($(e.currentTarget), e.pageX, e.pageY);
      }.bind(this)).on('mousemove', function(e) {
        if (!this.isMoving)
          return;
        this._moveHandler(e.pageX, e.pageY);
      }.bind(this)).on('mouseup', function(e) {
        if (!this.isMoving)
          return;
        this._upHandler(e.pageX, e.pageY + this._list_container.scrollTop());
        this.isMoving = false;
      }.bind(this));

    },
    _initNdMediaPlayer: function(mediaType, container) {
      var self = this;
      // 设置NDMediaPlayer参数选项
      var ndMediaPlayerOpt = {
        containerId: 'container',
        autoAdaptSize: true,
        video: {
          render: mediaType === 'video',
          width: container.width(),
          height: container.height(),
          supportFullscreen: false,
          showPlayBtnInVideo: false,
          showFullscreenBtn: false
        },
        audio: {
          render: mediaType === 'audio',
          width: container.width(),
          height: container.height()
        },
        onTimeUpdate: function(o) {
          self.playProgress = o;
          self.$dispatchEvent($PresenterEvent['InteractionStateRecoverFilter'].PRESENTER_STATE_CHANGE, PresenterEventType.IC_PLAYER_EVENT);
        }
      };
      NDMediaPlayer.render(container, ndMediaPlayerOpt);
    },

    _renderingSideTitle: function() {
      var self = this;
      var titleContainer = self.$view.find('.text_titinp');
      //Step1. 题干内容
      var tempDiv = $('<div/>').html(Utils.handleRefPath(self.model.question_url.model.prompt));
      //Step2. 文字
      var $subject = tempDiv.find("p:first");
      if ($subject[0]) {
        titleContainer.append($subject);
        if ($subject.html().trim().length >= 60) {
          titleContainer.addClass('text_s');
        }
      }

      //Step3. 图片/音频/视频
      var sideBox = null;
      var children = tempDiv.children();
      //没有图片，音频，视频时，添加默认图
      if (!children[0]) {
        sideBox = self.$view.find('.insert_pic_box');
        self.$view.find('.insert_pic_bg').css("display", "");
        var imgDefault = $('<img src="' + self.basePath + '/resources/images/default.png" alt=""/>'); //ddd
        self.$view.find('.insert_pic_box').html(imgDefault);
      }

      if (children[0] || false) {
        if (children[0].tagName.toUpperCase() === 'IMG') {
          sideBox = self.$view.find('.insert_pic_box');
          self.$view.find('.insert_pic_bg').css("display", "");
        }
        if (children[0].tagName.toUpperCase() === 'AUDIO') {
          sideBox = self.$view.find('.insert_mt_box .playcolwrap');
          self.$view.find('.insert_mt_box').css("display", "");
        }
        if (children[0].tagName.toUpperCase() === 'VIDEO') {
          sideBox = self.$view.find('.insert_video_box .vidio_wrap');
          self.$view.find('.insert_video_box').css("display", "");
          children[0].controls = false;
          self._initNdMediaPlayer('video', sideBox);
        }

        sideBox.append(tempDiv.children());
        tempDiv = null;
        if (children[0].tagName.toUpperCase() === 'AUDIO') {
          self._initNdMediaPlayer('audio', sideBox);
        }
        if (children[0].tagName.toUpperCase() === 'VIDEO') {
          self._initNdMediaPlayer('video', sideBox);
        }
        // var $childNode = sideBox.children(':first'); if ($childNode[0] || false) {     $childNode.css('max-width',
        // '100%').css('max-height', '100%');     if ($childNode[0].tagName.toUpperCase() != 'IMG') { $childNode.css('width',
        // '100%').css('height', '100%');         $childNode.css('position', 'absolute').css('top', '0').css('left', '0');
        // !$childNode.attr('controls') && $childNode.attr('controls', 'controls');         // !$childNode.attr('preload') &&
        // $childNode.attr('preload', 'auto');         //添加遮罩，禁用多媒体播放         $('<div class="box_cover"
        // style="position:absolute;width:100%;height:100%;top:0px;left:0px;"/>').appendTo(sideBox); self.media = $childNode[0];
        //         if (self.isApp) {             //禁用视频全屏按钮：遮住它             if (self.media.tagName.toUpperCase() === 'VIDEO') {
        //        !self.isPPTShell && $('<div class="_fullscreen_cover"></div>').appendTo(sideBox);             }  }
        // //绑定多媒体事件，解决二次播放问题 setTimeout(function () {             $(self.media).on("timeupdate", function (evt) {   if
        // (self.media.currentTime == self.media.duration) {                     self.media.load();    }  });         }, 500); }
        // }

      }

    },

    _renderingOptionItems: function() {
      var self = this;

      //Step1. 随机排序选项(保证与正确顺序不一样)
      var optionItems = self._shuffleOrderItems(self.model.question_url.model.simpleChoice);

      //Step2. 填充排序选项
      var mainContainer = self.$view.find('.paixulist'),
        optionItem,
        $item,
        contentBytes;
      $.each(optionItems, function(index, item) {
        optionItem = $('<li class="seqLi"><span class="paixulist_num">' + (index + 1) + '</span><p class="listtxt"></p><em></em></li>');
        optionItem.attr('identifier', item.identifier);
        mainContainer.append(optionItem);

        $item = optionItem.find("p");
        $item.html('<span class="paixu_txt _paixu_txt">' + self._getItemContent(item.content) + '</span>');
      });

      //重置选项用
      $.each(self.$view.find('.seqLi'), function(index, item) {
        self.stateAnswer.push($(item).attr('identifier'));
      });

      self._move_container = self.$view.find('._move_container');
      self.$main = self.$view.find('._textsort');
      self._list_container = self.$view.find("._list_container");
      self._listUl = self.$view.find('._listUl');
      self._listConH = self._list_container.innerHeight();
      self._listUlH = self._listUl.innerHeight();
      console.log('_listConH=' + self._listConH + ', _listUlH=' + self._listUlH);

      var offset = self.$main.offset();
      self.startX = offset.left;
      // self.startY = offset.top;
      self.endX = offset.left + self.$main.innerWidth();
      self.endY = offset.top + self.$main.innerHeight();

      self.ansBox_startX = self._list_container.offset().left;
      self.ansBox_endX = self.ansBox_startX + self._list_container.innerWidth();
      self.ansBox_startY = self._list_container.offset().top;
      self.ansBox_endY = self.ansBox_startY + self._list_container[0].scrollHeight + 100;

      this._cacheOptionPosition();
    },
    _cacheOptionPosition: function() {
      var self = this;
      //修改排序操作
      self.seqLi = self.$view.find('.seqLi');
      self.middleH = (self.seqLi.eq(1).offset().top - self.seqLi.eq(0).offset().top - self.seqLi.eq(0).outerHeight()) / 2;
      //self._listUlTop = self.seqLi.eq(0).offset().top;
      console.log('middleH = ' + self.middleH);
      var i = 0,
        j = 0,
        offsetTop = 0,
        liHeight = 0;
      for (i = 0; i < self.seqLi.length; i++) {
        self.seqLi.eq(i).attr({
          'data-starty': self.seqLi.eq(i).offset().top - self.middleH,
          'data-endy': self.seqLi.eq(i).offset().top + self.seqLi.eq(i).outerHeight() + self.middleH
        });
      }

    },
    //随机排序选项
    _shuffleOrderItems: function(optionItems) {
      if ($.isArray(optionItems) && optionItems.length > 0) {
        var size = optionItems.length;
        for (var i = 0; i < size - 1; i++) {
          var rd = Math.max(Math.floor(Math.random() * (size - i)), 1) + i;
          if (rd != i) {
            var temp = optionItems[i];
            optionItems[i] = optionItems[rd];
            optionItems[rd] = temp;
          }
        }
      }
      return optionItems;
    },

    _getItemContent: function(content) {
      if (typeof content === 'string') {
        var beginIndex = content.indexOf('<p>');
        var endIndex = content.lastIndexOf('</p>');

        if (beginIndex >= 0 && endIndex >= 0) {
          return content.substring(beginIndex + 3, endIndex);
        }
      }
      return content;
    },

    _enableMedia: function() {
      var self = this;
      var cover = self.$view.find('.insert_mvp .box_cover');
      cover[0] && cover.hide();
    },

    //根据传入的答题顺序重新排序选项
    _recoverOptions: function(answerObj, answerDOM) {
      var optionItems = answerDOM.children();
      var prevNode = null;
      $.each(answerObj, function(index, item) {
        $.each(optionItems, function(index, optionItem) {
          var $optionItem = $(optionItem);
          if ($optionItem.attr('identifier') == item) {
            if (prevNode == null) {
              $optionItem.insertBefore(answerDOM.children(":first"));
            } else {
              $optionItem.insertAfter(prevNode);
            }
            prevNode = $optionItem;
            return false;
          }
        });
      });
      this._cacheOptionPosition();
    },
    //禁用选项排序功能
    _disableOptionItemSortable: function() {
      var self = this;
      if (self.sortable || false) {
        self.sortable.option("disabled", true);
      }
    },
    //停止多媒体播放
    _stopMedia: function(canReplay) {
      var self = this;
      if (self.media) {
        self.media.currentTime = 0;
        self.media.pause();

        if (!canReplay) {
          var cover = self.$view.find('.insert_mvp .box_cover');
          cover[0] && cover.show();
        }
      }
    },

    _tranlateStaticText: function() {
      var translator = this.$translator;
      this.$view.find('.js_lang_support').each(function() {
        var key = this.getAttribute('data-lang-key');
        this.innerHTML = translator.translate(key);
      });
    }

  }, 'SeqencingRemake');

  window.AddonSeqencingRemake_create = function() {
    return new Presenter();
  }
})();


/***/ })
/******/ ]);]]>

</presenter>


<resources>

<file src='./resources/images/box_ad_bg.jpg' />
<file src='./resources/images/default.png' />
<file src='./resources/images/icno_px_dellist.png' />
<file src='./resources/images/icobg_voice.png' />
<file src='./resources/images/icon_paixu_re_r.png' />
<file src='./resources/images/paixu_voice_pause.png' />
<file src='./resources/images/paixu_voice_play.png' />
<file src='./resources/sky/images/bg_boardleft.jpg' />
<file src='./resources/sky/images/bg_boardright.jpg' />
<file src='./resources/sky/images/bg_mainboard.jpg' />
<file src='./resources/sky/images/bg_sidecon1.png' />
<file src='./resources/sky/images/bg_sidetit1.png' />
<file src='./resources/sky/images/decl_sidecon.png' />
<file src='./resources/sky/images/decm_sidecon.png' />
<file src='./resources/sky/images/decr_sidecon.png' />
<file src='./resources/sky/images/icon_s_sky_right.png' />
<file src='./resources/sky/images/icon_s_sky_wrong.png' />
<file src='./resources/wood/images/icobg_voice.png' />
<file src='./resources/wood/images/icon_paixu_re_r.png' />
<file src='./resources/wood/images/paixulist.png' />
<file src='./resources/wood/images/paixu_voice_pause.png' />
<file src='./resources/wood/images/paixu_voice_play.png' />


</resources>

</addon>