<?xml version='1.0' encoding='UTF-8'?>
<addon id="templateid"><properties/><dependencies><jsDependency><javaScript name="tools_common" version="1.3.0"/><javaScript name="knockout" version="3.3.0"/></jsDependency></dependencies><css><![CDATA[.exam_skin_wood .BalanceRuler_wrapper{width:100%;height:100%;position:relative;background:#bfd3e2}.exam_skin_wood .BalanceRuler_wrapper .BalanceRuler_main{position:absolute;left:0;right:0;height:36em;top:50%;margin-top:-19.5em}.exam_skin_wood .BalanceRuler_wrapper .explorer_pattern .BalanceRuler_cycle_table,.exam_skin_wood .BalanceRuler_wrapper .explorer_pattern .table_btn{display:none!important}.exam_skin_wood .BalanceRuler_wrapper .explorer_pattern .lab_left_balance_nuts,.exam_skin_wood .BalanceRuler_wrapper .explorer_pattern .lab_right_balance_nuts{cursor:default}.exam_skin_wood .BalanceRuler_wrapper .experiment_pattern .lab_range_of_activities{margin-left:-36.875em}.exam_skin_wood .BalanceRuler_wrapper .BalanceRuler_bottom{position:absolute;bottom:0;left:0;background:#cfdee9}.exam_skin_wood .BalanceRuler_wrapper .spolr_show_cycle .BalanceRuler_cycle_table{display:-webkit-box;display:-ms-flexbox;display:flex}.exam_skin_wood .BalanceRuler_wrapper .spolr_show_cycle .BalanceRuler_tool_box,.exam_skin_wood .BalanceRuler_wrapper .spolr_show_cycle .BalanceRuler_tool_btn_box{top:0}.exam_skin_wood .BalanceRuler_wrapper .spolr_show_cycle .BalanceRuler_tool_btn_box .btns-primary{top:9.5em}.exam_skin_wood .BalanceRuler_wrapper .spolr_show_cycle .BalanceRuler_tool_btn_box .spolr_line{top:-9.5em}.exam_skin_wood .BalanceRuler_wrapper .BalanceRuler_pop{min-width:33.75em;min-height:20.16667em;z-index:1009}.exam_skin_wood .BalanceRuler_wrapper .BalanceRuler_pop_mask{position:absolute;left:0;top:0;right:0;bottom:0;background:rgba(0,0,0,.4);z-index:1001}.exam_skin_wood .BalanceRuler_wrapper .BalanceRuler_pop_main{padding:2.5em .41667em}.exam_skin_wood .BalanceRuler_wrapper .BalanceRuler_pop_txt{font-size:1.66667em;line-height:1.66667em}.exam_skin_wood .BalanceRuler_wrapper .BalanceRuler_pop_btn{margin:.41667em}.exam_skin_wood .BalanceRuler_wrapper .BalanceRuler_pop_btn a{min-width:8.33333em;margin:1.25em}.exam_skin_wood .BalanceRuler_wrapper .BalanceRuler_cycle_table{display:none;position:absolute;z-index:22;right:5.16667em;bottom:4.25em;width:21.08333em;height:11.25em;background:#b2c8dd;border:.16667em solid #6c8395;border-radius:.5em;overflow:hidden}.exam_skin_wood .BalanceRuler_wrapper .BalanceRuler_cycle_table .spolr_cycle_list{float:left;width:20%;border-right:.08333em solid #6c8395;text-align:center}.exam_skin_wood .BalanceRuler_wrapper .BalanceRuler_cycle_table .spolr_cycle_list:last-child{border-right:none}.exam_skin_wood .BalanceRuler_wrapper .BalanceRuler_cycle_main{-webkit-box-flex:1;-ms-flex:1;flex:1;position:relative}.exam_skin_wood .BalanceRuler_wrapper .BalanceRuler_cycle_hd{position:absolute;left:0;top:0;right:0;z-index:9}.exam_skin_wood .BalanceRuler_wrapper .BalanceRuler_cycle_hd .spolr_cycle_list{height:2.91667em;border-bottom:.08333em solid #6c8395;background:#f1ce97}.exam_skin_wood .BalanceRuler_wrapper .BalanceRuler_cycle_hd .spolr_cycle_list:after{content:"";display:inline-block;width:0;height:100%;vertical-align:middle}.exam_skin_wood .BalanceRuler_wrapper .BalanceRuler_cycle_hd .spolr_cycle_list .uibox_txt{font-size:1.16667em;color:#1b1b1b;max-width:95%;display:inline-block;vertical-align:middle;line-height:1.2}.exam_skin_wood .BalanceRuler_wrapper .BalanceRuler_cycle_bd{position:relative;padding-top:2.91667em;overflow:hidden;position:absolute;top:0;left:0;right:0;bottom:0}.exam_skin_wood .BalanceRuler_wrapper .BalanceRuler_cycle_ul .spolr_cycle_li{border-bottom:.08333em solid #6c8395;background:#eee;overflow:hidden}.exam_skin_wood .BalanceRuler_wrapper .BalanceRuler_cycle_ul .last_li{border:0}.exam_skin_wood .BalanceRuler_wrapper .BalanceRuler_cycle_ul .spolr_cycle_list{height:2.66667em;line-height:2.66667em}.exam_skin_wood .BalanceRuler_wrapper .BalanceRuler_cycle_ul .spolr_cycle_list .uibox_txt{font-size:1.16667em;color:#1b1b1b}.exam_skin_wood .BalanceRuler_wrapper .unit_escription_text{text-align:left;position:absolute;left:4.83333em;bottom:.20833em;display:inline-block;min-width:13.75em;height:3.75em}.exam_skin_wood .BalanceRuler_wrapper .unit_escription_text p{font-size:1.16667em;line-height:1.5em}.exam_skin_wood .BalanceRuler_wrapper .lab_range_of_activities{width:53.08333em;height:35.83333em;position:absolute;top:0;left:50%;margin-left:-26.54167em;-webkit-transform:rotate(0);transform:rotate(0);-webkit-transform-origin:50%;transform-origin:50%}.exam_skin_wood .BalanceRuler_wrapper .lab_base{display:inline-block;width:13.125em;height:30.79167em;position:absolute;left:50%;margin-left:-6.5em;top:4.83333em;background:url(resources/wood/images/base.png);background-size:auto 100%;z-index:-1000}.exam_skin_wood .BalanceRuler_wrapper .lab_lever_highlight{position:absolute;top:8.41667em;left:3.79167em;display:inline-block;width:47em;height:4.83333em;margin-top:-.79167em;margin-left:-.79167em;background:url(resources/wood/images/leverhighlight.png) no-repeat;background-size:100% 100%}.exam_skin_wood .BalanceRuler_wrapper .lab_lever_wrap{width:45.5em;left:3.79167em;background:url(resources/wood/images/lever.png) no-repeat;background-size:100% auto}.exam_skin_wood .BalanceRuler_wrapper .lab_lever,.exam_skin_wood .BalanceRuler_wrapper .lab_lever_wrap{height:3.20833em;position:absolute;top:8.41667em;-webkit-transform:rotate(0);transform:rotate(0);-webkit-transform-origin:50%;transform-origin:50%}.exam_skin_wood .BalanceRuler_wrapper .lab_lever{width:40em;left:6.54167em}.exam_skin_wood .BalanceRuler_wrapper .lab_left_balance_nuts{display:inline-block;width:4.16667em;height:4.16667em;position:absolute;left:-4.16667em;top:-.5em;cursor:pointer}.exam_skin_wood .BalanceRuler_wrapper .lab_left_nuts_highlight,.exam_skin_wood .BalanceRuler_wrapper .lab_left_nuts_scroll{display:inline-block;width:.70833em;height:1.70833em;position:absolute;left:50%;top:33%}.exam_skin_wood .BalanceRuler_wrapper .lab_left_nuts_scroll,.exam_skin_wood .BalanceRuler_wrapper .lab_right_nuts_scroll{background:url(resources/wood/images/nuts_scroll.png) no-repeat;background-size:100% auto;background-position:center -5.125em}.exam_skin_wood .BalanceRuler_wrapper .lab_left_nuts_highlight,.exam_skin_wood .BalanceRuler_wrapper .lab_right_nuts_highlight{background:url(resources/wood/images/nuts_highlight.png) no-repeat;background-size:100% 100%}.exam_skin_wood .BalanceRuler_wrapper .lab_left_nuts_highlight.active,.exam_skin_wood .BalanceRuler_wrapper .lab_right_nuts_highlight.active{box-shadow:0 0 .83333em #2ee6ed}.exam_skin_wood .BalanceRuler_wrapper .lab_right_balance_nuts{display:inline-block;width:4.16667em;height:4.16667em;position:absolute;right:-4.16667em;top:-.5em;cursor:pointer}.exam_skin_wood .BalanceRuler_wrapper .lab_right_nuts_highlight,.exam_skin_wood .BalanceRuler_wrapper .lab_right_nuts_scroll{display:inline-block;width:.70833em;height:1.70833em;position:absolute;left:35%;top:33%}.exam_skin_wood .BalanceRuler_wrapper .lab_center_point{display:inline-block;width:0;height:100%;border:1px solid #000}.exam_skin_wood .BalanceRuler_wrapper .lab_left_slider{left:18.04167em}.exam_skin_wood .BalanceRuler_wrapper .lab_left_slider,.exam_skin_wood .BalanceRuler_wrapper .lab_right_slider{height:.33333em;width:.33333em;border:1px solid #565a62;border-radius:.16667em;background:#bfd3e2;position:absolute;top:1.91667em;background-size:auto 100%;cursor:pointer;z-index:1100;display:none}.exam_skin_wood .BalanceRuler_wrapper .lab_right_slider{left:21.45833em}.exam_skin_wood .BalanceRuler_wrapper .lab_left_slider_btn_wrap{left:4.16667em}.exam_skin_wood .BalanceRuler_wrapper .lab_left_slider_btn_wrap,.exam_skin_wood .BalanceRuler_wrapper .lab_right_slider_btn_wrap{width:8.91667em;height:2.08333em;border:1px solid #397274;border-radius:.41667em;position:absolute;top:-2.91667em;background:#fff}.exam_skin_wood .BalanceRuler_wrapper .lab_right_slider_btn_wrap{right:4.16667em}.exam_skin_wood .BalanceRuler_wrapper .slider_left_btn{display:inline-block;width:3.08333em;height:100%;border-top-left-radius:.41667em;border-bottom-left-radius:.41667em;position:absolute;left:0;cursor:pointer}.exam_skin_wood .BalanceRuler_wrapper .slider_left_btn:before{content:"";display:inline-block;height:0;width:0;border:.66667em solid transparent;border-right-color:#66727b;margin-left:-.83333em;margin-top:.25em}.exam_skin_wood .BalanceRuler_wrapper .slider_left_btn.ui_btn_active,.exam_skin_wood .BalanceRuler_wrapper .slider_left_btn:active{background:-webkit-linear-gradient(bottom,#76b8ba,#89c5c7);background:linear-gradient(0deg,#76b8ba 0,#89c5c7)}.exam_skin_wood .BalanceRuler_wrapper .slider_left_btn.ui_btn_active:before,.exam_skin_wood .BalanceRuler_wrapper .slider_left_btn:active:before{border-right-color:#fff}.exam_skin_wood .BalanceRuler_wrapper .slider_left_btn.click_disabled{background:#c3cbd0;cursor:default}.exam_skin_wood .BalanceRuler_wrapper .slider_left_btn.click_disabled:before{border-right-color:#97a0a6}.exam_skin_wood .BalanceRuler_wrapper .slider_right_btn{display:inline-block;width:3.08333em;height:100%;border-top-right-radius:.41667em;border-bottom-right-radius:.41667em;position:absolute;right:0;cursor:pointer}.exam_skin_wood .BalanceRuler_wrapper .slider_right_btn:before{content:"";display:inline-block;height:0;width:0;border:.66667em solid transparent;border-left-color:#66727b;margin-left:.41667em;margin-top:.25em}.exam_skin_wood .BalanceRuler_wrapper .slider_right_btn.ui_btn_active,.exam_skin_wood .BalanceRuler_wrapper .slider_right_btn:active{background:-webkit-linear-gradient(bottom,#76b8ba,#89c5c7);background:linear-gradient(0deg,#76b8ba 0,#89c5c7)}.exam_skin_wood .BalanceRuler_wrapper .slider_right_btn.ui_btn_active:before,.exam_skin_wood .BalanceRuler_wrapper .slider_right_btn:active:before{border-left-color:#fff}.exam_skin_wood .BalanceRuler_wrapper .slider_right_btn.click_disabled{background:#c3cbd0;cursor:default}.exam_skin_wood .BalanceRuler_wrapper .slider_right_btn.click_disabled:before{border-right-color:#97a0a6}.exam_skin_wood .BalanceRuler_wrapper .slider_num_wrap{position:relative;display:inline-block;width:2.66667em;height:100%;border-left:1px solid #397274;border-right:1px solid #397274;background:-webkit-linear-gradient(top,#d8ecf2,#f1f2f2);background:linear-gradient(180deg,#d8ecf2 0,#f1f2f2);vertical-align:middle}.exam_skin_wood .BalanceRuler_wrapper .slider_num{margin-top:.16667em;display:inline-block;vertical-align:middle;font-size:1.5em;-webkit-transform:rotate(0);transform:rotate(0);color:#5eb1b2}.exam_skin_wood .BalanceRuler_wrapper .lab_left_weight_wrap{min-height:1.875em;width:2.83333em;position:absolute;top:10.5em;left:23.33333em;z-index:1;-webkit-transform-origin:top;transform-origin:top;-webkit-transform:rotate(0);transform:rotate(0)}.exam_skin_wood .BalanceRuler_wrapper .lab_left_weight_wrap:before{content:"";height:.20833em;width:.20833em;border:1px solid #565a62;border-radius:.16667em;background:#bfd3e2;position:absolute;background-size:auto 100%;z-index:-1;left:50%;margin-left:-.125em;margin-top:-.16667em}.exam_skin_wood .BalanceRuler_wrapper .spring_wrap{display:inline-block;width:2.83333em;height:9.16667em}.exam_skin_wood .BalanceRuler_wrapper .spring_top{display:inline-block;width:2.83333em;height:8.16667em;background:url(resources/wood/images/spring_top.png) no-repeat;background-size:100% 100%;position:absolute;top:0;left:0;z-index:1000}.exam_skin_wood .BalanceRuler_wrapper .spring_bottom{display:inline-block;width:2.83333em;height:8.16667em;background:url(resources/wood/images/spring_bottom.png) no-repeat;background-size:100% 100%;position:absolute;top:2.29167em;left:0;margin-left:-.08333em;z-index:900}.exam_skin_wood .BalanceRuler_wrapper .spring_strenth_arrow{display:inline-block;width:.16667em;height:4em;position:absolute;top:100%;left:50%;background:#2383cc}.exam_skin_wood .BalanceRuler_wrapper .spring_strenth_arrow:after{content:"";display:inline-block;width:1.54167em;height:1.125em;position:absolute;top:100%;left:50%;margin-left:-.75em;margin-top:-.41667em;background:url(resources/wood/images/arrow.png) no-repeat;background-size:100% 100%}.exam_skin_wood .BalanceRuler_wrapper .left_spring_drag_btn{display:inline-block;width:4.16667em;height:4.16667em;background:url(resources/wood/images/drag_btn.png) no-repeat;background-size:100% 100%;position:absolute;left:.25em;cursor:pointer;z-index:1}.exam_skin_wood .BalanceRuler_wrapper .left_spring_drag_btn .sBottom,.exam_skin_wood .BalanceRuler_wrapper .left_spring_drag_btn .sLeft,.exam_skin_wood .BalanceRuler_wrapper .left_spring_drag_btn .sRight,.exam_skin_wood .BalanceRuler_wrapper .left_spring_drag_btn .sTop{display:inline-block;width:0;height:0;border:.66667em solid transparent;position:absolute;left:50%;top:50%}.exam_skin_wood .BalanceRuler_wrapper .left_spring_drag_btn .sTop{border-bottom-color:#66727b;margin-left:-.66667em;margin-top:-2.29167em}.exam_skin_wood .BalanceRuler_wrapper .left_spring_drag_btn .sTop.ui_btn_active{border-bottom-color:#3b3f42}.exam_skin_wood .BalanceRuler_wrapper .left_spring_drag_btn .sRight{border-left-color:#66727b;margin-left:1.04167em;margin-top:-.625em}.exam_skin_wood .BalanceRuler_wrapper .left_spring_drag_btn .sRight.ui_btn_active{border-left-color:#3b3f42}.exam_skin_wood .BalanceRuler_wrapper .left_spring_drag_btn .sBottom{border-top-color:#66727b;margin-left:-.66667em;margin-top:1.04167em}.exam_skin_wood .BalanceRuler_wrapper .left_spring_drag_btn .sBottom.ui_btn_active{border-top-color:#3b3f42}.exam_skin_wood .BalanceRuler_wrapper .left_spring_drag_btn .sLeft{border-right-color:#66727b;margin-left:-2.29167em;margin-top:-.625em}.exam_skin_wood .BalanceRuler_wrapper .left_spring_drag_btn .sLeft.ui_btn_active{border-right-color:#3b3f42}.exam_skin_wood .BalanceRuler_wrapper .left_magnifier{display:inline-block;width:13.33333em;height:13.33333em;border:.33333em solid #fff;position:absolute;left:-11.66667em;z-index:9999;box-shadow:.16667em .16667em .33333em #97a0a6,-.16667em -.16667em .33333em #97a0a6,inset .16667em .16667em .33333em #97a0a6,inset -.16667em -.16667em .33333em #97a0a6;border-radius:6.66667em;background:#fff;z-index:1000;overflow:hidden}.exam_skin_wood .BalanceRuler_wrapper .big_spring_top{display:inline-block;width:14.58333em;height:6.83333em;position:absolute;top:-2.5em;left:50%;margin-left:-7.29167em;background:url(resources/wood/images/big_spring_top.png) no-repeat;background-size:100% 100%;z-index:-11}.exam_skin_wood .BalanceRuler_wrapper .big_spring_bottom{display:inline-block;width:14.58333em;height:41.33333em;position:absolute;top:-24.5em;left:50%;margin-left:-7.29167em;background:url(resources/wood/images/big_spring_bottom.png) no-repeat;background-size:100% 100%;z-index:-100}.exam_skin_wood .BalanceRuler_wrapper .lab_weight_item{height:2.16667em;width:2.83333em;background:url(resources/wood/images/weight.png) no-repeat;background-size:100% 100%;margin-top:-.08333em;position:relative;z-index:0}.exam_skin_wood .BalanceRuler_wrapper .lab_weight_item.item1{height:3.75em;width:2.83333em;z-index:1000;margin-top:0;background:url(resources/wood/images/weight1.png) no-repeat;background-size:100% 100%}.exam_skin_wood .BalanceRuler_wrapper .lab_weight_item.item2{z-index:999}.exam_skin_wood .BalanceRuler_wrapper .lab_weight_item.item3{z-index:998}.exam_skin_wood .BalanceRuler_wrapper .lab_weight_item.item4{z-index:997}.exam_skin_wood .BalanceRuler_wrapper .lab_weight_item.item5{z-index:996}.exam_skin_wood .BalanceRuler_wrapper .lab_right_weight_wrap{min-height:1.875em;width:2.83333em;position:absolute;top:10.5em;left:26.75em;z-index:0;-webkit-transform-origin:top;transform-origin:top;-webkit-transform:rotate(0);transform:rotate(0);z-index:1000}.exam_skin_wood .BalanceRuler_wrapper .lab_right_weight_wrap:before{content:"";height:.20833em;width:.20833em;border:1px solid #565a62;border-radius:.16667em;background:#bfd3e2;position:absolute;background-size:auto 100%;z-index:-1;left:50%;margin-left:-.16667em;margin-top:-.16667em}.exam_skin_wood .BalanceRuler_wrapper .left_add_and_delete_wrap,.exam_skin_wood .BalanceRuler_wrapper .right_add_and_delete_wrap{border:1px solid #397274;border-radius:.41667em;width:2.08333em;height:6.33333em;background:#fff}.exam_skin_wood .BalanceRuler_wrapper .left_add_and_delete_wrap{position:absolute;left:-2.70833em;top:2.08333em}.exam_skin_wood .BalanceRuler_wrapper .right_add_and_delete_wrap{position:absolute;left:3.33333em;top:2.08333em}.exam_skin_wood .BalanceRuler_wrapper .delete_btn{display:inline-block;width:100%;height:3.16667em;cursor:pointer;position:absolute;border-bottom:1px solid #42787a;top:0;left:0;border-top-left-radius:.41667em;border-top-right-radius:.41667em}.exam_skin_wood .BalanceRuler_wrapper .delete_btn:before{content:"";display:inline-block;width:1.08333em;height:.16667em;position:absolute;top:50%;left:50%;margin-left:-.54167em;background:#626f79}.exam_skin_wood .BalanceRuler_wrapper .delete_btn.ui_btn_active,.exam_skin_wood .BalanceRuler_wrapper .delete_btn:active{background:-webkit-linear-gradient(bottom,#76b8ba,#89c5c7);background:linear-gradient(0deg,#76b8ba 0,#89c5c7)}.exam_skin_wood .BalanceRuler_wrapper .delete_btn.ui_btn_active:before,.exam_skin_wood .BalanceRuler_wrapper .delete_btn:active:before{background:#fff}.exam_skin_wood .BalanceRuler_wrapper .delete_btn.click_disabled{background:#c3cbd0;cursor:default}.exam_skin_wood .BalanceRuler_wrapper .delete_btn.click_disabled:before{background:#97a0a6}.exam_skin_wood .BalanceRuler_wrapper .add_btn{display:inline-block;width:100%;height:50%;cursor:pointer;position:absolute;top:50%;left:0;border-bottom-left-radius:.41667em;border-bottom-right-radius:.41667em}.exam_skin_wood .BalanceRuler_wrapper .add_btn:before{content:"";display:inline-block;width:1.08333em;height:.16667em;position:absolute;top:50%;left:50%;margin-left:-.54167em;background:#626f79}.exam_skin_wood .BalanceRuler_wrapper .add_btn:after{content:"";display:inline-block;width:.16667em;height:1.08333em;position:absolute;top:35%;left:72%;margin-left:-.54167em;background:#626f79}.exam_skin_wood .BalanceRuler_wrapper .add_btn.ui_btn_active,.exam_skin_wood .BalanceRuler_wrapper .add_btn:active{background:-webkit-linear-gradient(bottom,#76b8ba,#89c5c7);background:linear-gradient(0deg,#76b8ba 0,#89c5c7)}.exam_skin_wood .BalanceRuler_wrapper .add_btn.ui_btn_active:after,.exam_skin_wood .BalanceRuler_wrapper .add_btn.ui_btn_active:before,.exam_skin_wood .BalanceRuler_wrapper .add_btn:active:after,.exam_skin_wood .BalanceRuler_wrapper .add_btn:active:before{background:#fff}.exam_skin_wood .BalanceRuler_wrapper .add_btn.click_disabled{background:#c3cbd0;cursor:default}.exam_skin_wood .BalanceRuler_wrapper .add_btn.click_disabled:after,.exam_skin_wood .BalanceRuler_wrapper .add_btn.click_disabled:before{background:#97a0a6}.exam_skin_wood .BalanceRuler_wrapper .explore_btn{position:absolute;top:1.08333em;right:5.25em;min-width:8.66667em!important}.exam_skin_wood .BalanceRuler_wrapper .experiment_btn{position:absolute;top:4.58333em;right:5.25em;min-width:8.66667em!important}.exam_skin_wood .BalanceRuler_wrapper .table_btn{display:inline-block;position:absolute;bottom:.41667em;right:5em}.exam_skin_wood .BalanceRuler_wrapper .deleteData_btn,.exam_skin_wood .BalanceRuler_wrapper .pushData_btn{min-width:8.66667em!important}.exam_skin_wood .BalanceRuler_wrapper .BalanceRuler_bottom{width:100%;padding:0 4.16667em;height:5.70833em!important;vertical-align:middle}.exam_skin_wood .BalanceRuler_wrapper .BalanceRuler_bottom .auto_balance_txt{display:inline-block;vertical-align:middle;font-size:1.5em;margin-right:.625em}.exam_skin_wood .BalanceRuler_wrapper .BalanceRuler_bottom .experiment_pattern .autoBalance_btn,.exam_skin_wood .BalanceRuler_wrapper .BalanceRuler_bottom .experiment_pattern .auto_balance_txt{display:none!important}.exam_skin_wood .BalanceRuler_wrapper .BalanceRuler_bottom .autoBalance_btn{display:inline-block;vertical-align:middle;margin-right:.625em;-webkit-tap-highlight-color:rgba(255,255,255,0)}.exam_skin_wood .BalanceRuler_wrapper .BalanceRuler_bottom .formula_btn,.exam_skin_wood .BalanceRuler_wrapper .BalanceRuler_bottom .springSwitch_btn,.exam_skin_wood .BalanceRuler_wrapper .BalanceRuler_bottom .weightSwitch_btn{min-width:10.33333em}.exam_skin_wood .BalanceRuler_wrapper .BalanceRuler_bottom .formula_btn.hidden{display:none}.exam_skin_wood .BalanceRuler_wrapper .BalanceRuler_bottom .spolar_com_btns{position:relative;display:inline-block;vertical-align:middle;padding:1.29167em 0 1.25em}.exam_skin_wood .BalanceRuler_wrapper .BalanceRuler_bottom .spolar_com_btns .spolr_play_count{display:none;white-space:nowrap;cursor:pointer}.exam_skin_wood .BalanceRuler_wrapper .BalanceRuler_bottom .spolar_com_btns .spolr_reset_btn{cursor:pointer}@media screen and (max-width:1000px){.exam_skin_wood .BalanceRuler_wrapper .BalanceRuler_cycle_hd .spolr_cycle_list,.exam_skin_wood .BalanceRuler_wrapper .BalanceRuler_cycle_ul .spolr_cycle_li{border-bottom-width:1px}.exam_skin_wood .BalanceRuler_wrapper .BalanceRuler_cycle_main.spolr_show_scrollbar .spolr_cycle_list:last-child,.exam_skin_wood .BalanceRuler_wrapper .BalanceRuler_cycle_table .spolr_cycle_list,.exam_skin_wood .BalanceRuler_wrapper .BalanceRuler_cycle_title{border-right-width:1px}}.typefaces_long .exam_skin_wood .BalanceRuler_wrapper .com_btns{padding:.2em .41667em .3em;width:11.45833em;line-height:1.25em;z-index:1002}.typefaces_long .exam_skin_wood .BalanceRuler_wrapper .com_btns:after{content:"";display:inline-block;width:0;height:100%;vertical-align:middle}.typefaces_long .exam_skin_wood .BalanceRuler_wrapper .com_btns .btns-primary-txt{display:inline-block;overflow:hidden;width:97%;max-height:100%;font-size:1.25em;vertical-align:middle}.typefaces_long .exam_skin_wood .BalanceRuler_wrapper .table_btn .com_btns{position:relative}.typefaces_long .exam_skin_wood .BalanceRuler_wrapper .lab_range_of_activities{z-index:1000}.typefaces_long .exam_skin_wood .BalanceRuler_wrapper .BalanceRuler_cycle_table{width:31.25em;height:11.25em}.typefaces_long .exam_skin_wood .BalanceRuler_wrapper .BalanceRuler_cycle_table .spolr_cycle_list{display:-webkit-box;display:-ms-flexbox;display:flex;line-height:1.16667em;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.typefaces_long .exam_skin_wood .BalanceRuler_wrapper .BalanceRuler_cycle_table .spolr_cycle_list:after{display:none}.typefaces_long .exam_skin_wood .BalanceRuler_wrapper .BalanceRuler_cycle_table .spolr_cycle_list .uibox_txt{overflow:hidden;max-width:100%;font-size:.83333em;display:-webkit-box;-webkit-line-clamp:2;-webkit-box-orient:vertical;-webkit-box-flex:1;-ms-flex:1;flex:1}.typefaces_long .exam_skin_wood .BalanceRuler_wrapper .unit_escription_text{max-width:17.91667em;height:auto;line-height:1.16667em}.typefaces_long .exam_skin_wood .BalanceRuler_wrapper .unit_escription_text ._escription_weight_text{margin-top:.83333em;font-size:1.16667em}.typefaces_long .exam_skin_wood .BalanceRuler_wrapper .BalanceRuler_bottom .com_applicationset_switch{margin-bottom:0}.typefaces_long .exam_skin_wood .BalanceRuler_wrapper .BalanceRuler_bottom .auto_balance_txt{overflow:hidden;margin-top:-.3em;width:10em;max-height:2em;line-height:1;font-size:1.25em}.typefaces_ru_RU .exam_skin_wood .BalanceRuler_wrapper .com_btns{padding:.2em .41667em .3em;width:11.45833em;line-height:1.25em;z-index:1002}.typefaces_ru_RU .exam_skin_wood .BalanceRuler_wrapper .com_btns:after{content:"";display:inline-block;width:0;height:100%;vertical-align:middle}.typefaces_ru_RU .exam_skin_wood .BalanceRuler_wrapper .com_btns .btns-primary-txt{display:inline-block;overflow:hidden;width:97%;max-height:100%;font-size:1.25em;vertical-align:middle}.typefaces_ru_RU .exam_skin_wood .BalanceRuler_wrapper .table_btn .com_btns{position:relative}.typefaces_ru_RU .exam_skin_wood .BalanceRuler_wrapper .lab_range_of_activities{z-index:1000}.typefaces_ru_RU .exam_skin_wood .BalanceRuler_wrapper .BalanceRuler_cycle_table{width:31.25em;height:11.25em}.typefaces_ru_RU .exam_skin_wood .BalanceRuler_wrapper .BalanceRuler_cycle_table .spolr_cycle_list{display:-webkit-box;display:-ms-flexbox;display:flex;line-height:1.16667em;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.typefaces_ru_RU .exam_skin_wood .BalanceRuler_wrapper .BalanceRuler_cycle_table .spolr_cycle_list.break_all{word-wrap:break-word;word-break:break-all}.typefaces_ru_RU .exam_skin_wood .BalanceRuler_wrapper .BalanceRuler_cycle_table .spolr_cycle_list:after{display:none}.typefaces_ru_RU .exam_skin_wood .BalanceRuler_wrapper .BalanceRuler_cycle_table .spolr_cycle_list .uibox_txt{overflow:hidden;max-width:100%;font-size:.83333em;display:-webkit-box;-webkit-line-clamp:2;-webkit-box-orient:vertical;-webkit-box-flex:1;-ms-flex:1;flex:1}.typefaces_ru_RU .exam_skin_wood .BalanceRuler_wrapper .unit_escription_text{max-width:17.91667em;height:auto;line-height:1.16667em}.typefaces_ru_RU .exam_skin_wood .BalanceRuler_wrapper .unit_escription_text ._escription_weight_text{margin-top:.83333em;font-size:1.16667em}.typefaces_ru_RU .exam_skin_wood .BalanceRuler_wrapper .BalanceRuler_bottom .com_applicationset_switch{margin-bottom:0}.typefaces_ru_RU .exam_skin_wood .BalanceRuler_wrapper .BalanceRuler_bottom .auto_balance_txt{overflow:hidden;margin-top:-.3em;width:10em;max-height:2em;line-height:1;font-size:1.25em}]]></css><view><![CDATA[<div class="exam_skin_wood" id="layout"><div class="BalanceRuler_wrapper @@studentClassName"><div class="BalanceRuler_main js_BalanceRuler_main explorer_pattern"><div class="unit_escription_text"><p class="escription_spring_text js_escription1_i18n">弹簧测力计上限:25N</p><p class="_escription_weight_text js_escription2_i18n">砝码单位: 0.1N</p></div><div class="spolr_show_cycle"><div class="BalanceRuler_cycle_table"><div class="BalanceRuler_cycle_main"><ul class="BalanceRuler_cycle_hd"><li class="spolr_cycle_list"><span class="uibox_txt js_times_i18n">次数</span></li><li class="spolr_cycle_list"><span class="uibox_txt js_powerF1_i18n">动力<br>F1</span></li><li class="spolr_cycle_list"><span class="uibox_txt js_poweredArmL1_i18n">动力臂L1</span></li><li class="spolr_cycle_list"><span class="uibox_txt js_powerF2_i18n">阻力<br>F2</span></li><li class="spolr_cycle_list break_all"><span class="uibox_txt js_poweredArmL2_i18n">阻力臂L2</span></li></ul><div class="BalanceRuler_cycle_bd spolr_light_scrollbar js_table"><ul class="BalanceRuler_cycle_ul"><li class="spolr_cycle_li"><div class="spolr_cycle_list"><span class="uibox_txt">1</span></div><div class="spolr_cycle_list"><span class="uibox_txt"></span></div><div class="spolr_cycle_list"><span class="uibox_txt"></span></div><div class="spolr_cycle_list"><span class="uibox_txt"></span></div><div class="spolr_cycle_list"><span class="uibox_txt"></span></div></li></ul><ul class="BalanceRuler_cycle_ul"><li class="spolr_cycle_li"><div class="spolr_cycle_list"><span class="uibox_txt">2</span></div><div class="spolr_cycle_list"><span class="uibox_txt"></span></div><div class="spolr_cycle_list"><span class="uibox_txt"></span></div><div class="spolr_cycle_list"><span class="uibox_txt"></span></div><div class="spolr_cycle_list"><span class="uibox_txt"></span></div></li></ul><ul class="BalanceRuler_cycle_ul"><li class="spolr_cycle_li last_li"><div class="spolr_cycle_list"><span class="uibox_txt">3</span></div><div class="spolr_cycle_list"><span class="uibox_txt"></span></div><div class="spolr_cycle_list"><span class="uibox_txt"></span></div><div class="spolr_cycle_list"><span class="uibox_txt"></span></div><div class="spolr_cycle_list"><span class="uibox_txt"></span></div></li></ul></div></div></div></div><div class="lab_range_of_activities js_range_of_activities"><span class="lab_lever_highlight js_lever_highlight hide_dom"></span> <span class="lab_lever_wrap js_lever_wrap"></span><div class="lab_lever js_lever"><div class="lab_left_balance_nuts js_left_balance_nuts"><span class="lab_left_nuts_scroll js_left_nuts_scroll"></span> <span class="lab_left_nuts_highlight js_left_nuts_highlight"></span></div><div class="lab_left_slider_btn_wrap"><span class="slider_left_btn js_left_slider_toleft"></span><span class="slider_num_wrap"><span class="slider_num js_leftScaleTxt">14</span></span><span class="slider_right_btn js_left_slider_toright"></span></div><span class="lab_left_slider js_left_slider"></span> <span class="lab_right_slider js_right_slider"></span><div class="lab_right_slider_btn_wrap"><span class="slider_left_btn js_right_slider_toleft"></span><span class="slider_num_wrap"><span class="slider_num js_rightScaleTxt">14</span></span><span class="slider_right_btn js_right_slider_toright"></span></div><div class="lab_right_balance_nuts js_right_balance_nuts"><span class="lab_right_nuts_scroll js_right_nuts_scroll"></span> <span class="lab_right_nuts_highlight js_right_nuts_highlight"></span></div></div><div class="lab_left_weight_wrap js_left_weight_wrap"><div class="left_add_and_delete_wrap"><span class="add_btn js_addStrength_btn js_left"></span><span class="delete_btn js_deleteStrength_btn js_left"></span></div><div class="js_left_weightItem_wrap"></div><div class="spring_wrap js_left_spring_wrap"><div class="spring_top"></div><div class="spring_bottom js_left_spring_bottom"><div class="spring_strenth_arrow js_spring_left_arrow"><div class="left_spring_drag_btn js_left_drag_btn"><span class="sTop js_left_sTop"></span> <span class="sRight js_left_sRight"></span> <span class="sBottom js_left_sBottom"></span> <span class="sLeft js_left_sLeft"></span></div></div></div><div class="left_magnifier js_left_magnifier hide_dom"><span class="big_spring_top"></span> <span class="big_spring_bottom js_big_leftspring_bottom"></span></div></div></div><div class="lab_right_weight_wrap js_right_weight_wrap"><div class="js_right_weightItem_wrap"></div><div class="spring_wrap js_right_spring_wrap"><div class="spring_top"></div><div class="spring_bottom js_right_spring_bottom"><div class="spring_strenth_arrow js_spring_right_arrow"><div class="left_spring_drag_btn js_right_drag_btn"><span class="sTop ui_btn_active js_right_sTop"></span> <span class="sRight js_right_sRight"></span> <span class="sBottom js_right_sBottom"></span> <span class="sLeft js_right_sLeft"></span></div></div></div><div class="left_magnifier js_right_magnifier hide_dom"><span class="big_spring_top"></span> <span class="big_spring_bottom js_big_rightspring_bottom"></span></div></div><div class="right_add_and_delete_wrap"><span class="add_btn js_addStrength_btn js_right"></span><span class="delete_btn js_deleteStrength_btn js_right"></span></div></div><div class="lab_base"></div></div><a class="com_btns btns-primary explore_btn js_explore_btn" href="javascript:;"><span class="btns-primary-txt js_explore_i18n">探索规律</span> </a><a class="com_btns btns-primary experiment_btn js_experiment_btn" href="javascript:;"><span class="btns-primary-txt js_experiment_i18n">测量实验</span></a><div class="table_btn"><a class="com_btns btns-primary pushData_btn js_pushData_btn" href="javascript:;"><span class="btns-primary-txt js_recorde_data_i18n">记录数据</span> </a><a class="com_btns btns-primary deleteData_btn js_deleteData_btn" href="javascript:;"><span class="btns-primary-txt js_delete_data_i18n">删除数据</span></a></div></div><div class="BalanceRuler_bottom js_balanceRuler_bottom switch_drop_module"><div class="spolar_com_btns"><span class="auto_balance_txt js_auto_balance_i18">自动平衡</span><label class="com_applicationset_switch autoBalance_btn js_autoBalance_btn"><input type="checkbox"></label><a class="com_btns btns-primary weightSwitch_btn js_weightSwitch_btn checked ui_btn_active" href="javascript:;"><span class="btns-primary-txt js_weight_i18n">勾码</span> </a><a class="com_btns btns-primary springSwitch_btn js_springSwitch_btn" href="javascript:;"><span class="btns-primary-txt js_spring_i18n">弹簧测力计</span> </a><a class="com_btns btns-primary formula_btn js_formula_btn hidden" href="javascript:;"><span class="btns-primary-txt js_formula_i18n">公式显示</span></a></div></div><div class="BalanceRuler_pop_mask js_pop_mask hide_dom"><div class="com_dialog_wrapper BalanceRuler_pop"><div class="com_dialog_content BalanceRuler_pop_main"><div class="txt BalanceRuler_pop_txt js_tip_txt js_pop_tip_i18n">平衡尺有一端为空载，请挂载后再记录数据吧。</div><div class="txt BalanceRuler_pop_txt js_formula_txt hide_dom">F1*L1 = F2*L2</div></div><div class="spolar_com_btns BalanceRuler_pop_btn"><a class="com_btns btns-primary js_pop_btn" href="javascript:;"><span class="btns-primary-txt js_determine_btn_i18n">确定</span> </a><a class="com_btns btns-primary js_pop_btn" href="javascript:;"><span class="btns-primary-txt js_cancel_btn_i18n">取消</span></a></div></div></div></div></div>]]></view><presenter><![CDATA[/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	eval("__webpack_require__(1);\n__webpack_require__(9);\n__webpack_require__(2);\n__webpack_require__(8);\n__webpack_require__(3);\n__webpack_require__(4);\n__webpack_require__(7);\n__webpack_require__(6);\nmodule.exports = __webpack_require__(5);\n\n\n//////////////////\n// WEBPACK FOOTER\n// multi main\n// module id = 0\n// module chunks = 0\n//# sourceURL=webpack:///multi_main?");

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar _BalanceRulerController = __webpack_require__(2);\n\n(function () {\n    var helper = {\n        //当前场景\n        currentScene: 1,\n        //全屏缩放比\n        ratio: 3 / 4,\n        lastRatio: 3 / 4,\n        //dom节点\n        domObj: {}\n\n    };\n    var Presenter = BasicPresenter.extend({\n        metaInfo: {\n            name: 'BalanceRuler',\n            type: \"\",\n            subtype: \"\"\n        },\n        /**\r\n         * Presenter的初始化方法\r\n         * @private\r\n         */\n        $init: function $init() {\n            this._super();\n\n            this.$view = null;\n            this.model = null;\n            this.BalanceRuler = null;\n            this.i18n = null;\n        },\n        /**\r\n         * Presenter对外暴露的方法\r\n         */\n        _service_: {\n            constructor: function constructor(parent) {\n                this.parent = parent;\n            },\n\n            //保存推送到学生端的数据\n            getExtendData: function getExtendData() {\n\n                var options = {\n                    width: '100%',\n                    //实验数据\n                    Experiment: helper.Experiment,\n                    Explore: helper.Explore,\n                    currentScene: helper.currentScene,\n                    leverWidth: helper.leverWidth,\n                    //左边弹簧测力计的旋转角度\n                    leftSpringDegree: helper.leftSpringDegree,\n                    rightSpringDegree: helper.rightSpringDegree,\n                    //判断左右弹簧测力计是否存在\n                    hasLeftSpring: helper.hasLeftSpring,\n                    hasRightSpring: helper.hasRightSpring,\n                    //左边弹簧测力计伸长的值\n                    leftSpringBottomTop: helper.leftSpringBottomTop,\n                    //右边弹簧测力计伸长的值\n                    rightSpringBottomTop: helper.rightSpringBottomTop,\n                    //左边箭头伸长的值\n                    leftSpringArrowHeight: helper.leftSpringArrowHeight,\n                    //右边箭头伸长的值\n                    rightSpringArrowHeight: helper.rightSpringArrowHeight,\n                    //左边大弹簧测力计\n                    leftBigSpringTop: helper.leftBigSpringTop,\n                    //右边大弹簧测力计\n                    rightBigSpringTop: helper.bigSpringInitTop,\n                    //弹窗提示框\n                    tipPopIsVisible: helper.tipPopIsVisible\n                };\n\n                return options;\n            },\n            setLocationProperties: function setLocationProperties(properties) {\n                this.i18n = properties;\n            },\n            //实现这个端口学生端可用\n            getQuestionInfo: function getQuestionInfo() {\n                return {\n                    id: helper.model.question_id || '',\n                    type_code: 'BalanceRuler',\n                    type_name: this.i18n.tool_name || '杠杆平衡尺',\n                    url: JSON.stringify(helper.model.question_url),\n                    noExistStatistics: true,\n                    noNeedQuizProgress: true\n                };\n            }\n        },\n\n        getService: function getService() {\n            var self = this;\n            self._service_.constructor(self);\n            return self._service_;\n        },\n        /****以下开始为icPlayer的生命周期方法*****/\n        run: function run(view, model) {\n            var self = this;\n            helper.$view = $(view);\n            helper.model = model;\n            self.i18n = self._service_.i18n;\n            self._findView();\n            setTimeout(function () {\n                helper.BalanceRuler = new _BalanceRulerController.BalanceRulerController();\n                helper.BalanceRuler.init({ helper: helper });\n                helper.BalanceRuler.judgeScence();\n            }, 1);\n\n            self._i18nRender();\n            self.__interface = {\n                resizeScreen: function resizeScreen(data) {\n                    var self = this;\n                    //data {ratio:4/3||3/4}\n                    console.log('data resize', data);\n                    helper.BalanceRuler.resize(data);\n                    //console.log('self.LeverageAndBalance',self.LeverageAndBalance.init);\n                }\n            };\n        },\n        pageShow: function pageShow() {\n            //this._bindEvent();\n        },\n        pageLeave: function pageLeave() {\n            //this._unbindEvent();\n            helper = {\n                //当前场景\n                currentScene: 1,\n                //dom节点\n                domObj: {}\n            };\n        },\n        destroy: function destroy() {\n            if (!!helper.BalanceRuler) {\n                helper.BalanceRuler.destroy();\n            }\n        },\n        /**如果不需要处理icplayer的状态恢复事件, 请将以下两个方法删除掉**/\n        getState: function getState() {},\n        setState: function setState(state, options) {},\n        /****以下开始为Presenter的私有方法*****/\n        _bindEvent: function _bindEvent() {},\n        _unbindEvent: function _unbindEvent() {},\n        _findView: function _findView() {\n            //工具底部\n            helper.domObj._$balanceRulerBottom = helper.$view.find('.js_balanceRuler_bottom');\n            //探索规律按钮\n            helper.domObj._$ExploreBtn = helper.$view.find('.js_explore_btn');\n            //测量实验按钮\n            helper.domObj._$ExperimentBtn = helper.$view.find('.js_experiment_btn');\n            //加力按钮\n            helper.domObj._$addStrengthBtn = helper.$view.find('.js_addStrength_btn');\n            //减力按钮\n            helper.domObj._$deleteStrengthBtn = helper.$view.find('.js_deleteStrength_btn');\n            //保存数据到数组\n            helper.domObj._$pushDataBtn = helper.$view.find('.js_pushData_btn');\n            //从数组中删除数据\n            helper.domObj._$deleteDataBtn = helper.$view.find('.js_deleteData_btn');\n            //自动平衡按钮\n            helper.domObj._$autoBalanceBtn = helper.$view.find('.js_autoBalance_btn input[type=\"checkbox\"]');\n            //勾码切换按钮\n            helper.domObj._$weightSwitchBtn = helper.$view.find('.js_weightSwitch_btn');\n            //弹簧测力计切换按钮\n            helper.domObj._$springSwitchBtn = helper.$view.find('.js_springSwitch_btn');\n            //显示公式按钮\n            helper.domObj._$formulaBtn = helper.$view.find('.js_formula_btn');\n            //杠杆\n            helper.domObj._$lever = helper.$view.find('.js_lever');\n            //杠杆Wrap\n            helper.domObj._$leverWrap = helper.$view.find('.js_lever_wrap');\n            //杠杆的高亮\n            helper.domObj._$leverHighLight = helper.$view.find('.js_lever_highlight');\n            //左滑块\n            helper.domObj._$leftSlider = helper.$view.find('.js_left_slider');\n            //右滑块\n            helper.domObj._$rightSlider = helper.$view.find('.js_right_slider');\n            //左边力的外框\n            helper.domObj._$leftWeightWrap = helper.$view.find('.js_left_weight_wrap');\n            //右边力的外框\n            helper.domObj._$rightWeightWrap = helper.$view.find('.js_right_weight_wrap');\n            //左边砝码的外框\n            helper.domObj._$leftWeightItemWrap = helper.$view.find('.js_left_weightItem_wrap');\n            //右边砝码的外框\n            helper.domObj._$rightWeightItemWrap = helper.$view.find('.js_right_weightItem_wrap');\n            //记录数据的表格\n            helper.domObj._$Table = helper.$view.find('.js_table');\n            //主要内容的框\n            helper.domObj._$BalanceRulerMain = helper.$view.find('.js_BalanceRuler_main');\n            //左边刻度值\n            helper.domObj._$leftScaleTxt = helper.$view.find('.js_leftScaleTxt');\n            //右边刻度值\n            helper.domObj._$rightScaleTxt = helper.$view.find('.js_rightScaleTxt');\n            //左边弹簧测力计\n            helper.domObj._$leftSpringWrap = helper.$view.find('.js_left_spring_wrap');\n            //右边弹簧测力计\n            helper.domObj._$rightSpringWrap = helper.$view.find('.js_right_spring_wrap');\n            //左边弹簧测力计的拖拽按钮\n            helper.domObj._$leftDragBtn = helper.$view.find('.js_left_drag_btn');\n            //右边弹簧测力计的拖拽按钮\n            helper.domObj._$rightDragBtn = helper.$view.find('.js_right_drag_btn');\n            //左边箭头的长度\n            helper.domObj._$springleftArrow = helper.$view.find('.js_spring_left_arrow');\n            //右边箭头的长度\n            helper.domObj._$springrightArrow = helper.$view.find('.js_spring_right_arrow');\n            //弹窗遮罩层\n            helper.domObj._$popMask = helper.$view.find('.js_pop_mask');\n            //弹窗里的按钮\n            helper.domObj._$popBtn = helper.$view.find('.js_pop_btn');\n            //弹窗里的提示文字\n            helper.domObj._$popTipTxt = helper.$view.find('.js_tip_txt');\n            //弹窗里的公式文字\n            helper.domObj._$popFormulaTxt = helper.$view.find('.js_formula_txt');\n            //左边弹簧测力计底部\n            helper.domObj._$leftspringBottom = helper.$view.find('.js_left_spring_bottom');\n            //右边弹簧测力计底部\n            helper.domObj._$rightspringBottom = helper.$view.find('.js_right_spring_bottom');\n            //左边放大镜\n            helper.domObj._$leftMagnifier = helper.$view.find('.js_left_magnifier');\n            //右边放大镜\n            helper.domObj._$rightMagnifier = helper.$view.find('.js_right_magnifier');\n            //左边放大镜底部\n            helper.domObj._$bigLeftspringBottom = helper.$view.find('.js_big_leftspring_bottom');\n            //右边放大镜底部\n            helper.domObj._$bigRightspringBottom = helper.$view.find('.js_big_rightspring_bottom');\n            //左边平衡螺母按钮\n            helper.domObj._$leftBalanceNuts = helper.$view.find('.js_left_balance_nuts');\n            //右边平衡螺母按钮\n            helper.domObj._$rightBalanceNuts = helper.$view.find('.js_right_balance_nuts');\n            //左边平衡螺母条纹\n            helper.domObj._$leftNutsScroll = helper.$view.find('.js_left_nuts_scroll');\n            //右边平衡螺母条纹\n            helper.domObj._$rightNutsScroll = helper.$view.find('.js_right_nuts_scroll');\n        },\n        _i18nRender: function _i18nRender() {\n            var self = this;\n            //国际化，读取json文件里的key\n            helper.$view.find('.js_auto_balance_i18').html(self.i18n.auto_balance);\n            helper.$view.find('.js_weight_i18n').html(self.i18n.weight);\n            helper.$view.find('.js_spring_i18n').html(self.i18n.spring);\n            helper.$view.find('.js_formula_i18n').html(self.i18n.formula);\n            helper.$view.find('.js_recorde_data_i18n').html(self.i18n.recorde_data);\n            helper.$view.find('.js_delete_data_i18n').html(self.i18n.delete_data);\n            helper.$view.find('.js_explore_i18n').html(self.i18n.explore);\n            helper.$view.find('.js_experiment_i18n').html(self.i18n.experiment);\n            helper.$view.find('.js_times_i18n').html(self.i18n.times);\n            helper.$view.find('.js_powerF1_i18n').html(self.i18n.powerF1);\n            helper.$view.find('.js_poweredArmL1_i18n').html(self.i18n.poweredArmL1);\n            helper.$view.find('.js_powerF2_i18n').html(self.i18n.powerF2);\n            helper.$view.find('.js_poweredArmL2_i18n').html(self.i18n.poweredArmL2);\n            helper.$view.find('.js_pop_tip_i18n').html(self.i18n.pop_tip);\n            helper.$view.find('.js_escription1_i18n').html(self.i18n.escription1);\n            helper.$view.find('.js_escription2_i18n').html(self.i18n.escription2);\n            helper.$view.find('.js_determine_btn_i18n').html(self.i18n.determine_btn);\n            helper.$view.find('.js_cancel_btn_i18n').html(self.i18n.cancel_btn);\n        }\n    });\n\n    window.AddonBalanceRuler_create = function () {\n        return new Presenter('BalanceRuler');\n    };\n})();\n\n//////////////////\n// WEBPACK FOOTER\n// ./ref/presenters/BalanceRuler/presenter.js\n// module id = 1\n// module chunks = 0\n//# sourceURL=webpack:///./ref/presenters/BalanceRuler/presenter.js?");

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.BalanceRulerController = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _Explore = __webpack_require__(3);\n\nvar _Experiment = __webpack_require__(8);\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n//学生端获推送时的数据\nfunction _initializeStudentEnd() {\n    var self = this;\n    console.log('初始化学生端', self._helper);\n    if (self._helper.model.__ExtendModel && !$.isEmptyObject(self._helper.model.__ExtendModel)) {\n        self._helper.currentScene = self._helper.model.__ExtendModel.currentScene;\n    }\n}\n//绑定事件\nfunction _bindEvent() {\n    var self = this;\n    //探索规律按钮\n    self._helper.domObj._$ExploreBtn.on('click', function () {\n        //不可重复点击\n        if (self._helper.domObj._$ExploreBtn.hasClass('ui_btn_active')) {\n            return;\n        }\n        self._helper.currentScene = 1;\n        //解绑对方的事件\n        self._Experiment._unBindEvent();\n        self._changeScence();\n    });\n    //测量实验按钮\n    self._helper.domObj._$ExperimentBtn.on('click', function () {\n        //不可重复点击绑定事件\n        if (self._helper.domObj._$ExperimentBtn.hasClass('ui_btn_active')) {\n            return;\n        }\n        self._helper.currentScene = 2;\n        //解绑对方的事件\n        self._Explore._unBindEvent();\n        self._changeScence();\n    });\n    //自动平衡按钮\n    self._helper.domObj._$autoBalanceBtn.on('click', function () {\n        self._switchBtn(event, self._helper.domObj._$autoBalanceBtn);\n    });\n    //弹窗里的按钮\n    self._helper.domObj._$popBtn.on('click', function () {\n        var self = this;\n        self._helper.domObj._$popMask.addClass('hide_dom');\n        self._helper.Experiment.formulaIsVisible = false;\n        self._helper.tipPopIsVisible = false;\n    }.bind(this));\n}\n//第一次切换实验模式\nfunction _firstChangeScence() {\n    var self = this;\n    if (self._helper.currentScene == 1) {\n        self._helper.domObj._$ExploreBtn.addClass('ui_btn_active');\n        self._helper.domObj._$ExperimentBtn.removeClass('ui_btn_active');\n        self._Explore.firstRender();\n        self._helper.domObj._$formulaBtn.addClass('hidden');\n    } else if (self._helper.currentScene == 2) {\n        self._helper.domObj._$ExperimentBtn.addClass('ui_btn_active');\n        self._helper.domObj._$ExploreBtn.removeClass('ui_btn_active');\n        self._Experiment.firstRender();\n        self._helper.domObj._$formulaBtn.removeClass('hidden');\n    }\n}\n//画刻度线\nfunction _drawTickmarks() {\n    var self = this;\n    var mark = \"<span class='span\" + 0 + \"' style='display: inline-block;width:2%;height:\" + self._helper.leverHeight / 3 + \"px;margin-top:\" + self._helper.leverHeight / 9 + \"px;border-left:2px solid #8b8b8c;border-right:2px solid #8b8b8c; border-top:2px solid #8b8b8c; position: absolute;top:0 ;left:\" + 2 * 0 + \"%;'></span>\";\n    self._helper.domObj._$lever.append(mark);\n    for (var i = 1; i < 50; i++) {\n        var _mark = \"<span class='span\" + i + \"' style='display: inline-block;width:2%;height:\" + self._helper.leverHeight / 3 + \"px;margin-top:\" + self._helper.leverHeight / 9 + \"px;border-right:2px solid #8b8b8c; border-top:2px solid #8b8b8c; position: absolute;top:0 ;left:\" + 2 * i + \"%;'></span>\";\n        self._helper.domObj._$lever.append(_mark);\n    }\n}\n\nvar BalanceRulerController = function () {\n    function BalanceRulerController() {\n        _classCallCheck(this, BalanceRulerController);\n    }\n\n    _createClass(BalanceRulerController, [{\n        key: 'init',\n        value: function init(opt) {\n            var self = this;\n            this.opt = $.extend({}, opt);\n            self._helper = self.opt.helper;\n            self._Explore = new _Explore.Explore();\n            self._Explore.init({ helper: self._helper });\n            self._Experiment = new _Experiment.Experiment();\n            self._Experiment.init({ helper: self._helper });\n            self._currentType = '';\n            //提示框\n            self._helper.tipPopIsVisible = false;\n        }\n        //全屏缩放\n\n    }, {\n        key: 'resize',\n        value: function resize(data) {\n            var self = this;\n            self._helper.ratio = eval(data.ratio);\n            self._Experiment.resizeSelfData(self._helper.ratio);\n            self._Explore.resizeSelfData(self._helper.ratio);\n            if (self._helper.currentScene == 1) {\n                self._Explore.resize(self._helper.ratio);\n            } else if (self._helper.currentScene == 2) {\n                self._Experiment.resize(self._helper.ratio);\n            }\n            self._helper.lastRatio = self._helper.ratio;\n        }\n    }, {\n        key: 'judgeScence',\n        value: function judgeScence(event) {\n            var self = this;\n            //初始化学生端\n            _initializeStudentEnd.call(this);\n            _bindEvent.call(this, event);\n            _firstChangeScence.call(this);\n            //画刻度线\n            _drawTickmarks.call(this);\n        }\n        //切换实验模式\n\n    }, {\n        key: '_changeScence',\n        value: function _changeScence() {\n            var self = this;\n            if (self._helper.currentScene == 1) {\n                self._helper.domObj._$ExploreBtn.addClass('ui_btn_active');\n                self._helper.domObj._$ExperimentBtn.removeClass('ui_btn_active');\n                self._Explore.render();\n                self._helper.domObj._$formulaBtn.addClass('hidden');\n                self._helper.Explore.clickTimes += 1;\n            } else if (self._helper.currentScene == 2) {\n                self._helper.domObj._$ExperimentBtn.addClass('ui_btn_active');\n                self._helper.domObj._$ExploreBtn.removeClass('ui_btn_active');\n                self._Experiment.render();\n                self._helper.domObj._$formulaBtn.removeClass('hidden');\n                self._helper.Experiment.clickTimes += 1;\n            }\n        }\n        //开关按钮的效果\n\n    }, {\n        key: '_switchBtn',\n        value: function _switchBtn(event, target) {\n            var self = this;\n            if (target.prop('checked')) {\n                target.parent().addClass(\"checked\");\n                self._helper.Explore.autoBalance = true;\n                self._judgeNoLoad(event);\n            } else {\n                target.parent().removeClass(\"checked\");\n                self._helper.Explore.autoBalance = false;\n            }\n            //保存数据\n            self._Explore._saveData();\n        }\n        //判断两边是不是空载\n\n    }, {\n        key: '_judgeNoLoad',\n        value: function _judgeNoLoad(event) {\n            var self = this;\n            var leftNoWeight = self._helper.domObj._$leftWeightItemWrap.children().length == 0;\n            var rightNoWeight = self._helper.domObj._$rightWeightItemWrap.children().length == 0;\n            var leftNoSpring = self._helper.domObj._$leftSpringWrap.hasClass('hide_dom');\n            var rightNoSpring = self._helper.domObj._$rightSpringWrap.hasClass('hide_dom');\n            var twoSidesEmpty = rightNoWeight && rightNoSpring || leftNoWeight && leftNoSpring;\n            //如果有一边为空\n            if (twoSidesEmpty) {\n                //显示提示框\n                self._Explore._showTipPop();\n                self._helper.domObj._$autoBalanceBtn.prop(\"checked\", false);\n                self._helper.domObj._$autoBalanceBtn.parent().removeClass(\"checked\");\n                if (self._helper.currentScene == 1) {\n                    self._helper.Explore.autoBalance = false;\n                } else if (self._helper.currentScene == 2) {\n                    self._helper.Experiment.autoBalance = false;\n                }\n            } else {\n                if (self._helper.currentScene == 1) {\n                    if (self._helper.domObj._$leftWeightItemWrap.children().length > 0) {\n                        self._helper.leftIsActiveSide = true;\n                        self._helper.rightIsActiveSide = false;\n                    } else {\n                        self._helper.rightIsActiveSide = true;\n                        self._helper.leftIsActiveSide = false;\n                    }\n                    self._Explore._autoBalance(event);\n                    self._Explore._setStrenth();\n                    self._Explore._linkageEvent2();\n                }\n            }\n        }\n    }]);\n\n    return BalanceRulerController;\n}();\n\nexports.BalanceRulerController = BalanceRulerController;\n\n//////////////////\n// WEBPACK FOOTER\n// ./ref/presenters/BalanceRuler/libs/BalanceRulerController.js\n// module id = 2\n// module chunks = 0\n//# sourceURL=webpack:///./ref/presenters/BalanceRuler/libs/BalanceRulerController.js?");

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.Explore = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _Ruler = __webpack_require__(4);\n\nvar _Weight = __webpack_require__(5);\n\nvar _SpringDynamometer = __webpack_require__(6);\n\nvar _Slider = __webpack_require__(7);\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Explore = function () {\n    function Explore() {\n        _classCallCheck(this, Explore);\n    }\n\n    _createClass(Explore, [{\n        key: 'init',\n        value: function init(opt) {\n            var self = this;\n            self.opt = $.extend({}, opt);\n            self._helper = self.opt.helper;\n            self._Ruler = new _Ruler.Ruler();\n            self._Weight = new _Weight.Weight();\n            self._SpringDynamometer = new _SpringDynamometer.SpringDynamometer();\n            self._Slider = new _Slider.Slider();\n            self._Ruler.init({ helper: self._helper });\n            self._Weight.init({ helper: self._helper });\n            self._SpringDynamometer.init({ helper: self._helper });\n            self._Slider.init({ helper: self._helper });\n            self._helper.Explore = {\n                //滑块坐标\n                leftSliderCoordinate: self._helper.leftSliderCoordinate,\n                rightSliderCoordinate: self._helper.rightSliderCoordinate,\n                //刻度\n                leftScale: self._helper.leftScale,\n                rightScale: self._helper.rightScale,\n                //重力\n                leftWeightNum: 2,\n                rightWeightNum: 2,\n                //自动平衡按钮状态\n                autoBalance: true,\n                //记录点击次数\n                clickTimes: 0,\n                //弹簧按钮被选中\n                springIsChecked: false,\n                //滑块是否在移动中\n                leftSliderIsMoving: false,\n                rightSliderIsMoving: false\n            };\n        }\n    }, {\n        key: 'firstRender',\n        value: function firstRender() {\n            var self = this;\n            if (self._helper.currentScene != 1) {\n                return;\n            }\n            self._helper.domObj._$BalanceRulerMain.removeClass('experiment_pattern');\n            self._helper.domObj._$BalanceRulerMain.addClass('explorer_pattern');\n            self._helper.domObj._$balanceRulerBottom.find('.spolar_com_btns').removeClass('experiment_pattern');\n            self._getData();\n            //初始化学生端\n            self._initializeStudentEnd();\n            self._bindEvent();\n            self._seriesOfEvents();\n        }\n    }, {\n        key: 'render',\n        value: function render() {\n            var self = this;\n            if (self._helper.currentScene != 1) {\n                return;\n            }\n            clearTimeout(self._helper.rulerTimeout);\n            self._helper.domObj._$leverHighLight.addClass('hide_dom');\n            if (self._helper.Explore.clickTimes == 0) {\n                self.firstRender();\n            } else {\n                self._helper.domObj._$leverHighLight.addClass('hide_dom');\n                self._helper.domObj._$BalanceRulerMain.removeClass('experiment_pattern');\n                self._helper.domObj._$BalanceRulerMain.addClass('explorer_pattern');\n                self._helper.domObj._$balanceRulerBottom.find('.spolar_com_btns').removeClass('experiment_pattern');\n                self._getData();\n                self._bindEvent();\n                self._seriesOfEvents();\n            }\n        }\n    }, {\n        key: 'resizeSelfData',\n        value: function resizeSelfData(data) {\n            var self = this;\n            self._helper.Explore.leftSliderCoordinate = {\n                X: self._helper.Explore.leftSliderCoordinate.X * data,\n                Y: self._helper.Explore.leftSliderCoordinate.Y * data\n            };\n            self._helper.Explore.rightSliderCoordinate = {\n                X: self._helper.Explore.rightSliderCoordinate.X * data,\n                Y: self._helper.Explore.rightSliderCoordinate.Y * data\n            };\n            if (self._helper.currentScene != 1) {\n                self._SpringDynamometer.resize(data);\n            }\n        }\n    }, {\n        key: 'resize',\n        value: function resize(data) {\n            var self = this;\n            //console.log('探索规律'+data);\n            self._Ruler.resize(data);\n            self._SpringDynamometer.resize(data);\n            //渲染\n            self._SpringDynamometer._renderSpringDynamometer();\n            self._Slider.resize(data);\n            self._Weight.resize(data);\n            self._linkageEvent2();\n        }\n    }, {\n        key: '_bindEvent',\n        value: function _bindEvent() {\n            var self = this;\n            //滑块\n            self._helper.$view.on(\"mousedown touchstart\", \".js_left_slider_toleft , .js_left_slider_toright , .js_right_slider_toleft,.js_right_slider_toright,.js_left_drag_btn , .js_right_drag_btn\", this._eventHandler.bind(this));\n            self._helper.$view.on(\"mousemove touchmove\", \".js_BalanceRuler_main,.js_range_of_activities ,.js_left_drag_btn , .js_right_drag_btn,.sTop,.sRight,.sBottom,.sLeft\", this._eventHandler.bind(this));\n            self._helper.$view.on(\"mouseup touchend\", \".js_BalanceRuler_main,.js_balanceRuler_bottom,.js_left_drag_btn , .js_right_drag_btn ,.sTop,.sRight,.sBottom,.sLeft\", this._eventHandler.bind(this));\n            self._helper.$view.on(\"mouseup touchend touchcancel\", \".js_left_slider_toleft , .js_left_slider_toright , .js_right_slider_toleft,.js_right_slider_toright\", this._clearSlider.bind(this));\n            self._helper.$view.on(\"touchcancel\", \".js_BalanceRuler_main\", this._clearSlider.bind(this));\n            self._helper.$view.on(\"mouseleave\", \".js_BalanceRuler_main\", self._SpringDynamometer._setSpringMoveFalse.bind(this));\n            //增加重力\n            self._helper.domObj._$addStrengthBtn.on('mousedown touchstart', self._addGravity.bind(this));\n            //减少重力\n            self._helper.domObj._$deleteStrengthBtn.on('mousedown touchstart', self._deleteGravity.bind(this));\n            //弹簧测力计切换按钮\n            self._helper.domObj._$springSwitchBtn.on('click', self._clickSpringSwitchBtn.bind(this));\n            //勾码切换按钮\n            self._helper.domObj._$weightSwitchBtn.on('click', self._clickWeightSwitchBtn.bind(this));\n        }\n        //解绑事件\n\n    }, {\n        key: '_unBindEvent',\n        value: function _unBindEvent() {\n            var self = this;\n            //滑块\n            self._helper.$view.off(\"mousedown touchstart mousemove touchmove mouseup touchend touchcancel click\");\n            //增加重力\n            self._helper.domObj._$addStrengthBtn.off('mousedown touchstart');\n            //减少重力\n            self._helper.domObj._$deleteStrengthBtn.off('mousedown touchstart');\n            //弹簧测力计切换按钮\n            self._helper.domObj._$springSwitchBtn.off('click');\n            //勾码切换按钮\n            self._helper.domObj._$weightSwitchBtn.off('click');\n        }\n    }, {\n        key: '_eventHandler',\n        value: function _eventHandler(event) {\n            var self = this;\n            var eventType = this.eventMapping(event);\n            event.stopPropagation();\n            switch (eventType) {\n                case \"start\":\n                    event.preventDefault();\n                    self._mousestartEvents(event);\n                    //连续拖动滑块\n                    self._continuousdragSlider(event);\n                    break;\n                case \"move\":\n                    if (!self._helper.leftSpringActive && !self._helper.rightSpringActive) {\n                        return;\n                    } else {\n                        self._mousemoveEvents(event);\n                    }\n                    break;\n                case \"end\":\n                    //鼠标放开发生的事件\n                    self._mouseupEvents(event);\n                    break;\n            }\n        }\n        //对事件类型做处理\n\n    }, {\n        key: 'eventMapping',\n        value: function eventMapping(event) {\n            var eventType = event.type;\n            var self = this;\n            var type = void 0;\n            //判断不同的事件获取鼠标的x值\n            if (eventType == \"mousemove\" || eventType == \"mousedown\" || eventType == \"mouseup\") {\n                self._helper.mouseX = event.pageX;\n                self._helper.mouseY = event.pageY;\n            } else if (eventType == \"touchmove\" || eventType == \"touchstart\") {\n                self._helper.mouseX = event.originalEvent.changedTouches[0].clientX;\n                self._helper.mouseY = event.originalEvent.changedTouches[0].clientY;\n            }\n            //滑块的点击态\n            switch (eventType) {\n                case \"touchstart\":\n                //阻止默认事件，不发射mouseEvent\n                case \"mousedown\":\n                    type = \"start\";\n                    break;\n                case \"mousemove\":\n                case \"touchmove\":\n                    type = \"move\";\n                    break;\n                case \"mouseup\":\n                case \"touchend\":\n                    type = \"end\";\n                    break;\n            }\n            return type;\n        }\n        //鼠标点击start的时候执行的事件\n\n    }, {\n        key: '_mousestartEvents',\n        value: function _mousestartEvents(event) {\n            var self = this;\n            //弹簧测力计状态判定\n            self._SpringDynamometer._setSpringMoveStatus(event);\n            //判断主动方和被动方\n            self._judgeActiveSide(event);\n            //保存弹簧测力计的初始鼠标位置\n            self._SpringDynamometer._saveInitialMousePosition(event);\n            self._helper.sliderActive = true;\n        }\n        //鼠标移动时发生的事件\n\n    }, {\n        key: '_mousemoveEvents',\n        value: function _mousemoveEvents(event) {\n            var self = this;\n            //设置砝码位置\n            self._Weight._setWeightPos();\n            //拖拽弹簧测力计\n            if (self._helper.leftSpringActive || self._helper.rightSpringActive) {\n                self._SpringDynamometer._dragSpring(event);\n                self._moveLinkage();\n            }\n        }\n        //鼠标放开发生的事件\n\n    }, {\n        key: '_mouseupEvents',\n        value: function _mouseupEvents(event) {\n            var self = this;\n            //判断主动方和被动方\n            self._judgeActiveSide(event);\n            self._autoBalance(event);\n            //联动事件\n            self._linkageEvent2();\n            self._saveData();\n        }\n        //点击事件\n\n    }, {\n        key: '_clickEvents',\n        value: function _clickEvents(event) {\n            var self = this;\n            //拖动滑块\n            self._Slider._dragSlider(event);\n            //设置刻度数\n            self._Slider._setScaleNum();\n            //判断主动方和被动方_setStrenthArm\n            self._judgeActiveSide(event);\n            self._autoBalance(event);\n            self._linkageEvent2();\n            self._saveData();\n        }\n        //渲染系列事件\n\n    }, {\n        key: '_seriesOfEvents',\n        value: function _seriesOfEvents() {\n            var self = this;\n            //拖动滑块\n            self._setSliderMoveFalse();\n            self._setSpringMoveFalse();\n            self._Slider._sliderMove();\n            //自动平衡按钮\n            self._autoBalanceStatus();\n            //渲染弹簧测力计\n            self._SpringDynamometer._renderSpringDynamometer();\n            //渲染提示框\n            if (self._helper.tipPopIsVisible == true) {\n                self._showTipPop();\n            }\n            //设置刻度数\n            self._Slider._setScaleNum();\n            //杠杆旋转\n            self._Ruler._leverRotate();\n            //设置砝码位置\n            self._Weight._setWeightPos();\n            //渲染砝码\n            self._Weight._renderWeight();\n            //砝码和弹簧测力计判断\n            self._oneOfSpringAndWeight();\n            //设置砝码位置\n            self._Weight._setWeightPos();\n            //设置砝码按钮状态\n            self._Weight._WeightBtnStatus();\n            self._SpringDynamometer._WeightBtnStatus();\n            //勾码按钮和弹簧测力计按钮\n            self._switchWeightAndSpring();\n            //渲染砝码和弹簧测力计加减号的状态\n            self._WeightBtnStatus();\n            self._saveData();\n        }\n        //获取保存的数据\n\n    }, {\n        key: '_getData',\n        value: function _getData() {\n            var self = this;\n            //刻度\n            self._helper.leftScale = self._helper.Explore.leftScale;\n            self._helper.rightScale = self._helper.Explore.rightScale;\n            //重力\n            self._helper.leftWeightNum = self._helper.Explore.leftWeightNum;\n            self._helper.rightWeightNum = self._helper.Explore.rightWeightNum;\n            //坐标\n            self._helper.leftSliderCoordinate = self._helper.Explore.leftSliderCoordinate;\n            self._helper.rightSliderCoordinate = self._helper.Explore.rightSliderCoordinate;\n            //平衡螺母\n            //左边平衡螺母重量\n            self._helper.leftNutsWeightNum = 1;\n            self._helper.rightNutsWeightNum = 1;\n        }\n        //学生端获推送时的数据\n\n    }, {\n        key: '_initializeStudentEnd',\n        value: function _initializeStudentEnd() {\n            var self = this;\n            if (self._helper.model.__ExtendModel && !$.isEmptyObject(self._helper.model.__ExtendModel)) {\n                //初始化学生端的值\n                //缩放比例\n                self._helper.scalingrRatio = self._helper.leverWidth / self._helper.model.__ExtendModel.leverWidth;\n                //刻度\n                self._helper.leftScale = self._helper.model.__ExtendModel.Explore.leftScale;\n                self._helper.rightScale = self._helper.model.__ExtendModel.Explore.rightScale;\n                //重力\n                self._helper.leftWeightNum = self._helper.model.__ExtendModel.Explore.leftWeightNum;\n                self._helper.rightWeightNum = self._helper.model.__ExtendModel.Explore.rightWeightNum;\n                self._helper.leftSliderCoordinate = {\n                    X: self._helper.model.__ExtendModel.Explore.leftSliderCoordinate.X * self._helper.scalingrRatio,\n                    Y: self._helper.model.__ExtendModel.Explore.leftSliderCoordinate.Y * self._helper.scalingrRatio\n                };\n                self._helper.rightSliderCoordinate = {\n                    X: self._helper.model.__ExtendModel.Explore.rightSliderCoordinate.X * self._helper.scalingrRatio,\n                    Y: self._helper.model.__ExtendModel.Explore.rightSliderCoordinate.Y * self._helper.scalingrRatio\n                };\n                //左边平衡螺母重量\n                self._helper.leftNutsWeightNum = self._helper.model.__ExtendModel.Explore.leftNutsWeightNum;\n                self._helper.rightNutsWeightNum = self._helper.model.__ExtendModel.Explore.rightNutsWeightNum;\n                //平衡按钮\n                self._helper.Explore.autoBalance = self._helper.model.__ExtendModel.Explore.autoBalance;\n                //弹簧测力计按钮\n                self._helper.Explore.springIsChecked = self._helper.model.__ExtendModel.Explore.springIsChecked;\n                //左边弹簧测力计的旋转角度\n                self._helper.leftSpringDegree = self._helper.model.__ExtendModel.leftSpringDegree;\n                self._helper.rightSpringDegree = self._helper.model.__ExtendModel.rightSpringDegree;\n                //判断左右弹簧测力计是否存在\n                self._helper.hasLeftSpring = self._helper.model.__ExtendModel.hasLeftSpring;\n                self._helper.hasRightSpring = self._helper.model.__ExtendModel.hasRightSpring;\n                //左边弹簧测力计伸长的值\n                self._helper.leftSpringBottomTop = self._helper.model.__ExtendModel.leftSpringBottomTop * self._helper.scalingrRatio;\n                //右边弹簧测力计伸长的值\n                self._helper.rightSpringBottomTop = self._helper.model.__ExtendModel.rightSpringBottomTop * self._helper.scalingrRatio;\n                //左边箭头伸长的值\n                self._helper.leftSpringArrowHeight = self._helper.leftWeightNum * self._helper._springEveryWeightHeight;\n                //右边箭头伸长的值\n                self._helper.rightSpringArrowHeight = self._helper.rightWeightNum * self._helper._springEveryWeightHeight;\n                //左边大弹簧测力计\n                self._helper.leftBigSpringTop = self._helper.model.__ExtendModel.leftBigSpringTop * self._helper.scalingrRatio;\n                //右边大弹簧测力计\n                self._helper.rightBigSpringTop = self._helper.model.__ExtendModel.bigSpringInitTop * self._helper.scalingrRatio;\n                //弹窗提示框\n                self._helper.tipPopIsVisible = self._helper.model.__ExtendModel.tipPopIsVisible;\n                //左边平衡螺母重量\n                self._helper.leftNutsWeightNum = 1;\n                self._helper.rightNutsWeightNum = 1;\n            }\n        }\n        //保存当前数据\n\n    }, {\n        key: '_saveData',\n        value: function _saveData() {\n            var self = this;\n            //刻度\n            self._helper.Explore.leftScale = self._helper.leftScale;\n            self._helper.Explore.rightScale = self._helper.rightScale;\n            //重力\n            self._helper.Explore.leftWeightNum = self._helper.leftWeightNum;\n            self._helper.Explore.rightWeightNum = self._helper.rightWeightNum;\n            //坐标\n            self._helper.Explore.leftSliderCoordinate = self._helper.leftSliderCoordinate;\n            self._helper.Explore.rightSliderCoordinate = self._helper.rightSliderCoordinate;\n        }\n        //弹簧测力计和砝码只能存在一个\n\n    }, {\n        key: '_oneOfSpringAndWeight',\n        value: function _oneOfSpringAndWeight() {\n            var self = this;\n            if (self._helper.hasLeftSpring) {\n                self._helper.domObj._$leftWeightItemWrap.find('div').remove();\n            }\n            if (self._helper.hasRightSpring) {\n                self._helper.domObj._$rightWeightItemWrap.find('div').remove();\n            }\n        }\n        //让滑块不可滑动\n\n    }, {\n        key: '_setSliderMoveFalse',\n        value: function _setSliderMoveFalse() {\n            var self = this;\n            self._helper.sliderActive = false;\n            self._helper.leftIsMoving = false;\n            self._helper.rightIsMoving = false;\n        }\n        //让弹簧测力计不可拖动\n\n    }, {\n        key: '_setSpringMoveFalse',\n        value: function _setSpringMoveFalse() {\n            var self = this;\n            //左边弹簧测力计是否可拉\n            self._helper.leftSpringActive = false;\n            //右边弹簧测力计是否可拉\n            self._helper.rightSpringActive = false;\n        }\n        //增加重力\n\n    }, {\n        key: '_addGravity',\n        value: function _addGravity(event) {\n            event.preventDefault();\n            var self = this;\n            //如果勾码被选中\n            if (self._helper.domObj._$weightSwitchBtn.hasClass('checked')) {\n                self._Weight._addGravity(event);\n                self._switchWeightAndSpringInpage();\n            }\n            //弹簧测力计被选中\n            else if (self._helper.domObj._$springSwitchBtn.hasClass('checked')) {\n                    self._SpringDynamometer._addSpringDynamometer(event);\n                    self._switchWeightAndSpringInpage();\n                }\n            //判断主动方和被动方\n            self._judgeActiveSide(event);\n            self._autoBalance(event);\n            //设置力\n            self._SpringDynamometer._setStrenth();\n            self._linkageEvent2();\n            //设置弹簧测力计每个状态固定值\n            self._SpringDynamometer._setSpringStaticProduct();\n            self._saveData();\n        }\n        //减少重力\n\n    }, {\n        key: '_deleteGravity',\n        value: function _deleteGravity(event) {\n            event.preventDefault();\n            var self = this;\n            //减去勾码\n            self._Weight._deleteGravity(event);\n            //减去弹簧测力计\n            self._SpringDynamometer._deleteSpringDynamometer(event);\n            self._switchWeightAndSpringInpage();\n            //判断主动方和被动方\n            self._judgeActiveSide(event);\n            self._autoBalance(event);\n            //判断两边是不是空载\n            self._Ruler._judgeNoLoad();\n            //设置力\n            self._SpringDynamometer._setStrenth();\n            //杠杆旋转\n            self._Ruler._leverRotate();\n            //杠杆高亮\n            self._Ruler._leverHighLight();\n            self._linkageEvent2();\n            //设置弹簧测力计每个状态固定值\n            self._SpringDynamometer._setSpringStaticProduct();\n            self._saveData();\n        }\n        //情景切换时判断弹簧测力计和勾码按钮的状态\n\n    }, {\n        key: '_switchWeightAndSpring',\n        value: function _switchWeightAndSpring() {\n            var self = this;\n            self._helper.domObj._$springSwitchBtn.removeClass('click_disabled checked');\n            //情景切换时判断\n            if (self._helper.Explore.springIsChecked == false) {\n                self._helper.domObj._$weightSwitchBtn.addClass('ui_btn_active checked');\n            } else {\n                self._helper.domObj._$weightSwitchBtn.removeClass('ui_btn_active checked');\n                if (!self._helper.domObj._$leftSpringWrap.hasClass('hide_dom') && !self._helper.domObj._$rightSpringWrap.hasClass('hide_dom')) {\n                    self._helper.domObj._$weightSwitchBtn.addClass('click_disabled');\n                }\n            }\n            if (self._helper.Explore.springIsChecked == true) {\n                self._helper.domObj._$springSwitchBtn.addClass('ui_btn_active checked');\n            } else {\n                self._helper.domObj._$springSwitchBtn.removeClass('ui_btn_active checked');\n                if (!self._helper.domObj._$leftWeightItemWrap.children().length == 0 && !self._helper.domObj._$rightWeightItemWrap.children().length == 0) {\n                    self._helper.domObj._$springSwitchBtn.addClass('click_disabled');\n                }\n            }\n        }\n        //页面内时判断弹簧测力计和勾码按钮的状态\n\n    }, {\n        key: '_switchWeightAndSpringInpage',\n        value: function _switchWeightAndSpringInpage() {\n            var self = this;\n            //判断弹簧测力计按钮\n            var leftWeight = self._helper.domObj._$leftWeightItemWrap.children().length;\n            var rightWeight = self._helper.domObj._$rightWeightItemWrap.children().length;\n            if (leftWeight != 0 && rightWeight != 0) {\n                self._helper.domObj._$springSwitchBtn.removeClass('checked ui_btn_active');\n                self._helper.domObj._$springSwitchBtn.addClass('click_disabled');\n            } else {\n                self._helper.domObj._$springSwitchBtn.removeClass('click_disabled');\n            }\n            //判断勾码按钮\n            var leftSpring = self._helper.domObj._$leftSpringWrap.hasClass('hide_dom');\n            var rightSpring = self._helper.domObj._$rightSpringWrap.hasClass('hide_dom');\n            if (!leftSpring && !rightSpring) {\n                self._helper.domObj._$weightSwitchBtn.removeClass('checked ui_btn_active');\n                self._helper.domObj._$weightSwitchBtn.addClass('click_disabled');\n            } else {\n                self._helper.domObj._$weightSwitchBtn.removeClass('click_disabled');\n            }\n        }\n        //点击弹簧测力计按钮\n\n    }, {\n        key: '_clickSpringSwitchBtn',\n        value: function _clickSpringSwitchBtn() {\n            var self = this;\n            if (self._helper.domObj._$springSwitchBtn.hasClass('click_disabled')) {\n                return;\n            } else {\n                self._switchWeightBtn(self._helper.domObj._$springSwitchBtn, self._helper.domObj._$weightSwitchBtn);\n                self._helper.Explore.springIsChecked = true;\n            }\n        }\n        //点击勾码按钮\n\n    }, {\n        key: '_clickWeightSwitchBtn',\n        value: function _clickWeightSwitchBtn() {\n            var self = this;\n            if (self._helper.domObj._$weightSwitchBtn.hasClass('click_disabled')) {\n                return;\n            } else {\n                self._switchWeightBtn(self._helper.domObj._$weightSwitchBtn, self._helper.domObj._$springSwitchBtn);\n                self._helper.Explore.springIsChecked = false;\n            }\n        }\n        //切换弹簧测力计和勾码\n\n    }, {\n        key: '_switchWeightBtn',\n        value: function _switchWeightBtn(target, another) {\n            var self = this;\n            target.addClass(\"checked ui_btn_active\");\n            another.removeClass(\"checked ui_btn_active\");\n            //渲染砝码和弹簧测力计加减号的状态\n            self._WeightBtnStatus();\n        }\n        //渲染砝码和弹簧测力计加减号的状态\n\n    }, {\n        key: '_WeightBtnStatus',\n        value: function _WeightBtnStatus() {\n            var self = this;\n            if (self._helper.domObj._$springSwitchBtn.hasClass('checked')) {\n                if (self._helper.domObj._$leftWeightItemWrap.children().length > 0) {\n                    self._helper.domObj._$leftWeightWrap.find('.js_addStrength_btn').addClass('click_disabled');\n                }\n                if (self._helper.domObj._$rightWeightItemWrap.children().length > 0) {\n                    self._helper.domObj._$rightWeightWrap.find('.js_addStrength_btn').addClass('click_disabled');\n                }\n            } else if (self._helper.domObj._$weightSwitchBtn.hasClass('checked')) {\n                if (self._helper.domObj._$leftWeightItemWrap.children().length > 0 && self._helper.domObj._$leftWeightItemWrap.children().length < 5) {\n                    self._helper.domObj._$leftWeightWrap.find('.js_addStrength_btn').removeClass('click_disabled');\n                }\n                if (self._helper.domObj._$rightWeightItemWrap.children().length > 0 && self._helper.domObj._$rightWeightItemWrap.children().length < 5) {\n                    self._helper.domObj._$rightWeightWrap.find('.js_addStrength_btn').removeClass('click_disabled');\n                }\n            }\n        }\n        //自动平衡\n\n    }, {\n        key: '_autoBalance',\n        value: function _autoBalance(event) {\n            var self = this;\n            self._autoBalanceStatus();\n            if (self._helper.Explore.autoBalance == true) {\n                //判断是哪种情景\n                var autotype = self._judgeBalanceType();\n                switch (autotype) {\n                    case 1:\n                        //左边弹簧测力计，右边勾码\n                        self._autoFunctionOne(event);\n                        //打破平衡\n                        self._breakAutoBalance();\n                        break;\n                    case 2:\n                        //左边弹簧测力计，右边弹簧测力计\n                        self._autoFunctionTwo(event);\n                        //打破平衡\n                        self._breakAutoBalance();\n                        break;\n                    case 3:\n                        //左边勾码，右边弹簧测力计\n                        self._autoFunctionThree(event);\n                        //打破平衡\n                        self._breakAutoBalance();\n                        break;\n                    case 4:\n                        //左边勾码，右边勾码\n                        self._autoFunctionFour();\n                        //打破平衡\n                        self._breakAutoBalance();\n                        break;\n                    default:\n                }\n                self._helper.currentDegree = 0;\n            }\n        }\n        //判断是哪种情景\n\n    }, {\n        key: '_judgeBalanceType',\n        value: function _judgeBalanceType() {\n            var self = this;\n            var type = void 0;\n            var leftIsSping = !self._helper.domObj._$leftSpringWrap.hasClass('hide_dom');\n            var leftIsWeight = self._helper.domObj._$leftWeightItemWrap.children().length >= 1;\n            var rightIsSping = !self._helper.domObj._$rightSpringWrap.hasClass('hide_dom');\n            var rightIsWeight = self._helper.domObj._$rightWeightItemWrap.children().length >= 1;\n            if (leftIsSping && rightIsWeight) {\n                type = 1;\n            } else if (leftIsSping && rightIsSping) {\n                type = 2;\n            } else if (leftIsWeight && rightIsSping) {\n                type = 3;\n            } else if (leftIsWeight && rightIsWeight) {\n                type = 4;\n            }\n            return type;\n        }\n        //左边弹簧测力计，右边勾码\n\n    }, {\n        key: '_autoFunctionOne',\n        value: function _autoFunctionOne(event) {\n            var self = this;\n            //左边是操作方\n            if (self._helper.leftIsActiveSide) {\n                //计算操作方的力*力臂/平衡方的力\n                var pattern = self._helper.leftWeightNum * self._helper.leftScale / self._helper.rightWeightNum;\n                //在杠杆滑动范围内且为整数\n                if (pattern > 1 && pattern <= 25 && parseInt(pattern) == pattern) {\n                    self._weightChange(self._helper.rightScale, self._helper.leftWeightNum, self._helper.leftScale, self._helper.rightWeightNum, self._helper.rightSliderCoordinate, self._helper.domObj._$rightSlider);\n                    //self._SpringDynamometer._operateSpring(event);\n                    //联动事件\n                    self._linkageEvent();\n                } else {\n                    //相等\n                    self._equallyStatus(self._helper.rightScale, self._helper.leftScale, self._helper.rightWeightNum, self._helper.leftWeightNum, self._helper.rightSliderCoordinate, self._helper.domObj._$rightSlider, self._helper.domObj._$rightWeightItemWrap);\n                    //联动事件\n                    self._linkageEvent();\n                }\n                self._linkageEvent2();\n            }\n            //右边是操作方\n            if (self._helper.rightIsActiveSide) {\n                self._springChange(event, self._helper.leftWeightNum, self._helper.rightScale, self._helper.rightWeightNum, self._helper.leftScale, self._helper.leftSpringBottomTop, self._helper.leftSpringArrowHeight, self._helper.leftSliderCoordinate);\n                //联动事件\n                self._linkageEvent2();\n            }\n        }\n        //左边弹簧测力计，右边弹簧测力计\n\n    }, {\n        key: '_autoFunctionTwo',\n        value: function _autoFunctionTwo(event) {\n            var self = this;\n            //左边是操作方\n            if (self._helper.leftIsActiveSide) {\n                console.log('右刻度值' + self._helper.domObj._$leftScaleTxt.text());\n                //self._SpringDynamometer._twoSpringChange(event,self._helper.rightScale,self._helper.leftScale ,self._helper.rightSliderCoordinate,self._helper.domObj._$rightSlider);\n                self._SpringDynamometer._twoSpringChange(event, self._helper.domObj._$rightScaleTxt.text(), self._helper.domObj._$leftScaleTxt.text(), self._helper.rightSliderCoordinate, self._helper.domObj._$rightSlider);\n                self._linkageEvent();\n            }\n            //右边是操作方\n            if (self._helper.rightIsActiveSide) {\n                self._SpringDynamometer._twoSpringChange(event, self._helper.domObj._$leftScaleTxt.text(), self._helper.domObj._$rightScaleTxt.text(), self._helper.leftSliderCoordinate, self._helper.domObj._$leftSlider);\n                self._linkageEvent();\n            }\n        }\n        //左边勾码，右边弹簧测力计\n\n    }, {\n        key: '_autoFunctionThree',\n        value: function _autoFunctionThree(event) {\n            var self = this;\n            //左边是操作方\n            if (self._helper.leftIsActiveSide) {\n                self._springChange(event, self._helper.rightWeightNum, self._helper.leftScale, self._helper.leftWeightNum, self._helper.rightScale, self._helper.rightSpringBottomTop, self._helper.rightSpringArrowHeight, self._helper.rightSliderCoordinate);\n                //联动事件\n                self._linkageEvent2();\n            }\n            //右边是操作方\n            if (self._helper.rightIsActiveSide) {\n                //计算操作方的力*力臂/平衡方的力\n                var pattern = self._helper.rightWeightNum * self._helper.rightScale / self._helper.leftWeightNum;\n                //在杠杆滑动范围内且为整数\n                if (pattern > 1 && pattern <= 25 && parseInt(pattern) == pattern) {\n                    self._weightChange(self._helper.leftScale, self._helper.rightWeightNum, self._helper.rightScale, self._helper.leftWeightNum, self._helper.leftSliderCoordinate, self._helper.domObj._$leftSlider);\n                    //联动事件\n                    self._linkageEvent();\n                } else {\n                    //相等\n                    self._equallyStatus(self._helper.leftScale, self._helper.rightScale, self._helper.leftWeightNum, self._helper.rightWeightNum, self._helper.leftSliderCoordinate, self._helper.domObj._$leftSlider, self._helper.domObj._$leftWeightItemWrap);\n                    //联动事件\n                    self._linkageEvent();\n                }\n                self._linkageEvent2();\n            }\n        }\n        //左边勾码，右边勾码\n\n    }, {\n        key: '_autoFunctionFour',\n        value: function _autoFunctionFour() {\n            var self = this;\n            //左边是操作方\n            if (self._helper.leftIsActiveSide) {\n                //计算操作方的力*力臂/平衡方的力\n                var pattern = self._helper.leftWeightNum * self._helper.leftScale / self._helper.rightWeightNum;\n                //在杠杆滑动范围内且为整数\n                if (pattern > 1 && pattern <= 25 && parseInt(pattern) == pattern) {\n                    self._Weight._autoFunction(self._helper.rightScale, self._helper.leftWeightNum, self._helper.leftScale, self._helper.rightWeightNum, self._helper.rightSliderCoordinate, self._helper.domObj._$rightSlider);\n                    //联动事件\n                    self._linkageEvent();\n                } else {\n                    //相等\n                    self._Weight._equallyStatus(self._helper.rightScale, self._helper.leftScale, self._helper.rightWeightNum, self._helper.leftWeightNum, self._helper.rightSliderCoordinate, self._helper.domObj._$rightSlider, self._helper.domObj._$rightWeightItemWrap);\n                    //联动事件\n                    self._linkageEvent();\n                }\n            }\n            //右边是操作方\n            if (self._helper.rightIsActiveSide) {\n                //计算操作方的力*力臂/平衡方的力\n                var _pattern = self._helper.rightWeightNum * self._helper.rightScale / self._helper.leftWeightNum;\n                //在杠杆滑动范围内且为整数\n                if (_pattern > 1 && _pattern <= 25 && parseInt(_pattern) == _pattern) {\n                    self._Weight._autoFunction(self._helper.leftScale, self._helper.rightWeightNum, self._helper.rightScale, self._helper.leftWeightNum, self._helper.leftSliderCoordinate, self._helper.domObj._$leftSlider);\n                    //联动事件\n                    self._linkageEvent();\n                } else {\n                    //相等\n                    self._Weight._equallyStatus(self._helper.leftScale, self._helper.rightScale, self._helper.leftWeightNum, self._helper.rightWeightNum, self._helper.leftSliderCoordinate, self._helper.domObj._$leftSlider, self._helper.domObj._$leftWeightItemWrap);\n                    //联动事件\n                    self._linkageEvent();\n                }\n            }\n        }\n        //勾码操作，改变弹簧测力计的情况\n\n    }, {\n        key: '_springChange',\n        value: function _springChange(event, targetWeightNum, initiativeScale, initiativeWeightNum, targetScale, SpringBottomTop, targetSpringArrowHeight, targetSliderCoordinate, targetSliderdom) {\n\n            var self = this;\n            var eventTarget = $(event.target).hasClass('js_addStrength_btn') || $(event.target).hasClass('js_deleteStrength_btn');\n            targetWeightNum = initiativeWeightNum;\n            targetScale = initiativeScale;\n            //弹簧的伸长等于砝码的力\n            if (SpringBottomTop == self._helper.leftSpringBottomTop && self._helper.rightIsActiveSide == true) {\n                self._helper.leftSpringBottomTop = self._helper.springBottomTop + targetWeightNum * self._helper._springEveryWeightHeight;\n                self._helper.leftBigSpringTop = self._helper.bigSpringInitTop - targetWeightNum * self._helper._bigSpringEveryWeightHeight;\n            } else if (SpringBottomTop == self._helper.rightSpringBottomTop && self._helper.leftIsActiveSide == true) {\n                self._helper.rightSpringBottomTop = self._helper.springBottomTop + targetWeightNum * self._helper._springEveryWeightHeight;\n                self._helper.rightBigSpringTop = self._helper.bigSpringInitTop - targetWeightNum * self._helper._bigSpringEveryWeightHeight;\n            }\n            //箭头长度\n            if (targetSpringArrowHeight == self._helper.leftSpringArrowHeight && self._helper.rightIsActiveSide == true) {\n                self._helper.leftSpringArrowHeight = targetWeightNum * self._helper._ArrowEveryHeight;\n                if (self._helper.leftSpringArrowHeightBefore != self._helper.leftSpringArrowHeight && eventTarget) {\n                    self._helper.domObj._$leftMagnifier.removeClass('hide_dom');\n                }\n            } else if (targetSpringArrowHeight == self._helper.rightSpringArrowHeight && self._helper.leftIsActiveSide == true) {\n                self._helper.rightSpringArrowHeight = targetWeightNum * self._helper._ArrowEveryHeight;\n                if (self._helper.rightSpringArrowHeightBefore != self._helper.rightSpringArrowHeight && eventTarget) {\n                    self._helper.domObj._$rightMagnifier.removeClass('hide_dom');\n                }\n            }\n            //弹簧测力计坐标\n            if (targetSliderCoordinate == self._helper.leftSliderCoordinate && self._helper.rightIsActiveSide == true) {\n                targetSliderCoordinate.X = self._helper.leverWidth / 2 - targetScale * self._helper.everyScale - self._helper.SliderWidth / 2 + parseInt(self._helper.leftSpringDegree / 10) * self._helper.everyScale;\n            } else if (targetSliderCoordinate == self._helper.rightSliderCoordinate && self._helper.leftIsActiveSide == true) {\n                targetSliderCoordinate.X = self._helper.leverWidth / 2 + targetScale * self._helper.everyScale - self._helper.SliderWidth / 2 + parseInt(self._helper.rightSpringDegree / 10) * self._helper.everyScale;\n            }\n            //设置力\n            if (targetWeightNum == self._helper.leftWeightNum) {\n                self._helper.leftWeightNum = targetWeightNum;\n            }\n            if (targetWeightNum == self._helper.rightWeightNum) {\n                self._helper.rightWeightNum = targetWeightNum;\n            }\n            if (targetScale == self._helper.leftScale) {\n                self._helper.leftScale = targetScale - parseInt(self._helper.leftSpringDegree / 10);\n            }\n            if (targetScale == self._helper.rightScale) {\n                self._helper.rightScale = targetScale + parseInt(self._helper.rightSpringDegree / 10);\n            }\n            //渲染弹簧测力计\n            self._SpringDynamometer._renderSpringDynamometer();\n            self._Slider._sliderMove();\n            self._helper.leftSpringArrowHeightBefore = self._helper.leftSpringArrowHeight;\n            self._helper.rightSpringArrowHeightBefore = self._helper.rightSpringArrowHeight;\n        }\n        //操作弹簧测力计，改变勾码的情况\n\n    }, {\n        key: '_weightChange',\n        value: function _weightChange(targetScale, initiativeWeightNum, initiativeScale, targetWeightNum, targetSliderCoordinate, targetSliderdom) {\n            var self = this;\n            targetScale = initiativeWeightNum * initiativeScale / targetWeightNum;\n            if (targetSliderCoordinate == self._helper.leftSliderCoordinate) {\n                targetSliderCoordinate.X = self._helper.leverWidth / 2 - targetScale * self._helper.everyScale - self._helper.SliderWidth / 2;\n            } else if (targetSliderCoordinate == self._helper.rightSliderCoordinate) {\n                targetSliderCoordinate.X = self._helper.leverWidth / 2 + targetScale * self._helper.everyScale - self._helper.SliderWidth / 2;\n            }\n            if (targetScale == self._helper.leftScale) {\n                self._helper.leftScale = targetScale;\n            }\n            if (targetScale == self._helper.rightScale) {\n                self._helper.rightScale = targetScale;\n            }\n            targetSliderdom.css({ left: targetSliderCoordinate.X });\n        }\n        //让左边和右边的状态完全一样\n\n    }, {\n        key: '_equallyStatus',\n        value: function _equallyStatus(targetScale, initiativeScale, targetWeightNum, initiativeWeightNum, targetSliderCoordinate, targetSliderdom, targetWeightItemWrap) {\n            var self = this;\n            targetScale = initiativeScale;\n            if (parseInt(targetScale) > 25) {\n                targetScale = 25;\n                //关闭自动平衡\n                self._SpringDynamometer._closeAutoBalanceBtn();\n            } else if (parseInt(targetScale) < 2) {\n                targetScale = 2;\n                //关闭自动平衡\n                self._SpringDynamometer._closeAutoBalanceBtn();\n            } else {\n                targetWeightNum = initiativeWeightNum < 1 ? 1 : initiativeWeightNum;\n                //渲染砝码开始\n                targetWeightItemWrap.children().remove();\n                for (var i = 1; i < targetWeightNum + 1; i++) {\n                    var weight_dom = \"<div class='lab_weight_item item\" + i + \"'></div>\";\n                    targetWeightItemWrap.append(weight_dom);\n                }\n                //渲染砝码结束\n                if (targetSliderCoordinate == self._helper.leftSliderCoordinate) {\n                    targetSliderCoordinate.X = self._helper.leverWidth / 2 - targetScale * self._helper.everyScale - self._helper.SliderWidth / 2;\n                } else if (targetSliderCoordinate == self._helper.rightSliderCoordinate) {\n                    targetSliderCoordinate.X = self._helper.leverWidth / 2 + targetScale * self._helper.everyScale - self._helper.SliderWidth / 2;\n                }\n                targetSliderdom.css({ left: targetSliderCoordinate.X });\n            }\n        }\n        //判断主动方和被动方\n\n    }, {\n        key: '_judgeActiveSide',\n        value: function _judgeActiveSide(event) {\n            var self = this;\n            if ($(event.target).hasClass('js_left_slider_toleft') || $(event.target).hasClass('js_left_slider_toright') || $(event.target).hasClass('js_left') || $(event.target).hasClass('js_left_drag_btn') || $(event.target).parent().hasClass('js_left_drag_btn')) {\n                //alert('左边'+self._helper.leftIsActiveSide);\n                self._helper.leftIsActiveSide = true;\n                self._helper.rightIsActiveSide = false;\n            } else if ($(event.target).hasClass('js_right_slider_toleft') || $(event.target).hasClass('js_right_slider_toright') || $(event.target).hasClass('js_right') || $(event.target).hasClass('js_right_drag_btn') || $(event.target).parent().hasClass('js_right_drag_btn')) {\n                //alert('右边'+self._helper.rightIsActiveSide);\n                self._helper.rightIsActiveSide = true;\n                self._helper.leftIsActiveSide = false;\n            }\n        }\n        //联动事件\n\n    }, {\n        key: '_linkageEvent',\n        value: function _linkageEvent() {\n            var self = this;\n            //设置砝码\n            self._Weight._setGravity();\n            //设置刻度数\n            self._Slider._setScaleNum();\n            //设置砝码位置\n            self._Weight._setWeightPos();\n            //杠杆旋转\n            self._Ruler._leverRotate();\n        }\n        //联动事件2\n\n    }, {\n        key: '_linkageEvent2',\n        value: function _linkageEvent2() {\n            var self = this;\n            self._SpringDynamometer._setSpringMoveFalse();\n            //设置砝码\n            self._Weight._setGravity();\n            //设置刻度数\n            self._Slider._setScaleNum();\n            //杠杆旋转\n            self._Ruler._leverRotate();\n            //杠杆高亮\n            self._Ruler._leverHighLight();\n            //设置砝码位置\n            self._Weight._setWeightPos();\n        }\n        //move时需要记录改变的值\n\n    }, {\n        key: '_moveLinkage',\n        value: function _moveLinkage() {\n            var self = this;\n            //设置砝码\n            self._Weight._setGravity();\n            //设置刻度数\n            self._Slider._setScaleNum();\n        }\n        //自动平衡按钮状态判断\n\n    }, {\n        key: '_autoBalanceStatus',\n        value: function _autoBalanceStatus() {\n            var self = this;\n            if (self._helper.Explore.autoBalance == true) {\n                self._helper.domObj._$autoBalanceBtn.prop(\"checked\", true);\n                self._helper.domObj._$autoBalanceBtn.parent().addClass(\"checked\");\n                self._helper.Explore.autoBalance = true;\n            } else {\n                self._helper.domObj._$autoBalanceBtn.prop(\"checked\", false);\n                self._helper.domObj._$autoBalanceBtn.parent().removeClass(\"checked\");\n                self._helper.Explore.autoBalance = false;\n            }\n        }\n        //连续拖动滑块\n\n    }, {\n        key: '_continuousdragSlider',\n        value: function _continuousdragSlider(event) {\n            var self = this;\n            //判断滑块状态\n            self._Slider._judgeSliderMoveStatus(event);\n            if ($(event.target).hasClass('js_left_slider_toleft')) {\n                if (self._helper.Explore.leftSliderIsMoving) {\n                    self._helper.sliderMoveInterval = setInterval(function () {\n                        self._Slider._sliderLeftToLeft();\n                        self._continuousMouseStart();\n                    }, 150);\n                }\n            }\n            if ($(event.target).hasClass('js_left_slider_toright')) {\n                if (self._helper.Explore.leftSliderIsMoving) {\n                    self._helper.sliderMoveInterval = setInterval(function () {\n                        self._Slider._sliderLeftToRight();\n                        self._continuousMouseStart();\n                    }, 150);\n                }\n            }\n            if ($(event.target).hasClass('js_right_slider_toleft')) {\n                if (self._helper.Explore.rightSliderIsMoving) {\n                    self._helper.sliderMoveInterval = setInterval(function () {\n                        self._Slider._sliderRightToLeft();\n                        self._continuousMouseStart();\n                    }, 150);\n                }\n            }\n            if ($(event.target).hasClass('js_right_slider_toright')) {\n                if (self._helper.Explore.rightSliderIsMoving) {\n                    self._helper.sliderMoveInterval = setInterval(function () {\n                        self._Slider._sliderRightToRight();\n                        self._continuousMouseStart();\n                    }, 150);\n                }\n            }\n        }\n        //拖动事件系列事件\n\n    }, {\n        key: '_continuousMouseStart',\n        value: function _continuousMouseStart() {\n            var self = this;\n            self._Slider._sliderMove();\n            //设置刻度数\n            self._Slider._setScaleNum();\n            //设置砝码位置\n            self._Weight._setWeightPos();\n            self._saveData();\n        }\n        //显示提示框\n\n    }, {\n        key: '_showTipPop',\n        value: function _showTipPop() {\n            var self = this;\n            self._helper.domObj._$popMask.removeClass('hide_dom');\n            self._helper.domObj._$popFormulaTxt.addClass('hide_dom');\n            self._helper.domObj._$popTipTxt.removeClass('hide_dom');\n            self._helper.tipPopIsVisible = true;\n        }\n        //打破平衡函数\n\n    }, {\n        key: '_breakAutoBalance',\n        value: function _breakAutoBalance() {\n            var self = this;\n            var leftNoWeight = self._helper.domObj._$leftWeightItemWrap.children().length == 0;\n            var rightNoWeight = self._helper.domObj._$rightWeightItemWrap.children().length == 0;\n            var leftNoSpring = self._helper.domObj._$leftSpringWrap.hasClass('hide_dom');\n            var rightNoSpring = self._helper.domObj._$rightSpringWrap.hasClass('hide_dom');\n            var twoSidesEmpty = rightNoWeight && rightNoSpring || leftNoWeight && leftNoSpring;\n            if (twoSidesEmpty) {\n                self._SpringDynamometer._closeAutoBalanceBtn();\n                //alert('打破平衡');\n            }\n        }\n        //清除定时器\n\n    }, {\n        key: '_clearSlider',\n        value: function _clearSlider(event) {\n            var self = this;\n            //将滑块状态设为false\n            self._Slider._SliderMoveFalse();\n            clearInterval(self._helper.sliderMoveInterval);\n            self._clickEvents(event);\n            var cansetStrenth = $(event.target).hasClass('js_left_slider_toleft') || $(event.target).hasClass('js_left_slider_toright') || $(event.target).hasClass('js_right_slider_toleft') || $(event.target).hasClass('js_right_slider_toright');\n            if (cansetStrenth) {\n                //设置力\n                self._SpringDynamometer._setStrenth();\n            }\n            //设置弹簧测力计每个状态固定值\n            self._SpringDynamometer._setSpringStaticProduct();\n        }\n        //弹簧测力计设置力\n\n    }, {\n        key: '_setStrenth',\n        value: function _setStrenth() {\n            var self = this;\n            //设置力\n            self._SpringDynamometer._setStrenth();\n        }\n    }]);\n\n    return Explore;\n}();\n\nexports.Explore = Explore;\n\n//////////////////\n// WEBPACK FOOTER\n// ./ref/presenters/BalanceRuler/libs/Explore.js\n// module id = 3\n// module chunks = 0\n//# sourceURL=webpack:///./ref/presenters/BalanceRuler/libs/Explore.js?");

/***/ },
/* 4 */
/***/ function(module, exports) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Ruler = function () {\n    function Ruler() {\n        _classCallCheck(this, Ruler);\n    }\n\n    _createClass(Ruler, [{\n        key: 'init',\n        value: function init(opt) {\n            var self = this;\n            self.opt = $.extend({}, opt);\n            self._helper = self.opt.helper;\n            //杠杆的X值\n            self._helper.lever = {\n                X: self._helper.domObj._$lever.position().left,\n                Y: self._helper.domObj._$lever.position().top\n            };\n            //杠杆倾斜角度\n            self._helper.currentDegree = 0;\n            //最大旋转角度\n            self._helper.maxDegree = 7;\n            //每个砝码的重力\n            self._helper.everyWeightStrenth = 1;\n            //最小旋转角度\n            self._helper.minDegree = self._helper.maxDegree / [self._helper.everyWeightStrenth * 5 * 25];\n            //高亮消失的定时器\n            self._helper.rulerTimeout = null;\n        }\n    }, {\n        key: 'resize',\n        value: function resize(data) {\n            var self = this;\n            //杠杆的X值\n            self._helper.lever = {\n                X: self._helper.domObj._$lever.position().left,\n                Y: self._helper.domObj._$lever.position().top\n            };\n        }\n        //杠杆倾斜\n\n    }, {\n        key: '_leverRotate',\n        value: function _leverRotate() {\n            var self = this;\n            //右边砝码数\n            var RWN = self._helper.rightWeightNum;\n            //右边刻度\n            var RS = self._helper.rightScale;\n            //左边砝码数\n            var LWN = self._helper.leftWeightNum;\n            //左边刻度\n            var LS = self._helper.leftScale;\n            //左边平衡螺母\n            var LN = self._helper.leftNutsWeightNum;\n            //右边平衡螺母\n            var RN = self._helper.rightNutsWeightNum;\n            //实时角度\n            if (RWN * RS - LWN * LS == 0 && RWN != 0 && LWN != 0 && RS >= 1 && LS >= 1 && LN == RN) {\n                self._helper.currentDegree = 0;\n            } else {\n                self._helper.currentDegree = self._helper.minDegree * [RWN * RS + RN * 10 - (LWN * LS + LN * 10)];\n            }\n            self._currentDegreeRange();\n\n            self._helper.domObj._$lever.css({ transform: 'rotate(' + self._helper.currentDegree + 'deg)' });\n            self._helper.domObj._$leverWrap.css({ transform: 'rotate(' + self._helper.currentDegree + 'deg)' });\n        }\n        //杠杆高亮\n\n    }, {\n        key: '_leverHighLight',\n        value: function _leverHighLight() {\n            var self = this;\n            //右边砝码数\n            var RWN = self._helper.rightWeightNum;\n            //右边刻度\n            var RS = self._helper.rightScale;\n            //左边砝码数\n            var LWN = self._helper.leftWeightNum;\n            //左边刻度\n            var LS = self._helper.leftScale;\n            //左边平衡螺母\n            var LN = self._helper.leftNutsWeightNum;\n            //右边平衡螺母\n            var RN = self._helper.rightNutsWeightNum;\n            if (RWN != 0 && LWN != 0 && RWN * RS + RN * 10 - (LWN * LS + LN * 10) == 0) {\n                self._helper.domObj._$leverHighLight.removeClass('hide_dom');\n                //一秒后高亮消失\n                self._helper.rulerTimeout = setTimeout(function () {\n                    self._helper.domObj._$leverHighLight.addClass('hide_dom');\n                }, 500);\n            }\n        }\n        //旋转角度的范围\n\n    }, {\n        key: '_currentDegreeRange',\n        value: function _currentDegreeRange() {\n            var self = this;\n            if (self._helper.currentDegree < -10) {\n                self._helper.currentDegree = -10;\n            }\n            if (self._helper.currentDegree > 10) {\n                self._helper.currentDegree = 10;\n            }\n            self._helper.domObj._$lever.css({ transform: 'rotate(' + self._helper.currentDegree + 'deg)' });\n            self._helper.domObj._$leverWrap.css({ transform: 'rotate(' + self._helper.currentDegree + 'deg)' });\n        }\n        //判断两边是不是空载\n\n    }, {\n        key: '_judgeNoLoad',\n        value: function _judgeNoLoad() {\n            var self = this;\n            var leftNoWeight = self._helper.domObj._$leftWeightItemWrap.children().length == 0;\n            var rightNoWeight = self._helper.domObj._$rightWeightItemWrap.children().length == 0;\n            var leftNoSpring = self._helper.domObj._$leftSpringWrap.hasClass('hide_dom');\n            var rightNoSpring = self._helper.domObj._$rightSpringWrap.hasClass('hide_dom');\n            var twoSidesEmpty = rightNoWeight && rightNoSpring || leftNoWeight && leftNoSpring;\n            //如果有一边为空\n            if (twoSidesEmpty) {\n                self._helper.domObj._$autoBalanceBtn.prop(\"checked\", false);\n                self._helper.domObj._$autoBalanceBtn.parent().removeClass(\"checked\");\n                if (self._helper.currentScene == 1) {\n                    self._helper.Explore.autoBalance = false;\n                } else if (self._helper.currentScene == 2) {\n                    self._helper.Experiment.autoBalance = false;\n                }\n            }\n        }\n    }]);\n\n    return Ruler;\n}();\n\nexports.Ruler = Ruler;\n\n//////////////////\n// WEBPACK FOOTER\n// ./ref/presenters/BalanceRuler/libs/Ruler.js\n// module id = 4\n// module chunks = 0\n//# sourceURL=webpack:///./ref/presenters/BalanceRuler/libs/Ruler.js?");

/***/ },
/* 5 */
/***/ function(module, exports) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Weight = function () {\n    function Weight() {\n        _classCallCheck(this, Weight);\n    }\n\n    _createClass(Weight, [{\n        key: 'init',\n        value: function init(opt) {\n            var self = this;\n            self.opt = $.extend({}, opt);\n            self._helper = self.opt.helper;\n            //左右砝码的坐标\n            self._helper.leftWeightCoordinate = {\n                X: 0,\n                Y: 0\n            };\n            self._helper.rightWeightCoordinate = {\n                X: 0,\n                Y: 0\n            };\n            //左边重力\n            self._helper.leftWeightNum = 0;\n            //右边重力\n            self._helper.rightWeightNum = 0;\n            //杠杆中心点\n            self._helper.leverCenterCoordinate = {\n                X: self._helper.domObj._$lever.position().left + self._helper.domObj._$lever.outerWidth() / 2,\n                Y: self._helper.domObj._$lever.position().top + self._helper.domObj._$lever.outerHeight() / 2\n            };\n            //杠杆高度\n            self._helper.leverHeight = self._helper.domObj._$lever.outerHeight();\n            //砝码宽度\n            self._helper.weightWrapWidth = self._helper.domObj._$leftWeightWrap.outerWidth();\n        }\n    }, {\n        key: 'resize',\n        value: function resize(data) {\n            var self = this;\n            //if(self._helper.ratio !== self._helper.lastRatio) {\n            //杠杆中心点\n            self._helper.leverCenterCoordinate = {\n                X: self._helper.leverCenterCoordinate.X * self._helper.ratio,\n                Y: self._helper.leverCenterCoordinate.Y * self._helper.ratio\n            };\n            //}\n            //杠杆高度\n            self._helper.leverHeight = self._helper.domObj._$lever.outerHeight();\n            //砝码宽度\n            self._helper.weightWrapWidth = self._helper.domObj._$leftWeightWrap.outerWidth();\n        }\n        //增加砝码个数\n\n    }, {\n        key: '_addGravity',\n        value: function _addGravity(event) {\n            var self = this;\n            if ($(event.target).hasClass('js_left')) {\n                //判断砝码范围\n                if (self._helper.domObj._$leftWeightItemWrap.children().length >= 5 || !self._helper.domObj._$leftSpringWrap.hasClass('hide_dom')) {\n                    return;\n                } else {\n                    self._addLeftWeight();\n                }\n            }\n            if ($(event.target).hasClass('js_right')) {\n                if (self._helper.domObj._$rightWeightItemWrap.children().length >= 5 || !self._helper.domObj._$rightSpringWrap.hasClass('hide_dom')) {\n                    return;\n                } else {\n                    self._addRightWeight();\n                }\n            }\n            //设置重力\n            self._setGravity();\n        }\n        //左边增加砝码\n\n    }, {\n        key: '_addLeftWeight',\n        value: function _addLeftWeight() {\n            var self = this;\n            var nextItem = self._helper.domObj._$leftWeightItemWrap.children().length + 1;\n            var weight_dom = \"<div class='lab_weight_item js_left_item item\" + nextItem + \"'></div>\";\n            self._helper.domObj._$leftWeightItemWrap.append(weight_dom);\n        }\n        //增加右边砝码\n\n    }, {\n        key: '_addRightWeight',\n        value: function _addRightWeight() {\n            var self = this;\n            var nextItem = self._helper.domObj._$rightWeightItemWrap.children().length + 1;\n            var weight_dom = \"<div class='lab_weight_item js_right_item item\" + nextItem + \"'></div>\";\n            self._helper.domObj._$rightWeightItemWrap.append(weight_dom);\n        }\n        //减少砝码个数\n\n    }, {\n        key: '_deleteGravity',\n        value: function _deleteGravity(event) {\n            var self = this;\n            if ($(event.target).hasClass('js_left')) {\n                self._deleteLeftGravity();\n            }\n            if ($(event.target).hasClass('js_right')) {\n                self._deleteRightGravity();\n            }\n            //设置重力\n            self._setGravity();\n        }\n        //减少左边砝码\n\n    }, {\n        key: '_deleteLeftGravity',\n        value: function _deleteLeftGravity() {\n            var self = this;\n            //判断砝码范围\n            if (self._helper.domObj._$leftWeightItemWrap.children().length < 1) {\n                return;\n            } else {\n                self._helper.domObj._$leftWeightItemWrap.find('div:last').remove();\n            }\n        }\n        //减少右边砝码\n\n    }, {\n        key: '_deleteRightGravity',\n        value: function _deleteRightGravity() {\n            var self = this;\n            if (self._helper.domObj._$rightWeightItemWrap.children().length < 1) {\n                return;\n            } else {\n                self._helper.domObj._$rightWeightItemWrap.find('div:last').remove();\n            }\n        }\n        //渲染砝码\n\n    }, {\n        key: '_renderWeight',\n        value: function _renderWeight() {\n            var self = this;\n            //alert('左砝码' + self._helper.leftWeightNum);\n            //清空砝码\n            for (var i = 1; i < 6; i++) {\n                //alert('清空');\n                self._helper.domObj._$leftWeightItemWrap.find('.item' + i).remove();\n            }\n            for (var _i = 1; _i < 6; _i++) {\n                self._helper.domObj._$rightWeightItemWrap.find('.item' + _i).remove();\n            }\n\n            //渲染砝码\n            for (var _i2 = 1; _i2 < self._helper.leftWeightNum + 1; _i2++) {\n                var weight_dom = \"<div class='lab_weight_item js_left_item item\" + _i2 + \"'></div>\";\n                self._helper.domObj._$leftWeightItemWrap.append(weight_dom);\n            }\n            for (var _i3 = 1; _i3 < self._helper.rightWeightNum + 1; _i3++) {\n                var _weight_dom = \"<div class='lab_weight_item js_right_item item\" + _i3 + \"'></div>\";\n                self._helper.domObj._$rightWeightItemWrap.append(_weight_dom);\n            }\n        }\n        //设置重力\n\n    }, {\n        key: '_setGravity',\n        value: function _setGravity() {\n            var self = this;\n            if (self._helper.domObj._$leftSpringWrap.hasClass('hide_dom')) {\n                self._helper.leftWeightNum = self._helper.domObj._$leftWeightItemWrap.children().length;\n            }\n            if (self._helper.domObj._$rightSpringWrap.hasClass('hide_dom')) {\n                self._helper.rightWeightNum = self._helper.domObj._$rightWeightItemWrap.children().length;\n            }\n\n            self._WeightBtnStatus();\n            //alert('设置左砝码' + self._helper.leftWeightNum);\n        }\n        //按钮状态\n\n    }, {\n        key: '_WeightBtnStatus',\n        value: function _WeightBtnStatus() {\n            var self = this;\n            //按钮置灰\n            if (!self._helper.domObj._$springSwitchBtn.hasClass('checked') && self._helper.currentScene == 1 || self._helper.currentScene == 2) {\n                //左边\n                if (self._helper.domObj._$leftSpringWrap.hasClass('hide_dom')) {\n                    if (self._helper.domObj._$leftWeightItemWrap.children().length > 4) {\n                        self._helper.domObj._$leftWeightWrap.find('.js_addStrength_btn').addClass('click_disabled');\n                    } else {\n                        self._helper.domObj._$leftWeightWrap.find('.js_addStrength_btn').removeClass('click_disabled');\n                    }\n                    if (self._helper.domObj._$leftWeightItemWrap.children().length < 1) {\n                        self._helper.domObj._$leftWeightWrap.find('.js_deleteStrength_btn').addClass('click_disabled');\n                    } else {\n                        self._helper.domObj._$leftWeightWrap.find('.js_deleteStrength_btn').removeClass('click_disabled');\n                    }\n                }\n\n                //右边\n                if (self._helper.domObj._$rightSpringWrap.hasClass('hide_dom')) {\n                    if (self._helper.domObj._$rightWeightItemWrap.children().length > 4) {\n                        self._helper.domObj._$rightWeightWrap.find('.js_addStrength_btn').addClass('click_disabled');\n                    } else {\n                        self._helper.domObj._$rightWeightWrap.find('.js_addStrength_btn').removeClass('click_disabled');\n                    }\n                    if (self._helper.domObj._$rightWeightItemWrap.children().length < 1) {\n                        self._helper.domObj._$rightWeightWrap.find('.js_deleteStrength_btn').addClass('click_disabled');\n                    } else {\n                        self._helper.domObj._$rightWeightWrap.find('.js_deleteStrength_btn').removeClass('click_disabled');\n                    }\n                }\n            }\n            if (self._helper.domObj._$springSwitchBtn.hasClass('checked') && self._helper.currentScene == 1) {\n                if (self._helper.domObj._$leftWeightItemWrap.children().length > 0) {\n                    self._helper.domObj._$leftWeightWrap.find('.js_addStrength_btn').addClass('click_disabled');\n                    self._helper.domObj._$leftWeightWrap.find('.js_deleteStrength_btn').removeClass('click_disabled');\n                }\n                if (self._helper.domObj._$rightWeightItemWrap.children().length > 0) {\n                    self._helper.domObj._$rightWeightWrap.find('.js_addStrength_btn').addClass('click_disabled');\n                    self._helper.domObj._$rightWeightWrap.find('.js_deleteStrength_btn').removeClass('click_disabled');\n                }\n            }\n            if (self._helper.domObj._$weightSwitchBtn.hasClass('checked') && self._helper.currentScene == 1) {\n                if (self._helper.domObj._$leftWeightItemWrap.children().length > 0 && self._helper.domObj._$leftWeightItemWrap.children().length < 5) {\n                    self._helper.domObj._$leftWeightWrap.find('.js_addStrength_btn').removeClass('click_disabled');\n                    self._helper.domObj._$leftWeightWrap.find('.js_deleteStrength_btn').removeClass('click_disabled');\n                }\n                if (self._helper.domObj._$rightWeightItemWrap.children().length > 0 && self._helper.domObj._$rightWeightItemWrap.children().length < 5) {\n                    self._helper.domObj._$rightWeightWrap.find('.js_addStrength_btn').removeClass('click_disabled');\n                    self._helper.domObj._$rightWeightWrap.find('.js_deleteStrength_btn').removeClass('click_disabled');\n                }\n            }\n        }\n        //改变左边砝码的位置\n\n    }, {\n        key: '_setWeightPos',\n        value: function _setWeightPos() {\n            var self = this;\n            self._helper.leftWeightCoordinate.X = self._helper.lever.X + self._helper.leftSliderCoordinate.X - self._helper.weightWrapWidth / 2 + self._helper.SliderWidth / 2;\n            self._helper.rightWeightCoordinate.X = self._helper.lever.X + self._helper.rightSliderCoordinate.X - self._helper.weightWrapWidth / 2 + self._helper.SliderWidth / 2;\n            //竖直偏差Tan\n            var leftTan = -(self._helper.leverCenterCoordinate.X - self._helper.leftWeightCoordinate.X) * Math.tan(self._helper.currentDegree / 360 * 2 * Math.PI);\n            var rightTan = -(self._helper.leverCenterCoordinate.X - self._helper.rightWeightCoordinate.X) * Math.tan(self._helper.currentDegree / 360 * 2 * Math.PI);\n            self._helper.leftWeightCoordinate.Y = leftTan + self._helper.leverCenterCoordinate.Y + self._helper.leverHeight / 10 + self._helper.SliderWidth;\n            self._helper.rightWeightCoordinate.Y = rightTan + self._helper.leverCenterCoordinate.Y + self._helper.leverHeight / 10 + self._helper.SliderWidth;\n            self._helper.domObj._$leftWeightWrap.css({ left: self._helper.leftWeightCoordinate.X, top: self._helper.leftWeightCoordinate.Y });\n            self._helper.domObj._$rightWeightWrap.css({ left: self._helper.rightWeightCoordinate.X, top: self._helper.rightWeightCoordinate.Y });\n        }\n        //自动平衡算法\n        //平衡算法\n\n    }, {\n        key: '_autoFunction',\n        value: function _autoFunction(targetScale, initiativeWeightNum, initiativeScale, targetWeightNum, targetSliderCoordinate, targetSliderdom) {\n            var self = this;\n            targetScale = initiativeWeightNum * initiativeScale / targetWeightNum;\n            if (targetSliderCoordinate == self._helper.leftSliderCoordinate) {\n                targetSliderCoordinate.X = self._helper.leverWidth / 2 - targetScale * self._helper.everyScale - self._helper.SliderWidth / 2;\n            } else if (targetSliderCoordinate == self._helper.rightSliderCoordinate) {\n                targetSliderCoordinate.X = self._helper.leverWidth / 2 + targetScale * self._helper.everyScale - self._helper.SliderWidth / 2;\n            }\n            targetSliderdom.css({ left: targetSliderCoordinate.X, top: targetSliderCoordinate.Y });\n        }\n        //让左边和右边的状态完全一样\n\n    }, {\n        key: '_equallyStatus',\n        value: function _equallyStatus(targetScale, initiativeScale, targetWeightNum, initiativeWeightNum, targetSliderCoordinate, targetSliderdom, targetWeightItemWrap) {\n            var self = this;\n            targetScale = initiativeScale;\n            targetWeightNum = initiativeWeightNum;\n            //渲染砝码开始\n            for (var i = 1; i < 6; i++) {\n                targetWeightItemWrap.find('.item' + i).remove();\n            }\n            for (var _i4 = 1; _i4 < targetWeightNum + 1; _i4++) {\n                var weight_dom = \"<div class='lab_weight_item item\" + _i4 + \"'></div>\";\n                targetWeightItemWrap.append(weight_dom);\n            }\n            //渲染砝码结束\n            if (targetSliderCoordinate == self._helper.leftSliderCoordinate) {\n                targetSliderCoordinate.X = self._helper.leverWidth / 2 - targetScale * self._helper.everyScale - self._helper.SliderWidth / 2;\n            } else if (targetSliderCoordinate == self._helper.rightSliderCoordinate) {\n                targetSliderCoordinate.X = self._helper.leverWidth / 2 + targetScale * self._helper.everyScale - self._helper.SliderWidth / 2;\n            }\n            targetSliderdom.css({ left: targetSliderCoordinate.X, top: targetSliderCoordinate.Y });\n        }\n    }]);\n\n    return Weight;\n}();\n\nexports.Weight = Weight;\n\n//////////////////\n// WEBPACK FOOTER\n// ./ref/presenters/BalanceRuler/libs/Weight.js\n// module id = 5\n// module chunks = 0\n//# sourceURL=webpack:///./ref/presenters/BalanceRuler/libs/Weight.js?");

/***/ },
/* 6 */
/***/ function(module, exports) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar SpringDynamometer = function () {\n    function SpringDynamometer() {\n        _classCallCheck(this, SpringDynamometer);\n    }\n\n    _createClass(SpringDynamometer, [{\n        key: 'init',\n        value: function init(opt) {\n            var self = this;\n            self.opt = $.extend({}, opt);\n            self._helper = self.opt.helper;\n            //左边弹簧测力计是否可拉\n            self._helper.leftSpringActive = false;\n            //右边弹簧测力计是否可拉\n            self._helper.rightSpringActive = false;\n            self._helper.leftSpringBtnCoordinate = {\n                X: 0,\n                Y: 0\n            };\n            self._helper.rightSpringBtnCoordinate = {\n                X: 0,\n                Y: 0\n            };\n            //鼠标的初始位置\n            self._helper.mouseinitialPosition = {\n                X: 0,\n                Y: 0\n            };\n            //左边弹簧测力计的旋转角度\n            self._helper.leftSpringDegree = 0;\n            self._helper.rightSpringDegree = 0;\n            //判断左右弹簧测力计是否存在\n            self._helper.hasLeftSpring = true;\n            self._helper.hasRightSpring = false;\n            //获取弹簧测力计底部的top值\n            self._helper.springBottomTop = parseFloat(self._helper.domObj._$leftspringBottom.css('top'));\n            //弹簧测力计每一个重力伸长的值\n            self._helper._springEveryWeightHeight = parseInt(self._helper.springBottomTop * 2 / 5.5);\n            //每一个重力箭头应该伸长的值\n            self._helper._ArrowEveryHeight = self._helper._springEveryWeightHeight;\n            //左边弹簧测力计伸长的值\n            self._helper.leftSpringBottomTop = self._helper.springBottomTop + self._helper._springEveryWeightHeight * 2;\n            //右边弹簧测力计伸长的值\n            self._helper.rightSpringBottomTop = self._helper.springBottomTop;\n            //左边箭头伸长的值\n            self._helper.leftSpringArrowHeight = self._helper._ArrowEveryHeight * 2;\n            //右边箭头伸长的值\n            self._helper.rightSpringArrowHeight = 0;\n            //记录上一次左弹簧记录的值\n            self._helper.leftSpringArrowHeightBefore = self._helper.leftSpringArrowHeight;\n            //记录上一次右弹簧记录的值\n            self._helper.rightSpringArrowHeightBefore = self._helper.rightSpringArrowHeight;\n            //记录弹簧测力计移动的位置\n            self._helper.leftSpringMoveDistance = {\n                X: 0,\n                Y: 0\n            };\n            self._helper.rightSpringMoveDistance = {\n                X: 0,\n                Y: 0\n            };\n            //初始移动距离\n            self._helper.leftInitSpringMoveDistance = {\n                X: 0,\n                Y: 0\n            };\n            self._helper.rightInitSpringMoveDistance = {\n                X: 0,\n                Y: 0\n            };\n            //弹簧测力计底部高度\n            self._helper.springBottomHeight = self._helper.domObj._$leftspringBottom.outerHeight();\n            //大弹簧测力计的初始top值\n            self._helper.bigSpringInitTop = parseFloat(self._helper.domObj._$bigLeftspringBottom.css('top'));\n            //大弹簧测力计每一重力伸长的长度\n            self._helper._bigSpringEveryWeightHeight = parseInt((self._helper.bigSpringInitTop - self._helper.bigSpringInitTop / 10.4) / 5);\n            //左边大弹簧测力计\n            self._helper.leftBigSpringTop = self._helper.bigSpringInitTop - self._helper._bigSpringEveryWeightHeight * 2;\n            //右边大弹簧测力计\n            self._helper.rightBigSpringTop = self._helper.bigSpringInitTop;\n            //大弹簧测力计和小弹簧测力计的比例\n            self._helper.BigAndSmallProportion = self._helper.domObj._$bigLeftspringBottom.outerHeight() / self._helper.domObj._$leftspringBottom.outerHeight();\n            //记录弹簧测力计每个平衡态的固定值\n            self._helper.leftSpringStaticProduct = 24;\n            self._helper.rightSpringStaticProduct = 0;\n        }\n    }, {\n        key: 'resize',\n        value: function resize(data) {\n            var self = this;\n            //弹簧测力计底部高度\n            self._helper.springBottomHeight = self._helper.domObj._$leftspringBottom.outerHeight();\n            //大弹簧测力计每一重力伸长的长度\n            self._helper._bigSpringEveryWeightHeight = parseInt((self._helper.bigSpringInitTop - self._helper.bigSpringInitTop / 10.4) / 5);\n            if (self._helper.ratio !== self._helper.lastRatio) {\n                //获取弹簧测力计底部的top值\n                self._helper.springBottomTop = self._helper.springBottomTop * data;\n                //大弹簧测力计的初始top值\n                self._helper.bigSpringInitTop = self._helper.bigSpringInitTop * data;\n                //左边大弹簧测力计\n                self._helper.leftBigSpringTop = self._helper.leftBigSpringTop * data;\n                //右边大弹簧测力计\n                self._helper.rightBigSpringTop = self._helper.rightBigSpringTop * data;\n                //左边弹簧测力计伸长的值\n                self._helper.leftSpringBottomTop = self._helper.leftSpringBottomTop * data;\n                //右边弹簧测力计伸长的值\n                self._helper.rightSpringBottomTop = self._helper.rightSpringBottomTop * data;\n                //左边箭头伸长的值\n                self._helper.leftSpringArrowHeight = self._helper.leftSpringArrowHeight * data;\n                //右边箭头伸长的值\n                self._helper.rightSpringArrowHeight = self._helper.rightSpringArrowHeight * data;\n            }\n        }\n        //渲染弹簧测力计\n\n    }, {\n        key: '_renderSpringDynamometer',\n        value: function _renderSpringDynamometer() {\n            var self = this;\n            //判断有无弹簧测力计\n            if (self._helper.hasLeftSpring == true) {\n                self._helper.domObj._$leftSpringWrap.removeClass('hide_dom');\n            } else {\n                self._helper.domObj._$leftSpringWrap.addClass('hide_dom');\n            }\n            if (self._helper.hasRightSpring == true) {\n                self._helper.domObj._$rightSpringWrap.removeClass('hide_dom');\n            } else {\n                self._helper.domObj._$rightSpringWrap.addClass('hide_dom');\n            }\n            //加减号按钮状态\n            self._WeightBtnStatus();\n            //左边\n            //旋转角度\n            self._helper.domObj._$leftWeightWrap.css({ transform: 'rotate(' + self._helper.leftSpringDegree + 'deg)' });\n            //弹簧测力计伸长\n            self._helper.domObj._$leftspringBottom.css({ top: self._helper.leftSpringBottomTop });\n            //箭头长度\n            self._helper.domObj._$springleftArrow.css({ height: self._helper.leftSpringArrowHeight });\n            //拖动按钮位置变化\n            self._helper.domObj._$leftDragBtn.css({ left: 0, top: self._helper.leftSpringArrowHeight });\n            //大弹簧测力计\n            self._helper.domObj._$bigLeftspringBottom.css({ top: self._helper.leftBigSpringTop });\n            //拖动按钮旋转角度\n            self._helper.domObj._$leftDragBtn.css({ transform: 'rotate(' + -self._helper.leftSpringDegree + 'deg)' });\n            //右边\n            //旋转角度\n            self._helper.domObj._$rightWeightWrap.css({ transform: 'rotate(' + self._helper.rightSpringDegree + 'deg)' });\n            //弹簧测力计伸长\n            self._helper.domObj._$rightspringBottom.css({ top: self._helper.rightSpringBottomTop });\n            //箭头长度\n            self._helper.domObj._$springrightArrow.css({ height: self._helper.rightSpringArrowHeight });\n            //拖动按钮位置变化\n            self._helper.domObj._$rightDragBtn.css({ left: 0, top: self._helper.rightSpringArrowHeight });\n            //大弹簧测力计\n            self._helper.domObj._$bigRightspringBottom.css({ top: self._helper.rightBigSpringTop });\n            //拖动按钮旋转角度\n            self._helper.domObj._$rightDragBtn.css({ transform: 'rotate(' + -self._helper.rightSpringDegree + 'deg)' });\n        }\n        //增加弹簧测力计\n\n    }, {\n        key: '_addSpringDynamometer',\n        value: function _addSpringDynamometer(event) {\n            var self = this;\n            if ($(event.target).hasClass('js_left')) {\n                if (self._helper.domObj._$leftWeightItemWrap.children().length < 1) {\n                    self._helper.domObj._$leftSpringWrap.removeClass('hide_dom');\n                    self._helper.hasLeftSpring = true;\n                }\n            }\n            if ($(event.target).hasClass('js_right')) {\n                if (self._helper.domObj._$rightWeightItemWrap.children().length < 1) {\n                    self._helper.domObj._$rightSpringWrap.removeClass('hide_dom');\n                    self._helper.hasRightSpring = true;\n                }\n            }\n            //加减号按钮状态\n            self._WeightBtnStatus();\n        }\n        //删除弹簧测力计\n\n    }, {\n        key: '_deleteSpringDynamometer',\n        value: function _deleteSpringDynamometer(event) {\n            var self = this;\n            if ($(event.target).hasClass('js_left')) {\n                if (self._helper.domObj._$leftWeightItemWrap.children().length < 1) {\n                    self._helper.domObj._$leftSpringWrap.addClass('hide_dom');\n                    self._helper.hasLeftSpring = false;\n                    //初始化左边弹簧测力计\n                    self._initLeftSpring();\n                    self._renderSpringDynamometer();\n                }\n            }\n            if ($(event.target).hasClass('js_right')) {\n                if (self._helper.domObj._$rightWeightItemWrap.children().length < 1) {\n                    self._helper.domObj._$rightSpringWrap.addClass('hide_dom');\n                    self._helper.hasRightSpring = false;\n                    //初始化右边弹簧测力计\n                    self._initRightSpring();\n                    self._renderSpringDynamometer();\n                }\n            }\n            //加减号按钮状态\n            self._WeightBtnStatus();\n        }\n        //初始化左边弹簧测力计\n\n    }, {\n        key: '_initLeftSpring',\n        value: function _initLeftSpring() {\n            var self = this;\n            self._helper.leftSpringArrowHeight = 0;\n            self._helper.leftSpringDegree = 0;\n            self._helper.leftWeightNum = 0;\n            self._helper.leftSpringBottomTop = self._helper.springBottomTop;\n            self._helper.leftSpringMoveDistance.X = 0;\n            self._helper.leftSpringMoveDistance.Y = 0;\n        }\n        //初始化右边弹簧测力计\n\n    }, {\n        key: '_initRightSpring',\n        value: function _initRightSpring() {\n            var self = this;\n            self._helper.rightSpringArrowHeight = 0;\n            self._helper.rightSpringDegree = 0;\n            self._helper.rightWeightNum = 0;\n            self._helper.rightSpringBottomTop = self._helper.springBottomTop;\n            self._helper.rightSpringMoveDistance.X = 0;\n            self._helper.rightSpringMoveDistance.Y = 0;\n        }\n        //当前弹簧测力计状态判定\n\n    }, {\n        key: '_setSpringMoveStatus',\n        value: function _setSpringMoveStatus(event) {\n            var self = this;\n            if ($(event.target).hasClass('js_left_drag_btn')) {\n                self._helper.leftSpringActive = true;\n                self._helper.rightSpringActive = false;\n            }\n            if ($(event.target).hasClass('js_right_drag_btn')) {\n                self._helper.rightSpringActive = true;\n                self._helper.leftSpringActive = false;\n            }\n        }\n        //清空上下左右高亮样式\n\n    }, {\n        key: '_clearDragBtnHighlight',\n        value: function _clearDragBtnHighlight() {\n            var self = this;\n            self._helper.domObj._$leftDragBtn.children().removeClass('ui_btn_active');\n            self._helper.domObj._$rightDragBtn.children().removeClass('ui_btn_active');\n        }\n        //设置弹簧测力计不可动，清空高亮样式\n\n    }, {\n        key: '_setSpringMoveFalse',\n        value: function _setSpringMoveFalse() {\n            var self = this;\n            self._helper.rightSpringActive = false;\n            self._helper.leftSpringActive = false;\n            setTimeout(function () {\n                self._helper.domObj._$leftMagnifier.addClass('hide_dom');\n                self._helper.domObj._$rightMagnifier.addClass('hide_dom');\n            }, 1300);\n            //清空高亮样式\n            self._helper.domObj._$leftDragBtn.children().removeClass('ui_btn_active');\n            self._helper.domObj._$rightDragBtn.children().removeClass('ui_btn_active');\n        }\n        //拖动弹簧测力计\n\n    }, {\n        key: '_dragSpring',\n        value: function _dragSpring(event) {\n            var self = this;\n            //关闭自动平衡按钮\n            self._closeAutoBalanceBtn();\n            //每次移动距离\n            var moveDistanceX = self._helper.mouseX - self._helper.mouseinitialPosition.X;\n            var moveDistanceY = self._helper.mouseY - self._helper.mouseinitialPosition.Y;\n            //如果垂直方向移动距离大于水平距离\n            if (Math.abs(moveDistanceY) > Math.abs(moveDistanceX) && Math.abs(moveDistanceY) > self._helper._ArrowEveryHeight * 2) {\n                //左边\n                if (self._helper.leftSpringActive) {\n                    self._helper.domObj._$leftMagnifier.removeClass('hide_dom');\n                    self._helper.leftSpringMoveDistance.Y = moveDistanceY + self._helper.leftInitSpringMoveDistance.Y;\n                    //弹簧测力计伸长\n                    self._helper.leftSpringBottomTop = self._helper.springBottomTop + self._helper.leftSpringMoveDistance.Y / 2;\n                    //大弹簧测力计伸长\n                    self._helper.leftBigSpringTop = self._helper.bigSpringInitTop + self._helper.leftSpringMoveDistance.Y / 2 * self._helper.BigAndSmallProportion;\n                    //箭头伸长\n                    self._helper.leftSpringArrowHeight = self._helper.leftSpringMoveDistance.Y / 2;\n                    //按钮高亮\n                    if (moveDistanceY > 0) {\n                        self._clearDragBtnHighlight();\n                        self._helper.domObj._$leftDragBtn.find('.sBottom').addClass('ui_btn_active');\n                    } else if (moveDistanceY < 0) {\n                        self._clearDragBtnHighlight();\n                        self._helper.domObj._$leftDragBtn.find('.sTop').addClass('ui_btn_active');\n                    } else {\n                        self._clearDragBtnHighlight();\n                    }\n                }\n                //右边\n                if (self._helper.rightSpringActive) {\n                    self._helper.domObj._$rightMagnifier.removeClass('hide_dom');\n                    self._helper.rightSpringMoveDistance.Y = moveDistanceY + self._helper.rightInitSpringMoveDistance.Y;\n                    //弹簧测力计伸长\n                    self._helper.rightSpringBottomTop = self._helper.springBottomTop + self._helper.rightSpringMoveDistance.Y / 2;\n                    //大弹簧测力计伸长\n                    self._helper.rightBigSpringTop = self._helper.bigSpringInitTop + self._helper.rightSpringMoveDistance.Y / 2 * self._helper.BigAndSmallProportion;\n\n                    //箭头伸长\n                    self._helper.rightSpringArrowHeight = self._helper.rightSpringMoveDistance.Y / 2;\n                    //按钮高亮\n                    if (moveDistanceY > 0) {\n                        self._clearDragBtnHighlight();\n                        self._helper.domObj._$rightDragBtn.find('.sBottom').addClass('ui_btn_active');\n                    } else if (moveDistanceY < 0) {\n                        self._clearDragBtnHighlight();\n                        self._helper.domObj._$rightDragBtn.find('.sTop').addClass('ui_btn_active');\n                    } else {\n                        self._clearDragBtnHighlight();\n                    }\n                }\n                self._setStrenth();\n                //设置固定值\n                self._setSpringStaticProduct();\n            } else if (Math.abs(moveDistanceY) < Math.abs(moveDistanceX)) {\n                //如果垂直方向移动距离小于等于水平距离\n                //左边\n                if (self._helper.leftSpringActive) {\n                    if (self._helper.leftSpringArrowHeight != 0) {\n                        self._helper.domObj._$leftMagnifier.removeClass('hide_dom');\n                    }\n                    var leftHypotenuseHeight = self._helper.springBottomHeight + self._helper.leftSpringBottomTop + self._helper.leftSpringArrowHeight;\n                    //计算sin\n                    self._helper.leftSpringMoveDistance.X = moveDistanceX;\n                    var sinValue = -self._helper.leftSpringMoveDistance.X / leftHypotenuseHeight;\n                    sinValue = sinValue > 1 ? 1 : sinValue < -1 ? -1 : sinValue;\n                    //弹簧测力计旋转的角度\n                    self._helper.leftSpringDegree = parseInt(Math.asin(sinValue) / (2 * Math.PI) * 360) + self._helper.initleftSpringDegree;\n                    //角度范围判断\n                    self._springDegreeRange();\n                    self._operateSpring(event, self._helper.leftSpringBottomTop, self._helper.leftSpringArrowHeight, self._helper.leftWeightNum);\n                    //按钮高亮\n                    if (moveDistanceX < 0) {\n                        self._clearDragBtnHighlight();\n                        self._helper.domObj._$leftDragBtn.find('.sLeft').addClass('ui_btn_active');\n                    } else if (moveDistanceX > 0) {\n                        self._clearDragBtnHighlight();\n                        self._helper.domObj._$leftDragBtn.find('.sRight').addClass('ui_btn_active');\n                    } else {\n                        self._clearDragBtnHighlight();\n                    }\n                }\n                //右边\n                if (self._helper.rightSpringActive) {\n                    if (self._helper.rightSpringArrowHeight != 0) {\n                        self._helper.domObj._$rightMagnifier.removeClass('hide_dom');\n                    }\n                    var rightHypotenuseHeight = self._helper.springBottomHeight + self._helper.rightSpringBottomTop + self._helper.rightSpringArrowHeight;\n                    self._helper.rightSpringMoveDistance.X = moveDistanceX;\n                    var _sinValue = -self._helper.rightSpringMoveDistance.X / rightHypotenuseHeight;\n                    _sinValue = _sinValue > 1 ? 1 : _sinValue < -1 ? -1 : _sinValue;\n                    //弹簧测力计旋转的角度\n                    self._helper.rightSpringDegree = parseInt(Math.asin(_sinValue) / (2 * Math.PI) * 360) + self._helper.initrightSpringDegree;\n                    //角度范围判断\n                    self._springDegreeRange();\n                    self._operateSpring(event, self._helper.rightSpringBottomTop, self._helper.rightSpringArrowHeight, self._helper.rightWeightNum);\n                    //按钮高亮\n                    if (moveDistanceX < 0) {\n                        self._clearDragBtnHighlight();\n                        self._helper.domObj._$rightDragBtn.find('.sLeft').addClass('ui_btn_active');\n                    } else if (moveDistanceX > 0) {\n                        self._clearDragBtnHighlight();\n                        self._helper.domObj._$rightDragBtn.find('.sRight').addClass('ui_btn_active');\n                    } else {\n                        self._clearDragBtnHighlight();\n                    }\n                }\n            }\n            self._renderSpringDynamometer();\n            self._springBottomRange();\n            self._springArrowRange();\n            self._helper.leftSpringArrowHeightBefore = self._helper.leftSpringArrowHeight;\n            self._helper.rightSpringArrowHeightBefore = self._helper.rightSpringArrowHeight;\n        }\n        //判断弹簧测力计伸长的范围\n\n    }, {\n        key: '_springBottomRange',\n        value: function _springBottomRange() {\n            var self = this;\n            if (self._helper.leftSpringBottomTop < self._helper.springBottomTop) {\n                self._helper.leftSpringBottomTop = self._helper.springBottomTop;\n            }\n            if (self._helper.leftSpringBottomTop > self._helper.springBottomTop * 2.8) {\n                self._helper.leftSpringBottomTop = self._helper.springBottomTop * 2.8;\n            }\n            if (self._helper.leftBigSpringTop < self._helper.bigSpringInitTop) {\n                self._helper.leftBigSpringTop = self._helper.bigSpringInitTop;\n            }\n            if (self._helper.leftBigSpringTop > self._helper.bigSpringInitTop / 10.4) {\n                self._helper.leftBigSpringTop = self._helper.bigSpringInitTop / 10.4;\n            }\n            //弹簧测力计伸长\n            self._helper.domObj._$leftspringBottom.css({ top: self._helper.leftSpringBottomTop });\n            self._helper.domObj._$bigLeftspringBottom.css({ top: self._helper.leftBigSpringTop });\n\n            if (self._helper.rightSpringBottomTop < self._helper.springBottomTop) {\n                self._helper.rightSpringBottomTop = self._helper.springBottomTop;\n            }\n            if (self._helper.rightSpringBottomTop > self._helper.springBottomTop * 2.8) {\n                self._helper.rightSpringBottomTop = self._helper.springBottomTop * 2.8;\n            }\n            if (self._helper.rightBigSpringTop < self._helper.bigSpringInitTop) {\n                self._helper.rightBigSpringTop = self._helper.bigSpringInitTop;\n            }\n            if (self._helper.rightBigSpringTop > self._helper.bigSpringInitTop / 10.4) {\n                self._helper.rightBigSpringTop = self._helper.bigSpringInitTop / 10.4;\n            }\n            //弹簧测力计伸长\n            self._helper.domObj._$rightspringBottom.css({ top: self._helper.rightSpringBottomTop });\n            self._helper.domObj._$bigRightspringBottom.css({ top: self._helper.rightBigSpringTop });\n        }\n        //判断箭头伸长的范围\n\n    }, {\n        key: '_springArrowRange',\n        value: function _springArrowRange() {\n            var self = this;\n            self._helper.leftSpringArrowHeight = self._helper.leftSpringArrowHeight <= 0 ? 0 : self._helper.leftSpringArrowHeight > self._helper._ArrowEveryHeight * 5 ? self._helper._ArrowEveryHeight * 5 : self._helper.leftSpringArrowHeight;\n            self._helper.domObj._$springleftArrow.css({ height: self._helper.leftSpringArrowHeight });\n            //拖动按钮位置变化\n            self._helper.domObj._$leftDragBtn.css({ left: 0, top: self._helper.leftSpringArrowHeight });\n            self._helper.rightSpringArrowHeight = self._helper.rightSpringArrowHeight <= 0 ? 0 : self._helper.rightSpringArrowHeight > self._helper._ArrowEveryHeight * 5 ? self._helper._ArrowEveryHeight * 5 : self._helper.rightSpringArrowHeight;\n            self._helper.domObj._$springrightArrow.css({ height: self._helper.rightSpringArrowHeight });\n            //拖动按钮位置变化\n            self._helper.domObj._$rightDragBtn.css({ right: 0, top: self._helper.rightSpringArrowHeight });\n        }\n        //判断弹簧测力计角度问题\n\n    }, {\n        key: '_springDegreeRange',\n        value: function _springDegreeRange() {\n            var self = this;\n            self._helper.leftSpringDegree = self._helper.leftSpringDegree > 36 ? 36 : self._helper.leftSpringDegree < -36 ? -36 : self._helper.leftSpringDegree;\n            self._helper.rightSpringDegree = self._helper.rightSpringDegree > 36 ? 36 : self._helper.rightSpringDegree < -36 ? -36 : self._helper.rightSpringDegree;\n        }\n        //矩阵算rotate\n\n    }, {\n        key: 'getmatrix',\n        value: function getmatrix(a, b, c, d, e, f) {\n            var aa = Math.round(180 * Math.asin(a) / Math.PI);\n            var bb = Math.round(180 * Math.acos(b) / Math.PI);\n            var cc = Math.round(180 * Math.asin(c) / Math.PI);\n            var dd = Math.round(180 * Math.acos(d) / Math.PI);\n            var deg = 0;\n            if (aa == bb || -aa == bb) {\n                deg = dd;\n            } else if (-aa + bb == 180) {\n                deg = 180 + cc;\n            } else if (aa + bb == 180) {\n                deg = -cc || -dd;\n            }\n            return deg >= 360 ? 0 : deg;\n        }\n        //保存鼠标初始位置\n\n    }, {\n        key: '_saveInitialMousePosition',\n        value: function _saveInitialMousePosition(event) {\n            var self = this;\n            self._helper.mouseinitialPosition.X = self._helper.mouseX;\n            self._helper.mouseinitialPosition.Y = self._helper.mouseY;\n            self._helper.initleftSpringDegree = eval('self.get' + self._helper.domObj._$leftWeightWrap.css('transform'));\n            self._helper.initrightSpringDegree = eval('self.get' + self._helper.domObj._$rightWeightWrap.css('transform'));\n            //保存固定值\n            self._setSpringStaticProduct();\n            //左边初始移动距离\n            self._helper.leftInitSpringMoveDistance.Y = self._helper.domObj._$springleftArrow.outerHeight() * 2;\n            //右边初始移动距离\n            self._helper.rightInitSpringMoveDistance.Y = self._helper.domObj._$springrightArrow.outerHeight() * 2;\n        }\n        //设置力\n\n    }, {\n        key: '_setStrenth',\n        value: function _setStrenth() {\n            var self = this;\n            if (self._helper.hasLeftSpring) {\n                self._helper.leftWeightNum = parseInt(self._helper.domObj._$springleftArrow.outerHeight() / self._helper._ArrowEveryHeight);\n            }\n            if (self._helper.hasRightSpring) {\n                self._helper.rightWeightNum = parseInt(self._helper.domObj._$springrightArrow.outerHeight() / self._helper._ArrowEveryHeight);\n            }\n        }\n        //加减号按钮状态\n\n    }, {\n        key: '_WeightBtnStatus',\n        value: function _WeightBtnStatus() {\n            var self = this;\n            //左边\n            if (self._helper.domObj._$leftWeightItemWrap.children().length < 1) {\n                if (self._helper.hasLeftSpring) {\n                    self._helper.domObj._$leftWeightWrap.find('.js_addStrength_btn').addClass('click_disabled');\n                    self._helper.domObj._$leftWeightWrap.find('.js_deleteStrength_btn').removeClass('click_disabled');\n                } else if (!self._helper.hasLeftSpring) {\n                    self._helper.domObj._$leftWeightWrap.find('.js_addStrength_btn').removeClass('click_disabled');\n                    self._helper.domObj._$leftWeightWrap.find('.js_deleteStrength_btn').addClass('click_disabled');\n                }\n            }\n            //右边\n            if (self._helper.domObj._$rightWeightItemWrap.children().length < 1) {\n                if (self._helper.hasRightSpring) {\n                    self._helper.domObj._$rightWeightWrap.find('.js_addStrength_btn').addClass('click_disabled');\n                    self._helper.domObj._$rightWeightWrap.find('.js_deleteStrength_btn').removeClass('click_disabled');\n                } else if (!self._helper.hasRightSpring) {\n                    self._helper.domObj._$rightWeightWrap.find('.js_addStrength_btn').removeClass('click_disabled');\n                    self._helper.domObj._$rightWeightWrap.find('.js_deleteStrength_btn').addClass('click_disabled');\n                }\n            }\n        }\n        //两边都是弹簧测力计的平衡情况\n\n    }, {\n        key: '_twoSpringChange',\n        value: function _twoSpringChange(event, targetScale, initiativeScale, targetSliderCoordinate, targetSliderdom) {\n            var self = this;\n            if ($(event.target).hasClass('js_left_drag_btn') || $(event.target).hasClass('js_right_drag_btn')) {\n                self._closeAutoBalanceBtn();\n            }\n            //初始化左边弹簧测力计\n            self._initLeftSpring();\n            //初始化右边弹簧测力计\n            self._initRightSpring();\n            //渲染弹簧测力计\n            self._renderSpringDynamometer();\n            targetScale = initiativeScale > 25 ? 25 : initiativeScale < 2 ? 2 : initiativeScale;\n            if (targetSliderCoordinate == self._helper.leftSliderCoordinate) {\n                targetSliderCoordinate.X = self._helper.leverWidth / 2 - targetScale * self._helper.everyScale - self._helper.SliderWidth / 2;\n            } else if (targetSliderCoordinate == self._helper.rightSliderCoordinate) {\n                targetSliderCoordinate.X = self._helper.leverWidth / 2 + targetScale * self._helper.everyScale - self._helper.SliderWidth / 2;\n            }\n            targetSliderdom.css({ left: targetSliderCoordinate.X, top: targetSliderCoordinate.Y });\n        }\n        //关闭自动平衡按钮\n\n    }, {\n        key: '_closeAutoBalanceBtn',\n        value: function _closeAutoBalanceBtn() {\n            var self = this;\n            self._helper.domObj._$autoBalanceBtn.prop(\"checked\", false);\n            self._helper.domObj._$autoBalanceBtn.parent().removeClass(\"checked\");\n            if (self._helper.currentScene == 1) {\n                self._helper.Explore.autoBalance = false;\n            } else if (self._helper.currentScene == 2) {\n                self._helper.Experiment.autoBalance = false;\n            }\n        }\n        //操作弹簧测力计\n\n    }, {\n        key: '_operateSpring',\n        value: function _operateSpring(event, SpringBottomTop, targetSpringArrowHeight, targetWeightNum) {\n            var self = this;\n            //弹簧的伸长等于砝码的力\n            if (targetWeightNum == self._helper.leftWeightNum && self._helper.leftIsActiveSide == true) {\n                if (self._helper.leftSpringArrowHeight != 0) {\n                    self._helper.domObj._$leftMagnifier.removeClass('hide_dom');\n                }\n                self._helper.leftScale = self._helper.leftScale <= 0 ? 2 : self._helper.leftScale;\n                targetWeightNum = Math.abs(self._helper.leftSpringStaticProduct / self._helper.leftScale);\n                self._helper.leftWeightNum = targetWeightNum > 5 ? 5 : targetWeightNum;\n            } else if (targetWeightNum == self._helper.rightWeightNum && self._helper.rightIsActiveSide == true) {\n                if (self._helper.rightSpringArrowHeight != 0) {\n                    self._helper.domObj._$rightMagnifier.removeClass('hide_dom');\n                }\n                self._helper.rightScale = self._helper.rightScale <= 0 ? 2 : self._helper.rightScale;\n                targetWeightNum = Math.abs(self._helper.rightSpringStaticProduct / self._helper.rightScale);\n                self._helper.rightWeightNum = targetWeightNum > 5 ? 5 : targetWeightNum;\n            }\n            //弹簧的伸长等于砝码的力\n            if (SpringBottomTop == self._helper.leftSpringBottomTop && self._helper.leftIsActiveSide == true) {\n                self._helper.leftSpringBottomTop = self._helper.springBottomTop + self._helper.leftWeightNum * self._helper._springEveryWeightHeight;\n                self._helper.leftBigSpringTop = self._helper.bigSpringInitTop - self._helper.leftWeightNum * self._helper._bigSpringEveryWeightHeight;\n            } else if (SpringBottomTop == self._helper.rightSpringBottomTop && self._helper.rightIsActiveSide == true) {\n                self._helper.rightSpringBottomTop = self._helper.springBottomTop + self._helper.rightWeightNum * self._helper._springEveryWeightHeight;\n                self._helper.rightBigSpringTop = self._helper.bigSpringInitTop - self._helper.rightWeightNum * self._helper._bigSpringEveryWeightHeight;\n            }\n            //箭头长度\n            if (targetSpringArrowHeight == self._helper.leftSpringArrowHeight && self._helper.leftIsActiveSide == true) {\n                self._helper.leftSpringArrowHeight = self._helper.leftWeightNum * self._helper._springEveryWeightHeight;\n            } else if (targetSpringArrowHeight == self._helper.rightSpringArrowHeight && self._helper.rightIsActiveSide == true) {\n                self._helper.rightSpringArrowHeight = self._helper.rightWeightNum * self._helper._springEveryWeightHeight;\n            }\n\n            //弹簧测力计的范围\n            self._springBottomRange();\n            //箭头的范围\n            self._springArrowRange();\n            //渲染弹簧测力计\n            self._renderSpringDynamometer();\n        }\n        //设置弹簧测力计每个状态固定值\n\n    }, {\n        key: '_setSpringStaticProduct',\n        value: function _setSpringStaticProduct() {\n            var self = this;\n            self._helper.leftSpringStaticProduct = self._helper.leftWeightNum * self._helper.leftScale;\n            self._helper.rightSpringStaticProduct = self._helper.rightWeightNum * self._helper.rightScale;\n        }\n    }]);\n\n    return SpringDynamometer;\n}();\n\nexports.SpringDynamometer = SpringDynamometer;\n\n//////////////////\n// WEBPACK FOOTER\n// ./ref/presenters/BalanceRuler/libs/SpringDynamometer.js\n// module id = 6\n// module chunks = 0\n//# sourceURL=webpack:///./ref/presenters/BalanceRuler/libs/SpringDynamometer.js?");

/***/ },
/* 7 */
/***/ function(module, exports) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Slider = function () {\n    function Slider() {\n        _classCallCheck(this, Slider);\n    }\n\n    _createClass(Slider, [{\n        key: 'init',\n        value: function init(opt) {\n            var self = this;\n            self.opt = $.extend({}, opt);\n            self._helper = self.opt.helper;\n            //滑块宽度\n            self._helper.SliderWidth = self._helper.domObj._$leftSlider.outerWidth();\n            //杠杆宽度\n            self._helper.leverWidth = self._helper.domObj._$lever.outerWidth();\n            //每个刻度多长\n            self._helper.everyScale = self._helper.leverWidth / 50;\n            //左右滑块的坐标\n            self._helper.leftSliderCoordinate = {\n                X: (self._helper.leverWidth - self._helper.SliderWidth) / 2 - self._helper.everyScale * 12,\n                Y: self._helper.leverHeight * 3 / 5\n            };\n            self._helper.rightSliderCoordinate = {\n                X: (self._helper.leverWidth - self._helper.SliderWidth) / 2 + self._helper.everyScale * 12,\n                Y: self._helper.leverHeight * 3 / 5\n            };\n            //左滑块\n            self._helper.leftIsMoving = false;\n            //右滑块\n            self._helper.rightIsMoving = false;\n            //左边刻度\n            self._helper.realLeftScale = 0;\n            //右边刻度\n            self._helper.realRightScale = 0;\n            //左边刻度\n            self._helper.leftScale = 0;\n            //右边刻度\n            self._helper.rightScale = 0;\n        }\n    }, {\n        key: 'resize',\n        value: function resize(data) {\n            var self = this;\n            //滑块宽度\n            self._helper.SliderWidth = self._helper.domObj._$leftSlider.outerWidth();\n            //杠杆宽度\n            self._helper.leverWidth = self._helper.domObj._$lever.outerWidth();\n            //每个刻度多长\n            self._helper.everyScale = self._helper.leverWidth / 50;\n            //if(self._helper.ratio !== self._helper.lastRatio){\n            //左右滑块的坐标\n            self._helper.leftSliderCoordinate = {\n                X: self._helper.leftSliderCoordinate.X * data,\n                Y: self._helper.leftSliderCoordinate.Y * data\n            };\n            self._helper.rightSliderCoordinate = {\n                X: self._helper.rightSliderCoordinate.X * data,\n                Y: self._helper.rightSliderCoordinate.Y * data\n            };\n            //}\n        }\n        //改变滑块位置\n\n    }, {\n        key: '_sliderMove',\n        value: function _sliderMove() {\n            var self = this;\n            self._sliderRange();\n            self._helper.domObj._$leftSlider.css({ left: self._helper.leftSliderCoordinate.X, top: self._helper.leftSliderCoordinate.Y });\n            self._helper.domObj._$rightSlider.css({ left: self._helper.rightSliderCoordinate.X, top: self._helper.rightSliderCoordinate.Y });\n        }\n        //拖动滑块\n\n    }, {\n        key: '_dragSlider',\n        value: function _dragSlider(event) {\n            var self = this;\n            if ($(event.target).hasClass('js_left_slider_toleft')) {\n                self._moveToLeft(self._helper.leftSliderCoordinate);\n            }\n            if ($(event.target).hasClass('js_left_slider_toright')) {\n                self._sliderLeftToRight();\n            }\n            if ($(event.target).hasClass('js_right_slider_toleft')) {\n                self._sliderRightToLeft();\n            }\n            if ($(event.target).hasClass('js_right_slider_toright')) {\n                self._sliderRightToRight();\n            }\n            self._sliderMove();\n        }\n        //左往左\n\n    }, {\n        key: '_sliderLeftToLeft',\n        value: function _sliderLeftToLeft() {\n            var self = this;\n            self._moveToLeft(self._helper.leftSliderCoordinate);\n        }\n        //左往右\n\n    }, {\n        key: '_sliderLeftToRight',\n        value: function _sliderLeftToRight() {\n            var self = this;\n            self._moveToRight(self._helper.leftSliderCoordinate);\n        }\n        //右往左\n\n    }, {\n        key: '_sliderRightToLeft',\n        value: function _sliderRightToLeft() {\n            var self = this;\n            self._moveToLeft(self._helper.rightSliderCoordinate);\n        }\n        //右往右\n\n    }, {\n        key: '_sliderRightToRight',\n        value: function _sliderRightToRight() {\n            var self = this;\n            self._moveToRight(self._helper.rightSliderCoordinate);\n        }\n        //往左移动\n\n    }, {\n        key: '_moveToLeft',\n        value: function _moveToLeft(target) {\n            var self = this;\n            var slider = target;\n            slider.X = slider.X - self._helper.everyScale;\n        }\n        //往右移动\n\n    }, {\n        key: '_moveToRight',\n        value: function _moveToRight(target) {\n            var self = this;\n            var slider = target;\n            slider.X = slider.X + self._helper.everyScale;\n        }\n        //判断滑块范围\n\n    }, {\n        key: '_sliderRange',\n        value: function _sliderRange() {\n            var self = this;\n            if (self._helper.rightSliderCoordinate.X < self._helper.leverWidth / 2 + self._helper.everyScale * 2 - self._helper.SliderWidth / 2) {\n                self._helper.rightSliderCoordinate.X = self._helper.leverWidth / 2 + self._helper.everyScale * 2 - self._helper.SliderWidth / 2;\n            }\n            if (self._helper.rightSliderCoordinate.X > self._helper.leverWidth - self._helper.SliderWidth / 2) {\n                self._helper.rightSliderCoordinate.X = self._helper.leverWidth - self._helper.SliderWidth / 2;\n            }\n            if (self._helper.leftSliderCoordinate.X < -self._helper.SliderWidth / 2) {\n                self._helper.leftSliderCoordinate.X = -self._helper.SliderWidth / 2;\n            }\n            if (self._helper.leftSliderCoordinate.X > self._helper.leverWidth / 2 - self._helper.SliderWidth - self._helper.everyScale * 2 + self._helper.SliderWidth / 2 - 1) {\n                self._helper.leftSliderCoordinate.X = self._helper.leverWidth / 2 - self._helper.SliderWidth - self._helper.everyScale * 2 + self._helper.SliderWidth / 2 - 1;\n            }\n        }\n        //设置刻度数\n\n    }, {\n        key: '_setScaleNum',\n        value: function _setScaleNum() {\n            var self = this;\n            self._helper.realLeftScale = (self._helper.leverWidth / 2 - self._helper.leftSliderCoordinate.X - self._helper.SliderWidth / 2) / self._helper.everyScale;\n            self._helper.realRightScale = (self._helper.rightSliderCoordinate.X - self._helper.leverWidth / 2 + self._helper.SliderWidth / 2) / self._helper.everyScale;\n            self._helper.leftScale = Math.round(self._helper.realLeftScale);\n            self._helper.rightScale = Math.round(self._helper.realRightScale);\n            console.log('self._helper.leftSliderCoordinate.Y', self._helper.leftSliderCoordinate.Y);\n            //显示刻度数\n            self._showScaleNum();\n        }\n        //显示刻度数\n\n    }, {\n        key: '_showScaleNum',\n        value: function _showScaleNum() {\n            var self = this;\n            self._helper.domObj._$leftScaleTxt.text(self._helper.leftScale);\n            self._helper.domObj._$rightScaleTxt.text(self._helper.rightScale);\n            if (self._helper.currentScene == 1) {\n                if (self._helper.hasLeftSpring) {\n                    self._helper.leftScale = self._helper.leftScale + parseInt(self._helper.leftSpringDegree / 10);\n                }\n                if (self._helper.hasRightSpring) {\n                    self._helper.rightScale = self._helper.rightScale - parseInt(self._helper.rightSpringDegree / 10);\n                }\n            }\n        }\n        //判断滑块状态\n\n    }, {\n        key: '_judgeSliderMoveStatus',\n        value: function _judgeSliderMoveStatus(event) {\n            var self = this;\n            if ($(event.target).hasClass('js_left_slider_toleft') || $(event.target).hasClass('js_left_slider_toright')) {\n                self._helper.Explore.leftSliderIsMoving = true;\n                self._helper.Explore.rightSliderIsMoving = false;\n            }\n            if ($(event.target).hasClass('js_right_slider_toleft') || $(event.target).hasClass('js_right_slider_toright')) {\n                self._helper.Explore.leftSliderIsMoving = false;\n                self._helper.Explore.rightSliderIsMoving = true;\n            }\n            clearInterval(self._helper.sliderMoveInterval);\n        }\n        //将滑块状态设为false\n\n    }, {\n        key: '_SliderMoveFalse',\n        value: function _SliderMoveFalse() {\n            var self = this;\n            self._helper.Explore.leftSliderIsMoving = false;\n            self._helper.Explore.rightSliderIsMoving = false;\n        }\n    }]);\n\n    return Slider;\n}();\n\nexports.Slider = Slider;\n\n//////////////////\n// WEBPACK FOOTER\n// ./ref/presenters/BalanceRuler/libs/Slider.js\n// module id = 7\n// module chunks = 0\n//# sourceURL=webpack:///./ref/presenters/BalanceRuler/libs/Slider.js?");

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.Experiment = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _Weight = __webpack_require__(5);\n\nvar _BalanceNuts = __webpack_require__(9);\n\nvar _Ruler = __webpack_require__(4);\n\nvar _Slider = __webpack_require__(7);\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Experiment = function () {\n    function Experiment() {\n        _classCallCheck(this, Experiment);\n    }\n\n    _createClass(Experiment, [{\n        key: 'init',\n        value: function init(opt) {\n            var self = this;\n            self.opt = $.extend({}, opt);\n            self._helper = self.opt.helper;\n            self._Ruler = new _Ruler.Ruler();\n            self._Weight = new _Weight.Weight();\n            self._BalanceNuts = new _BalanceNuts.BalanceNuts();\n            self._Slider = new _Slider.Slider();\n            self._Ruler.init({ helper: self._helper });\n            self._Weight.init({ helper: self._helper });\n            self._BalanceNuts.init({ helper: self._helper });\n            self._Slider.init({ helper: self._helper });\n            self._helper.Experiment = {\n                //滑块坐标\n                leftSliderCoordinate: self._helper.leftSliderCoordinate,\n                rightSliderCoordinate: self._helper.rightSliderCoordinate,\n                //刻度\n                leftScale: self._helper.leftScale,\n                rightScale: self._helper.rightScale,\n                //重力\n                leftWeightNum: self._helper.leftWeightNum,\n                rightWeightNum: self._helper.rightWeightNum,\n                //表格数据\n                tableData: [],\n                //平衡螺母\n                leftNutsWeightNum: self._helper.leftNutsWeightNum,\n                rightNutsWeightNum: self._helper.rightNutsWeightNum,\n                //自动平衡按钮状态\n                //autoBalance: false,\n                //公式是否显示\n                formulaIsVisible: false,\n                //记录按钮点击次数\n                clickTimes: 0\n            };\n\n            //教师端和学生端的缩放比\n            self._helper.scalingrRatio = 1;\n            //操作的一方\n            self._helper.leftIsActiveSide = false;\n            self._helper.rightIsActiveSide = false;\n            //定时器\n            self._helper.sliderMoveInterval = null;\n            //鼠标位置\n            self._helper.mouseX = 0;\n            self._helper.mouseY = 0;\n        }\n    }, {\n        key: 'firstRender',\n        value: function firstRender() {\n            var self = this;\n            if (self._helper.currentScene != 2) {\n                return;\n            }\n            self._helper.domObj._$BalanceRulerMain.removeClass('explorer_pattern');\n            self._helper.domObj._$BalanceRulerMain.addClass('experiment_pattern');\n            self._helper.domObj._$balanceRulerBottom.find('.spolar_com_btns').addClass('experiment_pattern');\n            self._getData();\n            //初始化学生端\n            self._initializeStudentEnd();\n            self._bindEvent();\n            self._seriesOfEvents();\n            self._saveData();\n            //设置平衡螺母\n            self._BalanceNuts._renderNuts();\n            //console.log('渲染完以后平衡螺母', self._helper.Experiment.leftNutsWeightNum,self._helper.Experiment.rightNutsWeightNum);\n        }\n    }, {\n        key: 'render',\n        value: function render() {\n            var self = this;\n            if (self._helper.currentScene != 2) {\n                return;\n            }\n            clearTimeout(self._helper.rulerTimeout);\n            self._helper.domObj._$leverHighLight.addClass('hide_dom');\n            if (self._helper.Experiment.clickTimes == 0) {\n                self.firstRender();\n            } else {\n                self._helper.domObj._$leverHighLight.addClass('hide_dom');\n                self._helper.domObj._$BalanceRulerMain.removeClass('explorer_pattern');\n                self._helper.domObj._$BalanceRulerMain.addClass('experiment_pattern');\n                self._helper.domObj._$balanceRulerBottom.find('.spolar_com_btns').addClass('experiment_pattern');\n                self._getData();\n                self._bindEvent();\n                self._seriesOfEvents();\n                self._saveData();\n            }\n        }\n    }, {\n        key: 'resizeSelfData',\n        value: function resizeSelfData(data) {\n            var self = this;\n            self._helper.Experiment.leftSliderCoordinate = {\n                X: self._helper.Experiment.leftSliderCoordinate.X * data,\n                Y: self._helper.Experiment.leftSliderCoordinate.Y * data\n            };\n            self._helper.Experiment.rightSliderCoordinate = {\n                X: self._helper.Experiment.rightSliderCoordinate.X * data,\n                Y: self._helper.Experiment.rightSliderCoordinate.Y * data\n            };\n        }\n    }, {\n        key: 'resize',\n        value: function resize(data) {\n            var self = this;\n            //console.log('测量实验'+data);\n            self._Ruler.resize(data);\n            self._BalanceNuts.resize(data);\n            self._Slider.resize(data);\n            self._Weight.resize(data);\n            //拖动滑块\n            self._Slider._sliderMove();\n            ////杠杆旋转\n            //self._Ruler._leverRotate();\n            //设置砝码位置\n            self._Weight._setWeightPos();\n        }\n    }, {\n        key: '_bindEvent',\n        value: function _bindEvent() {\n            var self = this;\n            //滑块\n            self._helper.$view.on(\"mousedown touchstart\", \".js_left_slider_toleft,.js_left_slider_toright, .js_right_slider_toleft,.js_right_slider_toright,.js_left_balance_nuts,.js_left_nuts_highlight,.js_right_nuts_highlight,.js_right_balance_nuts\", this._eventHandler.bind(this));\n            self._helper.$view.on(\"mouseup touchend\", \" .js_left_balance_nuts,.js_right_balance_nuts,.js_left_nuts_highlight,.js_right_nuts_highlight,.js_BalanceRuler_main,.js_left_nuts_scroll,.js_right_nuts_scroll\", this._eventHandler.bind(this));\n            self._helper.$view.on(\"mouseup touchend touchcancel\", \".js_left_slider_toleft,.js_left_slider_toright, .js_right_slider_toleft,.js_right_slider_toright\", this._clearSlider.bind(this));\n            self._helper.$view.on(\"touchcancel\", \".js_BalanceRuler_main\", this._clearSlider.bind(this));\n            //增加重力\n            self._helper.domObj._$addStrengthBtn.on('mousedown touchstart', self._addGravity.bind(this));\n            //减少重力\n            self._helper.domObj._$deleteStrengthBtn.on('mousedown touchstart', self._deleteGravity.bind(this));\n            //插入数据按钮\n            self._helper.domObj._$pushDataBtn.on('click', self._pushTableData.bind(this));\n            //删除数据按钮\n            self._helper.domObj._$deleteDataBtn.on('click', self._deleteTableData.bind(this));\n            //显示公式按钮\n            self._helper.domObj._$formulaBtn.on('click', self._showFormula.bind(this));\n        }\n        //解绑事件\n\n    }, {\n        key: '_unBindEvent',\n        value: function _unBindEvent() {\n            var self = this;\n            //滑块\n            self._helper.$view.off(\"mousedown touchstart mousemove touchmove mouseup touchend touchcancel click\");\n            //滑块\n            self._helper.$view.off(\"click\");\n            //增加重力\n            self._helper.domObj._$addStrengthBtn.off('mousedown touchstart');\n            //减少重力\n            self._helper.domObj._$deleteStrengthBtn.off('mousedown touchstart');\n            //插入数据按钮\n            self._helper.domObj._$pushDataBtn.off('click');\n            //删除数据按钮\n            self._helper.domObj._$deleteDataBtn.off('click');\n            //显示公式按钮\n            self._helper.domObj._$formulaBtn.off('click');\n        }\n    }, {\n        key: '_eventHandler',\n        value: function _eventHandler(event) {\n            var self = this;\n            var eventType = this.eventMapping(event);\n            //阻止冒泡\n            event.stopPropagation();\n            switch (eventType) {\n                case \"start\":\n                    event.preventDefault();\n                    //拖动滑块\n                    self._continuousdragSlider(event);\n                    self._BalanceNuts._saveInitialMousePosition(event);\n                    break;\n                case \"move\":\n                    break;\n                case \"end\":\n                    //鼠标放开发生的事件\n                    self._BalanceNuts._setNutsWeightPosition();\n                    self._Ruler._leverRotate();\n                    //设置砝码位置\n                    self._Weight._setWeightPos();\n                    //清除平衡螺母样式\n                    self._clearNutHightLight();\n                    self._saveData();\n                    break;\n            }\n        }\n        //对事件类型做处理\n\n    }, {\n        key: 'eventMapping',\n        value: function eventMapping(event) {\n            var eventType = event.type;\n            var self = this;\n            var type = void 0;\n            //判断不同的事件获取鼠标的x值\n            if (eventType == \"mouseup\" || eventType == \"mousedown\") {\n                self._helper.mouseX = event.pageX;\n                self._helper.mouseY = event.pageY;\n            } else if (eventType == \"touchend\" || eventType == \"touchstart\") {\n                self._helper.mouseX = event.originalEvent.changedTouches[0].clientX;\n                self._helper.mouseY = event.originalEvent.changedTouches[0].clientY;\n            }\n            //滑块的点击态\n            switch (eventType) {\n                case \"touchstart\":\n                //阻止默认事件，不发射mouseEvent\n                case \"mousedown\":\n                    type = \"start\";\n                    break;\n                case \"mousemove\":\n                case \"touchmove\":\n                    type = \"move\";\n                    break;\n                case \"mouseup\":\n                case \"touchend\":\n                    type = \"end\";\n                    break;\n            }\n            return type;\n        }\n        //清除平衡螺母的样式\n\n    }, {\n        key: '_clearNutHightLight',\n        value: function _clearNutHightLight() {\n            var self = this;\n            self._helper.domObj._$leftBalanceNuts.find('.js_left_nuts_highlight').removeClass('active');\n            self._helper.domObj._$rightBalanceNuts.find('.js_right_nuts_highlight').removeClass('active');\n        }\n        //点击事件\n\n    }, {\n        key: '_clickEvents',\n        value: function _clickEvents(event) {\n            var self = this;\n            //拖动滑块\n            self._Slider._dragSlider(event);\n            //设置刻度数\n            self._Slider._setScaleNum();\n            //杠杆旋转\n            self._Ruler._leverRotate();\n            //杠杆高亮\n            self._Ruler._leverHighLight();\n            //设置砝码位置\n            self._Weight._setWeightPos();\n            self._saveData();\n        }\n        //渲染系列事件\n\n    }, {\n        key: '_seriesOfEvents',\n        value: function _seriesOfEvents() {\n            var self = this;\n            self._setSliderMoveFalse();\n            //拖动滑块\n            self._Slider._sliderMove();\n            //设置刻度数\n            self._Slider._setScaleNum();\n            //平衡螺母的background-position\n            self._helper.leftNutsPosition = self._helper.leftNutsWeightNum * self._helper.NutsHeight;\n            self._helper.rightNutsPosition = self._helper.rightNutsWeightNum * self._helper.NutsHeight;\n            //设置平衡螺母\n            self._BalanceNuts._renderNuts();\n            //杠杆旋转\n            self._Ruler._leverRotate();\n            //设置砝码位置\n            self._Weight._setWeightPos();\n            //渲染砝码\n            self._Weight._renderWeight();\n            //渲染弹簧测力计\n            self._renderSpring();\n            //设置砝码按钮状态\n            self._Weight._WeightBtnStatus();\n            //渲染表格\n            self._writeInTable();\n            //渲染公式弹窗\n            if (self._helper.Experiment.formulaIsVisible == true) {\n                self._showFormula();\n            }\n            //设置表格按钮状态\n            self._tableBtnStatus();\n            //设置砝码位置\n            self._Weight._setWeightPos();\n        }\n        //获取保存的数据\n\n    }, {\n        key: '_getData',\n        value: function _getData() {\n            var self = this;\n            //刻度\n            self._helper.leftScale = self._helper.Experiment.leftScale;\n            self._helper.rightScale = self._helper.Experiment.rightScale;\n            //重力\n            self._helper.leftWeightNum = self._helper.Experiment.leftWeightNum;\n            self._helper.rightWeightNum = self._helper.Experiment.rightWeightNum;\n            //坐标\n            self._helper.leftSliderCoordinate = self._helper.Experiment.leftSliderCoordinate;\n            self._helper.rightSliderCoordinate = self._helper.Experiment.rightSliderCoordinate;\n            //左边平衡螺母重量\n            self._helper.leftNutsWeightNum = self._helper.Experiment.leftNutsWeightNum;\n            self._helper.rightNutsWeightNum = self._helper.Experiment.rightNutsWeightNum;\n        }\n        //学生端获推送时的数据\n\n    }, {\n        key: '_initializeStudentEnd',\n        value: function _initializeStudentEnd() {\n            var self = this;\n            if (self._helper.model.__ExtendModel && !$.isEmptyObject(self._helper.model.__ExtendModel)) {\n                //初始化学生端的值\n                //缩放比例\n                self._helper.scalingrRatio = self._helper.leverWidth / self._helper.model.__ExtendModel.leverWidth;\n                //刻度\n                self._helper.leftScale = self._helper.model.__ExtendModel.Experiment.leftScale;\n                self._helper.rightScale = self._helper.model.__ExtendModel.Experiment.rightScale;\n                //重力\n                self._helper.leftWeightNum = self._helper.model.__ExtendModel.Experiment.leftWeightNum;\n                self._helper.rightWeightNum = self._helper.model.__ExtendModel.Experiment.rightWeightNum;\n                //坐标\n                self._helper.leftSliderCoordinate = {\n                    X: self._helper.model.__ExtendModel.Experiment.leftSliderCoordinate.X * self._helper.scalingrRatio,\n                    Y: self._helper.model.__ExtendModel.Experiment.leftSliderCoordinate.Y * self._helper.scalingrRatio\n                }, self._helper.rightSliderCoordinate = {\n                    X: self._helper.model.__ExtendModel.Experiment.rightSliderCoordinate.X * self._helper.scalingrRatio,\n                    Y: self._helper.model.__ExtendModel.Experiment.rightSliderCoordinate.Y * self._helper.scalingrRatio\n                },\n                //左边平衡螺母重量\n                self._helper.leftNutsWeightNum = self._helper.model.__ExtendModel.Experiment.leftNutsWeightNum;\n                self._helper.rightNutsWeightNum = self._helper.model.__ExtendModel.Experiment.rightNutsWeightNum;\n                //表格数据\n                self._helper.Experiment.tableData = self._helper.model.__ExtendModel.Experiment.tableData;\n                //公式显示\n                self._helper.Experiment.formulaIsVisible = self._helper.model.__ExtendModel.Experiment.formulaIsVisible;\n            }\n        }\n        //保存当前数据\n\n    }, {\n        key: '_saveData',\n        value: function _saveData() {\n            var self = this;\n            //刻度\n            self._helper.Experiment.leftScale = self._helper.leftScale;\n            self._helper.Experiment.rightScale = self._helper.rightScale;\n            //重力\n            self._helper.Experiment.leftWeightNum = self._helper.leftWeightNum;\n            self._helper.Experiment.rightWeightNum = self._helper.rightWeightNum;\n            //坐标\n            self._helper.Experiment.leftSliderCoordinate = self._helper.leftSliderCoordinate;\n            self._helper.Experiment.rightSliderCoordinate = self._helper.rightSliderCoordinate;\n            //左边平衡螺母重量\n            self._helper.Experiment.leftNutsWeightNum = self._helper.leftNutsWeightNum;\n            self._helper.Experiment.rightNutsWeightNum = self._helper.rightNutsWeightNum;\n            console.log('平衡螺母', self._helper.Experiment.leftNutsWeightNum, self._helper.Experiment.rightNutsWeightNum);\n        }\n        //连续拖动滑块\n\n    }, {\n        key: '_continuousdragSlider',\n        value: function _continuousdragSlider(event) {\n            var self = this;\n            //判断滑块状态\n            self._Slider._judgeSliderMoveStatus(event);\n            if ($(event.target).hasClass('js_left_slider_toleft')) {\n                self._helper.sliderMoveInterval = setInterval(function () {\n                    self._Slider._sliderLeftToLeft();\n                    self._continuousMouseStart();\n                }, 150);\n            }\n            if ($(event.target).hasClass('js_left_slider_toright')) {\n                self._helper.sliderMoveInterval = setInterval(function () {\n                    self._Slider._sliderLeftToRight();\n                    self._continuousMouseStart();\n                }, 150);\n            }\n            if ($(event.target).hasClass('js_right_slider_toleft')) {\n                self._helper.sliderMoveInterval = setInterval(function () {\n                    self._Slider._sliderRightToLeft();\n                    self._continuousMouseStart();\n                }, 150);\n            }\n            if ($(event.target).hasClass('js_right_slider_toright')) {\n                self._helper.sliderMoveInterval = setInterval(function () {\n                    self._Slider._sliderRightToRight();\n                    self._continuousMouseStart();\n                }, 150);\n            }\n        }\n        //拖动事件系列事件\n\n    }, {\n        key: '_continuousMouseStart',\n        value: function _continuousMouseStart() {\n            var self = this;\n            self._Slider._sliderMove();\n            //设置刻度数\n            self._Slider._setScaleNum();\n            //设置砝码位置\n            self._Weight._setWeightPos();\n            self._saveData();\n        }\n        //清除定时器\n\n    }, {\n        key: '_clearSlider',\n        value: function _clearSlider(event) {\n            var self = this;\n            //将滑块状态设为false\n            self._Slider._SliderMoveFalse();\n            //alert();\n            clearInterval(self._helper.sliderMoveInterval);\n            self._clickEvents(event);\n        }\n        //插入表格数组\n\n    }, {\n        key: '_pushTableData',\n        value: function _pushTableData() {\n            var self = this;\n            //alert( self._helper.Experiment.tableData.length);\n            if (self._helper.Experiment.tableData.length > 2) {\n                return;\n            } else {\n                //插入数据\n                self._helper.Experiment.tableData.push({\n                    left: {\n                        scale: self._helper.Experiment.leftScale,\n                        weight: self._helper.Experiment.leftWeightNum\n                    },\n                    right: {\n                        scale: self._helper.Experiment.rightScale,\n                        weight: self._helper.Experiment.rightWeightNum\n                    }\n                });\n                self._writeInTable();\n            }\n            //判断按钮状态\n            self._tableBtnStatus();\n        }\n        //删除表格数组\n\n    }, {\n        key: '_deleteTableData',\n        value: function _deleteTableData() {\n            var self = this;\n            if (self._helper.Experiment.tableData.length < 1) {\n                return;\n            } else {\n                self._helper.Experiment.tableData.pop();\n                self._writeInTable();\n            }\n            //判断按钮状态\n            self._tableBtnStatus();\n        }\n        //表格按钮置灰\n\n    }, {\n        key: '_tableBtnStatus',\n        value: function _tableBtnStatus() {\n            var self = this;\n            if (self._helper.Experiment.tableData.length < 1) {\n                self._helper.domObj._$deleteDataBtn.addClass('click_disabled');\n            } else {\n                self._helper.domObj._$deleteDataBtn.removeClass('click_disabled');\n            }\n            if (self._helper.Experiment.tableData.length > 2) {\n                self._helper.domObj._$pushDataBtn.addClass('click_disabled');\n            } else {\n                self._helper.domObj._$pushDataBtn.removeClass('click_disabled');\n            }\n        }\n        //将数据填充到表格中\n\n    }, {\n        key: '_writeInTable',\n        value: function _writeInTable() {\n            var self = this;\n            //先清除数据\n            for (var i = 0; i < 3; i++) {\n                self._helper.domObj._$Table.find(\"li:eq(\" + i + \")\").find(\"span:eq(1)\").text('');\n                self._helper.domObj._$Table.find(\"li:eq(\" + i + \")\").find(\"span:eq(2)\").text('');\n                self._helper.domObj._$Table.find(\"li:eq(\" + i + \")\").find(\"span:eq(3)\").text('');\n                self._helper.domObj._$Table.find(\"li:eq(\" + i + \")\").find(\"span:eq(4)\").text('');\n            }\n            //填入数据\n            for (var _i = 0; _i < self._helper.Experiment.tableData.length; _i++) {\n                self._helper.domObj._$Table.find(\"li:eq(\" + _i + \")\").find(\"span:eq(1)\").text(self._helper.Experiment.tableData[_i].left.weight / 10);\n                self._helper.domObj._$Table.find(\"li:eq(\" + _i + \")\").find(\"span:eq(2)\").text(self._helper.Experiment.tableData[_i].left.scale);\n                self._helper.domObj._$Table.find(\"li:eq(\" + _i + \")\").find(\"span:eq(3)\").text(self._helper.Experiment.tableData[_i].right.weight / 10);\n                self._helper.domObj._$Table.find(\"li:eq(\" + _i + \")\").find(\"span:eq(4)\").text(self._helper.Experiment.tableData[_i].right.scale);\n            }\n        }\n        //让滑块不可滑动\n\n    }, {\n        key: '_setSliderMoveFalse',\n        value: function _setSliderMoveFalse() {\n            var self = this;\n            self._helper.sliderActive = false;\n            self._helper.leftIsMoving = false;\n            self._helper.rightIsMoving = false;\n        }\n        //增加重力\n\n    }, {\n        key: '_addGravity',\n        value: function _addGravity(event) {\n            event.preventDefault();\n            var self = this;\n            self._Weight._addGravity(event);\n            //杠杆旋转\n            self._Ruler._leverRotate();\n            //杠杆高亮\n            self._Ruler._leverHighLight();\n            //设置砝码位置\n            self._Weight._setWeightPos();\n            self._saveData();\n        }\n        //减少重力\n\n    }, {\n        key: '_deleteGravity',\n        value: function _deleteGravity(event) {\n            event.preventDefault();\n            var self = this;\n            self._Weight._deleteGravity(event);\n            //杠杆旋转\n            self._Ruler._leverRotate();\n            //杠杆高亮\n            self._Ruler._leverHighLight();\n            //设置砝码位置\n            self._Weight._setWeightPos();\n            self._saveData();\n        }\n        //渲染弹簧测力计\n\n    }, {\n        key: '_renderSpring',\n        value: function _renderSpring() {\n            var self = this;\n            //隐藏弹簧测力计\n            self._helper.domObj._$leftSpringWrap.addClass('hide_dom');\n            self._helper.domObj._$rightSpringWrap.addClass('hide_dom');\n            //按钮状态\n            self._helper.domObj._$springSwitchBtn.addClass('click_disabled');\n            self._helper.domObj._$weightSwitchBtn.removeClass('click_disabled');\n            self._helper.domObj._$weightSwitchBtn.addClass('ui_btn_active');\n            //去掉弹簧测力计带来的角度旋转\n            self._helper.domObj._$leftWeightWrap.css({ transform: 'rotate(' + 0 + 'deg)' });\n            self._helper.domObj._$rightWeightWrap.css({ transform: 'rotate(' + 0 + 'deg)' });\n        }\n        //显示公式\n\n    }, {\n        key: '_showFormula',\n        value: function _showFormula() {\n            var self = this;\n            self._helper.domObj._$popMask.removeClass('hide_dom');\n            self._helper.domObj._$popTipTxt.addClass('hide_dom');\n            self._helper.domObj._$popFormulaTxt.removeClass('hide_dom');\n            self._helper.Experiment.formulaIsVisible = true;\n        }\n    }]);\n\n    return Experiment;\n}();\n\nexports.Experiment = Experiment;\n\n//////////////////\n// WEBPACK FOOTER\n// ./ref/presenters/BalanceRuler/libs/Experiment.js\n// module id = 8\n// module chunks = 0\n//# sourceURL=webpack:///./ref/presenters/BalanceRuler/libs/Experiment.js?");

/***/ },
/* 9 */
/***/ function(module, exports) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar BalanceNuts = function () {\n    function BalanceNuts() {\n        _classCallCheck(this, BalanceNuts);\n    }\n\n    _createClass(BalanceNuts, [{\n        key: 'init',\n        value: function init(opt) {\n            var self = this;\n            self.opt = $.extend({}, opt);\n            self._helper = self.opt.helper;\n            //平衡螺母高度\n            self._helper.NutsHeight = self._helper.domObj._$leftNutsScroll.outerHeight();\n            //判断是左边还是右边的平衡螺母(1是左边，2是右边)\n            self._helper.nutsTarget = null;\n            //左边平衡螺母重量\n            self._helper.leftNutsWeightNum = self._helper.leftNutsWeightNum ? self._helper.leftNutsWeightNum : parseInt(Math.random() * -5);\n            self._helper.rightNutsWeightNum = self._helper.rightNutsWeightNum ? self._helper.rightNutsWeightNum : parseInt(Math.random() * -5);\n            //平衡螺母的background-position\n            self._helper.leftNutsPosition = self._helper.leftNutsWeightNum * self._helper.NutsHeight;\n            self._helper.rightNutsPosition = self._helper.rightNutsWeightNum * self._helper.NutsHeight;\n        }\n    }, {\n        key: 'resize',\n        value: function resize(data) {\n            var self = this;\n            //平衡螺母高度\n            self._helper.NutsHeight = self._helper.domObj._$leftNutsScroll.outerHeight();\n            //平衡螺母的background-position\n            self._helper.leftNutsPosition = self._helper.leftNutsWeightNum * self._helper.NutsHeight;\n            self._helper.rightNutsPosition = self._helper.rightNutsWeightNum * self._helper.NutsHeight;\n            self._renderNuts();\n        }\n    }, {\n        key: '_saveInitialMousePosition',\n        value: function _saveInitialMousePosition(event) {\n            var self = this;\n            self._helper.mouseinitialPosition.X = self._helper.mouseX;\n            self._helper.mouseinitialPosition.Y = self._helper.mouseY;\n            if ($(event.target).hasClass('js_left_balance_nuts') || $(event.target).hasClass('js_left_nuts_highlight')) {\n                self._helper.nutsTarget = 1;\n                self._helper.domObj._$leftBalanceNuts.find('.js_left_nuts_highlight').addClass('active');\n            } else if ($(event.target).hasClass('js_right_balance_nuts') || $(event.target).hasClass('js_right_nuts_highlight')) {\n                self._helper.nutsTarget = 2;\n                self._helper.domObj._$rightBalanceNuts.find('.js_right_nuts_highlight').addClass('active');\n            }\n        }\n    }, {\n        key: '_setNutsWeightPosition',\n        value: function _setNutsWeightPosition() {\n            var self = this;\n            if (self._helper.mouseY - self._helper.mouseinitialPosition.Y > 0) {\n                //向下滑的时候\n                switch (self._helper.nutsTarget) {\n                    case 1:\n                        if (self._helper.leftNutsPosition > 0 || self._helper.leftNutsPosition == 0) {\n                            self._helper.nutsTarget = null;\n                            return;\n                        } else {\n                            self._helper.leftNutsPosition = self._helper.leftNutsPosition + self._helper.NutsHeight;\n                            self._helper.domObj._$leftNutsScroll.animate({ backgroundPositionY: self._helper.leftNutsPosition + 'px' }, 500);\n                            self._numEvent();\n                        }\n                        break;\n                    case 2:\n                        if (self._helper.rightNutsPosition > 0 || self._helper.rightNutsPosition == 0) {\n                            self._helper.nutsTarget = null;\n                            return;\n                        } else {\n                            self._helper.rightNutsPosition = self._helper.rightNutsPosition + self._helper.NutsHeight;\n                            self._helper.domObj._$rightNutsScroll.animate({ backgroundPositionY: self._helper.rightNutsPosition + 'px' }, 500);\n                            self._numEvent();\n                        }\n                        break;\n                }\n            } else {\n                //向上滑的时候\n                switch (self._helper.nutsTarget) {\n                    case 1:\n                        if (self._helper.leftNutsPosition < -5 * self._helper.NutsHeight || self._helper.leftNutsPosition == -5 * self._helper.NutsHeight) {\n                            self._helper.nutsTarget = null;\n                            return;\n                        } else {\n                            self._helper.leftNutsPosition = self._helper.leftNutsPosition - self._helper.NutsHeight;\n                            self._helper.domObj._$leftNutsScroll.animate({ backgroundPositionY: self._helper.leftNutsPosition + 'px' }, 500);\n                            self._numEvent();\n                        }\n                        break;\n                    case 2:\n                        if (self._helper.rightNutsPosition < -5 * self._helper.NutsHeight || self._helper.rightNutsPosition == -5 * self._helper.NutsHeight) {\n                            self._helper.nutsTarget = null;\n                            return;\n                        } else {\n                            self._helper.rightNutsPosition = self._helper.rightNutsPosition - self._helper.NutsHeight;\n                            self._helper.domObj._$rightNutsScroll.animate({ backgroundPositionY: self._helper.rightNutsPosition + 'px' }, 500);\n                            self._numEvent();\n                        }\n                        break;\n                }\n            }\n            //console.log('平衡螺母左边'+self._helper.leftNutsWeightNum+'平衡螺母右边'+self._helper.rightNutsWeightNum);\n        }\n        //平衡螺母事件\n\n    }, {\n        key: '_numEvent',\n        value: function _numEvent() {\n            var self = this;\n            //重置nutsTarget\n            self._helper.nutsTarget = null;\n            self._helper.domObj._$leftBalanceNuts.find('.js_left_nuts_highlight').removeClass('active');\n            self._helper.domObj._$rightBalanceNuts.find('.js_right_nuts_highlight').removeClass('active');\n            //设置平衡螺母的重量\n            self._setNutsWeightNum();\n        }\n        //设置平衡螺母的重量\n\n    }, {\n        key: '_setNutsWeightNum',\n        value: function _setNutsWeightNum() {\n            var self = this;\n            self._helper.leftNutsWeightNum = self._helper.leftNutsPosition / self._helper.NutsHeight;\n            self._helper.rightNutsWeightNum = self._helper.rightNutsPosition / self._helper.NutsHeight;\n            //杠杆高亮\n            if (self._helper.leftWeightNum * self._helper.leftScale + self._helper.leftNutsWeightNum * 10 == self._helper.rightWeightNum * self._helper.rightScale + self._helper.rightNutsWeightNum * 10) {\n                self._helper.domObj._$leverHighLight.removeClass('hide_dom');\n                //一秒后高亮消失\n                setTimeout(function () {\n                    self._helper.domObj._$leverHighLight.addClass('hide_dom');\n                }, 500);\n            }\n            self._renderNuts();\n        }\n        //渲染平衡螺母\n\n    }, {\n        key: '_renderNuts',\n        value: function _renderNuts() {\n            var self = this;\n            self._helper.domObj._$leftNutsScroll.css({ backgroundPositionY: self._helper.Experiment.leftNutsWeightNum * self._helper.NutsHeight });\n            self._helper.domObj._$rightNutsScroll.css({ backgroundPositionY: self._helper.Experiment.rightNutsWeightNum * self._helper.NutsHeight });\n        }\n    }]);\n\n    return BalanceNuts;\n}();\n\nexports.BalanceNuts = BalanceNuts;\n\n//////////////////\n// WEBPACK FOOTER\n// ./ref/presenters/BalanceRuler/libs/BalanceNuts.js\n// module id = 9\n// module chunks = 0\n//# sourceURL=webpack:///./ref/presenters/BalanceRuler/libs/BalanceNuts.js?");

/***/ }
/******/ ]);]]></presenter><resources><file src="./resources/wood/images/arrow.png"/><file src="./resources/wood/images/base.png"/><file src="./resources/wood/images/big_spring_bottom.png"/><file src="./resources/wood/images/big_spring_top.png"/><file src="./resources/wood/images/drag_btn.png"/><file src="./resources/wood/images/lever.png"/><file src="./resources/wood/images/leverhighlight.png"/><file src="./resources/wood/images/nuts_highlight.png"/><file src="./resources/wood/images/nuts_scroll.png"/><file src="./resources/wood/images/spring_bottom.png"/><file src="./resources/wood/images/spring_top.png"/><file src="./resources/wood/images/weight.png"/><file src="./resources/wood/images/weight1.png"/></resources></addon>