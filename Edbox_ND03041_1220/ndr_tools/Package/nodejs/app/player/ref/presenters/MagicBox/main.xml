<?xml version='1.0' encoding='UTF-8' ?>
<addon id='MagicBox'>
<properties>

                <property name="question_id" displayName="题目ID" type="string" />
                <property name="timer_type" displayName="计时类型" type="string" />
                <property name="time_limit" displayName="限制时常" type="string" />
                <property name="question_url" type="jsonFile" />

</properties>

<dependencies>

</dependencies>

<css>



</css>


<view>


</view>


<presenter>

<![CDATA[(function () {
    var Presenter = BasicPresenter.extend({
        /**
         * Presenter的初始化方法
         * @private
         */
        $init: function () {
            this._super();
            this.model = [];
            this.componentSetting = {};
        },
        // getQuestionInfo: function () { //去掉解决异常流bug    return {        id: this.model.question_id,        type_code:
        // 'magicbox',        type_name: "魔方盒题",        url: this.model.question_id,        dispatchOnly: true    }; },
        /****以下开始为icPlayer的生命周期方法*****/
        run: function (view, model) {
            view.style['width'] = 0;
            view.style['height'] = 0;/*为了解决有些布局问题*/
            var self = this;
            self._getCompareContent(model).then(function () {
                //适配颗粒中定义的数据
                self._adaptedOriginData(model);
                //构建组件配置
                self._configComponents();
                //加载启动器
                self.model.push({
                    name: "Components",
                    type: "json",
                    text: JSON.stringify(self.componentSetting)
                });
            }).then(function () {
                return self.$requireComponent('ComponentLoader', self.model, $(view));
            });
        },
        destroy: function () {},
        /****以下开始为Presenter的私有方法*****/
        _adaptedOriginData: function (model) {
            //添加题型所需要的数据
            this.model.push({
                name: "TimerController",
                type: "string",
                value: JSON.stringify([
                    {
                        name: "timer_type",
                        type: "string",
                        value: model.question_url.timer.timer_type/*timer_type：正计时和倒计时*/
                    }, {
                        name: "time_limit",
                        type: "string",
                        value: model.question_url.timer.time_limit/*倒计时时间*/
                    }
                ])
            });
            this.model.push({
                name: "InteractionSubmitButton",
                /*提交控制器*/
                type: "string",
                value: JSON.stringify([
                    {
                        name: "can_modify",
                        /*can_modify：是否可重复作答，和showResultSubmit一起用*/
                        type: "string",
                        /*can_modify=false 并且 showResultSubmit=true，表示只能提交一次，反之则可以重复作答*/
                        value: true
                    }, {
                        name: "linkQuestionType",
                        type: "string",
                        value: "magicbox"
                    }, {
                        name: "linkQuestionId",
                        type: "string",
                        value: model.question_id
                    }, {
                        name: "view_type",
                        type: "string",
                        value: "new_em_button"/*不加这个类 则 按钮是旧版按钮，加这个类才是新版按钮*/
                    }
                ])
            });
            this.model.push({
                name: "MagicBoxRemake",
                type: "string",
                value: JSON.stringify([
                    {
                        "name": "question_id",
                        "type": "string",
                        "value": model.question_id
                    }, {
                        name: "question_url",
                        type: "json",
                        text: JSON.stringify(model.question_url)
                    }
                ])
            });
            this.model.push({
                name: "ObjectiveInteractionLayout",
                /*布局控制器*/
                type: "string",
                value: JSON.stringify([
                    {
                        name: "questionType",
                        type: "string",
                        value: "MagicBox"/*改为题型的名字*/
                    }
                ])
            });
            this.model.push({
                name: "AnswerFlowController",
                /*答题控制器*/
                type: "string",
                value: JSON.stringify([
                    {
                        name: "showResultOnSubmit",
                        /*can_modify：是否可重复作答，和showResultSubmit一起用*/
                        type: "string",
                        /*can_modify=false 并且 showResultSubmit=true，表示只能提交一次，反之则可以重复作答*/
                        value: "false"
                    }
                ])
            });
            this.model.push({
                name: "ObjectiveStatisticsRemake",
                /*统计控制器*/
                type: "string",
                value: JSON.stringify([])
            });
            this.model.push({
                name: "InteractionTimer",
                /*时间控制器*/
                type: "string",
                value: JSON.stringify([
                    {
                        "name": "view_type",
                        "type": "string",
                        "value": "new_timer"
                    }
                ])
            });
            this.model.push({
                name: 'ClassroomStatusController',
                type: 'string',
                value: JSON.stringify([
                    {
                        name: 'questionId',
                        type: 'string',
                        value: model.question_id
                    }
                ])
            });
        },
        _configComponents: function () {
            //根据不同的运行场景定义需要加载的组件
            if (this.isPPTShell || this.isWeb) { //web环境配置应和老师端一致
                //如果是PPTShell的场景
                this.componentSetting = {
                    controllers: [
                        {
                            presenter: "InteractionStateRecoverFilter"
                        }, {
                            presenter: "I18nFilter"
                        }, {
                            presenter: "AnswerFlowController",
                            depends: [
                                {
                                    property: "TimerService",
                                    presenter: "TimerController"
                                }
                            ]
                        }, {
                            presenter: "ObjectiveStatController"
                        }, {
                            presenter: 'ClassroomStatusController'
                        }
                    ],
                    layout: "ObjectiveInteractionLayout",
                    components: [
                        {
                            presenter: "InteractionTimer",
                            renderTo: "TopLeftPanel"
                        }, {
                            presenter: "InteractionSubmitButton",
                            renderTo: "BottomPanel"
                        }, {
                            presenter: "MagicBoxRemake",
                            renderTo: "CenterPanel"
                        }, {
                            presenter: "ObjectiveStatisticsRemake",
                            renderTo: "StatisticsPanel"
                        }/*学生端不需要统计控制器*/
                    ]
                };
            } else if (this.isApp) {
                //如果是学生端Pad或Web的场景
                this.componentSetting = {
                    controllers: [
                        {
                            presenter: "InteractionStateRecoverFilter"
                        }, {
                            presenter: "I18nFilter"
                        }, {
                            presenter: "AnswerFlowController",
                            depends: [
                                {
                                    property: "TimerService",
                                    presenter: "TimerController"
                                }
                            ]
                        }, {
                            presenter: "AnswerProgressController"
                        }
                    ],
                    layout: "ObjectiveInteractionLayout",
                    components: [
                        {
                            presenter: "InteractionTimer",
                            renderTo: "TopLeftPanel"
                        }, {
                            presenter: "InteractionSubmitButton",
                            renderTo: "TopRightPanel"
                        }, {
                            presenter: "MagicBoxRemake",
                            renderTo: "CenterPanel"
                        }
                    ]
                };
            }
        },
        _getCompareContent: function (model) {
            /*如果是倒计时则转为秒传给time_limit*/
            if (model.question_url.timer.timer_type == "countdown") {
                var timeMinute = parseInt(model.question_url.timer.time_minute);
                var timeSecond = parseInt(model.question_url.timer.time_second);
                var countSecond = timeMinute * 60 + timeSecond;
                model.question_url.timer.time_limit = countSecond;
            }
            var deffer = $.Deferred();
            deffer.resolve();
            return deffer.promise();
        }
    });

    window.AddonMagicBox_create = function () {
        return new Presenter();
    };
})();
]]>

</presenter>


<resources>

<file src='./resources/correct.png' />
<file src='./resources/locations/bo/lang.json' />
<file src='./resources/locations/bo/lang.po' />
<file src='./resources/locations/bo_CN/lang.json' />
<file src='./resources/locations/bo_CN/lang.po' />
<file src='./resources/locations/zh/lang.json' />
<file src='./resources/locations/zh/lang.po' />
<file src='./resources/locations/zh_CN/lang.json' />
<file src='./resources/locations/zh_CN/lang.po' />
<file src='./resources/magicbox.json' />


</resources>

</addon>