<?xml version='1.0' encoding='UTF-8'?>
<addon id="templateid"><properties/><dependencies><jsDependency><javaScript name="tools_common" version="1.0.0"/><javaScript name="kitty" version="2.0.4.1"/><javaScript name="Svg2DCalculate" version="1.0.0"/></jsDependency></dependencies><css><![CDATA[@-webkit-keyframes rope{0%{background-position:left center}100%{background-position:right center}}@keyframes rope{0%{background-position:left center}100%{background-position:right center}}@-webkit-keyframes swingItem{0%{transform-origin:50% 0 0;transform:rotate(0)}2.5%{transform-origin:50% 0 0;transform:rotate(1.25deg)}5%{transform-origin:50% 0 0;transform:rotate(2.5deg)}7.5%{transform-origin:50% 0 0;transform:rotate(3.75deg)}10%{transform-origin:50% 0 0;transform:rotate(5deg)}15%{transform-origin:50% 0 0;transform:rotate(2.5deg)}20%{transform-origin:50% 0 0;transform:rotate(0)}25%{transform-origin:50% 0 0;transform:rotate(-2.5deg)}30%{transform-origin:50% 0 0;transform:rotate(-5deg)}35%{transform-origin:50% 0 0;transform:rotate(-2.5deg)}40%{transform-origin:50% 0 0;transform:rotate(0)}45%{transform-origin:50% 0 0;transform:rotate(2.5deg)}50%{transform-origin:50% 0 0;transform:rotate(5deg)}55%{transform-origin:50% 0 0;transform:rotate(2.5deg)}60%{transform-origin:50% 0 0;transform:rotate(0)}65%{transform-origin:50% 0 0;transform:rotate(-2.5deg)}70%{transform-origin:50% 0 0;transform:rotate(-5deg)}75%{transform-origin:50% 0 0;transform:rotate(-2.5deg)}80%{transform-origin:50% 0 0;transform:rotate(0)}}.exam_skin_wood .measuregravity{width:100%;height:100%;background:#bfd3e2;position:relative}.exam_skin_wood .measuregravity .mg_svg_wrapper{width:100%;height:100%;padding:0 0 2.5em 0;position:relative}.exam_skin_wood .measuregravity .mg_svg_wrapper:after{content:"";width:0;height:100%;vertical-align:middle;display:inline-block}.exam_skin_wood .measuregravity .mg_svg_wrapper .mg_svg_content{width:71.75em;position:relative;display:inline-block;vertical-align:middle}.exam_skin_wood .measuregravity .mg_wall{display:block;width:20.83333em;height:.54167em;background:url(resources/wood/images/mg_wall.png) center center no-repeat;background-size:100% 100%;position:absolute;top:1.25em;left:50%;margin-left:-10.41667em;z-index:6}.exam_skin_wood .measuregravity .mg_rope{display:block;width:70px;height:460px;margin-left:44px;background:url(resources/wood/images/mg_rope_animation.png) left center no-repeat;background-size:auto 460px}.exam_skin_wood .measuregravity .mg_rope.mg_rope_head:before{content:"";display:inline-block;width:42px;height:42px;background:url(resources/wood/images/mg_rope_head.png) center center no-repeat;background-size:42px auto;margin:318px 0 0 -63px}.exam_skin_wood .measuregravity .mg_rope.mg_rope_head._notfisrt:before{background:0 0}.exam_skin_wood .measuregravity .mg_rope.on{animation:rope .25s steps(9) forwards;-webkit-animation:rope .25s steps(9) forwards}.exam_skin_wood .measuregravity .mg_rope._notfisrt{width:18px;background:url(resources/wood/images/mg_rope_animation.png) -748px center no-repeat;margin-left:73px}.exam_skin_wood .measuregravity .mg_hammer_line{display:block;width:4.16667em;height:35.70833em;background:url(resources/wood/images/mg_Hammer_line.png) center center no-repeat;background-size:100% 100%;position:absolute;top:1.66667em;left:50%;margin-left:-2.5416667em;z-index:5}.exam_skin_wood .measuregravity .mg_svg{width:71.75em;height:37.33333em}.exam_skin_wood .measuregravity .mg_userguider_pop{min-width:56.95833em;min-height:34.5em;position:absolute;background-color:rgba(47,47,47,.81);border-radius:.33333em;text-align:center;white-space:nowrap;top:46.5%;left:50%;-webkit-transform:translate(-50%,-50%);-ms-transform:translate(-50%,-50%);transform:translate(-50%,-50%);z-index:19}.exam_skin_wood .measuregravity .mg_userguider_pop .com_btns{margin-top:0}.exam_skin_wood .measuregravity .userguider_title{height:4.16667em;line-height:4.16667em}.exam_skin_wood .measuregravity .userguider_title .mg_text{font-size:1.41667em}.exam_skin_wood .measuregravity .mg_text{color:#fff;font-size:1.41667em;white-space:nowrap}.exam_skin_wood .measuregravity .userguider_content{margin-bottom:1.41667em}.exam_skin_wood .measuregravity .userguider_box{display:inline-block;min-width:20.83333em;min-height:23.95833em;border-radius:.33333em;background-color:rgba(47,47,47,.5);vertical-align:middle;position:relative}.exam_skin_wood .measuregravity .userguider_box:before{content:"";display:inline-block;width:20.83333em;height:23.95833em;position:absolute;top:50%;left:50%;-webkit-transform:translate(-50%,-50%);-ms-transform:translate(-50%,-50%);transform:translate(-50%,-50%)}.exam_skin_wood .measuregravity .userguider_box:not(:last-child){margin-right:7.83333em}.exam_skin_wood .measuregravity .userguider_box.box_nohung:before{background:url(resources/wood/images/mg_nohung.png) center center no-repeat;background-size:100% 100%}.exam_skin_wood .measuregravity .userguider_box.box_hung:before{background:url(resources/wood/images/mg_hung.png) center center no-repeat;background-size:100% 100%}.exam_skin_wood .measuregravity .userguider_box .userguider_text{display:inline-block;-webkit-transform:translate(0,15em);-ms-transform:translate(0,15em);transform:translate(0,15em)}.exam_skin_wood .measuregravity .mg_tool_btns{position:absolute;left:0;bottom:0;width:100%;height:5em;padding:0 5.83333em;background:#cfdee9;z-index:9}.exam_skin_wood .measuregravity .tool_btns_main{height:100%;position:relative;text-align:center}.exam_skin_wood .measuregravity .com_btns{min-width:8.25em;height:3.08333em;line-height:2.16667em;padding:.41667em;border-radius:.66667em;margin-top:1em}.exam_skin_wood .measuregravity .mg_tool_btns .tool_btns_clean{display:inline-block;min-width:4.58333em;height:4.58333em;position:absolute;top:0;right:0}.exam_skin_wood .measuregravity .tool_btns_objectchoice{width:5.83333em;height:12.5em;position:absolute;right:-1em;bottom:6.04167em;background-color:rgba(87,143,184,.15)}.exam_skin_wood .measuregravity .tool_btns_objectchoice .btns_objectchoice{display:block;width:100%;height:50%}.exam_skin_wood .measuregravity .tool_btns_objectchoice .btns_objectchoice.ui_btn_selected{background-color:rgba(87,143,184,.15)}.exam_skin_wood .measuregravity .mg_object_pic01{background:url(resources/wood/images/mg_fish_icon.png) center center no-repeat;background-size:90% auto}.exam_skin_wood .measuregravity .mg_object_pic02{background:url(resources/wood/images/mg_fishhook_icon.png) center center no-repeat;background-size:90% auto}.com_tooldiolag_board .exam_skin_wood .abacus{font-size:.95em}.typefaces_long .exam_skin_wood .measuregravity .mg_userguider_pop{max-width:57em}.typefaces_long .exam_skin_wood .measuregravity .mg_tool_btns .tool_btns_clean .tool_operate_text{display:none}.typefaces_long .exam_skin_wood .measuregravity .mg_tool_btns .tool_btns_clean .tool_operate_imgcnt{height:3.33333em}.typefaces_long .exam_skin_wood .measuregravity .userguider_title{line-height:normal;max-width:80%;margin:0 auto;padding-top:.4em}.typefaces_long .exam_skin_wood .measuregravity .userguider_title .mg_text{white-space:normal;line-height:1.3}.typefaces_ru_RU .exam_skin_wood .measuregravity .mg_userguider_pop{max-width:57em}.typefaces_ru_RU .exam_skin_wood .measuregravity .mg_tool_btns .tool_btns_clean .tool_operate_text{display:none}.typefaces_ru_RU .exam_skin_wood .measuregravity .mg_tool_btns .tool_btns_clean .tool_operate_imgcnt{height:3.33333em}.typefaces_ru_RU .exam_skin_wood .measuregravity .userguider_title{line-height:normal;max-width:80%;margin:0 auto;padding-top:.4em}.typefaces_ru_RU .exam_skin_wood .measuregravity .userguider_title .mg_text{white-space:normal;line-height:1.3}]]></css><view><![CDATA[<div class="exam_skin_wood" id="layout"><div class="measuregravity"><div class="mg_svg_wrapper"><div class="mg_svg_content _mg_svg_content"><span class="mg_wall"></span><span class="mg_hammer_line _mg_hammer_line"></span></div></div><div class="mg_userguider_pop mg_userguider_pop _com_mg_userguider_pop"><h3 class="userguider_title"><span class="mg_text _js_mg_text _js_userguider_title">点击物体任意位置，设置悬挂点。</span></h3><div class="userguider_content"><div class="userguider_box box_nohung"><span class="userguider_text mg_text _js_box_nohung">未悬挂</span></div><div class="userguider_box box_hung"><span class="userguider_text mg_text _js_box_hung">悬挂时</span></div></div><a class="com_btns btns-primary _known_btn"><span class="btns-primary-txt _js_known_btn">知道了</span></a></div><div class="mg_tool_btns"><div class="tool_btns_main clearfix"><a class="com_btns btns-primary _hung_btn click_disabled"><span class="btns-primary-txt _js_btns-primary-txt">悬挂</span> </a><a class="tool_operate_bar tool_btns_clean _clean_btn click_disabled"><span class="tool_operate_imgcnt"><i class="tool_operate_icon tool_reset"></i> </span><span class="tool_operate_text _js_tool_operate_text">重置</span></a><div class="tool_btns_objectchoice _tool_btns_objectchoice"><a class="btns_objectchoice mg_object_pic01" data-type="fish"></a> <a class="btns_objectchoice mg_object_pic02" data-type="fishhook"></a></div></div></div></div></div>]]></view><presenter><![CDATA[/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(1);
	__webpack_require__(4);
	__webpack_require__(6);
	__webpack_require__(5);
	__webpack_require__(3);
	module.exports = __webpack_require__(2);


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _GravityLang = __webpack_require__(2);

	var _GravityLang2 = _interopRequireDefault(_GravityLang);

	var _GravityController = __webpack_require__(3);

	var _GravityController2 = _interopRequireDefault(_GravityController);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	(function () {
	  var helper = {
	    /* 所有用到的dom对象*/
	    domObj: {},
	    TRANSFORMTIME: 1000,
	    fishhook_node: null,
	    fish_node: null,
	    // 学生端推送状态保存
	    studentState: {
	      popHide: false, // 默认显示提示框
	      chooseIndex: null,
	      aniState: false, // 是否动画过程中推送
	      fish: {
	        hungBtnState: false, // 悬挂按钮状态，false表示不可点击，true表示是可点击
	        Cp: null, Lcp: null, // 当前点
	        translatePos: null, rotatePos: null, translate: [], rotateDeg: 0 // 动画数据
	      },
	      fishhook: {
	        hungBtnState: false,
	        Cp: null, Lcp: null,
	        translatePos: null, rotatePos: null, translate: [], rotateDeg: 0
	      }
	    }
	  };
	  var i18nModel = null;

	  var Presenter = BasicPresenter.extend({
	    metaInfo: {
	      name: 'MeasureGravity',
	      type: PresenterType.PRESENTER_COMPONENT,
	      subtype: ''
	    },
	    /**
	     * Presenter的初始化方法
	     * @private
	     */
	    $init: function $init() {
	      this._super();
	    },
	    /**
	     * Presenter对外暴露的方法
	     */
	    _service_: {
	      constructor: function constructor(parent) {
	        this.parent = parent;
	      },
	      setLocationProperties: function setLocationProperties(data) {
	        if (!$.isEmptyObject(data)) {
	          i18nModel = data;
	        }
	      },
	      getExtendData: function getExtendData() {
	        var options = {
	          svgDom: {
	            fishLine: helper.$view.find('._svg_fish_line_group').html(),
	            fishHookLine: helper.$view.find('._svg_fishhook_line_group').html()
	          },
	          popHide: helper.studentState.popHide,
	          chooseIndex: helper.studentState.chooseIndex,
	          aniState: helper.studentState.aniState,
	          fish: helper.studentState.fish,
	          fishhook: helper.studentState.fishhook
	        };
	        console.log('options', options);
	        return options;
	      },
	      getQuestionInfo: function getQuestionInfo() {
	        return {
	          id: '',
	          type_code: 'MeasureGravity',
	          type_name: '悬挂法测重心',
	          url: '',
	          noExistStatistics: true,
	          noNeedQuizProgress: true
	        };
	      }
	    },
	    getService: function getService() {
	      this._service_.constructor(this);
	      return this._service_;
	    },
	    /** **以下开始为icPlayer的生命周期方法*****/
	    run: function run(view, model) {
	      var that = this;
	      helper.$view = $(view);
	      helper.model = model;
	      // 初始化数据
	      $.extend(helper, {
	        studentState: {
	          popHide: false, chooseIndex: null, aniState: false,
	          fish: {
	            hungBtnState: false,
	            Cp: null,
	            Lcp: null,
	            translatePos: null,
	            rotatePos: null,
	            translate: '',
	            rotateDeg: 0
	          },
	          fishhook: {
	            hungBtnState: false,
	            Cp: null,
	            Lcp: null,
	            translatePos: null,
	            rotatePos: null,
	            translate: '',
	            rotateDeg: 0
	          }
	        }
	      });

	      that.gravityController = new _GravityController2.default({ helper: helper });
	      that.lang = new _GravityLang2.default();
	      that.lang.extend(i18nModel);
	      that.lang.initI18N(helper.$view);
	      //禁用放大缩小按钮 id可从run的参数model中获取 true则禁用功能，false则启用功能
	      helper.forbideFull = function (boolean) {
	        player.controller.getEventBus().sendEvent("PLAYER.TOOL.FORBIDE_FULL", { id: model.$.unqiueId, isForbide: boolean });
	      };
	    },
	    pageShow: function pageShow() {
	      var that = this;
	      /* 初始化获取dom对象*/
	      that._findView();
	      that._bindEvent();
	      that.gravityController.render();
	      helper.domObj._$mgHammerLine.hide();
	      if (!that.isStudent) {
	        var isPop = localStorage.getItem('measuregravity_userguider_pop');
	        isPop ? helper.domObj._$mgUserguiderPop.hide() : helper.domObj._$mgUserguiderPop.show();
	        // 保存学生端数据
	        if (isPop) {
	          helper.studentState.popHide = true;
	        }
	      }
	      // 工具窗口是否有推送数据,因为要用到trigger，所以需要先执行_bindEvent()
	      var extendData = helper.model['__ExtendModel'];
	      console.log('extendData', extendData);
	      if (!$.isEmptyObject(extendData)) {
	        if (extendData.popHide) {
	          helper.domObj._$mgUserguiderPop.hide();
	        }
	        if (extendData.chooseIndex !== null) {
	          var fish = helper.fish_node;
	          var fishhook = helper.fishhook_node;
	          // 绳子的状态
	          var $fishRope = helper.$view.find('._mg_rope_svg_fish');
	          var $fishhookRope = helper.$view.find('._mg_rope_svg_fishhook');
	          // 显示当前的选中状态
	          if (extendData.chooseIndex === 'fish') {
	            $(helper.domObj._$toolBtnsObjectchoices[0]).addClass('ui_btn_selected');
	            that.gravityController.fish.show();
	            that.gravityController.fishHook.hide();
	            $($fishhookRope.parent()[0]).attr('class', 'hide_dom');
	            if (extendData.fish.hungBtnState) {
	              helper.domObj._$jsHungBtn.removeClass('click_disabled');
	            }
	            that.gravityController.currentType = 'fish';
	          } else if (extendData.chooseIndex === 'fishhook') {
	            $(helper.domObj._$toolBtnsObjectchoices[1]).addClass('ui_btn_selected');
	            that.gravityController.fish.hide();
	            that.gravityController.fishHook.show();
	            $($fishRope.parent()[0]).attr('class', 'hide_dom');
	            if (extendData.fishhook.hungBtnState) {
	              helper.domObj._$jsHungBtn.removeClass('click_disabled');
	            }
	            that.gravityController.currentType = 'fishhook';
	          }
	          that.gravityController.fish.setHungState(extendData.fish.hungBtnState);
	          that.gravityController.fishHook.setHungState(extendData.fishhook.hungBtnState);
	          helper.domObj._$jsCleanBtn.removeClass('click_disabled');
	          if (!$.isEmptyObject(extendData.fish.Lcp)) {
	            $fishRope.addClass('_notfisrt');

	            if (extendData.fish.translatePos) {
	              extendData.fish.translatePos && fish.setRotate(0, extendData.fish.translatePos.x, extendData.fish.translatePos.y);
	            }

	            if (extendData.fish.translate && extendData.fish.translate.length > 0) {
	              fish.setTranslate(extendData.fish.translate[0], extendData.fish.translate[1]);
	            }
	            if (extendData.fish.rotateDeg && extendData.fish.rotatePos) {
	              fish.setRotate(extendData.fish.rotateDeg, extendData.fish.rotatePos.x, extendData.fish.rotatePos.y);
	            }

	            // 绘制的悬挂红线
	            helper.$view.find('._svg_fish_line_group').html(extendData.svgDom.fishLine);
	            //恢复数据
	            if (extendData.fish.rotatePos) {
	              that.gravityController.fish.setLcp(extendData.fish.rotatePos);
	            }
	            if (extendData.fish.rotateDeg) {
	              that.gravityController.fish.setLdeg(extendData.fish.rotateDeg);
	            }
	            if (extendData.fish.straightRopePoin) {
	              that.gravityController.fish.ropePoint = extendData.fish.straightRopePoint;
	            }
	          }
	          if (!$.isEmptyObject(extendData.fishhook.Lcp)) {
	            $fishhookRope.addClass('_notfisrt');
	            if (extendData.fishhook.translatePos) {
	              extendData.fishhook.translatePos && fishhook.setRotate(0, extendData.fishhook.translatePos.x, extendData.fishhook.translatePos.y);
	            }
	            if (extendData.fishhook.translate && extendData.fishhook.translate.length > 0) {
	              fishhook.setTranslate(extendData.fishhook.translate[0], extendData.fishhook.translate[1]);
	            }
	            if (extendData.fishhook.rotateDeg && extendData.fishhook.rotatePos) {
	              fishhook.setRotate(extendData.fishhook.rotateDeg, extendData.fishhook.rotatePos.x, extendData.fishhook.rotatePos.y);
	            }

	            // 绘制的悬挂红线
	            helper.$view.find('._svg_fishhook_line_group').html(extendData.svgDom.fishHookLine);
	            //恢复数据
	            if (extendData.fishhook.rotatePos) {
	              that.gravityController.fishHook.setLcp(extendData.fishhook.rotatePos);
	            }
	            if (extendData.fishhook.rotateDeg) {
	              that.gravityController.fishHook.setLdeg(extendData.fishhook.rotateDeg);
	            }
	            if (that.gravityController.fishHook.straightRopePoint) {
	              that.gravityController.fishHook.ropePoint = that.gravityController.fishHook.straightRopePoint;
	            }
	          }
	          // 设置的悬挂点
	          if (extendData.fish.Cp !== null) {
	            var point1 = extendData.fish.Cp;
	            var circle1 = new kity.Circle(15, point1.x, point1.y).fill('white').stroke('#ff6b2a', 5).addClass('_svg_fish_choosePoint');
	            fish.addShape(circle1);
	            var dom1 = helper.$view.find('._svg_fish_choosePoint')[0].getBoundingClientRect();
	            var ap1 = {
	              x: dom1.left + 15 * that.gravityController.fish.getScale(),
	              y: dom1.top + 15 * that.gravityController.fish.getScale()
	            };
	            that.gravityController.fish.setAp(ap1);
	            that.gravityController.fish.setCp(extendData.fish.Cp);
	          }
	          if (extendData.fishhook.Cp !== null) {
	            var point2 = extendData.fishhook.Cp;
	            var circle2 = new kity.Circle(15, point2.x, point2.y).fill('white').stroke('#ff6b2a', 5).addClass('_svg_fishhook_choosePoint');
	            fishhook.addShape(circle2);
	            var dom2 = helper.$view.find('._svg_fishhook_choosePoint')[0].getBoundingClientRect();
	            var ap2 = {
	              x: dom2.left + 15 * that.gravityController.fishHook.getScale(),
	              y: dom2.top + 15 * that.gravityController.fishHook.getScale()
	            };
	            that.gravityController.fishHook.setAp(ap2);
	            that.gravityController.fishHook.setCp(extendData.fishhook.Cp);
	          }
	          if (extendData.aniState) {
	            helper.domObj._$jsHungBtn.trigger('click');
	          }
	        }
	      }
	    },
	    pageLeave: function pageLeave() {
	      this._unbindEvent();
	    },
	    destroy: function destroy() {
	      this.gravityController.destroy();
	    },
	    /** **以下开始为Presenter的私有方法*****/
	    _findView: function _findView() {
	      /* 用户指导页面*/
	      helper.domObj._$mgUserguiderPop = helper.$view.find('._com_mg_userguider_pop');
	      /* 知道了 按钮*/
	      helper.domObj._$jsKnownBtn = helper.$view.find('._known_btn');
	      /* 悬挂 按钮*/
	      helper.domObj._$jsHungBtn = helper.$view.find('._hung_btn');
	      /* 重置 按钮*/
	      helper.domObj._$jsCleanBtn = helper.$view.find('._clean_btn');
	      /* 选择 鱼 鱼钩 按钮*/
	      helper.domObj._$toolBtnsObjectchoices = helper.$view.find('._tool_btns_objectchoice a');
	      /* 整个svg内容*/
	      helper.domObj._$mgSvgContent = helper.$view.find('._mg_svg_content');
	      /* 重锤*/
	      helper.domObj._$mgHammerLine = helper.$view.find('._mg_hammer_line');
	      /* 绳子*/
	      helper.domObj._$mgRope = helper.$view.find('._mg_rope');
	    },
	    _bindEvent: function _bindEvent() {
	      var that = this;
	      helper.domObj._$toolBtnsObjectchoices.on('click', function (e) {
	        var $this = $(this);
	        if (helper.domObj._$jsHungBtn.hasClass('click_state')) {
	          return;
	        }
	        $this.addClass('ui_btn_selected').siblings().removeClass('ui_btn_selected');
	        that.gravityController.change($this.data('type'));
	        helper.domObj._$jsCleanBtn.removeClass('click_disabled');
	      });
	      helper.domObj._$jsKnownBtn.on('click', function () {
	        helper.domObj._$mgUserguiderPop.hide();
	        if (!that.isStudent) {
	          localStorage.setItem('measuregravity_userguider_pop', true);
	          helper.studentState.popHide = true;
	        }
	      });
	      helper.domObj._$jsHungBtn.on('click', function () {
	        if (helper.domObj._$jsHungBtn.hasClass('ui_btn_active') || helper.domObj._$jsHungBtn.hasClass('click_disabled')) {
	          return;
	        }
	        that.gravityController.hung();
	        helper.domObj._$jsHungBtn.addClass('ui_btn_active');
	        // 保存学生端数据
	        helper.studentState.aniState = true;
	      });
	      helper.domObj._$jsCleanBtn.on('click', function () {
	        if (helper.domObj._$jsCleanBtn.hasClass('click_disabled')) {
	          return;
	        }
	        that._unbindEvent();
	        that.gravityController.render();
	        helper.domObj._$jsCleanBtn.addClass('click_disabled');
	        helper.domObj._$jsHungBtn.addClass('click_disabled');
	        helper.domObj._$toolBtnsObjectchoices.removeClass('ui_btn_selected');
	        // 保存学生端数据
	        helper.studentState.chooseIndex = null;
	        helper.studentState.aniState = false;
	        helper.studentState.fish.hungBtnState = false;
	        helper.studentState.fish.Cp = null;
	        helper.studentState.fish.Lcp = null;
	        helper.studentState.fish.translatePos = null;
	        helper.studentState.fish.rotatePos = null;
	        helper.studentState.fish.translate = [];
	        helper.studentState.fish.rotateDeg = 0;
	        helper.studentState.fishhook.Cp = null;
	        helper.studentState.fishhook.Lcp = null;
	        helper.studentState.fishhook.translatePos = null;
	        helper.studentState.fishhook.rotatePos = null;
	        helper.studentState.fishhook.translate = [];
	        helper.studentState.fishhook.rotateDeg = 0;
	      });
	    },
	    _unbindEvent: function _unbindEvent() {
	      helper.$view.off('click');
	    }
	  });

	  window.AddonMeasureGravity_create = function () {
	    return new Presenter('MeasureGravity');
	  };
	})();

/***/ }),
/* 2 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	 * Created by wj on 2016/4/12.
	 */

	var Lang = function () {
	  function Lang() {
	    _classCallCheck(this, Lang);

	    this.lang = {
	      'mg_hung_btn': '悬挂',
	      'mg_reset_btn': '重置',
	      'mg_guider_title': '点击物体任意位置，设置悬挂点。',
	      'mg_guider_nohung': '未悬挂',
	      'mg_guider_hung': '悬挂时',
	      'mg_guider_known': '知道了'
	    };
	  }

	  _createClass(Lang, [{
	    key: 'extend',
	    value: function extend(lang) {
	      $.extend(this, lang);
	    }
	  }, {
	    key: 'initI18N',
	    value: function initI18N($view) {
	      $view.find('._js_btns-primary-txt').html(this['mg_hung_btn']);
	      $view.find('._js_tool_operate_text ').html(this['mg_reset_btn']);
	      $view.find('._js_userguider_title').html(this['mg_guider_title']);
	      $view.find('._js_box_nohung ').html(this['mg_guider_nohung']);
	      $view.find('._js_box_hung').html(this['mg_guider_hung']);
	      $view.find('._js_known_btn ').html(this['mg_guider_known']);
	    }
	  }]);

	  return Lang;
	}();

	exports.default = Lang;

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _Fish = __webpack_require__(4);

	var _Fish2 = _interopRequireDefault(_Fish);

	var _FishHook = __webpack_require__(6);

	var _FishHook2 = _interopRequireDefault(_FishHook);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var initResource = Symbol('initResource');
	var createStraightRopePoint = Symbol('createStraightRopePoint');

	var GravityController = function () {
	  function GravityController(opt) {
	    _classCallCheck(this, GravityController);

	    this.opt = $.extend({}, opt);
	    this.helper = this.opt.helper;
	    this.fish = new _Fish2.default();
	    this.fish.init({ helper: this.helper });
	    this.fishHook = new _FishHook2.default();
	    this.fishHook.init({ helper: this.helper });
	    this.currentType = ''; // fish或fishhook
	  }

	  _createClass(GravityController, [{
	    key: 'render',
	    value: function render() {
	      var that = this;
	      if (that.helper.paper) {
	        $(that.helper.paper.node).remove();
	      }
	      that.helper.paper = new kity.Paper(that.helper.domObj._$mgSvgContent[0]).addClass('mg_svg').setWidth('71.75em').setHeight('37.33333em').setViewBox(0, 0, 1722, 896);
	      that.fish.render();
	      that.fishHook.render();
	      that.fish.hide();
	      that.fishHook.hide();
	      this[initResource]();
	      this[createStraightRopePoint]();
	    }
	    /* 创建阴影滤镜*/

	  }, {
	    key: initResource,
	    value: function value() {
	      var that = this;
	      var filter = new kity.Filter().setId('shadowFilter');
	      var offsetEffect = new kity.OffsetEffect().set('result', 'offOut').set('in', 'SourceGraphic');
	      var feColorMatrix = new kity.ColorMatrixEffect().set('result', 'matrixOut').set('in', 'offOut').set('values', '0.4 0 0 0 0 0 0.4 0 0 0 0 0 0.4 0 0 0 0 0 1 0');
	      var feGaussianBlur = new kity.GaussianblurEffect(5).set('result', 'blurOut').set('in', 'matrixOut');
	      var feBlend = that.feBlend().set('in', 'SourceGraphic').set('in2', 'blurOut').set('mode', 'normal');
	      filter.appendItem(offsetEffect).appendItem(feColorMatrix).appendItem(feGaussianBlur).appendItem(feBlend);
	      that.helper.paper.addResource(filter);
	    }
	  }, {
	    key: 'feBlend',
	    value: function feBlend() {
	      var Effect = new kity.Effect();
	      var feBlend = new kity.Effect('feBlend', {
	        base: Effect,
	        constructor: function constructor() {
	          this.callBase(Effect.NAME_CONVOLVE_MATRIX);
	        }
	      });
	      return feBlend;
	    }
	    /* 绘制直的绳子端点的透明基准点，用于计算移动的偏移值*/

	  }, {
	    key: createStraightRopePoint,
	    value: function value() {
	      var that = this;
	      var point = { 'x': 853, 'y': 474 };
	      var ropeCircle = new kity.Circle(1, point.x, point.y).fill('transparent').addClass('_rope_point01');
	      that.helper.paper.addShape(ropeCircle);
	      that.helper.baseStraightRopePoint = ropeCircle.node;
	    }
	  }, {
	    key: 'hung',
	    value: function hung() {
	      var that = this;
	      if (that.currentType === 'fish') {
	        that.fish.hang();
	      } else if (that.currentType === 'fishhook') {
	        that.fishHook.hang();
	      }
	    }
	  }, {
	    key: 'change',
	    value: function change(type) {
	      var that = this;
	      that.currentType = type;
	      if (type === 'fish') {
	        that.fish.show();
	        that.fish.getLineDom().attr('class', function (index, classes) {
	          return classes ? classes.replace(/hide_dom/g, '') : '';
	        });
	        if (that.fish.getHungState()) {
	          that.helper.domObj._$jsHungBtn.removeClass('click_disabled');
	        } else {
	          that.helper.domObj._$jsHungBtn.addClass('click_disabled');
	        }
	        that.fishHook.hide();
	        that.fishHook.getLineDom().attr('class', function (index, classes) {
	          return classes ? classes + ' hide_dom' : 'hide_dom';
	        });
	      } else {
	        that.fishHook.show();
	        that.fishHook.getLineDom().attr('class', function (index, classes) {
	          return classes ? classes.replace(/hide_dom/g, '') : '';
	        });
	        if (that.fishHook.getHungState()) {
	          that.helper.domObj._$jsHungBtn.removeClass('click_disabled');
	        } else {
	          that.helper.domObj._$jsHungBtn.addClass('click_disabled');
	        }
	        that.fish.hide();
	        that.fish.getLineDom().attr('class', function (index, classes) {
	          return classes ? classes + ' hide_dom' : 'hide_dom';
	        });
	      }
	      // 保存学生端数据
	      that.helper.studentState.chooseIndex = that.currentType;
	    }
	  }, {
	    key: 'destroy',
	    value: function destroy() {
	      this.fish.stop();
	      this.fish.clearTimeOut();
	      this.fishHook.stop();
	      this.fishHook.clearTimeOut();
	    }
	  }]);

	  return GravityController;
	}();
	/* 私有方法*/

	exports.default = GravityController;

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _GravityBase2 = __webpack_require__(5);

	var _GravityBase3 = _interopRequireDefault(_GravityBase2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Fish = function (_GravityBase) {
	  _inherits(Fish, _GravityBase);

	  function Fish() {
	    _classCallCheck(this, Fish);

	    return _possibleConstructorReturn(this, (Fish.__proto__ || Object.getPrototypeOf(Fish)).apply(this, arguments));
	  }

	  _createClass(Fish, [{
	    key: 'init',
	    value: function init(opt) {
	      this.opt = $.extend({}, opt);
	      this.helper = this.opt.helper;
	      /* 鱼的重心点*/
	      this._dataCenterPoint = { 'x': 195, 'y': 94 };
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var that = this;
	      that.initValue();
	      that.helper.fish_node = new kity.Group().addClass('mg_svg_fish').setTranslate(664, 644).setId('_svg_fish');
	      // 设置Path
	      var fishPath = 'M 136.85 5.83 C 185.35 -0.10 234.54 -0.62 283.14 4.43 C 294.24 5.71 305.36 7.13 316.20 9.88 C 318.65 10.43 320.95 11.50 323.10 12.79 C 321.63 16.93 316.41 17.66 314.74 21.64 C 312.91 26.21 313.53 31.37 314.85 35.99 C 317.45 44.37 317.59 53.78 314.04 61.92 C 309.68 72.23 303.10 81.42 296.16 90.13 C 295.31 91.26 294.39 92.49 294.54 93.99 C 296.15 95.81 298.91 95.20 301.02 94.90 C 307.24 93.40 312.38 89.30 317.20 85.29 C 330.42 73.83 341.48 60.17 353.95 47.94 C 357.19 44.85 360.52 41.77 364.42 39.51 C 366.22 38.55 368.53 37.50 370.51 38.62 C 373.13 40.24 373.57 43.58 374.00 46.37 L 374.00 50.95 C 372.65 63.24 368.83 75.09 364.48 86.60 C 361.21 95.25 357.60 103.84 352.40 111.53 C 345.81 121.26 344.18 133.41 344.74 144.92 C 345.11 152.33 348.38 159.07 350.36 166.09 C 351.50 168.89 348.87 171.78 346.02 171.42 C 342.25 170.65 339.34 167.91 336.53 165.48 C 329.07 158.57 322.66 150.62 316.49 142.56 C 312.65 136.94 306.88 132.70 300.53 130.33 C 297.63 129.32 292.57 128.92 291.89 132.90 C 291.39 138.20 293.85 143.20 296.02 147.88 C 302.47 159.88 302.85 176.00 294.09 186.99 C 286.59 196.30 274.83 200.71 263.49 203.23 C 239.61 208.23 215.06 205.82 190.95 204.13 C 187.10 204.03 183.09 203.38 179.33 204.51 C 177.30 205.45 179.09 207.95 179.79 209.27 C 185.30 217.29 192.77 223.72 198.62 231.47 C 199.95 233.35 201.82 235.63 200.45 238.00 L 196.73 238.00 C 183.13 236.72 169.87 232.89 157.18 227.91 C 141.50 221.57 126.43 213.36 113.46 202.42 C 99.48 190.87 87.73 176.90 73.86 165.22 C 67.76 160.10 61.04 155.58 53.59 152.69 C 48.15 150.48 42.10 150.14 36.85 147.40 C 26.08 142.06 17.40 133.32 10.13 123.89 C 6.10 118.40 2.13 112.67 0.00 106.14 L 0.00 104.56 C 1.61 98.88 9.04 100.93 12.77 97.84 C 15.46 94.30 17.28 90.21 19.55 86.40 C 28.48 70.42 39.53 55.49 53.15 43.20 C 76.09 22.11 106.07 9.58 136.85 5.83 Z';
	      var initFish = new kity.Path(fishPath).addClass('_path_click01').fill('#31c8f3').stroke('#278CD0', 4);
	      initFish.setAttr('filter', 'url(#shadowFilter)');
	      that.findId = initFish.node.id;
	      that.helper.fish_node.addShape(initFish);
	      that.setNode(that.helper.fish_node);
	      that.helper.paper.addShape(that.getNode());
	      that.addRope();
	      that.createBasePoint();
	      that.createLineGroup();
	      bindEvent.call(this);
	    }
	  }, {
	    key: 'translate',
	    value: function translate() {
	      var that = this;
	      that.translation();
	    }
	  }, {
	    key: 'rotate',
	    value: function rotate() {
	      var that = this;
	      that.rotation();
	    }
	    /* 绳子动画*/

	  }, {
	    key: 'line',
	    value: function line() {
	      var that = this;
	      that.lineProcess();
	    }
	  }, {
	    key: 'showVerticalLine',
	    value: function showVerticalLine(callback) {
	      var x = void 0,
	          y = void 0,
	          x4 = void 0,
	          y4 = void 0,
	          i = void 0;
	      var that = this;
	      var x1 = that.getCp().x;
	      var y1 = that.getCp().y;
	      // x2,y2为重心点坐标
	      var x2 = that._dataCenterPoint.x;
	      var y2 = that._dataCenterPoint.y;
	      var k = (y2 - y1) / (x2 - x1);
	      that.thirdPoint = that.calculatePoint();
	      that.fourthPoint = that.calculateFourthPoint();
	      if (that.fourthPoint.points.length === 0) {
	        x4 = x1;
	        y4 = y1;
	      } else {
	        if (x1 > x2) {
	          // 此时想x,y是第三点坐标，求最小；x4,y4是第四点坐标，求最大
	          for (i = 0; i < that.fourthPoint.points.length; i++) {
	            x4 = that.fourthPoint.points[i].x > that.fourthPoint.points[0].x ? that.fourthPoint.points[i].x : that.fourthPoint.points[0].x;
	          }
	          y4 = y1 - k * (x1 - x4);
	        } else {
	          for (i = 0; i < that.fourthPoint.points.length; i++) {
	            x4 = that.fourthPoint.points[i].x < that.fourthPoint.points[0].x ? that.fourthPoint.points[i].x : that.fourthPoint.points[0].x;
	          }
	          y4 = y1 - k * (x1 - x4);
	        }
	      }
	      if (x1 > x2) {
	        x = that.thirdPoint.points[0].x;
	        for (i = 0; i < that.thirdPoint.points.length; i++) {
	          x = that.thirdPoint.points[i].x < that.thirdPoint.points[0].x ? that.thirdPoint.points[i].x : x;
	        }
	        y = y1 - k * (x1 - x);
	      } else {
	        x = that.thirdPoint.points[0].x;
	        for (i = 0; i < that.thirdPoint.points.length; i++) {
	          x = that.thirdPoint.points[i].x > that.thirdPoint.points[0].x ? that.thirdPoint.points[i].x : x;
	        }
	        y = y1 - k * (x1 - x);
	      }
	      that.x = x;
	      that.y = y;
	      that.x4 = x4;
	      that.y4 = y4;
	      that.addVerticalLine();
	      if (that.helper.TRANSFORMTIME !== 0) {
	        this._showVerticalLineTimeOutId = setTimeout(function () {
	          callback && callback();
	        }, that.helper.TRANSFORMTIME * 1.5);
	      }
	      if ($.isEmptyObject(that.lcp)) {
	        that.ropePoint = that.straightRopePoint;
	      }
	      /* 动画执行完成后把上次的值保存*/
	      that.setLcp(that.getCp());
	      that.setLdeg(that.getDeg());

	      // 保存学生端数据
	      that.helper.studentState.fish.Lcp = that.getLcp();
	    }
	  }, {
	    key: 'clearTimeOut',
	    value: function clearTimeOut() {
	      clearTimeout(this._showVerticalLineTimeOutId);
	    }
	  }, {
	    key: 'hang',
	    value: function hang() {
	      var that = this;
	      that.setDeg(that.countDeg());
	      _get(Fish.prototype.__proto__ || Object.getPrototypeOf(Fish.prototype), 'hang', this).call(this);
	    }
	  }]);

	  return Fish;
	}(_GravityBase3.default);
	/* 绑定事件，私有化方法*/


	function bindEvent() {
	  var that = this;
	  that.helper.$view.on('click', '._path_click01', function (e) {
	    var ap = {
	      x: e.clientX,
	      y: e.clientY
	    };
	    that.setAp(ap);
	    if (!that.getClickOrNot()) {
	      /* 说明已经开始悬挂*/
	      return;
	    }
	    that.setCp(that.countOffset());
	    that.createHangPoint();
	    that.setHungState(true);
	    that.helper.domObj._$jsHungBtn.removeClass('click_disabled').removeClass('ui_btn_active');

	    // 保存学生端数据
	    that.helper.studentState.fish.hungBtnState = true;
	    that.helper.studentState.fish.Cp = that.getCp();
	  });
	}
	exports.default = Fish;

/***/ }),
/* 5 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var showPlumbBob = Symbol('showPlumbBob');
	var hungEndProcessing = Symbol('hungEndProcessing');

	var GravityBase = function () {
	  function GravityBase(helper) {
	    _classCallCheck(this, GravityBase);

	    this.helper = helper;
	  }

	  _createClass(GravityBase, [{
	    key: 'initValue',
	    value: function initValue() {
	      var that = this;
	      that.ropePoint = { 'x': 832, 'y': 373 };
	      that.straightRopePoint = { 'x': 852, 'y': 474 };
	      that.setClickOrNot(true);
	      that.setHungState(false);
	      that._ap = null;
	      that._cp = null;
	      that._lcp = null;
	      that._ldeg = 0;
	      that._deg = 0;
	      that.student_translatePos = null;
	      that.student_translate = [];
	      that.student_rotatePos = null;
	      that.student_rotateDeg = 0;
	    }
	  }, {
	    key: 'getLdeg',
	    value: function getLdeg() {
	      return this._ldeg || 0;
	    }
	  }, {
	    key: 'setLdeg',
	    value: function setLdeg(ldeg) {
	      this._ldeg = ldeg;
	    }
	  }, {
	    key: 'getDeg',
	    value: function getDeg() {
	      return this._deg;
	    }
	  }, {
	    key: 'setDeg',
	    value: function setDeg(deg) {
	      this._deg = deg;
	    }
	  }, {
	    key: 'getLcp',
	    value: function getLcp() {
	      return this._lcp;
	    }
	  }, {
	    key: 'setLcp',
	    value: function setLcp(lcp) {
	      this._lcp = lcp;
	    }
	  }, {
	    key: 'getCp',
	    value: function getCp() {
	      return this._cp;
	    }
	  }, {
	    key: 'setCp',
	    value: function setCp(cp) {
	      this._cp = cp;
	    }
	  }, {
	    key: 'getAp',
	    value: function getAp() {
	      return this._ap;
	    }
	  }, {
	    key: 'setAp',
	    value: function setAp(ap) {
	      this._ap = ap;
	    }
	  }, {
	    key: 'getLineDom',
	    value: function getLineDom() {
	      return this._$lineDom;
	    }
	  }, {
	    key: 'setClickOrNot',
	    value: function setClickOrNot(clickOrNot) {
	      this._clickOrNot = clickOrNot;
	    }
	  }, {
	    key: 'getClickOrNot',
	    value: function getClickOrNot() {
	      return this._clickOrNot;
	    }
	  }, {
	    key: 'setHungState',
	    value: function setHungState(value) {
	      this._hungbtnState = value;
	    }
	  }, {
	    key: 'getHungState',
	    value: function getHungState() {
	      return this._hungbtnState;
	    }

	    /* 创建重锤线组*/

	  }, {
	    key: 'createLineGroup',
	    value: function createLineGroup() {
	      var that = this;
	      var $line_group = new kity.Group().addClass(that.getNode().getId() + '_line_group');
	      that.getNode().addShape($line_group);
	      that.setLineGroupNode($line_group);
	    }
	  }, {
	    key: 'setLineGroupNode',
	    value: function setLineGroupNode(node) {
	      this._lineGroupNode = node;
	    }
	  }, {
	    key: 'getLineGroupNode',
	    value: function getLineGroupNode() {
	      return this._lineGroupNode;
	    }

	    /* 绘制计算offset的透明基准点*/

	  }, {
	    key: 'createBasePoint',
	    value: function createBasePoint() {
	      var that = this;
	      var circle1 = new kity.Circle(1, 0, 0).fill('transparent').addClass(that.getNode().getId() + '_base_point01');
	      var circle2 = new kity.Circle(1, that.getNode().getWidth(), 0).fill('transparent').addClass(that.getNode().getId() + '_base_point02');
	      that.getNode().addShapes([circle1, circle2]);
	    }

	    /* 绘制悬挂点*/

	  }, {
	    key: 'createHangPoint',
	    value: function createHangPoint() {
	      var that = this;
	      var point = that.getCp();
	      var circle = new kity.Circle(15, point.x, point.y).fill('white').stroke('#ff6b2a', 5).addClass(that.getNode().getId() + '_choosePoint');
	      if (that.helper.$view.find('.' + that.getNode().getId() + '_choosePoint')[0]) {
	        that.helper.$view.find('.' + that.getNode().getId() + '_choosePoint').remove();
	      }
	      that.getNode().addShape(circle);
	    }

	    /* 开始悬挂
	     * lcp 上一次鼠标点击点在容器中的位置
	     * cp 当次鼠标点击点在容器中的位置
	     * ap 当次鼠标点击在页面中的位置
	     * */

	  }, {
	    key: 'hang',
	    value: function hang() {
	      var that = this;
	      that.helper.domObj._$jsCleanBtn.addClass('click_disabled');
	      that.helper.domObj._$jsHungBtn.addClass('click_state');
	      that.helper.forbideFull(true); //禁止点击全屏
	      that.setClickOrNot(false);
	      that.translate();
	    }
	  }, {
	    key: 'show',
	    value: function show() {
	      var that = this;
	      that.getNode().removeClass('hide_dom');
	    }
	  }, {
	    key: 'hide',
	    value: function hide() {
	      var that = this;
	      that.getNode().addClass('hide_dom');
	    }
	  }, {
	    key: 'setNode',
	    value: function setNode(node) {
	      this._node = node;
	    }
	  }, {
	    key: 'getNode',
	    value: function getNode() {
	      return this._node;
	    }
	  }, {
	    key: 'getScale',
	    value: function getScale() {
	      var that = this;
	      return that.getNode().node.getBoundingClientRect().width / that.getNode().getWidth();
	    }

	    /* 添加悬挂绳*/

	  }, {
	    key: 'addRope',
	    value: function addRope() {
	      var that = this;
	      var foreignObject = document.createElementNS('http://www.w3.org/2000/svg', 'foreignObject');
	      $(foreignObject).html('<span class="mg_rope mg_rope_head _mg_rope' + that.getNode().getId() + '"></span>');
	      that.helper.$view.find('svg').append($(foreignObject));
	      $(foreignObject).css('transform', 'translate(772px,38px)');
	      that._$lineDom = $(foreignObject);
	      that._$lineDom.attr('width', 114).attr('height', 460);
	    }

	    /* 计算旋转角度
	     *    point1为旋转点
	     *    point0为固定点
	     *    根据两点构建一个直角三角形，算出tan
	     * */

	  }, {
	    key: 'countDeg',
	    value: function countDeg() {
	      var that = this;
	      var point0 = that.getCp();
	      var point1 = that._dataCenterPoint;
	      var x = Math.abs(point1.x - point0.x);
	      var y = Math.abs(point1.y - point0.y);
	      var deg = void 0,
	          atanA = void 0;
	      if (point1.x > point0.x) {
	        if (point1.y <= point0.y) {
	          // 得到弧度
	          atanA = Math.atan(y / x);
	          // 弧度转角度
	          // 1弧度=180/π度
	          // 1度=π/180弧度
	          deg = parseFloat(atanA * (180 / Math.PI)) + 90;
	        } else {
	          atanA = Math.atan(x / y);
	          deg = parseFloat(atanA * (180 / Math.PI));
	        }
	      } else if (point1.x < point0.x) {
	        if (point1.y <= point0.y) {
	          atanA = Math.atan(y / x);
	          deg = -parseFloat(atanA * (180 / Math.PI)) - 90;
	        } else {
	          atanA = Math.atan(x / y);
	          deg = -parseFloat(atanA * (180 / Math.PI));
	        }
	      } else {
	        if (point1.y < point0.y) {
	          deg = 180;
	        } else {
	          deg = 0;
	        }
	      }
	      return deg;
	    }
	    /* 物体移动
	     * ap : 选中点的相对页面的绝对坐标
	     * lcp  上次选择点
	     * cp   此次选择点
	     * scale 缩放比
	     * rp 绳子悬挂点
	     * */

	  }, {
	    key: 'translation',
	    value: function translation() {
	      var that = this;
	      var lcp = that.getLcp();
	      var cp = that.getCp();
	      var scale = that.getScale();
	      var rp = that.ropePoint;
	      var Svg = {
	        getAttrTranslate: function getAttrTranslate(transform) {
	          var transformRegex = {
	            translate: /translate\(\s*?([\-0-9.]*)\s*?([\-0-9.]*)\s*?\)/
	          };
	          var result = transformRegex.translate.exec(transform);
	          if (result) {
	            result.shift();
	            result.forEach(function (item, i) {
	              result[i] = parseFloat(item);
	            });
	            return result;
	          }
	          return [];
	        }
	      };
	      var translate = Svg.getAttrTranslate($(that.getNode().node).attr('transform'));
	      var newAp = $(that.helper.$view).find('.' + that.getNode().getId() + '_choosePoint')[0].getBoundingClientRect();
	      var lastCirclePos = that.helper.baseStraightRopePoint.getBoundingClientRect();
	      if (!$.isEmptyObject(lcp)) {
	        /* 非第一次位移*/
	        var subPos = {
	          x: (newAp.left - lastCirclePos.left) / scale + 15,
	          y: (newAp.top - lastCirclePos.top) / scale + 15
	        };
	        var amove = new kity.Animator([translate[0], translate[1]], [translate[0] - subPos.x, translate[1] - subPos.y], function (obj, value) {
	          obj.setTranslate(value);
	        });
	        var timeLine = this._translateAnimator = amove.start(that.getNode(), that.helper.TRANSFORMTIME * 0.7, 'ease');
	        timeLine.on('finish', function () {
	          var translate2 = Svg.getAttrTranslate($(that.getNode().node).attr('transform'));
	          /* 计算偏移量*/
	          that.getNode().setRotate(0, cp.x, cp.y);
	          var newCirclePos = $(that.helper.$view).find('.' + that.getNode().getId() + '_choosePoint')[0].getBoundingClientRect();
	          /* 后面加的数字15为圆的半径15*/
	          var subPos = {
	            x: (newCirclePos.left - lastCirclePos.left) / scale + 15,
	            y: (newCirclePos.top - lastCirclePos.top) / scale + 15
	          };
	          that.getNode().setTranslate(translate2[0] - subPos.x, translate2[1] - subPos.y);
	          that.helper.forbideFull(false); //允许点击全屏
	          that.rotate();
	          // 保存数据
	          that.student_translatePos = cp;
	          that.student_translate = [translate2[0] - subPos.x, translate2[1] - subPos.y];
	        });
	      } else {
	        /*第一次位移*/
	        var subPos2 = {
	          x: rp.x - cp.x,
	          y: rp.y - cp.y
	        };
	        var amove2 = new kity.Animator([translate[0], translate[1]], [subPos2.x, subPos2.y], function (obj, value) {
	          obj.setTranslate(value);
	        });
	        var timeLine2 = this._translateAnimator = amove2.start(that.getNode(), that.helper.TRANSFORMTIME * 0.7, 'ease');
	        timeLine2.on('finish', function () {
	          that.helper.forbideFull(false); //允许点击全屏
	          that.rotate();
	          that.line();
	        });
	      }
	    }

	    /* 物体旋转 */

	  }, {
	    key: 'rotation',
	    value: function rotation() {
	      var that = this;
	      var deg = that.getDeg();
	      var ldeg = that.getLdeg();
	      var obj_deg = that.getDeg();
	      /* 如果两次的旋转角度之差大于180度的情况下，另外计算*/
	      if (!$.isEmptyObject(that.getLcp())) {
	        var ratation_deg = Math.abs(deg - ldeg);
	        if (ratation_deg > 180) {
	          if (ldeg < 0) {
	            obj_deg = obj_deg - 360;
	          } else {
	            obj_deg = obj_deg + 360;
	          }
	        }
	      }
	      var aspin = new kity.Animator([ldeg, that.getCp().x, that.getCp().y], [obj_deg, that.getCp().x, that.getCp().y], function (obj, value) {
	        obj.setRotate(value);
	      });
	      if (!$.isEmptyObject(that.getLcp())) {
	        /* 非第一次点击*/
	        var timeLine = this._rotationAnimator = aspin.start(that.getNode(), that.helper.TRANSFORMTIME * 0.7, 'ease');
	        timeLine.on('finish', function () {
	          that[showPlumbBob](function () {
	            that.showVerticalLine(function () {
	              that[hungEndProcessing]();
	            });
	          });
	        });
	      } else {
	        /* 第一次点击*/
	        var rope = that.helper.$view.find('._mg_rope' + that.getNode().getId() + '');
	        rope.removeClass('mg_rope_head');
	        this._rotationAnimator = aspin.start(that.getNode(), that.helper.TRANSFORMTIME, 'ease');
	      }
	      // 保存数据
	      that.student_rotatePos = that.getCp();
	      that.student_rotateDeg = obj_deg;
	    }

	    /* 绳子拉直效果*/

	  }, {
	    key: 'lineProcess',
	    value: function lineProcess() {
	      var that = this;
	      var cp = that.getCp();
	      var rp = that.ropePoint;
	      var srp = that.straightRopePoint;
	      var rope = that.helper.$view.find('._mg_rope' + that.getNode().getId() + '');
	      rope.addClass('on');
	      var bmove = new kity.Animator([rp.x - cp.x, rp.y - cp.y], [srp.x - cp.x, srp.y - cp.y], function (obj, value) {
	        obj.setTranslate(value);
	      });
	      var timeLine = this._lineProcessMoveAnimator = bmove.start(that.getNode(), that.helper.TRANSFORMTIME / 4, 'ease');
	      timeLine.on('finish', function () {
	        that.sway(function () {
	          that[showPlumbBob](function () {
	            that.showVerticalLine(function () {
	              that[hungEndProcessing]();
	            });
	          });
	        });
	        rope.addClass('_notfisrt').removeClass('on');
	      });

	      // 保存数据
	      that.student_translate = [srp.x - cp.x, srp.y - cp.y];
	    }

	    /* 绳子和物体的摆动效果*/

	  }, {
	    key: 'sway',
	    value: function sway(callback) {
	      var that = this;
	      var parent = that.helper.$view.find('#' + that.findId).closest('svg');
	      parent.css('animation', 'swingItem 2s ease-in-out');
	      if (that.helper.TRANSFORMTIME !== 0) {
	        this._swayTimeOutId = setTimeout(function () {
	          callback && callback();
	          parent.css('animation', '');
	        }, that.helper.TRANSFORMTIME * 2.1);
	      }
	    }

	    /* 计算显示重垂线的第三点*/

	  }, {
	    key: 'calculatePoint',
	    value: function calculatePoint() {
	      var that = this;
	      // x1,y1为悬挂点坐标
	      var x1 = that.getCp().x;
	      var y1 = that.getCp().y;
	      // x2,y2为重心点坐标
	      var x2 = that._dataCenterPoint.x;
	      var y2 = that._dataCenterPoint.y;
	      // 声明第三点
	      var x3 = void 0,
	          y3 = void 0;
	      var length = 2500;
	      var k = (y2 - y1) / (x2 - x1);
	      if (x1 > x2) {
	        // 此时所求第三点的x值取小
	        x3 = x1 - length / Math.sqrt(1 + k * k);
	        y3 = y1 - length * k / Math.sqrt(1 + k * k);
	      } else {
	        // 此时所求第三点的x值取大
	        x3 = x1 + length / Math.sqrt(1 + k * k);
	        y3 = y1 + length * k / Math.sqrt(1 + k * k);
	      }
	      var line = new kity.Line(x1, y1, x3, y3).stroke('transparent', 10);
	      var shapeId = line.getId();
	      that.getNode().addShape(line);
	      // 以下求相交的第三点x,y
	      var shapeItem = that.helper.$view.find('#' + that.findId)[0];
	      var shapeLine = that.helper.$view.find('#' + shapeId)[0];
	      var shape1 = new Svg2DCalculate.Path(shapeItem);
	      var shape2 = new Svg2DCalculate.Path(shapeLine);
	      var inter = Svg2DCalculate.Intersection.intersectShapes(shape1, shape2);
	      that.getNode().removeShape(line);
	      return inter;
	    }

	    /* 计算重垂线第四点*/

	  }, {
	    key: 'calculateFourthPoint',
	    value: function calculateFourthPoint() {
	      var that = this;
	      // x1,y1为悬挂点坐标
	      var x1 = that.getCp().x;
	      var y1 = that.getCp().y;
	      // x2,y2为重心点坐标
	      var x2 = that._dataCenterPoint.x;
	      var y2 = that._dataCenterPoint.y;
	      var x4 = void 0,
	          y4 = void 0;
	      var length = 1500;

	      var k = (y2 - y1) / (x2 - x1);
	      if (x1 > x2) {
	        // 此时所求第四点的x值取大
	        x4 = x1 + length / Math.sqrt(1 + k * k);
	        y4 = y1 + length * k / Math.sqrt(1 + k * k);
	      } else {
	        // 此时所求第四点的x值取小
	        x4 = x1 - length / Math.sqrt(1 + k * k);
	        y4 = y1 - length * k / Math.sqrt(1 + k * k);
	      }
	      var line = new kity.Line(x1, y1, x4, y4).stroke('transparent', 10);

	      var shapeId = line.getId();
	      that.getNode().addShape(line);
	      // 以下求相交的第三点x,y
	      var shapeItem = that.helper.$view.find('#' + that.findId)[0];
	      var shapeLine = that.helper.$view.find('#' + shapeId)[0];
	      var shape1 = new Svg2DCalculate.Path(shapeItem);
	      var shape2 = new Svg2DCalculate.Path(shapeLine);
	      var inter = Svg2DCalculate.Intersection.intersectShapes(shape1, shape2);
	      that.getNode().removeShape(line);
	      return inter;
	    }

	    /* 显示重锤线*/

	  }, {
	    key: 'addVerticalLine',
	    value: function addVerticalLine() {
	      var that = this;
	      var gravityLine = new kity.Line(that.x, that.y, that.x4, that.y4).stroke('#c41f1f', 10);
	      that.getLineGroupNode().addShape(gravityLine);
	    }

	    /* 计算offset值*/

	  }, {
	    key: 'countOffset',
	    value: function countOffset() {
	      var that = this;
	      var point0 = that.getAp();
	      var scale = that.getScale();
	      var base_point01 = $(that.helper.$view).find('.' + that.getNode().getId() + '_base_point01')[0].getBoundingClientRect();
	      var base_point02 = $(that.helper.$view).find('.' + that.getNode().getId() + '_base_point02')[0].getBoundingClientRect();
	      /* point1和point2为基准点，point3为鼠标点击点*/
	      var point1 = {
	        x: base_point01.left,
	        y: base_point01.top
	      };
	      var point2 = {
	        x: base_point02.left,
	        y: base_point02.top
	      };
	      var point3 = {
	        x: point0.x,
	        y: point0.y
	      };
	      var A = Math.sqrt(Math.pow(point1.y - point2.y, 2) + Math.pow(point1.x - point2.x, 2));
	      var B = Math.sqrt(Math.pow(point1.y - point3.y, 2) + Math.pow(point1.x - point3.x, 2));
	      var C = Math.sqrt(Math.pow(point2.y - point3.y, 2) + Math.pow(point2.x - point3.x, 2));
	      /* d = a²+b²-c²*/
	      var d = Math.pow(A, 2) + Math.pow(B, 2) - Math.pow(C, 2);
	      /* cosC=(a²+b²-c²)/2ab，
	       * sinC=√【4a²b²-(a²+b²-c²)²】/2ab*/
	      var cosC = d / (2 * A * B);
	      var sinC = Math.sqrt(4 * Math.pow(A, 2) * Math.pow(B, 2) - Math.pow(d, 2)) / (2 * A * B);
	      var point = {
	        x: B * cosC / scale,
	        y: B * sinC / scale
	      };
	      return point;
	    }
	  }, {
	    key: 'stop',
	    value: function stop() {
	      clearTimeout(this._swayTimeOutId);
	      clearTimeout(this._showPlumbBobTimeOutId);
	      if (this.helper.domObj._$mgHammerLine) {
	        this.helper.domObj._$mgHammerLine.stop();
	      }
	      if (this._lineProcessMoveAnimator) {
	        this._lineProcessMoveAnimator.stop();
	      }
	      if (this._rotationAnimator) {
	        this._rotationAnimator.stop();
	      }
	      if (this._translateAnimator) {
	        this._translateAnimator.stop();
	      }
	    }
	    /* 显示铅锤*/

	  }, {
	    key: showPlumbBob,
	    value: function value(callback) {
	      var that = this;
	      var hammer = that.helper.domObj._$mgHammerLine;
	      hammer.fadeIn(that.helper.TRANSFORMTIME / 2).fadeOut(that.helper.TRANSFORMTIME * 3);
	      if (that.helper.TRANSFORMTIME !== 0) {
	        this._showPlumbBobTimeOutId = setTimeout(function () {
	          callback && callback();
	        }, that.helper.TRANSFORMTIME * 1.5);
	      }
	    }

	    /* 悬挂结束时处理事件*/

	  }, {
	    key: hungEndProcessing,
	    value: function value() {
	      var that = this;
	      that.helper.domObj._$jsCleanBtn.removeClass('click_disabled');
	      that.setClickOrNot(true);
	      that.setHungState(false);
	      that.helper.domObj._$jsHungBtn.removeClass('click_state').removeClass('ui_btn_active').addClass('click_disabled');
	      // 保存学生端数据
	      that.helper.studentState.aniState = false;
	      if (that.getNode().getId() === '_svg_fish') {
	        that.helper.studentState.fish.hungBtnState = false;
	        that.helper.studentState.fish.translatePos = that.student_translatePos;
	        that.helper.studentState.fish.translate = that.student_translate;
	        that.helper.studentState.fish.rotatePos = that.student_rotatePos;
	        that.helper.studentState.fish.rotateDeg = that.student_rotateDeg;
	      } else {
	        that.helper.studentState.fishhook.hungBtnState = false;
	        that.helper.studentState.fish.translatePos = that.student_translatePos;
	        that.helper.studentState.fishhook.translate = that.student_translate;
	        that.helper.studentState.fishhook.rotatePos = that.student_rotatePos;
	        that.helper.studentState.fishhook.rotateDeg = that.student_rotateDeg;
	      }
	    }
	  }]);

	  return GravityBase;
	}();

	exports.default = GravityBase;

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _GravityBase2 = __webpack_require__(5);

	var _GravityBase3 = _interopRequireDefault(_GravityBase2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var FishHook = function (_GravityBase) {
	  _inherits(FishHook, _GravityBase);

	  function FishHook() {
	    _classCallCheck(this, FishHook);

	    return _possibleConstructorReturn(this, (FishHook.__proto__ || Object.getPrototypeOf(FishHook)).apply(this, arguments));
	  }

	  _createClass(FishHook, [{
	    key: 'init',
	    value: function init(opt) {
	      this.opt = $.extend({}, opt);
	      this.helper = this.opt.helper;
	      /* 鱼钩的重心点*/
	      this._dataCenterPoint = { 'x': 269, 'y': 115 };
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var that = this;
	      that.initValue();
	      that.helper.fishhook_node = new kity.Group().addClass('mg_svg_fishhook').setTranslate(664, 644).setId('_svg_fishhook');
	      // 设置Path
	      var fishhookPath = 'M 222.58 48.64 C 241.95 35.21 265.21 26.90 288.92 27.11 C 313.83 27.34 338.60 36.39 357.89 52.13 C 374.42 66.94 385.61 87.46 390.21 109.10 C 395.65 135.07 389.28 162.78 374.75 184.77 C 358.60 209.50 329.28 223.95 300.03 224.14 C 295.85 224.05 291.48 223.43 287.90 221.14 C 283.87 218.55 282.00 213.62 281.87 208.99 C 281.73 206.58 282.88 204.06 285.10 202.96 C 288.48 201.08 292.46 202.28 296.10 201.72 C 320.99 198.80 344.27 182.78 355.03 160.02 C 358.39 153.19 359.50 145.53 359.92 138.00 C 360.66 121.78 357.14 105.19 348.76 91.20 C 342.37 80.53 333.36 71.04 321.84 65.96 C 303.11 57.51 281.77 58.81 261.99 62.13 C 250.54 63.51 240.16 68.91 230.07 74.15 C 222.39 78.35 214.72 82.62 207.42 87.47 C 189.67 100.76 170.50 112.23 150.10 120.93 C 135.06 127.18 119.28 132.12 102.97 133.37 C 88.95 134.59 74.90 132.12 61.43 128.38 C 46.20 123.93 31.21 116.60 20.66 104.44 C 17.33 100.38 13.98 95.86 13.24 90.53 C 13.76 90.14 14.79 89.35 15.31 88.95 C 24.02 93.33 31.93 99.10 40.62 103.51 C 54.72 110.70 70.12 115.95 86.06 116.36 C 110.96 117.09 135.45 109.14 156.97 97.04 C 180.79 83.63 200.10 63.95 222.58 48.64 Z ';
	      var initFishhook = new kity.Path(fishhookPath).addClass('_path_click02').fill('#fdd943').stroke('#CF932A', 4);
	      initFishhook.setAttr('filter', 'url(#shadowFilter)');
	      that.findId = initFishhook.node.id;
	      that.helper.fishhook_node.addShape(initFishhook);
	      that.setNode(that.helper.fishhook_node);
	      that.helper.paper.addShape(that.getNode());
	      that.addRope();
	      that.createBasePoint();
	      that.createLineGroup();
	      bindEvent.call(this);
	    }
	  }, {
	    key: 'translate',
	    value: function translate() {
	      var that = this;
	      that.translation();
	    }
	  }, {
	    key: 'rotate',
	    value: function rotate() {
	      var that = this;
	      that.rotation();
	    }

	    /* 绳子动画*/

	  }, {
	    key: 'line',
	    value: function line() {
	      var that = this;
	      that.lineProcess();
	    }
	  }, {
	    key: 'showVerticalLine',
	    value: function showVerticalLine(callback) {
	      var that = this;
	      var x = void 0,
	          y = void 0,
	          x4 = void 0,
	          y4 = void 0,
	          i = void 0;
	      var x1 = that.getCp().x;
	      var y1 = that.getCp().y;
	      // x2,y2为重心点坐标
	      var x2 = that._dataCenterPoint.x;
	      var y2 = that._dataCenterPoint.y;
	      var k = (y2 - y1) / (x2 - x1);
	      that.thirdPoint = that.calculatePoint();
	      that.fourthPoint = that.calculateFourthPoint();
	      if (that.thirdPoint.points.length === 0) {
	        x = 269 * 2 - x1;
	        y = 115 * 2 - y1;
	      } else if (that.thirdPoint.points.length === 1) {
	        x = 269 * 2 - x1;
	        y = 115 * 2 - y1;
	      } else {
	        if (x1 > x2) {
	          for (i = 0; i < that.thirdPoint.points.length; i++) {
	            x = that.thirdPoint.points[i].x < that.thirdPoint.points[0].x ? that.thirdPoint.points[i].x : that.thirdPoint.points[0].x;
	          }
	          y = y1 - k * (x1 - x);
	        } else {
	          for (i = 0; i < that.thirdPoint.points.length; i++) {
	            x = that.thirdPoint.points[i].x > that.thirdPoint.points[0].x ? that.thirdPoint.points[i].x : that.thirdPoint.points[0].x;
	          }
	          y = y1 - k * (x1 - x);
	        }
	        if (Math.sqrt((x - x1) * (x - x1) + (y - y1) * (y - y1)) < 50) {
	          x = 269 * 2 - x1;
	          y = 115 * 2 - y1;
	        }
	      }
	      if (that.fourthPoint.points.length === 0) {
	        x4 = x1;
	        y4 = y1;
	      } else {
	        if (x1 > x2) {
	          for (i = 0; i < that.fourthPoint.points.length; i++) {
	            x4 = that.fourthPoint.points[i].x > that.fourthPoint.points[0].x ? that.fourthPoint.points[i].x : that.fourthPoint.points[0].x;
	          }
	          y4 = y1 - k * (x1 - x4);
	        } else {
	          for (i = 0; i < that.fourthPoint.points.length; i++) {
	            x4 = that.fourthPoint.points[i].x < that.fourthPoint.points[0].x ? that.fourthPoint.points[i].x : that.fourthPoint.points[0].x;
	          }
	          y4 = y1 - k * (x1 - x4);
	        }
	      }
	      that.x = x;
	      that.y = y;
	      that.x4 = x4;
	      that.y4 = y4;
	      that.addVerticalLine();
	      if (that.helper.TRANSFORMTIME !== 0) {
	        this._showVerticalLineTimeOutId = setTimeout(function () {
	          callback && callback();
	        }, that.helper.TRANSFORMTIME * 1.5);
	      }
	      if ($.isEmptyObject(that.lcp)) {
	        that.ropePoint = that.straightRopePoint;
	      }
	      /* 动画执行完成后把上次的值保存*/
	      that.setLcp(that.getCp());
	      that.setLdeg(that.getDeg());

	      // 保存学生端数据
	      that.helper.studentState.fishhook.Lcp = that.getLcp();
	    }
	  }, {
	    key: 'clearTimeOut',
	    value: function clearTimeOut() {
	      clearTimeout(this._showVerticalLineTimeOutId);
	    }
	  }, {
	    key: 'hang',
	    value: function hang() {
	      var that = this;
	      that.setDeg(that.countDeg());
	      _get(FishHook.prototype.__proto__ || Object.getPrototypeOf(FishHook.prototype), 'hang', this).call(this);
	    }
	  }]);

	  return FishHook;
	}(_GravityBase3.default);
	/* 绑定事件，私有化方法*/


	function bindEvent() {
	  var that = this;
	  that.helper.$view.on('click', '._path_click02', function (e) {
	    var ap = {
	      x: e.clientX,
	      y: e.clientY
	    };
	    that.setAp(ap);
	    if (!that.getClickOrNot()) {
	      /* 说明已经开始悬挂*/
	      return;
	    }
	    that.setCp(that.countOffset());
	    that.createHangPoint();
	    that.setHungState(true);
	    that.helper.domObj._$jsHungBtn.removeClass('click_disabled').removeClass('ui_btn_active');

	    // 保存学生端数据
	    that.helper.studentState.fishhook.hungBtnState = true;
	    that.helper.studentState.fishhook.Cp = that.getCp();
	  });
	}
	exports.default = FishHook;

/***/ })
/******/ ]);]]></presenter><resources><file src="./resources/wood/images/mg_fish_icon.png"/><file src="./resources/wood/images/mg_fishhook_icon.png"/><file src="./resources/wood/images/mg_Hammer_line.png"/><file src="./resources/wood/images/mg_hung.png"/><file src="./resources/wood/images/mg_nohung.png"/><file src="./resources/wood/images/mg_rope_animation.png"/><file src="./resources/wood/images/mg_rope_head.png"/><file src="./resources/wood/images/mg_rope.png"/><file src="./resources/wood/images/mg_wall.png"/></resources></addon>