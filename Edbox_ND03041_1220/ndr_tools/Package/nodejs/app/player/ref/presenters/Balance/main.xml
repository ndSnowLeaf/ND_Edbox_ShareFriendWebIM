<?xml version='1.0' encoding='UTF-8'?>
<addon id="templateid"><properties><property name="question_id" displayName="题目ID" type="string" isLocalized="false"/><property name="question_url" displayName="题目内容" type="jsonFile" isLocalized="false"/></properties><dependencies><jsDependency><javaScript name="out_frame" version="1.0.8"/><javaScript name="common_css" version="1.0.0"/></jsDependency></dependencies><css><![CDATA[.addon_Balance .exam_skin_wood .balance_box{position:relative;padding-bottom:12.83333em;width:100%;height:100%;background:#bfd3e2}.addon_Balance .exam_skin_wood .balance_box .balance_content{position:absolute;bottom:12.83333em;left:50%;margin-left:-21em;width:42em;height:16.54167em}.addon_Balance .exam_skin_wood .balance_box .balance_content .balance_station{position:absolute;left:50%;bottom:0;margin-left:-8.41667em;width:16.875em;height:16.29167em;background:url(resources/wood/images/balance.png) center bottom no-repeat;background-size:100% auto;z-index:20}.addon_Balance .exam_skin_wood .balance_box .balance_content .balance_station .pointer{position:absolute;left:50%;bottom:11.66667em;margin-left:-.5em;width:1em;height:3.41667em;background:url(resources/wood/images/balance-pointer.png) center bottom no-repeat;background-size:auto 100%;z-index:21;-webkit-transform:rotate(0);transform:rotate(0);-webkit-transform-origin:50% 100%;transform-origin:50% 100%}.addon_Balance .exam_skin_wood .balance_box .balance_content .balance_bar{position:absolute;left:50%;bottom:7.79167em;margin-left:-2.5em;width:5.04167em;height:5.04167em}.addon_Balance .exam_skin_wood .balance_box .balance_content .balance_bar:before{content:'';display:inline-block;position:absolute;left:50%;top:2.08333em;margin-left:-15.375em;width:30.75em;height:.91667em;background:url(resources/wood/images/balance-bar.png) left top no-repeat;background-size:100% auto;z-index:21;-webkit-transform:rotate(0);transform:rotate(0)}.addon_Balance .exam_skin_wood .balance_box .balance_content.animated .balance_bar:before,.addon_Balance .exam_skin_wood .balance_box .balance_content.animated .balance_plate,.addon_Balance .exam_skin_wood .balance_box .balance_content.animated .balance_station .pointer{-webkit-transition:-webkit-transform .3s cubic-bezier(.4,1.47,1,1);transition:-webkit-transform .3s cubic-bezier(.4,1.47,1,1);transition:transform .3s cubic-bezier(.4,1.47,1,1);transition:transform .3s cubic-bezier(.4,1.47,1,1),-webkit-transform .3s cubic-bezier(.4,1.47,1,1)}.addon_Balance .exam_skin_wood .balance_box .balance_content .balance_bar:after{content:'';display:inline-block;position:absolute;left:0;width:5.04167em;height:5.04167em;background:url(resources/wood/images/balance-circle.png) center center no-repeat;background-size:100% auto;z-index:22}.addon_Balance .exam_skin_wood .balance_box .balance_content .balance_plate{position:absolute;bottom:9.625em;display:inline-block;padding-bottom:4.75em;width:11.66667em;background:url(resources/wood/images/plate.png) left bottom no-repeat;background-size:100% auto;z-index:25}.addon_Balance .exam_skin_wood .balance_box .balance_content .balance_plate.left{left:0}.addon_Balance .exam_skin_wood .balance_box .balance_content .balance_plate.right{right:0}.addon_Balance .exam_skin_wood .balance_box .balance_content .balance_plate .plate_box{position:relative;margin:0 auto;width:9.375em;height:9.375em;cursor:pointer}.addon_Balance .exam_skin_wood .balance_box .balance_content .balance_plate .plate_box img{height:100%;width:100%}.addon_Balance .exam_skin_wood .balance_box .balance_content .balance_plate .plate_box>span{position:absolute;display:inline-block;width:3.125em;height:3.125em}.addon_Balance .exam_skin_wood .balance_box .balance_content .balance_plate .plate_box>span:hover{opacity:.8}.addon_Balance .exam_skin_wood .balance_box .balance_content .balance_plate .plate_box>span:active{opacity:.6}.addon_Balance .exam_skin_wood .balance_box .balance_content .balance_plate .plate_box .w21{width:6.25em}.addon_Balance .exam_skin_wood .balance_box .balance_content .balance_plate .plate_box .w12{height:6.25em}.addon_Balance .exam_skin_wood .balance_box .balance_content .balance_plate .plate_box .w22{height:6.25em;width:6.25em}.addon_Balance .exam_skin_wood .balance_box .balance_content .balance_plate .plate_box .w23{height:9.375em;width:6.25em}.addon_Balance .exam_skin_wood .balance_box .balance_content .balance_plate .plate_box .w33{height:9.375em;width:9.375em}.addon_Balance .exam_skin_wood .balance_box .balance_content.heavy_left .pointer{margin-left:-1.25em;-webkit-transform:rotate(-30deg);transform:rotate(-30deg)}.addon_Balance .exam_skin_wood .balance_box .balance_content.heavy_left .balance_bar:before{-webkit-transform:rotate(-10deg);transform:rotate(-10deg)}.addon_Balance .exam_skin_wood .balance_box .balance_content.heavy_left .balance_plate.left{-webkit-transform:translateY(2.66667em);transform:translateY(2.66667em)}.addon_Balance .exam_skin_wood .balance_box .balance_content.heavy_left .balance_plate.right{-webkit-transform:translateY(-2.66667em);transform:translateY(-2.66667em)}.addon_Balance .exam_skin_wood .balance_box .balance_content.heavy_right .pointer{margin-left:.20833em;-webkit-transform:rotate(30deg);transform:rotate(30deg)}.addon_Balance .exam_skin_wood .balance_box .balance_content.heavy_right .balance_bar:before{-webkit-transform:rotate(10deg);transform:rotate(10deg)}.addon_Balance .exam_skin_wood .balance_box .balance_content.heavy_right .balance_plate.right{-webkit-transform:translateY(2.66667em);transform:translateY(2.66667em)}.addon_Balance .exam_skin_wood .balance_box .balance_content.heavy_right .balance_plate.left{-webkit-transform:translateY(-2.66667em);transform:translateY(-2.66667em)}.addon_Balance .exam_skin_wood .balance_box .balances_bottom{overflow:hidden;position:absolute;bottom:0;width:100%;height:12.83333em;background:#a4c0d6;padding:0 4em;border-top:.08333em solid #668399}.addon_Balance .exam_skin_wood .balance_box .balances_bottom .balance_left{overflow:hidden;position:relative;padding:0 2.16667em;height:100%;border-top:.08333em solid #b7d1e6}.addon_Balance .exam_skin_wood .balance_box .balances_bottom .balance_left .balance_btn{position:absolute;top:50%;display:block;margin-top:-.83333em;width:1.66667em;height:2.5em}.addon_Balance .exam_skin_wood .balance_box .balances_bottom .balance_left .balance_btn.btn_left{left:.41667em;background:url(resources/wood/images/btn-left.png) center center no-repeat;background-size:100% auto}.addon_Balance .exam_skin_wood .balance_box .balances_bottom .balance_left .balance_btn.btn_left:active{background:url(resources/wood/images/btn-left-active.png) center center no-repeat;background-size:100% auto}.addon_Balance .exam_skin_wood .balance_box .balances_bottom .balance_left .balance_btn.btn_right{right:.41667em;background:url(resources/wood/images/btn-right.png) center center no-repeat;background-size:100% auto}.addon_Balance .exam_skin_wood .balance_box .balances_bottom .balance_left .balance_btn.btn_right:active{background:url(resources/wood/images/btn-right-active.png) center center no-repeat;background-size:100% auto}.addon_Balance .exam_skin_wood .balance_box .balances_bottom .balance_left .col-balance{overflow:hidden;position:absolute;left:2.16667em;right:2.16667em;bottom:1.66667em;padding-left:1.41667em}.addon_Balance .exam_skin_wood .balance_box .balances_bottom .balance_right{float:right;padding-left:1.91667em;margin-left:1.66667em;width:38%;height:100%;border-left:.08333em solid #668399;border-top:.08333em solid #b7d1e6}.addon_Balance .exam_skin_wood .balance_box .balances_bottom .balance_right .col-balance{margin:1.66667em 0 .83333em}.addon_Balance .exam_skin_wood .balance_box .balances_bottom .balance_right .col-balance li{margin-right:1.41667em}.addon_Balance .exam_skin_wood .balance_box .balances_bottom .col-balance{display:inline-block;white-space:nowrap}.addon_Balance .exam_skin_wood .balance_box .balances_bottom .col-balance li{display:inline-block;margin-right:1.83333em;width:3.58333em;height:3.45833em;vertical-align:bottom}.addon_Balance .exam_skin_wood .balance_box .balances_bottom .col-balance li a{display:block;height:100%}.addon_Balance .exam_skin_wood .balance_box .balances_bottom .col-balance li a:hover{opacity:.8}.addon_Balance .exam_skin_wood .balance_box .balances_bottom .col-balance li a:active{opacity:.6}.addon_Balance .exam_skin_wood .balance_box .balances_bottom .col-balance li a img{width:100%;height:100%}.addon_Balance .exam_skin_wood .balance_box .balances_bottom .col-balance li.w12{height:6.91667em}.addon_Balance .exam_skin_wood .balance_box .balances_bottom .col-balance li.w21{width:7.16667em}.addon_Balance .exam_skin_wood .balance_box .balances_bottom .col-balance li.w22{width:7.16667em;height:6.91667em}.addon_Balance .exam_skin_wood .balance_box .balances_bottom .col-balance li.w23{width:7.16667em;height:10.375em}.addon_Balance .exam_skin_wood .balance_box .balances_bottom .col-balance li.w33{width:10.75em;height:10.375em}.addon_Balance .exam_skin_wood .balance_box.balance_board .balances_bottom{padding:0 4em}.addon_Balance .exam_skin_wood .balance_box.balance_board .balance_right{margin-left:1.66667em;width:38%}.addon_Balance .exam_skin_wood .balance_box .balance_inner_mask{position:absolute;width:100%;height:100%}.addon_Balance .exam_skin_wood .balance_box .balance_pre_load_img{display:none}.addon_Balance .exam_skin_wood .balance_box .balance_move{display:none;position:fixed;z-index:99}.addon_Balance .exam_skin_wood .balance_box .balance_move img{width:100%;height:100%}.addon_Balance .exam_skin_wood .balance_box .balance_move.w11{width:3.58333em;height:3.45833em}.addon_Balance .exam_skin_wood .balance_box .balance_move.w12{width:3.58333em;height:6.91667em}.addon_Balance .exam_skin_wood .balance_box .balance_move.w21{width:7.16667em;height:3.45833em}.addon_Balance .exam_skin_wood .balance_box .balance_move.w22{width:7.16667em;height:6.91667em}.addon_Balance .exam_skin_wood .balance_box .balance_move.w23{width:7.16667em;height:10.375em}.addon_Balance .exam_skin_wood .balance_box .balance_move.w33{width:10.75em;height:10.375em}.addon_Balance .exam_skin_wood .balance_box .balance_move.show{display:inline-block}]]></css><view><![CDATA[<div class="exam_skin_wood"><div class="balance_box"><div class="balance_content"><div class="balance_station"><span class="pointer"></span></div><div class="balance_bar"></div><div class="balance_plate left"><div class="plate_box"></div></div><div class="balance_plate right plate_up"><div class="plate_box"></div></div></div><div class="balances_bottom clearfix"><div class="balance_right"><ul class="col-balance clearfix col-balance-g"></ul><ul class="col-balance clearfix col-balance-kg"></ul></div><div class="balance_left"><ul class="col-balance clearfix" data-left="0"></ul><a class="balance_btn btn_left"></a> <a class="balance_btn btn_right"></a></div></div><div class="balance_move" data-name="undefined" data-weight="0" data-class="w11"><div class="balance_inner_mask"></div><img data-ssrc="" data-msrc></div><div class="balance_pre_load_img" id="preLoad"></div></div></div>]]></view><presenter><![CDATA['use strict';

function AddonBalance_create() {

    /**
     * [运行状态判断]
     */
    var isApp = false;
    var isWeb = false;
    var isPC = false;
    var isHomeWork = false;
    var isTeacher = false;
    var isStudent = false;
    var isProjector = false;
    var isPPTShell = false;
    var role;
    var goodsInfo, weightsInfo;
    var currentRuntime = player.getPlayerServices().getRuntime();
    switch (currentRuntime) {
        case icCreatePlayer.RUNTIME.TEACHER_MOBILE:
            isTeacher = true;
            isApp = true;
            role = 'teacher';
            break;
        case icCreatePlayer.RUNTIME.STUDENT_MOBILE:
            isStudent = true;
            isApp = true;
            role = 'student';
            break;
        case icCreatePlayer.RUNTIME.PROJECTION_MOBILE:
            isProjector = true;
            isApp = true;
            role = 'projector';
            break;
        case icCreatePlayer.RUNTIME.WEB:
            isWeb = true;
            role = 'web';
            break;
        case icCreatePlayer.RUNTIME.TEACHER_PC:
            isPC = true;
            role = 'pc';
            break;
        default:
            isApp = false;
            isWeb = false;
            isPC = false;
    }

    var helper = {
        i18n: {},
        retryTimes: 0
    };
    var bridgeListener = {};

    var isObject = function isObject(obj) {
        return Object.prototype.toString.call(obj) === '[object Object]';
    };
    var isArray = function isArray(obj) {
        return Object.prototype.toString.call(obj) === '[object Array]';
    };

    var ctrl = {};
    /**
     * [Native函数分装]
     */
    var callNative = function callNative(eventName, data) {
        if (isApp && Bridge && Bridge.callNative) {
            return Bridge.callNative('com.nd.pad.icr.ui.IcrJsBridge', eventName, data);
        }
        return false;
    };
    var registerNativeListener = function registerNativeListener(key, callback) {
        if (isApp && Bridge && Bridge.registerListener) {
            bridgeListener[key] = Bridge.registerListener(key, callback);
        }
    };
    var unbindNativeListener = function unbindNativeListener(key) {
        if (isApp && Bridge && Bridge.unRegisterListener) {
            if (!key) {
                $.each(bridgeListener, function (k, v) {
                    Bridge.unRegisterListener(k, bridgeListener[k]);
                });
                bridgeListener = {};
            } else {
                Bridge.unRegisterListener(key, bridgeListener[key]);
            }
        }
    };

    var lastSlideMessageIndex = 0; //上个消息序列
    var lastTrayMessageIndex = 0;
    /**
     * [投影端通信封装]
     */
    var userInput = function userInput(item, value, messageIndexs) {
        if (isProjector) {
            return;
        }
        var message;
        var messageIndex = messageIndexs || new Date().valueOf();
        message = callNative('sendEvent', {
            "eventName": "UserInput",
            "eventData": {
                "source": ctrl.moduleId,
                "item": item,
                "messageIndex": messageIndex,
                "value": value
            },
            "needCallback": true
        });
        setMessage(message.messageId, {
            item: item,
            value: value,
            messageIndex: messageIndex
        });
    };
    var isTriggerDown = false;
    var triggerUserInput = function triggerUserInput(eventData) {
        var data = eventData;
        if (data.source === ctrl.moduleId) {
            switch (data.item) {
                // case 'updateMoveDom':
                //   isTriggerDown = true;
                //   updateMoveDom(data.value, {}, true);
                //   break;
                // case 'move':
                //   if (!isTriggerDown || lastMessageIndex > data.messageIndex) {
                //     return;
                //   }
                //   if (!ctrl.move.hasClass('show')) {
                //     ctrl.move.addClass('show');
                //   }
                //   lastMessageIndex = data.messageIndex;
                //   moveTo(data.value, true);
                //   break;
                // case 'moveEnd':
                //   isTriggerDown = false;
                //   ctrl.move.removeClass('show');
                //   break;
                // case 'remove':
                //   var side = data.value.side;
                //   var wrapper;
                //   if (side === 'left') {
                //     wrapper = ctrl.moveWrap.find('.balance_plate.left').find('.plate_box');
                //   } else if (side === 'right') {
                //     wrapper = ctrl.moveWrap.find('.balance_plate.right').find('.plate_box');
                //   }
                //   readyToRemoveDom = wrapper.find('[data-y=' + data.value.y + '][data-x=' + data.value.x + ']');
                //   if (readyToRemoveDom && data.value.side) {
                //     readyToRemoveDom.remove();
                //     readyToRemoveDom = undefined;
                //     balance.arrange(data.value.side);
                //     judgeBalanceState();
                //   }
                //   break;
                // case 'outBalance':
                //   isTriggerDown = false;
                //   var side = data.value.side;
                //   var wrapper;
                //   if (side === 'left') {
                //     wrapper = ctrl.moveWrap.find('.balance_plate.left').find('.plate_box');
                //   } else if (side === 'right') {
                //     wrapper = ctrl.moveWrap.find('.balance_plate.right').find('.plate_box');
                //   }
                //   ctrl.move.removeClass('show');
                //   readyToRemoveDom = wrapper.find('[data-y=' + data.value.y + '][data-x=' + data.value.x + ']');
                //   outBalance(data.value, side, true);
                //   break;
                // case 'inBalance':
                //   isTriggerDown = false;
                //   balance.arrange(data.value.sides);
                //   inBalance(ctrl.move, data.value.sides);
                //   ctrl.move.removeClass('show');
                //   judgeBalanceState();
                //   selectPoint = undefined;
                //   break;
                case 'goodsSlide':
                    if (lastSlideMessageIndex > data.messageIndex) {
                        return;
                    }
                    lastSlideMessageIndex = data.messageIndex;
                    ctrl.goodsWrap.data('left', data.value.left);
                    ctrl.goodsWrap.animate({
                        left: -data.value.left
                    }, 200);
                    break;
                case 'tray':
                    if (lastTrayMessageIndex > data.messageIndex) {
                        return;
                    }
                    lastTrayMessageIndex = data.messageIndex;
                    setBalance(data.value);
                    break;
                default:
                    console.log('triggerUserInput');
            }
        }
    };

    var messagePool = {};
    var delMessage = function delMessage(id) {
        delete messagePool[id];
    };
    var setMessage = function setMessage(id, value) {
        messagePool[id] = $.extend(true, {}, value);
    };
    var getMessage = function getMessage(id) {
        return $.extend(true, {}, messagePool[id]);
    };

    /*
     userInput('tray', {
     leftTray: getTrayInfo('left'),
     rightTray: getTrayInfo('right'),
     side: balance.currentState
     });
     */

    var setBalance = function setBalance(data) {
        var leftTrayHtml = '';
        var rightTrayHtml = '';
        var leftTray = ctrl.moveWrap.find('.balance_plate.left').find('.plate_box');
        var rightTray = ctrl.moveWrap.find('.balance_plate.right').find('.plate_box');
        $.each(data.leftTray, function (k, v) {
            var msrc;
            var sscr;
            //if (v.name === 'leverage') {
            //	msrc = ctrl.basePath + 'resources/wood/images/leverage-' + v.weight + '.png';
            //	ssrc = ctrl.basePath + 'resources/wood/images/leverage-' + v.weight + '-small.png';
            //} else {
            msrc = ctrl.basePath + 'resources/wood/images/' + v.src.replace('-small', '');
            ssrc = ctrl.basePath + 'resources/wood/images/' + v.src;
            //}
            leftTrayHtml += createTrayItem({
                y: v.y,
                x: v.x
            }, '', {
                src: v.src,
                msrc: msrc,
                ssrc: ssrc,
                name: v.name,
                klass: v.klass,
                weight: v.weight
            });
        });
        $.each(data.rightTray, function (k, v) {
            var src;
            var msrc;
            var sscr;
            //if (v.name === 'leverage') {
            //	msrc = ctrl.basePath + 'resources/wood/images/leverage-' + v.weight + '.png';
            //	ssrc = ctrl.basePath + 'resources/wood/images/leverage-' + v.weight + '-small.png';
            //} else {
            msrc = ctrl.basePath + 'resources/wood/images/' + v.src.replace('-small', '');
            ssrc = ctrl.basePath + 'resources/wood/images/' + v.src;
            //}
            rightTrayHtml += createTrayItem({
                y: v.y,
                x: v.x
            }, '', {
                src: v.src,
                msrc: msrc,
                ssrc: ssrc,
                name: v.name,
                klass: v.klass,
                weight: v.weight
            });
        });
        leftTray.html(leftTrayHtml);
        rightTray.html(rightTrayHtml);
        turnTo(data.side);
    };

    var BalanceEvent = function BalanceEvent(eventData) {
        var data = eventData;
        if (data.source === ctrl.moduleId) {
            switch (data.item) {
                case 'retry':
                    finish();
                    break;
                default:
                    console.log('BalanceEvent');
            }
        }
    };

    var finish = function finish() {
        if (helper.retryTimes >= 5) {
            return;
        }
        helper.retryTimes++;
        ctrl.eventBus.sendEvent('Sync', {
            source: ctrl.moduleId,
            type: 'cancel',
            value: {
                syncId: ctrl.syncId
            }
        });
    };

    var showEndQuestionButton = function showEndQuestionButton() {
        ctrl.$view.find('.stop').removeClass('hide').addClass('show');
    };

    var hideEndQuestionButton = function hideEndQuestionButton() {
        ctrl.$view.find('.stop').removeClass('show').addClass('hide');
    };

    var SyncCallback = function SyncCallback(eventData) {
        switch (eventData.type) {
            case 'request':
                //同步题目成功或失败
                ctrl.syncId = eventData.value.syncId;
                if (eventData.value.result) {
                    //成功显示“结束答题”的按钮
                    showEndQuestionButton();
                } else {
                    //失败
                    ClassroomUtils.showTipMessageBox(helper.i18n['balance_sync_question_fail']);
                }
                break;
            case 'cancel':
                //结束同步
                if (eventData.value.result) {
                    //成功关闭“结束答题”的按钮
                    helper.retryTimes = 0;
                    hideEndQuestionButton();
                } else {
                    //失败
                    ClassroomUtils.showMessageBox([{
                        html: helper.i18n['balance_close']
                    }, {
                        html: helper.i18n['balance_retry'],
                        target: 'h5',
                        callback: {
                            eventName: 'Balance',
                            eventData: {
                                source: ctrl.moduleId,
                                item: 'retry'
                            }
                        }
                    }], helper.i18n['balance_end_sync_fail']);
                }
                break;
        }
    };

    var initGoodsInfo = function initGoodsInfo() {
        goodsInfo = [{
            name: 'goods11-2',
            displayName: helper.i18n['balance_empty_cup'],
            width: 1,
            height: 1,
            weight: 100
        }, {
            name: 'goods11-1',
            displayName: helper.i18n['balance_70_per_cup'],
            width: 1,
            height: 1,
            weight: 250
        }, {
            name: 'goods21-1',
            displayName: helper.i18n['balance_teakettle'],
            width: 2,
            height: 1,
            weight: 200
        }, {
            name: 'goods11-3',
            displayName: helper.i18n['balance_cup'],
            width: 1,
            height: 1,
            weight: 100
        }, {
            name: 'goods22-1',
            displayName: helper.i18n['balance_flowerpot'],
            width: 2,
            height: 2,
            weight: 3000
        }, {
            name: 'goods12-1',
            displayName: helper.i18n['balance_flower_vase'],
            width: 1,
            height: 2,
            weight: 1000
        }, {
            name: helper.i18n['goods11-4'],
            displayName: helper.i18n['balance_inkstand'],
            width: 1,
            height: 1,
            weight: 50
        }, {
            name: 'goods21-2',
            displayName: helper.i18n['balance_pencil_case'],
            width: 2,
            height: 1,
            weight: 50
        }, {
            name: 'goods22-2',
            displayName: helper.i18n['balance_volleyball'],
            width: 2,
            height: 2,
            weight: 300
        }, {
            name: 'goods11-5',
            displayName: helper.i18n['balance_rubber_ball'],
            width: 1,
            height: 1,
            weight: 100
        }, {
            name: 'goods33-1',
            displayName: helper.i18n['balance_2kg_cat_0_5kg_ball'],
            width: 3,
            height: 3,
            weight: 2500
        }, {
            name: 'goods22-3',
            displayName: helper.i18n['balance_2_5kg_box'],
            width: 2,
            height: 2,
            weight: 2500
        }, {
            name: 'goods11-6',
            displayName: helper.i18n['balance_small_ball'],
            width: 1,
            height: 1,
            weight: 50
        }, {
            name: 'goods12-2',
            displayName: helper.i18n['balance_cuboid'],
            width: 1,
            height: 2,
            weight: 50
        }, {
            name: 'goods12-3',
            displayName: helper.i18n['balance_in_x_cuboid'],
            width: 1,
            height: 2,
            weight: 60
        }, {
            name: 'goods11-7',
            displayName: helper.i18n['balance_cubic_box'],
            width: 1,
            height: 1,
            weight: 10
        }, {
            name: 'goods23-1',
            displayName: helper.i18n['balance_blue_white_porcelain'],
            width: 2,
            height: 3,
            weight: 150
        }, {
            name: 'goods12-4',
            displayName: helper.i18n['balance_x_g_ball'],
            width: 1,
            height: 2,
            weight: 25
        }];

        weightsInfo = [{
            name: 'leverage1',
            weight: 5
        }, {
            name: 'leverage2',
            weight: 10
        }, {
            name: 'leverage3',
            weight: 20
        }, {
            name: 'leverage4',
            weight: 50
        }, {
            name: 'leverage5',
            weight: 100
        }, {
            name: 'leverage6',
            weight: 500
        }, {
            name: 'leverage7',
            weight: 1000
        }, {
            name: 'leverage8',
            weight: 2000
        }];
    };

    var currentGoods;

    /**
     * [initData 数据初始化]
     * @param  {[Object]} view  [module的dom对象]
     * @param  {[Object]} model [module的数据对象]
     */
    var initData = function initData(view, model) {
        initViewData(view);
        initModelData(model);
    };

    var initViewData = function initViewData(view) {
        ctrl.$view = $(view);
        ctrl.$view.find('.exam_skin_wood').addClass(role);
        ctrl.moveWrap = ctrl.$view.find('.balance_box');
        ctrl.body = ctrl.moveWrap.find('.balance_content');
        ctrl.footer = ctrl.moveWrap.find('.balances_bottom');
        ctrl.leftTray = ctrl.moveWrap.find('.balance_plate.left').find('.plate_box');
        ctrl.rightTray = ctrl.moveWrap.find('.balance_plate.right').find('.plate_box');
        ctrl.goodsWrap = ctrl.footer.find('.balance_left .col-balance');
        ctrl.weightsWrap = ctrl.footer.find('.balance_right .col-balance ');
        ctrl.move = ctrl.moveWrap.find('.balance_move');
        ctrl.preLoad = ctrl.moveWrap.find('#preLoad');
    };

    var initModelData = function initModelData(model) {

        ctrl.moduleId = model.ID;

        //如果存在__ExtendModel且不为空则是addTool启动起来的,学生端推送启动
        if (model.__ExtendModel && !$.isEmptyObject(model.__ExtendModel)) {
            ctrl.questionModel = model.__ExtendModel.balanceState;
            isAddTool = true;
        } else if (model.question_id && model.question_url) {
            //存在question_id 和question_url 则是已page形式启动起来的
            ctrl.questionId = model.question_id;
            ctrl.url = model.question_url;
            ctrl.questionModel = ctrl.url.content.balanceData;
        } else {
            //即不存在相关的启动数据,在pptshell中以工具形式启动
            ctrl.questionId = null;
            ctrl.questionModel = null;
            ctrl.url = null;
        }

        initToolBar();
    };

    var createGoodsItem = function createGoodsItem(goods, key) {
        var basePath = ctrl.basePath + 'resources/wood/images/' + goods.name;
        var src = goods.name + '-small.png';
        var mpath = basePath + '.png';
        var spath = basePath + '-small.png';
        var klassName = 'w' + goods.width + goods.height;
        return '<li class="in-toolbar ' + klassName + '" data-class="' + klassName + '" data-name="' + goods.name + '" data-weight="' + goods.weight + '">' + '  <div class="balances-inner-mask">' + '  </div>' + '  <a>' + '    <img src="' + mpath + '"data-src="' + src + '" data-msrc="' + mpath + '" data-ssrc="' + spath + '" alt="' + goods.displayName + '" />' + '  </a>' + '</li>';
    };
    var createWeightsItem = function createWeightsItem(weights, key) {
        var basePath = ctrl.basePath + 'resources/wood/images/' + weights.name;
        var src = weights.name + '-small.png';
        var mpath = basePath + '.png';
        var spath = basePath + '-small.png';
        return '<li class="in-toolbar w11" data-class="w11" data-name="' + weights.name + '" data-weight="' + weights.weight + '">' + '  <div class="balances-inner-mask">' + '  </div>' + '  <a>' + '    <img src="' + mpath + '"data-src="' + src + '" data-msrc="' + mpath + '" data-ssrc="' + spath + '" alt="' + helper.i18n['balance_weight'] + '" />' + '  </a>' + '</li>';
    };
    var initToolBar = function initToolBar() {
        var goodsString = '';
        var gWeightsString = '';
        var kgWeightsString = '';
        var i, len;
        var preLoadString = '';
        for (i = 0, len = goodsInfo.length; i < len; i++) {
            goodsString += createGoodsItem(goodsInfo[i], i);
            preLoadString += preLoadImg(goodsInfo[i].name + '-small.png');
        }
        ctrl.goodsWrap.html(goodsString);
        for (i = 0, len = weightsInfo.length; i < len; i++) {
            if (weightsInfo[i].weight < 500) {
                gWeightsString += createWeightsItem(weightsInfo[i], i);
            } else {
                kgWeightsString += createWeightsItem(weightsInfo[i], i);
            }

            preLoadString += preLoadImg(weightsInfo[i].name + '-small.png');
        }
        ctrl.weightsWrap.filter('.col-balance-g').html(gWeightsString);
        ctrl.weightsWrap.filter('.col-balance-kg').html(kgWeightsString);
        ctrl.preLoad.html(preLoadString);
    };

    var preLoadImg = function preLoadImg(src) {
        var basePath = ctrl.basePath + 'resources/wood/images/';
        return '<img src="' + basePath + src + '">';
    };

    /**
     * [Goods 物品对象，包括砝码]
     * @param {[Object]} params [物品参数]
     */
    var Goods = function Goods(params) {
        this.id = Goods.Num;
        this.weight = params.weight;
        this.type = params.type;
        this.name = params.name;
        this.url = params.url;
        this.key = this.type + this.id;
        Goods.pool[this.id] = this;
        Goods.Num++;
    };

    Goods.Num = 0;

    Goods.pool = {};

    Goods.get = function (id) {
        return Goods.pool[id];
    };

    Goods.dispose = function () {
        Goods.pool = null;
    };

    // 误差允许范围
    var mixDistance = {
        x: 80,
        y: 50
    };
    // 天平对象
    var balance = {
        leftWeight: 0, //左侧托盘总质量     Number
        rightWeight: 0, //右侧托盘总质量     Number
        currentState: 'balance', //当前天平状态       String
        lastState: 'balance', //天平上一个状态     String
        leftTray: { //左托盘
            left: 0,
            top: 0,
            width: 0,
            height: 0,
            obj: undefined
        },
        rightTray: { //右托盘
            left: 0,
            top: 0,
            width: 0,
            height: 0,
            obj: undefined
        },
        leftTrayMap: [],
        rightTrayMap: [],
        initTray: function initTray(side, obj) {
            var leftTray = ctrl.$view.find('.balance_plate.left');
            var rightTray = ctrl.$view.find('.balance_plate.right');
            var temp = {
                leftTray: leftTray,
                rightTray: rightTray
            };
            var self = this;
            $.each(temp, function (k, v) {
                var tray = self[k];
                var offset = v.offset();
                var width = v.width() || 400;
                var height = v.height() || 300;
                tray.obj = v;
                tray.width = width;
                tray.height = height;
                tray.left = offset.left;
                tray.top = offset.top;
            });
        },
        arrange: function arrange(side, newItem) {
            var self = this;
            var items;
            var plateBox = [[0, 0, 0], [0, 0, 0], [0, 0, 0]];
            if (side === 'left') {
                items = ctrl.$view.find('.balance_plate.left').find('.plate_box').find('.in-tray');
                self.leftTrayMap = $.extend(true, [], plateBox);
            } else if (side === 'right') {
                items = ctrl.$view.find('.balance_plate.right').find('.plate_box').find('.in-tray');
                self.rightTrayMap = $.extend(true, [], plateBox);
            } else {
                return false;
            }

            var pos = {
                left: 0,
                bottom: 0
            };
            //从占用空间小到大排序

            for (var i = 0, iLen = items.length; i < iLen; i++) {
                var curItem = $(items[i]);
                var curItemSpace = +curItem.attr('data-class').slice(1, 3);

                for (var j = i + 1, jLen = items.length; j < jLen; j++) {
                    var itemsSpace = +$(items[j]).attr('data-class').slice(1, 3);
                    if (curItemSpace > itemsSpace) {
                        curItem = items[j];
                        items.splice(i, 0, curItem);
                        items.splice(j + 1, 1);
                    }
                }
            }
            var str = '';
            var flag = true;
            for (var i = items.length - 1; i >= 0; i--) {
                var temp = self.findSpace($(items[i]), side);
                if (!temp) {
                    flag = false;
                    newItem.remove();
                    break;
                } else {
                    str = temp + str;
                }
            }
            if (flag) {
                if (side === 'left') {
                    ctrl.leftTray.html(str);
                } else if (side === 'right') {
                    ctrl.rightTray.html(str);
                }
                return true;
            }
            return false;
        },
        findSpace: function findSpace(item, side) {
            var self = this;
            var plateBox;
            if (side === 'left') {
                plateBox = $.extend(true, [], self.leftTrayMap);
            } else if (side === 'right') {
                plateBox = $.extend(true, [], self.rightTrayMap);
            } else {
                return false;
            }
            for (var j = 0; j < 3; j++) {
                for (var k = 0; k < 3; k++) {
                    //plateBox为1表示格子被占用
                    if (plateBox[j][k] == 1) {
                        continue;
                    }

                    var space = item.attr('data-class').slice(1, 3);
                    var w = +space[0];
                    var h = +space[1];
                    var haveSpace = true;
                    for (var hj = j, hjLen = h + j; hj < hjLen; hj++) {
                        for (var wk = k, wkLen = w + k; wk < wkLen; wk++) {
                            if (plateBox[hj] == undefined || plateBox[hj][wk] == undefined || plateBox[hj][wk] == 1) {
                                haveSpace = false;
                                break;
                            }
                        }
                    }
                    if (!haveSpace) {
                        break;
                    }
                    for (var hj = j, hjLen = h + j; hj < hjLen; hj++) {
                        for (var wk = k, wkLen = w + k; wk < wkLen; wk++) {
                            plateBox[hj][wk] = 1;
                        }
                    }
                    if (side === 'left') {
                        self.leftTrayMap = $.extend(true, [], plateBox);
                    } else if (side === 'right') {
                        self.rightTrayMap = $.extend(true, [], plateBox);
                    }
                    return createTrayItem({
                        x: k,
                        y: j
                    }, item);
                }
            }
            return false;
        },
        copy: function copy(obj) {
            return $.extend(true, {}, obj);
        },
        init: function init(data) {
            //创建二维数组
            var width = 3;
            var height = 3;
            var self = this;
            var value = {
                leftTray: data.leftPlateBox,
                rightTray: data.rightPlateBox
            };
            var basePath = ctrl.basePath + 'resources/wood/images/';
            self.leftWeight = 0;
            self.rightWeight = 0;
            self.currentState = 'balance';
            self.lastState = 'balance';
            ctrl.$view.find('.balance_plate.left').find('.plate_box').html('');
            ctrl.$view.find('.balance_plate.right').find('.plate_box').html('');
            $.each(value, function (k, side) {
                $.each(side, function (tk, tray) {
                    var src;
                    var msrc;
                    var ssrc;
                    if (k === 'leftTray') {
                        self.leftWeight += tray.weight;
                    } else if (k === 'rightTray') {
                        self.rightWeight += tray.weight;
                    }
                    src = tray.src;
                    msrc = basePath + tray.src.replace('-small', '');
                    ssrc = basePath + tray.src;
                    //if (tray.type === 'leverage') {
                    //	tray.name = tray.type;
                    //	msrc = basePath + tray.name + '-' + tray.weight + '.png';
                    //	ssrc = basePath + tray.name + '-' + tray.weight + '-small.png';
                    //}
                    ctrl[k].append(createTrayItem({
                        y: tray.bottom,
                        x: tray.left
                    }, '', {
                        src: src,
                        msrc: msrc,
                        ssrc: ssrc,
                        name: tray.name,
                        klass: tray.cssClass,
                        weight: tray.weight
                    }));
                });
            });
            for (var i = 0; i < height; i++) {
                this.leftTrayMap[i] = [];
                this.rightTrayMap[i] = [];
                for (var j = 0; j < width; j++) {
                    this.leftTrayMap[i].push(0);
                    this.rightTrayMap[i].push(0);
                }
            }
            self._setBalanceState();
        },
        isBalance: function isBalance(state) {
            //天平是否平衡
            if (state === 'last') {
                return this.lastState === 'balance';
            }
            return this.currentState === 'balance';
        },
        isLeft: function isLeft(state) {
            //天平是否左倾
            if (state === 'last') {
                return this.lastState === 'left';
            }
            return this.currentState === 'left';
        },
        isRight: function isRight(state) {
            //天平是否右倾
            if (state === 'last') {
                return this.lastState === 'right';
            }
            return this.currentState === 'right';
        },
        _setBalanceState: function _setBalanceState() {
            var left = this.leftWeight;
            var right = this.rightWeight;
            if (left > right) {
                this.currentState = 'left';
            } else if (left < right) {
                this.currentState = 'right';
            } else {
                this.currentState = 'balance';
            }
        },
        isAllowIn: function isAllowIn(width, height, arr) {
            var tempArr = $.extend(true, [], arr);
            var boxHeight = arr.length;
            var boxWidth = arr[0].length;
            var i, j;
            var xCount = 0;
            var yCount = 0;
            var flag = false;
            var jStart = 0;
            var iEnd = boxHeight - 1;
            for (i = boxHeight - 1; i >= 0; i--) {
                var row = arr[i];
                var xFlag = false;
                for (j = jStart; j < boxWidth; j++) {
                    if (!row[j]) {
                        xCount++;
                        tempArr[i][j] = 1;
                    } else {
                        xCount = 0;
                        jStart = j + 1;
                        tempArr = $.extend(true, [], arr);
                    }
                    if (xCount === width) {
                        xFlag = true;
                        break;
                    }
                }
                if (xFlag) {
                    yCount++;
                } else {
                    jStart = 0;
                    yCount = 0;
                    tempArr = $.extend(true, [], arr);
                }
                xCount = 0;
                if (yCount === height) {
                    flag = true;
                    iEnd = i;
                    break;
                }
            }
            if (flag) {
                return {
                    arr: tempArr,
                    start: {
                        y: iEnd,
                        x: jStart
                    }
                };
            }
            return false;
        },
        inLeft: function inLeft(weight) {
            this.leftWeight += weight;
            this._setBalanceState();
        },
        inRight: function inRight(weight) {
            this.rightWeight += weight;
            this._setBalanceState();
        },
        inTray: function inTray(weight, side) {
            if (side === 'left') {
                this.inLeft(weight);
            } else if (side === 'right') {
                this.inRight(weight);
            } else {
                console.log('请验证参数 sides');
            }
        },
        outAllow: function outAllow(options, side) {
            var self = this;
            var temp;
            var i, j;
            var imax, jmax;
            if (side === 'left') {
                temp = $.extend(true, [], self.leftTrayMap);
            } else if (side === 'right') {
                temp = $.extend(true, [], self.rightTrayMap);
            }
            for (i = options.y, imax = options.y + options.height; i < imax; i++) {
                for (j = options.x, jmax = options.x + options.width; j < jmax; j++) {
                    temp[i][j] = 0;
                }
            }

            if (side === 'left') {
                self.leftTrayMap = $.extend(true, [], temp);
            } else if (side === 'right') {
                self.rightTrayMap = $.extend(true, [], temp);
            }
            self.down(options, side);
        },
        getLeft: function getLeft(x, y, side) {
            var self = this;
            var tempArr;
            if (side === 'left') {
                tempArr = $.extend(true, [], self.leftTrayMap);
            } else if (side === 'right') {
                tempArr = $.extend(true, [], self.rightTrayMap);
            }
            var left = x;
            var flag = true;
            for (var i = x; i >= 0; i--) {
                if (tempArr[y][i]) {
                    left = i + 1;
                    flag = false;
                    break;
                }
            }
            if (flag) {
                left = 0;
            }
            return left;
        },
        getRight: function getRight(x, y, side) {
            var self = this;
            var tempArr;
            if (side === 'left') {
                tempArr = $.extend(true, [], self.leftTrayMap);
            } else if (side === 'right') {
                tempArr = $.extend(true, [], self.rightTrayMap);
            }
            var len = tempArr.length;
            var right = x;
            var flag = true;
            for (var i = x; i < len; i++) {
                if (tempArr[y][i]) {
                    right = i - 1;
                    flag = false;
                    break;
                }
            }
            if (flag) {
                right = len - 1;
            }
            return right;
        },
        down: function down(options, side) {
            var self = this;
            var y = options.y;
            var x = options.x;
            var thiswidth = options.width;
            var thisheight = options.height;
            var tray, tempArr;
            var i, j;
            var mayTops = [];
            var isDown = false;
            if (side === 'left') {
                tempArr = $.extend(true, [], self.leftTrayMap);
                tray = ctrl.moveWrap.find('.balance_plate.left').find('.plate_box');
            } else if (side === 'right') {
                tempArr = $.extend(true, [], self.rightTrayMap);
                tray = ctrl.moveWrap.find('.balance_plate.right').find('.plate_box');
            }
            for (i = y - 1; i >= 0; i--) {
                var tops = tray.find('[data-y=' + i + ']');
                $.each(tops, function (k, top) {
                    var klass = $(top).attr('data-class');
                    var width = +klass[1];
                    var height = +klass[2];
                    var left = +$(top).attr('data-x');
                    var outLeft = self.getLeft(x, y, side);
                    var outRight = self.getRight(x, y, side);
                    if (height === y - i) {
                        if (left >= outLeft && left + width - 1 <= outRight) {
                            self.resetTray($(top), {
                                y: y,
                                height: thisheight
                            }, side);
                            isDown = true;
                        }
                    }
                });
            }
        },
        resetTray: function resetTray(moveDom, outObj, side) {
            var self = this;
            var tempArr;
            if (side === 'left') {
                tempArr = $.extend(true, [], self.leftTrayMap);
            } else if (side === 'right') {
                tempArr = $.extend(true, [], self.rightTrayMap);
            }
            var klass = moveDom.attr('data-class');
            var width = +klass[1];
            var height = +klass[2];
            var x = +moveDom.attr('data-x');
            var y = +moveDom.attr('data-y');

            var outY = outObj.y;
            var outH = outObj.height;

            var outB = outY + outH - 1;

            var i, j, minI, maxJ, maxI;

            for (i = outB, minI = outB - height + 1; i >= minI; i--) {
                for (j = x, maxJ = x + width - 1; j <= maxJ; j++) {
                    tempArr[i][j] = 1;
                }
            }

            for (i = y, maxI = outB - height + 1; i < maxI; i++) {
                for (j = x, maxJ = x + width - 1; j <= maxJ; j++) {
                    tempArr[i][j] = 0;
                }
            }

            if (side === 'left') {
                self.leftTrayMap = $.extend(true, [], tempArr);
            } else if (side === 'right') {
                self.rightTrayMap = $.extend(true, [], tempArr);
            }

            var moveY = y + outH;
            var moveX = x;
            var top = moveY * 46.95652 + 'px';
            var left = moveX * 46.95652 + 'px';

            moveDom.attr('data-y', moveY).animate({
                top: top,
                left: left
            }, 200);
        },
        out: function out(options, side) {
            if (side === 'left') {
                this.leftWeight -= options.weight;
            } else if (side === 'right') {
                this.rightWeight -= options.weight;
            }
            //this.outAllow(options, side);
            this._setBalanceState();
        },
        setState: function setState(state) {
            if (state === 'left') {
                this.lastState = 'left';
            } else if (state === 'right') {
                this.lastState = 'right';
            } else {
                this.lastState = 'balance';
            }
        }
    };

    var getTrayInfo = function getTrayInfo(sides) {
        var tray;
        var items = [];
        if (sides === 'left') {
            tray = ctrl.moveWrap.find('.balance_plate.left').find('.plate_box');
        } else if (sides === 'right') {
            tray = ctrl.moveWrap.find('.balance_plate.right').find('.plate_box');
        }
        $.each(tray.find('.in-tray'), function (k, v) {
            var item = {};
            item.x = $(v).attr('data-x');
            item.y = $(v).attr('data-y');
            item.klass = $(v).attr('data-class');
            item.name = $(v).attr('data-name');
            item.src = $(v).attr('data-src');
            item.weight = $(v).attr('data-weight');
            items.push(item);
        });
        return items;
    };

    /**
     * [inBalance 放入天平]
     * @param  {[Object]} obj   [放入天平的对象]
     * @param  {[string]} sides [放入天平的哪一边] 枚举值 left/right
     */
    var inBalance = function inBalance(obj, sides) {
        var tray;
        if (sides === 'left') {
            tray = ctrl.moveWrap.find('.balance_plate.left').find('.plate_box');
        } else if (sides === 'right') {
            tray = ctrl.moveWrap.find('.balance_plate.right').find('.plate_box');
        }
        tray.prepend(createTrayItem({
            x: 0,
            y: 0
        }));
        var items = tray.find('.in-tray');
        var item = $(items[0]);
        var weight = +item.attr('data-weight');
        var isIn = balance.arrange(sides, item);
        if (isIn) {
            balance.inTray(weight, sides);
            userInput('tray', {
                leftTray: getTrayInfo('left'),
                rightTray: getTrayInfo('right'),
                side: balance.currentState
            });
        }
        // userInput('inBalance', {
        //   sides: sides
        // });
        //
        //
        //
        //
        //
        // var weight = obj.attr('data-weight');
        // var klass = obj.attr('data-class');
        // var width = klass[1];
        // var height = klass[2];
        // return balance.inTray({
        //   weight: +weight,
        //   width: +width,
        //   height: +height
        // }, sides);
    };

    /**
     * [outBalance 移出天平]
     * @param  {[Object]} obj [移出天平的对象]
     */
    var outBalance = function outBalance(obj, side, isOptions) {

        var weight = isOptions && obj.weight || obj.attr('data-weight');
        var klass = isOptions && obj.klass || obj.attr('data-class');
        var width = klass[1];
        var height = klass[2];
        var x, y;
        if (isOptions) {
            x = obj.x;
            y = obj.y;
        } else {
            x = obj.attr('data-x');
            y = obj.attr('data-y');
        }
        var outInfo = {
            weight: +weight,
            width: +width,
            height: +height,
            x: +x,
            y: +y,
            klass: klass,
            side: side
        };
        balance.out(outInfo, side);
        // userInput('outBalance', outInfo);
    };

    /**
     * [judgeBalanceState 判断天平的状态]
     * 天平状态枚举             天平表现
     * balance: 平衡状态          居中
     * left: 左边比右边重          左倾
     * right: 右边比左边重         右倾
     */
    var judgeBalanceState = function judgeBalanceState(isDirectly) {
        isDirectly ? ctrl.body.removeClass('animated') : ctrl.body.addClass('animated');
        if (balance.isLeft()) {
            turnToLeft();
        } else if (balance.isRight()) {
            turnToRight();
        } else {
            turnToBalance();
        }
    };
    var turnTo = function turnTo(side) {
        if (side === 'left') {
            turnToLeft(true);
        } else if (side === 'right') {
            turnToRight(true);
        } else {
            turnToBalance(true);
        }
    };

    /**
     * [turnToBalance 天平居中动作]
     */
    var turnToBalance = function turnToBalance(isMust) {
        if (balance.isBalance('last') && !isMust) {
            return;
        }
        // 居中动画
        ctrl.body.removeClass('heavy_right heavy_left').addClass('heavy_balance');
        balance.setState('balance');
    };

    /**
     * [turnToLeft 天平左倾动作]
     */
    var turnToLeft = function turnToLeft(isMust) {
        if (balance.isLeft('last') && !isMust) {
            return;
        }
        // 左倾动画
        ctrl.body.removeClass('heavy_balance heavy_right').addClass('heavy_left');
        balance.setState('left');
    };

    /**
     * [turnToRight 天平右倾动作]
     */
    var turnToRight = function turnToRight(isMust) {
        if (balance.isRight('last') && !isMust) {
            return;
        }
        // 右倾动画
        ctrl.body.removeClass('heavy_balance heavy_left').addClass('heavy_right');
        balance.setState('right');
    };

    var selectPoint;
    var updateMoveDom = function updateMoveDom(dom, event, isOptions) {
        var offset = isOptions && dom.offset || dom.offset();
        var clickPoint = isOptions && dom.clickPoint || {
            x: event.pageX,
            y: event.pageY
        };
        if (event && event.type === 'touchstart') {
            var eventPoint = event.originalEvent.touches[0];
            clickPoint = {
                x: eventPoint.pageX,
                y: eventPoint.pageY
            };
        }

        selectPoint = {
            x: clickPoint.x - offset.left,
            y: clickPoint.y - offset.top
        };

        var src = isOptions && dom.src || dom.find('img').attr('data-src');
        var msrc = isOptions && dom.msrc || dom.find('img').attr('data-msrc');
        var ssrc = isOptions && dom.ssrc || dom.find('img').attr('data-ssrc');
        var removeClass = isOptions && dom.removeClass || ctrl.move.attr('data-class');
        var name = isOptions && dom.name || dom.attr('data-name');
        var weight = isOptions && dom.weight || dom.attr('data-weight');
        var addClass = isOptions && dom.addClass || dom.attr('data-class');
        ctrl.move.find('img').attr('src', msrc).attr('data-src', src).attr('data-ssrc', ssrc).attr('data-msrc', msrc);

        ctrl.move.removeClass(removeClass).attr('data-name', name).attr('data-weight', weight).attr('data-class', addClass).css({
            left: offset.left,
            top: offset.top
        }).addClass(addClass).addClass('show');

        // userInput('updateMoveDom', {
        //   offset: offset,
        //   clickPoint: clickPoint,
        //   msrc: msrc,
        //   ssrc: ssrc,
        //   removeClass: removeClass,
        //   name: name,
        //   weight: weight,
        //   addClass: addClass
        // });
    };

    var isInMove = false;
    var timers;
    var moveTo = function moveTo(event, isOptions) {
        if (!selectPoint) {
            return;
        }
        var movePoint;
        if (isOptions) {
            movePoint = event;
        } else {
            var movetoPoint = {
                x: event.pageX,
                y: event.pageY
            };
            if (event.type === 'touchmove') {
                var eventPoint = event.originalEvent.touches[0];
                movetoPoint = {
                    x: eventPoint.pageX,
                    y: eventPoint.pageY
                };
            }
            movePoint = {
                left: movetoPoint.x - selectPoint.x,
                top: movetoPoint.y - selectPoint.y
            };
        }

        //判断是否在天平区域内
        var viewPos = {
            left: ctrl.$view.offset().left,
            top: ctrl.$view.offset().top,
            right: ctrl.$view.offset().left + ctrl.$view.width(),
            bottom: ctrl.$view.offset().top + ctrl.$view.height()
        },
            movePos = {
            left: movePoint.left,
            top: movePoint.top,
            right: movePoint.left + ctrl.move.width(),
            bottom: movePoint.top + ctrl.move.height()
        },
            isAvailable = false;

        isAvailable = movePos.left >= viewPos.left && movePos.top >= viewPos.top && movePos.right <= viewPos.right && movePos.bottom <= viewPos.bottom;

        if (!isAvailable) {
            if (movePos.left <= viewPos.left) {
                movePoint.left = viewPos.left;
            }

            if (movePos.top <= viewPos.top) {
                movePoint.top = viewPos.top;
            }

            if (movePos.right >= viewPos.right) {
                movePoint.left = viewPos.right - ctrl.move.width();
            }

            if (movePos.bottom >= viewPos.bottom) {
                movePoint.top = viewPos.bottom - ctrl.move.height();
            }
        }

        ctrl.move.css(movePoint);

        // if (isTeacher) {
        //   if (!isInMove) {
        //     isInMove = true;
        //     clearTimeout(timers);
        //     userInput('move', movePoint);
        //     timers = setTimeout(function() {
        //       isInMove = false;
        //     }, 200);
        //   }
        // }
    };

    var isInAnyTray = function isInAnyTray(point, area) {
        var leftTray = balance.leftTray;
        var rightTray = balance.rightTray;
        // 目前采用只要物品的边界进入区域就算可进入状态
        var leftAllow = {
            left: leftTray.left - area.width,
            right: leftTray.left + leftTray.width - area.width + area.width,
            top: leftTray.top - area.height,
            bottom: leftTray.top + leftTray.height - area.height + area.height
        };
        var rightAllow = {
            left: rightTray.left - area.width,
            right: rightTray.left + rightTray.width - area.width + area.width,
            top: rightTray.top - area.height,
            bottom: rightTray.top + rightTray.height - area.height + area.height
        };
        var temp = {
            left: leftAllow,
            right: rightAllow
        };
        var inAnyTray = false;
        $.each(temp, function (k, v) {
            if (point.x > v.left && point.x < v.right && point.y > v.top && point.y < v.bottom) {
                inAnyTray = k;
                return false;
            }
        });
        return inAnyTray;
    };

    var inAnyWhere = function inAnyWhere() {};

    var createTrayItem = function createTrayItem(start, item, options) {
        var dom = item || ctrl.move;
        var innerImg = dom && dom.find('img');
        var bottom = start.y * 3.125 + 'em';
        var left = start.x * 3.125 + 'em';
        var src = options && options.src || innerImg && innerImg.attr('data-src');
        var ssrc = options && options.ssrc || innerImg && innerImg.attr('data-ssrc');
        var msrc = options && options.msrc || innerImg && innerImg.attr('data-msrc');
        var klass = options && options.klass || dom && dom.attr('data-class');
        var weight = options && options.weight || dom && dom.attr('data-weight');
        var name = options && options.name || dom && dom.attr('data-name');
        return '<span class="in-tray ' + klass + '" data-y="' + start.y + '" data-x="' + start.x + '"data-src="' + src + '" data-weight="' + weight + '" data-name="' + name + '" data-class="' + klass + '" style="left:' + left + '; bottom: ' + bottom + ';">' + '  <div class="balances-inner-mask"></div>' + '  <img src="' + ssrc + '"data-src="' + src + '" data-ssrc="' + ssrc + '" data-msrc="' + msrc + '" alt="" />' + '</span>';
    };

    var moveEnd = function moveEnd(event) {
        if (!selectPoint) {
            return;
        }
        var offset = ctrl.move.offset();
        var movePoint = {
            x: event.pageX,
            y: event.pageY
        };
        if (event.type === 'touchend') {
            var eventPoint = event.originalEvent.changedTouches[0];
            movePoint = {
                x: eventPoint.pageX,
                y: eventPoint.pageY
            };
        }
        var point = {
            x: movePoint.x - selectPoint.x,
            y: movePoint.y - selectPoint.y
        };
        var area = {
            width: ctrl.move.width(),
            height: ctrl.move.height()
        };
        var inAnyTray = isInAnyTray(point, area);
        var start;
        ctrl.move.removeClass('show');
        if (inAnyTray === 'left') {
            inBalance(ctrl.move, 'left');
        } else if (inAnyTray === 'right') {
            inBalance(ctrl.move, 'right');
        }
        judgeBalanceState();
        selectPoint = undefined;
        // userInput('moveEnd', {});
    };

    var readyToRemoveDom;

    /**
     * 委托dom事件
     */
    var ismousedown = false;
    var finishStart = false;
    var clickStart = false;

    var delegateDomEvent = function delegateDomEvent() {
        ctrl.$view.on('touchstart mousedown', '.in-toolbar', function (e) {
            e.preventDefault();
            //e.stopPropagation();
            balance.initTray();
            ismousedown = true;
            updateMoveDom($(this), e);
        }).on('touchstart mousedown', '.in-tray', function (e) {
            e.preventDefault();
            //e.stopPropagation();
            ismousedown = true;
            var side = $(this).parents('.balance_plate.left').length ? 'left' : 'right';
            balance.initTray();
            outBalance($(this), side);
            updateMoveDom($(this), e);
            //$(this).remove();
            readyToRemoveDom = $(this);
            // $(this).addClass('transparency');
            //judgeBalanceState();
        }).on('touchmove mousemove', function (e) {
            e.preventDefault();
            if (ismousedown) {
                moveTo(e);
            }
        }).on('touchend mouseup', function (e) {
            var side;
            var isRemove = false;
            e.preventDefault();
            ismousedown = false;
            if (readyToRemoveDom) {
                side = readyToRemoveDom.parents('.balance_plate.left').length ? 'left' : 'right';
                // userInput('remove', {
                //   x: readyToRemoveDom.attr('data-x'),
                //   y: readyToRemoveDom.attr('data-y'),
                //   side: side
                // });
                readyToRemoveDom.remove();
                readyToRemoveDom = undefined;
                balance.arrange(side);

                userInput('tray', {
                    leftTray: getTrayInfo('left'),
                    rightTray: getTrayInfo('right'),
                    side: balance.currentState
                });

                isRemove = true;
            }
            moveEnd(e);
        }).on('mouseleave', function (e) {
            var side;
            var isRemove = false;
            e.preventDefault();
            ismousedown = false;
            if (readyToRemoveDom) {
                side = readyToRemoveDom.parents('.balance_plate.left').length ? 'left' : 'right';
                // userInput('remove', {
                //   x: readyToRemoveDom.attr('data-x'),
                //   y: readyToRemoveDom.attr('data-y'),
                //   side: side
                // });
                readyToRemoveDom.remove();
                readyToRemoveDom = undefined;
                balance.arrange(side);

                userInput('tray', {
                    leftTray: getTrayInfo('left'),
                    rightTray: getTrayInfo('right'),
                    side: balance.currentState
                });

                isRemove = true;
            }
            moveEnd(e);
        }).on('touchstart mousedown', '.balance_btn', function () {
            clickStart = true;
        }).on('touchend mouseup', '.balance_btn', function (e) {
            if (clickStart) {

                var goodsBox = $(this).parent();
                var goodsWrap = goodsBox.find('ul');
                var totalWidth = goodsWrap.width();
                var boxWidth = goodsBox.width();
                var maxLeft = totalWidth - boxWidth;
                var currentLeft = goodsWrap.scrollLeft() || 0;
                var side = $(this).hasClass('btn_left') ? 'left' : 'right';
                //if (side === 'left') {
                //	amidLeft = currentLeft - boxWidth / 1.5;
                //} else {
                //	amidLeft = currentLeft + boxWidth / 1.5;
                //}
                //if (amidLeft > maxLeft) {
                //	amidLeft = maxLeft;
                //} else if (amidLeft < 0) {
                //	amidLeft = 0;
                //}
                //goodsWrap.animate({
                //	left: -amidLeft
                //}, 200);

                //停止前一次动画
                goodsWrap.stop();
                //使用滚动条来实现左右滚动
                if (side === 'left') {
                    boxWidth = -boxWidth;
                }

                goodsWrap.animate({
                    "scrollLeft": currentLeft + boxWidth
                }, 700);

                //goodsWrap.data('left', amidLeft);
                userInput('goodsSlide', {
                    left: currentLeft + boxWidth
                });
                clickStart = false;
            }

            //ctrl.goodsWrap.css('left', -amidLeft);
        }).on('touchstart mousedown', '.stop', function () {
            finishStart = true;
        }).on('touchend mouseup', '.stop', function (e) {
            if (finishStart) {
                finish(e);
                e.preventDefault();
            }
            finishStart = false;
        });
    };

    var presenterLogic = function presenterLogic(view, model, isPreview) {
        initData(view, model);
    };

    var isAnySystem = function isAnySystem(systemMap) {
        switch (systemMap) {
            case 'homework':
                isHomeWork = true;
                break;
            case 'pptshell':
                isPPTShell = true;
                break;
            default:
                isHomeWork = false;
        }
    };

    //用于判断当前工具是不是以工具方式启动的
    var isAddTool = false;

    var presenter = function presenter() {};

    presenter.setUrlParams = function (urlParams) {
        if (urlParams.sys) {
            isAnySystem(urlParams.sys);
        }
    };

    presenter.createPreview = function (view, model) {
        //Todo: 在此处一般进行model的数据有效性验证
        presenterLogic(view, model, true);
    };

    presenter.setPlayerController = function (controller) {
        ctrl.controller = controller;
        ctrl.eventBus = controller.getEventBus();
        ctrl.eventBus.addEventListener('SyncCallback', this);
    };

    presenter.onEventReceived = function (eventName, eventData) {
        switch (eventName) {
            case 'SyncCallback':
                SyncCallback(eventData);
                break;
        }
    };

    var service = {};

    service.setLocationProperties = function (properties) {
        helper.i18n = properties;
    };

    service.getQuestionInfo = function () {
        var url = '';
        try {
            url = JSON.stringify(ctrl.url);
        } catch (e) {
            console.log('json stringify failed');
        }
        return {
            'id': ctrl.questionId,
            'type_code': 'Balance',
            'type_name': helper.i18n['balance_balance_tool'],
            'url': '"' + url + '"',
            'notExistStatistics': true,
            'noNeedQuizProgress': true
        };
    };

    service.getExtendData = function () {
        var options = {
            width: '100%',
            balanceState: {
                'leftPlateBox': getCurrentState('left'),
                'rightPlateBox': getCurrentState('right')
            }
        };
        console.log('options:', options);
        return options;
    };

    presenter.metaInfo = {
        name: "Balance",
        type: PresenterType.PRESENTER_COMPONENT
    };

    presenter.getService = function () {
        return service;
    };

    presenter.run = function (view, model) {
        //初始化物品信息
        initGoodsInfo();

        presenterLogic(view, model, false);
        //绑定Module事件
        bindEvent();
        initI18N(view);

        !ctrl.controller.getCurrentPageView && presenter.pageShow(view, model);
    };

    presenter.__interface = {
        resizeScreen: function resizeScreen(data) {
            ctrl.body.removeClass('animated');
        }
    };

    presenter.setBasePath = function (path) {
        ctrl.basePath = path;
    };

    var dataReset = function dataReset() {
        ismousedown = false;
        finishStart = false;
        clickStart = false;
        helper.retryTimes = 0;
    };

    var viewReset = function viewReset() {
        hideEndQuestionButton();
    };

    // 此处为module真正显示的入口
    presenter.pageShow = function (view, model) {
        dataReset();
        bindNativeEvent();
        //存在questionModel数据，才去用这个数据做初始化
        if (ctrl.questionModel) {
            balance.init(ctrl.questionModel);
            judgeBalanceState(true);
        }
    };

    presenter.pageLeave = function () {
        unbindNativeListener();
    };
    var disposeCtrl = function disposeCtrl(obj) {
        if (isObject(obj) || isArray(obj)) {
            $.each(obj, function (k, v) {
                if (isObject(v)) {
                    disposeCtrl(v);
                }
                obj[k] = null;
                delete obj[k];
            });
            obj = null;
        }
        obj = null;
    };

    presenter.destroy = function () {
        !ctrl.controller.getCurrentPageView && presenter.pageLeave();
        //解除绑定的Module事件
        unBindEvent();
        disposeCtrl(ctrl);
        ctrl = null;
        disposeCtrl(goodsInfo);
        goodsInfo = null;
        disposeCtrl(balance);
        balance = null;
        //ToDo:释放Module占用的内存对象
    };

    presenter.getState = function () {
        //TODO: 添加符合Module需求的状态对象
        var moduleState = JSON.stringify({
            module_id: ctrl.moduleId
        });
        return moduleState;
    };

    presenter.setState = function (state) {
        var currentState;
        if (state) {
            currentState = JSON.parse(state);
            //ToDo:处理Module的状态恢复
        }
    };

    /**
     *execute是学生端调用，初始化
     * 其他均为老师端功能
     */
    //presenter.__interface = {
    //	//在data中加入要推送的题目信息
    //	getExerciseData:function(data){
    //		data.questionInfo = {
    //			id:'',
    //			type_code: 'Balance',
    //			type_name: '天平'
    //		};
    //
    //		data.extraData = {
    //			toolKey: "Balance",
    //			toolOptions: { // 学科工具参数
    //				width:"100%",//工具窗全屏
    //				initData:getCurrentData()
    //			}
    //		};
    //	},
    //	//推送成功调用
    //	exerciseStartSuccess:function(){
    //		console.log('天平工具推送成功');
    //	},
    //	//推送失败调用
    //	exerciseStartFail:function(){
    //		console.log('天平工具推送失败');
    //	},
    //	//run之后将天平初始化为老师端的状态
    //	execute:function(options){
    //		setBalance(options.initData);
    //	}
    //
    //};


    //获取到当前天平的状态，左边和右边的物品，以及倾斜的方向
    function getCurrentState(side) {
        var tray;
        var items = [];
        if (side === 'left') {
            tray = ctrl.moveWrap.find('.balance_plate.left').find('.plate_box');
        } else if (side === 'right') {
            tray = ctrl.moveWrap.find('.balance_plate.right').find('.plate_box');
        }
        $.each(tray.find('.in-tray'), function (k, v) {
            var item = {
                'name': $(v).data('name'),
                'src': $(v).data('src'),
                'weight': $(v).data('weight'),
                'cssClass': $(v).data('class'),
                'left': $(v).data('x'),
                'bottom': $(v).data('y')
            };

            items.push(item);
        });
        return items;
    }

    function bindNativeEvent() {
        registerNativeListener('TriggerUserInput', triggerUserInput);
        registerNativeListener('UserInputMessageCallback', function (message) {
            if (!message.success) {
                var value = getMessage(message.messageId);
                userInput(value.item, value.value, value.messageIndex);
            } else {
                delMessage(message.messageId);
            }
        });
        registerNativeListener('Balance', BalanceEvent);
    }

    function bindEvent() {
        delegateDomEvent();
    }

    function unBindEvent() {
        ctrl.$view.off('touchstart mousedown', '.in-toolbar').off('touchstart mousedown', '.in-tray').off('touchmove mousemove').off('touchend mouseup').off('mouseleave').off('click', '.btn_right').off('click', '.btn_left');
    }

    function initI18N(view) {
        $(view).find('.com_lay_toptool .stop').html(helper.i18n['balance_end_sync']);
    }

    // 国际化语言包处理
    // presenter.setLocationProperties = function(location) {};


    //移动环境教师端
    // presenter.initTeacherMobile = function() {
    //   console.log('initTeacherMobile')
    // };
    // //移动环境学生端
    // presenter.initStudentMobile = function() {
    //   console.log('initStudentMobile')
    // };
    // //移动环境投影端
    // presenter.initProjectionMobile = function() {
    //   console.log('initProjectionMobile')
    // };
    // //Web端
    // presenter.initWeb = function() {
    //   console.log('initWeb')
    // };
    // //教师端PC
    // presenter.initTeacherPc = function() {
    //   console.log('initTeacherPc')
    // };
    //
    // window.c = presenter;

    return presenter;
}]]></presenter><resources><file src="./resources/locations/bo_CN/lang.json"/><file src="./resources/locations/bo_CN/lang.po"/><file src="./resources/locations/bo/lang.json"/><file src="./resources/locations/bo/lang.po"/><file src="./resources/locations/en_US/lang.json"/><file src="./resources/locations/en_US/lang.po"/><file src="./resources/locations/en/lang.json"/><file src="./resources/locations/en/lang.po"/><file src="./resources/locations/zh_CN/lang.json"/><file src="./resources/locations/zh_CN/lang.po"/><file src="./resources/locations/zh/lang.json"/><file src="./resources/locations/zh/lang.po"/><file src="./resources/wood/images/balance-bar.png"/><file src="./resources/wood/images/balance-circle.png"/><file src="./resources/wood/images/balance-pointer.png"/><file src="./resources/wood/images/balance.png"/><file src="./resources/wood/images/bg_border.png"/><file src="./resources/wood/images/bg-bottom.png"/><file src="./resources/wood/images/btn-left-active.png"/><file src="./resources/wood/images/btn-left.png"/><file src="./resources/wood/images/btn-right-active.png"/><file src="./resources/wood/images/btn-right.png"/><file src="./resources/wood/images/goods11-1-small.png"/><file src="./resources/wood/images/goods11-1.png"/><file src="./resources/wood/images/goods11-2-small.png"/><file src="./resources/wood/images/goods11-2.png"/><file src="./resources/wood/images/goods11-3-small.png"/><file src="./resources/wood/images/goods11-3.png"/><file src="./resources/wood/images/goods11-4-en-small.png"/><file src="./resources/wood/images/goods11-4-en.png"/><file src="./resources/wood/images/goods11-4-ru-small.png"/><file src="./resources/wood/images/goods11-4-ru.png"/><file src="./resources/wood/images/goods11-4-small.png"/><file src="./resources/wood/images/goods11-4.png"/><file src="./resources/wood/images/goods11-5-small.png"/><file src="./resources/wood/images/goods11-5.png"/><file src="./resources/wood/images/goods11-6-small.png"/><file src="./resources/wood/images/goods11-6.png"/><file src="./resources/wood/images/goods11-7-small.png"/><file src="./resources/wood/images/goods11-7.png"/><file src="./resources/wood/images/goods12-1-small.png"/><file src="./resources/wood/images/goods12-1.png"/><file src="./resources/wood/images/goods12-2-small.png"/><file src="./resources/wood/images/goods12-2.png"/><file src="./resources/wood/images/goods12-3-small.png"/><file src="./resources/wood/images/goods12-3.png"/><file src="./resources/wood/images/goods12-4-small.png"/><file src="./resources/wood/images/goods12-4.png"/><file src="./resources/wood/images/goods21-1-small.png"/><file src="./resources/wood/images/goods21-1.png"/><file src="./resources/wood/images/goods21-2-small.png"/><file src="./resources/wood/images/goods21-2.png"/><file src="./resources/wood/images/goods22-1-small.png"/><file src="./resources/wood/images/goods22-1.png"/><file src="./resources/wood/images/goods22-2-small.png"/><file src="./resources/wood/images/goods22-2.png"/><file src="./resources/wood/images/goods22-3-small.png"/><file src="./resources/wood/images/goods22-3.png"/><file src="./resources/wood/images/goods23-1-small.png"/><file src="./resources/wood/images/goods23-1.png"/><file src="./resources/wood/images/goods33-1-small.png"/><file src="./resources/wood/images/goods33-1.png"/><file src="./resources/wood/images/leverage1-small.png"/><file src="./resources/wood/images/leverage1.png"/><file src="./resources/wood/images/leverage2-small.png"/><file src="./resources/wood/images/leverage2.png"/><file src="./resources/wood/images/leverage3-small.png"/><file src="./resources/wood/images/leverage3.png"/><file src="./resources/wood/images/leverage4-small.png"/><file src="./resources/wood/images/leverage4.png"/><file src="./resources/wood/images/leverage5-small.png"/><file src="./resources/wood/images/leverage5.png"/><file src="./resources/wood/images/leverage6-small.png"/><file src="./resources/wood/images/leverage6.png"/><file src="./resources/wood/images/leverage7-small.png"/><file src="./resources/wood/images/leverage7.png"/><file src="./resources/wood/images/leverage8-small.png"/><file src="./resources/wood/images/leverage8.png"/><file src="./resources/wood/images/plate.png"/></resources></addon>