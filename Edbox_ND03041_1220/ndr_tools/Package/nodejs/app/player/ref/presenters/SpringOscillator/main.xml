<?xml version='1.0' encoding='UTF-8'?>
<addon id="templateid"><properties/><dependencies><jsDependency><javaScript name="AlamedaRequire" version="0.3.2"/><javaScript name="tools_common" version="1.3.0"/><javaScript name="threejs" version="73.1"/><javaScript name="konva" version="1.2.2"/></jsDependency></dependencies><css><![CDATA[@charset "UTF-8";.exam_skin_wood .springOscillator_wrapper{width:100%;height:100%;position:relative;background:#bfd3e2}.exam_skin_wood .springOscillator_wrapper .spolr_ntm_txt_i{font-style:italic}.exam_skin_wood .springOscillator_wrapper .spolr_ui_txt_explanation{position:absolute;left:-6em;right:-7em;text-align:center;top:20em}.exam_skin_wood .springOscillator_wrapper .spolr_ui_txt_explanation .spolr_ntm_txt{font-size:2.5em;color:#3a3a3a}.exam_skin_wood .springOscillator_wrapper .spolr_ui_txt_explanation .spolr_ntm_txt_i{font-style:italic}.exam_skin_wood .springOscillator_wrapper .spolr_ui_txt_explanation .spolr_ntm_txt_sp{color:#ff6535}.exam_skin_wood .springOscillator_wrapper .spolr_ui_txt_explanation .spolr_ntm_txt_sp .spolr_ntm_txt_i{font-family:Times New Roman,serif;font-size:1.3em;line-height:1.2;vertical-align:top}.exam_skin_wood .springOscillator_wrapper .spolr_ui_txt_explanation_list{line-height:1.5;display:inline-block;width:30%;margin:0 1%;text-align:center;vertical-align:top}.exam_skin_wood .springOscillator_wrapper .txt_explanation_list{display:inline-block;text-align:left}.exam_skin_wood .springOscillator_wrapper .springOscillator_main{position:absolute;left:0;right:0;height:36em;top:50%;margin-top:-19em}.exam_skin_wood .springOscillator_wrapper .springOscillator_main_right_menu{display:inline-block;min-width:5.83333em;min-height:25em;background:#b1c9dc;border-radius:.25em;position:absolute;right:6em;top:7.91667em}.exam_skin_wood .springOscillator_wrapper .springOscillator_bottom{position:absolute;bottom:0;left:0;background:#cfdee9}.exam_skin_wood .springOscillator_wrapper .springOscillator_tool_box{position:absolute;left:10em;top:8em;z-index:20}.exam_skin_wood .springOscillator_wrapper .springOscillator_tool_3d{width:51em;position:relative;height:8.75em;background:#f9f9f9;opacity:.5}.exam_skin_wood .springOscillator_wrapper .springOscillator_tool_btn_box{position:absolute;left:50%;width:0;top:4em}.exam_skin_wood .springOscillator_wrapper .springOscillator_tool_paper{display:none;position:absolute;left:-10em;right:-10em;height:30em;margin:0 -2.5em;padding:0 2.5em;background:#fff;box-shadow:0 0 .5em rgba(0,33,25,.21);overflow:hidden}.exam_skin_wood .springOscillator_wrapper .spolr_ntm_nor_left,.exam_skin_wood .springOscillator_wrapper .spolr_ntm_nor_mid,.exam_skin_wood .springOscillator_wrapper .spolr_ntm_nor_right{position:absolute;top:10em;padding:0;width:5em;margin:0;margin-left:-2.5em}.exam_skin_wood .springOscillator_wrapper .spolr_ntm_nor_left .btns-primary-txt,.exam_skin_wood .springOscillator_wrapper .spolr_ntm_nor_mid .btns-primary-txt,.exam_skin_wood .springOscillator_wrapper .spolr_ntm_nor_right .btns-primary-txt{font-size:2em;color:#ff6535;font-family:Times New Roman,serif;font-size:2.8em}.exam_skin_wood .springOscillator_wrapper .spolr_ntm_nor_mid{left:0}.exam_skin_wood .springOscillator_wrapper .spolr_ntm_nor_left{left:-10em}.exam_skin_wood .springOscillator_wrapper .spolr_ntm_nor_right{right:-10em;margin-left:0;margin-right:-2.5em}.exam_skin_wood .springOscillator_wrapper .spolr_line{pointer-events:none;position:absolute;left:50%;top:-14em;bottom:3.16667em;width:0;margin-left:-.10417em;border-left:.20833em dashed #ff6535}.exam_skin_wood .springOscillator_wrapper .spolr_ui_tips_box{position:absolute;top:0;left:50%;margin-left:4em;min-width:18em}.exam_skin_wood .springOscillator_wrapper .spolr_ui_tips_box .spolr_ui_tips_box_bg{position:absolute;left:0;top:0;width:100%;height:100%;background:#000;border-radius:.41667em;opacity:.72}.exam_skin_wood .springOscillator_wrapper .spolr_ui_tips_box .spolr_ui_tips_box_bg:before{content:"";position:absolute;top:50%;right:100%;margin:-1.5em -.75em 0 0;top:1.7em;margin-top:0;width:0;height:0;border:1.5em solid transparent;border-right:1.5em solid #000;border-left:0}.exam_skin_wood .springOscillator_wrapper .spolr_ui_tips_box .spolr_ui_tips_box_txt{position:relative;text-align:center;max-width:20.5em;padding:1em 2em;min-height:6.45em}.exam_skin_wood .springOscillator_wrapper .spolr_ui_tips_box .spolr_ui_tips_box_txt span{color:#fff;font-size:1.5em;line-height:1.5;display:inline-block;text-align:left}.exam_skin_wood .springOscillator_wrapper .spolr_ui_tips_hand{position:absolute;left:50%;top:50%;margin:2em 0 0 -2.3em;width:5.25em;height:8.625em;background:url(resources/wood/images/icons_hs.png) no-repeat 50%;background-size:100% 100%}.exam_skin_wood .springOscillator_wrapper .spolr_show_xt .springOscillator_tool_paper{display:block;top:0}.exam_skin_wood .springOscillator_wrapper .spolr_show_xt .springOscillator_tool_box,.exam_skin_wood .springOscillator_wrapper .spolr_show_xt .springOscillator_tool_btn_box{top:0}.exam_skin_wood .springOscillator_wrapper .spolr_show_xt .springOscillator_tool_btn_box .btns-primary{top:31.5em}.exam_skin_wood .springOscillator_wrapper .spolr_show_xt .springOscillator_tool_btn_box .spolr_line{top:-31.5em}.exam_skin_wood .springOscillator_wrapper .spolr_show_xt .spolr_ui_txt_explanation{display:none}.exam_skin_wood .springOscillator_wrapper .spolr_show_cycle .springOscillator_cycle_table{display:-webkit-box;display:-ms-flexbox;display:flex}.exam_skin_wood .springOscillator_wrapper .spolr_show_cycle .springOscillator_tool_box,.exam_skin_wood .springOscillator_wrapper .spolr_show_cycle .springOscillator_tool_btn_box{top:0}.exam_skin_wood .springOscillator_wrapper .spolr_show_cycle .springOscillator_tool_btn_box .btns-primary{top:9.5em}.exam_skin_wood .springOscillator_wrapper .spolr_show_cycle .springOscillator_tool_btn_box .spolr_line{top:-9.5em}.exam_skin_wood .springOscillator_wrapper .spolr_show_cycle .spolr_ui_txt_explanation{display:none}.exam_skin_wood .springOscillator_wrapper .spolr_show_analysis .spolr_analysis_animation_box,.exam_skin_wood .springOscillator_wrapper .spolr_show_analysis .springOscillator_analysis_box{display:block}.exam_skin_wood .springOscillator_wrapper .spolr_show_analysis .springOscillator_tool_box{top:0;left:16.5em}.exam_skin_wood .springOscillator_wrapper .spolr_show_analysis .springOscillator_tool_btn_box{top:0}.exam_skin_wood .springOscillator_wrapper .spolr_show_analysis .springOscillator_tool_btn_box .btns-primary{top:31.5em}.exam_skin_wood .springOscillator_wrapper .spolr_show_analysis .springOscillator_tool_btn_box .spolr_line{top:-31.5em}.exam_skin_wood .springOscillator_wrapper .spolr_show_analysis .spolr_ui_txt_explanation{display:none}.exam_skin_wood .springOscillator_wrapper .springOscillator_cycle_table{display:none;position:absolute;z-index:22;top:14em;left:7em;width:57em;height:19em;background:#b2c8dd;border:.16667em solid #6c8395;border-radius:.5em;overflow:hidden}.exam_skin_wood .springOscillator_wrapper .springOscillator_cycle_table .spolr_cycle_list{float:left;width:25%;border-right:.08333em solid #6c8395;text-align:center}.exam_skin_wood .springOscillator_wrapper .springOscillator_cycle_table .spolr_cycle_list:last-child{border-right:none}.exam_skin_wood .springOscillator_wrapper .springOscillator_cycle_title{min-width:9em;max-width:16em;border-right:.08333em solid #6c8395;color:#454f57;text-align:center;line-height:19em}.exam_skin_wood .springOscillator_wrapper .springOscillator_cycle_title .uibox_txt{font-size:3em;line-height:1;display:inline-block;vertical-align:middle}.exam_skin_wood .springOscillator_wrapper .springOscillator_cycle_main{-webkit-box-flex:1;-ms-flex:1;flex:1;position:relative}.exam_skin_wood .springOscillator_wrapper .springOscillator_cycle_main.spolr_show_scrollbar .springOscillator_cycle_bd{overflow-y:scroll;margin-right:.25em;padding-right:.25em}.exam_skin_wood .springOscillator_wrapper .springOscillator_cycle_main.spolr_show_scrollbar .spolr_cycle_list:last-child{border-right:.08333em solid #6c8395}.exam_skin_wood .springOscillator_wrapper .springOscillator_cycle_main.spolr_show_scrollbar .springOscillator_cycle_hd{right:.5em;overflow-y:scroll;pointer-events:none}.exam_skin_wood .springOscillator_wrapper .springOscillator_cycle_main.spolr_show_scrollbar .springOscillator_cycle_hd::-webkit-scrollbar{width:1em;height:1em}.exam_skin_wood .springOscillator_wrapper .springOscillator_cycle_hd{position:absolute;left:0;top:0;right:0;z-index:9}.exam_skin_wood .springOscillator_wrapper .springOscillator_cycle_hd .spolr_cycle_list{height:4.75em;border-bottom:.08333em solid #6c8395;background:#f1ce97}.exam_skin_wood .springOscillator_wrapper .springOscillator_cycle_hd .spolr_cycle_list:after{content:"";display:inline-block;width:0;height:100%;vertical-align:middle}.exam_skin_wood .springOscillator_wrapper .springOscillator_cycle_hd .spolr_cycle_list .uibox_txt{font-size:2em;color:#1b1b1b;max-width:95%;display:inline-block;vertical-align:middle;line-height:1.2}.exam_skin_wood .springOscillator_wrapper .springOscillator_cycle_hd .spolr_cycle_list .uibox_txt .ui-txt-Rm{font-family:Times New Roman,serif;font-size:1.15em;line-height:.5}.exam_skin_wood .springOscillator_wrapper .springOscillator_cycle_bd{padding-top:4.75em;position:absolute;left:0;right:0;top:0;bottom:0;overflow:hidden}.exam_skin_wood .springOscillator_wrapper .springOscillator_cycle_ul .spolr_cycle_li{border-bottom:.08333em solid #6c8395;overflow:hidden}.exam_skin_wood .springOscillator_wrapper .springOscillator_cycle_ul .spolr_cycle_li:last-child{border:none}.exam_skin_wood .springOscillator_wrapper .springOscillator_cycle_ul .spolr_cycle_list{background:#eee;height:4.625em;line-height:4.41667em}.exam_skin_wood .springOscillator_wrapper .springOscillator_cycle_ul .spolr_cycle_list .uibox_txt{font-size:2.5em;color:#1b1b1b}.exam_skin_wood .springOscillator_wrapper .spolr_analysis_animation_box{display:none}.exam_skin_wood .springOscillator_wrapper .springOscillator_analysis_box{display:none;position:absolute;z-index:22;top:9em;left:8em;width:56em;height:21.5em;background:#ededee;border:.16667em solid #6c8395;border-radius:.5em;overflow:hidden;z-index:18}.exam_skin_wood .springOscillator_wrapper .spolr_analysis_hd{position:absolute;left:0;top:0;bottom:0;min-width:8.5em;border-right:.08333em solid #7592ad;background:#b2c8dd;padding-top:.6em}.exam_skin_wood .springOscillator_wrapper .spolr_analysis_list{position:relative;padding:.5em 5em .5em 0;text-align:center;line-height:2;height:4em}.exam_skin_wood .springOscillator_wrapper .spolr_analysis_list .uibox_txt{display:inline-block;vertical-align:middle;font-size:1.5em;height:100%;padding:0 .3em;text-align:left}.exam_skin_wood .springOscillator_wrapper .spolr_analysis_list .com_applicationset_switch{width:4.25em;height:2em;vertical-align:middle;position:absolute;right:.5em;top:1em}.exam_skin_wood .springOscillator_wrapper .spolr_analysis_list .com_applicationset_switch:before{width:2em;height:2em}.exam_skin_wood .springOscillator_wrapper .spolr_analysis_list .spolr_analysis_list_line{position:absolute;border-top:.16667em dashed #858b91;margin-bottom:-.08333em;left:100%;right:-620%;top:50%}.exam_skin_wood .springOscillator_wrapper .spolr_analysis_e_line{position:absolute;top:26.8em;left:-10em;right:-10em;height:2em;background:#24aaff}.exam_skin_wood .springOscillator_wrapper .spolr_analysis_e_line_width{background:#c8c8c8;width:100%;height:100%}.exam_skin_wood .springOscillator_wrapper .spolr_analysis_e_line_text{position:absolute;top:-.2em;font-size:3.54167em;font-style:italic;font-family:Times New Roman,serif;background:#ededee;color:#384650;padding:0 .1em}.exam_skin_wood .springOscillator_wrapper .spolr_analysis_e_line_text i{font-size:.5em;font-style:italic;font-family:Times New Roman,serif}.exam_skin_wood .springOscillator_wrapper .spolr_analysis_e_line_text.spolr_et_left{left:-1.3em}.exam_skin_wood .springOscillator_wrapper .spolr_analysis_e_line_text.spolr_et_right{right:-1.3em}.exam_skin_wood .springOscillator_wrapper .spolr_analysis_anime_a,.exam_skin_wood .springOscillator_wrapper .spolr_analysis_anime_f,.exam_skin_wood .springOscillator_wrapper .spolr_analysis_anime_v,.exam_skin_wood .springOscillator_wrapper .spolr_analysis_anime_x{position:absolute;height:3em}.exam_skin_wood .springOscillator_wrapper .spolr_analysis_anime_x{top:10.3em;width:10em;-webkit-transform:rotateY(0);transform:rotateY(0);-webkit-transform-origin:0 50%;transform-origin:0 50%}.exam_skin_wood .springOscillator_wrapper .spolr_analysis_anime_x .anime_x_line{position:absolute;right:1.5em;top:.75em;left:0;bottom:.75em;background:#24aaff}.exam_skin_wood .springOscillator_wrapper .spolr_analysis_anime_x .anime_x_arrow{position:absolute;top:50%;left:100%;margin:-1.5em 0 0 -2em;width:0;height:0;border:1.5em solid transparent;border-left:2em solid #24aaff;border-right:0}.exam_skin_wood .springOscillator_wrapper .spolr_analysis_anime_f{top:14.3em;width:10em;-webkit-transform:rotateY(0);transform:rotateY(0);-webkit-transform-origin:0 50%;transform-origin:0 50%}.exam_skin_wood .springOscillator_wrapper .spolr_analysis_anime_f .anime_x_line{position:absolute;right:0;top:.75em;left:1.5em;bottom:.75em;background:#24aaff}.exam_skin_wood .springOscillator_wrapper .spolr_analysis_anime_f .anime_x_arrow{position:absolute;top:50%;left:0;margin:-1.5em 0 0;width:0;height:0;border:1.5em solid transparent;border-right:2em solid #24aaff;border-left:0}.exam_skin_wood .springOscillator_wrapper .spolr_analysis_anime_a{top:18.3em;width:10em;-webkit-transform:rotateY(0);transform:rotateY(0);-webkit-transform-origin:0 50%;transform-origin:0 50%}.exam_skin_wood .springOscillator_wrapper .spolr_analysis_anime_a .anime_x_line{position:absolute;right:0;top:.75em;left:1.5em;bottom:.75em;background:#24aaff}.exam_skin_wood .springOscillator_wrapper .spolr_analysis_anime_a .anime_x_arrow{position:absolute;top:50%;left:0;margin:-1.5em 0 0;width:0;height:0;border:1.5em solid transparent;border-right:2em solid #24aaff;border-left:0}.exam_skin_wood .springOscillator_wrapper .spolr_analysis_anime_v{top:22.3em;width:10em;-webkit-transform:rotateY(0);transform:rotateY(0);-webkit-transform-origin:0 50%;transform-origin:0 50%}.exam_skin_wood .springOscillator_wrapper .spolr_analysis_anime_v .anime_x_line{position:absolute;right:1.5em;top:.75em;left:0;bottom:.75em;background:#24aaff}.exam_skin_wood .springOscillator_wrapper .spolr_analysis_anime_v .anime_x_arrow{position:absolute;top:50%;left:100%;margin:-1.5em 0 0 -2em;width:0;height:0;border:1.5em solid transparent;border-left:2em solid #24aaff;border-right:0}.exam_skin_wood .springOscillator_pop{position:absolute;left:0;top:0;right:0;bottom:0;text-align:center;z-index:1009}.exam_skin_wood .springOscillator_pop.pop_has_mask{background:rgba(0,0,0,.4)}.exam_skin_wood .springOscillator_pop:after{display:inline-block;width:0;height:100%;content:"";vertical-align:middle}.exam_skin_wood .springOscillator_pop_mask{position:absolute;left:0;top:0;right:0;bottom:0;background:rgba(0,0,0,.4);z-index:1001}.exam_skin_wood .springOscillator_pop_main{min-width:57.5em;min-height:38em;display:inline-block;vertical-align:middle;background:rgba(242,246,249,.95);border-radius:.5em}.exam_skin_wood .springOscillator_pop_hd{margin:0 1em 1.5em;text-align:center}.exam_skin_wood .springOscillator_pop_hd .uibox_txt{color:#000;font-size:2em}.exam_skin_wood .springOscillator_pop_hd .uibox_txt .spolr_ntm_txt_i{font-family:Times New Roman,serif;font-size:1.6em}.exam_skin_wood .springOscillator_pop_hd .spolr_ntm_txt_ajust{vertical-align:middle;display:inline-block;margin-top:-.35em}.exam_skin_wood .springOscillator_pop_bd{height:27em}.exam_skin_wood .springOscillator_pop_ft{padding:1.5em 1em;text-align:center}.exam_skin_wood .springOscillator_pop_ft .spolr_pop_btn{height:3em;line-height:3em;min-width:10em}.exam_skin_wood .spolr_light_scrollbar::-webkit-scrollbar{width:1em;height:1em}.exam_skin_wood .spolr_light_scrollbar::-webkit-scrollbar-thumb{border:1em solid transparent;-webkit-border-image:url(resources/wood/images/scrollbar/vertical-thumb.png) 11 11}.exam_skin_wood .springOscillator_wrapper .springOscillator_main_right_menu{border-radius:.20833em}.exam_skin_wood .springOscillator_wrapper .springOscillator_main_right_menu .spolr_menu_box{position:relative;height:100%}.exam_skin_wood .springOscillator_wrapper .springOscillator_main_right_menu .spolr_menu_item{position:relative;float:left;width:100%;height:6.25em;background:url(resources/wood/images/icon_aside.png) no-repeat;background-size:5.83333em auto;cursor:pointer}.exam_skin_wood .springOscillator_wrapper .springOscillator_main_right_menu .spolr_menu_item .spolr_ntm_txt_i{padding:0 .1em;font-family:Times New Roman,serif;font-size:1.5em;line-height:.5}.exam_skin_wood .springOscillator_wrapper .springOscillator_main_right_menu .spolr_menu_item.on .spolr_menu_a:after{content:"";display:block;position:absolute;left:0;top:0;width:100%;height:100%;background:rgba(91,146,186,.3)}.exam_skin_wood .springOscillator_wrapper .springOscillator_main_right_menu .spolr_menu_item .spolr_menu_a{width:100%;height:100%;display:inline-block}.exam_skin_wood .springOscillator_wrapper .springOscillator_main_right_menu .spolr_menu_item .spolr_menu_a:active:after{content:"";display:block;position:absolute;left:0;top:0;width:100%;height:100%;background:rgba(91,146,186,.3)}.exam_skin_wood .springOscillator_wrapper .springOscillator_main_right_menu .spolr_menu_item.spolr_item1{background-position:0 top}.exam_skin_wood .springOscillator_wrapper .springOscillator_main_right_menu .spolr_menu_item.spolr_item1 .spolr_menu_a:after{border-top-left-radius:.20833em;border-top-right-radius:.20833em}.exam_skin_wood .springOscillator_wrapper .springOscillator_main_right_menu .spolr_menu_item.spolr_item2{background-position:0 -6.66667em}.exam_skin_wood .springOscillator_wrapper .springOscillator_main_right_menu .spolr_menu_item.spolr_item2.on .spolr_item2_btn{display:block}.exam_skin_wood .springOscillator_wrapper .springOscillator_main_right_menu .spolr_menu_item.spolr_item3{background-position:0 -13.33333em}.exam_skin_wood .springOscillator_wrapper .springOscillator_main_right_menu .spolr_menu_item.spolr_item4{background-position:0 bottom}.exam_skin_wood .springOscillator_wrapper .springOscillator_main_right_menu .spolr_menu_item.spolr_item4 .spolr_menu_a:after{border-bottom-left-radius:.20833em;border-bottom-right-radius:.20833em}.exam_skin_wood .springOscillator_wrapper .springOscillator_main_right_menu .spolr_menu_item .spolr_item2_btn{white-space:nowrap;position:absolute;right:7em;top:1.58333em;padding:0 1.125em;display:none}.exam_skin_wood .springOscillator_wrapper .springOscillator_bottom{width:100%;padding:0 4.16667em;height:5.70833em!important}.exam_skin_wood .springOscillator_wrapper .springOscillator_bottom.switch_drop_module .spolr_controlbtn_com{display:none}.exam_skin_wood .springOscillator_wrapper .springOscillator_bottom.switch_drop_module .spolar_dropbox_com{display:inline-block}.exam_skin_wood .springOscillator_wrapper .springOscillator_bottom.switch_drop_module .spolar_com_btns{min-width:50%}.exam_skin_wood .springOscillator_wrapper .springOscillator_bottom.switch_drop_module .spolar_com_btns .spolr_play_count{display:inline-block}.exam_skin_wood .springOscillator_wrapper .springOscillator_bottom.switch_drop_module .spolar_com_btns .spolr_play_nor{display:none}.exam_skin_wood .springOscillator_wrapper .springOscillator_bottom:after{display:inline-block;width:0;height:100%;content:"center";vertical-align:middle;overflow:hidden}.exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolar_com_btns{float:right;position:relative;display:inline-block;vertical-align:middle;height:100%;padding-left:1.25em;min-width:48%;text-align:right}.exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolar_com_btns .spolr_play_count{display:none;white-space:nowrap}.exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolar_com_btns:before{content:"";display:inline-block;width:0;height:100%;border-left:1px solid #e6f3fc;border-right:1px solid #b3c1ca;position:absolute;left:0;top:0}.exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolr_reset_btn.tool_operate_bar{display:inline-block;vertical-align:top;min-width:6em;margin-top:.29167em}.exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .com_btns{min-width:8.66667em;display:inline-block;vertical-align:top;margin-top:1.25em}.exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolar_dropbox_com{position:relative;display:none;white-space:nowrap;vertical-align:middle;height:2.83333em}.exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolar_dropbox_com .spolar_drop_tip{position:relative;display:inline-block;vertical-align:middle;height:1.5em;padding:.08333em .625em}.exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolar_dropbox_com .spolar_drop_tip .tip_text{font-size:1.5em;font-family:Microsoft yahei;color:#384650}.exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolar_dropbox_com:after{display:inline-block;width:0;height:100%;content:"center";vertical-align:middle;overflow:hidden}.exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolar_dropbox_com .spolar_drop_num{position:relative;display:inline-block;width:6.33333em;height:100%;overflow:hidden;text-align:center;vertical-align:middle;border:1px solid #8b8b8b;border-radius:.58333em;background:-webkit-linear-gradient(bottom,#fff,#e9e9e9);background:linear-gradient(0deg,#fff 0,#e9e9e9)}.exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolar_dropbox_com .spolar_drop_num .num_input{position:absolute;top:.625em;left:1.04167em;width:1.5em;height:1.5em}.exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolar_dropbox_com .spolar_drop_num .num_input .num_input_text{font-size:1.5em;font-family:Microsoft yahei;color:#4d4d4d}.exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolar_dropbox_com .spolar_drop_num.ui_btn_active .spolar_drop_arrow,.exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolar_dropbox_com .spolar_drop_num:active .spolar_drop_arrow{background-position:0 100%}.exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolar_dropbox_com .spolar_drop_num.ui_open .spolar_drop_arrow{background-image:url(resources/wood/images/drop_arrow_1.png)}.exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolar_dropbox_com .spolar_drop_num.click_disabled{border-color:#93989a;background:-webkit-linear-gradient(top,#c8d1d7,#c1c8cc);background:linear-gradient(180deg,#c8d1d7 0,#c1c8cc);cursor:default}.exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolar_dropbox_com .spolar_drop_num.click_disabled .spolar_drop_arrow{filter:Gray;-webkit-filter:grayscale(100%);background-position:0 0!important;opacity:.3}.exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolar_dropbox_com .spolar_drop_num.click_disabled .num_input .num_input_text{color:#969fa4}.exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolar_dropbox_com .spolar_drop_preload_img01{display:none;background-image:url(resources/wood/images/drop_arrow_1.png)}.exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolar_dropbox_com .spolar_drop_arrow{width:2.25em;height:2.25em;overflow:hidden;background:url(resources/wood/images/drop_arrow.png) no-repeat;background-size:100% 4.91667em;background-position:0 0;position:absolute;right:.375em;top:.25em}.exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolar_dropbox_com .spolar_drop_arrow.ui_btn_active,.exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolar_dropbox_com .spolar_drop_arrow:active{background-position:0 100%}.exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolar_dropbox_com.spolar_drop_amplitude{margin-right:1.66667em}.exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolar_dropbox_com.spolar_drop_amplitude .spolar_drop_numselect{left:-70%}.exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolar_dropbox_com.spolar_drop_frequency .spolar_drop_numselect{left:-85%}.exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolar_dropbox_com .spolar_drop_numselect{white-space:normal;z-index:100;position:absolute;bottom:3.5em;right:-145%;pointer-events:none}.exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolar_dropbox_com .spolar_drop_numselect .spolar_numselect_wrap{border:1px solid #686868;padding:.58333em .5em;background-color:#ebebeb;text-align:center;display:inline-block;pointer-events:auto}.exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolar_dropbox_com .spolar_drop_numselect.hide_dom{display:none}.exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolar_dropbox_com .spolar_drop_numselect a{display:inline-block;width:3.66667em;height:2.25em;line-height:2.25em;color:#4d4d4d;background:#fff;text-align:center;border-radius:.16667em;border:1px solid #9c9c9c;margin:.20833em}.exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolar_dropbox_com .spolar_drop_numselect a.ui_btn_active,.exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolar_dropbox_com .spolar_drop_numselect a:active{background:#31b0ee;color:#fff;border-color:#007ab6}.exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolar_dropbox_com .spolar_drop_numselect a span{font-size:1.5em;font-family:Microsoft yahei;vertical-align:top}.exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolr_controlbtn_com{display:inline-block;position:relative;vertical-align:middle;height:100%;padding:1.875em .625em}.exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolr_controlbtn_com:after{display:inline-block;width:0;height:100%;content:"center";vertical-align:middle;overflow:hidden}.exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolr_controlbtn_com .spolar_control_title{position:relative;display:inline-block;vertical-align:middle;height:1.5em;margin-top:-.625em;padding:0 .625em;white-space:nowrap}.exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolr_controlbtn_com .spolar_control_title .spolar_control_txt{font-size:1.5em;font-family:Microsoft yahei;color:#384650}.exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolr_controlbtn_com.spolr_control_amplitude{margin-left:-2.08333em}.exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolr_controlbtn_com .spolar_slide_list{height:100%;display:inline-block;position:relative;vertical-align:middle;width:11.33333em;background:url(resources/wood/images/line.png) repeat-x left .375em}.exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolr_controlbtn_com .spolar_slide_list b{position:absolute;left:50%;top:-.58333em;margin-left:-.66667em;height:2.5em;width:1.33333em;background:url(resources/wood/images/control_bar_drop.png) no-repeat 50%;background-size:100% auto;background-position:0 top;z-index:9;cursor:pointer;-webkit-tap-highlight-color:rgba(255,255,255,0)}.exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolr_controlbtn_com .spolar_slide_list b.ui_btn_active,.exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolr_controlbtn_com .spolar_slide_list b:active{background-position:0 bottom}.exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolr_controlbtn_com .spolar_slide_list ins{position:absolute;width:.16667em;height:1.125em}.exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolr_controlbtn_com .spolar_slide_list .scale_left{left:0;margin-left:-.08333em;background:url(resources/wood/images/control_bar_aside.png) no-repeat 50%}.exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolr_controlbtn_com .spolar_slide_list .scale_mid{left:50%;margin-left:-.08333em;background:url(resources/wood/images/control_bar_aside.png) no-repeat 50%}.exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolr_controlbtn_com .spolar_slide_list .scale_right{left:100%;margin-left:-.08333em;background:url(resources/wood/images/control_bar_aside.png) no-repeat 50%}.exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolr_controlbtn_com .spolar_slide_list .spolar_item_num{position:absolute;font-size:1.66667em;font-family:Microsoft yahei;color:#384650;width:1.5em;text-align:center;margin-left:-.75em;top:1.125em}.exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolr_controlbtn_com .spolar_slide_list .spolar_item_num1{left:0;top:-1.4em;font-size:1.2em}.exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolr_controlbtn_com .spolar_slide_list .spolar_item_num2{left:50%}.exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolr_controlbtn_com .spolar_slide_list .spolar_item_num3{left:100%;top:-1.4em;font-size:1.2em}.exam_skin_wood .springOscillator_wrapper .spolr_analysis_e_line_width{background:#587f9a}.exam_skin_wood .springOscillator_wrapper .spolr_analysis_e_line_text.spolr_et_left{color:#3f6b8a}.exam_skin_wood .springOscillator_wrapper .spolr_analysis_e_line_text.spolr_et_right{color:#199df1}.exam_skin_wood .springOscillator_wrapper .spolr_analysis_list .minw_txt{display:inline-block;min-width:3.3em;white-space:nowrap;text-overflow:ellipsis;overflow:hidden;max-width:6em;vertical-align:top;display:none}.exam_skin_wood .springOscillator_wrapper .spolr_analysis_list .spolr_ntm_txt_i{font-size:2.4em;line-height:.8;padding:0 .3em 0 .2em;font-family:Times New Roman,serif}.exam_skin_wood .springOscillator_wrapper .spolr_analysis_list .spolr_ntm_txt_i.biggest{font-size:3em;line-height:.4}@media screen and (max-width:1000px){.exam_skin_wood .springOscillator_wrapper .springOscillator_cycle_hd .spolr_cycle_list,.exam_skin_wood .springOscillator_wrapper .springOscillator_cycle_ul .spolr_cycle_li{border-bottom-width:1px}.exam_skin_wood .springOscillator_wrapper .springOscillator_cycle_main.spolr_show_scrollbar .spolr_cycle_list:last-child,.exam_skin_wood .springOscillator_wrapper .springOscillator_cycle_table .spolr_cycle_list,.exam_skin_wood .springOscillator_wrapper .springOscillator_cycle_title{border-right-width:1px}}.typefaces_long .exam_skin_wood .springOscillator_wrapper .spolr_ui_tips_box .spolr_ui_tips_box_txt{width:26em;max-width:none}.typefaces_long .exam_skin_wood .springOscillator_wrapper .spolr_ui_txt_explanation{top:20.3em}.typefaces_long .exam_skin_wood .springOscillator_wrapper .spolr_ui_txt_explanation .spolr_ntm_txt_sp{float:left;font-size:1.41667em;padding-right:.5em}.typefaces_long .exam_skin_wood .springOscillator_wrapper .spolr_ui_txt_explanation .spolr_ntm_txt_sp .spolr_ntm_txt_i{position:relative;top:-.4em;font-size:1.6em}.typefaces_long .exam_skin_wood .springOscillator_wrapper .spolr_ui_txt_explanation .spolr_ntm_txt_sp+.spolr_ntm_txt{overflow:hidden;font-size:1.41667em;height:6em}.typefaces_long .exam_skin_wood .springOscillator_wrapper .spolr_ui_txt_explanation .txt_explanation_list{max-width:80%;line-height:1}.typefaces_long .exam_skin_wood .springOscillator_wrapper .springOscillator_cycle_hd .spolr_cycle_list .uibox_txt{font-size:1.2em}.typefaces_long .exam_skin_wood .springOscillator_wrapper .springOscillator_cycle_title .uibox_txt{font-size:2em}.typefaces_long .exam_skin_wood .springOscillator_wrapper .springOscillator_bottom{text-align:left}.typefaces_long .exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolar_com_btns{min-width:42%}.typefaces_long .exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolr_controlbtn_com{padding-top:1.8em}.typefaces_long .exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolr_controlbtn_com.spolr_control_amplitude{margin-left:0}.typefaces_long .exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolr_controlbtn_com.spolr_control_amplitude .spolar_control_title{margin-top:-1.8em}.typefaces_long .exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolr_controlbtn_com .spolar_control_title{max-width:8.5em;white-space:normal;margin-top:-.7em}.typefaces_long .exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolr_controlbtn_com .spolar_control_title .spolar_control_txt{display:block;font-size:1.16667em}.typefaces_long .exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolr_controlbtn_com .spolar_slide_list{width:10.5em}.typefaces_long .exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolr_controlbtn_com .spolar_slide_list .spolar_item_num{width:3em;margin-left:-1.5em}.typefaces_long .exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolr_controlbtn_com .spolar_slide_list .spolar_item_num1,.typefaces_long .exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolr_controlbtn_com .spolar_slide_list .spolar_item_num3{top:-1.2em}.typefaces_long .exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .com_btns{margin-left:.3em;margin-right:.3em;line-height:1.2em;width:auto;padding:0;width:10.5em;text-align:center}.typefaces_long .exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .com_btns:after{content:"";display:inline-block;width:0;height:100%;vertical-align:middle}.typefaces_long .exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .com_btns .btns-primary-txt{max-width:96%;display:inline-block;vertical-align:middle;font-size:1em}.typefaces_long .exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolar_dropbox_com.spolar_drop_amplitude .spolar_drop_tip{max-width:8.5em;white-space:normal}.typefaces_long .exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolar_dropbox_com.spolar_drop_frequency .spolar_drop_tip{max-width:14.5em;white-space:normal}.typefaces_long .exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolar_dropbox_com .tip_text{font-size:1.3em;display:inline-block;position:relative;top:50%;-webkit-transform:translateY(-50%);transform:translateY(-50%)}.typefaces_long .exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolr_reset_btn.tool_operate_bar{margin-top:1.5em}.typefaces_long .exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolr_reset_btn.tool_operate_bar .tool_operate_text{display:none}.typefaces_long .exam_skin_wood .springOscillator_wrapper .springOscillator_main_right_menu .spolr_menu_item .spolr_item2_btn{width:13em;line-height:inherit;white-space:normal;z-index:100}.typefaces_ru_RU .exam_skin_wood .springOscillator_wrapper .spolr_ui_tips_box .spolr_ui_tips_box_txt{width:26em;max-width:none}.typefaces_ru_RU .exam_skin_wood .springOscillator_wrapper .spolr_ui_txt_explanation{top:20.3em}.typefaces_ru_RU .exam_skin_wood .springOscillator_wrapper .spolr_ui_txt_explanation .spolr_ntm_txt_sp{float:left;font-size:1.41667em;padding-right:.5em}.typefaces_ru_RU .exam_skin_wood .springOscillator_wrapper .spolr_ui_txt_explanation .spolr_ntm_txt_sp .spolr_ntm_txt_i{position:relative;top:-.4em;font-size:1.6em}.typefaces_ru_RU .exam_skin_wood .springOscillator_wrapper .spolr_ui_txt_explanation .spolr_ntm_txt_sp+.spolr_ntm_txt{overflow:hidden;font-size:1.41667em;height:6em}.typefaces_ru_RU .exam_skin_wood .springOscillator_wrapper .spolr_ui_txt_explanation .txt_explanation_list{max-width:80%;line-height:1}.typefaces_ru_RU .exam_skin_wood .springOscillator_wrapper .springOscillator_cycle_hd .spolr_cycle_list .uibox_txt{font-size:1.2em}.typefaces_ru_RU .exam_skin_wood .springOscillator_wrapper .springOscillator_cycle_title .uibox_txt{font-size:2em}.typefaces_ru_RU .exam_skin_wood .springOscillator_wrapper .springOscillator_bottom{text-align:left}.typefaces_ru_RU .exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolar_com_btns{min-width:42%}.typefaces_ru_RU .exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolr_controlbtn_com{padding-top:1.8em}.typefaces_ru_RU .exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolr_controlbtn_com.spolr_control_amplitude{margin-left:0}.typefaces_ru_RU .exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolr_controlbtn_com.spolr_control_amplitude .spolar_control_title{margin-top:-1.8em}.typefaces_ru_RU .exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolr_controlbtn_com .spolar_control_title{max-width:8.5em;white-space:normal;margin-top:-.7em}.typefaces_ru_RU .exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolr_controlbtn_com .spolar_control_title .spolar_control_txt{display:block;font-size:1.16667em}.typefaces_ru_RU .exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolr_controlbtn_com .spolar_slide_list{width:10.5em}.typefaces_ru_RU .exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolr_controlbtn_com .spolar_slide_list .spolar_item_num{width:3em;margin-left:-1.5em}.typefaces_ru_RU .exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolr_controlbtn_com .spolar_slide_list .spolar_item_num1,.typefaces_ru_RU .exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolr_controlbtn_com .spolar_slide_list .spolar_item_num3{top:-1.2em}.typefaces_ru_RU .exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .com_btns{margin-left:.3em;margin-right:.3em;line-height:1.2em;width:auto;padding:0;width:10.5em;text-align:center}.typefaces_ru_RU .exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .com_btns:after{content:"";display:inline-block;width:0;height:100%;vertical-align:middle}.typefaces_ru_RU .exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .com_btns .btns-primary-txt{max-width:96%;display:inline-block;vertical-align:middle;font-size:1em}.typefaces_ru_RU .exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolar_dropbox_com.spolar_drop_amplitude .spolar_drop_tip{max-width:8.5em;white-space:normal}.typefaces_ru_RU .exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolar_dropbox_com.spolar_drop_frequency .spolar_drop_tip{max-width:14.5em;white-space:normal}.typefaces_ru_RU .exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolar_dropbox_com .tip_text{font-size:1.3em;display:inline-block;position:relative;top:50%;-webkit-transform:translateY(-50%);transform:translateY(-50%)}.typefaces_ru_RU .exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolr_reset_btn.tool_operate_bar{margin-top:1.5em}.typefaces_ru_RU .exam_skin_wood .springOscillator_wrapper .springOscillator_bottom .spolr_reset_btn.tool_operate_bar .tool_operate_text{display:none}.typefaces_ru_RU .exam_skin_wood .springOscillator_wrapper .springOscillator_main_right_menu .spolr_menu_item .spolr_item2_btn{width:13em;line-height:inherit;white-space:normal;z-index:100}.exam_skin_wood .springOscillator_wrapper ._js_virtual_ball{height:5.65em;width:5.65em;position:absolute;left:50%;top:50%;transform:translate(-50%,-50%)}.exam_skin_wood .springOscillator_wrapper .springOscillator_tool_3d{width:51em;position:relative;height:8.75em;background:0 0;opacity:1}.exam_skin_wood .springOscillator_wrapper .springOscillator_tool_3d:after,.exam_skin_wood .springOscillator_wrapper .springOscillator_tool_3d:before{content:"";position:absolute;background-image:url(resources/wood/images/stick.png);background-repeat:no-repeat;background-size:100% auto;width:1.1em;height:7.7em;top:50%;transform:translateY(-50%)}.exam_skin_wood .springOscillator_wrapper .springOscillator_tool_3d:before{left:-.5em}.exam_skin_wood .springOscillator_wrapper .springOscillator_tool_3d:after{right:-.25em}.exam_skin_wood .springOscillator_wrapper .springOscillator_tool_3d{z-index:2}.exam_skin_wood .springOscillator_wrapper .spolr_show_xt .springOscillator_tool_paper .konvajs-content{z-index:1}.exam_skin_wood .springOscillator_wrapper .spolr_ntm_nor_right{margin-left:-2.5em}.exam_skin_wood .springOscillator_wrapper .spolr_ui_tips_box{z-index:2}.exam_skin_wood .springOscillator_pop_hd{margin-bottom:-.5em}.exam_skin_wood .springOscillator_pop_bd{height:29em}.exam_skin_wood .springOscillator_wrapper .spolr_ui_tips_hand{z-index:2}.exam_skin_wood .springOscillator_wrapper .spolr_ui_tips_box .spolr_ui_tips_box_txt{min-width:18em}.exam_skin_wood .springOscillator_wrapper .spolr_ui_tips_hand{margin-top:2.7em}.com_tooldiolag_student .exam_skin_wood .springOscillator_wrapper .springOscillator_main_right_menu .spolr_menu_item .spolr_ntm_txt_i{font-size:1.2em}.com_tooldiolag_student .exam_skin_wood .springOscillator_pop_hd .uibox_txt .spolr_ntm_txt_i{font-size:1.25em;line-height:1.8}.com_tooldiolag_student .exam_skin_wood .springOscillator_wrapper .springOscillator_cycle_hd .spolr_cycle_list .uibox_txt .ui-txt-Rm{font-size:1em}.com_tooldiolag_student .exam_skin_wood .springOscillator_pop_hd .spolr_ntm_txt_ajust{margin-top:-.25em}.exam_skin_wood .springOscillator_wrapper .springOscillator_cycle_hd .spolr_cycle_list .uibox_txt .ui-txt-Rm{font-size:1.1em}.exam_skin_wood .springOscillator_wrapper{overflow:hidden}.springOscillator_wrapper .spolr_analysis_anime_a,.springOscillator_wrapper .spolr_analysis_anime_f,.springOscillator_wrapper .spolr_analysis_anime_x{overflow:hidden}]]></css><view><![CDATA[<div class="exam_skin_wood"><div class="springOscillator_wrapper @@studentClassName"><div class="springOscillator_main"><div class="springOscillator_main_bd spolr_show_analysis"><div class="springOscillator_tool_box"><div class="springOscillator_tool_btn_box"><div class="springOscillator_tool_paper _js_xt_paper"></div><a class="com_btns btns-primary spolr_ntm_nor_left _js_mleft" href="javascript:;"><span class="btns-primary-txt spolr_ntm_txt_i">M'</span><div class="spolr_line _js_mleft_line"></div></a><a class="com_btns btns-primary spolr_ntm_nor_mid _js_omid" href="javascript:;"><span class="btns-primary-txt spolr_ntm_txt_i">O</span><div class="spolr_line"></div></a><a class="com_btns btns-primary spolr_ntm_nor_right _js_mright" href="javascript:;"><span class="btns-primary-txt spolr_ntm_txt_i">M</span><div class="spolr_line _js_mright_line"></div></a><div class="spolr_analysis_animation_box"><div class="spolr_analysis_anime_x"></div><div class="spolr_analysis_anime_f" style=""></div><div class="spolr_analysis_anime_a" style=""></div><div class="spolr_analysis_e_line"><div class="spolr_analysis_e_line_width" style="width: 2%"></div><span class="spolr_analysis_e_line_text spolr_et_left">E<i>k</i></span> <span class="spolr_analysis_e_line_text spolr_et_right">E<i>p</i></span></div><div class="spolr_analysis_anime_v"><span class="anime_x_line"></span> <span class="anime_x_arrow"></span></div></div></div><div class="springOscillator_tool_3d _js_so_view"><div class="_js_virtual_ball"></div></div><div class="spolr_ui_tips_box _js_tips_box"><div class="spolr_ui_tips_box_bg"></div><div class="spolr_ui_tips_box_txt"><span class="_js_txt">拖动小球一段距离松手，可让振子振动起来哦。</span></div></div><div class="spolr_ui_tips_hand hide_dom _js_tips_hand"></div><div class="spolr_ui_txt_explanation"><div class="spolr_ui_txt_explanation_list"><div class="txt_explanation_list"><span class="spolr_ntm_txt spolr_ntm_txt_sp"><span class="spolr_ntm_txt_i">M'</span> : </span><span class="spolr_ntm_txt _js_left">左最大位移</span></div></div><div class="spolr_ui_txt_explanation_list"><div class="txt_explanation_list"><span class="spolr_ntm_txt spolr_ntm_txt_sp"><span class="spolr_ntm_txt_i">O</span> : </span><span class="spolr_ntm_txt _js_middle">平衡位置</span></div></div><div class="spolr_ui_txt_explanation_list"><div class="txt_explanation_list"><span class="spolr_ntm_txt spolr_ntm_txt_sp"><span class="spolr_ntm_txt_i">M</span> : </span><span class="spolr_ntm_txt _js_right">右最大位移</span></div></div></div></div><div class="springOscillator_cycle_table"><div class="springOscillator_cycle_title"><span class="uibox_txt">全<br>振<br>动<br>记<br>录</span></div><div class="springOscillator_cycle_main spolr_show_scrollbar"><ul class="springOscillator_cycle_hd"><li class="spolr_cycle_list _js_cycle_amplitude"><span class="uibox_txt">振幅</span></li><li class="spolr_cycle_list _js_cycle_count"><span class="uibox_txt">全振动次数</span></li><li class="spolr_cycle_list _js_cycle_time"><span class="uibox_txt"><span class="_js_cycle_time_txt">时间</span>/<span class="ui-txt-Rm">s</span></span></li><li class="spolr_cycle_list _js_cycle_period"><span class="uibox_txt"><span class="_js_cycle_period_txt">周期</span><span class="spolr_ntm_txt_i ui-txt-Rm txt-Rm-big">T</span>/<span class="ui-txt-Rm">s</span></span></li></ul><div class="springOscillator_cycle_bd spolr_light_scrollbar"><ul class="springOscillator_cycle_ul _js_cycle_container"><li class="spolr_cycle_li"><div class="spolr_cycle_list"><span class="uibox_txt">1</span></div><div class="spolr_cycle_list"><span class="uibox_txt">5</span></div><div class="spolr_cycle_list"><span class="uibox_txt">5</span></div><div class="spolr_cycle_list"><span class="uibox_txt">5</span></div></li></ul></div></div></div><div class="springOscillator_analysis_box"><ul class="spolr_analysis_hd"><li class="spolr_analysis_list"><span class="uibox_txt"><span class="minw_txt _js_txt_analysis_x">位&nbsp;&nbsp;&nbsp;移</span><span class="spolr_ntm_txt_i biggest">x</span></span><label class="com_applicationset_switch" data-key="x"></label><div class="spolr_analysis_list_line"></div></li><li class="spolr_analysis_list"><span class="uibox_txt"><span class="minw_txt _js_txt_analysis_f">回复力</span><span class="spolr_ntm_txt_i">F</span></span><label class="com_applicationset_switch" data-key="f"></label><div class="spolr_analysis_list_line"></div></li><li class="spolr_analysis_list"><span class="uibox_txt"><span class="minw_txt _js_txt_analysis_a">加速度</span><span class="spolr_ntm_txt_i biggest">a</span></span><label class="com_applicationset_switch" data-key="a"></label><div class="spolr_analysis_list_line"></div></li><li class="spolr_analysis_list"><span class="uibox_txt"><span class="minw_txt _js_txt_analysis_v">速&nbsp;&nbsp;&nbsp;度</span><span class="spolr_ntm_txt_i biggest">v</span></span><label class="com_applicationset_switch" data-key="v"></label><div class="spolr_analysis_list_line"></div></li><li class="spolr_analysis_list"><span class="uibox_txt"><span class="minw_txt _js_txt_analysis_e">能&nbsp;&nbsp;&nbsp;量</span><span class="spolr_ntm_txt_i">E</span></span><label class="com_applicationset_switch" data-key="e"></label><div class="spolr_analysis_list_line"></div></li></ul><div class="spolr_analysis_bd"></div></div></div><div class="springOscillator_main_right_menu"><ul class="spolr_menu_box _js_right_menu_box"><li class="spolr_menu_item spolr_item1 on _js_right_menu_item"><a href="javascript:void(0)" class="spolr_menu_a _js_blur"></a></li><li class="spolr_menu_item spolr_item2 _js_right_menu_item"><a href="javascript:void(0)" class="spolr_menu_a _js_blur"></a> <a class="com_btns btns-primary spolr_item2_btn _js_xt_static_btn" href="javascript:;"><span class="btns-primary-txt _js_txt">显示x-t曲线</span></a></li><li class="spolr_menu_item spolr_item3 _js_right_menu_item"><a href="javascript:void(0)" class="spolr_menu_a"></a></li><li class="spolr_menu_item spolr_item4 _js_right_menu_item"><a href="javascript:void(0)" class="spolr_menu_a"></a></li></ul></div></div><div class="springOscillator_bottom _js_bar_bottom switch_drop_module"><div class="spolar_dropbox_com spolar_drop_amplitude _js_amplitude_drop _js_blur"><span class="spolar_drop_tip"><span class="tip_text">振幅</span> </span><a href="javascript:void(0)" class="spolar_drop_num _js_btn"><span class="num_input"><span class="num_input_text _js_drop_val">10</span> </span><span class="spolar_drop_arrow"></span></a><div class="spolar_drop_numselect clearfix _js_select hide_dom"><div class="spolar_numselect_wrap"></div></div></div><div class="spolar_dropbox_com spolar_drop_frequency _js_playcount_drop _js_blur"><span class="spolar_drop_tip"><span class="tip_text">全振动次数</span> </span><a href="javascript:void(0)" class="spolar_drop_num _js_btn"><span class="num_input"><span class="num_input_text _js_drop_val">10</span> </span><span href="javascript:;" class="spolar_drop_arrow"></span></a><div class="spolar_drop_numselect clearfix _js_select hide_dom"><div class="spolar_numselect_wrap"><a href="javascript:;"><span>1</span> </a><a href="javascript:;"><span>5</span> </a><a href="javascript:;"><span>10</span> </a><a href="javascript:;"><span>15</span> </a><a href="javascript:;"><span>20</span></a></div></div></div><div class="spolr_controlbtn_com spolr_control_amplitude _js_slide_amplitude_parent"><div class="spolar_control_title"><span class="spolar_control_txt">振幅</span></div><ul class="spolar_slide_list _js_slide_amplitude"><b class="_js_slide_b"></b> <ins class="scale_left"></ins> <span class="spolar_item_num spolar_item_num1">0</span> <ins class="scale_mid _js_slid_mid"></ins> <span class="spolar_item_num spolar_item_num2 _js_slide_txt">5</span> <ins class="scale_right"></ins> <span class="spolar_item_num spolar_item_num3">10</span></ul></div><div class="spolr_controlbtn_com spolr_control_frequency _js_slide_frequency_parent"><div class="spolar_control_title"><span class="spolar_control_txt">频率</span></div><ul class="spolar_slide_list _js_slide_frequency"><b class="_js_slide_b"></b> <ins class="scale_left"></ins> <span class="spolar_item_num spolar_item_num1">1/10</span> <ins class="scale_mid _js_slid_mid"></ins> <span class="spolar_item_num spolar_item_num2 _js_slide_txt">4</span> <ins class="scale_right"></ins> <span class="spolar_item_num spolar_item_num3">1</span></ul></div><div class="spolar_com_btns _js_com_btns"><a class="com_btns btns-primary spolr_play_slow _js_play_slow _js_btn_event" href="javascript:;"><span class="btns-primary-txt _js_txt">慢放</span> </a><a class="com_btns btns-primary spolr_play_nor _js_play _js_btn_event" href="javascript:;"><span class="btns-primary-txt _js_txt">播放</span> </a><a class="com_btns btns-primary spolr_play_count _js_total_count _js_btn_event" href="javascript:;"><span class="btns-primary-txt _js_txt">全振动计时</span> </a><a href="javascript:;" class="tool_operate_bar spolr_reset_btn _js_reset _js_btn_event"><span class="tool_operate_imgcnt"><i class="tool_operate_icon tool_reset"></i> </span><span class="tool_operate_text _js_txt">重置</span></a></div></div><div class="springOscillator_pop pop_has_mask hide_dom _js_xt_pop"><div class="springOscillator_pop_main"><div class="springOscillator_pop_hd"><span class="uibox_txt"><span class="spolr_ntm_txt_i">x-t</span> <span class="_js_xt_pop_title spolr_ntm_txt_ajust">曲线</span></span></div><div class="springOscillator_pop_bd _js_xt_pop_bd"></div><div class="springOscillator_pop_ft"><a class="com_btns btns-primary spolr_pop_btn _js_xt_pop_close_btn" href="javascript:;"><span class="btns-primary-txt">关闭</span></a></div></div></div></div></div>]]></view><presenter><![CDATA['use strict';

(function () {

  var i18nModel = null;

  var Presenter = BasicPresenter.extend({
    metaInfo: {
      name: 'SpringOscillator',
      type: '',
      subtype: ''
    },
    /**
     * Presenter的初始化方法
     * @private
     */
    $init: function $init() {
      this._super();
    },
    /**
     * Presenter对外暴露的方法
     */
    _service_: {
      constructor: function constructor(parent) {
        this.parent = parent;
      },
      setLocationProperties: function setLocationProperties(data) {
        i18nModel = data || {};
      },
      getExtendData: function getExtendData() {
        var options = this.parent.spRender.getData();
        return options;
      },
      getQuestionInfo: function getQuestionInfo() {
        return {
          id: '',
          type_code: 'SpringOscillator',
          type_name: this.parent.lang.get('sp_name'),
          url: '',
          noExistStatistics: true,
          noNeedQuizProgress: true
        };
      }
    },
    getService: function getService() {
      this._service_.constructor(this);
      return this._service_;
    },
    /****以下开始为icPlayer的生命周期方法*****/
    run: function run(view, model) {
      if (!this._isWebGLSupported()) return;
      var $deferred = $.Deferred();
      var that = this;
      that.$view = $(view);
      that.model = model;
      that.spRender = null;
      that.lang = null;
      var data = model.__ExtendModel;
      var runTime = this.currentRuntime;
      if (this.currentRuntime === icCreatePlayer.RUNTIME.WEB) {
        runTime = 'web';
      } else if (this.currentRuntime === icCreatePlayer.RUNTIME.TEACHER_PC) {
        runTime = 'pc';
      } else if (this.currentRuntime === icCreatePlayer.RUNTIME.STUDENT_MOBILE) {
        runTime = 'mobile';
      }

      this.$addEventListener('PLAYER.TOOL.MAXIMIZE', PresenterEventType.IC_PLAYER_EVENT, function () {
        if (that.spRender) {
          if (that.isPlaying) {
            that.spRender.restore();
          }
        }
      });

      this.$addEventListener('PLAYER.TOOL.MINIMIZE', PresenterEventType.IC_PLAYER_EVENT, function () {
        if (that.spRender) {
          that.isPlaying = that.spRender.isPlaying();
          that.spRender.save();
        }
      });

      require(['SpringLang', 'SpringControlBar'], function (Lang, ControlBar) {
        that.lang = Lang;
        //初始化语言包
        Lang.extend(i18nModel);
        //初始化语言
        Lang.initI18N(that.$view);
        //渲染视图
        that.spRender = ControlBar.create(that.$view, that.basePath, runTime);
        //that.spRender.setLoggerLevel('debug');
        //window.sp = that.spRender;
        that.spRender.on('play', function name(params) {
          window.player.controller.getEventBus().sendEvent("PLAYER.TOOL.FORBIDE_FULL", {
            id: model.$.unqiueId,
            isForbide: true
          });
        });
        that.spRender.on('pause', function name(params) {
          window.player.controller.getEventBus().sendEvent("PLAYER.TOOL.FORBIDE_FULL", {
            id: model.$.unqiueId,
            isForbide: false
          });
        });
        that.spRender.render(data);
      }).then(function () {
        $deferred.resolve();
      });
      return $deferred.promise();
    },
    pageShow: function pageShow() {},
    pageLeave: function pageLeave() {},
    setBasePath: function setBasePath(path) {
      this.basePath = path;
    },
    destroy: function destroy() {
      if (this.spRender) {
        this.spRender.destroy();
      }
    },
    _isWebGLSupported: function _isWebGLSupported() {
      var contextOptions = {
        stencil: true
      };
      try {
        if (!window.WebGLRenderingContext) {
          return false;
        }

        var canvas = document.createElement('canvas'),
            gl = canvas.getContext('webgl', contextOptions) || canvas.getContext('experimental-webgl', contextOptions);

        return !!(gl && gl.getContextAttributes().stencil);
      } catch (e) {
        return false;
      }
    },
    /**如果不需要处理icplayer的状态恢复事件, 请将以下两个方法删除掉**/
    getState: function getState() {},
    __interface: {
      resizeScreen: function resizeScreen(data) {
        this.spRender.onResize(data.ratio);
        // const $dom = this.$view.find('._js_so_view')
        // this.spRender._springMain._flow.forEach(v => {
        //   v._springComposite._spring._springView.onResizeScreen($dom, data.ratio)
        // })
        // this.spRender._springMain._flow[0]._springComposite._spring._springView.onResizeScreen($dom, data.ratio)
      }
    },
    setState: function setState(state, options) {}
  });

  window.AddonSpringOscillator_create = function () {
    return new Presenter('SpringOscillator');
  };
})();
'use strict';

/**
 * Created by Administrator on 2016/10/24.
 */

define('SpringArrow', ['SpringConfig'], function (Config) {

    var staticHeight = 50;
    var staticWidth = 33;
    var Arrow = {
        _scale: 1,
        _direction: 'right',
        create: function create(direction) {
            var ins = Object.create(this);
            ins._direction = direction || 'right';
            return ins;
        },
        draw: function draw($container) {
            var width = $container.width();
            var height = $container.height();
            this._width = width;
            //按实际大小渲染容器
            this._stage = new Konva.Stage({
                container: $container[0],
                width: width,
                height: height
            });
            var scale = height / staticHeight;
            this._scale = scale;
            //进行缩放
            this._stage.scale({
                x: scale,
                y: scale
            });

            this._layer = new Konva.Layer();

            //内部坐标按高度447来绘制
            this._drawArrow(width);

            //绘制完成后，缩放为目前的宽高值
            this._stage.add(this._layer);
        },
        scale: function scale(ratio) {
            // this.render(container);
            var scale = this._stage.getScaleX() * ratio;
            //进行缩放
            this._stage.scale({
                x: scale,
                y: scale
            });

            this._stage.setWidth(this._stage.getWidth() * ratio);
            this._stage.setHeight(this._stage.getHeight() * ratio);

            this._stage.draw();
        },
        getArrowWidth: function getArrowWidth() {
            return staticWidth * this._stage.getScaleX();
        },
        redraw: function redraw(width, dis) {
            //绘制虚线
            this._layer.destroyChildren();
            this._drawArrow(width / this._stage.getScaleX(), dis);
            this._layer.draw();
        },
        /**
         *
         * @param width 总长度
         * @param dis 所在方向 大于0在右侧，小于0在左侧
         */
        _drawArrow: function _drawArrow(width, dis) {
            var totalWidth = this._width / this._stage.getScaleX();
            var insideHeight = 48;
            var arrowWidth = staticWidth;
            var qh = insideHeight / 4;
            var rectWidth = width - arrowWidth;
            if (rectWidth < 0) {
                rectWidth = 0;
            }
            //中心宽高坐标
            var middle = totalWidth / 2;
            var middleHeight = insideHeight / 2;

            //添加一像素偏移，让反行和箭头结合没有缝隙
            var sub = 1;
            if (arrowWidth > width) {
                arrowWidth = width;
                sub = 0;
            }
            var rx = middle;
            var ry = qh;
            var polyPos = [];

            if (this._direction === 'right') {
                if (dis >= 0) {
                    rx = middle;
                    ry = qh;
                    var start = rectWidth - sub + rx;
                    polyPos[0] = start;
                    polyPos[1] = 0;
                    polyPos[2] = start + arrowWidth;
                    polyPos[3] = middleHeight;
                    polyPos[4] = start;
                    polyPos[5] = insideHeight;
                } else {
                    rx = middle - rectWidth;
                    ry = qh;
                    var start = sub + rx;
                    polyPos[0] = start;
                    polyPos[1] = 0;
                    polyPos[2] = start - arrowWidth;
                    polyPos[3] = middleHeight;
                    polyPos[4] = start;
                    polyPos[5] = insideHeight;
                }
            } else {
                if (dis >= 0) {
                    var start = middle;
                    polyPos[0] = start;
                    polyPos[1] = middleHeight;
                    polyPos[2] = start + arrowWidth;
                    polyPos[3] = 0;
                    polyPos[4] = start + arrowWidth;
                    polyPos[5] = insideHeight;
                    rx = start + arrowWidth - sub;
                } else {
                    var start = middle;
                    polyPos[0] = start;
                    polyPos[1] = middleHeight;
                    polyPos[2] = start - arrowWidth;
                    polyPos[3] = 0;
                    polyPos[4] = start - arrowWidth;
                    polyPos[5] = insideHeight;
                    rx = middle - rectWidth - arrowWidth + sub;
                }
            }
            var rect = new Konva.Rect({
                x: rx,
                y: ry,
                width: rectWidth,
                height: middleHeight,
                fill: '#24aaff',
                strokeWidth: 0
            });
            var poly = new Konva.Line({
                points: polyPos,
                fill: '#24aaff',
                strokeWidth: 0,
                closed: true
            });

            this._layer.add(rect);
            this._layer.add(poly);
        }
    };
    return Arrow;
});
'use strict';

/**
 * Created by ylf on 2016/11/2.
 */
define('SpringConfig', [], function () {

    var config = {
        PIXELS_PER_MS: 0.095, //每毫秒运动像素
        MENU_ITEM_UUID: 'menu_item_uuid', //每毫秒运动像素
        SLOW_PERIOD: 12000 //每毫秒运动像素
    };

    return config;
});
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

define('SpringControlBar', ['SpringMain', 'SpringLang', 'SpringUtils', 'SpringEventBus', 'SpringLogger', 'SpringConfig'], function (SpringMain, Lang, Utils, EventBus, Logger, Config) {

    //默认值
    var DefaultOption = {
        maxPeriod: 10000,
        minPeriod: 100,
        periodPercent: 1 / (1 / 4) / 10, //1/4之一频率为默认值
        periodPercentTxt: '1/4', //1/4之一频率为默认值
        amplitudePercent: 0.6,
        thirdAmplitudePercent: 0.5,
        periodCount: 1
    };

    var DataAdapter = {
        adapter: function adapter(data) {
            //做数据的版本适配
            if (data && data.data) {
                return data.data;
            } else {
                return null;
            }
        }
    };

    var DATA_VERSION = '1.0';

    var Slide = {
        _frequency: null,
        _amplitude: null,
        _springMain: null,
        create: function create($view, springMain) {
            var ins = Object.create(this);
            ins._springMain = springMain;
            ins.initData($view);
            ins.initView($view);
            return ins;
        },
        initData: function initData($view) {
            this._frequency = { //频率滚动条
                main: $view.find('._js_slide_frequency'),
                mid: $view.find('._js_slide_frequency ._js_slid_mid'),
                txt: $view.find('._js_slide_frequency ._js_slide_txt'),
                btn: $view.find('._js_slide_frequency ._js_slide_b'),
                range: [],
                rangeNum: [1 / 10, 1 / 9, 1 / 8, 1 / 7, 1 / 6, 1 / 5, 1 / 4, 1 / 3, 1 / 2, 1],
                rangeTxt: ['1/10', '1/9', '1/8', '1/7', '1/6', '1/5', '1/4', '1/3', '1/2', '1']
            };

            this._amplitude = { //振幅拖动条
                main: $view.find('._js_slide_amplitude'),
                mid: $view.find('._js_slide_amplitude ._js_slid_mid'),
                txt: $view.find('._js_slide_amplitude ._js_slide_txt'),
                btn: $view.find('._js_slide_amplitude ._js_slide_b'),
                range: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
            };

            //计算百分比
            for (var i = 0; i < this._frequency.rangeNum.length; i++) {
                var obj = 100 / (this._frequency.rangeNum.length - 1) * i / 10;
                this._frequency.range.push(obj);
            }

            this._btnSlideEvent('_frequency');
            this._btnSlideEvent('_amplitude');
        },
        initView: function initView() {
            this._updateSlide('_amplitude', DefaultOption.amplitudePercent * 100, DefaultOption.amplitudePercent * 10);
            var cssPercent = 100 / (this._frequency.rangeNum.length - 1) * this._frequency.rangeTxt.indexOf(DefaultOption.periodPercentTxt);
            this._updateSlide('_frequency', cssPercent, DefaultOption.periodPercentTxt);
        },
        _autoPercent: function _autoPercent(ranges, cssPercent) {
            var min = 100;
            var j = 0;
            for (var i = 0; i < ranges.length; i++) {
                var range = ranges[i];
                var sub = Math.abs(range * 10 - cssPercent);
                if (sub < min) {
                    min = sub;
                    j = i;
                }
            }
            return j;
        },
        _btnSlideEvent: function _btnSlideEvent(type) {
            var that = this;
            var cls = type == '_frequency' ? '_js_slide_frequency' : '_js_slide_amplitude';
            var slide = this[type];
            slide.main.on('mousedown touchstart', function (e) {
                //初始值
                var slideOffset = slide.main.offset();
                var totalWidth = slide.main.width();
                var scale = Utils.getScale(slide.main[0]);
                var percent = 0;

                //更新布局
                var updatePos = function updatePos(e) {
                    //判断由自己内部触发
                    if (!$(e.target).closest('.' + cls + '_parent')[0]) {
                        return;
                    }

                    var pos = Utils.getPagePos(e, scale);
                    var cssPercent = Math.round((pos.x - slideOffset.left / scale) / totalWidth * 100);
                    if (cssPercent > 100) {
                        cssPercent = 100;
                    }
                    if (cssPercent < 0) {
                        cssPercent = 0;
                    }

                    //自动吸附
                    var j = that._autoPercent(slide.range, cssPercent);
                    cssPercent = slide.range[j] * 10;

                    var txt = cssPercent / 10;
                    if (cls == '_js_slide_frequency') {
                        txt = slide.rangeTxt[j].toString();
                    }
                    that._updateSlide(type, cssPercent, txt);
                    percent = cssPercent;
                    if (cls == '_js_slide_frequency') {
                        percent = slide.rangeNum[j] * 10;
                    }
                };

                slide.btn.addClass('ui_btn_active');
                updatePos(e);

                $(document.body).on('mousemove.sd touchmove.sd', function (e) {
                    updatePos(e);
                });
                //释放
                $(document.body).on('mouseup.sd mouseleave.sd touchend.sd touchcancel.sd', function (e) {
                    updatePos(e);
                    if (cls === '_js_slide_frequency') {
                        //慢放中不能修改周期
                        if (!that._springMain.getSpring().isSlowPlaying()) {
                            that._springMain.changePeriod(that.getPeriodPercent(percent));
                        } else {
                            //if (that._springMain.getCurrentIndex() === 1) {
                            that._springMain.getSpring().changePeriodSlowMode(that.getPeriodPercent(percent));
                            //}
                        }
                    } else {
                        that._springMain.changeAmplitude(percent / 100);
                    }
                    $(document.body).off('mouseup.sd mouseleave.sd touchend.sd touchcancel.sd mousemove.sd touchmove.sd');
                    slide.btn.removeClass('ui_btn_active');
                });
            });
        },
        getPeriodPercent: function getPeriodPercent(percent) {
            return 1 / (percent / 10) / (DefaultOption.maxPeriod / 1000);
        },
        updateAmplitude: function updateAmplitude(cssPercent, txt) {
            this._updateSlide('_amplitude', cssPercent, txt);
        },
        _updateSlide: function _updateSlide(cls, cssPercent, txt) {
            var slide = this[cls];
            slide.mid.css('left', cssPercent + '%');
            slide.txt.css('left', cssPercent + '%');
            slide.btn.css('left', cssPercent + '%');
            slide.txt.text(txt);
        },
        renderData: function renderData(amplitudePercentTxt, periodPercentTxt) {
            this._updateSlide('_amplitude', amplitudePercentTxt * 10, amplitudePercentTxt);
            var cssPercent = 100 / (this._frequency.rangeNum.length - 1) * this._frequency.rangeTxt.indexOf(periodPercentTxt);
            this._updateSlide('_frequency', cssPercent, periodPercentTxt);
        },
        getPeriodPercentByTxt: function getPeriodPercentByTxt(periodPercentTxt) {
            var periodIndex = this._frequency.rangeTxt.indexOf(periodPercentTxt);
            var frequency = this._frequency.rangeNum[periodIndex];
            return this.getPeriodPercent(frequency);
        },
        getCurrentPeriodPercent: function getCurrentPeriodPercent() {
            return this.getPeriodPercentByTxt(this.getFrequencyTxt());
        },
        getFrequencyTxt: function getFrequencyTxt() {
            return this['_frequency'].txt.text();
        },
        getAmplitudeTxt: function getAmplitudeTxt() {
            return this['_amplitude'].txt.text();
        },
        destroy: function destroy() {
            $(document.body).off('mouseup.sd mouseleave.sd touchend.sd touchcancel.sd mousemove.sd touchmove.sd');
        }
    };

    //底部栏控制区域
    var ControlBar = {
        _eventBus: null,
        _springMain: null,
        _slide: null,
        create: function create($view, basePath, runTime) {
            var ins = Object.create(this);
            ins._eventBus = EventBus.create();
            DefaultOption.basePath = basePath;
            DefaultOption.runTime = runTime;
            ins._springMain = SpringMain.create($view, ins._eventBus, DefaultOption);
            ins._slide = Slide.create($view, ins._springMain);
            ins._findView($view);
            ins._initView();
            ins._bindDomEvent();
            ins._bindGlobalEvent($view);
            ins._bindSpringEvent();
            return ins;
        },
        render: function render(data) {
            //做数据的版本兼容处理
            data = DataAdapter.adapter(data);

            this._$playCountDropSelect.attr('uuid', Utils.getUuid());
            this._$amplitudeDropSelect.attr('uuid', Utils.getUuid());

            this._$rightMenuBox.find('._js_blur').attr('uuid', Config.MENU_ITEM_UUID);

            if (data) {
                this._initData(data);
            } else {
                this._springMain.render();
            }
        },
        _initData: function _initData(data) {
            var that = this;

            if (!data || _typeof(data.index) == (typeof undefined === 'undefined' ? 'undefined' : _typeof(undefined))) {
                return;
            }

            //初始化右侧按钮激活
            this._initMenu(data.index);

            //初始化渲染四个模块
            this._springMain.render(data);

            //渲染第三模块
            if (data.index === 2) {
                setDropFrequencyVal.call(this, data.playCount);
                setDropAmplitudeVal.call(this, data.amplitudePercentTxt);
                this._$barBottom.addClass('switch_drop_module');
            } else {
                //渲染拖动条
                this._slide.renderData(data.amplitudePercentTxt, data.periodPercentTxt);
                this._$barBottom.removeClass('switch_drop_module');
                //第三个模块周期固定，这里不做处理
            }

            //延迟200ms开始同步，防止出现渲染卡顿
            setTimeout(function () {
                var spring = data.composite.spring;
                if (spring.isPlaying) {
                    if (spring.isSlowPlaying) {
                        that._$playSlow.trigger('click');
                    } else if (spring.vibrationCount > 0) {
                        that._$playCount.trigger('click');
                    } else {
                        that._$play.trigger('click');
                    }
                }
            }, 200);
        },
        _initView: function _initView() {

            this._$barBottom.removeClass('switch_drop_module');

            this._slide.initView();
            setDropAmplitudeVal.call(this, DefaultOption.thirdAmplitudePercent * 10);
            setDropFrequencyVal.call(this, DefaultOption.periodCount);
            //this._$reset.addClass('click_disabled');
            this._$playSlow.removeClass('click_disabled');
            this._$playCount.removeClass('click_disabled');
            this._$playCountDropBtn.removeClass('click_disabled');
            this._$amplitudeDropBtn.removeClass('click_disabled');
        },
        _findView: function _findView($view) {

            //右侧菜单
            this._$rightMenuBox = $view.find('._js_right_menu_box');
            //播放按钮
            this._$play = $view.find('._js_play');
            //慢放按钮
            this._$playSlow = $view.find('._js_play_slow');
            //全振动计时
            this._$playCount = $view.find('._js_total_count');
            //重置按钮
            this._$reset = $view.find('._js_reset');
            //底部工具栏
            this._$barBottom = $view.find('._js_bar_bottom');

            this._$btnContainer = $view.find('._js_com_btns');

            //下拉频率和振幅控件
            this._$playCountDrop = $view.find('._js_playcount_drop');
            this._$playCountDropBtn = $view.find('._js_playcount_drop ._js_btn');
            this._$amplitudeDrop = $view.find('._js_amplitude_drop');
            this._$amplitudeDropBtn = $view.find('._js_amplitude_drop ._js_btn');
            this._$amplitudeDropVal = $view.find('._js_amplitude_drop ._js_drop_val');
            this._$playCountDropVal = $view.find('._js_playcount_drop ._js_drop_val');

            //下拉弹出框
            this._$playCountDropSelect = $view.find('._js_playcount_drop ._js_select');
            this._$amplitudeDropSelect = $view.find('._js_amplitude_drop ._js_select');

            //防止格式化出现的a标签空格导致样式异常
            var ampSelectHtml = '';
            for (var i = 0; i < 10; i++) {
                ampSelectHtml += '<a href="javascript:;"><span>' + (i + 1) + '</span></a>';
                if (i === 4) {
                    ampSelectHtml += '</br>';
                }
            }
            this._$amplitudeDropSelect.find('.spolar_numselect_wrap').html(ampSelectHtml);

            this._$playCountDrop.attr('uuid', Utils.getUuid());
            this._$amplitudeDrop.attr('uuid', Utils.getUuid());
        },
        _bindDomEvent: function _bindDomEvent() {
            var that = this;

            //右侧菜单事件绑定
            this._$rightMenuBox.on('click', function (e) {
                var $target = $(e.target).closest('._js_right_menu_item');

                if ($target.length <= 0 || $target.hasClass('on')) {
                    //隐藏提示框
                    that._springMain.setTipVisible(false);
                    return;
                }
                that.changeFlow($target.index());
            });

            //底部按钮事件绑定
            this._$btnContainer.on('click', function (e) {
                var $target = $(e.target).closest('._js_btn_event');
                if ($target.length <= 0 || $target.hasClass('click_disabled')) {
                    return;
                }
                if ($target.hasClass('_js_play')) {
                    //播放
                    if ($target.find('._js_txt').text() === Lang.get('sp_play')) {
                        that._springMain.changePeriod(that._slide.getCurrentPeriodPercent() / 10);
                        that._springMain.play();
                    } else {
                        that._springMain.pause();
                    }
                } else if ($target.hasClass('_js_play_slow')) {
                    //慢放
                    if (that._$playSlow.find('._js_txt').text() === Lang.get('sp_slow')) {
                        that._springMain.slow();
                    } else {
                        that._springMain.pause();
                    }
                } else if ($target.hasClass('_js_total_count')) {
                    //全振动计时
                    that._$reset.removeClass('click_disabled');
                    that._$playSlow.addClass('click_disabled');
                    that._$playCount.addClass('click_disabled');
                    that._$playCountDropBtn.addClass('click_disabled');
                    that._$amplitudeDropBtn.addClass('click_disabled');
                    that._springMain.play(parseInt(that._$playCountDropVal.text()));
                } else if ($target.hasClass('_js_reset')) {
                    //重置
                    that._reset();
                    that._springMain.reset();
                    that._updateResetAble(false);
                }
            });

            //振幅按钮
            this._$amplitudeDropBtn.on('click', function () {
                if (that._$playCount.hasClass('click_disabled')) {
                    return;
                }
                var visible = that._$amplitudeDropSelect.hasClass('hide_dom');
                setAmplitudeDropSelectVisible.call(that, visible);
            });

            //全振动次数按钮
            this._$playCountDropBtn.on('click', function () {
                if (that._$playCount.hasClass('click_disabled')) {
                    return;
                }
                var visible = that._$playCountDropSelect.hasClass('hide_dom');
                setFrequencyDropSelectVisible.call(that, visible);
            });

            //全振动下拉框
            this._$playCountDropSelect.on('click', function (e) {
                var $target = $(e.target);
                if ($target[0].tagName.toLocaleLowerCase() !== 'a') {
                    $target = $target.closest('._js_playcount_drop ._js_select a');
                }
                if ($target.length > 0) {
                    setFrequencyDropSelectVisible.call(that, false);
                    var val = parseInt($target.find('span').text());
                    setDropFrequencyVal.call(that, val);
                    //触发重置
                    that._eventBus.trigger('resetable', that._springMain.getSpring().getResetAble());
                }
            });

            //振幅下拉框
            this._$amplitudeDropSelect.on('click', function (e) {
                var $target = $(e.target);
                if ($target[0].tagName.toLocaleLowerCase() !== 'a') {
                    $target = $target.closest('._js_amplitude_drop ._js_select a');
                }
                if ($target.length > 0) {
                    setAmplitudeDropSelectVisible.call(that, false);
                    var val = parseInt($target.find('span').text());
                    setDropAmplitudeVal.call(that, val);
                    that._springMain.getSpring().changeAmplitude(val / 10);
                }
            });

            //失去焦点，隐藏控件
            this._eventBus.on('domblur', function (id) {
                if (id !== that._$amplitudeDrop.attr('uuid')) {
                    setAmplitudeDropSelectVisible.call(that, false);
                }
                if (id !== that._$playCountDrop.attr('uuid')) {
                    setFrequencyDropSelectVisible.call(that, false);
                }
            });
        },
        _updateBtnTxt: function _updateBtnTxt() {
            if (this._springMain.isSlowPlaying()) {
                this._$play.find('._js_txt').text(Lang.get('sp_play'));
                this._$playSlow.find('._js_txt').text(Lang.get('sp_pause'));
            } else if (this._springMain.isPlaying()) {
                this._$play.find('._js_txt').text(Lang.get('sp_pause'));
                this._$playSlow.find('._js_txt').text(Lang.get('sp_slow'));
            } else {
                this._$play.find('._js_txt').text(Lang.get('sp_play'));
                this._$playSlow.find('._js_txt').text(Lang.get('sp_slow'));
            }
        },
        _updateResetAble: function _updateResetAble(able) {
            if (able || this._resetAble()) {
                this._$reset.removeClass('click_disabled');
            } else {
                this._$reset.addClass('click_disabled');
            }
        },
        _bindSpringEvent: function _bindSpringEvent() {
            this._springMain.on('play', function () {
                this._updateBtnTxt();
            }, this);
            this._springMain.on('pause', function () {
                this._$playSlow.removeClass('click_disabled');
                this._$playCount.removeClass('click_disabled');
                this._$playCountDropBtn.removeClass('click_disabled');
                this._$amplitudeDropBtn.removeClass('click_disabled');
                this._updateBtnTxt();
            }, this);
            this._springMain.on('resetable', function (id, able) {
                this._updateResetAble(able);
            }, this);
            this._springMain.on('amplitudechange', function (id, amplitude, percent) {
                this._slide.updateAmplitude(percent, percent / 10);
            }, this);
            this._springMain.on('periodchange', function (id, amplitude, percent) {}, this);
        },
        on: function on(type, callback, domain) {
            this._springMain.on(type, callback, domain);
        },
        off: function off(type, callback, domain) {
            this._springMain.off(type, callback, domain);
        },
        onResize: function onResize(ratio) {
            // this._eventBus.trigger('ratio', ratio);
            this._eventBus.trigger('ratioStart', this._eventRatioStart);
            this._springMain.scale(ratio);
            this._eventBus.trigger('ratioEnd', this._eventRatioEnd);
        },
        _initMenu: function _initMenu(index) {
            var $menuFlow = this._$rightMenuBox.find('li').eq(index);
            this._$rightMenuBox.find('li').removeClass('on');
            $menuFlow.addClass('on');
            if (index === 2) {
                this._$barBottom.addClass('switch_drop_module');
            } else {
                this._$barBottom.removeClass('switch_drop_module');
            }
        },
        changeFlow: function changeFlow(index) {
            this._reset(index);
            this._springMain.changeFlow(index);
        },
        _reset: function _reset(index) {
            if ((typeof index === 'undefined' ? 'undefined' : _typeof(index)) === (typeof undefined === 'undefined' ? 'undefined' : _typeof(undefined))) {
                index = this._springMain.getCurrentIndex();
            }
            this._initView();
            this._initMenu(index);
        },
        _resetAble: function _resetAble() {
            //控制栏不等于默认值，可重置
            if (parseInt(this._$amplitudeDropVal.text()) !== DefaultOption.thirdAmplitudePercent * 10) {
                return true;
            }
            if (parseInt(this._$playCountDropVal.text()) !== DefaultOption.periodCount) {
                return true;
            }
            if (this._springMain.getCurrentFlow().getResetAble()) {
                return true;
            }
            return false;
        },
        _bindGlobalEvent: function _bindGlobalEvent($view) {
            var that = this;
            var handler = function handler(e) {
                var $target = $(e.target);
                var blur = $target.closest('._js_blur');
                var id = blur.attr('uuid');
                that._eventBus.trigger('domblur', id || '');
            };
            $view.on('click.sp', function (e) {
                handler(e);
            });
        },
        getData: function getData() {
            var data = {
                ver: DATA_VERSION,
                data: this._springMain.getData()
            };
            data.data.playCount = parseInt(this._$playCountDropVal.text());
            data.data.periodPercentTxt = this._slide.getFrequencyTxt();
            if (this._springMain.getCurrentIndex() === 2) {
                data.data.amplitudePercentTxt = this._$amplitudeDropVal.text();
            } else {
                data.data.amplitudePercentTxt = this._slide.getAmplitudeTxt();
            }
            return data;
        },
        isPlaying: function isPlaying() {
            return this._springMain.isPlaying();
        },
        play: function play() {
            this._springMain.play();
        },
        pause: function pause() {
            this._springMain.pause();
        },
        save: function save() {
            this._springMain.getSpring().hold();
        },
        restore: function restore() {
            this._springMain.getSpring().restore();
        },
        setLoggerLevel: function setLoggerLevel(level) {
            Logger.setLevel(level);
        },
        destroy: function destroy() {
            this._springMain.destroy();
            this._slide.destroy();
            $(document.body).off('click.sp');
        }

    };

    var setDropAmplitudeVal = function setDropAmplitudeVal(txt) {
        this._$amplitudeDropVal.text(txt);
        var txt = parseInt(txt);
        var $children = this._$amplitudeDropSelect.find('.spolar_numselect_wrap a');
        $children.removeClass('ui_btn_active');
        $children.eq(txt - 1).addClass('ui_btn_active');
    };

    var setDropFrequencyVal = function setDropFrequencyVal(txt) {
        this._$playCountDropVal.text(txt);
        var txt = Math.round(parseInt(txt) / 5);
        var $children = this._$playCountDropSelect.find('.spolar_numselect_wrap').children();
        $children.removeClass('ui_btn_active');
        $children.eq(txt).addClass('ui_btn_active');
    };

    //隐藏或现实振幅下拉框
    var setAmplitudeDropSelectVisible = function setAmplitudeDropSelectVisible(visible) {
        if (visible) {
            this._$amplitudeDropSelect.removeClass('hide_dom');
        } else {
            this._$amplitudeDropSelect.addClass('hide_dom');
        }
        if (visible) {
            this._$amplitudeDropBtn.addClass('ui_open');
        } else {
            this._$amplitudeDropBtn.removeClass('ui_open');
        }
    };

    //隐藏或显示振动次数下拉框
    var setFrequencyDropSelectVisible = function setFrequencyDropSelectVisible(visible) {
        if (visible) {
            this._$playCountDropSelect.removeClass('hide_dom');
        } else {
            this._$playCountDropSelect.addClass('hide_dom');
        }
        if (visible) {
            this._$playCountDropBtn.addClass('ui_open');
        } else {
            this._$playCountDropBtn.removeClass('ui_open');
        }
    };

    return ControlBar;
});
'use strict';

/**
 * Created by ylf on 2016/7/22.
 * 事件管理对象
 */
define('SpringEventBus', ['SpringLogger'], function (Logger) {

    var EventBus = {
        _eventHandler: null,
        create: function create() {
            var instance = Object.create(this);
            instance._eventHandler = {};
            return instance;
        },
        trigger: function trigger() {
            //将参数转换为数组
            var arg = Array.prototype.slice.apply(arguments, [0]);
            //取第一个，并从数组中删除，事件key
            var type = arg.shift();
            if (!this._eventHandler || !this._eventHandler[type]) {
                return false;
            }
            var handlers = this._eventHandler[type];
            handlers.forEach(function (handler) {
                handler.cb.apply(handler.domain || this, arg);
                Logger.debug('event-trigger', type, arg.toString());
            });
            return true;
        },
        on: function on(type, callback, domain) {
            if (!this._eventHandler[type]) {
                this._eventHandler[type] = [];
            }
            this._eventHandler[type].push({ cb: callback, domain: domain });
            return true;
        },
        off: function off(type, callback, domain) {
            var handlers = this._eventHandler[type];
            if (handlers && handlers.length > 0) {
                var len = handlers.length;
                var handler;
                for (var i = 0; i < len; i++) {
                    handler = handlers[i];
                    if (handler && callback === handler.cb) {
                        if (domain && domain !== handler.domain) {
                            continue;
                        }
                        handlers.splice(i, 1);
                        i--;
                        len--;
                    }
                }
            }
            if (handlers && handlers.length === 0) {
                delete this._eventHandler[type];
            }
        }
    };
    return EventBus;
});
'use strict';

/**
 * Created by ylf on 2016/10/24.
 */

define('SpringFlow1', ['SpringController', 'SpringLogger'], function (Spring, Logger) {

    var Flow1 = {
        _springComposite: null,
        _eventBus: null,
        create: function create(eventBus, $view, springComposite) {
            var ins = Object.create(this);
            ins._eventBus = eventBus;
            ins._springComposite = springComposite;
            ins.findView($view);
            return ins;
        },
        findView: function findView($view) {},
        //重置
        reset: function reset() {
            this._springComposite.setDragAble(true);
        },
        //获取焦点，这边绑定事件
        focus: function focus() {
            var spring = this._springComposite.getSpring();
            this._springComposite.setTipVisible(true);
            this._springComposite.setDragAble(true);
        },
        scale: function scale(ratio) {},
        //初始化渲染
        render: function render(focus, data) {},
        //失去焦点，失去焦点后，需要把事件移除
        blur: function blur() {},
        getResetAble: function getResetAble() {
            return false;
        },
        //销毁，移除事件
        destroy: function destroy() {}
    };
    return Flow1;
});
'use strict';

/**
 * Created by ylf on 2016/10/24.
 */

define('SpringFlow2', ['SpringController', 'SpringLogger', 'SpringXTDynamic', 'SpringXTStatic', 'SpringFormula'], function (Spring, Logger, XTDynamic, XTStatic, Formula) {

    var Flow2 = {
        _springComposite: null,
        _$flowView: null,
        _staticFormula: null,
        _xtStatic: null,
        _staticStartFrameTime: 0,
        _eventBus: null,
        create: function create(eventBus, $view, springComposite) {
            var ins = Object.create(this);
            ins._springComposite = springComposite;
            ins._eventBus = eventBus;
            ins._proxy();
            ins._findView($view);
            ins._bindDomEvent();
            ins._initView();
            return ins;
        },
        _proxy: function _proxy() {
            this._eventDisplacementUpdate = $.proxy(this._eventDisplacementUpdate, this);
            this._eventFormulaChange = $.proxy(this._eventFormulaChange, this);
            this._eventPlay = $.proxy(this._eventPlay, this);
            this._eventPosChange = $.proxy(this._eventPosChange, this);
            this._eventPause = $.proxy(this._eventPause, this);
            this._eventRatioStart = $.proxy(this._eventRatioStart, this);
            this._eventRatioEnd = $.proxy(this._eventRatioEnd, this);
        },
        _eventRatioStart: function _eventRatioStart(params) {
            this._ratioStart = true;
        },
        _eventRatioEnd: function _eventRatioEnd(params) {
            this._ratioStart = false;
        },
        _findView: function _findView($view) {
            //白纸
            this._$paper = $view.find('._js_xt_paper');
            //弹簧容器
            this._$so = $view.find('._js_so_view');
            //显示xt按钮
            this._$xtStaticBtn = $view.find('._js_xt_static_btn');
            //xt图弹窗
            this._$xtStaticPop = $view.find('._js_xt_pop');
            //xt图容器
            this._$xtStaticPopBd = $view.find('._js_xt_pop_bd');
            //xt图关闭按钮
            this._$xtStaticPopCloseBtn = $view.find('._js_xt_pop_close_btn');
        },
        render: function render(focus, data) {
            this._initView();
            if (data) {
                var maxAmplitude = this._springComposite.getSpring().getOption().maxAmplitude;
                if (data.staticFormula) {
                    var amplitude = data.staticFormula.amplitudePercent * maxAmplitude;
                    var currentFormula = Formula.create(amplitude, data.staticFormula.period, data.staticFormula.phi, data.staticFormula.startTime, data.staticFormula.endTime);

                    //位置不统一则重新激活,有操作过m,o,m按钮
                    this._xtDynamic.setFormula(currentFormula);
                    //运动总时间
                    this._xtDynamic.setTotalTime(data.staticFormula.totalTime);
                    //公式开始时的时间
                    this._xtDynamic.setStartTotalTime(data.staticFormula.startTotalTime);
                    this._xtDynamic.render(this._$paper);
                    if (!currentFormula.isEmpty()) {
                        this._$xtStaticBtn.removeClass('click_disabled');
                    }
                } else {
                    var fo = this._springComposite.getSpring().getCurrentFormula();
                    this._xtDynamic.setFormula(Formula.create(fo.amplitude, fo.period, fo.phi, fo.startTime, fo.endTime));
                    if (data.totalTime) {
                        this._xtDynamic.setTotalTime(data.totalTime);
                        this._xtDynamic.setStartTotalTime(data.totalTime);
                    }
                    this._xtDynamic.render(this._$paper);
                }
                if (data.showStatic) {
                    this._showStatic();
                }
            }
        },
        _initXtDynamic: function _initXtDynamic() {
            if (!this._xtDynamic) {
                this._$paper.html('');
                this._xtDynamic = XTDynamic.create();
                this._xtDynamic.setMarginTop(this._$so.height() / 2);
            }
            var fo = this._springComposite.getSpring().getCurrentFormula();

            this._xtDynamic.setFormula(Formula.create(fo.amplitude, fo.period, fo.phi, fo.startTime, fo.endTime));
            this._xtDynamic.render(this._$paper);
            this._totalTime = this._xtDynamic.getTotalTime();
        },
        _initView: function _initView() {
            this._$xtStaticBtn.addClass('click_disabled');
            this._initXtDynamic();
        },
        _bindDomEvent: function _bindDomEvent() {
            var that = this;

            this._$xtStaticBtn.on('click', function () {
                if (that._$xtStaticBtn.hasClass('click_disabled')) {
                    return;
                }
                that._showStatic();
            });

            this._$xtStaticPopCloseBtn.on('click', function () {
                that._$xtStaticPop.addClass('hide_dom');
            });
        },
        scale: function scale(ratio) {
            var that = this;
            if (that._xtStatic) {
                that._xtStatic.scale(ratio);
            }
            if (that._xtDynamic) {
                that._xtDynamic.scale(ratio);
            }
        },
        _bindSpringEvent: function _bindSpringEvent() {
            var spring = this._springComposite.getSpring();
            spring.on('play', this._eventPlay);
            spring.on('pause', this._eventPause);
            spring.on('displacementupdate', this._eventDisplacementUpdate);
            spring.on('formulaChange', this._eventFormulaChange);
            spring.on('poschange', this._eventPosChange);
            this._eventBus.on('ratioStart', this._eventRatioStart);
            this._eventBus.on('ratioEnd', this._eventRatioEnd);
        },
        _unBindSpringEvent: function _unBindSpringEvent() {
            var spring = this._springComposite.getSpring();
            spring.off('displacementupdate', this._eventDisplacementUpdate);
            spring.off('formulaChange', this._eventFormulaChange);
            spring.off('play', this._eventPlay);
            spring.off('poschange', this._eventPosChange);
            spring.off('pause', this._eventPause);
            this._eventBus.off('ratioStart', this._eventRatioStart);
            this._eventBus.off('ratioEnd', this._eventRatioEnd);
        },
        _showStatic: function _showStatic() {
            var that = this;
            that._$xtStaticPop.removeClass('hide_dom');
            var formula = $.extend(true, {}, that._xtDynamic.getFormula());
            this._staticStartFrameTime = this._springComposite.getSpring().getStartFrameTime();
            if (!this._xtStatic) {
                this._xtStatic = XTStatic.create(formula, that._springComposite.getSpring().getOption());
                //公式开始偏差初始值
                this._xtStatic.setTraceStart(this._xtDynamic.getTraceSubWidth());
                //当前运动总时长
                this._xtStatic.setTotalTime(this._xtDynamic.getTotalTime());
                this._xtStatic.render(that._$xtStaticPopBd);
            } else {
                this._xtStatic.setFormula(formula);
                this._xtStatic.setTotalTime(this._xtDynamic.getTotalTime());
                this._xtStatic.setTraceStart(this._xtDynamic.getTraceSubWidth());
                this._xtStatic.redraw();
            }
        },
        _eventPlay: function _eventPlay(id, slow) {
            this._totalTime = this._xtDynamic.getTotalTime();
            this._$xtStaticBtn.removeClass('click_disabled');
        },
        _eventPause: function _eventPause() {},
        _eventDisplacementUpdate: function _eventDisplacementUpdate(id, displacement, timeDiff) {
            var slowPlaying = this._springComposite.getSpring().getModel().getIsSlowPlaying();
            var slowPeriod = this._springComposite.getSpring().getModel().getInsidePeriod();
            this._xtDynamic.addEndTimeDiff(timeDiff, slowPlaying, slowPeriod);
            this._xtDynamic.redraw();
        },
        _eventFormulaChange: function _eventFormulaChange(id, formula, type) {
            if (type === 'amplitudechange') {
                var amplitude = formula.amplitude;
                if (amplitude <= 0) {
                    amplitude = 10;
                }
                this._$paper.css('left', -amplitude + 'px');
                this._$paper.css('right', -amplitude + 'px');
            }
            if (!this._ratioStart === true) {
                this._initXtDynamic();
                //非播放中且公式为空，展示静态x-t不可用
                if (!this._springComposite.getSpring().isPlaying()) {
                    if (this._xtDynamic.getFormula().isEmpty()) {
                        this._$xtStaticBtn.addClass('click_disabled');
                    }
                }
            }
        },
        _eventPosChange: function _eventPosChange(id, pos, lastDm, lastDirection) {
            if (!this._springComposite) {
                return;
            }
            if (!this._xtDynamic) {
                this._eventFormulaChange('', this._springComposite.getSpring().getCurrentFormula());
                return;
            }

            if (!this._xtDynamic.isEmpty()) {
                if (lastDm === 0 && pos === 'o' || lastDm === this._springComposite.getSpring().getAmplitude() && pos === 'm' || lastDm === -this._springComposite.getSpring().getAmplitude() && pos === 'm\'') {
                    return;
                }

                var endTime = this._xtDynamic.getFormula().getEndTime();
                var period = this._springComposite.getSpring().getModel().getPeriod();
                var sub = endTime % period;
                sub = sub % (period / 4);
                var diff = 0;
                if (lastDirection === 'toleft') {
                    if (pos === 'o') {
                        if (lastDm > 0) {
                            diff = period / 4 - sub;
                        } else {
                            diff = period - sub;
                        }
                    } else if (pos === 'm') {
                        if (lastDm > 0) {
                            diff = period - sub;
                        } else {
                            diff = period - sub - period / 4;
                        }
                    } else if (pos === 'm\'') {
                        if (lastDm > 0) {
                            diff = period / 2 - sub;
                        } else {
                            diff = period / 4 - sub;
                        }
                    }
                } else {
                    if (pos === 'o') {
                        if (lastDm > 0) {
                            diff = period - sub;
                        } else {
                            diff = period / 4 - sub;
                        }
                    } else if (pos === 'm') {
                        if (lastDm >= 0) {
                            diff = period / 4 - sub;
                        } else {
                            diff = period / 2 - sub;
                        }
                    } else if (pos === 'm\'') {
                        if (lastDm >= 0) {
                            diff = period - sub - period / 4;
                        } else {
                            diff = period - sub;
                        }
                    }
                }

                this._xtDynamic.addEndTimeDiff(diff, false);
                this._xtDynamic.redraw();
            } else {
                this._eventFormulaChange('', this._springComposite.getSpring().getCurrentFormula());
            }
        },
        getData: function getData() {
            var current = this._xtDynamic.getFormula();
            var formula = {};
            var maxAmplitude = this._springComposite.getSpring().getOption().maxAmplitude;

            formula.showStatic = !this._$xtStaticPop.hasClass('hide_dom');

            var endTime = current.getEndTime();
            var totalTime = 0;
            var startTime = current.getStartTime();
            var startTotalTime = this._xtDynamic.getStartTotalTime();
            if (formula.showStatic) {
                //显示静态图时，以静态图的开始、结束时间为准推送
                startTime = this._xtStatic.getFormula().getStartTime();
                endTime = this._xtStatic.getFormula().getEndTime();
                totalTime = this._xtStatic.getTotalTime();
            } else if (!this._springComposite.getSpring().isPlaying()) {
                //播放中，以上一次播放、暂停
                endTime = current.getEndTime();
                totalTime = this._xtDynamic.getTotalTime();
            }

            if (this._springComposite.getSpring().isPlaying() && !formula.showStatic) {
                formula.totalTime = this._totalTime;
            } else {
                formula.staticFormula = {
                    amplitudePercent: getAmplitudePercent(current.getAmplitude(), maxAmplitude),
                    period: current.getPeriod(),
                    phi: current.getPhi(),
                    startTime: startTime, //公式开始时间
                    endTime: endTime, //公式结束时间
                    totalTime: totalTime, //运动总时长
                    startTotalTime: startTotalTime, //公式开始时时间
                    staticStartFrameTime: this._staticStartFrameTime //当前球所在位置时间戳
                };
            }

            return formula;
        },
        focus: function focus() {
            this._bindSpringEvent();
            this._springComposite.setTipVisible(true);
            this._springComposite.setDragAble(true);
        },
        blur: function blur() {
            this._unBindSpringEvent();
        },
        getResetAble: function getResetAble() {
            return false;
        },
        reset: function reset() {
            this._staticFormula = null;
            this._springComposite.setDragAble(true);
            this._$xtStaticBtn.addClass('click_disabled');
            this._$paper.css('left', '');
            this._$paper.css('right', '');
            if (this._xtDynamic) {
                this._xtDynamic.reset();
            }
            //重绘动态xt图
            this._initXtDynamic();
        },
        destroy: function destroy() {
            this._unBindSpringEvent();
        }
    };

    var getAmplitudePercent = function getAmplitudePercent(amplitude, maxAmplitude) {
        return Math.round(amplitude / maxAmplitude * 10) / 10;
    };

    return Flow2;
});
'use strict';

/**
 * Created by ylf on 2016/10/24.
 */

define('SpringFlow3', ['SpringLogger', 'SpringUtils'], function (Logger, Utils) {

    var PERIOD_HTML = [];
    PERIOD_HTML.push('<li class="spolr_cycle_li">             ');
    PERIOD_HTML.push('    <div class="spolr_cycle_list">      ');
    PERIOD_HTML.push('        <span class="uibox_txt">${amplitude}</span>');
    PERIOD_HTML.push('    </div>                              ');
    PERIOD_HTML.push('    <div class="spolr_cycle_list">      ');
    PERIOD_HTML.push('        <span class="uibox_txt">${count}</span>');
    PERIOD_HTML.push('    </div>                              ');
    PERIOD_HTML.push('    <div class="spolr_cycle_list">      ');
    PERIOD_HTML.push('        <span class="uibox_txt">${time}</span>');
    PERIOD_HTML.push('    </div>                              ');
    PERIOD_HTML.push('    <div class="spolr_cycle_list">      ');
    PERIOD_HTML.push('        <span class="uibox_txt">${period}</span>');
    PERIOD_HTML.push('    </div>                              ');
    PERIOD_HTML.push('</li>                                   ');
    PERIOD_HTML = PERIOD_HTML.join('');

    var Flow3 = {
        _eventBus: null,
        _springComposite: null,
        _spring: null,
        _currentIndex: 0,
        _data: [],
        _rendered: false,
        _option: null,
        create: function create(eventBus, $view, springComposite, option) {
            var ins = Object.create(this);
            ins._eventBus = eventBus;
            ins._option = option;
            ins._springComposite = springComposite;
            ins._spring = springComposite.getSpring();
            ins._data = [];
            ins._proxy();
            ins._findView($view);
            return ins;
        },
        //初始化渲染
        render: function render(focus, data) {
            this._rendered = true;
            this._initView(data);
            if (data && data.length > 0) {
                this._initData(data);
            }
        },
        _findView: function _findView($view) {
            this._$cycleContainer = $view.find('._js_cycle_container');
            this._$cycleMain = $view.find('.springOscillator_cycle_main');
            this._$cycleScrollbar = $view.find('.spolr_light_scrollbar');
        },
        _initView: function _initView() {
            this._$cycleContainer.html('');
            for (var i = 0; i < 3; i++) {
                this._$cycleContainer.append(Utils.template(PERIOD_HTML, {
                    amplitude: '',
                    count: '',
                    period: '',
                    time: ''
                }));
            }
            this._$cycleMain.removeClass('spolr_show_scrollbar');
        },
        _initData: function _initData(data) {
            var that = this;
            this._data = data;
            this._data.forEach(function (data) {
                var html = Utils.template(PERIOD_HTML, data);
                if (that._currentIndex <= 2) {
                    that._$cycleContainer.children().eq(2).remove();
                }
                that._$cycleContainer.children().eq(0).before(html);
                that._currentIndex++;
            });
            if (this._data.length > 3) {
                this._$cycleMain.addClass('spolr_show_scrollbar');
            }
        },
        _proxy: function _proxy() {
            this._eventPause = $.proxy(this._eventPause, this);
            this._eventPlay = $.proxy(this._eventPlay, this);
            this._eventAmplitudeChange = $.proxy(this._eventAmplitudeChange, this);
            this._eventRatioStart = $.proxy(this._eventRatioStart, this);
            this._eventRatioEnd = $.proxy(this._eventRatioEnd, this);
        },
        _bindSpringEvent: function _bindSpringEvent() {
            var spring = this._springComposite.getSpring();
            spring.on('play', this._eventPlay);
            spring.on('pause', this._eventPause);
            spring.on('amplitudechange', this._eventAmplitudeChange);
            this._eventBus.on('ratioStart', this._eventRatioStart);
            this._eventBus.on('ratioEnd', this._eventRatioEnd);
        },
        _eventRatioStart: function _eventRatioStart(params) {
            this._ratioStart = true;
        },
        _eventRatioEnd: function _eventRatioEnd(params) {
            this._ratioStart = false;
        },
        _unBindSpringEvent: function _unBindSpringEvent() {
            var spring = this._springComposite.getSpring();
            spring.off('pause', this._eventPause);
            spring.off('play', this._eventPlay);
            spring.off('amplitudechange', this._eventAmplitudeChange);
            this._eventBus.off('ratioStart', this._eventRatioStart);
            this._eventBus.off('ratioEnd', this._eventRatioEnd);
        },
        _eventAmplitudeChange: function _eventAmplitudeChange() {
            if (!this._springComposite.getSpring().isSlowPlaying()) {
                if (this._rendered) {
                    //非慢放模式下，调节振幅，直接定位到两侧最大振幅处
                    var pos = this._springComposite.getSpring().getPos();
                    if (pos !== 'o' && this._ratioStart !== true) {
                        var displacement = this._springComposite.getSpring().getModel().getDisplacement();
                        this._springComposite.getSpring().changePos(displacement > 0 ? 'm' : 'm\'');
                    }
                }
            }
        },
        _eventPlay: function _eventPlay(id) {
            this._vibrationCount = this._spring.getModel().getVibrationCount();
            if (this._vibrationCount > 0) {
                this._springComposite.setPosClickAble(false);
            }
            this._amplitudePercent = Math.round(this._spring.getModel().getAmplitudePercent() * 10);
            this._period = this._spring.getModel().getPeriod();
        },
        _eventPause: function _eventPause(id) {
            this._springComposite.setPosClickAble(true);
            if (this._vibrationCount > 0) {
                var data = {
                    amplitude: this._amplitudePercent,
                    count: this._vibrationCount,
                    period: this._period / 1000,
                    time: this._vibrationCount * this._period / 1000
                };

                this._data.push(data);

                var html = Utils.template(PERIOD_HTML, data);
                if (this._currentIndex <= 2) {
                    this._$cycleContainer.children().eq(2).remove();
                }
                this._$cycleContainer.children().eq(0).before(html);
                //定位到顶部
                this._$cycleScrollbar.scrollTop(0);
                //添加滚动条
                if (this._$cycleContainer.children().length > 3) {
                    this._$cycleMain.addClass('spolr_show_scrollbar');
                }
                this._currentIndex++;
            }
        },
        //重置
        reset: function reset() {
            this._data = [];
            this._currentIndex = 0;
            this._initView();
        },
        getData: function getData() {
            return this._data;
        },
        getResetAble: function getResetAble() {
            return this._data.length > 0;
        },
        focus: function focus() {
            this._bindSpringEvent();

            this._springComposite.setDragAble(false);
            this._springComposite.setTipVisible(false);
            //更新默认的振幅，这样不会激活重置
            this._springComposite.getSpring().changeDefaultAmplitude(this._option.thirdAmplitudePercent);
            this._springComposite.getSpring().changeAmplitude(this._option.thirdAmplitudePercent);
            //更新默认的振幅，这样不会激活重置
            this._springComposite.getSpring().changeDefaultPos('m');
            this._springComposite.getSpring().changePos('m');
        },
        blur: function blur() {
            this._unBindSpringEvent();
            this._springComposite.setPosClickAble(true);
            this._springComposite.getSpring().changeDefaultAmplitude(this._option.amplitudePercent);
            this._springComposite.getSpring().changeDefaultPos('o');
            this._springComposite.getSpring().changePos('o');
        },
        scale: function scale(ratio) {
            // this.blur();
            // this.focus();
        },
        //销毁，移除事件
        destroy: function destroy() {}
    };
    return Flow3;
});
'use strict';

/**
 * Created by ylf on 2016/10/26.
 */

define('SpringFlow4', ['SpringController', 'SpringLogger', 'SpringUtils', 'SpringArrow'], function (Spring, Logger, Utils, Arrow) {
    //分析振动规律
    var Flow4 = {
        _springComposite: null,
        _$flowView: null,
        _currentState: [],
        _renderedData: false,
        _eventBus: null,
        create: function create(eventBus, $view, springComposite) {
            var ins = Object.create(this);
            ins._springComposite = springComposite;
            ins._proxy();
            ins._eventBus = eventBus;
            ins._findView($view);
            ins._bindDomEvent();
            return ins;
        },
        _proxy: function _proxy() {
            this._eventAmplitudeChange = $.proxy(this._eventAmplitudeChange, this);
            this._eventDisplacementUpdate = $.proxy(this._eventDisplacementUpdate, this);
        },
        render: function render(focus, data) {
            var that = this;
            this._initView();
            if (data && data.switchState) {
                this._eachDomList(function (key, i) {
                    that._setDomListVisible(data.switchState[key], key);
                });
            } else {
                //有焦点的情况下才去触发播放
                if (focus) {
                    this._springComposite.changePos('m');
                    this._springComposite.play();
                }
            }
            this._renderedData = true;
        },
        _initView: function _initView() {
            this._setDomListVisible(false);
        },
        _findView: function _findView($view) {
            this._$spolr_flow4_btns = $view.find('.spolr_analysis_list');
            this._findDomList($view);
        },
        _findDomList: function _findDomList($view) {
            var that = this;
            this._domList = {};
            this._domList.x = {};
            this._domList.f = {};
            this._domList.a = {};
            this._domList.v = {};
            this._domList.e = {};
            this._domList.x.$line = $view.find('.spolr_analysis_anime_x');
            this._domList.f.$line = $view.find('.spolr_analysis_anime_f');
            this._domList.a.$line = $view.find('.spolr_analysis_anime_a');
            this._domList.v.$line = $view.find('.spolr_analysis_anime_v');
            this._domList.e.$line = $view.find('.spolr_analysis_e_line');
            var width = $view.find('.springOscillator_analysis_box').width() - $view.find('.springOscillator_analysis_box .spolr_analysis_hd').width() - 10;
            this._eachDomList(function (key, i) {
                this.$switch = that._$spolr_flow4_btns.eq(i).find('.com_applicationset_switch ');
                this.$arrow = this.$line.find('.anime_x_arrow');
                if (key === 'e') {
                    this.$lineWidth = $view.find('.spolr_analysis_e_line_width');
                }
                if (key === 'v') {
                    this.$lineInside = this.$line.find('.anime_x_line');
                }
                if (key === 'x' || key === 'f' || key === 'a') {
                    this.arrow = Arrow.create(key === 'x' ? 'right' : 'left');
                    this.$line.css({
                        width: Math.round(width) + 'px',
                        left: -Math.round(width / 2) + 'px'
                    });
                    this.arrow.draw(this.$line);
                }
            });
        },
        _mathDomList: function _mathDomList() {
            this._eachDomList(function (key, i) {
                if (this.$arrow[0]) {
                    var style = this.$arrow.attr('style');
                    this.$arrow.attr('style', '');
                    this.arrowWidth = Math.round(Math.abs(this.$arrow.width()));
                    this.$arrow.attr('style', style);
                }
            });
        },
        _eachDomList: function _eachDomList(cb) {
            var i = 0;
            for (var key in this._domList) {
                var dom = this._domList[key];
                cb.apply(dom, [key, i]);
                i++;
            }
        },
        _setDomListVisible: function _setDomListVisible(visible, key) {
            var lineMethod = visible ? 'removeClass' : 'addClass';
            var switchMethod = visible ? 'addClass' : 'removeClass';
            if (key) {
                this._domList[key].$line[lineMethod]('hide_dom');
                this._domList[key].$switch[switchMethod]('checked');
            } else {
                this._eachDomList(function (key) {
                    this.$line[lineMethod]('hide_dom');
                    this.$switch[switchMethod]('checked');
                });
            }
        },
        _getDomList: function _getDomList(key) {
            var that = this;
            if (key instanceof Array) {
                var domList = [];
                key.forEach(function (item) {
                    domList.push(that._domList[item]);
                });
                return domList;
            }
            return this._domList[key];
        },
        _bindDomEvent: function _bindDomEvent() {
            //    绑定事件
            var that = this;
            this._$spolr_flow4_btns.on('click', function (e) {
                var $btn = $(e.target).closest('.com_applicationset_switch');
                if ($btn[0]) {
                    var key = $btn.data('key');
                    var visible = !$btn.hasClass("checked");
                    that._setDomListVisible(visible, key);
                }
            });
        },
        scale: function scale(ratio) {
            var that = this;
            that._eachDomList(function (key, i) {

                if (key === 'x' || key === 'f' || key === 'a') {
                    this.arrow.scale(ratio);
                    var spring = that._springComposite.getSpring().getModel();

                    this.arrow.redraw(Math.abs(spring.getDisplacement()), spring.getDisplacement(), spring.getAmplitude() * 2);
                    //   this.$line.css({
                    //     width: parseInt(this.$line.css('width')) * ratio + 'px',
                    //     left: -parseInt(this.$line.css('width')) * ratio / 2 + 'px'
                    //   });
                }
            });
        },
        _bindSpringEvent: function _bindSpringEvent() {
            var spring = this._springComposite.getSpring();
            spring.on('amplitudechange', this._eventAmplitudeChange);
            spring.on('displacementupdate', this._eventDisplacementUpdate);
        },
        _unBindSpringEvent: function _unBindSpringEvent() {
            var spring = this._springComposite.getSpring();
            spring.off('amplitudechange', this._eventAmplitudeChange);
            spring.off('displacementupdate', this._eventDisplacementUpdate);
        },
        _eventAmplitudeChange: function _eventAmplitudeChange(id, amplitude) {
            var spring = this._springComposite.getSpring();
            var model = spring.getModel();
            var displacement = model.getDisplacement();
            amplitude = amplitude;

            //更新能力条长度
            this._eAmplitudeChange(amplitude, displacement);
            this._eChange(displacement, amplitude);
            //更新速度
            this._vChange(displacement, amplitude, model.getDirection());
            //更新箭头宽度
            this._xfaAmplitudeChange(amplitude);
            this._xfaChange(displacement, amplitude);
        },
        _eventDisplacementUpdate: function _eventDisplacementUpdate(id, displacement, timeDiff, direction) {
            var model = this._springComposite.getSpring().getModel();
            var amplitude = model.getAmplitude();
            this._xfaChange(displacement, amplitude);
            this._eChange(displacement, amplitude);
            this._vChange(displacement, amplitude, direction);
        },
        _xfaAmplitudeChange: function _xfaAmplitudeChange(amplitude) {
            this._getDomList(['v']).forEach(function (item) {
                if (item.arrowWidth > amplitude) {
                    item.$arrow.css('borderLeftWidth', Math.round(amplitude) + 'px');
                    item.$arrow.css('left', item.arrowWidth + 1 + 'px');
                    item.$lineInside.css('width', '0px');
                } else {
                    item.$arrow.css('borderLeftWidth', '');
                    item.$arrow.css('left', '');
                    item.$lineInside.css('width', '');
                }
            });
        },
        _eAmplitudeChange: function _eAmplitudeChange(amplitude, displacement) {
            var dl = this._getDomList('e');
            dl.$line.css('width', Math.round(amplitude * 2) + 'px');
            dl.$line.css('left', Math.round(-amplitude) + 'px');
            // dl = this._getDomList('a');
            // dl.$line.css('width', Math.round(amplitude * 2) + 'px');
            // dl.$line.css('left', Math.round(-amplitude) + 'px');
        },
        _vChange: function _vChange(displacement, amplitude, direction) {
            var that = this;
            var dl = this._getDomList('v');
            var width = amplitude - Math.abs(displacement); //变短的距离就是振幅
            var left = 0;
            var degree = 0;
            left = displacement;
            if (direction === 'toleft') {
                degree = 180;
            } else {
                degree = 0;
            }

            if (width <= dl.arrowWidth) {
                if (direction === 'toleft') {
                    degree = 90 + Math.abs(width / dl.arrowWidth * 90);
                } else if (direction === 'toright') {
                    degree = 90 - Math.abs(width / dl.arrowWidth * 90);
                }
                width = dl.arrowWidth;
            }

            left = Math.floor(left);
            width = Math.ceil(width);
            var sub = Math.round(amplitude) - Math.abs(left) - width;
            if (sub !== 0) {
                width = width + sub;
            }
            dl.$line.css({
                width: width + 'px',
                left: left + 'px',
                transform: 'rotateY(' + degree + 'deg)'
            });
        },
        _eChange: function _eChange(displacement, amplitude) {
            var dl = this._getDomList('e');
            var percent = 100 - Math.abs(displacement) / amplitude * 100;
            dl.$lineWidth.css('width', percent + '%');
        },
        _xfaChange: function _xfaChange(displacement, amplitude) {
            this._simpleChange('x', displacement, amplitude);
            this._simpleChange('f', displacement, amplitude);
            this._simpleChange('a', displacement, amplitude);
        },
        _simpleChange: function _simpleChange(key, displacement, amplitude) {
            var dl = this._getDomList(key);
            dl.arrow.redraw(Math.abs(displacement), displacement, amplitude * 2);
        },
        reset: function reset() {
            this._initView();
            //渲染过自身，重置播放才有效
            if (this._renderedData) {
                this._springComposite.changePos('m');
                this._springComposite.play();
            }
            var dl = this._getDomList('e');
            dl.$line.attr('style', '');
            var dlv = this._getDomList('v');
            dlv.$arrow.css('borderLeftWidth', '');
            dlv.$arrow.css('left', '');
            dlv.$lineInside.css('width', '');
        },
        getData: function getData() {
            var currentState = {};
            currentState.switchState = {};
            // currentState.isPlaying = this._springComposite.getSpring().isPlaying();
            //currentState.isSlowPlaying = this._springComposite.getSpring().isSlowPlaying();
            this._eachDomList(function (key) {
                currentState.switchState[key] = this.$switch.hasClass('checked');
            });
            return currentState;
        },
        //获取焦点，这边绑定事件
        focus: function focus() {
            this._mathDomList();
            this._springComposite.setTipVisible(false);
            this._bindSpringEvent();
            //this._springComposite.changePos('m');
            this._springComposite.setDragAble(false);
            this._springComposite.setNeedHandTip(false);
        },
        //失去焦点，失去焦点后，需要把事件移除
        blur: function blur() {
            this._unBindSpringEvent();
            this._springComposite.setNeedHandTip(true);
        },
        getResetAble: function getResetAble() {
            return true;
        },
        //销毁，移除事件
        destroy: function destroy() {
            this._unBindSpringEvent();
        }
    };
    return Flow4;
});
'use strict';

/**
 * 点击事件 create by ylf 2016/7/5
 */

define('jQuery.SpTap', [], function () {

    var gloInitJqEvent = function gloInitJqEvent() {
        var supportTouch = 'ontouchend' in document;
        //var supportTouch =false;
        var isMobile = navigator.userAgent.match(/Android|iPhone|iPad|iPod|BlackBerry|IEMobile/i) ? true : false;
        var vEventHandler = {};
        if (supportTouch && isMobile) {
            //拥有触屏事件
            vEventHandler.mouseDown = 'touchstart';
            vEventHandler.mouseUp = 'touchend';
            vEventHandler.mouseCancel = 'touchcancel';
            vEventHandler.mouseWheel = 'touchmove';
            vEventHandler.getEventX = function (event) {
                return event.originalEvent.changedTouches[0].clientX;
            };
            vEventHandler.getEventY = function (event) {
                return event.originalEvent.changedTouches[0].clientY;
            };
        } else {
            //没有触屏幕事件
            vEventHandler.mouseDown = 'mousedown';
            vEventHandler.mouseUp = 'mouseup';
            vEventHandler.mouseCancel = 'mouseleave';
            vEventHandler.mouseWheel = 'mousewheel';
            vEventHandler.getEventX = function (event) {
                return event.clientX;
            };
            vEventHandler.getEventY = function (event) {
                return event.clientY;
            };
        }

        //点击事件
        $.event.special.spTap = {
            setup: function setup() {
                var $that = $(this);
                if (supportTouch && isMobile) {
                    var vMouseDown = vEventHandler.mouseDown;
                    var vMouseUp = vEventHandler.mouseUp;
                    var vMouseCancel = vEventHandler.mouseCancel;
                    var _start = 0;
                    var _startX = 0;
                    var _startY = 0;
                    $that.bind(vMouseDown, function (event) {
                        //$that.addClass('ui_btn_active');
                        if (event.which !== 0 || event.which !== 1) {
                            _start = new Date().getTime();
                            _startX = vEventHandler.getEventX(event);
                            _startY = vEventHandler.getEventY(event);
                        }
                    });
                    $that.bind(vMouseUp, function (event) {
                        //$that.removeClass('ui_btn_active');
                        if (event.which !== 0 || event.which !== 1) {
                            var end = new Date().getTime();
                            var endX = vEventHandler.getEventX(event);
                            var endY = vEventHandler.getEventY(event);
                            var holdTime = end - _start;
                            var dx = Math.abs(endX - _startX);
                            var dy = Math.abs(endY - _startY);
                            if (holdTime <= 550 && dx < 8 && dy < 8) {
                                //触发tap事件
                                event = $.event.fix(event);
                                event.type = 'spTap';
                                event.tapEventSource = 'touchclick';
                                event.tapFireTouch = true;
                                $that.triggerHandler(event);
                            }
                        }
                    });
                    $that.bind(vMouseCancel, function (event) {
                        //$that.removeClass('ui_btn_active');
                    });
                } else {
                    $that.bind('click', function (event) {
                        //触发tap事件
                        event = $.event.fix(event);
                        event.type = 'spTap';
                        event.tapEventSource = 'mouseclick';
                        event.tapFireTouch = false;
                        //白板手写笔点击触发touch事件
                        if (event.originalEvent && event.originalEvent.sourceCapabilities && event.originalEvent.sourceCapabilities.firesTouchEvents) {
                            event.tapFireTouch = true;
                        }
                        $that.triggerHandler(event);
                    });
                }
            },
            teardown: function teardown() {
                var vMouseDown = vEventHandler.mouseDown;
                var vMouseUp = vEventHandler.mouseUp;
                var vMouseCancel = vEventHandler.mouseCancel;
                var $that = $(this);
                $that.unbind(vMouseUp).unbind(vMouseDown).unbind(vMouseCancel);
            }
        };
    };
    gloInitJqEvent();
});
'use strict';

/**
 * Created by ylf on 2016/11/4.
 */
define('SpringLang', ['SpringUtils'], function (Utils) {

    var lang = {
        'sp_name': '弹簧振子',
        'sp_ball_tip': '拖动小球一段距离松手，可让振子振动起来哦。',
        'sp_play': '播放',
        'sp_close': '关闭',
        'sp_pause': '暂停',
        'sp_slow': '慢放',
        'sp_reset': '重置',
        'sp_amplitude': '振幅',
        'sp_frequency': '频率',
        'sp_flow_xt_show': '显示${iStart}x-t${iEnd}曲线',
        'sp_flow_xt': '曲线',
        'sp_complete_oscillation_time': '全振动计时',
        'sp_complete_oscillation_count': '全振动次数',
        'sp_complete_oscillation_record': '全${br}振${br}动${br}记${br}录',
        'sp_co_time': '时间',
        'sp_co_period': '周期',
        'sp_analysis_x': '位&nbsp;&nbsp;&nbsp;移',
        'sp_analysis_f': '回复力',
        'sp_analysis_a': '加速度',
        'sp_analysis_v': '速&nbsp;&nbsp;&nbsp;度',
        'sp_analysis_e': '能&nbsp;&nbsp;&nbsp;量',
        'sp_ntm_left': '左最大位移',
        'sp_ntm_middle': '平衡位置',
        'sp_ntm_right': '右最大位移',
        get: function get(key) {
            //增加斜体支持
            return Utils.template(this[key], { 'iStartNoPadding': '<span class="spolr_ntm_txt_i" style="padding-right: 0.1em;">', iStart: '<span class="spolr_ntm_txt_i">', iEnd: '</span>' });
        },
        extend: function extend(lang) {
            $.extend(this, lang);
        },
        initI18N: function initI18N($view) {
            this._bar($view);
            this._spring($view);
            this._flow2($view);
            this._flow3($view);
            this._flow4($view);
        },
        _bar: function _bar($view) {
            //底部控制栏
            $view.find('.spolr_control_amplitude .spolar_control_txt').html(this.get('sp_amplitude'));
            $view.find('.spolr_control_frequency .spolar_control_txt').html(this.get('sp_frequency'));
            $view.find('._js_play ._js_txt').html(this.get('sp_play'));
            $view.find('._js_play_slow ._js_txt').html(this.get('sp_slow'));
            $view.find('._js_reset ._js_txt').html(this.get('sp_reset'));
            $view.find('._js_total_count ._js_txt').html(this.get('sp_complete_oscillation_time'));
            $view.find('._js_amplitude_drop .tip_text').html(this.get('sp_amplitude'));
            $view.find('._js_frequency_drop .tip_text').html(this.get('sp_complete_oscillation_count'));
            $view.find('._js_playcount_drop  .tip_text').html(this.get('sp_complete_oscillation_count'));
            $view.find('._js_xt_static_btn  ._js_txt').html(this.get('sp_flow_xt_show'));
        },
        _spring: function _spring($view) {
            $view.find('._js_tips_box ._js_txt').html(this.get('sp_ball_tip'));
            $view.find('.spolr_ui_txt_explanation ._js_left').html(this.get('sp_ntm_left'));
            $view.find('.spolr_ui_txt_explanation ._js_middle').html(this.get('sp_ntm_middle'));
            $view.find('.spolr_ui_txt_explanation ._js_right').html(this.get('sp_ntm_right'));
        },
        _flow2: function _flow2($view) {
            $view.find('.spolr_menu_item.spolr_item2 ._js_txt').html(this.get('sp_flow_xt_show'));
            $view.find('._js_xt_pop_title').html(this.get('sp_flow_xt'));
            $view.find('._js_xt_pop ._js_xt_pop_close_btn .btns-primary-txt').html(this.get('sp_close'));
        },
        _flow3: function _flow3($view) {
            var record = Utils.template(this.get('sp_complete_oscillation_record'), { br: '<br>' });
            $view.find('.springOscillator_cycle_table .springOscillator_cycle_title .uibox_txt').html(record);
            $view.find('._js_cycle_amplitude .uibox_txt').html(this.get('sp_amplitude'));
            $view.find('._js_cycle_count .uibox_txt').html(this.get('sp_complete_oscillation_count'));
            $view.find('._js_cycle_time_txt').html(this.get('sp_co_time'));
            $view.find('._js_cycle_period_txt').html(this.get('sp_co_period'));
        },
        _flow4: function _flow4($view) {
            $view.find('._js_txt_analysis_x').html(this.get('sp_analysis_x'));
            $view.find('._js_txt_analysis_f').html(this.get('sp_analysis_f'));
            $view.find('._js_txt_analysis_a').html(this.get('sp_analysis_a'));
            $view.find('._js_txt_analysis_v').html(this.get('sp_analysis_v'));
            $view.find('._js_txt_analysis_e').html(this.get('sp_analysis_e'));
        }

    };

    return lang;
});
'use strict';

/**
 * Created by ylf on 2015/12/13.
 */

define('SpringLogger', [], function () {
    'use strict';

    var methods = ['assert', 'clear', 'count', 'debug', 'dir', 'dirxml', 'error', 'exception', 'group', 'groupCollapsed', 'groupEnd', 'info', 'log', 'markTimeline', 'profile', 'profileEnd', 'table', 'time', 'timeEnd', 'timeline', 'timelineEnd', 'timeStamp', 'trace', 'warn'];
    var length = methods.length;
    var _console = window.console = window.console || {};
    var method = null;

    var emptyFuc = function emptyFuc() {};

    while (length--) {
        method = methods[length];
        // Only stub undefined methods.
        if (!_console[method]) {
            _console[method] = emptyFuc;
        }
    }

    //logger level值(debug:3, info:2, warn:1, error: 0, close: -1)
    var _logger = {
        _level: 0,
        _console: _console,
        setLevel: function setLevel(level) {
            switch (level) {
                case 'debug':
                    this._level = 3;
                    break;
                case 'info':
                    this._level = 2;
                    break;
                case 'warn':
                    this._level = 1;
                    break;
                case 'error':
                    this._level = 0;
                    break;
                default:
                    this._level = -1;
            }
        },
        debug: function debug() {
            if (this._level >= 3) {
                this._console.log.apply(this._console, arguments);
            }
        },
        info: function info(msg) {
            if (this._level >= 2) {
                this._console.info.apply(this._console, arguments);
            }
        },
        warn: function warn(msg) {
            if (this._level >= 1) {
                this._console.warn.apply(this._console, arguments);
            }
        },
        error: function error(msg) {
            if (this._level >= 0) {
                this._console.error.apply(this._console, arguments);
            }
        }
    };

    return _logger;
});
'use strict';

/**
 * Created by ylf on 2016/10/24.
 */

define('Spring3DView', ['SpringLogger'], function (Logger) {

  //全局变量容器
  var MODEL_CONFIG = {
    SCENE_LENGTH: 800, //threejs场景的宽度
    WOOD_THICK: 6, //左右支撑架的厚度
    SPRING_DATA: {
      radius: 40,
      tube: 5,
      length: 400,
      windingNumber: 8,
      radialSegments: 20,
      tubularSegments: 10
    },
    BALL_RADIUS: 50 };

  //支撑架的长度
  var STICKLENGTH = MODEL_CONFIG.SCENE_LENGTH - MODEL_CONFIG.WOOD_THICK;

  var $virtualBall = $('._js_virtual_ball');
  var ballOriginalLeft = $virtualBall.css('left');

  //用于2d的px转换为3d的长度单位，斜率gradient,截距intercept
  var pxRange, threeRange, gradient, intercept;

  function SpringGeometry(options) {

    //继承Geometry
    THREE.Geometry.call(this);

    this.radius = options.radius || 10; //弹簧半径
    this.tube = options.tube || 2; //管道的半径
    this.length = options.length || 50; //弹簧的长度
    this.windingNumber = options.windingNumber || 10; //弹簧的圈数
    this.radialSegments = options.radialSegments || 20; //外部周长的分割数-精度
    this.tubularSegments = options.tubularSegments || 20; //管道周长的分割数-精度

    this.setSpringVertices(this.radius, this.tube, this.length, this.windingNumber, this.radialSegments, this.tubularSegments);
    this.setSpringFaces(this.radius, this.tube, this.length, this.windingNumber, this.radialSegments, this.tubularSegments);

    //面的法向量计算，这个函数用来计算每一个面归一化后的法向量，法向量垂直于面。计算之后的法向量被存放在了face.normal中。
    this.computeFaceNormals();
    //计算每一个顶点的法向量
    this.computeVertexNormals();
  }

  SpringGeometry.prototype = Object.create(THREE.Geometry.prototype);
  SpringGeometry.prototype.constructor = SpringGeometry;
  //设置顶点坐标
  SpringGeometry.prototype.setSpringVertices = function (radius, tube, length, windingNumber, radialSegments, tubularSegments) {

    var geometry = this;

    // 必要参数
    radius = radius || 1; //弹簧半径
    tube = tube || 0.2; //管道半径
    length = length || 5; //弹簧长度

    var Nw = windingNumber || 10; //弹簧的圈数
    var Nr = radialSegments || 10; //外部周长的分割数
    var Nt = tubularSegments || 10; //管道周长的分割数

    //计算每段管道截面的增量
    var deltaH = length / Nw / Nr;

    var n = 0;
    var v = new THREE.Vector3();

    // 取得顶点坐标
    for (var w = 0; w < Nw; w++) {
      //圈数

      for (var r = 0; r < Nr; r++) {
        //外部周长的分割数

        var phi = 2.0 * Math.PI * r / Nr; //外部周长的分割数

        //管道横截面的中心z坐标
        var h = deltaH * (Nr * w + r);

        for (var t = 0; t < Nt; t++) {

          var theta = 2.0 * Math.PI * t / Nt; //管道的分割角度

          v.set((radius + tube * Math.cos(theta)) * Math.cos(phi), //x坐标
          (radius + tube * Math.cos(theta)) * Math.sin(phi), //y坐标
          tube * Math.sin(theta) + h - length / 2 //z坐标
          );

          if (geometry.vertices[n]) geometry.vertices[n].copy(v);else geometry.vertices[n] = v.clone();
          n++;
        }
      }
    }

    //两端封闭的横截面坐标
    var w = Nw;
    var r = 0;
    //管道横截面的中心z坐标
    var h = deltaH * (Nr * w + r);
    for (var t = 0; t < Nt; t++) {
      var phi = 0.0;
      var theta = 2.0 * Math.PI * t / Nt;

      v.set((radius + tube * Math.cos(theta)) * Math.cos(phi), (radius + tube * Math.cos(theta)) * Math.sin(phi), tube * Math.sin(theta) + h - length / 2);
      if (geometry.vertices[n]) geometry.vertices[n].copy(v);else geometry.vertices[n] = v.clone();
      n++;
    }
    //开始端管道横截面的中心坐标
    v.set(radius, 0, -length / 2);
    if (geometry.vertices[n]) geometry.vertices[n].copy(v);else geometry.vertices[n] = v.clone();
    n++;

    //结尾端管道横截面的中心坐标
    v.set(radius, 0, length / 2);
    if (geometry.vertices[n]) geometry.vertices[n].copy(v);else geometry.vertices[n] = v.clone();
    n++;
  };
  //多边形面的生成
  SpringGeometry.prototype.setSpringFaces = function (radius, tube, length, windingNumber, radialSegments, tubularSegments) {

    var geometry = this;

    var Nw = windingNumber || 10;
    var Nr = radialSegments || 10;
    var Nt = tubularSegments || 10;

    //弹簧表面
    for (var w = 0; w < Nw; w++) {

      for (var r = 0; r < Nr; r++) {

        var w1 = w;
        var w2 = r !== Nr - 1 ? w : w + 1;

        var r1 = r;
        var r2 = r !== Nr - 1 ? r + 1 : 0;

        for (var t = 0; t < Nt; t++) {
          var t1 = t;
          var t2 = t !== Nt - 1 ? t + 1 : 0;

          //顶点计算
          var v1 = Nr * Nt * w1 + Nt * r1 + t1;
          var v2 = Nr * Nt * w1 + Nt * r1 + t2;
          var v3 = Nr * Nt * w2 + Nt * r2 + t1;
          var v4 = Nr * Nt * w2 + Nt * r2 + t2;

          //v1,v3,v4形成一个三角形面
          geometry.faces.push(new THREE.Face3(v1, v3, v4));
          //v4,v2,v1形成一个三角形面
          geometry.faces.push(new THREE.Face3(v4, v2, v1));
        }
      }
    }

    //开始端管道横截面
    var w = 0;
    var r = 0;
    for (var t = 0; t < Nt; t++) {
      var t1 = t;
      var t2 = t !== Nt - 1 ? t + 1 : 0;

      //横截面的中心坐标和其他两点
      var v1 = Nr * Nt * Nw + Nt;
      var v2 = Nr * Nt * w + Nt * r + t1;
      var v3 = Nr * Nt * w + Nt * r + t2;

      geometry.faces.push(new THREE.Face3(v1, v2, v3));
    }

    //结尾端管道横截面
    var w = Nw;
    var r = 0;
    for (var t = 0; t < Nt; t++) {

      var t1 = t;
      var t2 = t !== Nt - 1 ? t + 1 : 0;

      var v1 = Nw * Nr * Nt + Nt + 1;
      var v2 = Nr * Nt * w + Nt * r + t1;
      var v3 = Nr * Nt * w + Nt * r + t2;

      geometry.faces.push(new THREE.Face3(v1, v3, v2));
    }
  };
  //重新计算顶点坐标
  SpringGeometry.prototype.updateSpringGeometry = function (radius, tube, length) {

    this.radius = radius || this.radius;
    this.tube = tube || this.tube;
    this.length = length || this.length;

    this.setSpringVertices(this.radius, this.tube, this.length, this.windingNumber, this.radialSegments, this.tubularSegments);

    this.computeFaceNormals();
    this.computeVertexNormals();

    this.verticesNeedUpdate = true;
    this.normalsNeedUpdate = true;
  };

  var View = {
    _scene: null,
    _renderer: null,
    _camera: null,
    _domHeight: null,
    _domWidth: null,
    _mousedownPos: 0,
    //弹簧在o点时的长度
    _springLength: STICKLENGTH / 2,

    _ballMesh: null,
    _springMesh: null,

    _eventBus: null,
    _option: null,
    _springModel: null,

    _config: null,
    _dragAble: true,

    _initRatio: 1,

    /**
     * 初始化three环境
     * @param $domBox dom的jq对象
     */
    _initThree: function _initThree($domBox) {
      this._domWidth = $domBox.width();
      this._domHeight = $domBox.height();

      //用于2d的px转换为3d的长度单位，斜率gradient,截距intercept
      pxRange = [-this._domWidth / 2, this._domWidth / 2];
      threeRange = [0, -STICKLENGTH];
      gradient = (threeRange[1] - threeRange[0]) / (pxRange[1] - pxRange[0]);
      intercept = threeRange[0] - gradient * pxRange[0];

      this._renderer = new THREE.WebGLRenderer({
        antialias: true,
        alpha: true
      });
      this._renderer.setSize(this._domWidth, this._domHeight);
      this._renderer.setPixelRatio(window.devicePixelRatio);
      this._renderer.setClearColor(0x000000, 0);
      this._renderer.shadowMap.enabled = true;
      $domBox.append(this._renderer.domElement);
      this._initScene();
      this._initCamera();
      this._initLight();
      this._cubeMaterial = this._createCubeMap();

      this._creatPedestal();
      this._createSpring(this._springLength);
      this._createBall();
    },

    /**
     * 初始化场景
     */
    _initScene: function _initScene() {
      this._scene = new THREE.Scene();
    },

    /**
     * 初始化相机
     */
    _initCamera: function _initCamera() {
      var halfWidth = this._domWidth / 2;
      var halfHeight = this._domHeight / 2;
      var cameraFactor = this._domWidth / MODEL_CONFIG.SCENE_LENGTH;
      var cameraSize = {
        left: -halfWidth / cameraFactor,
        right: halfWidth / cameraFactor,
        top: halfHeight / cameraFactor,
        bottom: -halfHeight / cameraFactor
      };
      this._camera = new THREE.OrthographicCamera(-MODEL_CONFIG.WOOD_THICK / 2, 2 * cameraSize.right - MODEL_CONFIG.WOOD_THICK / 2, cameraSize.top, cameraSize.bottom, -1000, 15000);
      this._camera.position.x = 100;
      this._camera.position.z = 1;
      this._camera.lookAt(this._scene.position);
    },

    /**
     * 创建支撑物
     */
    _creatPedestal: function _creatPedestal() {
      var self = this;
      var length = STICKLENGTH;
      var pedestal = new THREE.Object3D();

      var spotLight1 = new THREE.SpotLight(0xffffff);
      spotLight1.position.set(500, 300, 500);
      var target1 = new THREE.Object3D();
      target1.position.set(0, 0, 0);
      spotLight1.target1 = target1;
      spotLight1.intensity = 0.7;
      self._scene.add(spotLight1);

      var spotLight2 = new THREE.SpotLight(0xffffff);
      spotLight2.position.set(500, 300, -STICKLENGTH - 500);
      var target2 = new THREE.Object3D();
      target2.position.set(0, 0, -length);
      spotLight2.target = target2;
      spotLight2.intensity = 1;
      self._scene.add(spotLight2);

      var stickGeo = new THREE.CylinderGeometry(4, 4, length, 50);
      var stickMesh = new THREE.Mesh(stickGeo, this._cubeMaterial);
      stickMesh.rotateX(-Math.PI / 2);
      stickMesh.position.z = -length / 2;
      pedestal.add(stickMesh);
      self._scene.add(pedestal);
    },

    /**
     * 初始化基础光源
     */
    _initLight: function _initLight() {
      var ambiLight = new THREE.AmbientLight(0x000000);
      this._scene.add(ambiLight);
      var spotLight = new THREE.PointLight(0xffffff);
      spotLight.position.set(200, 50, -800);
      var target = new THREE.Object3D();
      target.position.set(0, 0, -800);
      spotLight.target = target;
      spotLight.intensity = 1;
      this._scene.add(spotLight);
    },

    _createCubeMap: function _createCubeMap() {
      // var $defer = $.Defer();
      var path = this._option.basePath + 'resources/img_3d/';
      var format = '.png';
      var urls = [path + 'posx' + format, path + 'negx' + format, path + 'posy' + format, path + 'negy' + format, path + 'posy' + format, path + 'negx2' + format];
      var textureCube = new THREE.CubeTextureLoader().load(urls);

      textureCube.format = THREE.RGBFormat;

      var cubeMaterial = new THREE.MeshPhongMaterial({
        envMap: textureCube,
        color: 0xffffff,
        specular: 0xffffff,
        emissive: 0x000000,
        // wireframe: true,
        shininess: 1000
      });
      cubeMaterial.reflectivity = 1.2;
      // var cubeMaterial = new THREE.MeshBasicMaterial({
      //   envMap: textureCube,
      //   color: 0xffffff
      // })
      // cubeMaterial.reflectivity = 1.4;
      return cubeMaterial;
    },

    /**
     * 创建弹簧mesh
     * @param length 弹簧的长度
     */
    _createSpring: function _createSpring(length) {
      //弹簧和球衔接的地方单位为10
      length = length - MODEL_CONFIG.BALL_RADIUS + 10;
      var springGeo = this._createSpringGeo(length);
      this._springMesh = new THREE.Mesh(springGeo, this._cubeMaterial);
      // this._springMesh = new THREE.Mesh(springGeo, this.standarMat);
      this._scene.add(this._springMesh);
      this._springMesh._setSpringBottomToTop = function (length) {
        length = length - MODEL_CONFIG.BALL_RADIUS + 10;
        var top = new THREE.Vector3(0, 0, -length);
        var bottom = new THREE.Vector3(0, 0, 0);
        var L = new THREE.Vector3().subVectors(top, bottom);
        // 弹簧中心坐标
        var R = new THREE.Vector3().addVectors(top, bottom).multiplyScalar(1 / 2);

        this.position.copy(R);

        this.geometry.updateSpringGeometry(this.radius, this.tube, L.length());

        this.lookAt(top);
      };
    },

    /**
     * 创建弹簧模型
     * @param length 弹簧的长度
     */
    _createSpringGeo: function _createSpringGeo(length) {
      MODEL_CONFIG.SPRING_DATA.length = length;
      var geo = new SpringGeometry(MODEL_CONFIG.SPRING_DATA);
      return geo;
    },

    /**
     * 创建球
     */
    _createBall: function _createBall() {
      var ballGeometry = new THREE.SphereGeometry(MODEL_CONFIG.BALL_RADIUS, 50, 50);
      var ballMaterial = new THREE.MeshPhongMaterial({
        color: 0xff0000,
        emissive: 0x5c0000,
        specular: 0xff0000,
        shininess: 600
      });
      this._ballMesh = new THREE.Mesh(ballGeometry, ballMaterial);
      this._ballMesh.position.z = -this._springLength;
      this._scene.add(this._ballMesh);
    },

    /**
     * 设置球和弹簧的位置
     * @param x 球放置的相对位置，单位px
     */
    _setBall: function _setBall(x) {
      var pxToThree = this._pxToThree(x);
      this._ballMesh.position.z = pxToThree;
      this._springMesh._setSpringBottomToTop(Math.abs(pxToThree));
    },

    /**
     * 像素单位转换为threejs单位
     * @param x 像素
     * @returns threejs中的单位
     */
    _pxToThree: function _pxToThree(x) {
      return gradient * x + intercept;
    },

    /**
     * threejs单位转换为像素单位
     * @param x threejs中的单位
     * @returns 像素
     */
    _threeTopx: function _threeTopx(x) {
      return (x - intercept) / gradient;
    },

    /**
     * 事件绑定
     * @param dragStart 开始移动
     * @param dragMoveCb 移动中
     * @param dragEndCb 移动结束
     */
    _bindEvent: function _bindEvent(dragStart, dragMoveCb, dragEndCb) {
      var self = this;
      this.$dom.on('touchstart mousedown', '._js_virtual_ball', function (e) {
        e.preventDefault();
        self._onMouseDown(e);
        dragStart && dragStart();
        $(document.body).on('touchmove mousemove', function (e) {
          if (self._dragAble) {
            self._onMouseMove(e, dragMoveCb);
          }
        });
        $(document.body).on('touchend mouseup', function (e) {
          //可以拖动:_dragAble,拖动距离大于1px:moveDelta,被拖动过:hasMove
          if (self._dragAble && (self.moveDelta > 1 || self.hasMove)) {
            dragEndCb && dragEndCb(self.getDisplacement());
            self.moveDelta = 0;
          }
          self.destroy();
          self.hasMove = false;
          e.stopPropagation();
        });
      });
    },

    /**
     * mousedown
     * @param e 事件
     */
    _onMouseDown: function _onMouseDown(e) {
      // this.isMove = true;
      var clientX;
      switch (e.type) {
        case 'touchstart':
          if (e.originalEvent.touches.length > 1) {
            this.isMove = false;
          } else {
            clientX = e.originalEvent.touches[0].clientX;
          }
          break;
        case 'mousedown':
          clientX = e.clientX;
          break;
      }
      this.virtualBallX1 = clientX;
      this.virtualBallLeft = $virtualBall.css('left');
      // 获取小球初始位置
      this._mousedownPos = this.getDisplacement();
      e.stopPropagation();
    },

    /**
     * mousemove
     * @param e 事件
     */
    _onMouseMove: function _onMouseMove(e, dragMoveCb) {
      var self = this;
      var clientX;
      switch (e.type) {
        case 'touchmove':
          clientX = e.originalEvent.changedTouches[0].clientX;
          break;
        case 'mousemove':
          clientX = e.clientX;
          break;
      }

      this.virtualBallX2 = clientX;

      var deltaX = self._mousedownPos + this.virtualBallX2 - this.virtualBallX1;
      if (deltaX >= self._option.maxAmplitude) {
        deltaX = self._option.maxAmplitude;
      }

      if (deltaX <= -self._option.maxAmplitude) {
        deltaX = -self._option.maxAmplitude;
      }

      var tempX = deltaX + parseInt(this.virtualBallLeft);
      self.moveDelta = Math.abs(deltaX - self._mousedownPos);
      //拖动距离大于1px小球才动
      if (self.moveDelta > 1) {
        $virtualBall.css('left', tempX);
        dragMoveCb && dragMoveCb(deltaX);
        // 判断是否拖动过
        self.hasMove = true;
      }
      e.stopPropagation();
    },

    create: function create(option, eventBus, model) {
      var ins = Object.create(this);
      ins._option = option;
      if (ins._option.runTime == 'mobile') {
        MODEL_CONFIG.SPRING_DATA.tubularSegments = 6;
      }
      ins._eventBus = eventBus;
      ins._springModel = model;
      return ins;
    },

    /**
     *
     * @param dom 容器
     * @param dragStart 拖动开始
     * @param dragMoveCb 拖动中
     * @param dragEndCb 拖动结束
     */
    draw: function draw(dom, dragStart, dragMoveCb, dragEndCb) {
      var self = this;
      self.$dom = $(dom);
      self._initThree(self.$dom);

      //  开启requestAnimationFrame
      self.threeRender = function renderScene() {
        requestAnimationFrame(renderScene.bind(self));
        self._renderer.render(self._scene, self._camera);
      };
      self.threeRender();
      self._bindEvent(dragStart, dragMoveCb, dragEndCb);
    },

    /**
     * 重绘
     */
    redraw: function redraw() {
      var offsetX = this._springModel.getDisplacement();
      $virtualBall.css('left', offsetX + parseInt(ballOriginalLeft));
      this._setBall(offsetX);
    },

    /**
     * 获取位移
     * @returns {number} 返回位移，单位px
     */
    getDisplacement: function getDisplacement() {
      return this._threeTopx(this._ballMesh.position.z);
    },

    /**
     * 获取球位置
     * @returns {{y: *, x: *}}
     */
    getBallOriginalPos: function getBallOriginalPos() {
      var x = this._threeTopx(this._ballMesh.position.z);
      var pos = {
        'y': 0,
        'x': x
      };
      return pos;
    },

    /**
     * 设置是否可以拖动
     * @param able true可以拖动，false不可以拖动
     */
    setDragAble: function setDragAble(able) {
      this._dragAble = able;
    },

    destroy: function destroy() {
      $(document.body).off('touchmove mousemove');
      $(document.body).off('touchend mouseup');
    },

    /**
     * 全屏适配
     * @param $dom 包围canvas的容器，jquery对象
     * @param ratio 比例
     */
    onResizeScreen: function onResizeScreen($dom, ratio) {
      this._domHeight = $dom.height();
      this._domWidth = $dom.width();
      var halfWidth = this._domWidth / 2;
      var halfHeight = this._domHeight / 2;
      var cameraFactor = this._domWidth / MODEL_CONFIG.SCENE_LENGTH;
      var cameraSize = {
        left: -halfWidth / cameraFactor,
        right: halfWidth / cameraFactor,
        top: halfHeight / cameraFactor,
        bottom: -halfHeight / cameraFactor
      };
      this._camera.left = -MODEL_CONFIG.WOOD_THICK / 2;
      this._camera.right = 2 * cameraSize.right - MODEL_CONFIG.WOOD_THICK / 2;
      this._camera.top = cameraSize.top;
      this._camera.bottom = cameraSize.bottom;
      this._camera.updateProjectionMatrix();
      this._renderer.setSize(this._domWidth, this._domHeight);

      // const left = $virtualBall.css('left')
      // $virtualBall.css('left', parseFloat(left) * ratio)
      ballOriginalLeft = parseFloat(ballOriginalLeft) * ratio;
      this._initRatio *= ratio;
      this.redraw = function () {
        var offsetX = this._springModel.getDisplacement();
        $virtualBall.css('left', offsetX + parseInt(ballOriginalLeft));
        this._setBall(offsetX / this._initRatio);
      };
      this.redraw();
    }
  };
  return View;
});
'use strict';

/**
 * Created by ylf on 2016/10/24.
 */

define('SpringComposite', ['SpringController', 'SpringConfig'], function (Spring, Config) {

    var Tip = {
        _isTipShow: false,
        _$tip: null,
        create: function create($view) {
            var ins = Object.create(this);
            ins._$tip = $view.find('._js_tips_box');
            return ins;
        },
        isTipShowed: function isTipShowed() {
            return this._isTipShow;
            //var show = localStorage.getItem("spring_tip_show");
            //return show === '2';
        },
        setTipShowed: function setTipShowed() {
            this._isTipShow = true;
            //localStorage.setItem("spring_tip_show", '2');
        },
        setTipVisible: function setTipVisible(visible) {
            if (visible) {
                this._$tip.removeClass('hide_dom');
            } else {
                this._$tip.addClass('hide_dom');
            }
            this.setTipShowed();
        },
        getTipVisible: function getTipVisible() {
            return !this._$tip.hasClass('hide_dom');
        }
    };

    var SpringComposite = {
        _tip: false,
        _spring: null,
        _$spring: null,
        _$tip: null,
        _defaultMargin: 0,
        _option: null,
        _handAnim: null,
        _needHandTip: true,
        _eventBus: null,
        create: function create(eventBus, $view, option) {
            var ins = Object.create(this);
            ins._option = option;
            ins._findView($view);
            ins._tip = Tip.create($view);
            ins._eventBus = eventBus;
            ins._init(eventBus);
            ins._bindEvent();
            return ins;
        },
        _findView: function _findView($view) {
            //提示
            this._$tip = $view.find('._js_tips_box');
            //手势
            this._$tipHand = $view.find('._js_tips_hand');
            //弹簧容器
            this._$spring = $view.find('._js_so_view');
            //M'点
            this._$mLeft = $view.find('._js_mleft');
            this._$mLeftLine = $view.find('._js_mleft_line');
            //M点
            this._$mRight = $view.find('._js_mright');
            this._$mRightLine = $view.find('._js_mright_line');
            //O点
            this._$o = $view.find('._js_omid');
        },
        setTipVisible: function setTipVisible(visible) {
            this._tip.setTipVisible(visible);
            if (visible) {
                this._$tip.css('left', '50%');
                this.initTipPos();
            }
        },
        initTipPos: function initTipPos() {
            if (this._spring) {
                var subHeight = this._$spring.outerHeight() - this._$tip.outerHeight();
                this._$tip.css('top', subHeight / 2 + 'px');
                // var displacement = this._spring.getModel().getDisplacement();
                // var left = parseInt(this._$tip.css('left'));
                // this._$tip.css('left', left + displacement + 'px');
            }
        },
        setPosODirection: function setPosODirection(direction) {
            this._posODirection = direction;
        },
        getPosODirection: function getPosODirection() {
            return this._posODirection || '';
        },
        _bindEvent: function _bindEvent() {
            var that = this;

            that._$mLeft.on('click', function () {
                if (!that._$mLeft.hasClass('click_disabled')) {
                    that._spring.changePos('m\'');
                }
            });

            that._$o.on('click', function () {
                if (!that._$o.hasClass('click_disabled')) {
                    if (!that.getNeedHandTip() && that._spring.getModel().getDisplacement() === 0) {
                        that._spring.changePos('o');
                    } else {
                        that._spring.changePos('o');
                    }
                }
            });

            that._$mRight.on('click', function () {
                if (!that._$mRight.hasClass('click_disabled')) {
                    that._spring.changePos('m');
                }
            });

            //点击任意位置隐藏小球提示
            //失去焦点，隐藏控件
            this._eventBus.on('domblur', function (id) {
                if (id !== Config.MENU_ITEM_UUID) {
                    that.setTipVisible(false);
                }
            });
        },
        scale: function scale(ratio) {
            this._spring.scale(ratio);
            this.initTipPos();
            this._ratio = ratio;
            if (this._spring.getAmplitude() === 0) {
                this._updateButtonPos(0);
            }
        },
        _init: function _init(eventBus) {
            var that = this;
            //第一次打开显示提示
            if (this._tip.isTipShowed()) {
                that.setTipVisible(false);
            } else {
                //和小球居中处理

                that.setTipVisible(true);
            }

            //初始化弹簧
            this._defaultAmplitude = Math.abs(Math.round(parseFloat(this._$mLeft.css('left'))));
            var maxAmplitude = this._defaultAmplitude / this._option.amplitudePercent;

            this._spring = Spring.create($.extend({
                periodPercent: 0.5,
                amplitudePercent: 0.5,
                width: this._$spring.width(),
                height: this._$spring.height(),
                pos: 'o',
                maxAmplitude: maxAmplitude,
                onDragStart: function onDragStart() {
                    that.setTipVisible(false);
                }
            }, this._option), eventBus);
        },
        render: function render() {
            var that = this;

            this._spring.on('amplitudechange', function (id, amplitude) {
                that._updateButtonPos(amplitude);
            });

            this._spring.on('resetAble', function (id, able) {
                that._updateResetAble(able);
            });

            this._spring.on('play', function () {
                //一旦播放过就不需要提示了
                that.setNeedHandTip(false);
            });

            this._spring.render(this._$spring[0]);
        },
        renderData: function renderData(data) {
            if (data && data.spring) {
                this._spring.renderData(data.spring);
                this._tip.setTipVisible(data.tipVisible);
            }
            this.initTipPos();
        },
        _updateButtonPos: function _updateButtonPos(amplitude) {
            var sub = 2;
            //获取按钮宽度
            var minWidth = this._$mLeft.outerWidth() + sub;
            //虚线宽度
            var dashLineWidth = parseFloat(this._$mLeftLine.css('borderLeftWidth'));

            amplitude = Math.round(amplitude + dashLineWidth);
            //小于最小限制
            if (amplitude <= minWidth) {
                this._$mLeft.css('left', -minWidth + 'px');
                this._$mLeftLine.css('marginLeft', minWidth - amplitude + 'px');
                this._$mRight.css('left', minWidth + 'px');
                //加上虚线宽度
                this._$mRightLine.css('marginLeft', -(minWidth - amplitude + dashLineWidth) + 'px');
            } else {
                this._$mLeft.css('left', -amplitude + 'px');
                this._$mLeftLine.css('marginLeft', '0px');
                this._$mRight.css('left', amplitude + 'px');
                this._$mRightLine.css('marginLeft', -dashLineWidth + 'px');
            }
        },
        getData: function getData() {
            var data = {};
            data.spring = this._spring.getData();
            data.tipVisible = this._tip.getTipVisible();
            return data;
        },
        reset: function reset() {
            if (this._handAnim) {
                this._handAnim.stop();
            }
            this._$tipHand.addClass('hide_dom');
            this.setPosClickAble(true);
            this.setNeedHandTip(true);
            this._spring.reset();
        },
        play: function play(count) {
            var that = this;
            //手指移动过程中，不允许播放
            if (this._handAnim && this._handAnim.isRunning()) {
                return;
            }
            if (this.getNeedHandTip()) {
                this._animHandTip(function () {
                    that._spring.play(count);
                });
            } else {
                this._spring.play(count);
            }
        },
        slow: function slow() {
            var that = this;
            //手指移动过程中，不允许播放
            if (this._handAnim && this._handAnim.isRunning()) {
                return;
            }
            if (this.getNeedHandTip()) {
                this._animHandTip(function () {
                    that._spring.slow();
                });
            } else {
                this._spring.slow();
            }
        },
        getSpring: function getSpring() {
            return this._spring;
        },
        setDragAble: function setDragAble(able) {
            return this.getSpring().setDragAble(able);
        },
        getResetAble: function getResetAble() {
            return this._spring.getResetAble();
        },
        changePos: function changePos(p) {
            this._spring.changePos(p);
        },
        setNeedHandTip: function setNeedHandTip(needHandTip) {
            this._needHandTip = needHandTip;
        },
        getNeedHandTip: function getNeedHandTip() {
            return this._spring.isTurnPosO() && this._spring.getAmplitude() > 0 && this._needHandTip && !this._spring.getModel().getPlayed();
        },
        _animHandTip: function _animHandTip(cb) {
            var that = this;
            this._$tipHand.removeClass('hide_dom');
            this._$tipHand.css('left', '50%');
            var left = parseInt(this._$tipHand.css('left'));
            this._animToM(function (displacement, stop) {
                that._$tipHand.css('left', left + displacement + 'px');
                if (stop) {
                    that._$tipHand.addClass('hide_dom');
                    that._spring.changePos('m');
                    cb && cb();
                }
            });
        },
        _animToM: function _animToM(cb) {
            var that = this;
            var amplitude = that._spring.getModel().getAmplitude();
            var PIX_PER_MS = amplitude / 500;
            var stop = false;
            this._handAnim = new Konva.Animation(function (frame) {
                var lastDisplacement = that._spring.getModel().getDisplacement();

                var newDisplacement = lastDisplacement + PIX_PER_MS * frame.timeDiff;
                if (newDisplacement >= amplitude) {
                    newDisplacement = amplitude;
                    stop = true;
                    that._handAnim.stop();
                }

                //重置弹簧长度、球体位置
                that._spring.getModel().setDisplacement(newDisplacement, 0, stop);
                //重绘
                that._spring.redraw();
                cb && cb(newDisplacement, stop);
            });
            this._handAnim.start();
        },
        setPosClickAble: function setPosClickAble(able) {
            if (able) {
                this._$mLeft.removeClass('click_disabled');
                this._$o.removeClass('click_disabled');
                this._$mRight.removeClass('click_disabled');
            } else {
                this._$mLeft.addClass('click_disabled');
                this._$o.addClass('click_disabled');
                this._$mRight.addClass('click_disabled');
            }
        },
        destroy: function destroy() {
            this._spring.destroy();
        }
    };
    return SpringComposite;
});
'use strict';

/**
 * Created by ylf on 2016/10/24.
 */

define('SpringController', ['SpringLogger', 'SpringModel', 'Spring3DView'], function (Logger, SpringModel, SpringView) {

    var INIT_VAL = -9999;

    var Option = {
        periodPercent: 0.5, //百分比
        amplitudePercent: 0.5, //perc
        period: 3000, //
        amplitude: 100, //
        width: 100,
        height: 100,
        maxPeriod: 5000,
        minPeriod: 1000,
        maxAmplitude: 200,
        slowPeriod: 5000,
        pos: 'm',
        onDragStart: null
    };

    var Spring = {
        _eventBus: null,
        _option: null,
        _anim: null, //动画
        _subFrameTime: 0, //为了平滑过渡周期、振幅变化而产生的时间差值
        _springModel: null,
        _springView: null,
        create: function create(option, eventBus) {
            var ins = Object.create(this);
            ins._option = $.extend(true, {}, Option, option);
            ins._eventBus = eventBus;

            //计算实际初始化周期和振幅
            ins._option.period = ins._option.periodPercent * ins._option.maxPeriod;
            ins._option.amplitude = ins._option.amplitudePercent * ins._option.maxAmplitude;

            ins._springModel = SpringModel.create(ins._option, eventBus);
            ins._springView = SpringView.create(ins._option, eventBus, ins._springModel);
            return ins;
        },
        render: function render(dom) {
            var that = this;
            this._$container = dom;
            this._springView.draw(dom, function () {
                that._option.onDragStart && that._option.onDragStart();
            }, function (displacement) {
                //重置弹簧长度、球体位置
                that._springModel.setDisplacement(displacement);
                //重绘
                that.redraw();
            }, function (displacement) {
                //记录初始运动位置
                //重置振幅
                that._springModel.setAmplitude(Math.abs(displacement));
                //that._springModel.setAmplitudeDirection(displacement > 0 ? 'm' : 'm\'');
                that.changePos(displacement > 0 ? 'm' : 'm\'');
                //重绘
                that.redraw();
                that.play();
            });

            this._updateFormulas();
            this._createAnim();
        },
        scale: function scale(ratio) {
            this._ratio = ratio;
            this._option.maxAmplitude *= ratio;
            this._option.amplitude *= ratio;
            this._springModel.setDisplacement(this._springModel.getDisplacement() * ratio);
            this._springModel.setAmplitude(this._springModel.getAmplitude() * ratio);
            this._springView.onResizeScreen($(this._$container), ratio);
        },
        renderData: function renderData(data) {
            if (data) {
                this.setData(data);
                this.redraw();
            }
        },
        getData: function getData() {
            var data = {};
            //data.subFrameTime = this._anim.frame.time + this._subFrameTime;
            data.subFrameTime = this._dataStartFrameTime;
            data.isPlaying = this.isPlaying();
            data.played = this._springModel.getPlayed();
            data.vibrationCount = this._springModel.getVibrationCount();
            data.direction = this._springModel.getDirection();
            data.amplitudeDirection = this._springModel.getAmplitudeDirection();
            data.isSlowPlaying = this._springModel.getIsSlowPlaying();
            data.period = this._springModel.getPeriod();
            data.amplitudePercent = this._springModel.getAmplitudePercent();
            data.resetAble = this._springModel.getResetAble();
            data.dragAble = this._dragAble;
            data.currentDisplacementPos = this._dataCurrentDisplacementPos;
            return data;
        },
        setData: function setData(data) {

            //播放中直接从第一帧开始
            this._subFrameTime = data.subFrameTime || 0;

            this._springModel.setPlayed(data.played);
            this._springModel.setVibrationCount(data.vibrationCount);
            this._springModel.setDirection(data.direction);
            this._springModel.setAmplitudeDirection(data.amplitudeDirection);
            this._springModel.setIsSlowPlaying(data.isSlowPlaying);
            this._springModel.setPeriod(data.period);
            this._springModel.setAmplitude(data.amplitudePercent * this._option.maxAmplitude);
            this._springModel.setResetAble(data.resetAble);

            var x = this._springModel.getAmplitude() * Math.sin(this._springModel.getSin(this._subFrameTime));
            this._springModel.setDisplacement(x);
            if (data.currentDisplacementPos) {
                var x = 0;
                if (data.currentDisplacementPos === 'm') {
                    x = this._springModel.getAmplitude();
                } else if (data.currentDisplacementPos === 'm\'') {
                    x = -this._springModel.getAmplitude();
                } else if (data.currentDisplacementPos === 'o') {
                    x = 0;
                }
                this._springModel.setDisplacement(x);
            }
            this.setDragAble(data.dragAble);
        },
        setSubFrameTime: function setSubFrameTime(subFrameTime) {
            this._subFrameTime = subFrameTime;
        },
        getSubFrameTime: function getSubFrameTime() {
            return this._subFrameTime || 0;
        },
        getOption: function getOption() {
            return this._option;
        },
        changeDefaultAmplitude: function changeDefaultAmplitude(percent) {
            this._option.amplitude = percent * this._option.maxAmplitude;
        },
        changeDefaultPos: function changeDefaultPos(pos) {
            this._option.pos = pos;
        },
        _updateFormulas: function _updateFormulas() {
            var that = this;

            this.on('periodchange', function (id, period) {
                that._eventBus.trigger('formulaChange', id, that.getCurrentFormula(), 'periodchange');
            });
            this.on('amplitudechange', function (id, amplitude) {
                that._eventBus.trigger('formulaChange', id, that.getCurrentFormula(), 'amplitudechange');
            });
            this.on('formulaChange', function (id, period) {
                that.updateStartFrameTime();
            });
        },
        getAmplitude: function getAmplitude() {
            return this._springModel.getAmplitude();
        },
        getCurrentFormula: function getCurrentFormula() {
            var formula = {
                amplitude: this._springModel.getAmplitude(),
                period: this._springModel.getPeriod(),
                phi: this._springModel.getPhi(),
                startTime: this._anim.frame.time + this._subFrameTime,
                endTime: this._anim.frame.time + this._subFrameTime
            };
            //转换为正常周期的时间值，内部还是慢放周期时间
            if (this._springModel.getIsSlowPlaying()) {
                var subFrameTime = this._getPeriodSubFrameTime(this._springModel.getInsidePeriod(), this._springModel.getPeriod());
                formula.startTime = this._anim.frame.time + subFrameTime;
                formula.endTime = this._anim.frame.time + subFrameTime;
            }
            return formula;
        },
        _createAnim: function _createAnim() {
            var that = this;

            this._anim = new Konva.Animation(function (frame) {
                //正弦函数： y=Asin(ωx+φ)+k
                var amplitude = that._springModel.getAmplitude();
                var period = that._springModel.getInsidePeriod();
                var frameTime = frame.time + (that._subFrameTime || 0);
                var x = amplitude * Math.sin(that._springModel.getSin(frameTime));

                var lastX = that.getModel().getDisplacement();

                //判断当前弹簧的运动方向
                var direction = lastX > x ? 'toleft' : 'toright';
                that._springModel.setDirection(direction);

                //强制改变位移为0的值，只有通过点击0点才能将位移设置为0
                if (x === 0) {
                    if (direction === 'toleft') {
                        x = -0.0001;
                    } else {
                        x = 0.0001;
                    }
                }

                //处理播放指定次数
                var startPlayCount = that._springModel.getVibrationCount() > 0;
                if (startPlayCount && that._anim._playCount) {
                    var playCount = that._anim._playCount;
                    var startDisplacement = playCount.startDisplacement;
                    Logger.debug('go-------------', lastX, x, startDisplacement);

                    //初始位移在前后两次位置内，则命中
                    if (lastX >= startDisplacement && x <= startDisplacement || lastX <= startDisplacement && x >= startDisplacement) {
                        //点在运动区间内，则球经过改点一次
                        playCount.hitCount++;
                        if (playCount.hitCount === 3) {
                            //第一次命中3次，之后一个周期命中2次
                            playCount.hitCount = 1;
                            that._springModel.setVibrationCount(that._springModel.getVibrationCount() - 1);
                        }
                    }

                    if (frameTime - playCount.lastTime >= period * playCount.playCount) {
                        that.pause();
                        x = startDisplacement;
                        that._springModel.setVibrationCount(0);
                        //排除o点，更改o点会影响当前时间戳
                        if (playCount.pos && playCount.pos !== 'o') {
                            that._springModel.changeAmplitudeDirection(playCount.pos);
                        }
                    }

                    //播放完成，更新位移为初始位移值
                    if (that._springModel.getVibrationCount() <= 0) {
                        that.pause();
                        x = startDisplacement;
                        //排除o点，更改o点会影响当前时间戳
                        if (playCount.pos && playCount.pos !== 'o') {
                            that._springModel.changeAmplitudeDirection(playCount.pos);
                        }
                    }
                }

                that._springModel.setDisplacement(x, that._anim.frame.timeDiff);
                that.redraw();
            });
        },
        play: function play(count, slow) {
            //重置慢放
            if (this._springModel.getIsSlowPlaying() && !slow) {
                this.changePlayMode(false);
            }
            this._springModel.setVibrationCount(count || -1);

            if (this.isTurnPosO()) {
                //重置回从m点为起始位置开始运动
                if (this._springModel.getDirection() === 'toleft') {
                    //运动到o点刚好是经过了1/4周期
                    this.setSubFrameTime(this.getSubFrameTime() + this._springModel.getInsidePeriod() / 4);
                } else if (this._springModel.getDirection() === 'toright') {
                    //运动到o点刚好是经过了1/4周期
                    this.setSubFrameTime(this.getSubFrameTime() - this._springModel.getInsidePeriod() / 4);
                }

                this._springModel.setAmplitudeDirection('m');
                this._eventBus.trigger('poschange', this._springModel.getId(), 'o', this._springModel.getDisplacement(), this._springModel.getDirection());
            }
            if (count > 0) {
                var startDisplacement = this.getModel().getDisplacement();
                var pos = '';
                if (startDisplacement === 0) {
                    pos = 'o';
                } else if (startDisplacement === this.getAmplitude()) {
                    pos = 'm';
                } else if (startDisplacement === -this.getAmplitude()) {
                    pos = 'm\'';
                }

                this._anim._playCount = {
                    startDisplacement: startDisplacement,
                    lastX: startDisplacement,
                    hitCount: 0,
                    pos: pos,
                    playCount: count,
                    lastTime: this._anim.frame.time + this._subFrameTime
                };
            } else {
                this._anim._playCount = null;
            }
            this._anim.start();
            this._springModel.setResetAble(true);
            this._springModel.setPlayed(true);
            this.setDragAble(false); //这个地方学生端是否和老师端一样同步不可播放状态
            //this._springView.setDragAble(false);
            this.updateStartFrameTime();
            this._eventBus.trigger('play', this._springModel.getId(), slow);
        },
        hold: function hold() {
            if (this._anim) {
                this._anim.stop();
            }
        },
        restore: function restore() {
            if (this._anim) {
                this._anim.start();
            }
        },
        pause: function pause() {
            var isPlaying = this.isPlaying();
            if (this._anim) {
                this._anim.stop();
                this.updateStartFrameTime();
            }

            if (isPlaying) {
                this._eventBus.trigger('pause', this._springModel.getId());
            }
        },
        isPlaying: function isPlaying() {
            if (this._anim) {
                return this._anim.isRunning();
            }
            return false;
        },
        isSlowPlaying: function isSlowPlaying() {
            return this.isPlaying() && this._springModel.getIsSlowPlaying();
        },
        getResetAble: function getResetAble() {
            return this._springModel.getResetAble();
        },
        reset: function reset() {
            //暂停动画
            this.pause();
            //重置动画
            this._createAnim();
            //还原数据
            this._springModel.reset();
            this.setSubFrameTime(0);
            this._anim._startX = INIT_VAL;
            this.redraw();
            //触发重新计算
            this.updateStartFrameTime();
            this._eventBus.trigger('reset', this._springModel.getId());
        },
        redraw: function redraw() {
            //触发重绘
            this._springView.redraw(this._springModel.getDisplacement());
        },
        changeAmplitude: function changeAmplitude(amplitudePercent) {
            if (amplitudePercent > 1) {
                amplitudePercent = 1;
            }
            var amplitude = this._option.maxAmplitude * amplitudePercent;

            //上一帧振幅位置
            var lastAmplitudeX = this._springView.getDisplacement();
            var period = this._springModel.getInsidePeriod();

            if (Math.abs(lastAmplitudeX) <= amplitude && amplitude > 0) {
                //上一帧时间
                var lastFrameTime = this._anim.frame.time + this.getSubFrameTime();
                //计算这次的math.sin值
                var mathNeedSin = lastAmplitudeX / amplitude;
                var asin = Math.asin(mathNeedSin);
                //周期变化后，以新周期重新计算相同位置的时间值
                var time = (asin - this._springModel.getPhi()) * period / (2 * Math.PI);
                Logger.debug('time', time, period, time / period);
                //方向相反了
                if (this._springModel.getDirection() === 'toleft') {
                    time = -time;
                }
                //设置时间差
                this.setSubFrameTime(this.getSubFrameTime() + time - lastFrameTime);
            }

            //慢放情况下，重新更新播放周期
            //if (this._springModel.getIsSlowPlaying()) {
            //    var slowPeriod = this._springModel.getMathSlowPeriod();
            //    this._updatePeriodSubFrameTime(this._springModel.getInsidePeriod(), slowPeriod);
            //    this._springModel.setSlowPeriod(slowPeriod);
            //}

            this._springModel.setAmplitude(amplitude);

            //没有播放的情况触发重绘
            if (!this.isPlaying()) {
                var displacement = this._springModel.getDisplacement();
                if (Math.abs(displacement) > amplitude) {
                    if (displacement < 0) {
                        amplitude = -amplitude;
                    }
                    this._springModel.setDisplacement(amplitude);
                }
                this.redraw();
            }
        },
        changePeriod: function changePeriod(periodPercent) {
            if (periodPercent > 1) {
                periodPercent = 1;
            }
            var period = this._option.maxPeriod * periodPercent;

            //周期未变化
            if (period === this._springModel.getPeriod()) {
                return;
            }

            //this.changePlayMode(false);
            this._updatePeriodSubFrameTime(this._springModel.getInsidePeriod(), period);
            this._springModel.setIsSlowPlaying(false);
            //周期变化后，以新周期重新计算相同位置的时间值
            this._springModel.setPeriod(period);
        },
        changePeriodSlowMode: function changePeriodSlowMode(periodPercent) {
            if (periodPercent > 1) {
                periodPercent = 1;
            }
            var period = this._option.maxPeriod * periodPercent;
            //周期未变化
            if (period === this._springModel.getPeriod()) {
                return;
            }
            this._springModel.setPeriod(period);
        },
        //周期变化后，以新周期重新计算相同位置的时间值
        _updatePeriodSubFrameTime: function _updatePeriodSubFrameTime(lastPeriod, period) {
            var lastSubTime = this._getPeriodSubFrameTime(lastPeriod, period);
            //设置时间差
            this.setSubFrameTime(lastSubTime);
        },
        _getPeriodSubFrameTime: function _getPeriodSubFrameTime(lastPeriod, period) {
            //上一帧时间
            var lastFrameTime = this._anim.frame.time + this.getSubFrameTime();
            //上一帧正弦值
            var lastFrameSin = this._springModel.getSin(lastFrameTime, lastPeriod);

            var time = (lastFrameSin - this._springModel.getPhi()) * period / (2 * Math.PI);

            return this.getSubFrameTime() + time - lastFrameTime;
        },
        slow: function slow() {
            var isSlowMode = this._springModel.getIsSlowPlaying();
            if (!isSlowMode || !this.isPlaying()) {
                this.changePlayMode(true);
                this.play(-1, true);
            }
        },
        changePlayMode: function changePlayMode(slow) {
            var lastPeriod = this._springModel.getInsidePeriod();
            if (slow) {
                var slowPeriod = this._springModel.getMathSlowPeriod();
                this._springModel.setIsSlowPlaying(true);
                this._updatePeriodSubFrameTime(lastPeriod, slowPeriod);
                this._springModel.setSlowPeriod(slowPeriod);
            } else {
                this._springModel.setIsSlowPlaying(false);
                this._updatePeriodSubFrameTime(lastPeriod, this._springModel.getInsidePeriod());
            }
        },
        changePos: function changePos(pos, direction) {

            //暂停动画
            this.pause();
            //重置动画
            this._createAnim();
            //还原数据
            this.setSubFrameTime(0);
            this._anim._startX = INIT_VAL;

            if (this._springModel.getIsSlowPlaying()) {
                this.changePlayMode(false);
            }

            var lastDm = this._springModel.getDisplacement();
            var lastDirection = this._springModel.getDirection();
            this._springModel.changeAmplitudeDirection(pos);
            this.redraw();

            this.updateStartFrameTime();

            this._eventBus.trigger('poschange', this._springModel.getId(), pos, lastDm, lastDirection);
        },
        /**
         * 更新当前小球所在位置的时间点
         * 周期、振幅、慢放、播放、暂停时，都需要更新这个值
         */
        updateStartFrameTime: function updateStartFrameTime() {
            //if (this._springModel.getIsSlowPlaying()) {
            //    subFrameTime = this._getPeriodSubFrameTime(this._springModel.getInsidePeriod(), this._springModel.getPeriod());
            //}
            this._dataStartFrameTime = this._anim.frame.time + this.getSubFrameTime();
            var roundDisplacement = Math.round(this._springModel.getDisplacement());
            var roundAmplitude = Math.round(this._springModel.getAmplitude());
            //更新当前所在位置是否运动在MO上
            if (roundDisplacement === roundAmplitude) {
                this._dataCurrentDisplacementPos = 'm';
            } else if (-roundDisplacement === roundAmplitude) {
                this._dataCurrentDisplacementPos = 'm\'';
            } else if (roundDisplacement === 0) {
                this._dataCurrentDisplacementPos = 'o';
            } else {
                this._dataCurrentDisplacementPos = '';
            }
        },
        getStartFrameTime: function getStartFrameTime() {
            return this._anim.frame.time + this.getSubFrameTime();
        },
        getPos: function getPos() {
            return this._springModel.getAmplitudeDirection();
        },
        //是否调整定位到o位置
        isTurnPosO: function isTurnPosO() {
            return this.getPos() === 'o' && !this.isPlaying() && this.getModel().getDisplacement() === 0;
        },
        getModel: function getModel() {
            return this._springModel;
        },
        getView: function getView() {
            return this._springView;
        },
        on: function on(key, callback) {
            this._eventBus.on(key, callback);
        },
        off: function off(key, cb) {
            this._eventBus.off(key, cb);
        },
        setDragAble: function setDragAble(able) {
            this._dragAble = able;
            this._springView.setDragAble(able);
        },
        destroy: function destroy() {
            if (this._springView.destroy) {
                this._springView.destroy();
            }
        }
    };
    return Spring;
});
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * Created by ylf on 2016/10/24.
 */

define('SpringFormula', ['SpringLogger'], function (Logger) {

    var Formula = {
        EACH_SECOND: 50,
        _points: [], //点集
        _pointsStartTime: -1, //当前公式开始时间
        _amplitude: 0, //振幅
        _period: 0, ///周期
        _phi: 0, //x轴偏移
        _startTime: -1, //点开始时间
        _endTime: 0,
        _originalPointCount: 0, //实际生产的点数
        create: function create(amplitude, period, phi, startTime, endTime) {
            var ins = Object.create(this);
            ins._points = [];
            ins._amplitude = amplitude;
            ins._period = period;
            ins._phi = phi;
            ins._startTime = startTime;
            ins._endTime = endTime;
            return ins;
        },
        getDrawBallEachMs: function getDrawBallEachMs() {
            var eachSecond = Formula.EACH_SECOND;
            switch (this.getPeriod()) {
                case 1000:
                    eachSecond = 20;
                    break;
                case 2000:
                    eachSecond = 32;
                    break;
                case 3000:
                    eachSecond = 45;
                    break;
                case 4000:
                    eachSecond = 50;
                    break;
                case 5000:
                    eachSecond = 55;
                    break;
                case 6000:
                    eachSecond = 60;
                    break;
                case 7000:
                    eachSecond = 65;
                    break;
                case 8000:
                    eachSecond = 70;
                    break;
                case 9000:
                    eachSecond = 75;
                    break;
                case 10000:
                    eachSecond = 80;
                    break;
                default:
                    eachSecond = Formula.EACH_SECOND;
                    break;
            }
            return eachSecond;
        },
        //公式变化
        formulaChange: function formulaChange(amplitude, period, phi, startTime) {
            this._pointsStartTime = -1;
            this._points = [];
            this._period = period;
            this._phi = phi;
            this._startTime = startTime;
            this._endTime = startTime;
        },
        scale: function scale(ratio) {
            this._amplitude *= ratio;
            this._points.forEach(function (p) {
                p.x *= ratio;
            });
        },
        addEndTimeDiff: function addEndTimeDiff(timeDiff) {
            this._endTime += timeDiff;
        },
        isEmpty: function isEmpty() {
            return this.getEndTime() - this.getStartTime() <= 0;
        },
        getPeriod: function getPeriod() {
            return this._period;
        },
        getPhi: function getPhi() {
            return this._phi;
        },
        getAmplitude: function getAmplitude() {
            return this._amplitude;
        },
        getStartTime: function getStartTime() {
            return this._startTime;
        },
        getEndTime: function getEndTime() {
            return this._endTime;
        },
        setEndTime: function setEndTime(endTime) {
            this._endTime = endTime;
        },
        getSin: function getSin(frameTime) {
            return frameTime * 2 * Math.PI / this.getPeriod() + this.getPhi();
        },
        initPoints: function initPoints(maxCount, reverse) {
            if (!this._period) {
                return;
            }
            maxCount = (typeof maxCount === 'undefined' ? 'undefined' : _typeof(maxCount)) === (typeof undefined === 'undefined' ? 'undefined' : _typeof(undefined)) ? 500 : maxCount;

            var drawBallEachMs = this.getDrawBallEachMs();

            if (this._pointsStartTime == -1) {
                this._pointsStartTime = this._startTime - drawBallEachMs;
            }
            var period = this._period;
            //period = 12000;

            for (var i = this._pointsStartTime + drawBallEachMs; i < this.getEndTime(); i = i + drawBallEachMs) {
                var time = i;
                this._pointsStartTime = i;
                //这里减少5，使得点可以完全显示
                var x = 0;
                //振幅大于0，才进行公式计算

                if (this._amplitude > 0) {
                    x = (this._amplitude - 5) * Math.sin(time * 2 * Math.PI / period + this._phi);
                }
                this._points.push({
                    x: x,
                    y: 0
                });
                this._originalPointCount++;
            }
        },
        getPoints: function getPoints() {
            this.initPoints();
            return this._points;
        },
        getPointsByPeriod: function getPointsByPeriod(periodCount) {
            var points = [];
            for (var i = this._startTime; i < this._endTime; i = i + this.getDrawBallEachMs(false)) {
                if (this._originalPointCount > 0 && points.length > this._originalPointCount) {
                    break;
                }
                var time = i;
                var x = this._amplitude * Math.sin(time * 2 * Math.PI / this._period + this._phi);
                points.push({
                    x: x,
                    y: 0
                });
                //只获取指定个周期
                if (time - this._startTime > this._period * periodCount) {
                    break;
                }
            }
            return points;
        },
        reset: function reset() {
            this._points = [];
            this._period = 0;
            this._phi = 0;
            this._pointsStartTime = -1;
            this._startTime = 0;
            this._endTime = 0;
            this._originalPointCount = 0;
        },
        getOriginalPointCount: function getOriginalPointCount() {
            return this._originalPointCount;
        }
    };
    return Formula;
});
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * Created by Administrator on 2016/10/24.
 */

define('SpringMain', ['jQuery.SpTap', 'SpringFlow1', 'SpringFlow2', 'SpringFlow3', 'SpringFlow4', 'SpringEventBus', 'SpringComposite'], function (sp, Flow1, Flow2, Flow3, Flow4, EventBus, SpringComposite) {

    var SpringMain = {
        _flow: [],
        _currentIndex: -1,
        _eventBus: null,
        _$view: null,
        _option: null,
        _springComposite: null,
        create: function create($view, eventBus, option) {
            var ins = Object.create(this);
            ins._flow = [];
            ins._option = option;
            ins._$view = $view;
            ins._eventBus = eventBus;
            ins._findView();
            return ins;
        },
        render: function render(data) {
            var that = this;
            data = data || {};

            this._springComposite = SpringComposite.create(this._eventBus, this._$view, this._option);
            this._springComposite.render();

            this._flow.push(Flow1.create(this._eventBus, this._$view, this._springComposite, this._option));
            this._flow.push(Flow2.create(this._eventBus, this._$view, this._springComposite, this._option));
            this._flow.push(Flow3.create(this._eventBus, this._$view, this._springComposite, this._option));
            this._flow.push(Flow4.create(this._eventBus, this._$view, this._springComposite, this._option));

            this.changeFlow(data.index || 0);

            this._springComposite.renderData(data.composite);

            if (data.flows) {
                this._flow.forEach(function (flow, i) {
                    flow.render(i === data.index, data.flows[i]);
                });
            } else {
                this._flow.forEach(function (flow, i) {
                    flow.render(i === 0);
                });
            }
        },
        _findView: function _findView() {
            this._$mainBd = this._$view.find('.springOscillator_main_bd');
        },
        setTipVisible: function setTipVisible(visible) {
            this._springComposite.setTipVisible(visible);
        },
        getCurrentIndex: function getCurrentIndex() {
            return this._currentIndex;
        },
        changeFlow: function changeFlow(index, reset) {
            if (index === this._currentIndex) {
                return;
            }
            reset = (typeof reset === 'undefined' ? 'undefined' : _typeof(reset)) === (typeof undefined === 'undefined' ? 'undefined' : _typeof(undefined)) ? true : reset;
            var that = this;
            //上一个模块失去焦点
            if (this._flow[this._currentIndex]) {
                this._flow[this._currentIndex].blur();
            }

            this._currentIndex = index;
            this._$mainBd.removeClass('spolr_show_xt');
            this._$mainBd.removeClass('spolr_show_cycle');
            this._$mainBd.removeClass('spolr_show_analysis');

            switch (index) {
                case 0:
                    break;
                case 1:
                    that._$mainBd.addClass('spolr_show_xt');
                    break;
                case 2:
                    that._$mainBd.addClass('spolr_show_cycle');
                    break;
                case 3:
                    that._$mainBd.addClass('spolr_show_analysis');
                    break;
            }

            //重置弹簧，防止reset内部造成弹簧数据异常情况
            this._springComposite.reset();
            //重置tab页业务
            this._flow[index].reset();
            //获取焦点
            this._flow[index].focus();
        },
        getCurrentFlow: function getCurrentFlow() {
            return this._flow[this._currentIndex];
        },
        getSpring: function getSpring() {
            return this._springComposite.getSpring();
        },
        play: function play(count) {
            this._springComposite.play(count);
        },
        pause: function pause() {
            this.getSpring().pause();
        },
        isPlaying: function isPlaying() {
            return this.getSpring().isPlaying();
        },
        isSlowPlaying: function isSlowPlaying() {
            return this.getSpring().isSlowPlaying();
        },
        reset: function reset() {
            this._springComposite.reset();
            this.getCurrentFlow().reset();
        },
        getData: function getData() {

            var data = {
                index: this.getCurrentIndex(),
                flows: [],
                composite: null
            };

            //第二个模块，获取推送时的实时位置
            //if (data.index === 1) {
            //    this._springComposite.getSpring().updateStartFrameTime();
            //}

            data.composite = this._springComposite.getData();

            this._flow.forEach(function (flow, i) {

                if (flow.getData && i === data.index) {
                    data.flows.push(flow.getData());
                } else {
                    data.flows.push({});
                }
            });

            //第二个模块，显示静态图时，以静态图轨迹为优先
            if (data.index === 1) {
                //TODO:这个写法待优化
                if (data.flows[1].showStatic) {
                    data.composite.spring.subFrameTime = data.flows[1].staticFormula.staticStartFrameTime;
                }
            }

            return data;
        },
        changePos: function changePos(p) {
            this.getSpring().changePos(p);
        },
        changeAmplitude: function changeAmplitude(amplitudePercent) {
            this.getSpring().changeAmplitude(amplitudePercent);
        },
        changePeriod: function changePeriod(periodPercent) {
            this.getSpring().changePeriod(periodPercent);
        },
        slow: function slow() {
            this._springComposite.slow();
        },
        on: function on(type, callback, domain) {
            this._eventBus.on(type, callback, domain);
        },
        off: function off(type, callback, domain) {
            this._eventBus.off(type, callback, domain);
        },
        scale: function scale(ratio) {
            var that = this;
            this._springComposite.scale(ratio);
            this._flow.forEach(function (flow, index) {
                if (index != that._currentIndex) flow.scale(ratio);
            });
            //当前显示的flow最后处理，防止振幅变化导致的代码执行时序异常
            this._flow[that._currentIndex].scale(ratio);
        },
        destroy: function destroy() {
            this._springComposite.destroy();
        }
    };
    return SpringMain;
});
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * Created by ylf on 2016/10/24.
 */

define('SpringModel', ['SpringLogger', 'SpringUtils', 'SpringConfig'], function (Logger, Utils, Config) {

    var Model = {
        _uuid: null,
        _option: null,
        _amplitude: 0, //振幅
        _period: 0, //周期
        _direction: 'toleft', //弹簧振动方向
        _vibrationCount: 0, //全振动次数
        _slowPeriod: Config.SLOW_PERIOD, //慢速周期
        _isSlowPlaying: false, //是否慢速播放
        _amplitudeDirection: '', //振幅位置,对应m' o m
        _displacement: '', //位移
        _resetAble: false, //是否可重置
        _played: false, //是否播放过
        create: function create(option, eventBus) {
            var ins = Object.create(this);
            ins._option = option;
            ins._uuid = Utils.getUuid();
            ins._amplitude = ins._option.amplitude;
            ins._amplitudeDirection = ins._option.pos;
            ins._period = ins._option.period;
            ins._eventBus = eventBus;
            ins._displacement = ins.getDefaultAmplitude();
            return ins;
        },
        getId: function getId() {
            return this._uuid;
        },
        getDirection: function getDirection() {
            return this._direction;
        },
        setDirection: function setDirection(direction) {
            this._direction = direction;
        },
        getAmplitude: function getAmplitude() {
            return this._amplitude;
        },
        getAmplitudePercent: function getAmplitudePercent() {
            return this._amplitude / this._option.maxAmplitude;
        },
        setPlayed: function setPlayed(played) {
            this._played = played;
        },
        getPlayed: function getPlayed() {
            return this._played;
        },
        setAmplitude: function setAmplitude(amplitude) {
            //做过滤取值区间[0~10]的整数
            var percent = Math.round(10 * amplitude / this._option.maxAmplitude);
            if (percent > 10) {
                percent = 10;
            }
            //计算自动吸附后的值
            amplitude = percent * this._option.maxAmplitude / 10;
            var lastAmplitude = this._amplitude;
            this._amplitude = amplitude;
            if (lastAmplitude !== amplitude) {
                this._eventBus.trigger('amplitudechange', this.getId(), this._amplitude, percent * 10);
                this.triggerReset();
            }
        },
        getSlowPeriod: function getSlowPeriod() {
            //return this._option.maxPeriod;
            return this._slowPeriod;
        },
        setSlowPeriod: function setSlowPeriod(slowPeriod) {
            this._slowPeriod = slowPeriod;
        },
        getPeriod: function getPeriod() {
            return this._period;
        },
        getInsidePeriod: function getInsidePeriod() {
            if (this._isSlowPlaying) {
                return this.getSlowPeriod();
            } else {
                return this.getPeriod();
            }
        },
        setPeriod: function setPeriod(period) {
            var lastVal = this._period;
            this._period = period;
            if (lastVal !== period) {
                this._eventBus.trigger('periodchange', this.getId(), this._period);
                this.triggerReset();
            }
        },
        getAmplitudeDirection: function getAmplitudeDirection() {
            return this._amplitudeDirection;
        },
        setAmplitudeDirection: function setAmplitudeDirection(amplitudeDirection) {
            this._amplitudeDirection = amplitudeDirection;
        },
        getIsSlowPlaying: function getIsSlowPlaying() {
            return this._isSlowPlaying;
        },
        setIsSlowPlaying: function setIsSlowPlaying(isSlowPlaying) {
            this._isSlowPlaying = isSlowPlaying;
        },
        getVibrationCount: function getVibrationCount() {
            return this._vibrationCount;
        },
        setVibrationCount: function setVibrationCount(vibrationCount) {
            this._vibrationCount = vibrationCount;
        },
        //获取正弦波的左右偏移初始值
        getPhi: function getPhi() {
            var s = 0;
            if (this._amplitudeDirection === 'm\'') {
                s = -Math.PI / 2; //右偏移1/4周期
            } else if (this._amplitudeDirection === 'm') {
                s = Math.PI / 2; //左偏移1/4周期
            }
            return s;
        },
        //获取正弦公式：ωx+φ
        getSin: function getSin(frameTime, period) {
            if ((typeof period === 'undefined' ? 'undefined' : _typeof(period)) === (typeof undefined === 'undefined' ? 'undefined' : _typeof(undefined))) {
                period = this.getInsidePeriod();
            }
            //正弦函数： y=Asin(ωx+φ)+k
            return frameTime * 2 * Math.PI / period + this.getPhi();
        },
        //获取默认振幅位置
        getDefaultAmplitude: function getDefaultAmplitude() {
            var pos = 0;
            if (this._amplitudeDirection === 'm\'') {
                pos = -this._amplitude;
            } else if (this._amplitudeDirection === 'm') {
                pos = this._amplitude;
            } else if (this._amplitudeDirection === 'o') {}
            return pos;
        },
        getDisplacement: function getDisplacement() {
            return this._displacement;
        },
        setDisplacement: function setDisplacement(displacement, timeDiff, triggerEvent) {
            var lastVal = this._displacement;
            this._displacement = displacement;
            triggerEvent = (typeof triggerEvent === 'undefined' ? 'undefined' : _typeof(triggerEvent)) === (typeof undefined === 'undefined' ? 'undefined' : _typeof(undefined)) ? true : triggerEvent;
            //振幅为0时，也时在振动中，所有这边不在判断和上一次位移是否相同
            if (triggerEvent) {
                this._eventBus.trigger('displacementupdate', this.getId(), displacement, timeDiff || 0, this.getDirection());
            }
        },
        //计算慢速的周期
        getMathSlowPeriod: function getMathSlowPeriod() {
            return Config.SLOW_PERIOD;
            //return Math.round((this._amplitude / 100) * 15000);
        },
        reset: function reset() {
            //还原数据
            this.setPlayed(false);
            this.setAmplitude(this._option.amplitude);
            this.setPeriod(this._option.period);
            this.changeAmplitudeDirection(this._option.pos);
            this.triggerReset(false);
        },
        //改变振幅m o m'位置
        changeAmplitudeDirection: function changeAmplitudeDirection(amplitudeDirection) {
            //还原数据
            this.setAmplitudeDirection(amplitudeDirection);
            if (amplitudeDirection === 'm') {
                this.setDirection('toleft');
            } else if (amplitudeDirection === 'm\'') {
                this.setDirection('toright');
            }
            this.setDisplacement(this.getDefaultAmplitude());
            this.setIsSlowPlaying(false);
            this.triggerReset();
        },
        getResetAble: function getResetAble() {
            return this._resetAble;
        },
        setResetAble: function setResetAble(able) {
            var lastAble = this._resetAble;
            this._resetAble = able;
            if (lastAble !== able) {
                this._eventBus.trigger('resetable', this.getId(), able);
            }
        },
        triggerReset: function triggerReset(able) {
            if ((typeof able === 'undefined' ? 'undefined' : _typeof(able)) === (typeof undefined === 'undefined' ? 'undefined' : _typeof(undefined))) {
                if (this.getPlayed()) {
                    able = true;
                } else if (this.getAmplitudeDirection() !== this._option.pos) {
                    able = true;
                } else if (this.getPeriod() != this._option.period) {
                    able = true;
                } else if (Math.round(this.getAmplitude()) != Math.round(this._option.amplitude)) {
                    able = true;
                } else {
                    able = false;
                }
            }
            this.setResetAble(able);
        }
    };
    return Model;
});
'use strict';

/**
 * Created by ylf on 2016/10/24.
 */

define('SpringView', ['SpringLogger'], function (Logger) {

    var SPRING_DT = 0.5; //绘制贝塞尔曲线的精细度，越小越精细

    var View = {

        _eventBus: null,
        _option: null,
        _state: null,
        _springLayer: null,
        _ballLayer: null,
        _ball: null,
        _springModel: null,
        _config: null,
        _dragAble: true,
        create: function create(option, eventBus, model) {
            var ins = Object.create(this);
            ins._option = option;
            ins._eventBus = eventBus;
            ins._springModel = model;

            ins._config = {
                x: 0, //初始x坐标
                y: ins._option.height / 2, //居中y坐标
                originalWidth: ins._option.width / 2, //原始状态下弹簧宽度
                halfHeight: 30, //弹簧一半宽度
                lineWidth: 8, //弹簧粗细
                count: 10, //弹簧圈数
                ballRadius: 30,
                ballOriginalX: ins._option.width / 2
            };
            return ins;
        },
        draw: function draw(dom, dragStartCb, dragMoveCb, dragEndCb) {
            this._stage = new Konva.Stage({
                container: dom,
                width: this._option.width,
                height: this._option.height
            });
            //绘制弹簧和球
            this._springLayer = new Konva.Layer();
            this._ballLayer = new Konva.Layer();
            //使用context直接绘制，需要提前添加到state里
            this._stage.add(this._springLayer);
            this._drawBgLayer();
            this._drawSpring();
            this._drawBall();
            this._bindEvent(dragMoveCb, dragEndCb);
            this._stage.add(this._ballLayer);
        },
        _drawBgLayer: function _drawBgLayer() {},
        _drawSpring: function _drawSpring() {
            var spConfig = this._config;
            var startPos = {
                x: spConfig.x,
                y: spConfig.y
            }; //起点
            var n = spConfig.count;
            var coilWidth = spConfig.originalWidth + this._springModel.getDisplacement();

            var eachWidth = coilWidth / n;
            var omega = 2 * Math.PI / eachWidth;

            var ctx = this._springLayer.getContext();

            //绘制弹簧
            ctx.clear();
            ctx.beginPath();
            //ctx.setAttr('strokeStyle', 'gray');
            ctx.setAttr('lineWidth', spConfig.lineWidth);
            ctx.moveTo(startPos.x, startPos.y);
            for (var t = SPRING_DT; t < coilWidth && t < 2 * coilWidth; t += SPRING_DT) {
                var cy = startPos.y + spConfig.halfHeight * Math.sin(omega * (t - SPRING_DT / 2));
                var cx = t - SPRING_DT / 2;
                var y = startPos.y + spConfig.halfHeight * Math.sin(omega * t);
                var x = t;
                var grd = ctx.createLinearGradient(0, 0, x + 50, 0);
                grd.addColorStop(0, "gray");
                grd.addColorStop(0.35, "white");
                grd.addColorStop(1, "black");
                ctx.strokeStyle = grd;
                ctx.quadraticCurveTo(cx, cy, x, y);
            }
            ctx.lineTo(coilWidth, startPos.y);
            ctx.stroke();

            //绘制小球支撑杆
            //ctx.setAttr('strokeStyle', '#FF0000');
            var grd = ctx.createLinearGradient(0, startPos.y, 0, startPos.y + spConfig.lineWidth);
            grd.addColorStop(0, "gray");
            grd.addColorStop(0.35, "white");
            grd.addColorStop(1, "gray");
            ctx.fillStyle = grd;
            var subX = 10;
            for (var i = 0; i <= n; i++) {
                var x, y;
                if (i === 0) {
                    x = 0;
                } else {
                    x = (i - 1) * eachWidth + subX;
                }
                ctx.setAttr('globalCompositeOperation', 'source-over');
                ctx.fillRect(x, startPos.y, i * eachWidth - 10 - x, spConfig.lineWidth);

                //绘制相交并且被弹簧覆盖的线
                ctx.setAttr('globalCompositeOperation', 'destination-over');
                ctx.fillRect(i * eachWidth - 10, startPos.y, 20, spConfig.lineWidth);
            }
        },
        _drawBall: function _drawBall() {
            var that = this;
            var config = that._config;
            var x = config.ballOriginalX + this._springModel.getDisplacement();
            //绘制小球
            this._ball = new Konva.Circle({
                x: x,
                y: config.y,
                radius: config.ballRadius,
                //fill: 'yellow',
                //stroke: 'black',
                strokeWidth: 0,
                draggable: true,
                fillRadialGradientStartPoint: { x: 10, y: -10 },
                fillRadialGradientStartRadius: 2,
                fillRadialGradientEndPoint: { x: 0, y: 10 },
                fillRadialGradientEndRadius: config.ballRadius,
                fillRadialGradientColorStops: [0, '#fdd9b5', 0.3, '#cb4228', 0.35, '#be2b1b', 1, '#92302f'],
                dragBoundFunc: function dragBoundFunc(pos) {
                    //设置可拖动区域
                    if (pos.x > config.ballOriginalX + that._option.maxAmplitude) {
                        pos.x = config.ballOriginalX + that._option.maxAmplitude;
                    } else if (pos.x < config.ballOriginalX - that._option.maxAmplitude) {
                        pos.x = config.ballOriginalX - that._option.maxAmplitude;
                    }
                    return {
                        x: pos.x,
                        y: this.getAbsolutePosition().y
                    };
                }
            });

            this._ballLayer.add(this._ball);
        },
        _bindEvent: function _bindEvent(dragMoveCb, dragEndCb) {
            var that = this;
            this._ball.on('dragmove', function (ev) {
                dragMoveCb && dragMoveCb(that.getDisplacement());
            });

            this._ball.on('dragend', function () {
                dragEndCb && dragEndCb(that.getDisplacement());
            });
        },
        redraw: function redraw() {
            this._drawSpring();
            this._ball.setX(this._config.ballOriginalX + this._springModel.getDisplacement());
            this._ballLayer.draw();
        },
        getDisplacement: function getDisplacement() {
            Logger.debug(this._ball.getAttr('x') - this._config.ballOriginalX);
            return this._ball.getAttr('x') - this._config.ballOriginalX;
        },
        getBallOriginalPos: function getBallOriginalPos() {
            var pos = {
                'y': this._config.y,
                'x': this._config.ballOriginalX
            };
            return pos;
        },
        setDragAble: function setDragAble(able) {
            this._dragAble = able;
            //this._ball.off('dragmove');
            //this._ball.off('dragend');
        },
        destroy: function destroy() {}
    };
    return View;
});
'use strict';

/**
 * Created by Administrator on 2016/10/24.
 */

define('SpringXTStatic', ['SpringConfig'], function (Config) {

    //曲线的周期宽度
    var DEFAULT_PERIOD = 4000;

    //虚线
    var DashStyle = {
        stroke: '#6db9db',
        strokeWidth: 2,
        dash: [5, 5],
        lineCap: 'round',
        lineJoin: 'round'
    };

    var isMobile = navigator.userAgent.match(/Android|iPhone|iPad|iPod|BlackBerry|IEMobile/i);
    var isiOS = navigator.userAgent.match(/iPhone|iPad|iPod/i) ? true : false;
    var fontSize = isMobile ? 45 : 54;

    //作弊轴文本
    var AxisFontStyle = {
        fontSize: fontSize,
        fontFamily: '"Times New Roman",serif',
        fill: '#5F5F5F'
    };

    if (isiOS) {
        //iOS没有新罗马字正常体，但是有新罗马斜体。
        AxisFontStyle.fontFamily = 'serif';
    }

    //作弊轴文本
    var AxisItalicFontStyle = {
        fontSize: fontSize,
        fontFamily: '"Times New Roman",serif',
        fontStyle: 'italic',
        fill: '#5F5F5F'
    };

    //坐标轴
    var AxisLineStyle = {
        stroke: '#5F5F5F',
        strokeWidth: 4,
        lineCap: 'round',
        lineJoin: 'round'
    };

    var Margin = {
        x: 70, //x方向上间距
        //y: 40,//y方向间距
        top: 40, //上间距
        bottom: 0, //下间距
        dashTop: 30 //虚线上下间距
    };

    //缩放值为1时的宽高信息
    var defaultPx = {
        maxAmplitudePx: 553 / 2,
        staticHeight: 480
    };

    var PIXELS_PER_MS = Config.PIXELS_PER_MS;

    var XtStatic = {
        _formula: null,
        _width: 800,
        _currentTotalTime: 0, //当前静态轨迹的总时间
        _height: defaultPx.staticHeight, //默认高度
        _springOption: null,
        create: function create(formula, springOption) {
            var ins = Object.create(this);
            ins._formula = formula;
            ins._springOption = springOption;
            return ins;
        },
        setFormula: function setFormula(formula) {
            this._formula = formula;
        },
        render: function render($container) {
            var width = $container.width();
            var height = $container.height();
            this._width = width / height * this._height;
            //缩放值
            var scale = width / this._width;

            //初始化公式缩放
            var dashHeight = this._height - Margin.dashTop * 2 - (Margin.top + Margin.bottom);
            // 整体公式缩放值
            this._formulaScale = dashHeight / (defaultPx.maxAmplitudePx * 2);
            // 原公式算出的x值和x轴缩放值
            this._formulaXScale = defaultPx.maxAmplitudePx / this._springOption.maxAmplitude * this._formulaScale;
            PIXELS_PER_MS = Config.PIXELS_PER_MS * this._formulaScale;

            this.draw($container, width, height, scale);
        },
        getFormula: function getFormula() {
            return this._formula;
        },
        draw: function draw($container, width, height, scale) {
            //按实际大小渲染容器
            this._stage = new Konva.Stage({
                container: $container[0],
                width: width,
                height: height
            });
            //进行缩放
            this._stage.scale({
                x: scale,
                y: scale
            });

            this._dashlayer = new Konva.Layer();
            this._axislayer = new Konva.Layer();
            this._circleLayer = new Konva.Layer();

            this._mathPosInfo();

            //内部坐标按高度447来绘制
            this._drawCS();
            // 轨迹点
            this._drawFormula(this._centerX, this._centerY, this._dashQuarterWidth, this._dashMidCount, this._getPeriodCount());
            //绘制虚线
            this._drawDashLine(this._midWidth, this._dashQuarterWidth, this._dashHeight, this._dashMidCount, this._move);

            //绘制完成后，缩放为目前的宽高值
            this._stage.add(this._dashlayer);
            this._stage.add(this._axislayer);
            this._stage.add(this._circleLayer);
        },
        scale: function name(ratio) {
            // this.render(container);
            var scale = this._stage.getScaleX() * ratio;
            //进行缩放
            this._stage.scale({
                x: scale,
                y: scale
            });

            this._stage.setWidth(this._stage.getWidth() * ratio);
            this._stage.setHeight(this._stage.getHeight() * ratio);

            this._stage.draw();
        },
        redraw: function redraw() {
            this._mathPosInfo();

            //绘制虚线
            this._dashlayer.destroyChildren();
            this._drawDashLine(this._midWidth, this._dashQuarterWidth, this._dashHeight, this._dashMidCount, this._move);
            this._dashlayer.draw();

            // 轨迹点
            this._circleLayer.destroyChildren();
            this._drawFormula(this._centerX, this._centerY, this._dashQuarterWidth, this._dashMidCount, this._getPeriodCount());
            this._circleLayer.draw();
        },
        _getPeriodCount: function _getPeriodCount() {
            //周期间距
            var periodWidth = PIXELS_PER_MS * this._formula.getPeriod();
            var periodCount = Math.floor((this._width - Margin.x * 2 - this._dashQuarterWidth * 2) / periodWidth) + 1;
            return periodCount;
        },
        setTraceStart: function setTraceStart(traceStart) {
            this._traceStart = traceStart;
        },
        getTraceStart: function getTraceStart() {
            return this._traceStart;
        },
        setTotalTime: function setTotalTime(currentTotalTime) {
            this._currentTotalTime = currentTotalTime;
        },
        getTotalTime: function getTotalTime() {
            return this._currentTotalTime;
        },
        _mathPosInfo: function _mathPosInfo() {
            var width = this._width;
            //虚线高度和最大振幅缩放比例
            var dashHeight = this._height - Margin.dashTop * 2 - (Margin.top + Margin.bottom);
            //虚线间距
            var dashQuarterWidth = PIXELS_PER_MS * (DEFAULT_PERIOD / 4);
            if (dashQuarterWidth <= 5) {
                dashQuarterWidth = 5;
            }

            //移动到虚线位置
            var move = this.getTraceStart() * dashQuarterWidth;

            //xy轴交点中心点坐标
            var centerX = dashQuarterWidth * 2 + Margin.x;
            var centerY = Margin.dashTop + dashHeight / 2 + Margin.top;

            var midWidth = width - Margin.x * 2;

            //虚线条数
            var dashMidCount = Math.floor((midWidth - move - 40) / dashQuarterWidth) + 1;

            //存储绘制系统变量
            this._centerX = centerX;
            this._centerY = centerY;
            this._dashQuarterWidth = dashQuarterWidth;
            this._dashMidCount = dashMidCount;
            this._move = move;
            this._midWidth = midWidth;
            this._dashHeight = dashHeight;
        },
        _drawCS: function _drawCS() {
            //绘制坐标轴
            this._drawAxis(this._midWidth, this._centerX, this._centerY);
            // 0点
            this._drawOPoint(this._centerX, this._centerY);
        },

        _drawFormula: function _drawFormula(centerX, centerY, dashQuarterWidth, dashMidCount, periodCount) {
            if (periodCount <= 2) {
                periodCount = 2;
            }
            var points = this._formula.getPointsByPeriod(periodCount);
            var ballPerMs = this._formula.getDrawBallEachMs(false);
            for (var i = 0; i < points.length; i++) {
                var p = points[i];
                p.y = i * ballPerMs * PIXELS_PER_MS;
                if (p.y >= (dashMidCount - 3) * dashQuarterWidth + this._move) {
                    break;
                }
                var oCircle = new Konva.Circle({
                    x: p.y + centerX,
                    y: -p.x * this._formulaXScale + centerY,
                    radius: 3,
                    fill: '#ff900d'
                });
                this._circleLayer.add(oCircle);
            }
        },
        _drawDashLine: function _drawDashLine(width, dashQuarterWidth, dashHeight, dashMidCount, move) {
            var dashMargin = Margin.dashTop;
            width = width - 20;
            //上虚线
            var dashTopLine = new Konva.Line($.extend({
                points: [Margin.x, dashMargin + Margin.top, Margin.x + width, dashMargin + Margin.top]
            }, DashStyle));
            this._dashlayer.add(dashTopLine);

            //下虚线
            var dashBottomLine = new Konva.Line($.extend({
                points: [Margin.x, dashMargin + dashHeight + Margin.top, Margin.x + width, dashMargin + dashHeight + Margin.top]
            }, DashStyle));
            this._dashlayer.add(dashBottomLine);

            //中间曲线,超出左侧不显示第一根虚线
            var startIndex = move <= 5 ? 1 : 0;
            for (var i = startIndex; i < dashMidCount; i++) {
                var posX = i * dashQuarterWidth + move;

                var dashMidLine = new Konva.Line($.extend({
                    points: [posX + Margin.x, dashMargin + Margin.top, posX + Margin.x, dashMargin + dashHeight + Margin.top]
                }, DashStyle));
                this._dashlayer.add(dashMidLine);
            }
        },
        _drawAxis: function _drawAxis(width, centerX, centerY) {
            //坐标x轴
            var xLine = new Konva.Line($.extend({
                points: [Margin.x, centerY, width + Margin.x, centerY]
            }, AxisLineStyle));
            var xArrow = new Konva.Line($.extend({
                points: [Margin.x + width - 20, centerY - 10, width + Margin.x, centerY, Margin.x + width - 20, centerY + 10]
            }, AxisLineStyle));
            this._axislayer.add(xLine);
            this._axislayer.add(xArrow);

            //x轴单位
            var xText = new Konva.Text($.extend({
                x: Margin.x + width - 40,
                y: centerY + 15,
                text: 't'
            }, AxisItalicFontStyle));
            this._axislayer.add(xText);
            //x轴单位
            xText = new Konva.Text($.extend({
                x: Margin.x + width - 40 + xText.getWidth(),
                y: centerY + 15,
                text: '/s'
            }, AxisFontStyle));
            this._axislayer.add(xText);

            //坐标y轴
            var yLine = new Konva.Line($.extend({
                points: [centerX, Margin.top, centerX, centerY * 2]
            }, AxisLineStyle));
            var yArrow = new Konva.Line($.extend({
                points: [centerX - 10, Margin.top + 20, centerX, Margin.top, centerX + 10, Margin.top + 20]
            }, AxisLineStyle));
            this._axislayer.add(yLine);
            this._axislayer.add(yArrow);

            //y轴单位
            var yText = new Konva.Text($.extend({
                x: centerX - 45,
                y: Margin.top - fontSize,
                text: 'x'
            }, AxisItalicFontStyle));

            this._axislayer.add(yText);
            yText = new Konva.Text($.extend({
                x: centerX - 45 + yText.getWidth(),
                y: Margin.top - fontSize,
                text: '/cm'
            }, AxisFontStyle));
            this._axislayer.add(yText);

            // 0点
            var oText = new Konva.Text($.extend({
                x: centerX + 10,
                y: centerY + 5,
                text: 'O'
            }, AxisItalicFontStyle));
            this._axislayer.add(oText);
        },
        _drawOPoint: function _drawOPoint(centerX, centerY) {
            // 0点
            var oCircle = new Konva.Circle({
                x: centerX,
                y: centerY,
                radius: 5,
                fill: '#272727'
            });
            this._axislayer.add(oCircle);
        }

    };
    return XtStatic;
});
"use strict";

define('SpringUtils', function () {
    var Utils = {
        getUuid: function getUuid() {
            var s = [];
            var hexDigits = "0123456789abcdef";
            for (var i = 0; i < 36; i++) {
                s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1);
            }
            s[14] = "4"; // bits 12-15 of the time_hi_and_version field to 0010
            s[19] = hexDigits.substr(s[19] & 0x3 | 0x8, 1); // bits 6-7 of the clock_seq_hi_and_reserved to 01
            s[8] = s[13] = s[18] = s[23] = "-";

            var uuid = s.join("");
            return uuid;
        },
        getPagePos: function getPagePos(ev, scale) {
            var ev = ev.originalEvent ? ev.originalEvent : ev;
            var point = {};
            scale = scale || 1;
            switch (ev.type) {
                case 'touchstart':
                case 'touchmove':
                case 'touchend':
                case 'touchcancel':
                    point.x = ev.changedTouches[0].pageX / scale;
                    point.y = ev.changedTouches[0].pageY / scale;
                    return point;
                default:
                    point.x = ev.pageX / scale;
                    point.y = ev.pageY / scale;
                    return point;
            }
            return point;
        },
        getScale: function getScale(dom) {
            //This works because getBoundingClientRect returns the actual dimension while offsetWidth/Height is the unscaled size.
            var scaleX = dom.getBoundingClientRect().width / dom.offsetWidth || 1;
            return scaleX;
        },
        template: function template(tpl, attrs) {
            var templateRegExp = /\$\{(.+?)(?:\:(.+?))?\}/g;
            return tpl.replace(templateRegExp, function ($0, $1, $2) {
                if (attrs[$1] !== undefined) {
                    return attrs[$1];
                }
                return $0;
            });
        },
        getRotateY: function getRotateY(str) {
            var re = /rotateY\(\s*?([\-0-9.]*)\s*?deg\)/i.exec(str);
            if (re && re.length == 2) {
                return re[1];
            }
            return 0;
        }
    };

    return Utils;
});
'use strict';

/**
 * Created by Administrator on 2016/10/24.
 */

define('SpringXTDynamic', ['SpringLogger', 'SpringFormula', 'SpringConfig'], function (Logger, Formula, Config) {

    var PIXELS_PER_MS = Config.PIXELS_PER_MS;
    var BALL_WIDTH = 10;
    var defaultWidth = 414; //默认情况下的宽度
    var DEFAULT_PERIOD = 4000;

    var xt = {
        _stage: null,
        _width: 0,
        _height: 200,
        _points: [],
        _marginTop: 0,
        _time: 0,
        _scale: 0,
        _traceSubWidth: 0,
        _$container: null,
        _ballWidth: BALL_WIDTH, //球的默认宽度
        _formula: null,
        _totalTime: 0,
        create: function create() {
            var ins = Object.create(this);
            ins._originalWidth = 0;
            return ins;
        },
        setMarginTop: function setMarginTop(marginTop) {
            this._marginTop = marginTop;
        },
        render: function render($container) {
            var that = this;
            this._$container = $container;
            this._width = $container.width();
            if (!this._originalWidth) {
                this._originalWidth = this._width;
            }
            if (this._width <= BALL_WIDTH * 2) {
                this._width = BALL_WIDTH * 2;
            }
            this._height = $container.height();

            //处理缩放问题
            this._initScale();

            this._stage = new Konva.Stage({
                container: $container[0],
                width: this._width,
                height: this._height
            });
            //绘制弹簧和球
            this._layer = new Konva.Layer();
            this._lineLayer = new Konva.Layer();
            this._stage.add(this._lineLayer);
            this._stage.add(this._layer);
            this.redraw();
        },
        _initScale: function _initScale() {
            if (!this._scale) {
                this._scale = this._originalWidth / defaultWidth;
                this._ballWidth = this._scale * BALL_WIDTH;
                this._strokeWidth = 3 * this._scale;
                this._dashWidth = 8 * this._scale;
                this._dashEmptyWidth = 10 * this._scale;
                PIXELS_PER_MS = Config.PIXELS_PER_MS * this._scale;
            }
        },
        scale: function name(ratio) {
            this._scale = 0;
            this._marginTop = this._marginTop * ratio;
            this._originalWidth *= ratio;
            this._formula.scale(ratio);
            // this._points=[];

            // this._formula.resetPointsStartTime();
            this.render(this._$container);
        },
        isEmpty: function isEmpty() {
            if (!this._formula) {
                return false;
            }
            return this._formula.isEmpty();
        },
        getFormula: function getFormula() {
            return this._formula;
        },
        setTotalTime: function setTotalTime(totalTime) {
            this._totalTime = totalTime;
        },
        getTotalTime: function getTotalTime() {
            return this._totalTime;
        },
        getStartTotalTime: function getStartTotalTime() {
            return this._startTotalTime;
        },
        setStartTotalTime: function setStartTotalTime(startTotalTime) {
            this._startTotalTime = startTotalTime;
        },
        getWidth: function getWidth() {
            return this._width;
        },
        redraw: function redraw() {
            this._drawTrace();
            this._drawFormula();
        },
        setFormula: function setFormula(formula) {
            this._formula = formula;
            this._time = this._formula.getEndTime() - this._formula.getStartTime();
            this._startTotalTime = this._totalTime; //公式开始的时间
        },
        addEndTimeDiff: function addEndTimeDiff(timeDiff, slowPlaying, slowPeriod) {

            if (slowPlaying) {
                timeDiff = timeDiff * this._formula.getPeriod() / slowPeriod;
                this._time += timeDiff;
                this._formula.addEndTimeDiff(timeDiff);
                this._totalTime += timeDiff;
            } else {
                this._time += timeDiff;
                this._formula.addEndTimeDiff(timeDiff);
                this._totalTime += timeDiff;
            }
        },
        getTraceSubWidth: function getTraceSubWidth() {
            var quarterWidth = this.getPeriodQuarterWidth();
            var period = DEFAULT_PERIOD;
            //向上移动了多少像素
            var start = PIXELS_PER_MS * (this._startTotalTime % (period / 4));
            var sub = this._marginTop % quarterWidth;
            start = start - (quarterWidth - sub);
            //marginTop-start
            //计算轨迹初始点离最近一条虚线的距离
            return (this._marginTop - start) % quarterWidth / quarterWidth;
        },
        _getTraceStart: function _getTraceStart() {
            var that = this;
            var quarterWidth = this.getPeriodQuarterWidth();
            //var period = this._formula.getPeriod();
            var period = DEFAULT_PERIOD;
            var perMs = PIXELS_PER_MS;

            //起始值
            var start = perMs * (that._totalTime % (period / 4));

            //减去margin值
            var sub = that._marginTop % quarterWidth;
            start = start - (quarterWidth - sub);
            return start;
        },
        _drawTrace: function _drawTrace() {
            this._lineLayer.clear();
            this._lineLayer.destroyChildren();

            var amplitude = this._formula.getAmplitude();
            var quarterWidth = this.getPeriodQuarterWidth();
            //减去margin值
            var start = this._getTraceStart();
            for (var s = start; s <= this._height; s += quarterWidth) {
                var line = new Konva.Line({
                    points: [this._width / 2 - amplitude, s, this._width / 2 + amplitude, s],
                    stroke: '#a0a0a0',
                    strokeWidth: this._strokeWidth,
                    dash: [this._dashWidth, this._dashEmptyWidth]
                });
                this._lineLayer.add(line);
            }
            this._lineLayer.draw();
        },
        getPeriodQuarterWidth: function getPeriodQuarterWidth() {
            //var period = this._formula.getPeriod();
            var period = DEFAULT_PERIOD;
            var width = PIXELS_PER_MS * (period / 4);
            if (width <= 5) {
                return 5;
            }
            return width;
        },
        _drawFormula: function _drawFormula() {
            var ctx = this._layer.getContext();

            ctx.clear();
            ctx.fillStyle = '#696969';
            var points = this._formula.getPoints();
            var currentIndex = points.length;

            var eachMs = this._formula.getDrawBallEachMs();
            var perMs = PIXELS_PER_MS;

            for (var i = this._formula.getOriginalPointCount() - 1; i >= 0; i--) {
                currentIndex--;
                var item = points[currentIndex];
                item.y = i * eachMs;

                //最后一个点进行时间矫正
                //if (i == points.length - 1 && this._getEndTime() < item.y) {
                //    this._subSlowTime = (item.y - this._time);
                //}

                var y = (this._getEndTime() - item.y) * perMs + this._marginTop;

                //超出范围不显示
                if (y > this._height) {
                    for (var j = 0; j < currentIndex; j++) {
                        points.shift();
                        j--;
                        currentIndex--;
                    }
                    break;
                }
                ctx.beginPath();
                ctx.arc(item.x + this._width / 2, y, this._ballWidth / 2, 0, 2 * Math.PI);
                ctx.stroke();
                ctx.fill();
            }
        },
        _getEndTime: function _getEndTime() {
            return this._time;
        },
        reset: function reset() {
            this._totalTime = 0;
        }
    };

    return xt;
});]]></presenter><resources><file src="./resources/img_3d/negx.png"/><file src="./resources/img_3d/negx2.png"/><file src="./resources/img_3d/negy.png"/><file src="./resources/img_3d/negz.png"/><file src="./resources/img_3d/posx.png"/><file src="./resources/img_3d/posy.png"/><file src="./resources/img_3d/posz.png"/><file src="./resources/index.html"/><file src="./resources/wood/images/control_bar_aside.png"/><file src="./resources/wood/images/control_bar_drop.png"/><file src="./resources/wood/images/control_bar_mid.png"/><file src="./resources/wood/images/drop_arrow_1.png"/><file src="./resources/wood/images/drop_arrow.png"/><file src="./resources/wood/images/icon_aside.png"/><file src="./resources/wood/images/icons_hs.png"/><file src="./resources/wood/images/line.png"/><file src="./resources/wood/images/scrollbar/vertical-decrement-arrow.png"/><file src="./resources/wood/images/scrollbar/vertical-increment-arrow.png"/><file src="./resources/wood/images/scrollbar/vertical-thumb.png"/><file src="./resources/wood/images/stick.png"/></resources></addon>