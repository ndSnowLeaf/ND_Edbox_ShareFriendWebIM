<?xml version='1.0' encoding='UTF-8' ?>
<addon id='Compare'>
<properties>

                <property name="question_id" displayName="题目ID" type="string" isLocalized="false" />
                <property name="question_title" displayName="题目标题" type="string" isLocalized="false" />
                <property name="timer_type" displayName="计时类型" type="string" isLocalized="false" />
                <property name="time_limit" displayName="时间" type="string" isLocalized="false" />
                <property name="question_url" displayName="题目内容" type="string" isLocalized="false" />

</properties>

<dependencies>

<jsDependency>
    <javaScript  name="qtiSupport" version="5.0.0" />
</jsDependency>


</dependencies>

<css>



</css>


<view>


</view>


<presenter>

<![CDATA[(function () {
    var Presenter = BasicPresenter.extend({
        // getQuestionInfo: function () {     return {         id: this.presenterModel.question_id,         type_code:
        // 'compare',         type_name: '比大小',         url: this.presenterModel.question_id,         dispatchOnly: true     }
        // },
        /**
         * Presenter的初始化方法
         * @private
         */
        $init: function () {
            this._super();
            this.model = [];
            this.componentSetting = {};
            //定义日志
            this.logger.appendHandler(function (message, context) {
                console.log(message);
            }, {level: Logger.DEBUG});
        },
        /****以下开始为icPlayer的生命周期方法*****/
        run: function (view, model) {
            //将View的width和height设置为0
            view.style['width'] = 0;
            view.style['height'] = 0;
            this.presenterModel = model;
            var self = this;
            self._getCompareContent(model).then(function () {
                //适配颗粒中定义的数据
                self._adaptedOriginData(model);
                self.logger.debug("Compare model " + JSON.stringify(model));
                //构建组件配置
                self._configComponents();
                //加载启动器
                self.model.push({
                    name: "Components",
                    type: "json",
                    text: JSON.stringify(self.componentSetting)
                });
            }).then(function () {
                return self.$requireComponent('ComponentLoader', self.model, $(view), {
                    left: 0,
                    top: 0,
                    width: 0,
                    height: 0
                });
            });
        },
        destroy: function () {},
        /****以下开始为Presenter的私有方法*****/
        _adaptedOriginData: function (model) {
            var self = this;
            //添加题型所需要的数据
            this.model.push({"name": "questionType", "type": "string", "value": "CompareRemake"});
            this.model.push({
                name: "TimerController",
                type: "string",
                value: JSON.stringify([
                    {
                        name: "timer_type",
                        type: "string",
                        value: model.timer_type
                    }, {
                        name: "time_limit",
                        type: "string",
                        value: model.time_limit
                    }, {
                        name: "isPauseOnSubmit",
                        type: "boolean",
                        value: "false"
                    }
                ])
            });
            this.model.push({
                name: "InteractionSubmitButton",
                type: "string",
                value: JSON.stringify([
                    {
                        name: "can_modify",
                        type: "string",
                        value: true
                    }, {
                        name: "linkQuestionType",
                        type: "string",
                        value: "compare"
                    }, {
                        name: "linkQuestionId",
                        type: "string",
                        value: model['question_id']
                    }, {
                        name: "view_type",
                        type: "string",
                        value: "new_em_button"
                    }
                ])
            });
            this.model.push({
                name: "InteractionTimer",
                type: "string",
                value: JSON.stringify([
                    {
                        "name": "view_type",
                        "type": "string",
                        "value": "new_timer"
                    }
                ])
            });
            this.model.push({
                name: "CompareRemake",
                type: "string",
                value: JSON.stringify([
                    {
                        "name": "questionId",
                        "type": "string",
                        "value": model.question_id
                    }, {
                        name: "questionData",
                        type: "json",
                        text: JSON.stringify(self.compareData)
                    }
                ])
            });

            this.model.push({
                name: "ObjectiveInteractionLayout",
                type: "string",
                value: JSON.stringify([
                    {
                        name: "questionType",
                        type: "string",
                        value: "Compare"
                    }, {
                        name: "specialTemplate",
                        type: "string",
                        value: "false"
                    }
                ])
            });
            this.model.push({
                name: "AnswerFlowController",
                type: "string",
                value: JSON.stringify([
                    {
                        name: "showResultOnSubmit",
                        type: "string",
                        value: "false"
                    }
                ])
            });
            this.model.push({name: "ObjectiveStatisticsRemake", type: "string", value: JSON.stringify([])});
            this.model.push({
                name: 'ClassroomStatusController',
                type: 'string',
                value: JSON.stringify([
                    {
                        name: 'questionId',
                        type: 'string',
                        value: model.question_id
                    }
                ])
            });
        },
        _configComponents: function () {
            //根据不同的运行场景定义需要加载的组件
            if (this.isPPTShell || this.currentRuntime == icCreatePlayer.RUNTIME.WEB) {
                //如果是PPTShell或Web的场景
                this.componentSetting = {
                    controllers: [
                        {
                            presenter: "InteractionStateRecoverFilter"
                        }, {
                            presenter: 'I18nFilter'
                        }, {
                            presenter: "AnswerFlowController",
                            depends: [
                                {
                                    property: "TimerService",
                                    presenter: "TimerController"
                                }
                            ]
                        }, {
                            presenter: "ObjectiveStatController"
                        }, {
                            presenter: 'ClassroomStatusController'
                        }
                    ],
                    layout: "ObjectiveInteractionLayout",
                    components: [
                        {
                            presenter: "InteractionTimer",
                            renderTo: "TopLeftPanel"
                        }, {
                            presenter: "InteractionSubmitButton",
                            renderTo: "BottomPanel"
                        }, {
                            presenter: "CompareRemake",
                            renderTo: "CenterPanel"
                        }, {
                            presenter: "ObjectiveStatisticsRemake",
                            renderTo: "StatisticsPanel"
                        }
                    ]
                };
            } else if (this.currentRuntime == icCreatePlayer.RUNTIME.STUDENT_MOBILE) {
                //如果是学生端Pad
                this.componentSetting = {
                    controllers: [
                        {
                            presenter: "InteractionStateRecoverFilter"
                        }, {
                            presenter: 'I18nFilter'
                        }, {
                            presenter: "AnswerFlowController",
                            depends: [
                                {
                                    property: "TimerService",
                                    presenter: "TimerController"
                                }
                            ]
                        }, {
                            presenter: "AnswerProgressController"
                        }
                    ],
                    layout: "ObjectiveInteractionLayout",
                    components: [
                        {
                            presenter: "InteractionTimer",
                            renderTo: "TopLeftPanel"
                        }, {
                            presenter: "InteractionSubmitButton",
                            renderTo: "TopRightPanel"
                        }, {
                            presenter: "CompareRemake",
                            renderTo: "CenterPanel"
                        }
                    ]
                };
            }
        },
        _getCompareContent: function (model) {
            var self = this;
            var deffer = $.Deferred();
            if (typeof model.question_url === 'string') { //qti-model
                var option = {
                    'refPath': icCreatePlayer.ref_path
                };
                QtiPlayerOldStyle.load(model.question_url, option, function (modelInfo) {
                    var correct = [];
                    $.each(modelInfo.correctAnswer, function (k, v) {
                        var response = {};
                        response.key = k;
                        response.baseType = v.baseType;
                        response.cardinality = v.cardinality;
                        response.identifier = v.identifier;
                        //helper.response.push(response);
                        correct.push(v.value);
                    });
                    //目前都是一道题模式，直接取数组的第一个
                    var symbols = correct[0];

                    var bodyObj = modelInfo.model;
                    var body = [];
                    for (var k = 0, lenk = bodyObj.length; k < lenk; k++) {
                        var itemHtml = bodyObj[k].prompt;
                        var entry = $(itemHtml).find('textEntry');
                        var matchs = [];
                        for (var i = 0, len = entry.length; i < len; i++) {
                            var match = {};
                            var temp = $(entry[i]).parent().html().split('<textentry></textentry>');
                            match.first = temp[0];
                            match.last = temp[1];
                            matchs.push(match);
                        }
                        body.push(matchs);
                    }

                    var items = body[0];

                    var data = [];
                    for (var si = 0, slen = symbols.length; si < slen; si++) {
                        data.push({"left": items[si].first, "symbol": symbols[si], "right": items[si].last});
                    }
                    self.compareData = {
                        "title": model.question_title,
                        "items": data
                    };
                    deffer.resolve();
                });
            } else {
                self.compareData = {
                    title: model.question_title,
                    items: model.question_url
                };
                deffer.resolve();
            }
            return deffer;
        }
    }, "Compare");

    window.AddonCompare_create = function () {
        return new Presenter();
    }
})();

]]>

</presenter>


<resources>


</resources>

</addon>