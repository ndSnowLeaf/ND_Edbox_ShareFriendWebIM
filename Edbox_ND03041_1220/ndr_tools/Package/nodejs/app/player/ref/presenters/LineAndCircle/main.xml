<?xml version='1.0' encoding='UTF-8'?>
<addon id="templateid"><properties/><dependencies><jsDependency><javaScript name="AlamedaRequire" version="0.3.2"/></jsDependency></dependencies><css><![CDATA[@charset "UTF-8";.exam_skin_wood .pointcircle .potcle_lw_d .text,.exam_skin_wood .pointcircle .potcle_lw_o .text,.exam_skin_wood .pointcircle .potcle_lw_p .text,.exam_skin_wood .pointcircle .potcle_lw_r .text,.exam_skin_wood .pointcircle .potmsg_gx .text_o,.exam_skin_wood .pointcircle .potmsg_gx .text_p{font-style:italic;font-family:Bell MT,"Times New Roman",serif}.exam_skin_wood .linecircle{position:relative;width:100%;height:100%;background:#bfd3e2;color:#333;text-align:center;overflow:hidden}.exam_skin_wood .linecircle .potcle_main{position:absolute;left:50%;top:50%;width:72.08333em;height:40.83333em;margin-left:-36.04167em;margin-top:-19.08333em;padding-left:.83333em;text-align:center}.exam_skin_wood .linecircle .potcle_stage{float:left;position:relative;width:49.16667em;height:100%;background:#b0c9dc;overflow:hidden}.exam_skin_wood .linecircle .potcle_stage:after{content:"";display:inline-block;width:0;height:100%;vertical-align:middle}.exam_skin_wood .linecircle .potmsg_result{float:left;position:relative;width:22em;height:100%}.exam_skin_wood .linecircle .potmsg_result:after{content:"";display:inline-block;width:0;height:100%;vertical-align:middle}.exam_skin_wood .linecircle .potcle_circle{z-index:1;position:absolute;display:inline-block;left:50%;top:50%;width:22.41667em;height:22.41667em;margin-left:-11.20833em;margin-top:-11.20833em;border:.33333em solid #4a4e51;border-radius:50%}.exam_skin_wood .linecircle .potcle_circenter{z-index:1003;position:absolute;display:inline-block;width:.875em;height:.875em;left:50%;top:50%;margin-left:-.4375em;margin-top:-.4375em;background:#2986cc;border-radius:50%}.exam_skin_wood .linecircle .potcle_line_r{position:absolute;display:inline-block;z-index:1000;width:10.931em;height:.5em;left:50%;top:50%;margin-left:0;margin-top:-.25em;background:#2986cc;-webkit-transform-origin:left center;-ms-transform-origin:left center;transform-origin:left center;-webkit-transform:rotate(-45deg);-ms-transform:rotate(-45deg);transform:rotate(-45deg);text-align:center}.exam_skin_wood .linecircle .potcle_line_d{display:none;z-index:1001;position:absolute;display:inline-block;width:12.91667em;height:.33333em;left:50%;top:50%;margin-left:0;margin-top:-.16667em;text-align:center;-webkit-transform-origin:left center;-ms-transform-origin:left center;transform-origin:left center;-webkit-transform:rotate(38deg);-ms-transform:rotate(38deg);transform:rotate(38deg)}.exam_skin_wood .linecircle .potcle_line_backshow{background-size:0}.exam_skin_wood .linecircle .potcle_line_l{position:absolute;left:100%;width:66em;height:.33333em;background-color:#4a4e51;-webkit-transform:translate(-50%,-50%) rotate(90deg);-ms-transform:translate(-50%,-50%) rotate(90deg);transform:translate(-50%,-50%) rotate(90deg);-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;cursor:pointer}.exam_skin_wood .linecircle .potcle_line_l:active{background-color:#e5690f}.exam_skin_wood .linecircle .potcle_line_l.ui_btn_active{background-color:#e5690f}.exam_skin_wood .linecircle .potcle_line_l .potcle_line_left_c{position:absolute;width:.1px;height:.1px;top:48%;left:0}.exam_skin_wood .linecircle .potcle_line_l .potcle_line_right_c{position:absolute;width:.1px;height:.1px;top:48%;right:0}.exam_skin_wood .linecircle .potcle_line_d_dot{display:inline-block;width:100%;position:absolute;height:.33333em;left:0;top:0;margin-left:0;background:0 0;background-image:linear-gradient(90deg,#4a4e51 70%,transparent 0);background-size:2.36666em 100%;text-align:center}.exam_skin_wood .linecircle .potcle_line_r_show{z-index:1002;height:.33333em;pointer-events:none;background:0 0}.exam_skin_wood .linecircle .potcle_line_r_showr{height:.5em;background:#2986cc}.exam_skin_wood .linecircle .potcle_line_r_show_dot{background-image:linear-gradient(90deg,#2986cc 70%,transparent 0);background-size:2.36666em 100%}.exam_skin_wood .linecircle .potcle_line_foot{display:inline-block;position:absolute;top:.33333em;right:.125em;width:1.45833em;height:1.45833em;border-left:.25em solid #bc29fe;border-bottom:.25em solid #bc29fe}.exam_skin_wood .linecircle .potcle_line_d_dot.oncircle{background-image:linear-gradient(90deg,#e60012 70%,transparent 0);background-size:2.36666em 100%}.potcle_line_l:after{content:"";position:absolute;top:-2em;right:-2em;bottom:-2em;left:-2em;cursor:pointer}.exam_skin_wood .linecircle .potcle_line_p{position:absolute;display:inline-block;visibility:hidden;width:1.5em;height:1.5em;left:100%;top:50%;margin-left:-.75em;margin-top:-.75em;background:#fff;border:.20833em solid #d19645;border-radius:50%;text-align:center}.exam_skin_wood .linecircle .potcle_line_p.oncircle{background:#e60012;border-color:#e60012;visibility:visible}.exam_skin_wood .linecircle .potcle_line_p.oncircle .potcle_lw_p{color:#e60012}.exam_skin_wood .linecircle .potcle_line_ab{z-index:1000;margin-left:-.5em;visibility:visible;background:#e60012;border-color:#e60012}.exam_skin_wood .linecircle .potcle_line_p.oncircle{background:#e60012;border-color:#e60012}.exam_skin_wood .linecircle .potcle_line_p.oncircle .potcle_lw_p{color:#e60012}.exam_skin_wood .linecircle .potcle_lw_r{position:relative;display:inline-block;top:-3em;color:#2986cc;padding-right:.25em;-webkit-transform:rotate(45deg);-ms-transform:rotate(45deg);transform:rotate(45deg)}.exam_skin_wood .linecircle .potcle_lw_r .text{font-size:3.33333em;font-style:italic;font-family:Bell MT,"Times New Roman",serif}.exam_skin_wood .linecircle .potcle_lw_o{position:absolute;left:-1.83333em;top:.5em;color:#4a4e51}.exam_skin_wood .linecircle .potcle_lw_o .text{padding-right:.20833em;font-size:2.5em;font-style:italic;font-family:Bell MT,"Times New Roman",serif}.exam_skin_wood .linecircle .potcle_lw_d{position:relative;display:inline-block;top:.5em;color:#4a4e51;padding-right:.2em;-webkit-transform:rotate(-38deg);-ms-transform:rotate(-38deg);transform:rotate(-38deg)}.exam_skin_wood .linecircle .potcle_lw_d .text{font-size:2.91667em;font-style:italic;font-family:Bell MT,"Times New Roman",serif}.exam_skin_wood .linecircle .potcle_lw_p{position:absolute;top:.58333em;left:1.375em;display:inline-block;color:#333}.exam_skin_wood .linecircle .potcle_lw_p .text{padding-right:.20833em;font-size:2.5em;font-style:italic;font-family:Bell MT,"Times New Roman",serif}.exam_skin_wood .linecircle .potmsg_body{position:relative;display:inline-block;width:98%;vertical-align:middle;padding-bottom:4.16667em}.exam_skin_wood .linecircle .potmsg_cpare{visibility:hidden;height:6.66667em;line-height:6.66667em;color:#333;text-align:center}.exam_skin_wood .linecircle .potmsg_cpare .text_d,.exam_skin_wood .linecircle .potmsg_cpare .text_r{font-size:6.25em;font-style:italic;font-family:Bell MT,"Times New Roman",serif}.exam_skin_wood .linecircle .potmsg_cpare .text_cpare{font-size:6.25em;padding:0 .125em;color:#e60012}.exam_skin_wood .linecircle .potmsg_gx{visibility:hidden;min-height:14em;max-height:21.29167em;margin-top:2.91667em;margin-bottom:2.91667em;line-height:4.16667em;overflow:hidden;color:#333;text-align:center}.exam_skin_wood .linecircle .potmsg_gx .line_p_in,.exam_skin_wood .linecircle .potmsg_gx .line_p_on,.exam_skin_wood .linecircle .potmsg_gx .line_p_out{font-size:2.6em}.exam_skin_wood .linecircle .potmsg_gx .text_p{font-size:1.25em;font-style:italic;font-family:Bell MT,"Times New Roman",serif}.exam_skin_wood .linecircle .potmsg_gx .text_o{font-size:1.25em;font-style:italic;font-family:Bell MT,"Times New Roman",serif}.exam_skin_wood .linecircle .potmsg_gx .icon_yuan{position:relative;display:inline-block;width:.66667em;height:.66667em;border:.05833em solid #333;border-radius:50%;margin:0 .05em}.exam_skin_wood .linecircle .potmsg_gx .icon_yuan:before{content:"";position:absolute;left:50%;top:50%;margin-left:-.03333em;margin-top:-.03333em;display:inline-block;width:.06667em;height:.06667em;background:#333;border-radius:50%}.exam_skin_wood .linecircle .iu_text_show{visibility:visible}.exam_skin_wood .linecircle .potmsg_bm{position:relative;width:100%;height:3.125em;text-align:center}.exam_skin_wood .linecircle .potmsg_btn{position:relative;display:inline-block;max-width:21em;padding:.5em .91667em .5em 3em;border:1px solid #397274;color:#384650;background:-webkit-linear-gradient(top,#fff 0,#e9e9e9 100%);background:linear-gradient(to bottom,#fff 0,#e9e9e9 100%);border-radius:.41667em;overflow:hidden}.exam_skin_wood .linecircle .potmsg_btn .text_show{display:none}.exam_skin_wood .linecircle .potmsg_btn .text_hide{display:inline-block}.exam_skin_wood .linecircle .potmsg_btn:before{content:"";display:inline-block;position:absolute;left:.625em;top:50%;-webkit-transform:translate3d(0,-50%,0);transform:translate3d(0,-50%,0);width:1.75em;height:1.29167em;background:url(resources/wood/images/icon_hide_nor.png) no-repeat center center;background-size:100% auto}.exam_skin_wood .linecircle .potmsg_btn.ui_btn_active,.exam_skin_wood .linecircle .potmsg_btn:active{background:-webkit-linear-gradient(top,#89c4c7 0,#77b8ba 100%);background:linear-gradient(to bottom,#89c4c7 0,#77b8ba 100%);color:#fff}.exam_skin_wood .linecircle .potmsg_btn.ui_btn_active:before,.exam_skin_wood .linecircle .potmsg_btn:active:before{background:url(resources/wood/images/icon_hide_act.png) no-repeat center center;background-size:100% auto}.exam_skin_wood .linecircle .potmsg_btn .text{text-align:left;font-size:1.5em;line-height:1.4}.exam_skin_wood .linecircle .potmsg_btn.btn_show .text_show{display:inline-block}.exam_skin_wood .linecircle .potmsg_btn.btn_show .text_hide{display:none}.exam_skin_wood .linecircle .potmsg_btn.btn_show:before{background:url(resources/wood/images/icon_show_nor.png) no-repeat center center;background-size:100% auto}.exam_skin_wood .linecircle .potmsg_btn.btn_show:active:before{background:url(resources/wood/images/icon_show_act.png) no-repeat center center;background-size:100% auto}.hide_dom{display:none!important}.notice_tip_box{z-index:500;position:fixed;left:0;right:0;top:0;bottom:0;text-align:center}.notice_tip_box:after{content:"";display:inline-block;width:0;height:100%;vertical-align:middle}.notice_tip_box .notice_tip_con{display:inline-block;padding:1em 4.16667em;line-height:2.08333em;background:rgba(47,47,47,.81);border-radius:.16667em;vertical-align:middle;color:#fff}.notice_tip_box .notice_tip_con .text{font-size:1.41667em}.notice_tip_box.hide_mask{pointer-events:none}.notice_tip_box.hide_mask .notice_tip_con{pointer-events:auto}.prom_confirm_box{z-index:500;position:fixed;left:0;right:0;top:0;bottom:0;text-align:center}.prom_confirm_box:after{content:"";display:inline-block;width:0;height:100%;vertical-align:middle}.prom_confirm_box .prom_confirm_con{display:inline-block;width:33.54167em;height:20.125em;padding:1.08333em 2.08333em 0;line-height:2.08333em;background:rgba(47,47,47,.81);border-radius:.41667em;vertical-align:middle}.prom_confirm_box .confirm_text{position:relative;height:12.91667em;color:#fff;text-align:left}.prom_confirm_box .confirm_text:after{content:"";display:inline-block;width:0;height:100%;vertical-align:middle}.prom_confirm_box .confirm_text .text{display:inline-block;font-size:2em;line-height:2;vertical-align:middle}.prom_confirm_box .btn_group{text-align:center}.prom_confirm_box .btn_group .cancel,.prom_confirm_box .btn_group .confirm{display:inline-block;vertical-align:middle;padding:0 1em;min-width:8.125em;height:3.08333em;line-height:3em;color:#384650;text-align:center;background:-webkit-linear-gradient(top,#fff 0,#e9e9e9 100%);background:linear-gradient(to bottom,#fff 0,#e9e9e9 100%);border:1px solid #397274;border-radius:.41667em;margin:0 1.33333em;cursor:pointer}.prom_confirm_box .btn_group .cancel .btn_text,.prom_confirm_box .btn_group .confirm .btn_text{font-size:1.5em}.prom_confirm_box .btn_group .cancel.click_disabled,.prom_confirm_box .btn_group .confirm.click_disabled{background:#a9b6bf;border:0}.prom_confirm_box .btn_group .cancel:active,.prom_confirm_box .btn_group .confirm:active{background:#87c3c5}.prom_confirm_box.hide_mask{pointer-events:none}.prom_confirm_box.hide_mask .prom_confirm_con{pointer-events:auto}.typefaces_ru_RU .exam_skin_wood .linecircle .potmsg_btn{padding:.5em .41667em .5em 3em}.typefaces_ru_RU .exam_skin_wood .linecircle .potmsg_btn span{font-size:1.25em}.typefaces_ru_RU .exam_skin_wood .linecircle .potmsg_gx{min-height:16em;margin-top:1.5em;margin-bottom:2.1667em;line-height:3.16667em}]]></css><view><![CDATA[<div class="exam_skin_wood" style="" id="layout"><div class="linecircle"><div class="potcle_main"><div class="potcle_stage _js_potcle_stage"><span class="potcle_circle _js_potcle_circle"></span> <span class="potcle_circenter _js_potcle_circenter"><span class="potcle_lw_o" style=""><span class="text">O</span></span> </span><span class="potcle_line_r _js_potcle_line_r"><span class="potcle_lw_r _js_potcle_lw_r" style=""><span class="text">r</span></span> </span><span class="potcle_line_r potcle_line_r_show _js_potcle_line_r_show1"><span class="potcle_line_p potcle_line_ab hide_dom _js_potcle_line_p1"><span class="potcle_lw_p _js_potcle_lw_a" style="left: 1.8em;top: 1.1em"><span class="text">A</span></span> </span><span class="potcle_lw_r hide_dom _js_potcle_lw_r" style=""><span class="text">r</span></span> </span><span class="potcle_line_r potcle_line_r_show _js_potcle_line_r_show2"><span class="potcle_line_p potcle_line_ab hide_dom _js_potcle_line_p2"><span class="potcle_lw_p _js_potcle_lw_b" style="left: 1.8em;top: -2.3em"><span class="text">B</span></span> </span><span class="potcle_lw_r hide_dom _js_potcle_lw_r" style="top: 0em"><span class="text">r</span></span> </span><span class="potcle_line_d _js_potcle_line_d" style="width: 16.91667em;transform: rotate(45deg)"><span class="potcle_line_d_dot hide_dom"><span class="potcle_lw_d" style="transform: rotate(-45deg)"><span class="text">d</span></span> <span class="potcle_line_foot"></span> </span><span class="potcle_line_l _js_potcle_line"><span class="potcle_line_left_c _js_potcle_line_left_c"></span> <span class="potcle_lw_p _js_potcle_lw_l" style="left: 40%;top: 1.3em;transform: rotate(-135deg)"><span class="text">l</span> </span><span class="potcle_line_right_c _js_potcle_line_right_c"></span> </span><span class="potcle_line_p _js_potcle_line_p"><span class="potcle_lw_p _js_potcle_lw_p" style="left: 1.8em;top: .6em;transform: rotate(-45deg)"><span class="text">P</span></span></span></span></div><div class="potmsg_result"><div class="potmsg_body"><div class="potmsg_cpare _js_potmsg_cpare"><span class="text_d">d</span> <span class="text_cpare _js_text_cpare">></span> <span class="text_r">r</span></div><div class="potmsg_gx _js_potmsg_cpare"><div class="line_p_out">直线<span class="text_p"> l </span>与<span class="icon_yuan"></span><span class="text_o">O </span>相离</div><div class="line_p_on hide_dom">直线<span class="text_p"> l </span>与<span class="icon_yuan"></span><span class="text_o">O </span>相切<br><span class="text_p">l </span>为<span class="icon_yuan"></span><span class="text_o">O </span>的切线<br><span class="text_p">P </span>点为<span class="icon_yuan"></span><span class="text_o">O </span>的切点</div><div class="line_p_in hide_dom">直线<span class="text_p"> l </span>与<span class="icon_yuan"></span><span class="text_o">O </span>相交<br><span class="text_p">l </span>为<span class="icon_yuan"></span><span class="text_o">O </span>的割线</div></div><div class="potmsg_bm _js_potmsg_bm"><a href="#" class="potmsg_btn _js_potmsg_btn"><span class="text text_show">隐藏直线与圆的位置关系</span> <span class="text text_hide">显示直线与圆的位置关系</span></a></div></div></div></div></div></div>]]></view><presenter><![CDATA[(function() {
    var Presenter = BasicPresenter.extend({
        metaInfo: {
            name: "LineAndCircle",
            type: "",
            subtype: ""
        },
        /**
         * Presenter的初始化方法
         * @private
         */
        $init: function() {
            this._super();

            this.$view = null;
            this.model = null;
            this.lineCircleRalation = null;
        },
        /**
         * Presenter对外暴露的方法
         */
        _service_: {
            constructor: function(parent) {
                this.parent = parent;
            },
            getExtendData: function () {
                var options = {};

                return options;
            },
            setLocationProperties: function (properties) {
                //this.i18n = properties;
                this.parent.$translator.setData(properties);
            },
            getQuestionInfo: function () {
                return {
                    id: this.parent.model.question_id || '',
                    type_code: 'LineAndCircle',
                    type_name: '直线与圆的位置关系',
                    url: '',
                    noExistStatistics: true,
                    noNeedQuizProgress: true
                }
            }
        },
        getService: function() {
            var self = this;
            self._service_.constructor(self);

            return self._service_;
        },
        /****以下开始为icPlayer的生命周期方法*****/
        run: function(view, model) {
            var self = this;
            self.$view = $(view);
            self.model = model;

            require(['lineCircleRalation'], function (lineCircleRalation) {
                self.lineCircleRalation = new lineCircleRalation(self.$view);

                self.lineCircleRalation.init();
                self.lineCircleRalation.render();
            });
            self._i18nRender();
            self.__interface = {
                resizeScreen: function (data) {
                    self.lineCircleRalation.handleResizeScreen(eval(data.ratio))
                }
            }
        },
        pageShow: function() {
        },
        pageLeave: function() {
        },
        destroy: function() {
            if (!!this.positionRelactionShip) {
                this.positionRelactionShip.destroy();
            }
        },
        /**如果不需要处理icplayer的状态恢复事件, 请将以下两个方法删除掉**/
        getState: function() {

        },
        setState: function(state, options) {

        },
        /****以下开始为Presenter的私有方法*****/
        _i18nRender: function () {
            var self = this,
                params = ['<span class="text_p"> l </span>','<span class="icon_yuan"></span><span class="text_o">O </span>','<span class="text_p"> P </span>','<br>'];
            var btn_show = self.$translator.translate("potmsg_btn_show"),
                btn_hide = self.$translator.translate("potmsg_btn_hide"),
                line_p_out = self.$translator.translate("line_p_out", params),
                line_p_in = self.$translator.translate("line_p_in", params),
                line_p_on = self.$translator.translate("line_p_on", params);
            (btn_show && btn_show == "ERROR") || self.$view.find('.potmsg_bm .text_show').text(btn_hide);
            (btn_hide && btn_show == "ERROR")|| self.$view.find('.potmsg_bm .text_hide').text(btn_show);
            (line_p_out && line_p_out == "ERROR")|| self.$view.find('.line_p_out').html(line_p_out);
            (line_p_on && line_p_on == "ERROR")|| self.$view.find('.line_p_on').html(line_p_on);
            (line_p_in && line_p_in == "ERROR")|| self.$view.find('.line_p_in').html(line_p_in);

        }

    });

    window.AddonLineAndCircle_create = function() {
        return new Presenter();
    }


})();
define('graphMath', function() {

    var GraphMath = {
        /**
         * 获取弧度
         * @param degree 角度
         * @returns {number}
         */
        getRadian: function(degree) {
            return (2 * Math.PI) / 360 * degree;
        },
        /**
         * 获取角度
         * @param degree 弧度
         * @returns {number}
         */
        getDegree: function(radian) {
            return (radian * 360) / (2 * Math.PI);
        },
        /**
         * 获取直接kb值
         * @param degree 与x轴角度
         * @param pos 线上的一点
         */
        getLineKb: function(degree, pos) {
            var kb = {};
            if (degree > 90) {
                kb.k = Math.tan(this.getRadian(180 - degree));
                kb.k = -kb.k;
            } else {
                kb.k = Math.tan(this.getRadian(degree));
            }
            //pos.y = k * pos.x + b;
            kb.b = pos.y - kb.k * pos.x;
            return kb;
        },
        /**
         * 余弦定理，已知三边，求角度
         * @param a
         * @param b
         * @param c
         * @returns {Number}
         */
        getCosineAngle: function(a, b, c) {
            //余弦定理
            //由余弦定理得a²=b²+c²-2bc*CosA
            //∴CosA=(b²+c²-a²)/(2bc)=7/8
            var cosA = (Math.pow(b, 2) + Math.pow(c, 2) - Math.pow(a, 2)) / (2 * b * c);
            // 得到弧度
            var acosA = Math.acos(cosA);
            // 弧度转角度
            //1弧度=180/π度
            //1度=π/180弧度
            return parseFloat(acosA * (180 / Math.PI));
        },
        getCosineAngleByPos: function(aPos, bPos, cPos) {
            var a, b, c;
            a = parseFloat(Math.sqrt(Math.pow(bPos.x - cPos.x, 2) + Math.pow(bPos.y - cPos.y, 2)));
            b = parseFloat(Math.sqrt(Math.pow(bPos.x - aPos.x, 2) + Math.pow(bPos.y - aPos.y, 2)));
            c = parseFloat(Math.sqrt(Math.pow(cPos.x - aPos.x, 2) + Math.pow(cPos.y - aPos.y, 2)));
            return this.getCosineAngle(a, b, c);
        },
        /**
         * 勾股定理，求C边的值
         * @param a a边长
         * @param b b边长
         * @returns {number}
         */
        getPythagoreanLineC: function(a, b) {
            return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2));
        },
        /**
         * 勾股定理，求a边的值
         * @param a c边长
         * @param b b边长
         * @returns {number}
         */
        getPythagoreanLineA: function(c, b) {
            return Math.sqrt(Math.pow(c, 2) - Math.pow(b, 2));
        },
        /**
         * 已知角度和斜边长，求斜边坐标
         * @param a a边长
         * @param b b边长
         * @returns {number}
         */
        getLinePosByAngle: function(angle, width) {
            //TODO:确认一下角度超过90度时候的值是否是对称的
            if (angle > 90) {
                angle = 180 - angle;
            }
            var x = Math.cos(this.getRadian(angle)) * width;
            var y = Math.sin(this.getRadian(angle)) * width;
            return {
                x: x,
                y: y
            };
        },
        /**
         * 获取两点距离
         * @param pos1 {x:100,y:100}
         * @param pos2
         * @returns {number}
         */
        getTwoPointDistance: function(pos1, pos2) {
            var x = pos2.x - pos1.x ,
                y = pos2.y - pos1.y ;
            return Math.sqrt((x * x) + (y * y));
        },
        /**
         * 求点在圆上的坐标
         * @param degree 角度
         * @param r 半径
         * @returns {{x: number, y: number}}
         */
        getSpherePos: function(degree, r) {

            var x1 = 0 + r * Math.cos(degree * Math.PI / 180);
            var y1 = 0 + r * Math.sin(degree * Math.PI / 180);

            return {
                x: x1,
                y: y1
            };
        },
        /**
         * 获取差积
         * @param originPos 焦点、原始坐标
         * @param startPos  相对开始坐标
         * @param endPos 结束坐标
         * @returns {number}
         */
        getDifferent: function (originPos, startPos, endPos) {
            var startVector = {
                x: startPos.x - originPos.x,
                y: startPos.y - originPos.y
            };
            var endVector = {
                x: endPos.x - originPos.x,
                y: endPos.y - originPos.y
            };
            return parseFloat(startVector.x * endVector.y) - parseFloat(endVector.x * startVector.y);//叉积
        },
        /**
         * 根据三点获取旋转角度
         * @param posa 中心点
         * @param posb 上一个点
         * @param posc 当前点
         * @returns {*}
         */
        getRotateAngle: function(posa, posb, posc) {
            //通过三点计算旋转角度
            var angle = this.getCosineAngleByPos(posa, posb, posc);
            //计算三点的差积，判断旋转方向
            var different = this.getDifferent(posa, posb, posc);
            if (different < 0) {
                angle = -angle + 2*Math.PI;
            }
            return angle;
        },
        /**
         * 计算点a到线段bc的最短距离
         * @param posa
         * @param posb
         * @param posc
         */
        getShortestDistanceAndPoint: function (posa, posb, posc) {
            var ab = this.getTwoPointDistance(posa, posb);
            var ac = this.getTwoPointDistance(posa, posc);
            var bc = this.getTwoPointDistance(posb, posc);
            var halfPerimeter = (ab + ac + bc) / 2;//半周长
            //求面积：海伦公式
            var S = Math.sqrt(halfPerimeter * (halfPerimeter - ab) * (halfPerimeter - ac) * (halfPerimeter - bc));
            //另外一个面积公式： 底*高/2
            var height = (2 * S) / bc;
            //判断高是否在三角形内
            var thirdLong = Math.max(ab, ac);
            var hc = Math.sqrt((thirdLong * thirdLong) - (height * height));//计算高垂足点到c的位置
            //计算出来的长度大于底边，在外部
            var shortestDistance = 0;
            var shortestPos = {};
            if (hc > bc) {
                shortestDistance = Math.min(ac, ab);
                if (ac > ab) {
                    shortestDistance = ab;
                    shortestPos = posb;
                } else {
                    shortestDistance = ac;
                    shortestPos = posc;
                }
            } else {
                //返回最短距离
                shortestDistance = height;
                shortestPos = this.getRectVerticalPos(posa, posb, posc, height);//
            }
            return {
                d: shortestDistance,//最短距离
                pos: shortestPos,//高在a边上的坐标
                h: height,//高
                minSide: Math.min(ab, ac)
            }
        }
        ,
         /**
         * 特例（矩形上的）已知直角对应的两点和两侧线长，求直接坐标
         * @param pos1
         * @param pos2
         */
        getRectVerticalPos: function (posa, posb, posc, height) {
            var x = 0, y = 0;
            if (posb.x === posc.x) {
                x = posb.x;
                y = posa.y;
            } else if (posb.y = posc.y) {
                y = posb.y;
                x = posa.x;
            }
            return {
                x: x,
                y: y
            }
        }
        ,
        /**
         * http://blog.csdn.net/fly542/article/details/6638299
         * 已知三点，求第三点到另外两点组成的垂线长度
         * @param pos1
         * @param pos2
         * @param pos3
         * @returns {number}
         */
        getPedalHeight: function(pos1, pos2, pos3) {
            var A = (pos1.y - pos2.y) / (pos1.x - pos2.x);
            var B = (pos1.y - A * pos1.y);
            /// > 0 = ax +b -y;
            return Math.abs(A * pos3.x + B - pos3.y) / Math.sqrt(A * A + 1);
        },
        /**
         * 获取圆和线段的交点
         * http://blog.csdn.net/rabbit729/article/details/4285119
         * @param ptStart 线起点
         * @param ptEnd 线终点
         * @param ptCenter 原心
         * @param Radius 半径
         * @returns {boolean}
         * @constructor
         */
        getLineCircleIntersectionPos: function(ptStart, ptEnd, ptCenter, Radius) {
            var EPS = 0.00001;
            var ptInter1 = {};
            var ptInter2 = {};
            var fDis = Math.sqrt((ptEnd.x - ptStart.x) * (ptEnd.x - ptStart.x) + (ptEnd.y - ptStart.y) * (ptEnd.y - ptStart.y));
            var d = {};
            d.x = (ptEnd.x - ptStart.x) / fDis;
            d.y = (ptEnd.y - ptStart.y) / fDis;
            var E = {};
            E.x = ptCenter.x - ptStart.x;
            E.y = ptCenter.y - ptStart.y;
            var a = E.x * d.x + E.y * d.y;
            var a2 = a * a;
            var e2 = E.x * E.x + E.y * E.y;
            var Radius2 = Radius * Radius;
            if ((Radius2 - e2 + a2) < 0) {
                return false;
            } else {
                var f = Math.sqrt(Radius2 - e2 + a2);
                var t = a - f;
                // if (((t - 0.0) > -EPS) && (t - fDis) < EPS) {
                    ptInter1.x = ptStart.x + t * d.x;
                    ptInter1.y = ptStart.y + t * d.y;
                // }
                t = a + f;
                // if (((t - 0.0) > -EPS) && (t - fDis) < EPS) {
                    ptInter2.x = ptStart.x + t * d.x;
                    ptInter2.y = ptStart.y + t * d.y;
                // }
                return [ptInter1, ptInter2];
            }
        }

    };
    return GraphMath;
})
define('lineCircleRalation', ['graphMath'], function(gm) {

    function getCoordinate(event) {
        var pos = {
            "x": 0,
            "y": 0
        };
        switch (event.type) {
            case "mousedown":
            case "mousemove":
            case "mouseup":
                pos.x = event.clientX;
                pos.y = event.clientY;
                break;
            case "touchstart":
            case "touchmove":
                pos.x = event.originalEvent.touches[0].clientX;
                pos.y = event.originalEvent.touches[0].clientY;
            case "touchend":
                pos.x = event.originalEvent.changedTouches[0].clientX;
                pos.y = event.originalEvent.changedTouches[0].clientY;
                break;
        }
        return pos;
    }

    function lineCircleRalation(view) {

        this.$view = view;

        this.pacMain = null;
        this.compareSymbol = null;

        this.lineCenter = null;
        this.letterP = null;
        this.letterL = null;
        this.letterD = null;
        this.foot = null; //垂足符号
        this.pointA = null; //交点
        this.pointB = null;
        this.pos1 = null;
        this.pos2 = null;
        this.dotR = null; //半径
        this.dot1 = null;
        this.dot2 = null;
        this.mainCircle = null;
        this.centerCircle = null;
        self.centerCircleO = null;
        this.bigCircleR = 0;
        this.pacMainW = 0;

        this.line = null;
        this.moveLine = null;
        this.moveLineD = null;
        this.dWidth = 0;
        this.dLenArr = [];
        this.moveLineDeg = 45;

        this.followR = null;

        this.prePosTime = {
            x: 0,
            y: 0,
            t: 0
        };

        this.preMovPos = {
            b: null,
            sign: null,
            cordArr: null,
            kb: null
        };


        this.isMoving = false;
        this.isShow = false;
        this.isOutSide = true;
        this.isInside = false;
        this.isCenter = false;
        this.isCenterAdsorbed = false;
        this.isLeaveCenter = false;
        this.isResizeScreen = false

        this.size = {
            minX: 0,
            minY: 0,
            maxX: 0,
            maxY: 0,
            mMinX: 0,
            mMinY: 0,
            mMaxX: 0,
            mMaxY: 0,
            op: null
        }
    }
    lineCircleRalation.prototype = {
        init: function() {
            var self = this;
            self.pacMain = self.$view.find('._js_potcle_stage');
            self.lineCenter = self.$view.find('._js_potcle_line_p');
            self.letterP = self.$view.find('._js_potcle_lw_p');
            self.letterL = self.$view.find('._js_potcle_lw_l');
            self.letterD = self.$view.find('.potcle_lw_d');
            self.foot = self.$view.find('.potcle_line_foot');
            self.pointA = self.$view.find('._js_potcle_line_p1');
            self.compareSymbol = self.$view.find('._js_text_cpare');
            self.moveLine = self.$view.find('._js_potcle_line_d');
            self.moveLineD = self.moveLine.find('.potcle_lw_d');
            self.followR = self.$view.find('._js_potcle_line_r');
            self.mainCircle = self.$view.find('._js_potcle_circle');
            self.centerCircle = self.$view.find('._js_potcle_circenter');
            self.centerCircleO = self.centerCircle.find('.potcle_lw_o');
            self.line = self.$view.find('._js_potcle_line');
            self.pos1 = self.line.find('._js_potcle_line_left_c');
            self.pos2 = self.line.find('._js_potcle_line_right_c');
            self.dotR = self.$view.find('.potcle_line_r_show');
            self.dot1 = self.$view.find('._js_potcle_line_r_show1');
            self.dot2 = self.$view.find('._js_potcle_line_r_show2');

            self.centerR = self.centerCircle.outerWidth() / 2;
            self.bigCircleR = self.mainCircle.outerWidth() / 2;
            self.pacMainW = self.pacMain.outerWidth();
            self.cfg = {
                x: self.lineCenter.position().left,
                y: self.lineCenter.position().top,
                R: self.lineCenter.outerWidth() / 2,
                border: '',
                fill: ''
            }
            self.dWidth = parseInt(self.moveLine.css('width'));
        },
        render: function() {
            var self = this;
            self._bindEvent();
        },
        destroy: function() {
            var self = this;
            self._unbindEvent();
        },
        handleResizeScreen: function(ratio) {
            this.isResizeScreen = true
            this.centerR = this.centerCircle.outerWidth() / 2;
            this.bigCircleR = this.mainCircle.outerWidth() / 2;
            this.pacMainW = this.pacMain.outerWidth();
            this.cfg = {
                x: this.lineCenter.position().left,
                y: this.lineCenter.position().top,
                R: this.lineCenter.outerWidth() / 2,
                border: '',
                fill: ''
            }
            this.dWidth = parseInt(this.moveLine.css('width'));
            var width = parseFloat(this.moveLine.width()) * ratio
            if(this.moveLine[0].style.width.indexOf('em') === -1){
                this.moveLine.css('width', width)
            }
        },
        /********************************************************/
        //事件绑定
        _bindEvent: function() {
            var self = this;

            self.$view
                .on('mousedown mousemove mouseup touchstart touchmove touchend', self._eventHandler.bind(self))
                .on('mousedown touchstart', '._js_potmsg_bm', function(e) {
                    e.preventDefault();
                    $(e.currentTarget).find('._js_potmsg_btn').addClass('ui_btn_active btn_show');
                }.bind(this))
                .on('mouseup touchend', '._js_potmsg_bm', self._btnEvent.bind(self))

        },
        _unbindEvent: function() {
            var self = this;
            self.$view.off('mousedown mousemove mouseup touchstart touchmove touchend');
        },
        _eventHandler: function(event) {
            var self = this,
                pos = getCoordinate(event),
                eventType = self._eventMapping(event);

            switch (eventType) {
                case "start":
                    self._startEvent(event, pos);
                    break;
                case "move":
                    self.isMoving && self._moveEvent(event, pos);
                    break;
                case "end":
                    if($(event.target).hasClass('_js_potcle_line') && !self.isResizeScreen){
                        self._endEvent(event, pos);
                    }
                    self.line.removeClass('ui_btn_active');
                    self.isMoving = false;
                    self.isResizeScreen = false
                    break;
            }

        },
        //对事件类型做处理
        _eventMapping: function(event) {
            var eventType = event.type;
            var type;
            switch (eventType) {
                case "touchstart":
                    //阻止默认事件，不发射mouseEvent
                    event.preventDefault();
                case "mousedown":
                    type = "start";
                    break;
                case "mousemove":
                case "touchmove":
                    type = "move";
                    break;
                case "mouseup":
                case "touchend":
                    type = "end";
                    break;
            }
            return type;
        },
        _startEvent: function(e, pos) {
            var self = this;
            if ($(event.target).hasClass('_js_potcle_line')) {
                self.line.addClass('ui_btn_active');
                if (self.dWidth === 0) {
                    self.isLeaveCenter = true;
                    self.moveLineDeg = (self.moveLineDeg + 180) % 360;
                    self._updateLine();
                }
                self.isMoving = true;
            } else {
                self.isMoving = false;
            }
            self.isResizeScreen = false
        },
        _moveEvent: function(e, pos) {
            var self = this;

            self._updateSize();
            var size = self.size;
            if (pos.x < size.mMinX || pos.x > size.mMaxX || pos.y < size.mMinY || pos.y > size.mMaxY) {
                self.isMoving = false;
                return
            }
            //更新数组用于判断方向
            if (self.dLenArr.length === 12) {
                self.dLenArr.shift();
                self.dLenArr.push(self.dWidth)
            } else {
                self.dLenArr.push(self.dWidth);
            }
            //吸附
            var mouseSpeed = self._calculateMouseSpeed();
            if (mouseSpeed < 80) {
                self._adsorbedCompare(pos.x, pos.y);
                return
            }

            if (self.dWidth > 30 / 877 * self.pacMainW) self.isLeaveCenter = false;
            //更新直线位置
            self._updateLinePos(pos);
            //更新A、B位置
            var pos1 = self._getCenterPos(self.pos1),
                pos2 = self._getCenterPos(self.pos2);
            if (self.dWidth < self.bigCircleR - self.cfg.R) {
                self._updateCirclePos(pos1, pos2)
            };
        },
        _endEvent: function(e, pos) {
            var self = this,
                size = self.size;
            if ((self.dWidth < self.bigCircleR + self.cfg.R / 2) && (self.dWidth > self.bigCircleR - self.cfg.R / 4)) {
                self._adsorbed();
                self._updateLine(pos.x, pos.y);
                self._updateDetai();
            }
            if ((self.dWidth < (self.centerR + self.cfg.R + 10))) {
                self.isCenterAdsorbed = true;
                self._updateLine();
                self.isMoving = false;
                self.dLenArr = [];
            }
            if (pos.x < size.mMinX || pos.x > size.mMaxX || pos.y < size.mMinY || pos.y > size.mMaxY) {
                self.isMoving = false;
                return
            }
            self.preMovPos.b = null;
            self.isTurn = null;
            self.preMovPos.sign = null;
        },
        _btnEvent: function(e) {
            var self = this;
            if (!self.isShow) {
                $(e.currentTarget).find('._js_potmsg_btn').addClass('btn_show').removeClass('ui_btn_active');
                self.$view.find('._js_potmsg_cpare').addClass('iu_text_show');
                if (self.isInside && !self.isCenter) {
                    self.dotR.addClass('potcle_line_r_show_dot').find('._js_potcle_lw_r').removeClass('hide_dom');
                    self.followR.addClass('hide_dom');
                };
                if (self.isOutSide) {
                    self._setRotate(self.followR, self.moveLineDeg - 15)
                    self._setRotate(self.followR.find('._js_potcle_lw_r'), -self.moveLineDeg)
                };
                self.moveLine.find('.potcle_line_d_dot').removeClass('hide_dom');
                self.isShow = true;
            } else {
                $(e.currentTarget).find('._js_potmsg_btn').removeClass('btn_show').removeClass('ui_btn_active');
                self.$view.find('._js_potmsg_cpare').removeClass('iu_text_show');
                self.moveLine.find('.potcle_line_d_dot').addClass('hide_dom');
                if (self.isInside && !self.isCenter) {
                    self.dotR.removeClass('potcle_line_r_show_dot').find('._js_potcle_lw_r').addClass('hide_dom');
                    self.followR.removeClass('hide_dom');
                }
                self.isShow = false;
            }
        },
        _updateSize: function() {
            var self = this;
            var pacMainOffset = self.pacMain.offset(),
                pacMainParOffset = self.pacMain.parent().offset(),
                mainCircleOffset = self.mainCircle.offset();

            self.size.minX = pacMainOffset.left + self.cfg.R;
            self.size.minY = pacMainOffset.top + self.cfg.R * 2;
            self.size.maxX = pacMainOffset.left + self.pacMain.innerWidth() - self.cfg.R;
            self.size.maxY = pacMainOffset.top + self.pacMain.innerHeight() - self.cfg.R * 2;
            //鼠标的最大移动范围
            self.size.mMinX = pacMainParOffset.left + self.cfg.R / 2;
            self.size.mMaxX = pacMainParOffset.left + self.pacMain.parent().innerWidth() - self.cfg.R;
            self.size.mMinY = pacMainParOffset.top - self.cfg.R / 4;
            self.size.mMaxY = pacMainParOffset.top + self.pacMain.parent().innerHeight() + self.cfg.R / 2;
            self.size.op = {
                y: self.bigCircleR + self.mainCircle.offset().top,
                x: self.bigCircleR + self.mainCircle.offset().left
            }
        },
        _getCenterPos: function(obj) {
            var pos = {};
            pos.x = obj.offset().left;
            pos.y = obj.offset().top;
            return pos
        },
        _getSign: function(dega, degb, op, mouse, foot) {
            if (foot.x > op.x && foot.y < op.y && mouse.x > op.x && mouse.y > op.y) {
                return -1;
            } else if (foot.x > op.x && foot.y > op.y && mouse.x > op.x && mouse.y < op.y) {
                return 1;
            } else {
                return dega > degb ? 1 : -1;
            }
        },
        _getLineCenterPos: function() {
            var self = this;
            var deg1 = (self.moveLineDeg + 135) % 180,
                deg2 = self.moveLineDeg % 180,
                pos1 = {
                    x: self.lineCenter.offset().left,
                    y: self.lineCenter.offset().top
                };
            var cord = {};
            var kb1 = gm.getLineKb(deg1, pos1),
                kb2 = gm.getLineKb(deg2, self.size.op);
            cord.x = (kb2.b - kb1.b) / (kb1.k - kb2.k);
            cord.y = kb2.k * cord.x + kb2.b;

            return cord
        },
        _updateLinePos: function(pos) {
            var self = this;
            var size = self.size,
                foot = self._getLineCenterPos(),
                mouse = pos,
                a, c, degO, degMouse;
            /*O()
              |\
             a| \c
              |__\
           foot b mouse*/

            //垂足坐标
            self.preMovPos.b = self.preMovPos.b || gm.getTwoPointDistance(mouse, foot);

            c = gm.getTwoPointDistance(mouse, size.op);

            if (c < self.preMovPos.b) {
                c = self.preMovPos.b + 0.5;
            }
            self.dWidth = a = gm.getPythagoreanLineA(c, self.preMovPos.b);

            degO = gm.getCosineAngle(self.preMovPos.b, a, c);

            degMouse = self._calculateDeg(mouse.x, mouse.y)
            self.preMovPos.sign = self.preMovPos.sign || self._getSign(self.moveLineDeg, degMouse, size.op, mouse, foot);

            self.moveLineDeg = degMouse + self.preMovPos.sign * degO;

            if (self.moveLineDeg < 0) {
                self.moveLineDeg = self.moveLineDeg + 360
            };
            self.moveLineDeg = self.moveLineDeg % 360;

            var mx = a * Math.cos(gm.getRadian(self.moveLineDeg)) + size.op.x,
                my = a * Math.sin(gm.getRadian(self.moveLineDeg)) + size.op.y;
            if (mx < size.minX || mx > size.maxX || my < size.minY || my > size.maxY) {
                // self.isMoving = false;
                return
            }
            //先判断点是否在圆上
            if (!self.isOutSide && !self.isInside && ((self.dWidth < self.bigCircleR + 2 * self.cfg.R) && (self.dWidth > self.bigCircleR - 2 * self.cfg.R))) {
                self._adsorbed();
                self._updateLine();
            } else {
                self.moveLine.find('.potcle_line_d_dot').removeClass('oncircle');
                self.lineCenter.removeClass('oncircle');
                self._updateLine(foot.x, foot.y);
                self._updateDetai();
            }
            return {
                x: mx,
                y: my
            }
        },
        _updateCirclePos: function(p1, p2) {
            var self = this;
            if (!p1 || !p2) return;
            var cordArr = gm.getLineCircleIntersectionPos(p1, p2, self.size.op, self.bigCircleR);

            if (!cordArr) return;
            if (!cordArr[0].x && !cordArr[1].x) cordArr = self.preMovPos.cordArr;

            var degA = self._calculateDeg(cordArr[0].x, cordArr[0].y);
            if (degA > self.moveLineDeg) {
                if ((degA > 270 && degA < 360) && (self.moveLineDeg > 0 && self.moveLineDeg < 90)) {
                    self._setLineRotare(self.dot1, cordArr[0]);
                    self._setLineRotare(self.dot2, cordArr[1]);
                    self._setLineRotare(self.followR, cordArr[0]);
                } else {
                    self._setLineRotare(self.dot1, cordArr[1]);
                    self._setLineRotare(self.dot2, cordArr[0]);
                    self._setLineRotare(self.followR, cordArr[1]);
                }
            } else {
                if ((degA > 0 && degA < 90) && (self.moveLineDeg > 270 && self.moveLineDeg < 360)) {
                    self._setLineRotare(self.dot1, cordArr[1]);
                    self._setLineRotare(self.dot2, cordArr[0]);
                    self._setLineRotare(self.followR, cordArr[1]);
                } else {
                    self._setLineRotare(self.dot1, cordArr[0]);
                    self._setLineRotare(self.dot2, cordArr[1]);
                    self._setLineRotare(self.followR, cordArr[0]);
                }

            }

            self.$view.find('._js_potcle_line_p1').removeClass('hide_dom')
            self.$view.find('._js_potcle_line_p2').removeClass('hide_dom')
            self.preMovPos.cordArr = cordArr;
        },
        _setLineRotare: function(obj, pos) {
            var self = this;
            var deg = self._calculateDeg(pos.x, pos.y);
            self._setRotate(obj, deg);
            self._setRotate(obj.find('._js_potcle_lw_r'), -deg);
            self._setRotate(obj.find('.potcle_lw_p'), -deg)
        },
        _setPos: function(obj, pos) {
            if (!pos) return;
            obj.css({
                'top': pos.top,
                'left': pos.left
            })
            return obj
        },
        _setRotate: function(obj, deg) {
            obj.css({
                '-webkit-transform': 'rotate(' + deg + 'deg) translateZ(0)',
                'transform': 'rotate(' + deg + 'deg) translateZ(0)',
            })
            return obj
        },
        _adsorbedCompare: function(x, y) {
            var self = this;
            var direction = self._getDirection(self.dLenArr);
            if (((self.dWidth > self.bigCircleR + self.cfg.R / 3) && (self.dWidth < self.bigCircleR + self.cfg.R / 2)) && !direction) {
                self._adsorbed();
                self._updateDetai();
                self._updateLine();
                self.dLenArr = [];
            }
            if ((self.dWidth < self.bigCircleR - self.cfg.R / 4) && (self.dWidth > self.bigCircleR - self.cfg.R - 5) && direction) {
                self._adsorbed();
                self._updateDetai();
                self._updateLine();
                self.dLenArr = [];
            }
            //圆心吸附
            if ((self.dWidth < (self.centerR + self.cfg.R + 5)) && !direction) {
                self.isCenterAdsorbed = true;
                self._updateLine(x, y);
                self.isMoving = false;
                self.dLenArr = [];
            } else {
                self.isCenterAdsorbed = false;
            }
        },
        /**
         * 获取直线相对于圆心的方向
         */
        _getDirection: function(arr, inteval) {
            var self = this;
            var temp = arr[0],
                inteval = inteval || 4,
                result = false,
                i,
                len = arr.length;
            if (len < 12) return true;
            if (self.isLeaveCenter) return true
            for (i = 1 + inteval; i < len; i = i + inteval - 1) {
                if (arr[i] > temp) result = true;
                temp = arr[i];
            }

            return result //返回true则远离圆心方向
        },
        /*计算鼠标的速度*/
        _calculateMouseSpeed: function() {
            var self = this,
                mouseSpeed,
                deltaX,
                deltaY,
                deltaD,
                deltaT;
            if (!(self.prePosTime.x === undefined || self.prePosTime.y === undefined || self.prePosTime.t === undefined)) {

                deltaX = (event.screenX || event.touches[0].screenX) - self.prePosTime.x;
                deltaY = (event.screenY || event.touches[0].screenY) - self.prePosTime.y;
                deltaD = Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));

                deltaT = event.timeStamp - self.prePosTime.t;
                mouseSpeed = deltaD / deltaT * 1000;

            }
            self.prePosTime.x = event.screenX || event.touches[0].screenX;
            self.prePosTime.y = event.screenY || event.touches[0].screenY;
            self.prePosTime.t = event.timeStamp;
            return mouseSpeed;
        },
        /*计算角度*/
        _calculateDeg: function(x, y) {
            var self = this;
            moveRotate = 0,
                mainCircleOffset = self.mainCircle.offset();

            if (x === (self.bigCircleR + mainCircleOffset.left)) {
                if (y < (self.bigCircleR + mainCircleOffset.top)) {
                    moveRotate = 2 * Math.PI * 0.75;
                } else {
                    moveRotate = 2 * Math.PI * 0.25;
                }
            }
            if ((x - (self.bigCircleR + mainCircleOffset.left)) < 0) {
                moveRotate = Math.atan((y - (self.bigCircleR + mainCircleOffset.top)) / (x - (self.bigCircleR + mainCircleOffset.left))) + Math.PI;
            } else {
                moveRotate = Math.atan((y - (self.bigCircleR + mainCircleOffset.top)) / (x - (self.bigCircleR + mainCircleOffset.left)));
                if ((y - (self.bigCircleR + mainCircleOffset.top)) < 0) {
                    moveRotate = moveRotate + 2 * Math.PI
                };
            }
            if (y === (self.bigCircleR + mainCircleOffset.top)) {
                if (x > (self.bigCircleR + mainCircleOffset.left)) {
                    moveRotate = 2 * Math.PI;
                } else {
                    moveRotate = 2 * Math.PI * 0.5;
                }
            }
            return (moveRotate / (2 * Math.PI)) * 360;
            // return moveRotate
        },
        /*更新线条角度和长度及字母的角度位置*/
        _updateLine: function(x, y) {
            var self = this,
                letterPos = null;
            //改变字母O的坐标
            if (self.isInside || (self.isOutSide && self.isShow)) {
                if (self.moveLineDeg < 40 || self.moveLineDeg > 200) {
                    letterPos = {
                        'left': '-1.5333em',
                        'top': '1em'
                    };
                } else {
                    letterPos = {
                        'top': '-2.2em',
                        'left': '.5em'
                    };
                }
            };

            if (self.dWidth < 168 / 877 * self.pacMainW) {
                self._setPos(self.centerCircleO, {
                    'left': '-1.5333em',
                    'top': '1em'
                });
                self._setRotate(self.centerCircleO.parent('._js_potcle_circenter'), self.moveLineDeg + 90)
                self._setRotate(self.centerCircleO, -(self.moveLineDeg + 90))
            } else {
                self._setPos(self.centerCircleO, letterPos);
                self._setRotate(self.centerCircleO.parent('._js_potcle_circenter'), 0)
                self._setRotate(self.centerCircleO, 0)
            }

            //字母d位置自适应
            if (self.dWidth > 168 / 877 * self.pacMainW) {
                self.letterD.css({
                    'top': '.5em',
                    'left': '1.8em'
                })
            } else if (self.dWidth > 108 / 877 * self.pacMainW && self.dWidth < 168 / 877 * self.pacMainW) {
                self.letterD.css({
                    'top': '-3em',
                    'left': '1.5em'
                })
            } else {
                self.letterD.css({
                    'top': '.5em',
                    'left': '-3.5em'
                })
            }
            if (self.dWidth < 35 / 877 * self.pacMainW) {
                self.foot.addClass('hide_dom')
            } else {
                self.foot.removeClass('hide_dom')
            }
            //调整字母L的位置
            var kb = gm.getLineKb(gm.getDegree(Math.atan(28 / (self.pacMain.innerWidth() / 1.62))), {
                x: 36,
                y: 25
            });
            y = Math.min(Math.max(self.dWidth * kb.k + kb.b, 22), 46)
            self.letterL.css('left', y + '%');

            self._setRotate(self.moveLineD, -self.moveLineDeg);
            self._setRotate(self.letterP, -self.moveLineDeg);
            self._setRotate(self.letterL, -self.moveLineDeg + 270);
            //半径及字母r旋转的角度
            if (self.isShow) {
                self._setRotate(self.followR, self.moveLineDeg - 15);
                self._setRotate(self.followR.find('._js_potcle_lw_r'), -self.moveLineDeg + 15);
            }
            //圆心吸附及一些字母位置改变
            if (self.isCenterAdsorbed) {
                self.isCenterAdsorbed = false;
                self.isCenter = true;
                self.dWidth = 0;
                self.foot.addClass('hide_dom')
                self._setRotate(self.moveLine.css('width', 0 + 'px'), self.moveLineDeg);
                self._setRotate(self.centerCircleO.parent('._js_potcle_circenter'), self.moveLineDeg + 90)
                self._setRotate(self.centerCircleO, -(self.moveLineDeg + 90))
                self.dotR.removeClass('potcle_line_r_show_dot');
                self.followR.addClass('hide_dom');
                self.dotR.find('._js_potcle_lw_r').removeClass('hide_dom')
                var pos1 = self._getCenterPos(self.pos1),
                    pos2 = self._getCenterPos(self.pos2);
                self._updateCirclePos(pos1, pos2);
                return
            }
            if (self.dWidth > 1 && self.isInside) {
                if (self.isShow) {
                    self.dotR.addClass('potcle_line_r_show_dot');
                } else {
                    self.followR.removeClass('hide_dom');
                    self.dotR.find('._js_potcle_lw_r').addClass('hide_dom')
                }
                self.isCenter = false;

            };
            self._setRotate(self.moveLine.css('width', self.dWidth + 'px'), self.moveLineDeg)
        },
        /*更新提示信息*/
        _updateDetai: function() {
            var self = this;
            if (self.dWidth > self.bigCircleR + self.cfg.R / 4) {
                self.dotR.removeClass('potcle_line_r_show_dot').addClass('hide_dom');
                self.followR.removeClass('hide_dom');
                if (self.compareSymbol.text() === ">") {
                    self.isOutSide = true;
                    self.isInside = false;
                    return
                }
                self.compareSymbol.text(">");
                self.$view.find('.line_p_out').removeClass('hide_dom').siblings('div').addClass('hide_dom');

            } else if (self.dWidth < self.bigCircleR - self.cfg.R / 4) {
                if (self.isShow) {
                    self.dotR.removeClass('hide_dom').addClass('potcle_line_r_show_dot');
                    self.followR.addClass('hide_dom');
                    self.dotR.find('._js_potcle_lw_r').removeClass('hide_dom')
                } else {
                    self.dotR.removeClass('hide_dom').find('._js_potcle_line_r_show1').addClass('potcle_line_r_show_dot');
                    self.dotR.find('._js_potcle_lw_r').addClass('hide_dom')
                }
                if (self.compareSymbol.text() === "<") {
                    self.isOutSide = false;
                    self.isInside = true;
                    return
                }
                self.compareSymbol.text("<")
                self.$view.find('.line_p_in').removeClass('hide_dom').siblings('div').addClass('hide_dom');
                self.isOutSide = false;
                self.isInside = true;
            } else {
                self.isOutSide = false;
                self.isInside = false;
                self.dotR.removeClass('potcle_line_r_show_dot').addClass('hide_dom');
                self.followR.removeClass('hide_dom');
                self.compareSymbol.text("=")
                self.$view.find('.line_p_on').removeClass('hide_dom').siblings('div').addClass('hide_dom');
            }
        },
        /*吸附*/
        _adsorbed: function() {
            var self = this;
            self.lineCenter.addClass('oncircle');
            self.dWidth = self.bigCircleR;
            self.moveLine.css('width', self.dWidth + 'px').find('.potcle_line_d_dot').addClass('oncircle');
            self.isOutSide = false;
            self.isInside = false;
        }
    }
    return lineCircleRalation;
})]]></presenter><resources><file src="./resources/wood/images/dashed_gray.png"/><file src="./resources/wood/images/dashed_red.png"/><file src="./resources/wood/images/icon_hide_act.png"/><file src="./resources/wood/images/icon_hide_nor.png"/><file src="./resources/wood/images/icon_show_act.png"/><file src="./resources/wood/images/icon_show_nor.png"/></resources></addon>