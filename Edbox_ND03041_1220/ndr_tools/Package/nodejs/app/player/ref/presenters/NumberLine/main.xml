<?xml version='1.0' encoding='UTF-8' ?>
<addon id='NumberLine'>
<properties>



</properties>

<dependencies>

<jsDependency>
    <javaScript  name="out_frame" version="1.0.8" />
    <javaScript  name="threejs" version="73.1" />
    <javaScript  name="threejs_canvasrender" version="73.1" />
    <javaScript  name="threejs_projector" version="73.1" />
    <javaScript  name="threex_dynamictexture" version="1.1" />
</jsDependency>


</dependencies>

<css>

<![CDATA[@charset "UTF-8";.numberLine{overflow:hidden;background:#bfd3e2}.numberLine .textbox{position:absolute;left:0;right:0;bottom:4.91667em}.numberLine .num_overlay{z-index:301;position:absolute;left:4em;right:4em;height:100%;background:rgba(33,33,33,.7)}.numberLine .num_msg_box{z-index:302;position:absolute;left:50%;top:30%;width:21.9166666667em;margin-left:-10.9583333333em;white-space:nowrap}.numberLine .msg_wrap{display:inline-block;position:relative;margin-top:0;padding:1.5em 0;width:100%;white-space:normal;background:rgba(47,47,47,.8);color:#fff;border-radius:.2083333333em;vertical-align:middle;z-index:120}.numberLine .msg_wrap .msg_text{margin-bottom:.8333333333em;padding:0 1.6666666667em;line-height:1.875em;text-align:center;min-height:3.75em}.numberLine .msg_wrap .msg_text .msg_center_text{display:inline-block;text-align:left;font-size:1.25em}.numberLine .msg_wrap .cancel,.numberLine .msg_wrap .confirm{display:inline-block;margin:.5416666667em 1.0833333333em 0;padding:0 1em;height:2em;line-height:2em;min-width:4.5em;background:#11b0b6;cursor:pointer}.numberLine .msg_wrap .cancel:active,.numberLine .msg_wrap .confirm:active{background:#62999b}.numberLine .msg_wrap .cancel .btn_text,.numberLine .msg_wrap .confirm .btn_text{font-size:1em}.numberLine .dialog_tips .msg_text{margin-bottom:0}.numberLine .operation_tips_box{display:none;text-align:center}.numberLine .operation_tips_box .operation_tips_text{box-sizing:content-box;background:rgba(47,47,47,.81);padding:.75em 1.5em;min-width:13.75em;max-width:46em;border-radius:.25em;text-align:left}.numberLine .operation_tips_box .operation_tips_text h4{text-align:center}.numberLine .operation_tips_box .arrow_down{display:inline-block;border:.75em solid transparent;border-top-color:rgba(47,47,47,.8)}.numberLine .operation_tips_box em{font-size:1.25em;line-height:1.875em;color:#fff!important}.toolNumberLines .tool_number_lines_area{position:absolute;left:4em;right:4em;top:0;bottom:4.91667em;cursor:pointer}.toolNumberLines .tool_number_lines_tools{position:absolute;bottom:0;width:100%;z-index:105;background:rgba(255,255,255,.25)}.toolNumberLines .tool_number_lines_tools .button_modules{position:relative;height:4.91667em}.toolNumberLines .tool_number_lines_tools .button_modules .com_part_toolbar{height:auto}.toolNumberLines .tool_number_lines_tools .toolbar_left{float:left;margin-left:7.75em}.toolNumberLines .tool_number_lines_tools .toolbar_right{float:right;margin-right:7.75em}.toolNumberLines .tool_number_lines_tools .toolbar_left,.toolNumberLines .tool_number_lines_tools .toolbar_right{display:inline-block;position:relative;text-align:center;height:4.91667em}.toolNumberLines .tool_number_lines_tools .toolbar_left li,.toolNumberLines .tool_number_lines_tools .toolbar_right li{margin-right:1.5em;display:inline-block;height:100%;position:relative;min-width:6.25em}.toolNumberLines .tool_number_lines_tools .toolbar_left li:last-child,.toolNumberLines .tool_number_lines_tools .toolbar_right li:last-child{margin-right:0}.toolNumberLines .tool_number_lines_tools .toolbar_left li .com_btn_square_tool,.toolNumberLines .tool_number_lines_tools .toolbar_right li .com_btn_square_tool{display:block;height:100%;text-decoration:none}.toolNumberLines .tool_number_lines_tools .toolbar_left li i,.toolNumberLines .tool_number_lines_tools .toolbar_right li i{margin:0 auto;display:inline-block;width:6.25em;height:3em;vertical-align:top}.toolNumberLines .tool_number_lines_tools .toolbar_left li .com_btn_text,.toolNumberLines .tool_number_lines_tools .toolbar_right li .com_btn_text{color:#292525;font-style:normal;font-size:1.04167em;line-height:1.5;display:block;text-align:center}.toolNumberLines .tool_number_lines_tools .toolbar_left li.btn_landmarks i,.toolNumberLines .tool_number_lines_tools .toolbar_right li.btn_landmarks i{background-image:url(resources/icons_landmarks_nor.png);background-size:100% auto;background-position:center center}.toolNumberLines .tool_number_lines_tools .toolbar_left li.btn_landmarks.click_btn_on i,.toolNumberLines .tool_number_lines_tools .toolbar_left li.btn_landmarks:active i,.toolNumberLines .tool_number_lines_tools .toolbar_right li.btn_landmarks.click_btn_on i,.toolNumberLines .tool_number_lines_tools .toolbar_right li.btn_landmarks:active i{background-image:url(resources/icons_landmarks_atv.png);background-size:100% auto;background-position:center center}.toolNumberLines .tool_number_lines_tools .toolbar_left li.btn_landmarks.click_disabled i,.toolNumberLines .tool_number_lines_tools .toolbar_right li.btn_landmarks.click_disabled i{background-image:url(resources/icons_landmarks_off.png);background-size:100% auto;background-position:center center}.toolNumberLines .tool_number_lines_tools .toolbar_left li.btn_interval i,.toolNumberLines .tool_number_lines_tools .toolbar_right li.btn_interval i{background-image:url(resources/icons_interval_nor.png);background-size:100% auto;background-position:center center}.toolNumberLines .tool_number_lines_tools .toolbar_left li.btn_interval.click_btn_on i,.toolNumberLines .tool_number_lines_tools .toolbar_left li.btn_interval:active i,.toolNumberLines .tool_number_lines_tools .toolbar_right li.btn_interval.click_btn_on i,.toolNumberLines .tool_number_lines_tools .toolbar_right li.btn_interval:active i{background-image:url(resources/icons_interval_atv.png);background-size:100% auto;background-position:center center}.toolNumberLines .tool_number_lines_tools .toolbar_left li.btn_interval.click_disabled i,.toolNumberLines .tool_number_lines_tools .toolbar_right li.btn_interval.click_disabled i{background-image:url(resources/icons_interval_off.png);background-size:100% auto;background-position:center center}.toolNumberLines .tool_number_lines_tools .toolbar_left li.btn_addcutline i,.toolNumberLines .tool_number_lines_tools .toolbar_right li.btn_addcutline i{background-image:url(resources/icons_addcutline_nor.png);background-size:100% auto;background-position:center center}.toolNumberLines .tool_number_lines_tools .toolbar_left li.btn_addcutline.click_btn_on i,.toolNumberLines .tool_number_lines_tools .toolbar_left li.btn_addcutline:active i,.toolNumberLines .tool_number_lines_tools .toolbar_right li.btn_addcutline.click_btn_on i,.toolNumberLines .tool_number_lines_tools .toolbar_right li.btn_addcutline:active i{background-image:url(resources/icons_addcutline_atv.png);background-size:100% auto;background-position:center center}.toolNumberLines .tool_number_lines_tools .toolbar_left li.btn_addcutline.click_disabled i,.toolNumberLines .tool_number_lines_tools .toolbar_right li.btn_addcutline.click_disabled i{background-image:url(resources/icons_addcutline_off.png);background-size:100% auto;background-position:center center}.toolNumberLines .tool_number_lines_tools .toolbar_left li.btn_mixed i,.toolNumberLines .tool_number_lines_tools .toolbar_right li.btn_mixed i{background-image:url(resources/icons_mixed_nor.png);background-size:100% auto;background-position:center center}.toolNumberLines .tool_number_lines_tools .toolbar_left li.btn_mixed.click_btn_on i,.toolNumberLines .tool_number_lines_tools .toolbar_left li.btn_mixed:active i,.toolNumberLines .tool_number_lines_tools .toolbar_right li.btn_mixed.click_btn_on i,.toolNumberLines .tool_number_lines_tools .toolbar_right li.btn_mixed:active i{background-image:url(resources/icons_mixed_atv.png);background-size:100% auto;background-position:center center}.toolNumberLines .tool_number_lines_tools .toolbar_left li.btn_mixed.click_disabled i,.toolNumberLines .tool_number_lines_tools .toolbar_right li.btn_mixed.click_disabled i{background-image:url(resources/icons_mixed_off.png);background-size:100% auto;background-position:center center}.toolNumberLines .tool_number_lines_tools .toolbar_left li.btn_union i,.toolNumberLines .tool_number_lines_tools .toolbar_right li.btn_union i{background-image:url(resources/icons_union_nor.png);background-size:100% auto;background-position:center center}.toolNumberLines .tool_number_lines_tools .toolbar_left li.btn_union.click_btn_on i,.toolNumberLines .tool_number_lines_tools .toolbar_left li.btn_union:active i,.toolNumberLines .tool_number_lines_tools .toolbar_right li.btn_union.click_btn_on i,.toolNumberLines .tool_number_lines_tools .toolbar_right li.btn_union:active i{background-image:url(resources/icons_union_atv.png);background-size:100% auto;background-position:center center}.toolNumberLines .tool_number_lines_tools .toolbar_left li.btn_union.click_disabled i,.toolNumberLines .tool_number_lines_tools .toolbar_right li.btn_union.click_disabled i{background-image:url(resources/icons_union_off.png);background-size:100% auto;background-position:center center}.toolNumberLines .tool_number_lines_tools .toolbar_left li.btn_delete i,.toolNumberLines .tool_number_lines_tools .toolbar_right li.btn_delete i{background-image:url(resources/icons_delete_nor.png);background-size:100% auto;background-position:center center}.toolNumberLines .tool_number_lines_tools .toolbar_left li.btn_delete.click_btn_on i,.toolNumberLines .tool_number_lines_tools .toolbar_left li.btn_delete:active i,.toolNumberLines .tool_number_lines_tools .toolbar_right li.btn_delete.click_btn_on i,.toolNumberLines .tool_number_lines_tools .toolbar_right li.btn_delete:active i{background-image:url(resources/icons_delete_atv.png);background-size:100% auto;background-position:center center}.toolNumberLines .tool_number_lines_tools .toolbar_left li.btn_delete.click_disabled i,.toolNumberLines .tool_number_lines_tools .toolbar_right li.btn_delete.click_disabled i{background-image:url(resources/icons_delete_off.png);background-size:100% auto;background-position:center center}.toolNumberLines .tool_number_lines_tools .toolbar_left li.btn_clean i,.toolNumberLines .tool_number_lines_tools .toolbar_right li.btn_clean i{background-image:url(resources/icons_clean_nor.png);background-size:100% auto;background-position:center center}.toolNumberLines .tool_number_lines_tools .toolbar_left li.btn_clean.click_btn_on i,.toolNumberLines .tool_number_lines_tools .toolbar_left li.btn_clean:active i,.toolNumberLines .tool_number_lines_tools .toolbar_right li.btn_clean.click_btn_on i,.toolNumberLines .tool_number_lines_tools .toolbar_right li.btn_clean:active i{background-image:url(resources/icons_clean_atv.png);background-size:100% auto;background-position:center center}.toolNumberLines .tool_number_lines_tools .toolbar_left li.btn_clean.click_disabled i,.toolNumberLines .tool_number_lines_tools .toolbar_right li.btn_clean.click_disabled i{background-image:url(resources/icons_clean_off.png);background-size:100% auto;background-position:center center}.toolNumberLines .tool_number_lines_tools .toolbar_left li.btn_clean .tip_clean,.toolNumberLines .tool_number_lines_tools .toolbar_right li.btn_clean .tip_clean{left:-12.5em;top:-11.66667em;bottom:auto}.toolNumberLines .tool_number_lines_tools .toolbar_left li.btn_clean .tip_clean .tool_tip_wrap,.toolNumberLines .tool_number_lines_tools .toolbar_right li.btn_clean .tip_clean .tool_tip_wrap{margin-top:0}.toolNumberLines .tool_number_lines_tools .toolbar_left li.btn_clean .tip_clean .tool_tip_wrap:before,.toolNumberLines .tool_number_lines_tools .toolbar_right li.btn_clean .tip_clean .tool_tip_wrap:before{display:none}.toolNumberLines .tool_number_lines_tools .toolbar_left li.btn_clean .tip_clean .tip_text,.toolNumberLines .tool_number_lines_tools .toolbar_right li.btn_clean .tip_clean .tip_text{text-align:center}.toolNumberLines .tool_number_lines_tools .toolbar_left li.click_btn_on .com_btn_text,.toolNumberLines .tool_number_lines_tools .toolbar_left li:active .com_btn_text,.toolNumberLines .tool_number_lines_tools .toolbar_right li.click_btn_on .com_btn_text,.toolNumberLines .tool_number_lines_tools .toolbar_right li:active .com_btn_text{color:#11b1b7}.toolNumberLines .tool_number_lines_tools .toolbar_left li.click_disabled .com_btn_text,.toolNumberLines .tool_number_lines_tools .toolbar_right li.click_disabled .com_btn_text{color:#8d9aa4}]]>

</css>


<view>

<![CDATA[<div class="tool_number_lines_content exam_wood_content_pc exam_wood_whiteboard numberLine" style="height: 100%;display: none"><div class="com_layout layout_whiteboard_notime"><div class="com_lay_header"><div class="com_u_timebox"></div><div class="com_lay_toptool"></div></div><div class="com_lay_contain"><div class=""><div class="toolNumberLines"><div class="tool_number_lines_area"><canvas class="numberline-canvas"></canvas><input type="text" class="numberline-input" value="1" style="display:block; position:fixed; left:-400px; bottom:-200px"> <input type="text" class="markpoint-input" value="0" style="display:block; position:fixed; left:-400px; bottom:-200px"></div><div class="tool_number_lines_tools"><div class="button_modules"><div class="com_part_toolbar"><ul class="toolbar_left"><li class="btn_landmarks mark" data-action="mark"><a class="com_btn_square_tool" href="javascript:;"><i class="com_btn_pic"></i> <em class="com_btn_text"></em></a></li><li class="btn_interval interval" data-action="interval"><a class="com_btn_square_tool" href="javascript:;"><i class="com_btn_pic"></i> <em class="com_btn_text"></em></a></li><li class="btn_addcutline regulation" data-action="regulation"><a class="com_btn_square_tool" href="#"><i class="com_btn_pic"></i> <em class="com_btn_text"></em></a></li><li class="btn_mixed mix click_disabled" style="display:none" data-action="mix"><a class="com_btn_square_tool" href="#"><i class="com_btn_pic"></i> <em class="com_btn_text"></em></a></li><li class="btn_union union click_disabled" style="display:none" data-action="union"><a class="com_btn_square_tool" href="#"><i class="com_btn_pic"></i> <em class="com_btn_text"></em></a></li></ul><ul class="toolbar_right"><li class="btn_delete clean click_disabled" data-action="clean"><a class="com_btn_square_tool" href="javascript:;"><i class="com_btn_pic"></i> <em class="com_btn_text"></em></a></li><li class="btn_clean clear_all click_disabled" data-action="clear_all"><a class="com_btn_square_tool" href="#"><i class="com_btn_pic"></i> <em class="com_btn_text"></em></a></li></ul></div></div></div><div class="msg_box" style="display: none"><div class="msg_wrap"><div class="msg_text"></div><div class="btn_group"><div class="cancel"></div><div class="confirm"></div></div></div></div><div class="textbox textbox_scale"><div class="operation_tips_box"><div class="operation_tips_text"><em><h4></h4><p></p><p></p><p></p><p></p></em></div><i class="arrow_down" style="left: 50%"></i></div></div></div></div></div></div></div>]]>
</view>


<presenter>

<![CDATA[var AddonNumberLine_create = function() { var presenter= 
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _appPresenter = __webpack_require__(1);

	var _appPresenter2 = _interopRequireDefault(_appPresenter);

	exports['default'] = function () {
	  return _appPresenter2['default'];
	};

	module.exports = exports['default'];

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _presenterRun = __webpack_require__(2);

	var _presenterRun2 = _interopRequireDefault(_presenterRun);

	// import createPreview from './presenter/createPreview'

	var _presenterSetState = __webpack_require__(56);

	var _presenterSetState2 = _interopRequireDefault(_presenterSetState);

	var _presenterGetState = __webpack_require__(57);

	var _presenterGetState2 = _interopRequireDefault(_presenterGetState);

	var _presenterPageChange = __webpack_require__(58);

	var _presenterPageChange2 = _interopRequireDefault(_presenterPageChange);

	var _presenterSetBasePath = __webpack_require__(59);

	var _presenterSetBasePath2 = _interopRequireDefault(_presenterSetBasePath);

	var _presenterDestroy = __webpack_require__(60);

	var _presenterDestroy2 = _interopRequireDefault(_presenterDestroy);

	var _presenterHandleCallback = __webpack_require__(5);

	var _presenterHandleCallback2 = _interopRequireDefault(_presenterHandleCallback);

	var _presenterSetLocationProperties = __webpack_require__(61);

	var _presenterSetLocationProperties2 = _interopRequireDefault(_presenterSetLocationProperties);

	exports['default'] = {
	  setLocationProperties: _presenterSetLocationProperties2['default'],
	  run: _presenterRun2['default'],
	  // createPreview,
	  setState: _presenterSetState2['default'],
	  getState: _presenterGetState2['default'],
	  pageChange: _presenterPageChange2['default'],
	  setBasePath: _presenterSetBasePath2['default'],
	  handleCallback: _presenterHandleCallback2['default'],
	  destroy: _presenterDestroy2['default']
	};
	module.exports = exports['default'];

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	/**
		* 运行环境下, 初始化Module的方法
		* @param view 运行视图(DOM对象)
		* @param model Module的模型, Key-Value结构
		* @remark 该方法为Module生命周期方法,仅在Module初始化时执行一次
		*/
	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _presenterLogic = __webpack_require__(3);

	var _presenterLogic2 = _interopRequireDefault(_presenterLogic);

	exports['default'] = function (view, model) {
		(0, _presenterLogic2['default'])(view, model, false);
	};

	module.exports = exports['default'];

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Module的逻辑
	 * @param view 视图对象, 根据是否为预览状态传入不同的视图对象
	 * @param model 模型对象
	 * @param isPreview 是否为编辑环境, true=编辑环境, false=运行环境
	 */

	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _presenter = __webpack_require__(1);

	var _presenter2 = _interopRequireDefault(_presenter);

	var _runtime = __webpack_require__(4);

	var _runtime2 = _interopRequireDefault(_runtime);

	var _handleCallback = __webpack_require__(5);

	var _handleCallback2 = _interopRequireDefault(_handleCallback);

	var _constants = __webpack_require__(17);

	var _threeManger = __webpack_require__(16);

	var _callNative = __webpack_require__(54);

	var _callNative2 = _interopRequireDefault(_callNative);

	var _UtilsDestroyThreeObject = __webpack_require__(29);

	var _UtilsDestroyThreeObject2 = _interopRequireDefault(_UtilsDestroyThreeObject);

	var _initI18N = __webpack_require__(55);

	var _initI18N2 = _interopRequireDefault(_initI18N);

	exports['default'] = function (view, model, isPreview) {
		// 将 model 值赋给 this
		_presenter2['default'].model = model;
		// 将 view 赋值给 this
		_presenter2['default'].view = view;
		/**
	  * 注册 native 事件
	  * 备课系统下没有 icCreatePlayer
	  */
		if (window.icCreatePlayer && _runtime2['default'] === window.icCreatePlayer.RUNTIME.TEACHER_MOBILE) {
			window.bridgeListener = window.Bridge.registerListener(_constants.eventName, _handleCallback2['default']);
		}

		// 调用原生方法
		/*  presenter.callNative = function(eventName, data) {
	  if (isApp && Bridge && Bridge.callNative) {
	  return Bridge.callNative('com.nd.pad.icr.ui.IcrJsBridge', eventName, data);
	  }
	  return false;
	  };*/
		// 获取路径

		(0, _callNative2['default'])('addSubjectToolButton', {
			button: {
				sort: 13, // 按钮的顺序，按项目排序
				buttonId: 'NumberLine', // 唯一性，与需生成的图形名字一样就好
				isPressed: false, // 默认是否选中
				text: _presenter2['default']._i18n['nl_title'], // 按钮名
				normalIcon: _presenter2['default'].path + 'resources/coor_normal.png', // 未选中时显示的图标
				pressedIcon: _presenter2['default'].path + 'resources/coor_pressed.png', // 选中时显示的图标
				eventName: 'NumberLine', // 触发事件
				eventData: {
					item: 'click',
					value: 'NumberLine'
				}

			}
		});
		// 初始化three组件
		// threeStart();
		(0, _initI18N2['default'])($(view));
		(0, _handleCallback2['default'])();
	};

	module.exports = exports['default'];

/***/ },
/* 4 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var runtime = null;
	// 备课端没有 window.player
	if (window.player) {
	  runtime = window.player.getPlayerServices().getRuntime();
	}
	exports["default"] = runtime;
	module.exports = exports["default"];

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _ShapeNumberLine = __webpack_require__(6);

	var _ShapeNumberLine2 = _interopRequireDefault(_ShapeNumberLine);

	var _ShapeMarkPoint = __webpack_require__(9);

	var _ShapeMarkPoint2 = _interopRequireDefault(_ShapeMarkPoint);

	var _presenter = __webpack_require__(1);

	var _presenter2 = _interopRequireDefault(_presenter);

	var _threeManger = __webpack_require__(16);

	var _UtilsUpdateUnit = __webpack_require__(11);

	var _UtilsUpdateUnit2 = _interopRequireDefault(_UtilsUpdateUnit);

	var _UtilsUpdateUnitNum = __webpack_require__(22);

	var _UtilsUpdateUnitNum2 = _interopRequireDefault(_UtilsUpdateUnitNum);

	var _EventDocumentEvent = __webpack_require__(23);

	var _EventDocumentEvent2 = _interopRequireDefault(_EventDocumentEvent);

	var _UtilsToolbar = __webpack_require__(30);

	var _UtilsToolbar2 = _interopRequireDefault(_UtilsToolbar);

	var _ShapeAddMarkPoint = __webpack_require__(15);

	var _UtilsEditeMarkPointText = __webpack_require__(19);

	var _UtilsClose = __webpack_require__(52);

	var _UtilsClose2 = _interopRequireDefault(_UtilsClose);

	var _UtilsDestroyThreeObject = __webpack_require__(29);

	var _UtilsDestroyThreeObject2 = _interopRequireDefault(_UtilsDestroyThreeObject);

	var _UtilsPushToStudents = __webpack_require__(53);

	var _UtilsPushToStudents2 = _interopRequireDefault(_UtilsPushToStudents);

	var _constants = __webpack_require__(17);

	var lineWidth, unitHeight;

	exports['default'] = function (eventData) {
		// 显示3D图形的形状
		if ($(_presenter2['default'].view).find('.numberLine').css('display') === 'none') {
			$(_presenter2['default'].view).find('.numberLine').show();

			if (_constants.isWeb || _constants.TeacherPc) {
				$(_presenter2['default'].view).find('.numberLine').removeClass('exam_wood_content_pad').removeClass('tool_num_fullscreen').addClass('exam_wood_content_pc');
			} else {
				$(_presenter2['default'].view).find('.numberLine').removeClass('exam_wood_content_pc').addClass('exam_wood_content_pad').addClass('tool_num_fullscreen');
			}

			(0, _threeManger.threeStart)();

			var pointA = new THREE.Vector3(-280, 0, 0);
			var pointB = new THREE.Vector3(280, 0, 0);
			exports.lineWidth = lineWidth = 6;
			var arrowLength = 30;
			var controllerDis = 20;
			exports.unitHeight = unitHeight = 15;
			var unitLength = 80;
			var unitMultiple = 1;
			var selectA = new THREE.Vector3(-30, 0, 0);
			var selectB = new THREE.Vector3(30, 0, 0);
			var numberLine = new _ShapeNumberLine2['default'](pointA, pointB, lineWidth, arrowLength, controllerDis, unitHeight, unitLength, selectA, selectB).create();
			_presenter2['default'].numberLine = numberLine;
			(0, _UtilsUpdateUnit2['default'])(numberLine, pointA, pointB, unitMultiple, unitLength, lineWidth, unitHeight);
			numberLine.data.unitMultiple = unitMultiple;
			_threeManger.scene.add(numberLine);
			_presenter2['default'].renderer();
			$(_presenter2['default'].view).find('.numberline-input').on('keyup', function () {
				(0, _UtilsUpdateUnitNum2['default'])(_presenter2['default'].numberLine, this);
			});
			$(_presenter2['default'].view).find('.markpoint-input').bind('input propertychange', function () {
				(0, _UtilsEditeMarkPointText.writeMarkPointText)(this);
			});
			(0, _UtilsToolbar2['default'])();
			(0, _EventDocumentEvent2['default'])();
			(0, _UtilsPushToStudents2['default'])();
			_ShapeAddMarkPoint.resetCollection && typeof _ShapeAddMarkPoint.resetCollection == 'function' ? (0, _ShapeAddMarkPoint.resetCollection)() : null;
			// ppt
			$(_presenter2['default'].view).find('.numberline_close').click(function () {
				if (CoursePlayer) CoursePlayer.close();
			});
		} else {
			(0, _UtilsClose2['default'])();
		}
	};

	exports.lineWidth = lineWidth;
	exports.unitHeight = unitHeight;

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	    value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _UtilsUpdateVertices = __webpack_require__(7);

	var _UtilsUpdateVertices2 = _interopRequireDefault(_UtilsUpdateVertices);

	var _UtilsRotateAngle = __webpack_require__(8);

	/**
	 * pointA数轴左端点
	 * pointB数轴右端点
	 * lineWidth数轴线宽
	 * arrowLength箭号长度
	 * controllerDis控制器距两端的距离
	 * unitHeight刻度高度
	 * unitLength数轴单个刻度的长度
	 */

	var NumberLine = (function () {
	    function NumberLine() {
	        var pointA = arguments.length <= 0 || arguments[0] === undefined ? new THREE.Vector3(-280, 0, 0) : arguments[0];
	        var pointB = arguments.length <= 1 || arguments[1] === undefined ? new THREE.Vector3(280, 0, 0) : arguments[1];
	        var lineWidth = arguments.length <= 2 || arguments[2] === undefined ? 6 : arguments[2];
	        var arrowLength = arguments.length <= 3 || arguments[3] === undefined ? 30 : arguments[3];
	        var controllerDis = arguments.length <= 4 || arguments[4] === undefined ? 20 : arguments[4];
	        var unitHeight = arguments.length <= 5 || arguments[5] === undefined ? 15 : arguments[5];
	        var unitLength = arguments.length <= 6 || arguments[6] === undefined ? 80 : arguments[6];
	        var selectA = arguments.length <= 7 || arguments[7] === undefined ? new THREE.Vector3(70, -20, 0) : arguments[7];
	        var selectB = arguments.length <= 8 || arguments[8] === undefined ? new THREE.Vector3(90, -20, 0) : arguments[8];

	        _classCallCheck(this, NumberLine);

	        this.pointA = pointA;
	        this.pointB = pointB;
	        this.lineWidth = lineWidth;
	        this.arrowLength = arrowLength;
	        this.controllerDis = controllerDis;
	        this.unitHeight = unitHeight;
	        this.unitLength = unitLength;
	        this.selectA = selectA;
	        this.selectB = selectB;
	    }

	    // 线材质

	    _createClass(NumberLine, [{
	        key: 'getMaterial',
	        value: function getMaterial() {
	            return new THREE.MeshBasicMaterial({
	                color: 0x333333,
	                transparent: false,
	                opacity: 1
	            });
	        }

	        // 容差材质
	    }, {
	        key: 'getGroupMaterial',
	        value: function getGroupMaterial() {
	            return new THREE.MeshBasicMaterial({
	                color: 0x333333,
	                transparent: true,
	                opacity: 0
	            });
	        }

	        // 控制器材质
	    }, {
	        key: 'getControllerMaterial',
	        value: function getControllerMaterial() {
	            return new THREE.MeshBasicMaterial({
	                color: 0x00ff00,
	                transparent: false,
	                opacity: 1
	            });
	        }

	        // 控制器中间材质
	    }, {
	        key: 'getControllerCenterMaterial',
	        value: function getControllerCenterMaterial() {
	            return new THREE.MeshBasicMaterial({
	                color: 0xffffff,
	                transparent: false,
	                opacity: 1
	            });
	        }

	        // 控制器材质
	    }, {
	        key: 'getMarkPointMaterial',
	        value: function getMarkPointMaterial() {
	            return new THREE.MeshBasicMaterial({
	                color: '#FF0000',
	                transparent: false,
	                opacity: 1
	            });
	        }

	        // 绘制线
	    }, {
	        key: 'createLine',
	        value: function createLine() {
	            var shape = new THREE.Shape();
	            shape.moveTo(this.pointA.x - 3, -this.lineWidth / 2);
	            shape.lineTo(this.pointB.x, -this.lineWidth / 2);
	            shape.lineTo(this.pointB.x, this.lineWidth / 2);
	            shape.lineTo(this.pointA.x - 3, this.lineWidth / 2);
	            shape.lineTo(this.pointA.x - 3, -this.lineWidth / 2);
	            var geometry = new THREE.ShapeGeometry(shape);
	            var line = new THREE.Mesh(geometry, this.getMaterial());
	            line.name = 'line';
	            return line;
	        }

	        // 绘制圆心
	    }, {
	        key: 'createCenter',
	        value: function createCenter() {
	            var circleGeometry = new THREE.CircleGeometry(this.lineWidth * 1.2, 32);
	            var circle = new THREE.Mesh(circleGeometry, this.getMaterial());
	            circle.name = 'center';
	            return circle;
	        }

	        // 绘制刻度选择框
	    }, {
	        key: 'createUnitSelect',
	        value: function createUnitSelect() {
	            var us = new THREE.Shape();
	            us.moveTo(this.selectA.x, this.selectA.y - this.lineWidth * 1.6);
	            us.lineTo(this.selectB.x, this.selectB.y - this.lineWidth * 1.6);
	            us.lineTo(this.selectB.x, this.selectB.y + this.lineWidth * 1.6);
	            us.lineTo(this.selectA.x, this.selectB.y + this.lineWidth * 1.6);
	            us.lineTo(this.selectA.x, this.selectA.y - this.lineWidth * 1.6);
	            var points = us.createPointsGeometry();
	            var side = new THREE.Line(points, new THREE.LineBasicMaterial({
	                color: 0x333333,
	                opacity: 1
	            }));
	            side.name = 'unitSelect';
	            side.visible = false;
	            side.position.copy(new THREE.Vector3(this.unitLength, -23, 0));
	            return side;
	        }

	        // 绘制箭头
	    }, {
	        key: 'createArrow',
	        value: function createArrow() {
	            var arrow = new THREE.Object3D();
	            var arrowCenterGeometry = new THREE.CircleGeometry(this.lineWidth / 2, 32);
	            var arrowCenter = new THREE.Mesh(arrowCenterGeometry, this.getMaterial());
	            var center = new THREE.Vector3(0, 0, 0);
	            // 转动角度
	            var arrorPoint = (0, _UtilsRotateAngle.getLocationPoint)(center, this.pointA, 20);
	            // 画图形
	            var arrowPointA = (0, _UtilsRotateAngle.rotatePoint)(arrorPoint, center, 45);
	            var arrowPointB = (0, _UtilsRotateAngle.rotatePoint)(arrorPoint, center, -45);
	            // 绘制箭头上边
	            var sideA = new THREE.Shape();
	            sideA.moveTo(0, -this.lineWidth);
	            sideA.lineTo(arrowPointA.x, -this.lineWidth);
	            sideA.lineTo(arrowPointA.x, this.lineWidth);
	            sideA.lineTo(0, this.lineWidth);
	            sideA.lineTo(0, -this.lineWidth);
	            var sideAGeometry = new THREE.ShapeGeometry(sideA);
	            var arrowUp = new THREE.Mesh(sideAGeometry, this.getMaterial());
	            (0, _UtilsUpdateVertices2['default'])(arrowUp, center, arrowPointA, this.lineWidth);
	            // 绘制箭头下边
	            var sideB = new THREE.Shape();
	            sideB.moveTo(0, -this.lineWidth);
	            sideB.lineTo(arrowPointB.x, -this.lineWidth);
	            sideB.lineTo(arrowPointB.x, this.lineWidth);
	            sideB.lineTo(0, this.lineWidth);
	            sideB.lineTo(0, -this.lineWidth);
	            var sideBGeometry = new THREE.ShapeGeometry(sideB);
	            var arrowDown = new THREE.Mesh(sideBGeometry, this.getMaterial());
	            (0, _UtilsUpdateVertices2['default'])(arrowDown, center, arrowPointB, this.lineWidth);
	            arrow.add(arrowCenter);
	            arrow.add(arrowUp);
	            arrow.add(arrowDown);
	            arrow.position.copy(this.pointB);
	            arrow.name = 'arrow';
	            return arrow;
	        }

	        // 绘制左右控制器
	    }, {
	        key: 'createController',
	        value: function createController() {
	            var circleLeftGeometry = new THREE.CircleGeometry(this.lineWidth * 1.5, 64);
	            var controllerLeft = new THREE.Mesh(circleLeftGeometry, this.getControllerMaterial());
	            controllerLeft.position.copy(new THREE.Vector3(this.pointA.x - this.controllerDis, this.pointA.y, 0.1));
	            controllerLeft.name = 'controllerLeft';

	            var circleLeftCenterGeometry = new THREE.CircleGeometry(this.lineWidth * 1, 64);
	            var controllerLeftCenter = new THREE.Mesh(circleLeftCenterGeometry, this.getControllerCenterMaterial());
	            controllerLeftCenter.name = 'controllerLeftCenter';
	            controllerLeft.add(controllerLeftCenter);

	            var circleRigthGeometry = new THREE.CircleGeometry(this.lineWidth * 1.5, 64);
	            var controllerRight = new THREE.Mesh(circleRigthGeometry, this.getControllerMaterial());
	            controllerRight.position.copy(new THREE.Vector3(this.pointB.x + this.controllerDis, this.pointB.y, 0.1));
	            controllerRight.name = 'controllerRight';

	            var circleRightCenterGeometry = new THREE.CircleGeometry(this.lineWidth * 1, 64);
	            var controllerRightCenter = new THREE.Mesh(circleRightCenterGeometry, this.getControllerCenterMaterial());
	            controllerRightCenter.name = 'controllerRightCenter';
	            controllerRight.add(controllerRightCenter);
	            return {
	                controllerLeft: controllerLeft,
	                controllerRight: controllerRight
	            };
	        }

	        // 绘制刻度控制器
	    }, {
	        key: 'createUnitController',
	        value: function createUnitController() {
	            var unitGeometry = new THREE.CircleGeometry(this.lineWidth * 1.5, 64);
	            var unitController = new THREE.Mesh(unitGeometry, this.getControllerMaterial());
	            unitController.position.copy(new THREE.Vector3(this.unitLength, 0, 0.1));
	            unitController.name = 'unitController';

	            var unitCenterGeometry = new THREE.CircleGeometry(this.lineWidth * 1, 64);
	            var unitControllerCenter = new THREE.Mesh(unitCenterGeometry, this.getControllerCenterMaterial());
	            unitControllerCenter.name = 'unitControllerCenter';
	            unitController.add(unitControllerCenter);
	            return unitController;
	        }

	        // 绘制group
	    }, {
	        key: 'createLineGroup',
	        value: function createLineGroup() {
	            var groupShape = new THREE.Shape();
	            groupShape.moveTo(this.pointA.x, -this.lineWidth * 2.5);
	            groupShape.lineTo(this.pointB.x, -this.lineWidth * 2.5);
	            groupShape.lineTo(this.pointB.x, this.lineWidth * 2.5);
	            groupShape.lineTo(this.pointA.x, this.lineWidth * 2.5);
	            groupShape.lineTo(this.pointA.x, -this.lineWidth * 2.5);
	            var groupGeometry = new THREE.ShapeGeometry(groupShape);
	            this.group = new THREE.Mesh(groupGeometry, this.getGroupMaterial());
	            this.group.name = 'group';
	            this.group.data = {};
	            this.group.data.pointA = this.pointA;
	            this.group.data.pointB = this.pointB;
	            this.group.data.lineWidth = this.lineWidth;
	            this.group.data.arrowLength = this.arrowLength;
	            this.group.data.controllerDis = this.controllerDis;
	            this.group.data.unitHeight = this.unitHeight;
	            this.group.data.unitLength = this.unitLength;
	            this.group.data.selectA = this.selectA;
	            this.group.data.selectB = this.selectB;
	            this.group.data.unitValue = 1;
	        }

	        // 开始创建数轴
	    }, {
	        key: 'create',
	        value: function create() {
	            this.createLineGroup();
	            var line = this.createLine();
	            var circle = this.createCenter();
	            var arrow = this.createArrow();
	            var controller = this.createController();
	            var unitController = this.createUnitController();
	            var unitSelect = this.createUnitSelect();
	            this.group.add(line);
	            this.group.add(circle);
	            this.group.add(arrow);
	            this.group.add(controller.controllerLeft);
	            this.group.add(controller.controllerRight);
	            this.group.add(unitController);
	            this.group.add(unitSelect);
	            return this.group;
	        }
	    }]);

	    return NumberLine;
	})();

	exports['default'] = NumberLine;
	module.exports = exports['default'];

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _rotateAngle = __webpack_require__(8);

	exports['default'] = function (shape, pointA, pointB, lineWidth) {
	  var length = lineWidth / 2;
	  var vector1 = (0, _rotateAngle.rotationAngleVector)(pointB, pointA, 90, true).vector.setLength(length);
	  var vector2 = (0, _rotateAngle.rotationAngleVector)(pointB, pointA, 90, false).vector.setLength(length);
	  var vertices = [];
	  var orgVertices = shape.geometry.vertices;

	  vertices.push(new THREE.Vector2().addVectors(pointA, vector2));
	  vertices.push(new THREE.Vector2().addVectors(pointB, vector2));
	  vertices.push(new THREE.Vector2().addVectors(pointB, vector1));
	  vertices.push(new THREE.Vector2().addVectors(pointA, vector1));

	  for (var i = 0; i < orgVertices.length; i++) {
	    orgVertices[i].x = vertices[i].x;
	    orgVertices[i].y = vertices[i].y;
	  }
	  shape.geometry.verticesNeedUpdate = true;
	  shape.geometry.computeBoundingSphere();
	};

	module.exports = exports['default'];

/***/ },
/* 8 */
/***/ function(module, exports) {

	/**
	 * 跟中心转一定角度后的坐标
	 * @param point 点
	 * @param center 中心
	 * @param angle 角度
	 * @returns {THREE.Vector3} 结果
	 */
	"use strict";

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.rotatePoint = rotatePoint;
	exports.getLocationPoint = getLocationPoint;
	exports.rotationAngleVector = rotationAngleVector;
	exports.getAngle = getAngle;
	exports.getVectorAngle = getVectorAngle;

	function rotatePoint(point, center, angle) {
		var l = angle * Math.PI / 180;

		//sin/cos value
		var cosv = Math.cos(l);
		var sinv = Math.sin(l);

		// calc new point
		var newX = (point.x - center.x) * cosv - (point.y - center.y) * sinv + center.x;
		var newY = (point.x - center.x) * sinv + (point.y - center.y) * cosv + center.y;
		return new THREE.Vector3(newX, newY, 0);
	}

	/**
	 *  从A到B的方向距离length的点
	 * @param pointA
	 * @param pointB
	 * @param length
	 * @returns {THREE.Vector3}
	 */

	function getLocationPoint(pointA, pointB, length) {
		var vector = new THREE.Vector3(0, 0, 0);
		vector.subVectors(pointB, pointA);
		vector = vector.setLength(length);
		vector.add(pointA);
		return vector;
	}

	/**
	 * 向量旋转后的向量，返回旋转后的点和向量;
	 * @param movePoint 旋转角度
	 * @param fixedPoint 旋转轴点（固定的点）
	 * @param angle 旋转角度
	 * @param clockwise 旋转方向
	 */

	function rotationAngleVector(movePoint, fixedPoint, angle, clockwise) {

		var tempVector = new THREE.Vector2(movePoint.x - fixedPoint.x, movePoint.y - fixedPoint.y);
		var valueX = undefined,
		    valueY = undefined;
		var radian = angle / 180 * Math.PI;

		if (clockwise) {
			valueX = tempVector.x * Math.cos(radian) + tempVector.y * Math.sin(radian) + fixedPoint.x;
			valueY = tempVector.y * Math.cos(radian) - tempVector.x * Math.sin(radian) + fixedPoint.y;
		} else {
			valueX = tempVector.x * Math.cos(radian) - tempVector.y * Math.sin(radian) + fixedPoint.x;
			valueY = tempVector.y * Math.cos(radian) + tempVector.x * Math.sin(radian) + fixedPoint.y;
		}

		var afterRotationPoint = new THREE.Vector2(valueX, valueY);
		var afterRotationVector = new THREE.Vector2(valueX - fixedPoint.x, valueY - fixedPoint.y);

		return {
			point: afterRotationPoint,
			vector: afterRotationVector
		};
	}

	/*
	 first_p：起点坐标，center_p：端点坐标，second_p：末点
	 */

	function getAngle(first_p, center_p, second_p) {
		var v_ao = new THREE.Vector2().subVectors(first_p, center_p);
		var v_bo = new THREE.Vector2().subVectors(second_p, center_p);
		return getVectorAngle(v_ao, v_bo);
	}

	function getVectorAngle(vector1, vector2) {
		"use strict";
		var dx1 = undefined,
		    dx2 = undefined,
		    dy1 = undefined,
		    dy2 = undefined,
		    angle = undefined,
		    abs = undefined;
		dx1 = vector1.x;
		dy1 = vector1.y;
		dx2 = vector2.x;
		dy2 = vector2.y;
		var c = Math.sqrt(dx1 * dx1 + dy1 * dy1) * Math.sqrt(dx2 * dx2 + dy2 * dy2);
		if (c == 0) return -1;
		abs = (dx1 * dx2 + dy1 * dy2) / c;
		if (abs < 0 && Math.abs(abs) > 1) {
			//当abs>且是负数的时候，向量方向相反重合，为180°
			return 180;
		}
		if (Math.abs(abs) > 1) {
			//当abs>1且是正数数的时候，向量方向一致且重合，为0°
			return 0;
		}
		angle = Math.acos((dx1 * dx2 + dy1 * dy2) / c) * 180 / Math.PI;

		var isClockWise = vector1.x * vector2.y - vector1.y * vector2.x < 0;
		isClockWise ? null : angle = -angle;
		return {
			//弧度
			angle: angle * Math.PI / 180,

			//second_p相对于first_p顺逆时针，true标示顺时针
			clockWise: isClockWise,

			//角度
			angleValue: angle
		};
	}

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by xcc on 2015/12/22.
	 */
	'use strict';

	Object.defineProperty(exports, '__esModule', {
	    value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _UtilsAddText = __webpack_require__(10);

	var _UtilsAddText2 = _interopRequireDefault(_UtilsAddText);

	var _UtilsUpdateUnit = __webpack_require__(11);

	var _UtilsMoveMarkPoint = __webpack_require__(14);

	/**
	 * 标识点创建模型
	 * @param lineWidth 连接旋转点，需要旋转到合并点的端点
	 * @param numberLine 位置相对于group
	 * @param offSetX 相对于group的X轴偏移量
	 * @param offSetY 相对于group的Y轴偏移量
	 * @param text 需要显示的字（ABC...）
	 */

	var MarkPoint = (function () {
	    function MarkPoint(radius, /*lineGroup = new THREE.Object3D(),*/offSetX, text /*, numberLine*/) {
	        if (radius === undefined) radius = 6;

	        _classCallCheck(this, MarkPoint);

	        this.radius = radius;
	        //this.lineGroup = lineGroup;
	        this.offSetX = offSetX;
	        this.text = text.toString();
	        /*this.numberLine = numberLine;*/
	    }

	    // 圆材质

	    _createClass(MarkPoint, [{
	        key: 'getCricleMaterial',
	        value: function getCricleMaterial() {
	            return new THREE.MeshBasicMaterial({
	                color: '#FF0000',
	                overdraw: true,
	                transparent: false,
	                opacity: 1
	            });
	        }

	        // 绘制刻度选择框
	    }, {
	        key: 'drawTextFrame',
	        value: function drawTextFrame() {
	            var frame = new THREE.Shape();
	            frame.moveTo(-29, 17);
	            frame.lineTo(29, 17);
	            frame.lineTo(29, 35);
	            frame.lineTo(-29, 35);
	            frame.lineTo(-29, 17);
	            var points = frame.createPointsGeometry();
	            var side = new THREE.Line(points, new THREE.LineBasicMaterial({
	                color: 0x333333,
	                opacity: 1
	            }));
	            //frame.position.copy(new THREE.Vector3(this.unitLength,-23,0));
	            return side;
	        }

	        // 字体材质
	    }, {
	        key: 'getTextMaterial',
	        value: function getTextMaterial() {
	            return new THREE.MeshBasicMaterial({
	                color: '#FF0000',
	                overdraw: true,
	                transparent: false,
	                opacity: 1
	            });
	        }

	        // 绘制标识点
	    }, {
	        key: 'createMarkPoint',
	        value: function createMarkPoint(unitMultiple) {
	            var groupCricle = new THREE.Object3D();
	            var circleGeometry = new THREE.CircleGeometry(this.radius, 32);
	            var circle = new THREE.Mesh(circleGeometry, this.getCricleMaterial());
	            groupCricle.position.x = this.offSetX;
	            groupCricle.position.y = 0;

	            var position = new THREE.Vector2();
	            position.x = 0;
	            position.y = 0;
	            position.y += _UtilsUpdateUnit.unitHeightSend + 11;
	            var msgMarkLetter = (0, _UtilsAddText2['default'])(this.text, position, 64, 32, '20px', 'black'); //字母ABC

	            position.y = 0;
	            position.y -= _UtilsUpdateUnit.unitHeightSend + 10; //加2是为了与你刻度值的值等高

	            var value = this.offSetX / _UtilsUpdateUnit.unitLengthSend;
	            var round = Math.round(value * 10) / 10;
	            if (parseInt(round) == round) {
	                round = '';
	            } else {
	                round = round * unitMultiple; //this.numberLine.data.unitMultiple;
	            }
	            var text = Math.round(round * 10) / 10;
	            //let text = getTheValue(round.toString());
	            if (text % unitMultiple /*this.numberLine.data.unitMultiple */ == 0) {
	                //实际长度是每个单元格的长度倍数，则赋空
	                text = '';
	            }
	            var msgMarkValue = (0, _UtilsAddText2['default'])(text, position, 128, 32, '24px', 'red'); //标识点具体的值
	            var drawTextFrame = this.drawTextFrame();
	            drawTextFrame.visible = false;
	            drawTextFrame.name = 'markPointFrame';
	            groupCricle.name = 'markPoint';
	            circle.name = 'markPointCircle';
	            msgMarkLetter.name = 'markPointText';
	            msgMarkValue.name = 'markPointValue';

	            groupCricle.userData.markText = this.text;
	            groupCricle.userData.valueText = text;
	            groupCricle.add(circle);
	            groupCricle.add(msgMarkLetter);
	            groupCricle.add(msgMarkValue);
	            groupCricle.add(drawTextFrame);
	            groupCricle.position.z += 1;
	            return groupCricle;
	        }
	    }]);

	    return MarkPoint;
	})();

	exports['default'] = MarkPoint;
	module.exports = exports['default'];

/***/ },
/* 10 */
/***/ function(module, exports) {

	/*

	@param text 所要绘制的文字
	@param position 存放位置
	@param width 文字的宽高

	*/
	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	exports['default'] = function (text, position, width, height) {
		var fontSize = arguments.length <= 4 || arguments[4] === undefined ? '24px' : arguments[4];
		var fontColor = arguments.length <= 5 || arguments[5] === undefined ? 'black' : arguments[5];

		var dynamicTexture = new THREEx.DynamicTexture(width, height);
		dynamicTexture.context.font = 'bolder ' + fontSize + '/1 Arial';
		var geometry = new THREE.CubeGeometry(width, height, 0);

		var textField = new THREE.Mesh(geometry, new THREE.MeshBasicMaterial({
			map: dynamicTexture.texture,
			transparent: true
		}));
		textField.position.x = position.x;
		textField.position.y = position.y;
		textField._dynamicTexture = dynamicTexture;
		textField._dynamicTexture.drawText(text, undefined, 24, fontColor);
		return textField;
	};

	module.exports = exports['default'];

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _ShapeUnit = __webpack_require__(12);

	var _ShapeUnit2 = _interopRequireDefault(_ShapeUnit);

	var _ShapeSmallUnit = __webpack_require__(13);

	var _ShapeSmallUnit2 = _interopRequireDefault(_ShapeSmallUnit);

	var _updateVertices = __webpack_require__(7);

	var _updateVertices2 = _interopRequireDefault(_updateVertices);

	var _addText = __webpack_require__(10);

	var _addText2 = _interopRequireDefault(_addText);

	/**
	 * shape数轴
	 * pointA数轴左端点
	 * pointB数轴右端点
	 * lineWidth数轴线宽
	 * unitHeight刻度高度
	 * unitLength数轴单个刻度的长度
	 */

	exports['default'] = function (shape, pointA, pointB) {
	  var unitMultiple = arguments.length <= 3 || arguments[3] === undefined ? 1 : arguments[3];
	  var unitLength = arguments.length <= 4 || arguments[4] === undefined ? 80 : arguments[4];
	  var lineWidth = arguments.length <= 5 || arguments[5] === undefined ? 6 : arguments[5];
	  var unitHeight = arguments.length <= 6 || arguments[6] === undefined ? 15 : arguments[6];

	  var unit = undefined,
	      unitNum = undefined,
	      unitContent = undefined,
	      unitCount = undefined,
	      unitCACount = undefined,
	      unitCBCount = undefined,
	      center = undefined,
	      vectorAB = undefined,
	      vectorCA = undefined,
	      vectorCB = undefined,
	      addCount = undefined,
	      unitPoint = undefined,
	      text = undefined,
	      samllUnitCount = undefined,
	      samllUnitCBCount = undefined,
	      samllUnitCACount = undefined,
	      smallUnits = undefined,
	      smallUnitPoint = undefined;
	  var line = shape.getObjectByName('line');
	  var circleCenter = shape.getObjectByName('center');
	  exports.unitLengthSend = unitLengthSend = unitLength; //传入标识点 xiongcc
	  exports.unitHeightSend = unitHeightSend = unitHeight; //传入标识点 xiongcc
	  exports.unitMultipleSend = unitMultipleSend = unitMultiple; //传入标识点 xiongcc
	  center = new THREE.Vector3(0, 0, 0);
	  vectorAB = new THREE.Vector2().subVectors(pointB, pointA);
	  vectorCA = new THREE.Vector2().subVectors(pointA, center);
	  vectorCB = new THREE.Vector2().subVectors(center, pointB);
	  // 数轴上应显示刻度个数
	  unitCount = parseInt(vectorAB.length() / unitLength);
	  samllUnitCount = Math.round(vectorAB.length() / (unitLength / 10));
	  unitCACount = vectorCA.length() / unitLength;
	  unitCBCount = vectorCB.length() / unitLength;
	  samllUnitCBCount = Math.ceil(vectorCB.length() / (unitLength / 10));
	  samllUnitCACount = Math.floor(vectorCA.length() / (unitLength / 10));

	  // samllUnitCBCount = parseInt(unitCBCount*10);
	  // samllUnitCACount = parseInt(unitCACount*10);
	  unitCBCount = Math.floor(unitCBCount);
	  unitCACount = Math.floor(unitCACount);

	  if (unitCount == unitCACount + unitCBCount) {
	    unitCount += 1;
	  }

	  if (line.children.length == 0) {
	    // 没有刻度时，增加刻度
	    for (var i = 0; i < unitCount; i++) {
	      var unitContainer = new THREE.Object3D();
	      unit = (0, _ShapeUnit2['default'])(lineWidth);
	      unitNum = (0, _addText2['default'])('', center, 128, 32, '24px', 'black');
	      if (i == 1) {
	        unitNum.name = 'showText';
	        unitNum.position.z = 0.1;
	      } else {
	        unitNum.name = 'text';
	        unitNum.position.z = 0;
	      }
	      unitNum.position.y = -25;
	      unitContainer.add(unit);
	      unitContainer.add(unitNum);
	      unitContainer.visible = false;
	      line.add(unitContainer);
	    }
	    for (var i = 0; i < (unitCount + 1) * 10; i++) {
	      var smallUnit = (0, _ShapeSmallUnit2['default'])();
	      smallUnit.visible = false;
	      circleCenter.add(smallUnit);
	    }
	  } else {
	    // 有刻度时，判断刻度是否够，不够新增，够用的时候，多的隐藏
	    if (unitCount > line.children.length) {
	      addCount = unitCount - line.children.length;
	      for (var i = 0; i < addCount; i++) {
	        var unitContainer = new THREE.Object3D();
	        unit = (0, _ShapeUnit2['default'])(lineWidth);
	        unitNum = (0, _addText2['default'])('', center, 128, 32, '24px', 'black');
	        unitNum.name = 'text';
	        unitNum.position.y = -25;
	        unitContainer.add(unit);
	        unitContainer.add(unitNum);
	        unitContainer.visible = false;
	        line.add(unitContainer);
	      }
	      for (var i = 0; i < addCount * 10; i++) {
	        var smallUnit = (0, _ShapeSmallUnit2['default'])();
	        smallUnit.visible = false;
	        circleCenter.add(smallUnit);
	      }
	    }
	  }
	  // 刷新刻度
	  for (var i = 0; i < line.children.length; i++) {
	    unitContent = line.children[i];
	    unit = unitContent.getObjectByName('unit');
	    unitNum = unitContent.getObjectByName('text') || unitContent.getObjectByName('showText');
	    unitNum.name = 'text';
	    unitNum.position.z = 0;
	    if (i <= unitCBCount) {
	      unitPoint = new THREE.Vector3(unitLength * i, 0, 0);
	      text = parseInt(i * (unitMultiple * 1000)) / 1000;
	      unitContent.position.copy(unitPoint);
	      unitNum._dynamicTexture.clear().drawText(text.toString(), undefined, 24, '#000000');
	      unitContent.visible = true;
	      if (i == 0) {
	        unit.visible = false;
	      }
	    } else if (i > unitCBCount && i < unitCount) {
	      unitPoint = new THREE.Vector3(-unitLength * (i - unitCBCount), 0, 0);
	      text = parseInt(-(i - unitCBCount) * (unitMultiple * 1000)) / 1000;
	      line.children[i].position.copy(unitPoint);
	      unitNum._dynamicTexture.clear().drawText(text.toString(), undefined, 24, '#000000');
	      unitContent.visible = true;
	    } else {
	      unitContent.visible = false;
	    }

	    if (i == 1) {
	      unitNum.name = 'showText';
	      unitNum.position.z = 0.1;
	    }
	  }
	  smallUnits = circleCenter.children;
	  if (unitLength < 80 || unitMultiple.toString().indexOf('.') != -1) {
	    for (var i = 0; i < smallUnits.length; i++) {
	      smallUnits[i].visible = false;
	    }
	    shape.data.smallUnitVisible = false;
	  } else {
	    for (var i = 0; i < smallUnits.length; i++) {
	      if (i <= samllUnitCBCount) {
	        smallUnitPoint = new THREE.Vector3(unitLength / 10 * i, 0, 0);
	        smallUnits[i].position.copy(smallUnitPoint);
	        smallUnits[i].visible = true;
	        if (i == 0 || i >= samllUnitCBCount) {
	          smallUnits[i].visible = false;
	        }
	      } else if (i > samllUnitCBCount && i <= samllUnitCACount + samllUnitCBCount) {
	        smallUnitPoint = new THREE.Vector3(-(unitLength / 10) * (i - samllUnitCBCount), 0, 0);
	        smallUnits[i].position.copy(smallUnitPoint);
	        smallUnits[i].visible = true;
	      } else {
	        smallUnits[i].visible = false;
	      }
	    }
	    shape.data.smallUnitVisible = true;
	  }
	};

	var unitLengthSend, unitHeightSend, unitMultipleSend;
	exports.unitLengthSend = unitLengthSend;
	exports.unitHeightSend = unitHeightSend;
	exports.unitMultipleSend = unitMultipleSend;

/***/ },
/* 12 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	exports['default'] = function (lineWidth) {
		var point1 = arguments.length <= 1 || arguments[1] === undefined ? new THREE.Vector3(0, 0, 0) : arguments[1];
		var unitHeight = arguments.length <= 2 || arguments[2] === undefined ? 15 : arguments[2];

		var shape = new THREE.Shape();
		var point2 = new THREE.Vector3(point1.x, point1.y + unitHeight, 0);
		shape.moveTo(point1.x + lineWidth / 4, 0);
		shape.lineTo(point2.x + lineWidth / 4, unitHeight);
		shape.lineTo(point2.x - lineWidth / 4, unitHeight);
		shape.lineTo(point1.x - lineWidth / 4, 0);
		shape.lineTo(point1.x + lineWidth / 4, 0);
		var geometry = new THREE.ShapeGeometry(shape);
		var unit = new THREE.Mesh(geometry, new THREE.MeshBasicMaterial({
			color: 0x333333,
			transparent: false,
			opacity: 1
		}));
		unit.name = 'unit';
		unit.position.z = -1;
		return unit;
	};

	module.exports = exports['default'];

/***/ },
/* 13 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	exports['default'] = function () {
	  var unitHeight = arguments.length <= 0 || arguments[0] === undefined ? 15 : arguments[0];

	  var geometry = new THREE.Geometry();
	  geometry.vertices.push(new THREE.Vector3(0, 0, 0), new THREE.Vector3(0, unitHeight / 1.7, 0));
	  var smallUnit = new THREE.Line(geometry, new THREE.LineBasicMaterial({
	    color: 0x333333,
	    transparent: false,
	    opacity: 1
	  }));
	  smallUnit.name = 'smallUnit';
	  smallUnit.position.z = -1;
	  return smallUnit;
	};

	module.exports = exports['default'];

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by xcc on 2015/12/23.
	 */
	//let distance = new THREE.Vector3();

	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});
	exports.moveMarkPoint = moveMarkPoint;
	exports.refreshText = refreshText;
	exports.removeMeArray = removeMeArray;
	exports.initArray = initArray;
	exports.changeisFirst = changeisFirst;
	exports.refreshArray = refreshArray;
	exports.getMoveStatus = getMoveStatus;
	exports.setMoveStatus = setMoveStatus;
	exports.logUtil = logUtil;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _addText = __webpack_require__(10);

	var _addText2 = _interopRequireDefault(_addText);

	var _updateUnit = __webpack_require__(11);

	var _handleCallback = __webpack_require__(5);

	var _ShapeAddMarkPoint = __webpack_require__(15);

	var _upMarkPoint = __webpack_require__(21);

	var reMoveObjArray = [];
	var radius = undefined;
	var isFirst = false,
	    isMove = false,
	    position = undefined;
	var isSmallUnit = undefined;
	var smallUnit = 0;

	function moveMarkPoint(selectedObj, distance, shape) {
		"use strict";
		var objPosition = selectedObj.position.x;
		if (!isFirst) {
			//第一次进入跑，防止加载过多东西卡顿
			removeMeArray(selectedObj);
			isFirst = true;
			isMove = true;
			position = new THREE.Vector2();
			var group = selectedObj.parent;
			isSmallUnit = group.data.smallUnitVisible;
			if (isSmallUnit) smallUnit = _updateUnit.unitLengthSend / 10;else smallUnit = _updateUnit.unitLengthSend;
		}
		selectedObj.position.x += distance;
		if (isSmallUnit) {
			if (selectedObj.position.x >= shape.data.pointB.x) {
				selectedObj.position.x = shape.data.pointB.x;
			} else if (selectedObj.position.x <= shape.data.pointA.x) {
				selectedObj.position.x = shape.data.pointA.x;
			}
		} else {
			if (selectedObj.position.x < 0) {
				var pA = shape.data.pointA.x;
				var num = parseInt(pA / smallUnit);
				var result = (pA - selectedObj.position.x) / smallUnit;
				var intA = Math.abs(parseInt(result));
				if (intA == 0 || selectedObj.position.x < pA) {
					selectedObj.position.x = num * smallUnit;
					return;
				}
			}
			if (selectedObj.position.x > 0) {
				var pB = shape.data.pointB.x;
				var num = parseInt(pB / smallUnit);
				var result = (pB - selectedObj.position.x) / smallUnit;
				var intB = Math.abs(parseInt(result));
				if (intB == 0 || selectedObj.position.x > pB) {
					selectedObj.position.x = num * smallUnit;
					return;
				}
			}
		}

		refreshText(selectedObj, _updateUnit.unitLengthSend);
	}

	function refreshText(selectedObj, unitLengthSend) {
		var markPointValue = selectedObj.getObjectByName('markPointValue');
		if (!position) position = new THREE.Vector2();
		position.x = markPointValue.position.x;
		position.y = -(_handleCallback.unitHeight + 10);
		var currentX = selectedObj.position.x;
		if (markPointValue) markPointValue.parent.remove(markPointValue);
		var value = currentX / unitLengthSend;
		var round = Math.round(value * 10) / 10;
		if (parseInt(round) == round) {
			round = '';
		} else {
			round = round * selectedObj.parent.data.unitMultiple;
		}
		var text = Math.round(round * 10) / 10;
		if (text % selectedObj.parent.data.unitMultiple == 0) {
			//实际长度是每个单元格的长度倍数，则赋空
			text = '';
		}
		var msgMarkValue = (0, _addText2['default'])(text, position, 128, 32, '24px', 'red'); //标识点具体的值
		msgMarkValue.name = 'markPointValue';
		selectedObj.add(msgMarkValue);
	}

	function getTheValue(value) {
		var result = value.indexOf('.');
		if (result != -1) {
			//存在小数点,截取
			return value.substring(0, result + 2);
		}
		return value;
	}

	function removeMeArray(selectedObj) {
		var reMoveObjArray = [];
		var objPosition = selectedObj.position.x;
		(0, _upMarkPoint.saveObjPosition)(objPosition);
		var positionCollection = (0, _ShapeAddMarkPoint.getPositionCollection)();
		if (positionCollection.length > 0) {
			for (var v = 0; v < positionCollection.length; v++) {
				if (positionCollection[v] != objPosition) {
					reMoveObjArray.push(positionCollection[v]); //移除容器中当前位置的元素，因为移动过程中不需要与你比较
				}
			}
		}
		logUtil('我在removeMeArray');
		logUtil('objPosition');
		logUtil(objPosition);
		(0, _ShapeAddMarkPoint.refreshPositionCollection)(reMoveObjArray);
	}

	function initArray(selectedObj) {
		//logUtil('initArray');
		reMoveObjArray = [];
		if (selectedObj.name == 'markPoint') {
			radius = _handleCallback.lineWidth * 1.5;
			var objPosition = selectedObj.position.x;
			var positionCollection = (0, _ShapeAddMarkPoint.getPositionCollection)();
			if (positionCollection.length > 0) {
				for (var v = 0; v < positionCollection.length; v++) {
					if (positionCollection[v] != objPosition) {
						reMoveObjArray.push(positionCollection[v]); //移除容器中当前位置的元素，因为移动过程中不需要与你比较
					}
				}
			}
			(0, _ShapeAddMarkPoint.refreshPositionCollection)(reMoveObjArray);
		}
	}

	function changeisFirst() {
		//每次移动抬起up的时候都得还原一些设置。
		if (isFirst) isFirst = false;
		reMoveObjArray = [];
	}

	function refreshArray(group) {
		//logUtil('refreshArray')
		logUtil('refreshArray');
		//刷新容器，每次抬起都得刷新，如果以移动标识点，抬起的时候位置已经发生变化
		var groupChileren = group.children;
		var array = [];
		for (var v = 0; v < groupChileren.length; v++) {
			if (groupChileren[v].name == 'markPoint') {
				array.push(groupChileren[v].position.x);
			}
		}
		if (array.length > 0) {
			(0, _ShapeAddMarkPoint.refreshPositionCollection)(array);
		}
	}

	function getMoveStatus() {
		return isMove;
	}

	function setMoveStatus(status) {
		isMove = status;
	}

	function logUtil(msg) {}

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by ｘｃｃ on 2015/12/23.
	 */
	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});
	exports.AddMarkPoint = AddMarkPoint;
	exports.clearAll = clearAll;
	exports.clear = clear;
	exports.add = add;
	exports.getCharCollection = getCharCollection;
	exports.getPositionCollection = getPositionCollection;
	exports.resetCollection = resetCollection;
	exports.refreshPositionCollection = refreshPositionCollection;
	exports.setisOpenForMarkPoint = setisOpenForMarkPoint;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _presenter = __webpack_require__(1);

	var _presenter2 = _interopRequireDefault(_presenter);

	var _MarkPoint = __webpack_require__(9);

	var _MarkPoint2 = _interopRequireDefault(_MarkPoint);

	var _handleCallback = __webpack_require__(5);

	var _UtilsMoveMarkPoint = __webpack_require__(14);

	var _threeManger = __webpack_require__(16);

	var _constants = __webpack_require__(17);

	var _UtilsEditeMarkPointText = __webpack_require__(19);

	var _UtilsDialog = __webpack_require__(20);

	var _UtilsDialog2 = _interopRequireDefault(_UtilsDialog);

	var charCollection = []; //标识点标识收集器
	var positionCollection = []; //标识点位置收集器
	var isOpenForMarkPoint = true;

	function AddMarkPoint(point) {

		if (isOpenForMarkPoint) {
			var radius = _handleCallback.lineWidth * 1.5;
			//如果打开了标识点，则关闭一切其他操作，在一定范围内点击屏幕生成标识点。
			var size = charCollection.length;
			if (size == 10) {
				//logUtil('标识点已经大于10')
				(0, _UtilsMoveMarkPoint.logUtil)(charCollection);
				$(_presenter2['default'].view).find('.dialog_msg').length ? null : _UtilsDialog2['default'].msg(_presenter2['default']._i18n['nl_mark_max_tip']);
				return;
			}
			var char = _constants.CHARACTER[size];
			//找出CHARACTER里有，而charCollection没有的第一个元素
			for (var v = 0; v < size; v++) {
				var isSame = false;
				for (var vv = 0; vv < size; vv++) {
					if (_constants.CHARACTER[v] == charCollection[vv]) {
						isSame = true;
						break;
					}
				}
				if (!isSame) {
					char = _constants.CHARACTER[v];
					break;
				}
			}
			(0, _UtilsMoveMarkPoint.logUtil)('char=' + char);
			var posisitionX = point.x - _presenter2['default'].numberLine.position.x;
			for (var v = 0; v < positionCollection.length; v++) {
				var frist = positionCollection[v] - radius * 2;
				var end = positionCollection[v] + radius * 2;
				if (frist < posisitionX && posisitionX < end) {
					// logUtil('标识点重叠，请换个位置！');
					return;
				}
			}
			var markPoint = new _MarkPoint2['default'](radius, /*numberLine,*/posisitionX, char /*, numberLine*/).createMarkPoint(_presenter2['default'].numberLine.data.unitMultiple);
			charCollection.push(char);
			positionCollection.push(posisitionX);
			_presenter2['default'].numberLine.add(markPoint);
			return markPoint;
		}
	}

	function clearAll() {
		charCollection = [];
	}

	function clear(markPointText) {
		//删除单个标识点的操作
		var array = [];
		for (var v = 0; v < charCollection.length; v++) {
			//在已收集的容器里移除需要删除的标识
			if (charCollection[v] == markPointText) {
				charCollection.splice(v, 1);
				break;
			}
		}
		// charCollection = array;
		(0, _UtilsMoveMarkPoint.logUtil)('我在AddmarkMpoint的Clear里，当前字体容器里有');
		(0, _UtilsMoveMarkPoint.logUtil)(charCollection);
	}

	function add(markPointText) {
		//修改之后的标识点marktext还需要加入到已收集的容器，因为最大为十个，包括已修改的
		charCollection.push(markPointText);
		(0, _UtilsMoveMarkPoint.logUtil)('我在AddmarkMpoint的add里，当前容器里有');
		(0, _UtilsMoveMarkPoint.logUtil)(charCollection);
	}

	function getCharCollection() {
		return charCollection;
	}

	function getPositionCollection() {
		return positionCollection;
	}

	function resetCollection() {
		charCollection = [];
		positionCollection = [];
		(0, _UtilsEditeMarkPointText.resetText)();
		(0, _UtilsMoveMarkPoint.logUtil)('我在AddmarkMpoint的resetCollection清空重置');
	}

	function refreshPositionCollection(array) {
		positionCollection = array;
		(0, _UtilsMoveMarkPoint.logUtil)('我在AddmarkMpoint的refreshPositionCollection里，当前位置容器里有');
		(0, _UtilsMoveMarkPoint.logUtil)(positionCollection);
	}

	function setisOpenForMarkPoint(boolean) {
		isOpenForMarkPoint = boolean;
	}

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});
	exports.threeStart = threeStart;
	exports.addThreeShape = addThreeShape;
	exports.destroy = destroy;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _constants = __webpack_require__(17);

	var _presenter = __webpack_require__(1);

	var _presenter2 = _interopRequireDefault(_presenter);

	var _UtilsAutoDetectRender = __webpack_require__(18);

	var _UtilsAutoDetectRender2 = _interopRequireDefault(_UtilsAutoDetectRender);

	var renderer;
	var scene;
	var camera;
	var raycaster;
	var mouse;
	var currentAnimate = undefined;
	var plane = undefined;

	function initThree() {
		//let container = $(presenter.view).find('.2D-canvas').get(0);
		//创建渲染
		exports.renderer = renderer = new _UtilsAutoDetectRender2['default']({
			canvas: $(_presenter2['default'].view).find('.numberline-canvas')[0],
			antialias: true, //抗锯齿
			alpha: true // apply transparent attribute
		});
		var container = $(_presenter2['default'].view).find('.tool_number_lines_area')[0];
		_constants.REAL_ESTATE.width = container.offsetWidth == 0 ? _constants.REAL_ESTATE.width : container.offsetWidth;
		_constants.REAL_ESTATE.height = container.offsetHeight == 0 ? _constants.REAL_ESTATE.height : container.offsetHeight;
		renderer.setClearColor(0xFFFFFF, 0);
		renderer.setSize(_constants.REAL_ESTATE.width, _constants.REAL_ESTATE.height);

		//container.appendChild(renderer.domElement);
	}

	function initScene() {
		exports.scene = scene = new THREE.Scene();
	}

	function initCamera() {
		//创建Camera
		var RATIO = 2;
		exports.camera = camera = new THREE.OrthographicCamera(_constants.REAL_ESTATE.width / -RATIO, _constants.REAL_ESTATE.width / RATIO, _constants.REAL_ESTATE.height / RATIO, _constants.REAL_ESTATE.height / -RATIO, -1000, 2000000);
		//camera = new THREE.PerspectiveCamera(70, REAL_ESTATE.width /REAL_ESTATE.height , 1, 1000);
		camera.position.x = 0;
		camera.position.y = 0;
		camera.position.z = 1999999;
		camera.lookAt({ x: 0, y: 0, z: 0 });
	}

	function initRaycaster() {
		//添加点击检测
		exports.raycaster = raycaster = new THREE.Raycaster();
		raycaster.linePrecision = 1;
		//intersectObjs = [];
		exports.mouse = mouse = new THREE.Vector2();
	}

	function animate() {
		//currentAnimate = requestAnimationFrame(animate);
		//render();
	}

	function render() {
		renderer.render(scene, camera);
	}

	function addPlane() {
		exports.plane = plane = new THREE.Mesh(new THREE.PlaneBufferGeometry(4000, 4000), new THREE.MeshBasicMaterial({ color: 0xeeeeee, visible: false }));
		scene.add(plane);
	}

	function threeStart() {
		initThree();
		initCamera();
		initScene();
		addPlane();
		initRaycaster();
		_presenter2['default'].renderer = render;
	}

	function addThreeShape(threeShape) {}

	function destroy() {
		"use strict";
		renderer.dispose();
		renderer.domElement = null;
		//window.cancelAnimationFrame(currentAnimate);

		exports.renderer = renderer = null;
		exports.scene = scene = null;
		exports.camera = camera = null;
		exports.raycaster = raycaster = null;
		exports.mouse = mouse = null;
	}

	exports.renderer = renderer;
	exports.scene = scene;
	exports.camera = camera;
	exports.raycaster = raycaster;
	exports.mouse = mouse;
	exports.plane = plane;

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 */
	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _runtime = __webpack_require__(4);

	var _runtime2 = _interopRequireDefault(_runtime);

	// 当前 addon 的名称
	var addonName = 'NumberLine';
	exports.addonName = addonName;
	// 与 native 通信的事件名
	// 数轴颜色
	var lineColor = '#333';
	exports.lineColor = lineColor;
	// 定义 addon 的可活动大小
	var REAL_ESTATE = {
		// width: 1180,
		// height: 699
		width: 1296,
		height: 722
	};
	exports.REAL_ESTATE = REAL_ESTATE;
	var MAXMARKNUM = 10;
	exports.MAXMARKNUM = MAXMARKNUM;
	var callNativePath = 'com.nd.pad.icr.ui.IcrJsBridge';
	exports.callNativePath = callNativePath;
	var eventName = 'NumberLine';
	exports.eventName = eventName;
	var isWeb = window.icCreatePlayer && _runtime2['default'] === window.icCreatePlayer.RUNTIME.WEB;
	exports.isWeb = isWeb;
	var TeacherPc = window.icCreatePlayer && _runtime2['default'] === window.icCreatePlayer.RUNTIME.TEACHER_PC;
	exports.TeacherPc = TeacherPc;
	var CHARACTER = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'];
	exports.CHARACTER = CHARACTER;

/***/ },
/* 18 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	    value: true
	});
	exports['default'] = autoDetectRender;
	var isWebGLRenderer = undefined;

	exports.isWebGLRenderer = isWebGLRenderer;

	function autoDetectRender(options, noWebGL) {
	    if (!noWebGL && isWebGLSupported()) {
	        exports.isWebGLRenderer = isWebGLRenderer = true;
	        return new THREE.WebGLRenderer(options);
	    }

	    exports.isWebGLRenderer = isWebGLRenderer = false;
	    return new THREE.CanvasRenderer(options);
	}

	function isWebGLSupported() {
	    var contextOptions = { stencil: true };
	    try {
	        if (!window.WebGLRenderingContext) {
	            return false;
	        }

	        var canvas = document.createElement('canvas'),
	            gl = canvas.getContext('webgl', contextOptions) || canvas.getContext('experimental-webgl', contextOptions);

	        return !!(gl && gl.getContextAttributes().stencil);
	    } catch (e) {
	        return false;
	    }
	}

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * 编辑标识点
	 * Created by xcc on 2015/12/29.
	 */
	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});
	exports.editeMarkPointText = editeMarkPointText;
	exports.getAllowBoolean = getAllowBoolean;
	exports.writeMarkPointText = writeMarkPointText;
	exports.resetText = resetText;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _presenter = __webpack_require__(1);

	var _presenter2 = _interopRequireDefault(_presenter);

	var _UtilsAddText = __webpack_require__(10);

	var _UtilsAddText2 = _interopRequireDefault(_UtilsAddText);

	var _ShapeAddMarkPoint = __webpack_require__(15);

	var _UtilsMoveMarkPoint = __webpack_require__(14);

	var _UtilsDialog = __webpack_require__(20);

	var _UtilsDialog2 = _interopRequireDefault(_UtilsDialog);

	var inputValue = undefined,
	    markPoint = undefined,
	    isWrited = undefined,
	    originalText = undefined,
	    nowText = undefined,
	    isAllowed = true;

	function editeMarkPointText(selectedObj, isOpen) {
		if (isOpen) {
			markPoint = selectedObj.parent;
			var markPointFrame = markPoint.getObjectByName('markPointFrame');
			markPointFrame.visible = true;
			$(_presenter2['default'].view).find('.markpoint-input').val(markPoint.userData.markText).focus();
		} else {
			if (markPoint) {
				//如果按下了
				if (isWrited) {
					//如果你编辑了
					(0, _ShapeAddMarkPoint.clear)(originalText); //移除你本身自带的text
					var isExist = checkIsEsixt(nowText); //检测你编辑后的是否已经存在容器
					if (isExist) {
						isAllowed = false;
						//存在相同标识点,停止一切标识点的其他操作
						_UtilsDialog2['default'].tips(_presenter2['default']._i18n['nl_mark_same_tip']);
						//logUtil('发现存在相同标识点，请修改')
						//$('.markpoint-input').val('').focus();

						(0, _ShapeAddMarkPoint.add)(originalText);
						markPoint.userData.markText = originalText;
						var markPointText = markPoint.getObjectByName('markPointText'); //group里的text对象
						var position = markPointText.position;
						var msgMarkLetter = (0, _UtilsAddText2['default'])(originalText, position, 64, 32, '20px', 'black'); //字母ABC
						msgMarkLetter.name = 'markPointText';
						markPointText.parent.add(msgMarkLetter);
						markPointText.parent.remove(markPointText);
						setFrameDisEnable(selectedObj);
						isWrited = false;
						isAllowed = true;
						$('.markpoint-input').val('').blur(); //input失去焦点
					} else {
							//不存在相同标识点
							$('.markpoint-input').val('').blur(); //input失去焦点
							(0, _ShapeAddMarkPoint.add)(nowText);
							markPoint.userData.markText = nowText;
							setFrameDisEnable(selectedObj);
							isWrited = false;
							isAllowed = true;
						}
				} else {
					$('.markpoint-input').val('').blur(); //input失去焦点
					setFrameDisEnable(selectedObj);
					//logUtil('没有编辑')
				}
			}
		}
		_presenter2['default'].renderer();
	}

	function getAllowBoolean() {
		return isAllowed;
	}

	function checkIsEsixt(text) {
		//检查某一个元素在char容器是否存在
		if (text.toString().replace(/\s/ig, '') == '') {
			//允许多个标识点为空
			return false;
		}
		var charCollect = (0, _ShapeAddMarkPoint.getCharCollection)();
		for (var v = 0; v < charCollect.length; v++) {
			if (charCollect[v] == text) return true;
		}
		return false;
	}
	function setFrameDisEnable(selectedObj) {
		//以下为隐藏所有外框
		var markPointArray = [];
		var markPointF = selectedObj.children;
		for (var v = 0; v < markPointF.length; v++) {
			if (markPointF[v].name == 'markPoint') {
				var frame = markPointF[v].getObjectByName('markPointFrame');
				markPointArray.push(frame);
			}
		}
		for (var i = 0; i < markPointArray.length; i++) {
			var frame = markPointArray[i];
			frame.visible = false;
		}
	}

	function writeMarkPointText(input) {
		inputValue = input.value.toString().replace(/\s/ig, '');

		var value = getTheValue(inputValue);
		input.value = value;
		inputValue = value;
		isWrited = true;
		var markPointText = markPoint.getObjectByName('markPointText'); //group里的text对象
		var markText = markPoint.userData.markText; //携带的text值
		originalText = markText;
		nowText = inputValue;
		var position = markPointText.position;
		var msgMarkLetter = (0, _UtilsAddText2['default'])(inputValue, position, 64, 32, '20px', 'black'); //字母ABC
		msgMarkLetter.name = 'markPointText';
		markPointText.parent.add(msgMarkLetter);
		markPointText.parent.remove(markPointText);
		_presenter2['default'].renderer();
	}

	function resetText() {
		originalText = null;
	}

	function checkIsChar(string) {
		//trrue是中文
		var reg = new RegExp('[\\u4E00-\\u9FFF]+', "g");
		if (reg.test(string)) return true;
		return false;
	}
	function checkIsLetter(string) {
		if (/^[A-Za-z0-9]*$/.test(string)) {
			return true;
		} else {
			return false;
		}
	}
	function checkSpecial(string) {
		//true包含如下特殊字符
		var containSpecial = RegExp("'");
		return containSpecial.test(string);
	}

	function checkInput(Value, input) {
		if (checkIsChar(Value) || checkIsLetter(Value) || checkSpecial(Value)) {
			return true;
		}
		return false;
	}

	function getTheValue(inputValue) {
		var ary = [];
		for (var v = 0; v < inputValue.length; v++) {
			if (!checkInput(inputValue.substring(v, v + 1))) {
				ary.push(inputValue.substring(v, v + 1));
			}
		}
		for (var vv = 0; vv < ary.length; vv++) {
			inputValue = inputValue.replace(ary[vv], "");
		}
		return inputValue.substring(0, 3);
	}

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	// by zyl
	'use strict';
	Object.defineProperty(exports, '__esModule', {
	    value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _presenter = __webpack_require__(1);

	var _presenter2 = _interopRequireDefault(_presenter);

	var dialog = {
	    alert: function alert(msg, callback) {
	        var key = parseInt(Math.random().toFixed(10) * 10000000000);
	        var confirm = _presenter2['default']._i18n['nl_confirm'];
	        var cancel = _presenter2['default']._i18n['nl_cancel'];
	        var dom = '<div id="msgBox' + key + '">\n                        <div class="num_overlay"></div>\n                        <div class="num_msg_box dialog_alert">\n                            <div class="msg_wrap">\n                                <div class="msg_text"><em class="msg_center_text">' + msg + '</em></div>\n                                <div class="btn_group">\n                                    <div class="confirm" data-key="' + key + '">' + confirm + '</div>\n                                    <div class="cancel" data-key="' + key + '">' + cancel + '</div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>';

	        $(".numberLine").append(dom);
	        $(".cancel").on('click touchend', function (e) {
	            e.preventDefault();
	            dialog.remove($(this).data("key"));
	        });
	        $(".confirm").on('click touchend', function (e) {
	            e.preventDefault();
	            callback($(this).data("key"));
	        });
	    },
	    msg: function msg(_msg, callback) {
	        var key = parseInt(Math.random().toFixed(10) * 10000000000);
	        var confirm = _presenter2['default']._i18n['nl_confirm'];
	        var cancel = _presenter2['default']._i18n['nl_cancel'];
	        var dom = ' <div id="msgBox' + key + '">\n                        <div class="num_overlay"></div>\n                        <div class="num_msg_box dialog_msg">\n                            <div class="msg_wrap">\n                                <div class="msg_text"><em class="msg_center_text">' + _msg + '</em></div>\n                                <div class="btn_group">\n                                    <div class="confirm"  data-key="' + key + '">' + confirm + '</div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>';

	        $(".numberLine").append(dom);
	        if (callback) {
	            $(".confirm").on('click touchend', function (e) {
	                e.preventDefault();
	                callback($(this).data("key"));
	            });
	        } else {
	            $(".confirm").on('click touchend', function (e) {
	                e.preventDefault();
	                dialog.remove($(this).data("key"));
	            });
	        }
	    },
	    // 自动消失
	    tips: function tips(msg) {
	        var key = parseInt(Math.random().toFixed(10) * 10000000000);
	        var dom = '<div id="msgBox' + key + '">\n                        <div class="num_overlay"></div>\n                        <div class="num_msg_box dialog_tips">\n                            <div class="msg_wrap">\n                                <div class="msg_text"><em class="msg_center_text">' + msg + '</em></div>\n                            </div>\n                        </div>\n                    </div>';

	        $(".numberLine").append(dom);
	        var timer = setTimeout(function () {
	            dialog.remove(key);
	        }, 2000);
	    },
	    remove: function remove(key) {
	        $(".numberLine").find($("#msgBox" + key)).remove();
	    }
	};

	exports['default'] = dialog;
	module.exports = exports['default'];

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by xcc on 2016/1/5.
	 */
	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});
	exports.upMarkPoint = upMarkPoint;
	exports.saveObjPosition = saveObjPosition;

	var _handleCallback = __webpack_require__(5);

	var _ShapeAddMarkPoint = __webpack_require__(15);

	var _moveMarkPoint = __webpack_require__(14);

	var _updateUnit = __webpack_require__(11);

	var isSmallUnit = undefined;
	var smallUnit = 0;

	function upMarkPoint(selectedObj, positionCollection, parent) {
		var group = selectedObj.parent.parent;
		isSmallUnit = group.data.smallUnitVisible;
		if (isSmallUnit) smallUnit = _updateUnit.unitLengthSend / 10;else smallUnit = _updateUnit.unitLengthSend;
		var status = (0, _moveMarkPoint.getMoveStatus)();
		if (!status) {
			(0, _moveMarkPoint.logUtil)('你没有移动unitLengthSend=' + _updateUnit.unitLengthSend);
			return;
		}
		var radius = _handleCallback.lineWidth * 1.5;
		var positionX = selectedObj.parent.position.x;

		for (var v = 0; v < positionCollection.length; v++) {
			if (Math.abs(positionX - positionCollection[v]) < radius * 2) {
				//如果位置小于两个圆心半径，说明重叠了
				if (objPosition > positionX) {
					//右到左
					if (isSmallUnit) {
						if (positionCollection[v] - radius * 2 <= parent.data.pointA.x) {
							//移动后的位置最终超过A点，则往回啦
							getBackDistance(true, selectedObj, parent, positionCollection[v]);
							break;
						} else {
							var distance = getTheDistance(selectedObj);
							selectedObj.parent.position.x = positionCollection[v] - distance;
						}
					} else {
						var pA = parent.data.pointA.x;
						var result = (pA - positionCollection[v]) / smallUnit;
						if (Math.abs(parseInt(result)) == 0) {
							getBackDistance(true, selectedObj, parent, positionCollection[v]);
							break;
						} else {
							var distance = getTheDistance(selectedObj);
							selectedObj.parent.position.x = positionCollection[v] - distance;
						}
					}
				} else {
					//左到右
					if (isSmallUnit) {
						if (positionCollection[v] + radius * 2 >= parent.data.pointB.x) {
							getBackDistance(false, selectedObj, parent, positionCollection[v]);
							break;
						} else {
							var distance = getTheDistance(selectedObj);
							selectedObj.parent.position.x = positionCollection[v] + distance;
						}
					} else {
						var pB = parent.data.pointB.x;
						var resultB = (pB - positionCollection[v]) / smallUnit;
						if (Math.abs(parseInt(resultB)) == 0) {
							getBackDistance(false, selectedObj, parent, positionCollection[v]);
							break;
						} else {
							var distance = getTheDistance(selectedObj);
							selectedObj.parent.position.x = positionCollection[v] + distance;
						}
					}
				}
				var replace = removePointToArray(positionCollection, positionCollection[v]);
				upMarkPoint(selectedObj, replace, parent);
				(0, _moveMarkPoint.refreshText)(selectedObj.parent, _updateUnit.unitLengthSend);
			}
		}
	}

	function getBackDistance(leftToRight, selectedObj, parent, relativePostion) {
		//得到回弹的最后位置
		var distance = getTheDistance(selectedObj);
		if (leftToRight) {
			selectedObj.parent.position.x = relativePostion + distance;
			objPosition = parent.data.pointA.x; //到达边界后应该是从左到右
		} else {
				selectedObj.parent.position.x = relativePostion - distance;
				objPosition = parent.data.pointB.x;
			}
		(0, _moveMarkPoint.refreshArray)(selectedObj.parent.parent);
		var refrsh = (0, _ShapeAddMarkPoint.getPositionCollection)();
		var removeRelative = removePointToArray(refrsh, relativePostion); //移除你相对于哪天参考点的标的标识点
		var removeOwn = removePointToArray(removeRelative, selectedObj.parent.position.x); //因为刷新了容器，你还要移除你自己的最新位置
		upMarkPoint(selectedObj, removeOwn, parent);
		(0, _moveMarkPoint.refreshText)(selectedObj.parent, _updateUnit.unitLengthSend); // 因为break了，所以得更新value数值
	}

	var objPosition = undefined;

	function getTheDistance(selectedObj) {
		//基于要显示在刻度上，得到的回弹距离
		var distance = 0;
		var radius = _handleCallback.lineWidth * 1.5;
		for (var v = 1; v < 6; v++) {
			if (smallUnit * v >= radius * 2) {
				distance = smallUnit * v;
				break;
			}
		}
		return distance;
	}

	function saveObjPosition(position) {
		objPosition = position;
	}

	function removePointToArray(array, position) {
		var remove = [];
		var isOne = true;
		for (var v = 0; v < array.length; v++) {
			if (array[v] == position) {
				//特殊情况会出现容器里有两个位置一样的，所以只要排除一个就行，别的都加入容器。
				if (!isOne) remove.push(position);
				isOne = false;
			} else {
				remove.push(array[v]);
			}
		}
		return remove;
	}

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _updateUnit = __webpack_require__(11);

	var _updateUnit2 = _interopRequireDefault(_updateUnit);

	var _dialog = __webpack_require__(20);

	var _dialog2 = _interopRequireDefault(_dialog);

	var _presenter = __webpack_require__(1);

	var _presenter2 = _interopRequireDefault(_presenter);

	exports['default'] = function (shape, input) {
	  var showText = shape.getObjectByName('showText');
	  var unitMultiple = input.value;
	  var value = undefined;
	  if (unitMultiple == '.') {
	    $(_presenter2['default'].view).find('.dialog_msg').length ? null : _dialog2['default'].msg(_presenter2['default']._i18n['nl_range_max_tip'], function (key) {
	      $(_presenter2['default'].view).find('.numberline-input').focus();
	      _dialog2['default'].remove(key);
	    });
	    $(_presenter2['default'].view).find('.numberline-input').blur();
	    unitMultiple = shape.data.unitMultiple;
	    input.value = unitMultiple;
	  }
	  if (unitMultiple == '') {
	    showText._dynamicTexture.clear().drawText(input.value.toString(), undefined, 24, '#000000');
	    shape.data.unitValue = unitMultiple;
	  } else {
	    value = new Number(unitMultiple);
	    if (isNaN(value)) {
	      showText._dynamicTexture.clear().drawText(shape.data.unitMultiple.toString(), undefined, 24, '#000000');
	      input.value = shape.data.unitMultiple;
	      shape.data.unitValue = shape.data.unitMultiple;
	    } else {
	      if (unitMultiple.toString().indexOf('.') != -1) {
	        var i = unitMultiple.toString().split('.')[0];
	        var f = unitMultiple.toString().split('.')[1];
	        if (f) {
	          f = f.split('')[0];
	          unitMultiple = i + '.' + f;
	          input.value = unitMultiple;
	        }
	      }
	      if (unitMultiple != 0 && (unitMultiple < 0.1 || unitMultiple > 1000)) {
	        $(_presenter2['default'].view).find('.numberline-input').blur();
	        // if (unitMultiple < 0.1 || unitMultiple > 1000) {
	        $(_presenter2['default'].view).find('.dialog_msg').length ? null : _dialog2['default'].msg(_presenter2['default']._i18n['nl_range_max_tip'], function (key) {
	          $(_presenter2['default'].view).find('.numberline-input').focus();
	          _dialog2['default'].remove(key);
	        });
	        // }
	        unitMultiple = unitMultiple.substr(0, unitMultiple.length - 1);
	        input.value = unitMultiple;
	      }
	      // 判断大于四位数时，取值位数。
	      if (unitMultiple.length >= 4 && unitMultiple.toString().indexOf('.') == -1) {
	        if (unitMultiple > 1000 && unitMultiple.substr(0, 4) % 1000 != 0) {
	          unitMultiple = unitMultiple.substr(0, 3);
	          input.value = unitMultiple;
	        } else {
	          unitMultiple = unitMultiple.substr(0, 4);
	          input.value = unitMultiple;
	        }
	      }
	      if (unitMultiple == '00' || unitMultiple == '000' || unitMultiple == '0000') {
	        unitMultiple = 0;
	        input.value = 0;
	      } else if (unitMultiple.length >= 2 && unitMultiple.substr(0, 1) == 0 && unitMultiple.substr(1, 1) != '.') {
	        unitMultiple = unitMultiple.substring(1, unitMultiple.length);
	        input.value = unitMultiple;
	      }

	      showText._dynamicTexture.clear().drawText(unitMultiple.toString(), undefined, 24, '#000000');

	      shape.data.unitValue = unitMultiple;
	      // shape.data.unitMultiple = unitMultiple;
	    }
	  }
	  _presenter2['default'].renderer();
	};

	module.exports = exports['default'];

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by Administrator on 2015/12/18.
	 */

	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _presenter = __webpack_require__(1);

	var _presenter2 = _interopRequireDefault(_presenter);

	var _threeManger = __webpack_require__(16);

	var _ShapeNumberLine = __webpack_require__(6);

	var _ShapeNumberLine2 = _interopRequireDefault(_ShapeNumberLine);

	var _constants = __webpack_require__(17);

	var _UtilsUpdateUnit = __webpack_require__(11);

	var _UtilsUpdateUnit2 = _interopRequireDefault(_UtilsUpdateUnit);

	var _UtilsMoveMarkPoint = __webpack_require__(14);

	var _UtilsUpdateLine = __webpack_require__(24);

	var _UtilsUpdateLine2 = _interopRequireDefault(_UtilsUpdateLine);

	var _UtilsUpdateVertices = __webpack_require__(7);

	var _UtilsUpdateVertices2 = _interopRequireDefault(_UtilsUpdateVertices);

	var _UtilsAddCurve = __webpack_require__(25);

	var _UtilsAddCurve2 = _interopRequireDefault(_UtilsAddCurve);

	var _UtilsAddDot = __webpack_require__(28);

	var _UtilsAddDot2 = _interopRequireDefault(_UtilsAddDot);

	var _UtilsToolbarJs = __webpack_require__(30);

	var _ShapeAddMarkPoint = __webpack_require__(15);

	var _EventUnitController = __webpack_require__(44);

	var _EventUnitController2 = _interopRequireDefault(_EventUnitController);

	var _unitSelect = __webpack_require__(32);

	var _unitSelect2 = _interopRequireDefault(_unitSelect);

	var _UtilsUpdateSection = __webpack_require__(45);

	var _UtilsUpdateSection2 = _interopRequireDefault(_UtilsUpdateSection);

	var _UtilsUpdatePointStatus = __webpack_require__(46);

	var _UtilsUpdatePointStatus2 = _interopRequireDefault(_UtilsUpdatePointStatus);

	var _ShapePoint = __webpack_require__(36);

	var _ShapePoint2 = _interopRequireDefault(_ShapePoint);

	var _ShapeSectionLine = __webpack_require__(35);

	var _UtilsComputeSection = __webpack_require__(38);

	var _UtilsComputeSection2 = _interopRequireDefault(_UtilsComputeSection);

	var _UtilsAdjustPosition = __webpack_require__(47);

	var _UtilsAdjustPosition2 = _interopRequireDefault(_UtilsAdjustPosition);

	var _UtilsAdjustDistance = __webpack_require__(48);

	var _UtilsAdjustDistance2 = _interopRequireDefault(_UtilsAdjustDistance);

	var _UtilsCheckUpdate = __webpack_require__(49);

	var _UtilsCheckUpdate2 = _interopRequireDefault(_UtilsCheckUpdate);

	var _UtilsSetColor = __webpack_require__(50);

	var _UtilsSetColor2 = _interopRequireDefault(_UtilsSetColor);

	var _UtilsSetZPosition = __webpack_require__(43);

	var _UtilsSetZPosition2 = _interopRequireDefault(_UtilsSetZPosition);

	var _UtilsEditeMarkPointText = __webpack_require__(19);

	var _UtilsUpMarkPoint = __webpack_require__(21);

	var _UtilsDestroyThreeObject = __webpack_require__(29);

	var _UtilsDestroyThreeObject2 = _interopRequireDefault(_UtilsDestroyThreeObject);

	var _UtilsUpdatePointArray = __webpack_require__(51);

	var _UtilsUpdatePointArray2 = _interopRequireDefault(_UtilsUpdatePointArray);

	var _UtilsDialog = __webpack_require__(20);

	var _UtilsDialog2 = _interopRequireDefault(_UtilsDialog);

	var _UtilsGetSections = __webpack_require__(31);

	var _UtilsGetSections2 = _interopRequireDefault(_UtilsGetSections);

	var _UtilsRefreshSection = __webpack_require__(41);

	var _UtilsRefreshSection2 = _interopRequireDefault(_UtilsRefreshSection);

	var _UtilsIsShowUnitController = __webpack_require__(42);

	var _UtilsIsShowUnitController2 = _interopRequireDefault(_UtilsIsShowUnitController);

	var removeEvent = null,
	    checkButtonState = undefined;

	exports['default'] = function () {
		'use strict';
		var rendererDom = _threeManger.renderer.domElement;
		var mouseData = {};
		var container = $(_presenter2['default'].view).find('.tool_number_lines_area'); // canvas上级dom
		var selectedObj = undefined; // 当前选中对象
		var intersectsPlane = undefined;
		var isDown = false;
		var setTextTimeOut = null;
		var fingerDisOld = 0,
		    fingerDis = 0; // 多点触控-两点间距离
		var newLen = 80; // 存储刻度调节后的len

		rendererDom.addEventListener('mousedown', onDocumentMousedown, false);
		rendererDom.addEventListener('touchstart', onDocumentMousedown, false);
		rendererDom.addEventListener('mousewheel', scale, false);

		window.addEventListener('resize', onWindowResize, false);

		function onDocumentMousedown(event) {
			event.preventDefault();
			$(_presenter2['default'].view).find(".textbox").hide();
			// 如果是多点触控，就执行缩放操作，mousedown里的其他代码不再执行
			if (event.targetTouches && event.targetTouches.length > 1) {
				fingerDis = fingerDisOld = 0;
			} else {
				var pointer = event.targetTouches ? event.targetTouches[0] : event;
				_threeManger.mouse.x = (pointer.clientX - container.offset().left) / _constants.REAL_ESTATE.width * 2 - 1;
				_threeManger.mouse.y = -((pointer.clientY - container.offset().top) / _constants.REAL_ESTATE.height) * 2 + 1;
				_threeManger.raycaster.setFromCamera(_threeManger.mouse, _threeManger.camera);
				var intersects = _threeManger.raycaster.intersectObject(_presenter2['default'].numberLine, true);
				// 关闭刻度更改
				if (_UtilsToolbarJs.toolbarStatus.isRefreshUnit) {
					(0, _unitSelect2['default'])(_presenter2['default'].numberLine, false);
					_UtilsToolbarJs.toolbarStatus.isRefreshUnit = false;
				}
				(0, _UtilsEditeMarkPointText.editeMarkPointText)(_presenter2['default'].numberLine, false); //清除标识点字母的编辑状态
				if (!intersects.length) return false;
				selectedObj = intersects[0].object;
				intersectsPlane = _threeManger.raycaster.intersectObjects([_threeManger.plane]);
				if (intersectsPlane.length > 0) {
					mouseData.startPoint = intersectsPlane[0].point;
					mouseData.recordDistance = 0;
				}
				isDown = true;
				console.log(selectedObj.name);
				// 开启刻度更改
				if (selectedObj.name == "showText") {
					console.log('hha');
					if (Math.abs(mouseData.startPoint.x - _presenter2['default'].numberLine.data.unitLength - _presenter2['default'].numberLine.position.x) > _presenter2['default'].numberLine.data.unitLength / 2) {
						return;
					}
					if (_UtilsToolbarJs.toolbarStatus._action == 'interval' || _UtilsToolbarJs.toolbarStatus._action == 'regulation' || _UtilsToolbarJs.toolbarStatus._action == 'mark') {
						return;
					}
					if (_presenter2['default'].numberLine.getObjectByName('section') || _presenter2['default'].numberLine.getObjectByName('markPoint') || _presenter2['default'].numberLine.getObjectByName('regulation')) {
						return;
					}

					setTextTimeOut = setTimeout(function () {
						(0, _unitSelect2['default'])(_presenter2['default'].numberLine, true);
						_UtilsToolbarJs.toolbarStatus.isRefreshUnit = true;
					}, 1000);
				} else {
					if (Math.abs(mouseData.startPoint.y - _presenter2['default'].numberLine.position.y) > _presenter2['default'].numberLine.data.unitHeight && selectedObj.name != 'markPointText' && _UtilsToolbarJs.toolbarStatus._action != 'clean' && selectedObj.name != 'inCircle' && selectedObj.name != 'outCircle') {
						mouseData.startPoint = null;
						isDown = false;
						return;
					}
				}

				// 修改操作点的样式
				switch (selectedObj.name) {
					case 'controllerLeftCenter':
					case 'controllerRightCenter':
					case 'unitControllerCenter':
						mouseData.activedObj ? null : mouseData.activedObj = (0, _UtilsSetColor2['default'])(selectedObj.parent, '0xffef87', _presenter2['default'].numberLine);
						_presenter2['default'].renderer();
						break;
					case 'controllerLeft':
					case 'controllerRight':
					case 'unitController':
						// setColor(selectedObj, '0xffef87', parent);
						mouseData.activedObj ? null : mouseData.activedObj = (0, _UtilsSetColor2['default'])(selectedObj, '0xffef87', _presenter2['default'].numberLine);
						_presenter2['default'].renderer();
						break;
				}
				intersects = null;
			}
			rendererDom.addEventListener('mousemove', onDocumentMouseMove, false);
			rendererDom.addEventListener('mouseup', onDocumentMouseUp, false);
			rendererDom.addEventListener('mouseout', onDocumentMouseUp, false);

			rendererDom.addEventListener('touchmove', onDocumentMouseMove, false);
			rendererDom.addEventListener('touchend', onDocumentMouseUp, false);
			rendererDom.addEventListener("touchcancel", onDocumentMouseUp, false);
			rendererDom.addEventListener('touchleave', onDocumentMouseUp, false);
		}

		function onDocumentMouseMove(event) {
			// 如果是多点触控，就执行缩放操作，mousedown里的其他代码不再执行
			if (event.targetTouches && event.targetTouches.length > 1) {
				multipleTouch(event);
				return false;
			}
			var pointer = event.targetTouches ? event.targetTouches[0] : event;
			if (!selectedObj) return false;

			_threeManger.mouse.x = (pointer.clientX - container.offset().left) / _constants.REAL_ESTATE.width * 2 - 1;
			_threeManger.mouse.y = -((pointer.clientY - container.offset().top) / _constants.REAL_ESTATE.height) * 2 + 1;

			_threeManger.raycaster.setFromCamera(_threeManger.mouse, _threeManger.camera);
			var movePoint = _threeManger.raycaster.intersectObjects([_threeManger.plane])[0];
			if (!movePoint) return;
			mouseData.movePoint = movePoint.point;
			var distanceX = mouseData.movePoint.x - mouseData.startPoint.x;
			if (Math.abs(distanceX) < 8 && Math.abs(mouseData.movePoint.y - mouseData.startPoint.y) < 8) {
				return;
			}
			isDown = false;
			var regulation = null;
			switch (selectedObj.name) {
				// 坐标轴体
				case 'group':
					numLineMove();
					break;
				case 'line':
					selectedObj = selectedObj.parent;
					numLineMove();
					break;
				// 右控制点
				case 'controllerRightCenter':
				case 'controllerRight':
					var controllerRight = selectedObj.name == "controllerRightCenter" ? selectedObj.parent : selectedObj;
					var w = -_constants.REAL_ESTATE.width / 2;
					if (_UtilsToolbarJs.toolbarStatus.pointArray.length > 0) {

						if (Math.max.apply(null, _UtilsToolbarJs.toolbarStatus.pointArray) < _presenter2['default'].numberLine.data.unitLength * 1.5) {
							if (controllerRight.position.x + distanceX > _presenter2['default'].numberLine.data.unitLength * 1.5 + _presenter2['default'].numberLine.data.controllerDis && w - _presenter2['default'].numberLine.position.x + _presenter2['default'].numberLine.data.controllerDis + _presenter2['default'].numberLine.data.unitLength <= controllerRight.position.x + distanceX) {
								controllerRight.position.x += distanceX;
								(0, _UtilsUpdateLine2['default'])('controllerRight', _presenter2['default'].numberLine, controllerRight);
							}
						} else {
							if (controllerRight.position.x + distanceX > Math.max.apply(null, _UtilsToolbarJs.toolbarStatus.pointArray) + _presenter2['default'].numberLine.data.controllerDis && w - _presenter2['default'].numberLine.position.x + _presenter2['default'].numberLine.data.controllerDis + _presenter2['default'].numberLine.data.unitLength <= controllerRight.position.x + distanceX) {
								controllerRight.position.x += distanceX;
								(0, _UtilsUpdateLine2['default'])('controllerRight', _presenter2['default'].numberLine, controllerRight);
							}
						}
					} else {
						if (controllerRight.position.x + distanceX > _presenter2['default'].numberLine.data.unitLength * 1.5 + _presenter2['default'].numberLine.data.controllerDis) {
							if (w - _presenter2['default'].numberLine.position.x + _presenter2['default'].numberLine.data.controllerDis + _presenter2['default'].numberLine.data.unitLength <= controllerRight.position.x + distanceX) {
								controllerRight.position.x += distanceX;
								(0, _UtilsUpdateLine2['default'])('controllerRight', _presenter2['default'].numberLine, controllerRight);
							} else {
								if (distanceX > 0 && w - _presenter2['default'].numberLine.position.x + controllerRight.position.x + distanceX > 0 && controllerRight.position.x + distanceX > _presenter2['default'].numberLine.data.controllerDis + _presenter2['default'].numberLine.data.unitLength) {
									controllerRight.position.x += distanceX;
									(0, _UtilsUpdateLine2['default'])('controllerRight', _presenter2['default'].numberLine, controllerRight);
								}
							}
						}
					}
					_presenter2['default'].renderer();
					break;
				// 左控制点
				case 'controllerLeftCenter':
				case 'controllerLeft':
					var controllerLeft = selectedObj.name == "controllerLeftCenter" ? selectedObj.parent : selectedObj;
					var w = _constants.REAL_ESTATE.width / 2;
					if (_UtilsToolbarJs.toolbarStatus.pointArray.length > 0) {
						if (Math.min.apply(null, _UtilsToolbarJs.toolbarStatus.pointArray) > -_presenter2['default'].numberLine.data.unitLength * 1.5) {
							if (controllerLeft.position.x + distanceX < -(_presenter2['default'].numberLine.data.unitLength * 1.5 + _presenter2['default'].numberLine.data.controllerDis) && _presenter2['default'].numberLine.position.x + _presenter2['default'].numberLine.data.controllerDis + _presenter2['default'].numberLine.data.unitLength - w <= Math.abs(controllerLeft.position.x + distanceX)) {
								controllerLeft.position.x += distanceX;
								(0, _UtilsUpdateLine2['default'])('controllerLeft', _presenter2['default'].numberLine, controllerLeft);
							}
						} else {
							if (controllerLeft.position.x + distanceX < Math.min.apply(null, _UtilsToolbarJs.toolbarStatus.pointArray) - _presenter2['default'].numberLine.data.controllerDis && _presenter2['default'].numberLine.position.x + _presenter2['default'].numberLine.data.controllerDis + _presenter2['default'].numberLine.data.unitLength - w <= Math.abs(controllerLeft.position.x + distanceX)) {
								controllerLeft.position.x += distanceX;
								(0, _UtilsUpdateLine2['default'])('controllerLeft', _presenter2['default'].numberLine, controllerLeft);
							}
						}
					} else {
						if (controllerLeft.position.x + distanceX < -(_presenter2['default'].numberLine.data.unitLength * 1.5 + _presenter2['default'].numberLine.data.controllerDis)) {
							if (_presenter2['default'].numberLine.position.x + _presenter2['default'].numberLine.data.controllerDis + _presenter2['default'].numberLine.data.unitLength - w <= Math.abs(controllerLeft.position.x + distanceX)) {
								controllerLeft.position.x += distanceX;
								(0, _UtilsUpdateLine2['default'])('controllerLeft', _presenter2['default'].numberLine, controllerLeft);
							} else {
								if (distanceX < 0 && _presenter2['default'].numberLine.position.x + Math.abs(controllerLeft.position.x + distanceX) - w > 0 && Math.abs(controllerLeft.position.x + distanceX) > _presenter2['default'].numberLine.data.controllerDis + _presenter2['default'].numberLine.data.unitLength) {
									controllerLeft.position.x += distanceX;
									(0, _UtilsUpdateLine2['default'])('controllerLeft', _presenter2['default'].numberLine, controllerLeft);
								}
							}
						}
					}
					_presenter2['default'].renderer();
					break;
				// 刻度控制点
				case 'unitControllerCenter':
				case 'unitController':
					var unitObj = selectedObj.name == "unitControllerCenter" ? selectedObj.parent : selectedObj;
					(0, _EventUnitController2['default'])(_presenter2['default'].numberLine, unitObj, distanceX);
					newLen = _presenter2['default'].numberLine.data.unitLength;
					_presenter2['default'].renderer();
					break;
				case 'markPointCircle':
					//标识点移动
					distanceX = (0, _UtilsAdjustDistance2['default'])(mouseData, _presenter2['default'].numberLine);
					if (distanceX != 0 && _UtilsToolbarJs.toolbarStatus._action == 'mark') {
						var isAllow = (0, _UtilsEditeMarkPointText.getAllowBoolean)(); //标识点总开关
						if (isAllow) {
							if (parseInt(selectedObj.parent.position.x * 10) + parseInt(distanceX * 10) <= parseInt(_presenter2['default'].numberLine.data.pointB.x * 10) && parseInt(selectedObj.parent.position.x * 10) + parseInt(distanceX * 10) >= parseInt(_presenter2['default'].numberLine.data.pointA.x * 10)) {
								mouseData.activedObj ? null : (mouseData.activedObj = (0, _UtilsSetColor2['default'])(selectedObj, '0xffef87', _presenter2['default'].numberLine), _UtilsToolbarJs.toolbarStatus.tempPoint = selectedObj.parent.position.x);
								(0, _UtilsMoveMarkPoint.moveMarkPoint)(selectedObj.parent, distanceX, _presenter2['default'].numberLine);
								mouseData.recordDistance -= distanceX;
							}
						} else {
							//dialog.tips('我想移动，发现存在相同标识点')
						}
					}
					_presenter2['default'].renderer();
					break;
				case 'outCircle':
				case 'inCircle':
					distanceX = (0, _UtilsAdjustDistance2['default'])(mouseData, _presenter2['default'].numberLine);
					if (distanceX != 0) {
						if (selectedObj.parent.parent.name == 'section' && _UtilsToolbarJs.toolbarStatus._action == 'interval') {
							mouseData.activedObj ? null : (mouseData.activedObj = (0, _UtilsSetColor2['default'])(selectedObj.parent.getObjectByName('outCircle'), '0xffef87', _presenter2['default'].numberLine), _UtilsToolbarJs.toolbarStatus.tempPoint = selectedObj.parent.position.x);
							(0, _UtilsUpdateSection2['default'])(selectedObj.parent, distanceX);
							mouseData.recordDistance -= distanceX;
						}
						if (selectedObj.parent.parent.name == 'regulation' && _UtilsToolbarJs.toolbarStatus._action == 'regulation') {
							regulation = selectedObj.parent.parent;
							var tempPoint = selectedObj.parent.position.x;
							if (!(0, _UtilsCheckUpdate2['default'])(selectedObj.parent.name, regulation, _presenter2['default'].numberLine, distanceX)) {
								mouseData.activedObj ? null : (mouseData.activedObj = (0, _UtilsSetColor2['default'])(selectedObj.parent.getObjectByName('outCircle'), '0xffef87', _presenter2['default'].numberLine), _UtilsToolbarJs.toolbarStatus.tempPoint = tempPoint);
								mouseData.recordDistance -= distanceX;
							}
						}
					}
					_presenter2['default'].renderer();
					break;
			}
			mouseData.startPoint.copy(mouseData.movePoint);
		}

		function onDocumentMouseUp(event) {
			if (selectedObj) {
				if (_UtilsToolbarJs.toolbarStatus._action == "clean" && isDown) {
					//清楚标识点操作，勿删。
					var markPoint = selectedObj.parent;
					if (markPoint.name == 'markPoint') {
						var isAllow = (0, _UtilsEditeMarkPointText.getAllowBoolean)(); //标识点总开关
						if (isAllow) {
							var removeText = markPoint.userData.markText;
							(0, _UtilsMoveMarkPoint.initArray)(markPoint);
							_UtilsToolbarJs.toolbarStatus.tempPoint = markPoint.position.x;
							(0, _UtilsUpdatePointArray2['default'])(markPoint, _UtilsToolbarJs.toolbarStatus, 'delete');
							markPoint.parent.remove(markPoint);
							(0, _ShapeAddMarkPoint.clear)(removeText);
						} else {
							//dialog.tips('我想清除标识点，发现存在相同标识点')
						}
						_presenter2['default'].renderer();
					}
					var rmObj = getTopParent(markPoint);
					if (rmObj != null) {
						_presenter2['default'].numberLine.remove(rmObj);
						referState(rmObj);
						(0, _UtilsDestroyThreeObject2['default'])(rmObj);
						markPoint = null;
						rmObj = null;
						_presenter2['default'].renderer();
						(0, _UtilsIsShowUnitController2['default'])(_presenter2['default'].numberLine);
					}
					mouseData.activedObj ? ((0, _UtilsSetColor2['default'])(mouseData.activedObj.obj, mouseData.activedObj.originColor), mouseData.activedObj = null) : null;
				} else {
					if (isDown) {
						(0, _UtilsAdjustPosition2['default'])(mouseData.startPoint, _presenter2['default'].numberLine);
						switch (_UtilsToolbarJs.toolbarStatus._action) {
							case 'mark':
								if (mouseData.startPoint.x - _presenter2['default'].numberLine.position.x <= _presenter2['default'].numberLine.data.pointB.x && mouseData.startPoint.x - _presenter2['default'].numberLine.position.x >= _presenter2['default'].numberLine.data.pointA.x) {
									var isAllow = (0, _UtilsEditeMarkPointText.getAllowBoolean)(); //标识点总开关
									if (isAllow && selectedObj.name != 'markPointCircle' && selectedObj.name != 'markPointText') {
										var markPoint = (0, _ShapeAddMarkPoint.AddMarkPoint)(mouseData.startPoint);
										if (markPoint) {
											_UtilsToolbarJs.toolbarStatus.pointArray.push(markPoint.position.x);
											(0, _UtilsSetZPosition2['default'])(markPoint);
											_presenter2['default'].renderer();
										}
										markPoint = null;
									} else {
										selectedObj.name == 'markPointText' ? (0, _UtilsEditeMarkPointText.editeMarkPointText)(selectedObj, true) : null; //进入标识点的编辑状态
										//dialog.tips('我想AddMarkPoint，发现存在相同标识点')
									}
								}
								break;
							case 'interval':
								if (selectedObj.parent.parent && selectedObj.parent.parent.name == 'section') {
									selectedObj.name == 'outCircle' || selectedObj.name == 'inCircle' ? (0, _UtilsUpdatePointStatus2['default'])(selectedObj.parent) : null;
								}
								// if(selectedObj.name == 'outCircle' || selectedObj.name =='inCircle'){
								//      ? updatePointStatus(selectedObj.parent) : null;
								// }
								else {
										if (mouseData.startPoint.x - _presenter2['default'].numberLine.position.x <= _presenter2['default'].numberLine.data.pointB.x && mouseData.startPoint.x - _presenter2['default'].numberLine.position.x >= _presenter2['default'].numberLine.data.pointA.x) {
											if (_UtilsToolbarJs.toolbarStatus.sectionAttr.length > 0) {

												if (_UtilsToolbarJs.toolbarStatus.startPoint) {
													if (Math.abs(mouseData.startPoint.x - _presenter2['default'].numberLine.position.x - _UtilsToolbarJs.toolbarStatus.startPoint.position.x) >= 3 * _presenter2['default'].numberLine.data.lineWidth) {
														var sectionGroup = undefined,
														    text = undefined,
														    startSide = undefined,
														    endSide = undefined,
														    line = undefined,
														    sectionText = undefined,
														    sectionPosition = undefined,
														    color = undefined;
														// 判断落点处是否已经存在其它端点
														if (!hasSectionPoint(mouseData.startPoint.x - _presenter2['default'].numberLine.position.x, _presenter2['default'].numberLine.data.lineWidth)) {

															mouseData.startPoint.y = 0;
															sectionGroup = new THREE.Object3D();
															sectionGroup.data = {};
															color = _UtilsToolbarJs.toolbarStatus.sectionAttr[0].sectionColor;
															_UtilsToolbarJs.toolbarStatus.endPoint = (0, _ShapePoint2['default'])(_presenter2['default'].numberLine.data.lineWidth, color);
															_UtilsToolbarJs.toolbarStatus.endPoint.position.x = mouseData.startPoint.x - _presenter2['default'].numberLine.position.x;
															_UtilsToolbarJs.toolbarStatus.endPoint.position.z = 0.1;
															_UtilsToolbarJs.toolbarStatus.endPoint.name = 'endPoint';

															startSide = (0, _ShapeSectionLine.createSide)(_UtilsToolbarJs.toolbarStatus.startPoint.position, _UtilsToolbarJs.toolbarStatus.sectionAttr[0].sectionHeight, _presenter2['default'].numberLine.data.lineWidth, color);
															startSide.side.name = 'startSide';
															endSide = (0, _ShapeSectionLine.createSide)(_UtilsToolbarJs.toolbarStatus.endPoint.position, _UtilsToolbarJs.toolbarStatus.sectionAttr[0].sectionHeight, _presenter2['default'].numberLine.data.lineWidth, color);
															endSide.side.name = 'endSide';
															startSide.upVector.y -= _presenter2['default'].numberLine.data.lineWidth / 2;
															endSide.upVector.y -= _presenter2['default'].numberLine.data.lineWidth / 2;
															line = (0, _ShapeSectionLine.createLine)(startSide.upVector, endSide.upVector, _presenter2['default'].numberLine.data.lineWidth, color);
															sectionPosition = new THREE.Vector2((startSide.upVector.x + endSide.upVector.x) / 2, _UtilsToolbarJs.toolbarStatus.sectionAttr[0].sectionHeight + 12);

															startSide.side.position.z = -1;
															endSide.side.position.z = -1;
															_UtilsToolbarJs.toolbarStatus.startPoint.position.z = 0;
															_UtilsToolbarJs.toolbarStatus.endPoint.position.z = 0;
															sectionGroup.add(startSide.side);
															sectionGroup.add(endSide.side);
															sectionGroup.add(line);
															sectionGroup.add(_UtilsToolbarJs.toolbarStatus.endPoint);
															sectionGroup.add(_UtilsToolbarJs.toolbarStatus.startPoint);
															_presenter2['default'].numberLine.add(sectionGroup);

															text = (0, _UtilsComputeSection2['default'])(sectionGroup, _UtilsToolbarJs.toolbarStatus.startPoint.position, _UtilsToolbarJs.toolbarStatus.endPoint.position);
															sectionText = (0, _ShapeSectionLine.createText)(text, sectionPosition, color);
															sectionGroup.add(sectionText);

															sectionGroup.outset = _UtilsToolbarJs.toolbarStatus.startPoint;
															sectionGroup.terminal = _UtilsToolbarJs.toolbarStatus.endPoint;
															sectionGroup.data.startVector = _UtilsToolbarJs.toolbarStatus.startPoint.position;
															sectionGroup.data.endVector = _UtilsToolbarJs.toolbarStatus.endPoint.position;
															sectionGroup.data.startHeight = _UtilsToolbarJs.toolbarStatus.sectionAttr[0].sectionHeight;
															sectionGroup.data.endHeight = _UtilsToolbarJs.toolbarStatus.sectionAttr[0].sectionHeight;
															sectionGroup.data.startSideVector = startSide.upVector;
															sectionGroup.data.endSideVector = endSide.upVector;
															sectionGroup.data.sectionColor = color;
															sectionGroup.data.index = _UtilsToolbarJs.toolbarStatus.sectionAttr[0].index;
															sectionGroup.name = 'section';
															(0, _UtilsSetZPosition2['default'])(sectionGroup);
															_presenter2['default'].renderer();
															_UtilsToolbarJs.toolbarStatus.pointArray.push(_UtilsToolbarJs.toolbarStatus.endPoint.position.x);
															// 刷新交并集
															(0, _UtilsRefreshSection2['default'])();

															var sections = (0, _UtilsGetSections2['default'])(_presenter2['default'].numberLine).sections;
															if (sections.length >= 2) {
																$('.mix').removeClass('click_disabled');
																$('.union').removeClass('click_disabled');
															}

															_UtilsToolbarJs.toolbarStatus.referInterval.push(_UtilsToolbarJs.toolbarStatus.startPoint);
															_UtilsToolbarJs.toolbarStatus.referInterval.push(_UtilsToolbarJs.toolbarStatus.endPoint);
															_UtilsToolbarJs.toolbarStatus.sectionAttr.splice(0, 1);
															_UtilsToolbarJs.toolbarStatus.startPoint = null;
															_UtilsToolbarJs.toolbarStatus.endPoint = null;
														}
													}
												} else {
													// 判断落点处是否已经存在其它端点
													if (!hasSectionPoint(mouseData.startPoint.x - _presenter2['default'].numberLine.position.x, _presenter2['default'].numberLine.data.lineWidth)) {
														mouseData.startPoint.y = 0;
														_UtilsToolbarJs.toolbarStatus.startPoint = (0, _ShapePoint2['default'])(_presenter2['default'].numberLine.data.lineWidth, _UtilsToolbarJs.toolbarStatus.sectionAttr[0].sectionColor);
														_UtilsToolbarJs.toolbarStatus.startPoint.position.x = mouseData.startPoint.x - _presenter2['default'].numberLine.position.x;
														_UtilsToolbarJs.toolbarStatus.startPoint.position.z = 0.1;
														_UtilsToolbarJs.toolbarStatus.startPoint.name = 'startPoint';
														_presenter2['default'].numberLine.add(_UtilsToolbarJs.toolbarStatus.startPoint);
														(0, _UtilsSetZPosition2['default'])(_UtilsToolbarJs.toolbarStatus.startPoint);
														_presenter2['default'].renderer();
														_UtilsToolbarJs.toolbarStatus.pointArray.push(_UtilsToolbarJs.toolbarStatus.startPoint.position.x);
													}
												}
											} else {
												$(_presenter2['default'].view).find('.dialog_msg').length ? null : _UtilsDialog2['default'].msg(_presenter2['default']._i18n['nl_interval_max_tip']);
											}
										}
									}
								_presenter2['default'].renderer();
								break;
							case 'regulation':
								if (mouseData.startPoint.x - _presenter2['default'].numberLine.position.x <= _presenter2['default'].numberLine.data.pointB.x && mouseData.startPoint.x - _presenter2['default'].numberLine.position.x >= _presenter2['default'].numberLine.data.pointA.x) {
									if (_UtilsToolbarJs.toolbarStatus.lineColor.length) {
										var pointText = ((mouseData.startPoint.x - _presenter2['default'].numberLine.position.x) / _presenter2['default'].numberLine.data.unitLength * _presenter2['default'].numberLine.data.unitMultiple).toFixed(1);

										if (_UtilsToolbarJs.toolbarStatus.startPoint) {
											if (Math.abs(mouseData.startPoint.x - _presenter2['default'].numberLine.position.x - _UtilsToolbarJs.toolbarStatus.startPoint.position.x) >= 40) {
												_UtilsToolbarJs.toolbarStatus.endPoint = (0, _ShapePoint2['default'])(_presenter2['default'].numberLine.data.lineWidth, _UtilsToolbarJs.toolbarStatus.lineColor.shift(), _presenter2['default'].numberLine.data.smallUnitVisible ? pointText : undefined, new THREE.Vector2(0, -22), _presenter2['default'].numberLine.data.unitMultiple);
												_UtilsToolbarJs.toolbarStatus.endPoint.position.x = mouseData.startPoint.x - _presenter2['default'].numberLine.position.x;
												_UtilsToolbarJs.toolbarStatus.endPoint.name = 'terminal';
												var curve = new _UtilsAddCurve2['default'](_UtilsToolbarJs.toolbarStatus, _presenter2['default'].numberLine.position, _presenter2['default'].numberLine.data.unitLength / _presenter2['default'].numberLine.data.unitMultiple, _presenter2['default'].numberLine.data.unitMultiple);
												// curve.position.z = -1;
												// 重置文字层级
												_UtilsToolbarJs.toolbarStatus.startPoint.position.z = 0;
												_UtilsToolbarJs.toolbarStatus.endPoint.position.z = 0;
												curve.add(_UtilsToolbarJs.toolbarStatus.startPoint);
												curve.add(_UtilsToolbarJs.toolbarStatus.endPoint);
												_presenter2['default'].numberLine.add(curve);
												(0, _UtilsSetZPosition2['default'])(curve);
												_presenter2['default'].renderer();
												_UtilsToolbarJs.toolbarStatus.pointArray.push(_UtilsToolbarJs.toolbarStatus.endPoint.position.x);
												_UtilsToolbarJs.toolbarStatus.startPoint = null;
												_UtilsToolbarJs.toolbarStatus.endPoint = null;
											}
										} else {
											_UtilsToolbarJs.toolbarStatus.startPoint = (0, _ShapePoint2['default'])(_presenter2['default'].numberLine.data.lineWidth, _UtilsToolbarJs.toolbarStatus.lineColor[0], _presenter2['default'].numberLine.data.smallUnitVisible ? pointText : undefined, new THREE.Vector2(0, -22), _presenter2['default'].numberLine.data.unitMultiple);
											console.log(_UtilsToolbarJs.toolbarStatus.startPoint.position.z + 'z');
											_UtilsToolbarJs.toolbarStatus.startPoint.position.x = mouseData.startPoint.x - _presenter2['default'].numberLine.position.x;
											_UtilsToolbarJs.toolbarStatus.startPoint.name = 'outset';
											_presenter2['default'].numberLine.add(_UtilsToolbarJs.toolbarStatus.startPoint);
											(0, _UtilsSetZPosition2['default'])(_UtilsToolbarJs.toolbarStatus.startPoint);
											_presenter2['default'].renderer();
											_UtilsToolbarJs.toolbarStatus.pointArray.push(_UtilsToolbarJs.toolbarStatus.startPoint.position.x);
										}
									} else {
										$(_presenter2['default'].view).find('.dialog_msg').length ? null : _UtilsDialog2['default'].msg(_presenter2['default']._i18n['nl_regulation_max_tip']);
									}
								}
								_presenter2['default'].renderer();
								break;
						}
					}

					var position = undefined,
					    remainLength = undefined,
					    count = undefined,
					    remain = undefined;
					switch (selectedObj.name) {
						case 'controllerRight':
						case 'controllerRightCenter':
							selectedObj = selectedObj.name == "controllerRightCenter" ? selectedObj.parent : selectedObj;
							position = selectedObj.position;
							if (_UtilsToolbarJs.toolbarStatus.pointArray.length > 0 && Math.floor(Math.max.apply(null, _UtilsToolbarJs.toolbarStatus.pointArray)) >= 0) {
								count = Math.abs(Math.floor(Math.max.apply(null, _UtilsToolbarJs.toolbarStatus.pointArray) / _presenter2['default'].numberLine.data.unitLength));
								remain = Math.abs(Math.max.apply(null, _UtilsToolbarJs.toolbarStatus.pointArray) % _presenter2['default'].numberLine.data.unitLength);
								if (remain <= _presenter2['default'].numberLine.data.unitLength / 2) {
									if (position.x - _presenter2['default'].numberLine.data.controllerDis >= (count + 0.5) * _presenter2['default'].numberLine.data.unitLength) {
										remainLength = (position.x - _presenter2['default'].numberLine.data.controllerDis) % _presenter2['default'].numberLine.data.unitLength;
										if (remainLength <= _presenter2['default'].numberLine.data.unitLength / 2) {
											position.x += _presenter2['default'].numberLine.data.unitLength / 2 - remainLength;
										} else {
											position.x -= remainLength - _presenter2['default'].numberLine.data.unitLength / 2;
										}
									} else {
										position.x = (count + 0.5) * _presenter2['default'].numberLine.data.unitLength + _presenter2['default'].numberLine.data.controllerDis;
									}
								} else {
									if (position.x - _presenter2['default'].numberLine.data.controllerDis >= (count + 1) * _presenter2['default'].numberLine.data.unitLength) {
										remainLength = (position.x - _presenter2['default'].numberLine.data.controllerDis) % _presenter2['default'].numberLine.data.unitLength;
										if (remainLength <= _presenter2['default'].numberLine.data.unitLength / 2) {
											position.x += _presenter2['default'].numberLine.data.unitLength / 2 - remainLength;
										} else {
											position.x -= remainLength - _presenter2['default'].numberLine.data.unitLength / 2;
										}
									} else {
										position.x = (count + 1.5) * _presenter2['default'].numberLine.data.unitLength + _presenter2['default'].numberLine.data.controllerDis;
									}
								}
							} else {
								remainLength = (position.x - _presenter2['default'].numberLine.data.controllerDis) % _presenter2['default'].numberLine.data.unitLength;
								if (remainLength <= _presenter2['default'].numberLine.data.unitLength / 2) {
									position.x += _presenter2['default'].numberLine.data.unitLength / 2 - remainLength;
								} else {
									position.x -= remainLength - _presenter2['default'].numberLine.data.unitLength / 2;
								}
							}
							selectedObj.position.copy(position);
							(0, _UtilsUpdateLine2['default'])('controllerRight', _presenter2['default'].numberLine, selectedObj);
							_presenter2['default'].renderer();
							// position = selectedObj.position;
							// remainLength = (position.x - parent.data.controllerDis) % parent.data.unitLength;
							// if (remainLength <= parent.data.unitLength / 2) {
							//     position.x += (parent.data.unitLength / 2 - remainLength);
							// } else {
							//     position.x -= (remainLength - parent.data.unitLength / 2);
							// }
							// selectedObj.position.copy(position);
							// updateLine('controllerRight', parent, selectedObj);
							break;
						case 'controllerLeft':
						case 'controllerLeftCenter':
							selectedObj = selectedObj.name == "controllerLeftCenter" ? selectedObj.parent : selectedObj;
							position = selectedObj.position;
							if (_UtilsToolbarJs.toolbarStatus.pointArray.length > 0 && Math.ceil(Math.min.apply(null, _UtilsToolbarJs.toolbarStatus.pointArray)) <= 0) {
								count = Math.abs(Math.ceil(Math.min.apply(null, _UtilsToolbarJs.toolbarStatus.pointArray) / _presenter2['default'].numberLine.data.unitLength));
								remain = Math.abs(Math.min.apply(null, _UtilsToolbarJs.toolbarStatus.pointArray) % _presenter2['default'].numberLine.data.unitLength);
								if (remain <= _presenter2['default'].numberLine.data.unitLength / 2) {
									if (position.x + _presenter2['default'].numberLine.data.controllerDis <= -(count + 0.5) * _presenter2['default'].numberLine.data.unitLength) {
										remainLength = (position.x + _presenter2['default'].numberLine.data.controllerDis) % _presenter2['default'].numberLine.data.unitLength;
										if (remainLength <= _presenter2['default'].numberLine.data.unitLength / 2) {
											position.x -= _presenter2['default'].numberLine.data.unitLength / 2 + remainLength;
										} else {
											position.x += remainLength + _presenter2['default'].numberLine.data.unitLength / 2;
										}
									} else {
										position.x = -(count + 0.5) * _presenter2['default'].numberLine.data.unitLength - _presenter2['default'].numberLine.data.controllerDis;
									}
								} else {
									if (position.x + _presenter2['default'].numberLine.data.controllerDis <= -(count + 1) * _presenter2['default'].numberLine.data.unitLength) {
										remainLength = (position.x + _presenter2['default'].numberLine.data.controllerDis) % _presenter2['default'].numberLine.data.unitLength;
										if (remainLength <= _presenter2['default'].numberLine.data.unitLength / 2) {
											position.x -= _presenter2['default'].numberLine.data.unitLength / 2 + remainLength;
										} else {
											position.x += remainLength + _presenter2['default'].numberLine.data.unitLength / 2;
										}
									} else {
										position.x = -(count + 1.5) * _presenter2['default'].numberLine.data.unitLength - _presenter2['default'].numberLine.data.controllerDis;
									}
								}
							} else {
								remainLength = (position.x + _presenter2['default'].numberLine.data.controllerDis) % _presenter2['default'].numberLine.data.unitLength;
								if (remainLength <= _presenter2['default'].numberLine.data.unitLength / 2) {
									position.x -= _presenter2['default'].numberLine.data.unitLength / 2 + remainLength;
								} else {
									position.x += remainLength + _presenter2['default'].numberLine.data.unitLength / 2;
								}
							}
							selectedObj.position.copy(position);
							(0, _UtilsUpdateLine2['default'])('controllerLeft', _presenter2['default'].numberLine, selectedObj);
							_presenter2['default'].renderer();
							// position = selectedObj.position;
							// remainLength = (position.x + parent.data.controllerDis) % parent.data.unitLength;
							// if (remainLength <= parent.data.unitLength / 2) {
							//     position.x -= (parent.data.unitLength / 2 + remainLength);
							// } else {
							//     position.x += (remainLength + parent.data.unitLength / 2);
							// }
							// selectedObj.position.copy(position);
							// updateLine('controllerLeft', parent, selectedObj);
							break;
						case 'outCircle':
						case 'inCircle':
							if (selectedObj.parent.parent.name == 'section') {
								(0, _UtilsUpdateSection2['default'])(selectedObj.parent, 0, 'up');
							}
							_presenter2['default'].renderer();
							break;
						// case 'startSide':
						// case 'endSide':
						// case 'sectionLine':
						// case 'sectionText':
						//     if (selectedObj.parent.name == 'section') {
						//         updateSection(selectedObj, 0, 'up');
						//     }
						//     break;
						case 'markPointCircle':
							//移动鼠标抬起判断标识点的最后位置
							(0, _UtilsUpMarkPoint.upMarkPoint)(selectedObj, (0, _ShapeAddMarkPoint.getPositionCollection)(), _presenter2['default'].numberLine);
							(0, _UtilsMoveMarkPoint.setMoveStatus)(false);
							//移动标识点抬起的时候刷新各个标识点的位置坐标
							(0, _UtilsMoveMarkPoint.refreshArray)(selectedObj.parent.parent);
							(0, _UtilsMoveMarkPoint.changeisFirst)();
							_presenter2['default'].renderer();
							break;
					}
					mouseData.activedObj ? ((0, _UtilsSetColor2['default'])(mouseData.activedObj.obj, mouseData.activedObj.originColor), mouseData.activedObj = null) : null;
					_UtilsToolbarJs.toolbarStatus.tempPoint != null ? (0, _UtilsUpdatePointArray2['default'])(selectedObj.parent, _UtilsToolbarJs.toolbarStatus) : null;
					isDown = false;
				}

				// 清空，删除按钮状态切换
				var isEdit = isEditFn();
				if (isEdit) {
					$(_presenter2['default'].view).find('.clear_all').removeClass("click_disabled");
					$(_presenter2['default'].view).find('.clean').removeClass("click_disabled");
				} else {
					$(_presenter2['default'].view).find('.clear_all').addClass("click_disabled").removeClass("click_btn_on");
					$(_presenter2['default'].view).find('.clean').addClass("click_disabled").removeClass("click_btn_on");
				}
			}
			_presenter2['default'].renderer();
			clearTimeout(setTextTimeOut);
			setTextTimeOut = null;
			// offset = new THREE.Vector3();
			selectedObj = null;
			intersectsPlane = null;
			mouseData = {};
			rendererDom.removeEventListener('mousemove', onDocumentMouseMove, false);
			rendererDom.removeEventListener('mouseup', onDocumentMouseUp, false);
			rendererDom.removeEventListener('mouseout', onDocumentMouseUp, false);

			rendererDom.removeEventListener('touchmove', onDocumentMouseMove, false);
			rendererDom.removeEventListener('touchend', onDocumentMouseUp, false);
			rendererDom.removeEventListener("touchcancel", onDocumentMouseUp, false);
			rendererDom.removeEventListener('touchleave', onDocumentMouseUp, false);
		}

		function numLineMove() {
			var intersectsPlane = _threeManger.raycaster.intersectObjects([_threeManger.plane]);
			var point1 = intersectsPlane[0].point;
			var point2 = point1.clone();
			var distance = point1.sub(mouseData.startPoint);

			var sideData = sideControll();
			_presenter2['default'].numberLine.position.copy(_presenter2['default'].numberLine.position.add(distance));
			if (_presenter2['default'].numberLine.position.x >= sideData.right) {
				_presenter2['default'].numberLine.position.x = sideData.right;
			}
			if (_presenter2['default'].numberLine.position.x <= sideData.left) {
				_presenter2['default'].numberLine.position.x = sideData.left;
			}
			if (_presenter2['default'].numberLine.position.y >= sideData.top) {
				_presenter2['default'].numberLine.position.y = sideData.top;
			}
			if (_presenter2['default'].numberLine.position.y <= sideData.bottom) {
				_presenter2['default'].numberLine.position.y = sideData.bottom;
			}
			mouseData.startPoint.copy(point2);
			_presenter2['default'].renderer();
		}

		// 数轴边界控制
		function sideControll() {
			var unitLength = _presenter2['default'].numberLine.data.unitLength;
			var center = new THREE.Vector3(0, 0, 0);
			var vectorCB = new THREE.Vector2().subVectors(center, _presenter2['default'].numberLine.data.pointB);
			var vectorCA = new THREE.Vector2().subVectors(center, _presenter2['default'].numberLine.data.pointA);
			var left = -_constants.REAL_ESTATE.width / 2 - vectorCB.length() + unitLength;
			var right = _constants.REAL_ESTATE.width / 2 + vectorCA.length() - unitLength;
			var top = _constants.REAL_ESTATE.height / 2 - 20;
			var bottom = -_constants.REAL_ESTATE.height / 2 + 30;

			var disLeft = _presenter2['default'].numberLine.position.x - left;
			var disRight = _presenter2['default'].numberLine.position.x - right;
			return {
				left: left,
				right: right,
				top: top,
				bottom: bottom,
				disLeft: disLeft,
				disRight: disRight,
				CB: vectorCB.length(),
				CA: vectorCA.length()
			};
			_presenter2['default'].renderer();
		}

		// 数轴缩放

		function scale(event) {
			$(_presenter2['default'].view).find(".textbox").hide();
			var dis = undefined;
			if (typeof event == 'object') {
				dis = event.wheelDelta;
			} else {
				dis = event;
			}
			var isEdit = isEditFn();
			if (isEdit) return; // 如果数轴已被编辑(有标识点，区间，增减线等)，不可缩放;
			var unitController = _presenter2['default'].numberLine.getObjectByName('unitController');
			var pointA = _presenter2['default'].numberLine.data.pointA;
			var pointB = _presenter2['default'].numberLine.data.pointB;
			var unitMultiple = _presenter2['default'].numberLine.data.unitMultiple;
			var unitLength = _presenter2['default'].numberLine.data.unitLength;
			var lineWidth = _presenter2['default'].numberLine.data.lineWidth;
			var unitHeight = _presenter2['default'].numberLine.data.unitHeight;
			var vectorCB = new THREE.Vector2().subVectors(new THREE.Vector3(0, 0, 0), _presenter2['default'].numberLine.data.pointB);

			if (vectorCB.length() >= 300) {
				if (dis > 0 && unitLength >= 50) {
					unitLength -= 10;
				}
				if (dis < 0 && unitLength <= 300) {
					unitLength += 10;
				}
			} else {
				if (dis > 0 && unitLength >= 50) {
					unitLength -= 10;
				}
				if (dis < 0 && unitLength <= vectorCB.length() - 50) {
					unitLength += 10;
				}
			}

			// 循环缩放
			if (unitLength < 50) {
				unitMultiple *= 2;
				unitLength = newLen;
			}
			if (unitLength > newLen) {
				unitMultiple /= 2;
				unitLength = 40;
			}
			if (unitLength * 1.5 > -pointA.x || unitLength * 1.5 > pointB.x) {
				return;
			}
			// 处理刻度值变化0.1~1000，
			if (unitMultiple < 0.1 || unitMultiple > 1000) {
				return false;
			}
			// 调整刻度值
			var arrTemp = [0.1, 0.2, 0.5, 1, 2, 5, 10, 20, 50, 100, 200, 500, 1000];
			if (arrTemp.indexOf(unitMultiple) == -1) {
				unitMultiple = findClosest(arrTemp, unitMultiple);
			}

			(0, _UtilsUpdateUnit2['default'])(_presenter2['default'].numberLine, pointA, pointB, unitMultiple, unitLength, lineWidth, unitHeight);
			_presenter2['default'].numberLine.data.unitLength = unitLength;
			_presenter2['default'].numberLine.data.unitMultiple = unitMultiple;
			_presenter2['default'].numberLine.data.unitValue = unitMultiple;
			unitController.position.x = unitLength;
			if (_UtilsToolbarJs.toolbarStatus.isRefreshUnit) {
				(0, _unitSelect2['default'])(_presenter2['default'].numberLine, false);
				_UtilsToolbarJs.toolbarStatus.isRefreshUnit = false;
			}
			_presenter2['default'].renderer();
		}

		// 多点触控
		function multipleTouch(event) {
			var touchA = new THREE.Vector3(),
			    touchB = new THREE.Vector3(); // 两点坐标
			var isEnlarge = 0; //  缩小还是放大
			// 移动过程中如果松开一个手指，就不再继续执行
			var finger1 = event.targetTouches[0];
			var finger2 = event.targetTouches[1];
			touchA.x = (finger1.clientX - container.offset().left) / _constants.REAL_ESTATE.width * 2 - 1;
			touchA.y = -((finger1.clientY - container.offset().top) / _constants.REAL_ESTATE.height) * 2 + 1;
			touchB.x = (finger2.clientX - container.offset().left) / _constants.REAL_ESTATE.width * 2 - 1;
			touchB.y = -((finger2.clientY - container.offset().top) / _constants.REAL_ESTATE.height) * 2 + 1;

			fingerDis = touchA.distanceTo(touchB);
			isEnlarge = (fingerDisOld - fingerDis).toFixed(2);
			if (Math.abs(isEnlarge) > 0) {
				scale(isEnlarge);
			}
			fingerDisOld = fingerDis;
		}

		// 查找最近值
		function findClosest(arr, num) {
			var ret = arr[0];
			var distance = Math.abs(ret - num);
			for (var i = 1; i < arr.length; i++) {
				var newDistance = Math.abs(arr[i] - num);
				if (newDistance < distance) {
					distance = newDistance;
					ret = arr[i];
				}
			}
			return ret;
		}

		// 判断数轴上是否有标识点，区间，增减线等；
		function isEditFn() {
			var isEdit = undefined;
			var markPoint = _threeManger.scene.getObjectByName("markPoint"); // 标识点
			var torus = _threeManger.scene.getObjectByName("torus"); // 增减线
			var section = _threeManger.scene.getObjectByName("section"); // 区间
			// TODO 交集并集
			if (markPoint || torus || section || _UtilsToolbarJs.toolbarStatus.startPoint) {
				isEdit = true;
			}
			return isEdit;
		}

		// 获取制定父元素 用于删除区间，增减线
		function getTopParent(obj) {
			if (obj.type == 'Scene') {
				return null;
			}
			while (obj.parent && obj.name !== 'section' && obj.name !== 'regulation') {
				if (obj.parent.name == 'section' || obj.parent.name == 'regulation') {
					obj = obj.parent;
					break;
				} else {
					obj = obj.parent;
					getTopParent(obj);
				}
			}
			// 通过递归后，有可能obj还会变成场影，还会进行删除
			if (obj.type == 'Scene') {
				return null;
			}
			return obj;
		}

		// 刷新删除后的各种状态
		function referState(obj) {
			if (obj.name != "regulation" && obj.name != "section") return;
			_UtilsToolbarJs.toolbarStatus.tempPoint = obj.outset.position.x;
			(0, _UtilsUpdatePointArray2['default'])(obj.outset, _UtilsToolbarJs.toolbarStatus, 'delete');
			_UtilsToolbarJs.toolbarStatus.tempPoint = obj.terminal.position.x;
			(0, _UtilsUpdatePointArray2['default'])(obj.terminal, _UtilsToolbarJs.toolbarStatus, 'delete');
			if (obj.name == "regulation") {
				_UtilsToolbarJs.toolbarStatus.lineColor.unshift(obj.color);
			}
			if (obj.name == "section") {
				var objData = {
					sectionColor: obj.data.sectionColor,
					sectionHeight: obj.data.endHeight,
					index: obj.data.index
				};
				_UtilsToolbarJs.toolbarStatus.sectionAttr.unshift(objData);
				(0, _UtilsUpdateSection2['default'])(obj.children[0], 0);
				deleteSectionPoint(obj);
			}

			(0, _UtilsRefreshSection2['default'])();
			var sections = (0, _UtilsGetSections2['default'])(_presenter2['default'].numberLine).sections;

			if (sections.length < 2) {
				$('.mix').addClass('click_disabled');
				$('.union').addClass('click_disabled');
				if ($('.mix').hasClass('click_btn_on')) {
					$('.mix').removeClass('click_btn_on');
				}
				if ($('.union').hasClass('click_btn_on')) {
					$('.union').removeClass('click_btn_on');
				}
				_UtilsToolbarJs.toolbarStatus.isShowIntersection = false;
				_UtilsToolbarJs.toolbarStatus.isShowUnion = false;
			}
		}

		function onWindowResize() {
			var container = $(_presenter2['default'].view).find('.tool_number_lines_area')[0];
			_constants.REAL_ESTATE.width = container.offsetWidth;
			_constants.REAL_ESTATE.height = container.offsetHeight;

			_threeManger.camera.left = _constants.REAL_ESTATE.width / -2;
			_threeManger.camera.right = _constants.REAL_ESTATE.width / 2;
			_threeManger.camera.top = _constants.REAL_ESTATE.height / 2;
			_threeManger.camera.bottom = _constants.REAL_ESTATE.height / -2;
			_threeManger.camera.updateProjectionMatrix();

			_threeManger.renderer.setSize(_constants.REAL_ESTATE.width, _constants.REAL_ESTATE.height);
			_presenter2['default'].renderer();
		}
		setTimeout(function () {
			if ($(_presenter2['default'].view).find('.operation_tips_box').length) {
				var h = $(_presenter2['default'].view).find('.tool_number_lines_tools').height();
				$(_presenter2['default'].view).find('.textbox_scale').css('bottom', h);
				$(_presenter2['default'].view).find('.operation_tips_box').css('display', 'inline-block');
				$(_presenter2['default'].view).find('.textbox').one('click', function (e) {
					$(this).hide();
				});
			}
			onWindowResize();
		}, 250);

		// 删除区间端点数组中已删除的区间端点
		function deleteSectionPoint(obj) {
			var startPoint = obj.getObjectByName('startPoint');
			var endPoint = obj.getObjectByName('endPoint');
			var point = undefined;
			for (var i = 0; i < _UtilsToolbarJs.toolbarStatus.referInterval.length; i++) {
				point = _UtilsToolbarJs.toolbarStatus.referInterval[i];
				if (startPoint.id == point.id) {
					_UtilsToolbarJs.toolbarStatus.referInterval.splice(i, 1);
				}
			}
			for (var i = 0; i < _UtilsToolbarJs.toolbarStatus.referInterval.length; i++) {
				point = _UtilsToolbarJs.toolbarStatus.referInterval[i];
				if (endPoint.id == point.id) {
					_UtilsToolbarJs.toolbarStatus.referInterval.splice(i, 1);
				}
			}
		}

		// 判断新增的区间端点是否在已有的点上
		function hasSectionPoint(pointX, lineWidth) {
			var points = _UtilsToolbarJs.toolbarStatus.referInterval;
			for (var i = 0; i < points.length; i++) {
				if (pointX + 3 * lineWidth > points[i].position.x && pointX - 3 * lineWidth < points[i].position.x) {
					return true;
				}
			}
			return false;
		}
		exports.checkButtonState = checkButtonState = function () {
			// 清空，删除按钮状态切换
			var isEdit = isEditFn();
			if (isEdit) {
				$(_presenter2['default'].view).find('.clear_all').removeClass("click_disabled");
				$(_presenter2['default'].view).find('.clean').removeClass("click_disabled");
			} else {
				$(_presenter2['default'].view).find('.clear_all').addClass("click_disabled").removeClass("click_btn_on");
				$(_presenter2['default'].view).find('.clean').addClass("click_disabled").removeClass("click_btn_on");
			}
		};

		function detechDocumentEvent() {
			rendererDom.removeEventListener('mousedown', onDocumentMousedown, false);
			rendererDom.removeEventListener('touchstart', onDocumentMousedown, false);
			rendererDom.removeEventListener('mousewheel', scale, false);

			window.removeEventListener('resize', onWindowResize, false);
		}
		exports.removeEvent = removeEvent = detechDocumentEvent;
		_presenter2['default'].renderer();
	};

	exports.removeEvent = removeEvent;
	exports.checkButtonState = checkButtonState;

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _updateVertices = __webpack_require__(7);

	var _updateVertices2 = _interopRequireDefault(_updateVertices);

	var _updateUnit = __webpack_require__(11);

	var _updateUnit2 = _interopRequireDefault(_updateUnit);

	exports['default'] = function (type, shape, touchShape) {
	  var controllerDis = undefined,
	      pointA = undefined,
	      pointB = undefined,
	      line = undefined,
	      unitMultiple = undefined,
	      unitLength = undefined,
	      lineWidth = undefined,
	      arrow = undefined;
	  line = shape.getObjectByName('line');
	  arrow = shape.getObjectByName('arrow');
	  pointA = shape.data.pointA;
	  pointB = shape.data.pointB;
	  controllerDis = shape.data.controllerDis;
	  unitMultiple = shape.data.unitMultiple;
	  unitLength = shape.data.unitLength;
	  lineWidth = shape.data.lineWidth;
	  if (type === 'controllerRight') {
	    pointB = new THREE.Vector3(touchShape.position.x - controllerDis, pointB.y, pointB.z);
	    shape.data.pointB = pointB;
	    arrow.position.copy(pointB);
	  } else if (type === 'controllerLeft') {
	    pointA = new THREE.Vector3(touchShape.position.x + controllerDis, pointA.y, pointA.z);
	    shape.data.pointA = pointA;
	  }
	  var point = new THREE.Vector3();
	  point.x = pointA.x - 3;
	  point.y = pointA.y;
	  point.z = pointA.z;
	  (0, _updateVertices2['default'])(line, point, pointB, lineWidth);
	  (0, _updateVertices2['default'])(shape, point, pointB, lineWidth * 5);
	  (0, _updateUnit2['default'])(shape, pointA, pointB, unitMultiple, unitLength, lineWidth);
	};

	module.exports = exports['default'];

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _threeManger = __webpack_require__(16);

	var _addText = __webpack_require__(10);

	var _addText2 = _interopRequireDefault(_addText);

	var _rotateAngle = __webpack_require__(8);

	var _calculatMethodJs = __webpack_require__(26);

	var _addArrowJs = __webpack_require__(27);

	var _addArrowJs2 = _interopRequireDefault(_addArrowJs);

	var _addDotJs = __webpack_require__(28);

	var _addDotJs2 = _interopRequireDefault(_addDotJs);

	var _destroyThreeObjectJs = __webpack_require__(29);

	var _destroyThreeObjectJs2 = _interopRequireDefault(_destroyThreeObjectJs);

	var _constants = __webpack_require__(17);

	var _autoDetectRender = __webpack_require__(18);

	var _default = (function () {
		function _default(toolbar, originPoint, unitLength, unitMultiple) {
			var lineWidth = arguments.length <= 4 || arguments[4] === undefined ? 4 : arguments[4];

			_classCallCheck(this, _default);

			this.curve = new THREE.Object3D();
			this.curve.outset = toolbar.startPoint;
			this.curve.terminal = toolbar.endPoint;
			this.curve.startPoint = toolbar.startPoint.position;
			this.curve.endPoint = toolbar.endPoint.position;
			this.curve.bottom = toolbar.startPoint.userData.radius + 5;
			this.curve.color = toolbar.startPoint.userData.color;
			this.curve.lineWidth = lineWidth;
			this.curve.unitLength = unitLength;
			this.curve.unitMultiple = unitMultiple;
			this.curve.draw = _constants.isWeb && _autoDetectRender.isWebGLRenderer || _constants.TeacherPc && _autoDetectRender.isWebGLRenderer ? this.draw : this.drawArc;
			this.curve.update = _constants.isWeb || _constants.TeacherPc || _autoDetectRender.isWebGLRenderer ? this.update : this.updateArc;
			this.curve.revertArrow = this.revertArrow;
			this.curve.clear = this.clear;
			this.curve.destroy = this.destroy;
			this.curve.draw();

			return this.curve;
		}

		_createClass(_default, [{
			key: 'drawArc',
			value: function drawArc(type) {
				var crossArrow = this.getObjectByName('crossArrow'),
				    b = this.endPoint.x > this.startPoint.x,
				    centerPoint = new THREE.Vector2((this.endPoint.x + this.startPoint.x) / 2, (this.endPoint.x - this.startPoint.x) / 2),
				    radian = new THREE.QuadraticBezierCurve(this.startPoint, centerPoint, this.endPoint),
				    points = radian.getSpacedPoints(20),
				    limitPoint = radian.getPoint(.5),
				    count = (b ? '+' : '') + ((this.endPoint.x * 1000 - this.startPoint.x * 1000) / this.unitLength.toFixed(10) / 1000).toFixed(1);

				if (type) {
					var distanceText = this.getObjectByName('distance'),
					    outsetText = this.getObjectByName('outset').getObjectByName('positionText'),
					    terminalText = this.getObjectByName('terminal').getObjectByName('positionText');
					crossArrow.position.x = this.endPoint.x;
					if (b != crossArrow.userData.up) {
						crossArrow.position.y *= -1;
						crossArrow.rotation.z == Math.PI ? crossArrow.rotation.set(0, 0, 0) : crossArrow.rotation.set(0, 0, Math.PI);
						crossArrow.userData.up = b;
					}
					distanceText.position.x = limitPoint.x;
					distanceText.position.y = b ? limitPoint.y + 32 : limitPoint.y - 32;
					distanceText._dynamicTexture.clear().drawText(count, undefined, 24);
					if (outsetText) {

						var num = (this.startPoint.x / this.unitLength).toFixed(1),
						    num2 = (this.endPoint.x / this.unitLength).toFixed(1);
						if (Math.abs(num % this.unitMultiple) < 0.1) {
							outsetText.visible = false;
						} else {
							outsetText._dynamicTexture.clear().drawText(num, undefined, 24);
							outsetText.visible = true;
						}

						if (Math.abs(num2 % this.unitMultiple) < 0.1) {
							terminalText.visible = false;
						} else {
							terminalText._dynamicTexture.clear().drawText(num2, undefined, 24);
							terminalText.visible = true;
						}
					}

					var _torus = this.getObjectByName('torus');
					var _geometry = _torus.geometry;
					for (var i = 0; i < points.length; i++) {
						var tempVector = new THREE.Vector3();
						tempVector.x = points[i].x;
						tempVector.y = points[i].y;
						tempVector.z = 0;
						_geometry.vertices[i] = tempVector;
					}
					_torus.position.y = b ? this.bottom : -this.bottom;

					_geometry.verticesNeedUpdate = true;
					_geometry.computeBoundingSphere();

					return;
				}
				if (crossArrow) {
					var distanceText = this.getObjectByName('distance'),
					    outsetText = this.getObjectByName('outset').getObjectByName('positionText'),
					    terminalText = this.getObjectByName('terminal').getObjectByName('positionText');
					crossArrow.position.x = this.endPoint.x;
					if (b != crossArrow.userData.up) {
						crossArrow.position.y *= -1;
						crossArrow.rotation.z == Math.PI ? crossArrow.rotation.set(0, 0, 0) : crossArrow.rotation.set(0, 0, Math.PI);
						crossArrow.userData.up = b;
					}
					distanceText.position.x = limitPoint.x;
					distanceText.position.y = b ? limitPoint.y + 32 : limitPoint.y - 32;
					distanceText._dynamicTexture.clear().drawText(count, undefined, 24);
					distanceText.position.z = 0.9;
					if (outsetText) {
						var num = (this.startPoint.x / this.unitLength).toFixed(1),
						    num2 = (this.endPoint.x / this.unitLength).toFixed(1);
						if (Math.abs(num * 10 % (this.unitMultiple * 10)) < 1) {
							outsetText.visible = false;
						} else {
							outsetText._dynamicTexture.clear().drawText(num, undefined, 24);
							outsetText.visible = true;
						}

						if (Math.abs(num2 * 10 % (this.unitMultiple * 10)) < 1) {
							terminalText.visible = false;
						} else {
							terminalText._dynamicTexture.clear().drawText(num2, undefined, 24);
							terminalText.visible = true;
						}
					}
				} else {
					var arrow = (0, _addArrowJs2['default'])(this.endPoint, this.lineWidth, this.color, b);
					arrow.position.y = b ? this.bottom : -this.bottom;
					this.add(arrow);
					var text = (0, _addText2['default'])(count, limitPoint, 128, 32, '24px', 'white');
					text.name = 'distance';
					b ? text.position.y += 30 : text.position.y -= 34;
					text.position.z = 0.9;
					this.add(text);
				}
				var path = new THREE.Path();
				var geometry = path.createGeometry(points);
				var material = new THREE.LineBasicMaterial({
					color: this.color,
					linewidth: this.lineWidth,
					overdraw: true,
					transparent: false,
					opacity: 1
				});
				var torus = new THREE.Line(geometry, material);
				torus.name = 'torus';
				// torus.position.x = centerPoint.x;
				torus.position.y = b ? this.bottom : -this.bottom;
				// let angle = b ? (Math.PI-Math.abs(rotation.angle))/2 : Math.PI+(Math.PI-Math.abs(rotation.angle))/2
				// torus.rotation.set(0,0, angle);

				this.add(torus);
				this.name = 'regulation';
			}
		}, {
			key: 'draw',
			value: function draw() {
				var crossArrow = this.getObjectByName('crossArrow'),
				    b = this.endPoint.x > this.startPoint.x,
				    centerPoint = new THREE.Vector2((this.endPoint.x + this.startPoint.x) / 2, (this.endPoint.x - this.startPoint.x) / 2),
				    radian = new THREE.QuadraticBezierCurve(this.startPoint, centerPoint, this.endPoint),
				    limitPoint = radian.getPoint(.5),
				    x = limitPoint.x,
				    y = b ? -Math.abs(((limitPoint.x - this.startPoint.x) * (limitPoint.x - this.startPoint.x) - limitPoint.y * limitPoint.y) / (2 * limitPoint.y)) : Math.abs(((limitPoint.x - this.startPoint.x) * (limitPoint.x - this.startPoint.x) - limitPoint.y * limitPoint.y) / (2 * limitPoint.y)),
				    point = new THREE.Vector2(x, y),
				    radius = new THREE.Vector2().subVectors(point, limitPoint).length(),
				    count = (b ? '+' : '') + ((this.endPoint.x * 1000 - this.startPoint.x * 1000) / this.unitLength.toFixed(10) / 1000).toFixed(1);

				if (crossArrow) {
					var distanceText = this.getObjectByName('distance'),
					    outsetText = this.getObjectByName('outset').getObjectByName('positionText'),
					    terminalText = this.getObjectByName('terminal').getObjectByName('positionText');
					crossArrow.position.x = this.endPoint.x;
					if (b != crossArrow.userData.up) {
						crossArrow.position.y *= -1;
						crossArrow.rotation.z == Math.PI ? crossArrow.rotation.set(0, 0, 0) : crossArrow.rotation.set(0, 0, Math.PI);
						crossArrow.userData.up = b;
					}
					distanceText.position.x = limitPoint.x;
					distanceText.position.y = b ? limitPoint.y + 32 : limitPoint.y - 32;
					distanceText._dynamicTexture.clear().drawText(count, undefined, 24);
					distanceText.position.z = 0.9;
					if (outsetText) {
						var num = (this.startPoint.x / this.unitLength).toFixed(1),
						    num2 = (this.endPoint.x / this.unitLength).toFixed(1);
						if (Math.abs(num * 10 % (this.unitMultiple * 10)) < 1) {
							outsetText.visible = false;
						} else {
							outsetText._dynamicTexture.clear().drawText(num, undefined, 24);
							outsetText.visible = true;
						}

						if (Math.abs(num2 * 10 % (this.unitMultiple * 10)) < 1) {
							terminalText.visible = false;
						} else {
							terminalText._dynamicTexture.clear().drawText(num2, undefined, 24);
							terminalText.visible = true;
						}
					}
				} else {
					var arrow = (0, _addArrowJs2['default'])(this.endPoint, this.lineWidth, this.color, b);
					arrow.position.y = b ? this.bottom : -this.bottom;
					this.add(arrow);
					var text = (0, _addText2['default'])(count, limitPoint, 128, 32, '24px', 'white');
					text.name = 'distance';
					b ? text.position.y += 30 : text.position.y -= 34;
					text.position.z = 0.9;
					this.add(text);
				}

				var rotation = (0, _rotateAngle.getAngle)(this.startPoint, point, this.endPoint);
				var geometry = new THREE.TorusGeometry(radius, this.lineWidth / 2, 80, 50, rotation.angle);
				var material = new THREE.MeshBasicMaterial({
					color: this.color,
					overdraw: true,
					transparent: false,
					opacity: 1
				});
				var torus = new THREE.Mesh(geometry, material);
				torus.name = 'torus';
				torus.position.x = point.x;
				torus.position.y = b ? point.y += this.bottom : point.y -= this.bottom;
				var angle = b ? (Math.PI - Math.abs(rotation.angle)) / 2 : Math.PI + (Math.PI - Math.abs(rotation.angle)) / 2;
				torus.rotation.set(0, 0, angle);

				this.add(torus);
				this.name = 'regulation';
			}
		}, {
			key: 'update',
			value: function update() {
				var torusObject = this.getObjectByName('torus');
				this.torusPosition = torusObject.position;
				this.remove(torusObject);
				(0, _destroyThreeObjectJs2['default'])(torusObject);
				this.draw();
			}
		}, {
			key: 'updateArc',
			value: function updateArc() {
				this.draw(true);
			}
		}, {
			key: 'clear',
			value: function clear(object) {
				var length = object.children.length;

				for (var i = 0; i < length; i++) {
					object.remove(object.children[0]);
					(0, _destroyThreeObjectJs2['default'])(object.children[0]);
				}
			}
		}]);

		return _default;
	})();

	exports['default'] = _default;
	module.exports = exports['default'];

/***/ },
/* 26 */
/***/ function(module, exports) {

	/**
	 * Created by Administrator on 2015/12/23.
	 */

	/*
	 * 参数是圆上任意三点坐标
	 */
	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.calculatCircleCenter = calculatCircleCenter;
	exports.intersectionSection = intersectionSection;
	exports.unionSection = unionSection;
	exports.creatSection = creatSection;

	function calculatCircleCenter(pointB, pointA, pointC) {

	    var vectorAB = new THREE.Vector2().subVectors(pointA, pointB),
	        vectorAC = new THREE.Vector2().subVectors(pointA, pointC),
	        vectorBC = new THREE.Vector2().subVectors(pointB, pointC);

	    var sumAB = new THREE.Vector2().addVectors(pointA, pointB),
	        sumAC = new THREE.Vector2().addVectors(pointA, pointC),
	        sumBC = new THREE.Vector2().addVectors(pointB, pointC);

	    var middleAB = new THREE.Vector2(sumAB.x / 2, sumAB.y / 2),
	        middleAC = new THREE.Vector2(sumAC.x / 2, sumAC.y / 2),
	        middleBC = new THREE.Vector2(sumBC.x / 2, sumBC.y / 2);

	    var vectorUse1 = undefined,
	        vectorUse2 = undefined;
	    var circleX = undefined,
	        circleY = undefined;

	    var divisor = vectorAC.x * (middleAB.y * vectorAB.y + middleAB.x * vectorAB.x) - vectorAB.x * (middleAC.y * vectorAC.y + middleAC.x * vectorAC.x);
	    var dividend = vectorAB.y * vectorAC.x - vectorAB.x * vectorAC.y;
	    circleY = divisor / dividend;
	    circleX = (middleAB.y * vectorAB.y + middleAB.x * vectorAB.x - vectorAB.y * circleY) / vectorAB.x;

	    var radiusSqurts = Math.pow(circleX - pointA.x, 2) + Math.pow(circleY - pointA.y, 2),
	        radiusLen = Math.sqrt(radiusSqurts);

	    var circle = new THREE.Vector2(circleX, circleY);

	    return {
	        centerPoint: circle,
	        radius: radiusLen
	    };
	}

	/*
	 *  求交集区间
	 *  @param sectionGroup 区间的数组
	 *  @param curSection 返回交集
	 */

	function intersectionSection(sectionsGroup) {

	    var sectionGroup = sectionGroupSort(sectionsGroup);

	    var curSection = sectionGroup[0];

	    if (sectionGroup.length == 1) return null;

	    for (var i = 1; i < sectionGroup.length; i++) {

	        var curLeftPotX = curSection.leftPoint.x,
	            curRightPotX = curSection.rightPoint.x;

	        //获得下一个区间点的坐标
	        var nextSection = sectionGroup[i];
	        var nextLeftPotX = nextSection.leftPoint.x,
	            nextRightPotX = nextSection.rightPoint.x;

	        if (nextLeftPotX > curRightPotX || nextRightPotX < curLeftPotX) {
	            return null;
	        } else if (curLeftPotX <= nextLeftPotX && nextLeftPotX <= curRightPotX) {
	            //next左端点在cur内

	            var newLeftPoint = nextSection.leftPoint,
	                newLeftIsSolid = nextSection.leftIsSolid;

	            //下一个区间左端点在两端点上
	            if (nextLeftPotX == curLeftPotX) {
	                //下个区间的左端点和当前区间左端点重合
	                if (!curSection.leftIsSolid) {
	                    newLeftPoint = curSection.leftPoint;
	                    newLeftIsSolid = curSection.leftIsSolid;
	                }
	            } else if (nextLeftPotX == curRightPotX) {
	                //下个区间的左端点和当前区间右端点重合

	                if (curSection.rightIsSolid && nextSection.leftIsSolid) {
	                    newLeftPoint = nextSection.leftPoint;
	                    newLeftIsSolid = nextSection.leftIsSolid;
	                } else {

	                    return null;
	                }
	            }

	            curSection.leftPoint = newLeftPoint;
	            curSection.leftIsSolid = newLeftIsSolid;

	            if (nextRightPotX == curRightPotX) {

	                if (curSection.rightIsSolid) {
	                    curSection.rightPoint = nextSection.rightPoint;
	                    curSection.rightIsSolid = nextSection.rightIsSolid;
	                }
	            } else if (nextRightPotX < curRightPotX) {
	                //next右端点也在cur内
	                curSection.rightPoint = nextSection.rightPoint;
	                curSection.rightIsSolid = nextSection.rightIsSolid;
	            }
	        } else {
	            //next左端点在cur左端点左边

	            //下一个区间左端点在两端点上
	            if (nextRightPotX == curRightPotX) {
	                //下个区间的右端点和当前区间左端点重合
	                if (!nextSection.rightIsSolid) {
	                    curSection.rightPoint = nextSection.rightPoint;
	                    curSection.rightIsSolid = nextSection.rightIsSolid;
	                }
	            } else if (nextRightPotX == curLeftPotX) {
	                //下个区间的右端点和当前区间左端点重合

	                if (curSection.rightIsSolid && nextSection.leftIsSolid) {
	                    curSection.rightPoint = nextSection.rightPoint;
	                    curSection.rightIsSolid = nextSection.rightIsSolid;
	                } else {
	                    return null;
	                }
	            } else if (curLeftPotX < nextRightPotX < curRightPotX) {
	                curSection.rightPoint = nextSection.rightPoint;
	                curSection.rightIsSolid = nextSection.rightIsSolid;
	            }
	        }
	    }

	    if (curSection.leftPoint.x == curSection.rightPoint.x) {
	        if (curSection.leftIsSolid != curSection.rightIsSolid) {
	            return null;
	        }
	    }

	    return curSection;
	}

	/*
	 *  求并集区间
	 *  @param sectionGroup 区间的数组
	 *  返回区间的集合数组
	 */

	function unionSection(sectionsGroup) {

	    var sectionGroup = sectionGroupSort(sectionsGroup);
	    var firstSection = sectionGroup[0];
	    var unionGroup = [firstSection];
	    if (sectionGroup.length == 1) return null;

	    for (var i = 1; i < sectionGroup.length; i++) {

	        //获得下一个区间点的坐标
	        var nextSection = sectionGroup[i];
	        //let nextLeftPotX = nextSection.leftPoint.x,
	        //    nextRightPotX = nextSection.rightPoint.x;

	        var rightPotInSection = undefined,
	            //右端点所在的区间
	        mergerSection = undefined,
	            //创建合并后新的集合
	        deleLength = undefined;

	        var leftPotIndex = undefined,
	            rightPotIndex = undefined,
	            rightPointObj = undefined;

	        //判断下一个区间左端点是否在当前区间内
	        var leftPointObj = pointInSectionIndex(nextSection.leftPoint, unionGroup, 0, nextSection.leftIsSolid);

	        //判断点重合，并且重合点都为空心
	        if (leftPointObj.inSection) {
	            if (leftPointObj.inSectionIndex == -100 && leftPointObj.rightBothHollow) {
	                //和端点重合并且都是空心
	                leftPointObj.inSection = false;
	                leftPointObj.fromSectionIndex = leftPointObj.realIndex;
	                leftPointObj.toSectionIndex = leftPointObj.realIndex + 1;
	            }
	        }

	        if (leftPointObj.inSection) {
	            //区间左端点在集合内

	            //左端点所在区间的索引
	            leftPotIndex = leftPointObj.inSectionIndex == -100 ? leftPointObj.realIndex : leftPointObj.inSectionIndex;

	            //左端点所在的区间
	            var leftPotInSection = unionGroup[leftPotIndex];

	            //判断当前左端点是否和所在集合端点重合，确定端点实空心的状态
	            changePointStatus(unionGroup, leftPotIndex, nextSection.leftPoint, nextSection.leftIsSolid);

	            //判断下一个区间右端点是否在当前区间内
	            rightPointObj = pointInSectionIndex(nextSection.rightPoint, unionGroup, leftPotIndex, nextSection.rightIsSolid);

	            if (rightPointObj.inSection) {
	                if (rightPointObj.inSectionIndex == -100 && rightPointObj.leftBothHollow) {
	                    //和端点重合并且都是空心
	                    rightPointObj.inSection = false;
	                    rightPointObj.fromSectionIndex = leftPointObj.realIndex - 1;
	                    rightPointObj.toSectionIndex = leftPointObj.realIndex;
	                }
	            }

	            if (rightPointObj.inSection) {
	                //区间右端点在集合内

	                //右端点所在区间的索引
	                rightPotIndex = rightPointObj.inSectionIndex == -100 ? rightPointObj.realIndex : rightPointObj.inSectionIndex;
	                changePointStatus(unionGroup, rightPotIndex, nextSection.rightPoint, nextSection.rightIsSolid);

	                //右端点所在的区间
	                rightPotInSection = unionGroup[rightPotIndex];

	                if (rightPotIndex == leftPointObj.inSectionIndex) {//区间两点都在同个区间内

	                } else {

	                        //创建合并后新的集合
	                        mergerSection = creatSection(leftPotInSection.leftPoint, leftPotInSection.leftIsSolid, rightPotInSection.rightPoint, rightPotInSection.rightIsSolid);

	                        deleLength = rightPotIndex - leftPotIndex + 1; //要删除的索引的长度
	                        //删除连接的，插入新的集合
	                        unionGroup.splice(leftPotIndex, deleLength + 1, mergerSection);
	                    }
	            } else {
	                //右端点不在集合内

	                //rightPotInSection = unionGroup[rightPotIndex];
	                //创建合并后新的集合
	                mergerSection = creatSection(leftPotInSection.leftPoint, leftPotInSection.leftIsSolid, nextSection.rightPoint, nextSection.rightIsSolid);

	                deleLength = rightPointObj.fromSectionIndex - leftPotIndex + 1;
	                //删除连接的，插入新的集合
	                unionGroup.splice(leftPotIndex, deleLength, mergerSection);
	            }
	        } else {
	            //左端点不在区域内

	            var leftPotBetweenIndex = leftPointObj.fromSectionIndex; //左端点左边区间的索引
	            var leftPotAndIndex = leftPointObj.toSectionIndex; //左端点右边区间的索引

	            rightPointObj = pointInSectionIndex(nextSection.rightPoint, unionGroup, leftPotBetweenIndex, nextSection.rightIsSolid);

	            if (rightPointObj.inSection) {
	                //右端点在集合内

	                rightPotIndex = rightPointObj.inSectionIndex; //右端点所在区间的索引
	                changePointStatus(unionGroup, rightPotIndex, nextSection.rightPoint, nextSection.rightIsSolid);

	                //右端点所在的区间
	                rightPotInSection = unionGroup[rightPotIndex];

	                //创建合并后新的集合
	                mergerSection = creatSection(nextSection.leftPoint, nextSection.leftIsSolid, rightPotInSection.rightPoint, rightPotInSection.rightIsSolid);

	                deleLength = rightPointObj.inSectionIndex - leftPotBetweenIndex + 1;
	                //删除连接的，插入新的集合
	                unionGroup.splice(leftPotBetweenIndex, deleLength, mergerSection);
	            } else {

	                var rightPotBetweenIndex = rightPointObj.fromSectionIndex; //右端点左边区间的索引
	                var rightPotAndIndex = rightPointObj.toSectionIndex; //右端点右边区间的索引

	                deleLength = rightPointObj.fromSectionIndex - leftPotAndIndex + 1;

	                if (rightPotAndIndex == 0 || leftPotBetweenIndex == unionGroup.length) deleLength = 0;

	                var startIndex = undefined;
	                if (leftPotBetweenIndex == unionGroup.length) {
	                    startIndex = unionGroup.length;
	                } else {
	                    startIndex = leftPotAndIndex;
	                }

	                //删除连接的，插入新的集合
	                unionGroup.splice(leftPotAndIndex, deleLength, nextSection);
	            }
	        }
	    }
	    return unionGroup;
	}

	/*
	 *  点重合情况下修改点的状态
	 */
	function changePointStatus(unionGroup, index, point, isSolid) {

	    //所在的集合
	    var inSection = unionGroup[index];
	    if (point.x == inSection.leftPoint.x) {
	        //和左端点重合
	        if (isSolid) {
	            unionGroup[index].leftIsSolid = isSolid;
	        }
	    } else if (point.x == inSection.rightPoint.x) {
	        if (isSolid) {
	            unionGroup[index].rightIsSolid = isSolid;
	        }
	    }
	}

	/*
	 *  区间排序
	 */
	function sectionGroupSort(sectionsGroup) {

	    var tempLeftPotXGroup = [],
	        sectionGroup = [],
	        tempSection = [];

	    for (var i = 0; i < sectionsGroup.length; i++) {
	        var temObj = creatSection(sectionsGroup[i].leftPoint, sectionsGroup[i].leftIsSolid, sectionsGroup[i].rightPoint, sectionsGroup[i].rightIsSolid);
	        sectionGroup.push(temObj);

	        var section = creatSection(sectionsGroup[i].leftPoint, sectionsGroup[i].leftIsSolid, sectionsGroup[i].rightPoint, sectionsGroup[i].rightIsSolid);
	        tempLeftPotXGroup.push(section.leftPoint.x);
	    }

	    //tempLeftPotXGroup从小到大排序
	    tempLeftPotXGroup.sort(function (a, b) {
	        return a - b;
	    });

	    //将section的数据排序好放到tempSection数组中
	    for (var i = 0; i < tempLeftPotXGroup.length; i++) {
	        var leftPotX = tempLeftPotXGroup[i];
	        for (var j = 0; j < sectionGroup.length; j++) {
	            var section = sectionGroup[j];

	            if (section.leftPoint.x === leftPotX) {
	                tempSection.push(section);

	                //移除已经放入临时数组的集合，减少遍历次数
	                var index = sectionGroup.indexOf(section);
	                sectionGroup.splice(index, 1);
	                break;
	            }
	        }
	    }

	    //将排序好的区间数组重新赋值给传入的区间数组sectionGroup
	    return tempSection;
	}

	/*
	 *  点是否在区间内的索引
	 *  @param point 判断的点
	 *  @param sectionGroup 排序好的区间数组
	 *  @param index 开始索引的位置
	 */
	function pointInSectionIndex(point, sectionGroup, startIndex, pointStatus) {

	    for (var i = startIndex; i < sectionGroup.length; i++) {
	        var section = sectionGroup[i];

	        if (i == 0) {
	            //点在最小的集合左边
	            if (point.x < section.leftPoint.x) {
	                return {
	                    inSection: false,
	                    fromSectionIndex: -1,
	                    toSectionIndex: 0
	                };
	            }
	        }

	        if (section.leftPoint.x <= point.x && point.x <= section.rightPoint.x) {
	            //在区间内

	            if (point.x == section.leftPoint.x) {
	                if (pointStatus == false && section.leftIsSolid == false) {
	                    //与左端点重合 都为空心
	                    return {
	                        inSection: true,
	                        inSectionIndex: -100,
	                        realIndex: i,
	                        leftBothHollow: true,
	                        rightBothHollow: false
	                    };
	                }
	            } else if (point.x == section.rightPoint.x) {
	                if (pointStatus == false && section.rightIsSolid == false) {
	                    return {
	                        inSection: true,
	                        inSectionIndex: -100,
	                        realIndex: i,
	                        leftBothHollow: false,
	                        rightBothHollow: true
	                    };
	                }
	            }

	            return {
	                inSection: true,
	                inSectionIndex: i
	            };
	        }

	        if (i == sectionGroup.length - 1) {
	            //点在最大集合右边
	            if (point.x > section.rightPoint.x) {
	                return {
	                    inSection: false,
	                    fromSectionIndex: sectionGroup.length - 1,
	                    toSectionIndex: sectionGroup.length
	                };
	            }
	        }

	        var nextSection = sectionGroup[i + 1];
	        if (section.rightPoint.x < point.x && point.x < nextSection.leftPoint.x) {
	            //不在区间内，在两个区间的间隔中
	            return {
	                inSection: false,
	                fromSectionIndex: i,
	                toSectionIndex: i + 1
	            };
	        }
	    }
	}

	/*
	 *  创建区间的对象
	 */

	function creatSection(leftPoint, leftIsSolid, rightPoint, rightIsSolid) {

	    if (leftPoint.x <= rightPoint.x) {

	        return {
	            leftPoint: leftPoint,
	            leftIsSolid: leftIsSolid,
	            rightPoint: rightPoint,
	            rightIsSolid: rightIsSolid
	        };
	    } else {

	        return {
	            leftPoint: rightPoint,
	            leftIsSolid: rightIsSolid,
	            rightPoint: leftPoint,
	            rightIsSolid: leftIsSolid
	        };
	    }
	}

/***/ },
/* 27 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	exports['default'] = function (point, lineWidth, color, up) {
		var arrow = new THREE.Object3D(),
		    verticalSide = new THREE.Shape(),
		    horizonalSide = new THREE.Shape(),
		    lineHeight = lineWidth * 3,
		    verticalGeometry = undefined,
		    horizonalGeometry = undefined,
		    material = new THREE.MeshBasicMaterial({
			color: color,
			transparent: false
		}),
		    verticalMesh = undefined,
		    horizonalMesh = undefined;

		if (up) {
			verticalSide.moveTo(-lineWidth / 2, 0);
			verticalSide.lineTo(-lineWidth / 2, lineHeight);
			verticalSide.lineTo(+lineWidth / 2, lineHeight);
			verticalSide.lineTo(+lineWidth / 2, 0);
			verticalSide.lineTo(-lineWidth / 2, 0);

			horizonalSide.moveTo(-lineHeight + lineWidth / 2, -lineWidth / 2);
			horizonalSide.lineTo(-lineHeight + lineWidth / 2, lineWidth / 2);
			horizonalSide.lineTo(+lineWidth / 2, lineWidth / 2);
			horizonalSide.lineTo(+lineWidth / 2, -lineWidth / 2);
			horizonalSide.lineTo(-lineHeight + lineWidth / 2, -lineWidth / 2);
		} else {
			verticalSide.moveTo(-lineWidth / 2, 0);
			verticalSide.lineTo(-lineWidth / 2, -lineHeight);
			verticalSide.lineTo(+lineWidth / 2, -lineHeight);
			verticalSide.lineTo(+lineWidth / 2, 0);
			verticalSide.lineTo(-lineWidth / 2, 0);

			horizonalSide.moveTo(+lineHeight - lineWidth / 2, -lineWidth / 2);
			horizonalSide.lineTo(+lineHeight - lineWidth / 2, lineWidth / 2);
			horizonalSide.lineTo(-lineWidth / 2, lineWidth / 2);
			horizonalSide.lineTo(-lineWidth / 2, -lineWidth / 2);
			horizonalSide.lineTo(+lineHeight - lineWidth / 2, -lineWidth / 2);
		}

		verticalGeometry = new THREE.ShapeGeometry(verticalSide);
		horizonalGeometry = new THREE.ShapeGeometry(horizonalSide);

		verticalMesh = new THREE.Mesh(verticalGeometry, material);
		horizonalMesh = new THREE.Mesh(horizonalGeometry, material);
		verticalMesh.name = 'tinyArrow';
		horizonalMesh.name = 'tinyArrow';
		arrow.add(verticalMesh);
		arrow.add(horizonalMesh);
		arrow.position.x = point.x;
		arrow.position.y = point.y;
		arrow.position.y = 0.8;
		arrow.name = 'crossArrow';
		arrow.userData.up = up;
		return arrow;
	};

	module.exports = exports['default'];

/***/ },
/* 28 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	exports['default'] = function (point, lineWidth, color) {
		var radius = lineWidth * 2,
		    segments = 64,
		    material = new THREE.MeshBasicMaterial({
			color: color,
			overdraw: true,
			transparent: false,
			opacity: 1
		}),
		    geometry = new THREE.CircleGeometry(radius, segments),
		    circle = new THREE.Mesh(geometry, material);

		circle.position.x = point.x;
		circle.position.y = point.y;

		circle.name = 'outset';
		return circle;
	};

	module.exports = exports['default'];

/***/ },
/* 29 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports["default"] = destroyThreeObject;

	function destroyThreeObject(object) {
	    "use strict";
	    if (!object) return;

	    if (object.children && object.children.length > 0) {
	        for (var i = 0; i < object.children.length; i++) {
	            destroyThreeObject(object.children[i]);
	        }
	    }
	    if (object.name.indexOf('ext') > -1) {
	        object._dynamicTexture = null;
	    }
	    if (object.geometry) {
	        object.geometry.dispose();
	    }
	    if (object.material) {
	        object.material.dispose();
	        if (object.material.map && object.material.map.dispose) {
	            object.material.map.dispose();
	        }
	    }
	    object = null;
	}

	module.exports = exports["default"];

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});
	exports.destoryToolbar = destoryToolbar;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _presenter = __webpack_require__(1);

	var _presenter2 = _interopRequireDefault(_presenter);

	var _threeManger = __webpack_require__(16);

	var _EventDocumentEvent = __webpack_require__(23);

	var _UtilsDialog = __webpack_require__(20);

	var _UtilsDialog2 = _interopRequireDefault(_UtilsDialog);

	var _getSections = __webpack_require__(31);

	var _getSections2 = _interopRequireDefault(_getSections);

	var _EventUnitSelect = __webpack_require__(32);

	var _EventUnitSelect2 = _interopRequireDefault(_EventUnitSelect);

	var _updateIntersection = __webpack_require__(33);

	var _updateIntersection2 = _interopRequireDefault(_updateIntersection);

	var _updateUnion = __webpack_require__(39);

	var _updateUnion2 = _interopRequireDefault(_updateUnion);

	var _refreshSection = __webpack_require__(41);

	var _refreshSection2 = _interopRequireDefault(_refreshSection);

	var _isShowUnitController = __webpack_require__(42);

	var _isShowUnitController2 = _interopRequireDefault(_isShowUnitController);

	var _setZPosition = __webpack_require__(43);

	var _setZPosition2 = _interopRequireDefault(_setZPosition);

	var _destroyThreeObject = __webpack_require__(29);

	var _destroyThreeObject2 = _interopRequireDefault(_destroyThreeObject);

	var _ShapeAddMarkPoint = __webpack_require__(15);

	var toolbarStatus = undefined;

	exports['default'] = function () {
		exports.
		// dialog.tips('加载中...');
		// $('.dialog_tips').hide(0);
		toolbarStatus = toolbarStatus = {
			lineColor: ['#03ACF6', '#00AE9D', '#0372D2', '#0D8617', '#737602', '#FBDD20', '#E64A09', '#F8374E', '#B52CF8', '#6A30E7'],
			// copy
			lineColorCopy: ['#03ACF6', '#00AE9D', '#0372D2', '#0D8617', '#737602', '#FBDD20', '#E64A09', '#F8374E', '#B52CF8', '#6A30E7'],

			sectionAttr: [{ sectionColor: '#03ACF6', sectionHeight: 30, index: 0 }, { sectionColor: '#00AE9D', sectionHeight: 60, index: 1 }, { sectionColor: '#0372D2', sectionHeight: 90, index: 2 }, { sectionColor: '#0D8617', sectionHeight: 120, index: 3 }, { sectionColor: '#737602', sectionHeight: 150, index: 4 }, { sectionColor: '#FBDD20', sectionHeight: 180, index: 5 }, { sectionColor: '#E64A09', sectionHeight: 210, index: 6 }, { sectionColor: '#F8374E', sectionHeight: 240, index: 7 }, { sectionColor: '#B52CF8', sectionHeight: 270, index: 8 }, { sectionColor: '#6A30E7', sectionHeight: 300, index: 9 }],
			// copy
			sectionAttrCopy: [{ sectionColor: '#03ACF6', sectionHeight: 30, index: 0 }, { sectionColor: '#00AE9D', sectionHeight: 60, index: 1 }, { sectionColor: '#0372D2', sectionHeight: 90, index: 2 }, { sectionColor: '#0D8617', sectionHeight: 120, index: 3 }, { sectionColor: '#737602', sectionHeight: 150, index: 4 }, { sectionColor: '#FBDD20', sectionHeight: 180, index: 5 }, { sectionColor: '#E64A09', sectionHeight: 210, index: 6 }, { sectionColor: '#F8374E', sectionHeight: 240, index: 7 }, { sectionColor: '#B52CF8', sectionHeight: 270, index: 8 }, { sectionColor: '#6A30E7', sectionHeight: 300, index: 9 }],
			unionAttr: {
				unionColor: '#6924F9',
				unionHeight: -70
			},
			intersectionAttr: {
				intersectionColor: '#088213',
				intersectionHeight: -40
			},

			selectColor: '#FEEE87',
			referMark: [],
			referInterval: [],
			pointArray: [],
			refreshStartPoints: false,
			refreshEndPoints: false,
			isShowIntersection: false,
			isShowUnion: false,
			isRefreshUnit: false,
			_action: ''
		};
		var markPintArray = undefined;

		$(_presenter2['default'].view).find('.com_part_toolbar li').off('click touchstart').on('click touchstart', function (e) {
			e.preventDefault();
			$(_presenter2['default'].view).find(".textbox").hide();
			var target = $(this);
			var action = $(this).data("action");
			// 工具栏点击时数轴更改大小关闭
			if (toolbarStatus.isRefreshUnit) {
				(0, _EventUnitSelect2['default'])(_presenter2['default'].numberLine, false);
				toolbarStatus.isRefreshUnit = false;
			}
			//let group = scene.getObjectByName('group');
			var view = _presenter2['default'].view;
			if (!action) {
				return;
			}

			if ($(target).hasClass('click_disabled')) return; //点击的是灰色按钮直接return ;

			if ($(target).hasClass('click_btn_on')) {
				$(target).removeClass('click_btn_on');
				toolbarStatus._action = '';
				(0, _isShowUnitController2['default'])(_presenter2['default'].numberLine, toolbarStatus._action);
				if (action != "mix" && action != "union") {
					toolbarStatus.startPoint ? toolbarStatus.startPoint.parent.remove(toolbarStatus.startPoint) : null;
					toolbarStatus.startPoint = null;
				}

				// 取消选中交集按钮，隐藏交集
				if (action == "mix") {
					toolbarStatus._action = "interval";
					toolbarStatus.isShowIntersection = false;
					var mixs = _threeManger.scene.getObjectByName('intersection');
					if (mixs) {
						mixs.visible = false;
					}
				}
				// 取消选中交集按钮，隐藏并集
				if (action == "union") {
					toolbarStatus._action = "interval";
					toolbarStatus.isShowUnion = false;
					for (var i = 0; i < _presenter2['default'].numberLine.children.length; i++) {
						var child = _presenter2['default'].numberLine.children[i];
						if (child.name == 'union') {
							child.visible = false;
						}
					}
				}

				if (action == 'interval') {
					$(view).find('.mix').hide();
					$(view).find('.union').hide();
				}
				(0, _EventDocumentEvent.checkButtonState)();
				_presenter2['default'].renderer();
			} else {
				if ($(view).find('.click_btn_on').length && action != "mix" && action != "union" && action != 'clear_all') {
					toolbarStatus.startPoint ? toolbarStatus.startPoint.parent.remove(toolbarStatus.startPoint) : null;
					toolbarStatus.startPoint = null;
					_presenter2['default'].renderer();
					//$(view).find('.click_btn_on').removeClass('click_btn_on');
				}

				var _mark = $(view).find('.mark');
				var _interval = $(view).find('.interval');
				var _regulation = $(view).find('.regulation');
				var _clean = $(view).find('.clean');

				switch (action) {
					case 'clean':
						toolbarStatus._action = action;

						if (_mark.hasClass('click_btn_on')) {
							_mark.removeClass('click_btn_on');
						}
						if (_interval.hasClass('click_btn_on')) {
							_interval.removeClass('click_btn_on');
						}
						if (_regulation.hasClass('click_btn_on')) {
							_regulation.removeClass('click_btn_on');
						}
						$(target).addClass('click_btn_on');
						$(view).find('.mix').hide();
						$(view).find('.union').hide();
						(0, _isShowUnitController2['default'])(_presenter2['default'].numberLine, toolbarStatus._action);
						break;
					case 'mark':
						toolbarStatus._action = action;
						$(target).addClass('click_btn_on');
						(0, _isShowUnitController2['default'])(_presenter2['default'].numberLine, toolbarStatus._action);
						for (var i = 0; i < _presenter2['default'].numberLine.children.length; i++) {
							if (_presenter2['default'].numberLine.children[i].name == 'markPoint') {
								(0, _setZPosition2['default'])(_presenter2['default'].numberLine.children[i]);
							}
						}
						if (_interval.hasClass('click_btn_on')) {
							_interval.removeClass('click_btn_on');
						}
						if (_regulation.hasClass('click_btn_on')) {
							_regulation.removeClass('click_btn_on');
						}
						if (_clean.hasClass('click_btn_on')) {
							_clean.removeClass('click_btn_on');
						}
						$(view).find('.mix').hide();
						$(view).find('.union').hide();
						break;
					case 'regulation':
						toolbarStatus._action = action;
						$(target).addClass('click_btn_on');
						(0, _isShowUnitController2['default'])(_presenter2['default'].numberLine, toolbarStatus._action);
						for (var i = 0; i < _presenter2['default'].numberLine.children.length; i++) {
							if (_presenter2['default'].numberLine.children[i].name == 'regulation') {
								(0, _setZPosition2['default'])(_presenter2['default'].numberLine.children[i]);
							}
						}
						if (_mark.hasClass('click_btn_on')) {
							_mark.removeClass('click_btn_on');
						}
						if (_interval.hasClass('click_btn_on')) {
							_interval.removeClass('click_btn_on');
						}
						if (_clean.hasClass('click_btn_on')) {
							_clean.removeClass('click_btn_on');
						}
						$(view).find('.mix').hide();
						$(view).find('.union').hide();
						break;
					case 'interval':
						toolbarStatus._action = action;
						$(target).addClass('click_btn_on');
						var canShow = (0, _getSections2['default'])(_presenter2['default'].numberLine).canShow;
						var intervals = (0, _getSections2['default'])(_presenter2['default'].numberLine).sections;

						(0, _isShowUnitController2['default'])(_presenter2['default'].numberLine, toolbarStatus._action);
						if (intervals.length > 0) {
							for (var i = 0; i < intervals.length; i++) {
								(0, _setZPosition2['default'])(intervals[i]);
							}
						}
						if (_mark.hasClass('click_btn_on')) {
							_mark.removeClass('click_btn_on');
						}
						if (_regulation.hasClass('click_btn_on')) {
							_regulation.removeClass('click_btn_on');
						}
						if (_clean.hasClass('click_btn_on')) {
							_clean.removeClass('click_btn_on');
						}

						$(view).find('.mix').show();
						$(view).find('.union').show();
						break;
					case 'mix':
						var sections = (0, _getSections2['default'])(_presenter2['default'].numberLine).sections;
						$(target).addClass('click_btn_on');
						if (sections.length >= 2) {
							toolbarStatus.isShowIntersection = true;
							if ((0, _updateIntersection2['default'])(_presenter2['default'].numberLine)) {
								$(view).find('.dialog_msg').length ? null : _UtilsDialog2['default'].msg(_presenter2['default']._i18n['nl_interval_empty_tip']);
								// $(target).removeClass('click_btn_on');
								// toolbarStatus.isShowIntersection = false;
							}
						}
						break;
					case 'union':
						var sections2 = (0, _getSections2['default'])(_presenter2['default'].numberLine /*scene.getObjectByName('group')*/).sections;
						$(target).addClass('click_btn_on');
						if (sections2.length >= 2) {
							toolbarStatus.isShowUnion = true;
							(0, _updateUnion2['default'])(_presenter2['default'].numberLine /*scene.getObjectByName('group')*/);
						}
						break;
					case 'clear_all':
						//let group = scene.getObjectByName("group");
						var isNoPoint = _presenter2['default'].numberLine.getObjectByName("markPoint");
						$('.markpoint-input').val('').blur(); //input失去焦点
						// toolbarStatus._action = action;
						//没有可清除对象不弹窗
						if (toolbarStatus.lineColor.length == 10 && toolbarStatus.sectionAttr.length == 10 && !isNoPoint && !toolbarStatus.startPoint) {
							return;
						}
						var hasDialog = document.querySelector('.dialog_alert');
						if (hasDialog) return;
						_UtilsDialog2['default'].alert(_presenter2['default']._i18n['nl_clear_tip'], function (key) {
							_UtilsDialog2['default'].remove(key);
							// 数轴所在group对象
							markPintArray = [];
							var group_markPoint = _presenter2['default'].numberLine.children;
							for (var _i = 0; _i < group_markPoint.length; _i++) {
								if (group_markPoint[_i].name == 'markPoint' || group_markPoint[_i].name == 'section' || group_markPoint[_i].name == 'regulation') {
									markPintArray.push(_presenter2['default'].numberLine.children[_i]);
								}
							}
							for (var i = 0; i < markPintArray.length; i++) {
								markPintArray[i].parent.remove(markPintArray[i]);
								(0, _destroyThreeObject2['default'])(markPintArray[i]);
								markPintArray[i] = null;
							}
							toolbarStatus.pointArray = [];
							// 移除起始点
							toolbarStatus.startPoint ? toolbarStatus.startPoint.parent.remove(toolbarStatus.startPoint) : null;
							toolbarStatus.startPoint = null;
							// 重置区间，交并集
							(0, _refreshSection2['default'])();
							toolbarStatus.isShowIntersection = false;
							toolbarStatus.isShowUnion = false;

							// 清空区间存储点的数组
							toolbarStatus.referInterval = [];
							// 显示刻度控制器
							(0, _isShowUnitController2['default'])(_presenter2['default'].numberLine);
							(0, _ShapeAddMarkPoint.resetCollection)();
							// 重置lineColor,sectionAttr
							toolbarStatus.lineColor = [];
							toolbarStatus.lineColor = toolbarStatus.lineColor.concat(toolbarStatus.lineColorCopy);
							toolbarStatus.sectionAttr = [];
							toolbarStatus.sectionAttr = toolbarStatus.sectionAttr.concat(toolbarStatus.sectionAttrCopy);
							toolbarStatus._action = null;

							// 删除清空按钮置灰
							$(view).find('.clear_all').addClass("click_disabled");
							$(view).find('.clean').addClass("click_disabled");
							if ($(view).find('.clean').hasClass('click_btn_on')) {
								$(view).find('.clean').removeClass('click_btn_on');
							}
							$(view).find('.mix').addClass('click_disabled');
							if ($(view).find('.mix').hasClass('click_btn_on')) {
								$(view).find('.mix').removeClass('click_btn_on');
							}
							$(view).find('.union').addClass('click_disabled');
							if ($(view).find('.union').hasClass('click_btn_on')) {
								$(view).find('.union').removeClass('click_btn_on');
							}
							if ($(view).find('.mark').hasClass('click_btn_on')) {
								$(view).find('.mark').removeClass('click_btn_on');
							}
							if ($(view).find('.interval').hasClass('click_btn_on')) {
								$(view).find('.interval').removeClass('click_btn_on');
							}
							if ($(view).find('.regulation').hasClass('click_btn_on')) {
								$(view).find('.regulation').removeClass('click_btn_on');
							}
							$(view).find('.mix').hide();
							$(view).find('.union').hide();
							_presenter2['default'].renderer();
						});
						break;
				}
				(0, _EventDocumentEvent.checkButtonState)();
			}
			_presenter2['default'].renderer();
		});
	};

	exports.toolbarStatus = toolbarStatus;

	function destoryToolbar() {
		if (toolbarStatus) {
			exports.toolbarStatus = toolbarStatus = null;
		}
		(0, _ShapeAddMarkPoint.resetCollection)();
		$(_presenter2['default'].view).find('.numline_btns_type').removeClass('click_btn_on');
		$(_presenter2['default'].view).find('.mix').hide().addClass('click_disabled');
		$(_presenter2['default'].view).find('.union').hide().addClass('click_disabled');
	}

	/*
	 export function checkOperationObj(){
	 let group = scene ? scene.getObjectByName('group') : null;
	 if(group){
	 let point = group.getObjectByName('markPoint'),
	 interval = group.getObjectByName('section'),
	 regulation = group.getObjectByName('regulation');
	 if(point || interval || regulation){
	 $(presenter.view).find('.clean').removeClass('icon_disabled');
	 $(presenter.view).find('.clear_all').removeClass('icon_disabled');
	 toolbarStatus.hasOperationObj = true;
	 return true;
	 }else{
	 $(presenter.view).find('.clean').addClass('icon_disabled').removeClass('click_btn_on');
	 $(presenter.view).find('.clear_all').addClass('icon_disabled');
	 toolbarStatus.hasOperationObj = false;
	 return false;
	 }
	 }else{
	 $(presenter.view).find('.clean').addClass('icon_disabled').removeClass('click_btn_on');
	 $(presenter.view).find('.clear_all').addClass('icon_disabled');
	 toolbarStatus.hasOperationObj = false;
	 return false;
	 }
	 }*/

/***/ },
/* 31 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	exports['default'] = function (group) {
		var sections = [];
		var children = group.children;
		for (var i = 0; i < children.length; i++) {
			if (children[i].name == 'section') {
				sections.push(children[i]);
			}
		}
		if (sections.length >= 2) {
			return {
				canShow: true,
				sections: sections
			};
		} else {
			return {
				canShow: false,
				sections: sections
			};
		}
	};

	module.exports = exports['default'];

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	    value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _UtilsUpdateUnit = __webpack_require__(11);

	var _UtilsUpdateUnit2 = _interopRequireDefault(_UtilsUpdateUnit);

	var _UtilsDialog = __webpack_require__(20);

	var _UtilsDialog2 = _interopRequireDefault(_UtilsDialog);

	var _presenter = __webpack_require__(1);

	var _presenter2 = _interopRequireDefault(_presenter);

	exports['default'] = function (shape, bool) {
	    var select = undefined,
	        pointA = undefined,
	        pointB = undefined,
	        unitMultiple = undefined,
	        unitLength = undefined,
	        lineWidth = undefined,
	        value = undefined;
	    select = shape.getObjectByName('unitSelect');
	    pointA = shape.data.pointA;
	    pointB = shape.data.pointB;
	    unitMultiple = shape.data.unitMultiple;
	    unitLength = shape.data.unitLength;
	    lineWidth = shape.data.lineWidth;
	    value = shape.data.unitValue;

	    if (value != '0' && value != '0.' && value != '0.0' && value != '' && new Number(value) != 0) {
	        value = new Number(value);
	        shape.data.unitMultiple = value;
	        unitMultiple = value;
	    } else {
	        $(_presenter2['default'].view).find('.dialog_msg').length ? null : _UtilsDialog2['default'].msg(_presenter2['default']._i18n['nl_range_max_tip'], function (key) {
	            $(_presenter2['default'].view).find('.numberline-input').focus();
	            _UtilsDialog2['default'].remove(key);
	        });
	        shape.data.unitValue = unitMultiple;
	    }

	    if (!bool) {
	        $(_presenter2['default'].view).find('.numberline-input').val('').blur();
	        select.visible = false;
	        (0, _UtilsUpdateUnit2['default'])(shape, pointA, pointB, unitMultiple, unitLength, lineWidth);
	    } else {
	        $(_presenter2['default'].view).find('.numberline-input').val(unitMultiple).focus();
	        select.visible = true;
	        select.position.x = unitLength;
	    }
	    _presenter2['default'].renderer();
	};

	module.exports = exports['default'];

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _ShapeIntersection = __webpack_require__(34);

	var _ShapeIntersection2 = _interopRequireDefault(_ShapeIntersection);

	var _getSections = __webpack_require__(31);

	var _getSections2 = _interopRequireDefault(_getSections);

	var _toolbar = __webpack_require__(30);

	var _getIntersection = __webpack_require__(37);

	var _getIntersection2 = _interopRequireDefault(_getIntersection);

	var _updateVertices = __webpack_require__(7);

	var _updateVertices2 = _interopRequireDefault(_updateVertices);

	var _computeSection = __webpack_require__(38);

	var _computeSection2 = _interopRequireDefault(_computeSection);

	var _addText = __webpack_require__(10);

	var _addText2 = _interopRequireDefault(_addText);

	var _calculatMethod = __webpack_require__(26);

	exports['default'] = function (shape) {
		var intersection = undefined,
		    intersectionObj = undefined,
		    sections = undefined,
		    sectionObjs = [],
		    color = undefined,
		    height = undefined,
		    lineWidth = undefined,
		    intersectionStartSide = undefined,
		    intersectionEndSide = undefined,
		    intersectionLine = undefined,
		    intersectionStartPoint = undefined,
		    intersectionEndPoint = undefined,
		    text = undefined,
		    intersectionText = undefined,
		    intersectionStartSideVector = undefined,
		    intersectionEndSideVector = undefined;

		lineWidth = shape.data.lineWidth;
		color = _toolbar.toolbarStatus.intersectionAttr.intersectionColor;
		height = _toolbar.toolbarStatus.intersectionAttr.intersectionHeight;
		sections = (0, _getSections2['default'])(shape).sections;
		if (sections.length > 0) {
			sectionObjs = (0, _getIntersection2['default'])(sections);
			intersectionObj = (0, _calculatMethod.intersectionSection)(sectionObjs);
			intersection = shape.getObjectByName('intersection');
			if (intersectionObj) {
				if (!intersection) {
					// 未创建交集时，创建交集
					intersection = (0, _ShapeIntersection2['default'])(intersectionObj.leftPoint, intersectionObj.leftIsSolid, intersectionObj.rightPoint, intersectionObj.rightIsSolid, height, color, lineWidth);
					shape.add(intersection);
					// 创建交集文字
					text = (0, _computeSection2['default'])(intersection, intersectionObj.leftPoint, intersectionObj.rightPoint);
					intersectionText = (0, _addText2['default'])(text, new THREE.Vector2((intersectionObj.leftPoint.x + intersectionObj.rightPoint.x) / 2, height - 13), 256, 32, '24px', color);
					// intersectionText._dynamicTexture.clear().drawText(text,undefined,
					// 16);
					intersectionText.name = "intersectionText";

					intersection.add(intersectionText);
				} else {
					// 已存在交集时，更新交集
					if (!intersection.visible) {
						intersection.visible = true;
					}
					intersectionStartPoint = intersection.getObjectByName('intersectionStartPoint');
					intersectionEndPoint = intersection.getObjectByName('intersectionEndPoint');
					intersectionStartSide = intersection.getObjectByName('intersectionStartSide');
					intersectionEndSide = intersection.getObjectByName('intersectionEndSide');
					intersectionLine = intersection.getObjectByName('intersectionLine');
					intersectionText = intersection.getObjectByName('intersectionText');

					// 修改端点状态及位置
					if (intersectionStartPoint.position.x <= intersectionEndPoint.position.x) {
						intersectionStartPoint.position.x = intersectionObj.leftPoint.x;
						intersectionEndPoint.position.x = intersectionObj.rightPoint.x;
					} else {
						intersectionStartPoint.position.x = intersectionObj.rightPoint.x;
						intersectionEndPoint.position.x = intersectionObj.leftPoint.x;
					}

					intersectionStartPoint.position.y = 0;
					intersectionEndPoint.position.y = 0;
					if (intersectionObj.leftIsSolid) {
						intersectionStartPoint.getObjectByName('inCircle').visible = false;
						intersectionStartPoint.data.status = true;
					} else {
						intersectionStartPoint.getObjectByName('inCircle').visible = true;
						intersectionStartPoint.data.status = false;
					}
					if (intersectionObj.rightIsSolid) {
						intersectionEndPoint.getObjectByName('inCircle').visible = false;
						intersectionEndPoint.data.status = true;
					} else {
						intersectionEndPoint.getObjectByName('inCircle').visible = true;
						intersectionEndPoint.data.status = false;
					}

					// 更新三线
					intersectionStartSideVector = new THREE.Vector3(intersectionObj.leftPoint.x, height, 0);
					intersectionEndSideVector = new THREE.Vector3(intersectionObj.rightPoint.x, height, 0);
					(0, _updateVertices2['default'])(intersectionStartSide, intersectionObj.leftPoint, intersectionStartSideVector, lineWidth);
					(0, _updateVertices2['default'])(intersectionEndSide, intersectionObj.rightPoint, intersectionEndSideVector, lineWidth);
					(0, _updateVertices2['default'])(intersectionLine, new THREE.Vector3(intersectionStartSideVector.x, intersectionStartSideVector.y + lineWidth / 2), new THREE.Vector3(intersectionEndSideVector.x, intersectionEndSideVector.y + lineWidth / 2), lineWidth);

					// 计算应该显示的文字
					text = (0, _computeSection2['default'])(intersection, intersectionObj.leftPoint, intersectionObj.rightPoint);
					// 刷新文字
					intersectionText.position.x = (intersectionObj.leftPoint.x + intersectionObj.rightPoint.x) / 2;
					intersectionText.position.y = height - 13;
					intersectionText._dynamicTexture.clear().drawText(text, undefined, 24);
				}
			} else {
				if (intersection) {
					intersection.visible = false;
					return true;
				} else {
					// 未创建交集时，创建交集
					var left = new THREE.Vector2(-1, 0);
					var right = new THREE.Vector2(1, 0);
					intersection = (0, _ShapeIntersection2['default'])(left, false, right, false, height, color, lineWidth);
					shape.add(intersection);
					// 创建交集文字
					text = (0, _computeSection2['default'])(intersection, left, right);
					intersectionText = (0, _addText2['default'])(text, new THREE.Vector2((left.x + right.x) / 2, height - 13), 256, 32, '24px', color);
					// intersectionText._dynamicTexture.clear().drawText(text,undefined,
					// 16);
					intersectionText.name = "intersectionText";

					intersection.add(intersectionText);
					intersection.visible = false;
				}
				return true;
			}
		} else {
			intersection = shape.getObjectByName('intersection');
			if (intersection) {
				intersection.visible = false;
			}
		}
		isShowIntersectionArrow(intersection);
	};

	function isShowIntersectionArrow(intersection) {
		if (!intersection) return;
		var startPoint = undefined,
		    endPoint = undefined,
		    startSide = undefined,
		    endSide = undefined,
		    line = undefined,
		    arrow = undefined;
		startPoint = intersection.getObjectByName('intersectionStartPoint');
		endPoint = intersection.getObjectByName('intersectionEndPoint');
		startSide = intersection.getObjectByName('intersectionStartSide');
		endSide = intersection.getObjectByName('intersectionEndSide');
		line = intersection.getObjectByName('intersectionLine');
		arrow = intersection.getObjectByName('intersectionArrow');
		if (startPoint.position.x == endPoint.position.x) {
			arrow.visible = true;
			arrow.position.x = startPoint.position.x;
			startPoint.visible = false;
			endPoint.visible = false;
			startSide.visible = false;
			endSide.visible = false;
			line.visible = false;
		} else {
			startPoint.visible = true;
			endPoint.visible = true;
			startSide.visible = true;
			endSide.visible = true;
			line.visible = true;
			arrow.visible = false;
		}
	}
	module.exports = exports['default'];

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _ShapeSectionLine = __webpack_require__(35);

	var _ShapePoint = __webpack_require__(36);

	var _ShapePoint2 = _interopRequireDefault(_ShapePoint);

	exports['default'] = function (startPoint, startIsSolid, endPoint, endIsSolid, height, color, lineWidth) {
	  var intersection = new THREE.Object3D();
	  var startSide = undefined,
	      endSide = undefined,
	      line = undefined,
	      start = undefined,
	      end = undefined;
	  // 创建左端点
	  start = (0, _ShapePoint2['default'])(lineWidth, color);
	  start.position.x = startPoint.x;
	  start.position.z = 0.1;
	  start.name = 'intersectionStartPoint';
	  start.data = {};
	  start.data.status = false;
	  if (startIsSolid) {
	    start.getObjectByName('inCircle').visible = false;
	    start.data.status = true;
	  }
	  // 创建右端点
	  end = (0, _ShapePoint2['default'])(lineWidth, color);
	  end.position.x = endPoint.x;
	  end.position.z = 0.1;
	  end.name = 'intersectionEndPoint';
	  end.data = {};
	  end.data.status = false;
	  if (endIsSolid) {
	    end.getObjectByName('inCircle').visible = false;
	    end.data.status = true;
	  }
	  // 创建交集左边线
	  startSide = (0, _ShapeSectionLine.createSide)(startPoint, height, lineWidth, color);
	  startSide.side.name = 'intersectionStartSide';
	  // 创建交集右边线
	  endSide = (0, _ShapeSectionLine.createSide)(endPoint, height, lineWidth, color);
	  endSide.side.name = 'intersectionEndSide';
	  startSide.upVector.y = height + lineWidth / 2;
	  endSide.upVector.y = height + lineWidth / 2;
	  startSide.upVector.x -= 1;
	  endSide.upVector.x += 1;
	  // 创建交集下边线
	  line = (0, _ShapeSectionLine.createLine)(startSide.upVector, endSide.upVector, lineWidth, color);
	  line.name = 'intersectionLine';

	  // 创建箭号
	  var dir = new THREE.Vector3(1, 1, 0);
	  var origin = new THREE.Vector3(20, 20, 0);
	  var length = 30;
	  var headLength = 10;
	  var headWidth = 10;
	  var arrow = new THREE.ArrowHelper(dir, origin, length, color, headLength, headWidth);
	  arrow.position.y = -40;
	  arrow.position.x = startPoint.x;
	  arrow.visible = false;
	  arrow.name = 'intersectionArrow';

	  intersection.add(start);
	  intersection.add(end);
	  intersection.add(startSide.side);
	  intersection.add(endSide.side);
	  intersection.add(line);
	  intersection.add(arrow);

	  intersection.name = 'intersection';
	  return intersection;
	};

	module.exports = exports['default'];

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports.createSide = createSide;
	exports.createLine = createLine;
	exports.createText = createText;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _UtilsAddText = __webpack_require__(10);

	var _UtilsAddText2 = _interopRequireDefault(_UtilsAddText);

	// 创建两边

	function createSide(downVector, height, lineWidth, color) {
	  var shape = new THREE.Shape();
	  var upVector = new THREE.Vector3(downVector.x, downVector.y + height, 0);
	  shape.moveTo(downVector.x + lineWidth / 2, 0);
	  shape.lineTo(upVector.x + lineWidth / 2, height);
	  shape.lineTo(upVector.x - lineWidth / 2, height);
	  shape.lineTo(downVector.x - lineWidth / 2, 0);
	  shape.lineTo(downVector.x + lineWidth / 2, 0);
	  var geometry = new THREE.ShapeGeometry(shape);
	  var side = new THREE.Mesh(geometry, new THREE.MeshBasicMaterial({
	    color: color
	  }));
	  return {
	    side: side,
	    upVector: upVector
	  };
	}

	// 创建横线

	function createLine(startVector, endVector, lineWidth, color) {
	  var shape = new THREE.Shape();
	  shape.moveTo(startVector.x, startVector.y - lineWidth / 2);
	  shape.lineTo(endVector.x, endVector.y - lineWidth / 2);
	  shape.lineTo(endVector.x, endVector.y + lineWidth / 2);
	  shape.lineTo(startVector.x, startVector.y + lineWidth / 2);
	  shape.lineTo(startVector.x, startVector.y - lineWidth / 2);
	  var geometry = new THREE.ShapeGeometry(shape);
	  var line = new THREE.Mesh(geometry, new THREE.MeshBasicMaterial({
	    color: color
	  }));
	  line.name = 'sectionLine';
	  return line;
	}

	// 创建文字

	function createText(text, postion, color) {
	  var sectionText = (0, _UtilsAddText2['default'])(text, postion, 256, 32, '24px', color);
	  sectionText.name = "sectionText";
	  return sectionText;
	}

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _UtilsAddText = __webpack_require__(10);

	var _UtilsAddText2 = _interopRequireDefault(_UtilsAddText);

	exports['default'] = function (lineWidth, color, text, position, unitMultiple) {
	  var point = new THREE.Object3D();
	  var outCircleGeometry = new THREE.CircleGeometry(lineWidth * 1.5, 64);
	  var outCircle = new THREE.Mesh(outCircleGeometry, new THREE.MeshBasicMaterial({
	    color: color,
	    overdraw: true,
	    transparent: false,
	    opacity: 1
	  }));
	  outCircle.name = 'outCircle';
	  var inCircleGeometry = new THREE.CircleGeometry(lineWidth * 1, 64);
	  var inCircle = new THREE.Mesh(inCircleGeometry, new THREE.MeshBasicMaterial({
	    color: 0xffffff,
	    overdraw: true,
	    transparent: false,
	    opacity: 1
	  }));
	  inCircle.name = 'inCircle';
	  point.add(inCircle);
	  point.add(outCircle);
	  if (text !== undefined) {
	    var textObj = (0, _UtilsAddText2['default'])(text, position, 128, 32, '24px', 'white');
	    if (Math.abs(text * 10 % (unitMultiple * 10)) < 1) {
	      textObj.visible = false;
	    }
	    textObj.name = 'positionText';
	    textObj.position.z = -0.3;
	    point.add(textObj);
	  }
	  point.userData.radius = lineWidth * 1.5;
	  point.userData.color = color;
	  point.data = {};
	  point.data.status = false;
	  return point;
	};

	module.exports = exports['default'];

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	var _calculatMethod = __webpack_require__(26);

	exports['default'] = function (sections) {
		var section = undefined,
		    sectionObj = undefined,
		    sectionObjs = [],
		    startPoint = undefined,
		    endPoint = undefined;
		for (var i = 0; i < sections.length; i++) {
			section = sections[i];
			startPoint = section.getObjectByName('startPoint');
			endPoint = section.getObjectByName('endPoint');
			sectionObj = (0, _calculatMethod.creatSection)(startPoint.position, startPoint.data.status, endPoint.position, endPoint.data.status);
			sectionObjs.push(sectionObj);
		}
		return sectionObjs;
	};

	module.exports = exports['default'];

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _presenter = __webpack_require__(1);

	var _presenter2 = _interopRequireDefault(_presenter);

	exports['default'] = function (shape, startPoint, endPoint) {
		var text = undefined,
		    unitLength = undefined,
		    unitMultiple = undefined,
		    min = undefined,
		    max = undefined,
		    start = undefined,
		    end = undefined;
		unitLength = _presenter2['default'].numberLine.data.unitLength;
		unitMultiple = _presenter2['default'].numberLine.data.unitMultiple;
		start = shape.getObjectByName('startPoint') || shape.getObjectByName('intersectionStartPoint') || shape.getObjectByName('unionStartPoint');
		end = shape.getObjectByName('endPoint') || shape.getObjectByName('intersectionEndPoint') || shape.getObjectByName('unionEndPoint');
		if (startPoint.x <= endPoint.x) {
			min = (startPoint.x / unitLength * unitMultiple).toFixed(1);
			max = (endPoint.x / unitLength * unitMultiple).toFixed(1);
			if (start.data.status && end.data.status) {
				text = min + "≤n≤" + max;
				if (min == max) {
					text = min;
				}
			} else if (start.data.status && !end.data.status) {
				text = min + "≤n<" + max;
			} else if (!start.data.status && end.data.status) {
				text = min + "<n≤" + max;
			} else {
				text = min + "<n<" + max;
			}
		} else {
			min = (endPoint.x / unitLength * unitMultiple).toFixed(1);
			max = (startPoint.x / unitLength * unitMultiple).toFixed(1);
			if (start.data.status && end.data.status) {
				text = min + "≤n≤" + max;
				if (min == max) {
					text = min;
				}
			} else if (start.data.status && !end.data.status) {
				text = min + "<n≤" + max;
			} else if (!start.data.status && end.data.status) {
				text = min + "≤n<" + max;
			} else {
				text = min + "<n<" + max;
			}
		}
		return text;
	};

	module.exports = exports['default'];

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _ShapeUnion = __webpack_require__(40);

	var _ShapeUnion2 = _interopRequireDefault(_ShapeUnion);

	var _getSections = __webpack_require__(31);

	var _getSections2 = _interopRequireDefault(_getSections);

	var _toolbar = __webpack_require__(30);

	var _getIntersection = __webpack_require__(37);

	var _getIntersection2 = _interopRequireDefault(_getIntersection);

	var _updateVertices = __webpack_require__(7);

	var _updateVertices2 = _interopRequireDefault(_updateVertices);

	var _computeSection = __webpack_require__(38);

	var _computeSection2 = _interopRequireDefault(_computeSection);

	var _addText = __webpack_require__(10);

	var _addText2 = _interopRequireDefault(_addText);

	var _calculatMethod = __webpack_require__(26);

	exports['default'] = function (shape) {
	  var union = undefined,
	      unionObj = undefined,
	      unionObjs = undefined,
	      sections = undefined,
	      sectionObjs = [],
	      color = undefined,
	      height = undefined,
	      lineWidth = undefined,
	      unionStartSide = undefined,
	      unionEndSide = undefined,
	      unionLine = undefined,
	      unions = [],
	      unionStartPoint = undefined,
	      unionEndPoint = undefined,
	      text = undefined,
	      unionText = undefined,
	      unionStartSideVector = undefined,
	      unionEndSideVector = undefined;

	  lineWidth = shape.data.lineWidth;
	  color = _toolbar.toolbarStatus.unionAttr.unionColor;
	  height = _toolbar.toolbarStatus.unionAttr.unionHeight;
	  sections = (0, _getSections2['default'])(shape).sections;
	  if (sections.length > 0) {
	    sectionObjs = (0, _getIntersection2['default'])(sections);
	    unionObjs = (0, _calculatMethod.unionSection)(sectionObjs);
	    // 获取已存在并集数量
	    for (var i = 0; i < shape.children.length; i++) {
	      var child = shape.children[i];
	      if (child.name == 'union') {
	        unions.push(child);
	      }
	    }
	    if (unionObjs) {
	      if (unions.length == 0) {
	        // 未创建并集时，创建并集
	        for (var i = 0; i < unionObjs.length; i++) {
	          unionObj = unionObjs[i];
	          union = (0, _ShapeUnion2['default'])(unionObj.leftPoint, unionObj.leftIsSolid, unionObj.rightPoint, unionObj.rightIsSolid, height, color, lineWidth);
	          shape.add(union);
	          // 创建交集文字
	          text = (0, _computeSection2['default'])(union, unionObj.leftPoint, unionObj.rightPoint);
	          unionText = (0, _addText2['default'])(text, new THREE.Vector2((unionObj.leftPoint.x + unionObj.rightPoint.x) / 2, height - 13), 256, 32, '24px', color);
	          unionText.name = "unionText";

	          union.add(unionText);
	        }
	      } else {
	        // 已存在并集时，更新并集
	        if (unions.length < unionObjs.length) {
	          var count = unionObjs.length - unions.length;
	          for (var i = 0; i < count; i++) {
	            unionObj = unionObjs[unions.length + i];
	            union = (0, _ShapeUnion2['default'])(unionObj.leftPoint, unionObj.leftIsSolid, unionObj.rightPoint, unionObj.rightIsSolid, height, color, lineWidth);
	            shape.add(union);
	            // 创建交集文字
	            text = (0, _computeSection2['default'])(union, unionObj.leftPoint, unionObj.rightPoint);
	            unionText = (0, _addText2['default'])(text, new THREE.Vector2((unionObj.leftPoint.x + unionObj.rightPoint.x) / 2, height - 13), 256, 32, '24px', color);
	            unionText.name = "unionText";

	            union.add(unionText);
	            unions.push(union);
	          }
	        }
	        if (unions.length >= unionObjs.length) {
	          for (var i = 0; i < unions.length; i++) {
	            union = unions[i];
	            if (i >= unionObjs.length) {
	              union.visible = false;
	            } else {
	              unionObj = unionObjs[i];
	              union.visible = true;
	              unionStartPoint = union.getObjectByName('unionStartPoint');
	              unionEndPoint = union.getObjectByName('unionEndPoint');
	              unionStartSide = union.getObjectByName('unionStartSide');
	              unionEndSide = union.getObjectByName('unionEndSide');
	              unionLine = union.getObjectByName('unionLine');
	              unionText = union.getObjectByName('unionText');
	              // 修改端点状态及位置
	              unionStartPoint.position.x = unionObj.leftPoint.x;
	              unionEndPoint.position.x = unionObj.rightPoint.x;
	              if (unionObj.leftIsSolid) {
	                unionStartPoint.getObjectByName('inCircle').visible = false;
	                unionStartPoint.data.status = true;
	              } else {
	                unionStartPoint.getObjectByName('inCircle').visible = true;
	                unionStartPoint.data.status = false;
	              }
	              if (unionObj.rightIsSolid) {
	                unionEndPoint.getObjectByName('inCircle').visible = false;
	                unionEndPoint.data.status = true;
	              } else {
	                unionEndPoint.getObjectByName('inCircle').visible = true;
	                unionEndPoint.data.status = false;
	              }

	              // 更新三线
	              unionStartSideVector = new THREE.Vector3(unionObj.leftPoint.x, height, 0);
	              unionEndSideVector = new THREE.Vector3(unionObj.rightPoint.x, height, 0);
	              (0, _updateVertices2['default'])(unionStartSide, unionObj.leftPoint, unionStartSideVector, lineWidth);
	              (0, _updateVertices2['default'])(unionEndSide, unionObj.rightPoint, unionEndSideVector, lineWidth);
	              (0, _updateVertices2['default'])(unionLine, new THREE.Vector3(unionStartSideVector.x, unionStartSideVector.y + lineWidth / 2), new THREE.Vector3(unionEndSideVector.x, unionEndSideVector.y + lineWidth / 2), lineWidth);

	              // 计算应该显示的文字
	              text = (0, _computeSection2['default'])(union, unionObj.leftPoint, unionObj.rightPoint);
	              // 刷新文字
	              unionText.position.x = (unionObj.leftPoint.x + unionObj.rightPoint.x) / 2;
	              unionText.position.y = height - 13;
	              unionText._dynamicTexture.clear().drawText(text, undefined, 24);
	              isShowUnionArrow(union, unionObj.leftIsSolid, unionObj.rightIsSolid);
	            }
	          }
	        }
	      }
	    } else {
	      for (var i = 0; i < shape.children.length; i++) {
	        var child = shape.children[i];
	        if (child.name == 'union') {
	          child.visible = false;
	        }
	      }
	    }
	  } else {
	    for (var i = 0; i < shape.children.length; i++) {
	      var child = shape.children[i];
	      if (child.name == 'union') {
	        child.visible = false;
	      }
	    }
	  }
	};

	function isShowUnionArrow(union, left, right) {
	  if (!union) return;
	  var startPoint = undefined,
	      endPoint = undefined,
	      startSide = undefined,
	      endSide = undefined,
	      line = undefined,
	      arrow = undefined;
	  startPoint = union.getObjectByName('unionStartPoint');
	  endPoint = union.getObjectByName('unionEndPoint');
	  startSide = union.getObjectByName('unionStartSide');
	  endSide = union.getObjectByName('unionEndSide');
	  line = union.getObjectByName('unionLine');
	  arrow = union.getObjectByName('unionArrow');
	  union.visible = true;
	  if (startPoint.position.x == endPoint.position.x) {
	    if (left || right) {
	      arrow.visible = true;
	      arrow.position.x = startPoint.position.x;
	      startPoint.visible = false;
	      endPoint.visible = false;
	      startSide.visible = false;
	      endSide.visible = false;
	      line.visible = false;
	    } else {
	      union.visible = false;
	    }
	  } else {
	    startPoint.visible = true;
	    endPoint.visible = true;
	    startSide.visible = true;
	    endSide.visible = true;
	    line.visible = true;
	    arrow.visible = false;
	  }
	}
	module.exports = exports['default'];

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _ShapeSectionLine = __webpack_require__(35);

	var _ShapePoint = __webpack_require__(36);

	var _ShapePoint2 = _interopRequireDefault(_ShapePoint);

	exports['default'] = function (startPoint, startIsSolid, endPoint, endIsSolid, height, color, lineWidth) {
	  var union = new THREE.Object3D();
	  var startSide = undefined,
	      endSide = undefined,
	      line = undefined,
	      start = undefined,
	      end = undefined;
	  // 创建左端点
	  start = (0, _ShapePoint2['default'])(lineWidth, color);
	  start.position.x = startPoint.x;
	  start.position.z = 0.1;
	  start.name = 'unionStartPoint';
	  start.data = {};
	  start.data.status = false;
	  if (startIsSolid) {
	    start.getObjectByName('inCircle').visible = false;
	    start.data.status = true;
	  }
	  // 创建右端点
	  end = (0, _ShapePoint2['default'])(lineWidth, color);
	  end.position.x = endPoint.x;
	  end.position.z = 0.1;
	  end.name = 'unionEndPoint';
	  end.data = {};
	  end.data.status = false;
	  if (endIsSolid) {
	    end.getObjectByName('inCircle').visible = false;
	    end.data.status = true;
	  }
	  // 创建交集左边线
	  startSide = (0, _ShapeSectionLine.createSide)(startPoint, height, lineWidth, color);
	  startSide.side.name = 'unionStartSide';
	  // 创建交集右边线
	  endSide = (0, _ShapeSectionLine.createSide)(endPoint, height, lineWidth, color);
	  endSide.side.name = 'unionEndSide';
	  startSide.upVector.y = height + lineWidth / 2;
	  endSide.upVector.y = height + lineWidth / 2;
	  // 创建交集下边线
	  line = (0, _ShapeSectionLine.createLine)(startSide.upVector, endSide.upVector, lineWidth, color);
	  line.name = 'unionLine';

	  // 创建箭号
	  var dir = new THREE.Vector3(1, 1, 0);
	  var origin = new THREE.Vector3(20, 20, 0);
	  var length = 60;
	  var headLength = 10;
	  var headWidth = 10;
	  var arrow = new THREE.ArrowHelper(dir, origin, length, color, headLength, headWidth);
	  arrow.position.y = -70;
	  arrow.position.x = startPoint.x;
	  arrow.visible = false;
	  arrow.name = 'unionArrow';

	  union.add(start);
	  union.add(end);
	  union.add(startSide.side);
	  union.add(endSide.side);
	  union.add(line);
	  union.add(arrow);

	  union.name = 'union';
	  return union;
	};

	module.exports = exports['default'];

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _updateIntersection = __webpack_require__(33);

	var _updateIntersection2 = _interopRequireDefault(_updateIntersection);

	var _updateUnion = __webpack_require__(39);

	var _updateUnion2 = _interopRequireDefault(_updateUnion);

	var _toolbar = __webpack_require__(30);

	var _presenter = __webpack_require__(1);

	var _presenter2 = _interopRequireDefault(_presenter);

	exports['default'] = function () {
	  var intersection = _presenter2['default'].numberLine.getObjectByName('intersection');
	  var union = _presenter2['default'].numberLine.getObjectByName('union');
	  if (intersection && _toolbar.toolbarStatus.isShowIntersection) {
	    (0, _updateIntersection2['default'])(_presenter2['default'].numberLine);
	  }
	  if (union && _toolbar.toolbarStatus.isShowUnion) {
	    (0, _updateUnion2['default'])(_presenter2['default'].numberLine);
	  }
	};

	module.exports = exports['default'];

/***/ },
/* 42 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	    value: true
	});

	exports['default'] = function (shape, action) {
	    var unitController = shape.getObjectByName('unitController');
	    var select = shape.getObjectByName('unitSelect');
	    if (!action) {
	        if (shape.getObjectByName('section') || shape.getObjectByName('markPoint') || shape.getObjectByName('regulation')) {
	            unitController.visible = false;
	            select.visible = false;
	        } else {
	            unitController.visible = true;
	        }
	    } else {
	        if (action == 'interval' || action == 'regulation' || action == 'mark') {
	            unitController.visible = false;
	            select.visible = false;
	        } else {
	            if (shape.getObjectByName('section') || shape.getObjectByName('markPoint') || shape.getObjectByName('regulation')) {
	                unitController.visible = false;
	                select.visible = false;
	            } else {
	                unitController.visible = true;
	            }
	        }
	    }
	};

	module.exports = exports['default'];

/***/ },
/* 43 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	var zPosition = 0;

	exports["default"] = function (shape) {
		if (!shape) return;
		zPosition++;
		shape.position.z = zPosition;
	};

	module.exports = exports["default"];

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _UtilsUpdateVertices = __webpack_require__(7);

	var _UtilsUpdateVertices2 = _interopRequireDefault(_UtilsUpdateVertices);

	var _UtilsUpdateUnit = __webpack_require__(11);

	var _UtilsUpdateUnit2 = _interopRequireDefault(_UtilsUpdateUnit);

	exports['default'] = function (shape, touchShape, intersectsDis) {
	  var line = shape.getObjectByName('line');
	  var controllerLeft = shape.getObjectByName('controllerLeft');
	  var controllerRight = shape.getObjectByName('controllerRight');
	  var arrow = shape.getObjectByName('arrow');
	  var circleCenter = shape.getObjectByName('center');
	  var center = new THREE.Vector3(0, 0, 0);
	  // let vectorCB = new THREE.Vector2().subVectors(center, shape.data.pointB);
	  // let vectorCA = new THREE.Vector2().subVectors(center, shape.data.pointA);
	  var vectorCB = shape.data.pointB.x;
	  var vectorCA = -shape.data.pointA.x;
	  var unitCACount = parseInt(vectorCA / shape.data.unitLength);
	  var unitCBCount = parseInt(vectorCB / shape.data.unitLength);
	  var unitCARemain = vectorCA % shape.data.unitLength / shape.data.unitLength;
	  var unitCBRemain = vectorCB % shape.data.unitLength / shape.data.unitLength;
	  touchShape.position.x += Math.round(intersectsDis);
	  if (touchShape.position.x <= 40) {
	    touchShape.position.x = 40;
	  } else if (touchShape.position.x >= 300) {
	    touchShape.position.x = 300;
	  }
	  shape.data.unitLength = touchShape.position.x;
	  shape.data.pointA.x = -(unitCACount + unitCARemain) * shape.data.unitLength;
	  shape.data.pointB.x = (unitCBCount + unitCBRemain) * shape.data.unitLength;
	  arrow.position.copy(shape.data.pointB);
	  controllerLeft.position.x = shape.data.pointA.x - shape.data.controllerDis;
	  controllerRight.position.x = shape.data.pointB.x + shape.data.controllerDis;

	  var point = new THREE.Vector3();
	  point.x = shape.data.pointA.x - 3;
	  point.y = shape.data.pointA.y;
	  point.z = shape.data.pointA.z;

	  (0, _UtilsUpdateVertices2['default'])(line, point, shape.data.pointB, shape.data.lineWidth);
	  (0, _UtilsUpdateVertices2['default'])(shape, point, shape.data.pointB, shape.data.lineWidth * 5);
	  (0, _UtilsUpdateUnit2['default'])(shape, shape.data.pointA, shape.data.pointB, shape.data.unitMultiple, shape.data.unitLength, shape.data.lineWidth);
	};

	module.exports = exports['default'];

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _updateVertices = __webpack_require__(7);

	var _updateVertices2 = _interopRequireDefault(_updateVertices);

	var _computeSection = __webpack_require__(38);

	var _computeSection2 = _interopRequireDefault(_computeSection);

	var _toolbar = __webpack_require__(30);

	var _refreshSection = __webpack_require__(41);

	var _refreshSection2 = _interopRequireDefault(_refreshSection);

	var _setZPosition = __webpack_require__(43);

	var _setZPosition2 = _interopRequireDefault(_setZPosition);

	var _presenter = __webpack_require__(1);

	var _presenter2 = _interopRequireDefault(_presenter);

	exports['default'] = function (currShape, dis, mouseType, type) {
	  if (_toolbar.toolbarStatus._action == 'interval' || _toolbar.toolbarStatus._action == 'clean' || _toolbar.toolbarStatus._action == 'clear_all') {
	    var shape = undefined;
	    shape = currShape.parent;
	    if (mouseType == 'up') {
	      if (!type) {
	        sectionPile(shape, currShape);
	      }
	      (0, _refreshSection2['default'])();
	    } else {
	      sectionScope(shape, currShape, dis);
	      (0, _refreshSection2['default'])();
	    }
	  }
	};

	// 区间范围控制
	function sectionScope(shape, currShape, dis) {
	  var lineWidth = undefined,
	      startHeight = undefined,
	      endHeight = undefined,
	      startSide = undefined,
	      endSide = undefined,
	      startPoint = undefined,
	      endPoint = undefined,
	      sectionLine = undefined,
	      startSideVector = undefined,
	      endSideVector = undefined,
	      sectionText = undefined,
	      sectionColor = undefined,
	      text = undefined,
	      startArr = [],
	      endArr = [];
	  lineWidth = _presenter2['default'].numberLine.data.lineWidth;
	  startHeight = shape.data.startHeight;
	  endHeight = shape.data.endHeight;
	  startSideVector = shape.data.startSideVector;
	  endSideVector = shape.data.endSideVector;
	  sectionColor = shape.data.sectionColor;
	  startSide = shape.getObjectByName('startSide');
	  endSide = shape.getObjectByName('endSide');
	  startPoint = shape.getObjectByName('startPoint');
	  endPoint = shape.getObjectByName('endPoint');
	  sectionLine = shape.getObjectByName('sectionLine');
	  sectionText = shape.getObjectByName('sectionText');
	  switch (currShape.name) {
	    case 'startPoint':
	      if (!_toolbar.toolbarStatus.refreshStartPoints) {
	        // 获取该端点上相同x坐标的点
	        startArr = getPile(startPoint, endPoint).startArr;
	        // startArr.push(startPoint);
	        if (startArr.length > 0) {
	          // 更新该端点上相同x坐标的区间
	          // sectionSort(startArr);
	          startArr = sectionSort(startArr);
	          updatePile(startArr, lineWidth);
	        }
	        startPoint.position.y = 0;
	        (0, _setZPosition2['default'])(shape);
	        _toolbar.toolbarStatus.refreshStartPoints = true;
	      }

	      if (parseInt(startPoint.position.x * 10) + parseInt(dis * 10) >= parseInt(_presenter2['default'].numberLine.data.pointA.x * 10) && parseInt(startPoint.position.x * 10) + parseInt(dis * 10) <= parseInt(_presenter2['default'].numberLine.data.pointB.x * 10)) {
	        startPoint.position.x += dis;
	        startSideVector.x = startPoint.position.x;
	      }
	      break;
	    case 'endPoint':

	      if (!_toolbar.toolbarStatus.refreshEndPoints) {
	        // 获取该端点上相同x坐标的点
	        endArr = getPile(startPoint, endPoint).endArr;
	        // endArr.push(endPoint);
	        if (endArr.length > 0) {
	          // 更新该端点上相同x坐标的区间
	          endArr = sectionSort(endArr);
	          updatePile(endArr, lineWidth);
	        }
	        endPoint.position.y = 0;
	        (0, _setZPosition2['default'])(shape);
	        _toolbar.toolbarStatus.refreshEndPoints = true;
	      }
	      if (parseInt(endPoint.position.x * 10) + parseInt(dis * 10) >= parseInt(_presenter2['default'].numberLine.data.pointA.x * 10) && parseInt(endPoint.position.x * 10) + parseInt(dis * 10) <= parseInt(_presenter2['default'].numberLine.data.pointB.x * 10)) {
	        endPoint.position.x += dis;
	        endSideVector.x = endPoint.position.x;
	      }
	      break;
	    case 'startSide':
	    case 'endSide':
	    case 'sectionLine':
	    case 'sectionText':
	      if (!_toolbar.toolbarStatus.refreshStartPoints) {
	        // 获取该端点上相同x坐标的点
	        startArr = getPile(startPoint, endPoint).startArr;
	        // startArr.push(startPoint);
	        if (startArr.length > 0) {
	          // 更新该端点上相同x坐标的区间
	          startArr = sectionSort(startArr);
	          updatePile(startArr, lineWidth);
	        }
	        startPoint.position.y = 0;
	        (0, _setZPosition2['default'])(shape);
	      }
	      if (!_toolbar.toolbarStatus.refreshEndPoints) {
	        // 获取该端点上相同x坐标的点
	        endArr = getPile(startPoint, endPoint).endArr;
	        // endArr.push(endPoint);
	        if (endArr.length > 0) {
	          // 更新该端点上相同x坐标的区间
	          endArr = sectionSort(endArr);
	          updatePile(endArr, lineWidth);
	        }
	        endPoint.position.y = 0;
	        (0, _setZPosition2['default'])(shape);
	      }
	      if (startPoint.position.x <= endPoint.position.x) {
	        if (startPoint.position.x + dis >= _presenter2['default'].numberLine.data.pointA.x && endPoint.position.x + dis <= _presenter2['default'].numberLine.data.pointB.x) {
	          startPoint.position.x += dis;
	          endPoint.position.x += dis;
	        } else {
	          return true;
	        }
	      } else {
	        if (startPoint.position.x + dis <= _presenter2['default'].numberLine.data.pointB.x && endPoint.position.x + dis >= _presenter2['default'].numberLine.data.pointA.x) {
	          startPoint.position.x += dis;
	          endPoint.position.x += dis;
	        } else {
	          return true;
	        }
	      }
	      break;
	  }
	  startHeight = startHeight - startPoint.position.y;
	  endHeight = endHeight - endPoint.position.y;
	  // 更新区间三条线
	  (0, _updateVertices2['default'])(startSide, startPoint.position, new THREE.Vector3(startPoint.position.x, startPoint.position.y + startHeight, 0), lineWidth);
	  (0, _updateVertices2['default'])(endSide, endPoint.position, new THREE.Vector3(endPoint.position.x, endPoint.position.y + endHeight, 0), lineWidth);
	  (0, _updateVertices2['default'])(sectionLine, startSideVector, endSideVector, lineWidth);
	  // 计算应该显示的文字
	  text = (0, _computeSection2['default'])(shape, startSideVector, endSideVector);
	  // 刷新文字
	  sectionText.position.x = (startSideVector.x + endSideVector.x) / 2;
	  sectionText.position.y = startSideVector.y + 15;
	  sectionText._dynamicTexture.clear().drawText(text, undefined, 24);
	  shape.data.startSideVector = startSideVector;
	  shape.data.endSideVector = endSideVector;
	}

	// 同区间两点弹开
	function sectionFlick(shape, currShape) {
	  var lineWidth = undefined,
	      startHeight = undefined,
	      endHeight = undefined,
	      startSide = undefined,
	      endSide = undefined,
	      startPoint = undefined,
	      endPoint = undefined,
	      sectionLine = undefined,
	      startSideVector = undefined,
	      endSideVector = undefined,
	      sectionText = undefined,
	      sectionColor = undefined,
	      text = undefined,
	      distanceX = undefined,
	      unitLength = undefined,
	      smallUnitVisible = undefined;
	  smallUnitVisible = _presenter2['default'].numberLine.data.smallUnitVisible;
	  lineWidth = _presenter2['default'].numberLine.data.lineWidth;
	  unitLength = _presenter2['default'].numberLine.data.unitLength;
	  startHeight = shape.data.startHeight;
	  endHeight = shape.data.endHeight;
	  startSideVector = shape.data.startSideVector;
	  endSideVector = shape.data.endSideVector;
	  sectionColor = shape.data.sectionColor;
	  startSide = shape.getObjectByName('startSide');
	  endSide = shape.getObjectByName('endSide');
	  startPoint = shape.getObjectByName('startPoint');
	  endPoint = shape.getObjectByName('endPoint');
	  sectionLine = shape.getObjectByName('sectionLine');
	  sectionText = shape.getObjectByName('sectionText');

	  if (smallUnitVisible) {
	    distanceX = unitLength / 10;
	  } else {
	    distanceX = unitLength;
	  }
	  if (currShape.name == 'startPoint') {
	    if (distanceX >= 3 * lineWidth) {
	      if (startPoint.position.x >= endPoint.position.x - 3 * lineWidth && startPoint.position.x <= endPoint.position.x) {
	        if (endPoint.position.x - distanceX >= _presenter2['default'].numberLine.data.pointA.x) {
	          startPoint.position.x = endPoint.position.x - distanceX;
	        } else {
	          startPoint.position.x = endPoint.position.x + distanceX;
	        }
	      }
	      if (startPoint.position.x <= endPoint.position.x + 3 * lineWidth && startPoint.position.x > endPoint.position.x) {
	        if (endPoint.position.x + distanceX <= _presenter2['default'].numberLine.data.pointB.x) {
	          startPoint.position.x = endPoint.position.x + distanceX;
	        } else {
	          startPoint.position.x = endPoint.position.x - distanceX;
	        }
	      }
	    } else {
	      var count = Math.ceil(3 * lineWidth / distanceX);
	      if (startPoint.position.x >= endPoint.position.x - 3 * lineWidth && startPoint.position.x <= endPoint.position.x) {
	        if (endPoint.position.x - count * distanceX >= _presenter2['default'].numberLine.data.pointA.x) {
	          startPoint.position.x = endPoint.position.x - count * distanceX;
	        } else {
	          startPoint.position.x = endPoint.position.x + count * distanceX;
	        }
	      }
	      if (startPoint.position.x <= endPoint.position.x + 3 * lineWidth && startPoint.position.x > endPoint.position.x) {
	        if (endPoint.position.x + count * distanceX <= _presenter2['default'].numberLine.data.pointB.x) {
	          startPoint.position.x = endPoint.position.x + count * distanceX;
	        } else {
	          startPoint.position.x = endPoint.position.x - count * distanceX;
	        }
	      }
	    }
	  } else if (currShape.name == 'endPoint') {
	    if (distanceX >= 3 * lineWidth) {
	      if (endPoint.position.x >= startPoint.position.x - 3 * lineWidth && endPoint.position.x <= startPoint.position.x) {
	        if (startPoint.position.x - distanceX >= _presenter2['default'].numberLine.data.pointA.x) {
	          endPoint.position.x = startPoint.position.x - distanceX;
	        } else {
	          endPoint.position.x = startPoint.position.x + distanceX;
	        }
	      }
	      if (endPoint.position.x <= startPoint.position.x + 3 * lineWidth && endPoint.position.x > startPoint.position.x) {
	        if (startPoint.position.x + distanceX <= _presenter2['default'].numberLine.data.pointB.x) {
	          endPoint.position.x = startPoint.position.x + distanceX;
	        } else {
	          endPoint.position.x = startPoint.position.x - distanceX;
	        }
	      }
	    } else {
	      var count = Math.ceil(3 * lineWidth / distanceX);
	      if (endPoint.position.x >= startPoint.position.x - 3 * lineWidth && endPoint.position.x <= startPoint.position.x) {
	        if (startPoint.position.x - count * distanceX >= _presenter2['default'].numberLine.data.pointA.x) {
	          endPoint.position.x = startPoint.position.x - count * distanceX;
	        } else {
	          endPoint.position.x = startPoint.position.x + count * distanceX;
	        }
	      }
	      if (endPoint.position.x <= startPoint.position.x + 3 * lineWidth && endPoint.position.x > startPoint.position.x) {
	        if (startPoint.position.x + count * distanceX <= _presenter2['default'].numberLine.data.pointB.x) {
	          endPoint.position.x = startPoint.position.x + count * distanceX;
	        } else {
	          endPoint.position.x = startPoint.position.x - count * distanceX;
	        }
	      }
	    }
	  } else {
	    if (startPoint.position.x <= endPoint.position.x && startPoint.position.x + 3 * lineWidth > endPoint.position.x) {
	      if (distanceX >= 3 * lineWidth) {
	        if (endPoint.position.x - distanceX >= _presenter2['default'].numberLine.data.pointA.x) {
	          startPoint.position.x -= distanceX;
	        } else {
	          endPoint.position.x += distanceX;
	        }
	      } else {
	        var count = Math.ceil(3 * lineWidth / distanceX);
	        if (endPoint.position.x - count * distanceX >= _presenter2['default'].numberLine.data.pointA.x) {
	          startPoint.position.x = endPoint.position.x - count * distanceX;
	        } else {
	          endPoint.position.x = startPoint.position.x + count * distanceX;
	        }
	      }
	    } else if (startPoint.position.x > endPoint.position.x && startPoint.position.x - 3 * lineWidth < endPoint.position.x) {
	      if (distanceX >= 3 * lineWidth) {
	        if (startPoint.position.x - distanceX >= _presenter2['default'].numberLine.data.pointA.x) {
	          endPoint.position.x -= distanceX;
	        } else {
	          startPoint.position.x += distanceX;
	        }
	      } else {
	        var count = Math.ceil(3 * lineWidth / distanceX);
	        if (startPoint.position.x - count * distanceX >= _presenter2['default'].numberLine.data.pointA.x) {
	          endPoint.position.x = startPoint.position.x - count * distanceX;
	        } else {
	          startPoint.position.x = endPoint.position.x + count * distanceX;
	        }
	      }
	    }
	  }

	  startSideVector.x = startPoint.position.x;
	  endSideVector.x = endPoint.position.x;

	  // 更新区间三条线
	  (0, _updateVertices2['default'])(startSide, startPoint.position, new THREE.Vector3(startSideVector.x, startHeight, 0), lineWidth);
	  (0, _updateVertices2['default'])(endSide, endPoint.position, new THREE.Vector3(endSideVector.x, endHeight, 0), lineWidth);
	  (0, _updateVertices2['default'])(sectionLine, startSideVector, endSideVector, lineWidth);
	  // 计算应该显示的文字
	  text = (0, _computeSection2['default'])(shape, startSideVector, endSideVector);
	  // 刷新文字
	  sectionText.position.x = (startSideVector.x + endSideVector.x) / 2;
	  sectionText.position.y = startSideVector.y + 15;
	  sectionText._dynamicTexture.clear().drawText(text, undefined, 24);
	  shape.data.startSideVector = startSideVector;
	  shape.data.endSideVector = endSideVector;
	}

	// 向上堆叠区间端点
	function sectionPile(shape, currShape) {
	  var lineWidth = undefined,
	      startHeight = undefined,
	      endHeight = undefined,
	      startSide = undefined,
	      endSide = undefined,
	      startPoint = undefined,
	      endPoint = undefined,
	      sectionLine = undefined,
	      startSideVector = undefined,
	      endSideVector = undefined,
	      sectionText = undefined,
	      sectionColor = undefined,
	      text = undefined,
	      distanceX = undefined,
	      startArr = [],
	      endArr = [];
	  _presenter2['default'].numberLine = shape.parent;
	  lineWidth = _presenter2['default'].numberLine.data.lineWidth;
	  startHeight = shape.data.startHeight;
	  endHeight = shape.data.endHeight;
	  startSideVector = shape.data.startSideVector;
	  endSideVector = shape.data.endSideVector;
	  sectionColor = shape.data.sectionColor;
	  startSide = shape.getObjectByName('startSide');
	  endSide = shape.getObjectByName('endSide');
	  startPoint = shape.getObjectByName('startPoint');
	  endPoint = shape.getObjectByName('endPoint');
	  sectionLine = shape.getObjectByName('sectionLine');
	  sectionText = shape.getObjectByName('sectionText');

	  // 求区间点重叠的最近点坐标
	  nearPoint(startPoint, endPoint, lineWidth);
	  // 弹开同区间两个端点
	  sectionFlick(shape, currShape);
	  // 弹开后在重新求区间点重叠的最近点坐标
	  nearPoint(startPoint, endPoint, lineWidth);

	  // 计算区间端点位置上堆叠的端点数量
	  for (var i = 0; i < _toolbar.toolbarStatus.referInterval.length; i++) {
	    var referPoint = _toolbar.toolbarStatus.referInterval[i];
	    // if(referPoint.id != startPoint.id && referPoint.id != endPoint.id) {
	    if (startPoint.position.x - referPoint.position.x == 0) {
	      startArr.push(referPoint);
	    }
	    if (endPoint.position.x - referPoint.position.x == 0) {
	      endArr.push(referPoint);
	    }
	    // }
	  }
	  startArr = sectionSort(startArr);
	  endArr = sectionSort(endArr);
	  if (startArr.length >= endArr.length) {
	    updatePile(endArr, lineWidth);
	    updatePile(startArr, lineWidth);
	  } else {
	    updatePile(startArr, lineWidth);
	    updatePile(endArr, lineWidth);
	  }

	  updateSections(shape);
	  _toolbar.toolbarStatus.refreshStartPoints = false;
	  _toolbar.toolbarStatus.refreshEndPoints = false;
	}

	// 更新区间层级
	function updateSections(shape) {
	  var parent = shape.parent;
	  var children = [];
	  for (var i = 0, len = parent.children.length; i < len; i++) {
	    var child = parent.children[i];
	    if (child.name == 'section') {
	      children.push(child);
	    }
	  }
	  children = children.sort(function (a, b) {
	    return a.data.index - b.data.index;
	  });
	  for (var i = 0, len = children.length; i < len; i++) {
	    var child = children[i];
	    if (child.name == 'section' && child.data.index > shape.data.index) {
	      (0, _setZPosition2['default'])(child);
	    }
	  }
	}

	// 获取区间端点上堆叠的点
	function getPile(startPoint, endPoint) {
	  var startArr = [],
	      endArr = [];
	  for (var i = 0; i < _toolbar.toolbarStatus.referInterval.length; i++) {
	    var referPoint = _toolbar.toolbarStatus.referInterval[i];
	    if (referPoint.id != startPoint.id && referPoint.id != endPoint.id) {
	      if (startPoint.position.x == referPoint.position.x) {
	        startArr.push(referPoint);
	      }
	      if (endPoint.position.x == referPoint.position.x) {
	        endArr.push(referPoint);
	      }
	    }
	  }
	  return {
	    startArr: startArr,
	    endArr: endArr
	  };
	}

	// 更新堆叠上的区间
	function updatePile(arr, lineWidth) {
	  var point = undefined,
	      shape = undefined;
	  for (var i = 0; i < arr.length; i++) {
	    point = arr[i];
	    shape = point.parent;
	    point.position.y = i * 3 * lineWidth;
	    update(shape, point, lineWidth);
	  }
	}

	// 更新单个区间
	function update(shape, point, lineWidth) {
	  var startHeight = undefined,
	      endHeight = undefined,
	      startSideVector = undefined,
	      endSideVector = undefined,
	      sectionColor = undefined,
	      startPoint = undefined,
	      endPoint = undefined,
	      startSide = undefined,
	      endSide = undefined,
	      sectionLine = undefined,
	      sectionText = undefined,
	      text = undefined;

	  startHeight = shape.data.startHeight;
	  endHeight = shape.data.endHeight;
	  startSideVector = shape.data.startSideVector;
	  endSideVector = shape.data.endSideVector;
	  sectionColor = shape.data.sectionColor;
	  startSide = shape.getObjectByName('startSide');
	  endSide = shape.getObjectByName('endSide');
	  sectionLine = shape.getObjectByName('sectionLine');
	  sectionText = shape.getObjectByName('sectionText');
	  if (point.name == 'startPoint') {
	    startPoint = point;
	    endPoint = shape.getObjectByName('endPoint');
	  } else {
	    endPoint = point;
	    startPoint = shape.getObjectByName('startPoint');
	  }
	  startHeight = startHeight - startPoint.position.y;
	  endHeight = endHeight - endPoint.position.y;

	  startSideVector.x = startPoint.position.x;
	  endSideVector.x = endPoint.position.x;
	  startSideVector.y = startPoint.position.y + startHeight - lineWidth / 2;
	  endSideVector.y = endPoint.position.y + endHeight - lineWidth / 2;

	  // 更新区间三条线
	  (0, _updateVertices2['default'])(startSide, startPoint.position, new THREE.Vector3(startPoint.position.x, startPoint.position.y + startHeight, 0), lineWidth);
	  (0, _updateVertices2['default'])(endSide, endPoint.position, new THREE.Vector3(endPoint.position.x, endPoint.position.y + endHeight, 0), lineWidth);
	  (0, _updateVertices2['default'])(sectionLine, startSideVector, endSideVector, lineWidth);
	  // // 计算应该显示的文字
	  // text = computeSection(shape, startSideVector, endSideVector);
	  // // 刷新文字
	  // sectionText._dynamicTexture.clear().drawText(text,undefined, 16, sectionColor);
	  // sectionText.position.x = (startSideVector.x + endSideVector.x)/2;
	  // sectionText.position.y = startSideVector.y + 18;
	  shape.data.startSideVector = startSideVector;
	  shape.data.endSideVector = endSideVector;
	  // setZPosition(shape);
	}

	// 求操作区间点上最近点的坐标
	function nearPoint(startPoint, endPoint, lineWidth) {
	  var mixStartDis = undefined,
	      mixStartPoint = undefined,
	      mixEndDis = undefined,
	      mixEndPoint = undefined;
	  // 计算移动的区间的两个端点与其它端点最近的，以便进行位置堆叠
	  for (var i = 0; i < _toolbar.toolbarStatus.referInterval.length; i++) {
	    var referPoint = _toolbar.toolbarStatus.referInterval[i];
	    if (referPoint.id != startPoint.id && referPoint.id != endPoint.id) {
	      if (!mixStartDis) {
	        mixStartDis = Math.abs(startPoint.position.x - referPoint.position.x);
	        if (mixStartDis < 3 * lineWidth) {
	          mixStartPoint = referPoint;
	        }
	      } else {
	        if (Math.abs(startPoint.position.x - referPoint.position.x) < mixStartDis) {
	          mixStartDis = Math.abs(startPoint.position.x - referPoint.position.x);
	          if (mixStartDis < 3 * lineWidth) {
	            mixStartPoint = referPoint;
	          }
	        }
	      }

	      if (!mixEndDis) {
	        mixEndDis = Math.abs(endPoint.position.x - referPoint.position.x);
	        if (mixEndDis < 3 * lineWidth) {
	          mixEndPoint = referPoint;
	        }
	      } else {
	        if (Math.abs(endPoint.position.x - referPoint.position.x) < mixEndDis) {
	          mixEndDis = Math.abs(endPoint.position.x - referPoint.position.x);
	          if (mixEndDis < 3 * lineWidth) {
	            mixEndPoint = referPoint;
	          }
	        }
	      }
	    }
	  }
	  // 修改区间的x轴位置，方便计算弹开与堆叠
	  if (mixStartPoint) {
	    startPoint.position.x = mixStartPoint.position.x;
	  }
	  if (mixEndPoint) {
	    endPoint.position.x = mixEndPoint.position.x;
	  }
	}

	// 区间排序
	function sectionSort(arr) {
	  var sections = [],
	      indexs = [];
	  for (var i = 0; i < arr.length; i++) {
	    indexs.push(arr[i].parent.data.index);
	  }
	  indexs = indexs.sort();
	  for (var i = 0; i < indexs.length; i++) {
	    for (var j = 0; j < arr.length; j++) {
	      if (arr[j].parent.data.index == indexs[i]) {
	        sections.push(arr[j]);
	        break;
	      }
	    }
	  }
	  return sections;
	}
	module.exports = exports['default'];

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _updateSection = __webpack_require__(45);

	var _updateSection2 = _interopRequireDefault(_updateSection);

	var _refreshSection = __webpack_require__(41);

	var _refreshSection2 = _interopRequireDefault(_refreshSection);

	exports['default'] = function (currShape) {
		var currCircle = currShape.getObjectByName('inCircle');
		if (currCircle.visible) {
			currCircle.visible = false;
			currShape.data.status = true;
		} else {
			currCircle.visible = true;
			currShape.data.status = false;
		}
		(0, _updateSection2['default'])(currShape, 0, 'up', 'status');
		(0, _refreshSection2['default'])();
	};

	module.exports = exports['default'];

/***/ },
/* 47 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	exports["default"] = function (point, group) {
		var smallUnit = group.data.smallUnitVisible,
		    unit = group.data.unitMultiple,
		    radix = undefined,
		    remainder = undefined,
		    isNegative = point.x - group.position.x < 0,
		    multiple = undefined;

		radix = smallUnit ? group.data.unitLength / 10 : group.data.unitLength;
		multiple = parseInt((point.x - group.position.x) / radix);
		remainder = (point.x - group.position.x) % radix;
		if (Math.abs(remainder) >= radix / 2) {
			isNegative ? multiple-- : multiple++;
		}
		point.x = multiple * radix + group.position.x;
	};

	module.exports = exports["default"];

/***/ },
/* 48 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	exports["default"] = function (mouseData, group) {
		var pointX = mouseData.movePoint.x - mouseData.startPoint.x;
		var smallUnit = group.data.smallUnitVisible,
		    unit = group.data.unitMultiple,
		    radix = undefined,
		    remainder = undefined,
		    isNegative = (mouseData.recordDistance += pointX) < 0,
		    multiple = undefined;

		radix = smallUnit ? group.data.unitLength / 10 : group.data.unitLength;
		multiple = parseInt(mouseData.recordDistance / radix);
		remainder = mouseData.recordDistance % radix;
		if (Math.abs(remainder) >= radix / 2) {
			isNegative ? multiple-- : multiple++;
		}
		pointX = multiple * (radix * 100) / 100;

		return pointX;
	};

	module.exports = exports["default"];

/***/ },
/* 49 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	    value: true
	});

	exports['default'] = function (target, regulation, group, distanceX) {
	    var b = target == 'outset',
	        targetPositionX = b ? parseInt(regulation.startPoint.x * 10) + parseInt(distanceX * 10) : parseInt(regulation.endPoint.x * 10) + parseInt(distanceX * 10),
	        limitDistance = b ? Math.abs(targetPositionX - parseInt(regulation.endPoint.x * 10)) : Math.abs(targetPositionX - parseInt(regulation.startPoint.x * 10));

	    if (limitDistance >= 400 || limitDistance >= group.data.unitLength / 2 * 10) {
	        if (targetPositionX <= parseInt(group.data.pointB.x * 10) && targetPositionX >= parseInt(group.data.pointA.x * 10)) {
	            b ? regulation.startPoint.x = regulation.startPoint.x + distanceX : regulation.endPoint.x = regulation.endPoint.x + distanceX;
	            regulation.update();
	        } else {
	            return true;
	        }
	    } else {
	        return true;
	    }
	};

	module.exports = exports['default'];

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _setZPosition = __webpack_require__(43);

	var _setZPosition2 = _interopRequireDefault(_setZPosition);

	exports['default'] = function (obj, color, group) {
		if (!obj) {
			return;
		}
		var originColor = obj.material.color.getHex();
		obj.material.color.setHex(color);
		if (group) {
			var target = getTarget(obj, group);
			(0, _setZPosition2['default'])(target);
		}
		return {
			obj: obj,
			originColor: originColor
		};
	};

	function getTarget(obj, group) {
		while (obj.parent && obj.parent !== group) {
			obj = obj.parent;
			getTarget(obj, group);
		}
		return obj;
	}
	module.exports = exports['default'];

/***/ },
/* 51 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	exports["default"] = function (obj, toolbar, type) {
		if (!obj) {
			return;
		}
		var index = toolbar.pointArray.indexOf(toolbar.tempPoint);
		if (index > -1) {
			type ? toolbar.pointArray.splice(index, 1) : toolbar.pointArray[index] = obj.position.x;
		}
		toolbar.tempPoint = null;
	};

	module.exports = exports["default"];

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _threeManger = __webpack_require__(16);

	var _presenter = __webpack_require__(1);

	var _presenter2 = _interopRequireDefault(_presenter);

	var _destroyThreeObject = __webpack_require__(29);

	var _destroyThreeObject2 = _interopRequireDefault(_destroyThreeObject);

	var _toolbar = __webpack_require__(30);

	var _EventDocumentEvent = __webpack_require__(23);

	exports['default'] = function () {
		$(_presenter2['default'].view).find('.numberLine').hide();
		//删除所有图形
		(0, _toolbar.destoryToolbar)();
		_presenter2['default'].numberLine = null;
		_presenter2['default'].renderer = null;
		for (var index = _threeManger.scene.children.length - 1; index >= 0; index--) {
			var sceneItem = _threeManger.scene.children[index];
			if (sceneItem.name === 'tool') continue;
			_threeManger.scene.remove(sceneItem);
			(0, _destroyThreeObject2['default'])(sceneItem);
			sceneItem = null;
		}

		(0, _EventDocumentEvent.removeEvent)();
		(0, _threeManger.destroy)();
		// 删除清空按钮置灰
		$(_presenter2['default'].view).find('.clear_all').addClass("btn_disable");
		$(_presenter2['default'].view).find('.clean').addClass("btn_disable");
		// 关闭提示
		$(_presenter2['default'].view).find(".textbox").hide();
	};

	module.exports = exports['default'];

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by Administrator on 2016/1/25.
	 */
	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _presenter = __webpack_require__(1);

	var _presenter2 = _interopRequireDefault(_presenter);

	var _threeManger = __webpack_require__(16);

	var _UtilsToolbar = __webpack_require__(30);

	exports['default'] = function () {
		var pushData = {};

		//监听推送事件
		$("#pushTest").click(function () {
			pushData = {
				numberLine: {},
				markPoint: [],
				section: [],
				regulation: [],
				toolbar: toolbar
			};
			getData();
		});

		function getData() {
			var childrens = _presenter2['default'].numberLine.children;

			pushData.numberLine.position = _presenter2['default'].numberLine.position;
			pushData.numberLine.data = _presenter2['default'].numberLine.data;

			for (var i = 0; i < childrens.length; i++) {
				var temp = {},
				    temp2 = {},
				    tempReg = {};
				if (childrens[i].name == "markPoint") {
					temp.id = childrens[i].id;
					temp.position = childrens[i].position;
					temp.userData = childrens[i].userData;
					pushData.markPoint.push(temp);
				}
				if (childrens[i].name == "section") {
					temp2.id = childrens[i].id;
					temp2.position = childrens[i].position;
					temp2.data = childrens[i].data;
					pushData.section.push(temp2);
				}
				if (childrens[i].name == "regulation") {

					tempReg.id = childrens[i].id;
					tempReg.position = childrens[i].position;
					tempReg.color = childrens[i].color;
					tempReg.startPoint = childrens[i].startPoint;
					tempReg.endPoint = childrens[i].endPoint;
					pushData.regulation.push(tempReg);
				}
			}
			pushData.toolbar = _UtilsToolbar.toolbarStatus._action;
			console.log(pushData);
		}
	};

	module.exports = exports['default'];

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	/* global isApp Bridge */
	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	var _constants = __webpack_require__(17);

	exports['default'] = function (eventName, data) {
		if (isApp && Bridge && Bridge.callNative) {
			return Bridge.callNative(_constants.callNativePath, eventName, data);
		}
		return false;
	};

	module.exports = exports['default'];

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _presenter = __webpack_require__(1);

	var _presenter2 = _interopRequireDefault(_presenter);

	exports['default'] = function (view) {
		view.find('.mark').find('.com_btn_text').html(_presenter2['default']._i18n['nl_mark']);
		view.find('.interval').find('.com_btn_text').html(_presenter2['default']._i18n['nl_interval']);
		view.find('.regulation').find('.com_btn_text').html(_presenter2['default']._i18n['nl_regulation']);
		view.find('.mix').find('.com_btn_text').html(_presenter2['default']._i18n['nl_mix']);
		view.find('.union').find('.com_btn_text').html(_presenter2['default']._i18n['nl_union']);
		view.find('.clean').find('.com_btn_text').html(_presenter2['default']._i18n['nl_clean']);
		view.find('.clear_all').find('.com_btn_text').html(_presenter2['default']._i18n['nl_clear_all']);
		view.find('.msg_box').find('.msg_text').html(_presenter2['default']._i18n['nl_clear_tip']);
		view.find('.msg_box').find('.cancel').html(_presenter2['default']._i18n['nl_cancel']);
		view.find('.msg_box').find('.confirm').html(_presenter2['default']._i18n['nl_confirm']);
		view.find('.textbox').find('h4').html(_presenter2['default']._i18n['nl_operation_tip_title']);
		view.find('.textbox').find('p').eq(0).html(_presenter2['default']._i18n['nl_operation_tip_content1']);
		view.find('.textbox').find('p').eq(1).html(_presenter2['default']._i18n['nl_operation_tip_content2']);
		view.find('.textbox').find('p').eq(2).html(_presenter2['default']._i18n['nl_operation_tip_content3']);
		view.find('.textbox').find('p').eq(3).html(_presenter2['default']._i18n['nl_operation_tip_content4']);
	};

	module.exports = exports['default'];

/***/ },
/* 56 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	exports["default"] = function (state) {
		var currentState;
		if (state) {
			currentState = JSON.parse(state);
			// ToDo:处理Module的状态恢复
		}
	};

	module.exports = exports["default"];

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * 获得当前Module的状态信息
	 * 可用于Module的状态恢复和保存
	 */
	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _presenter = __webpack_require__(1);

	var _presenter2 = _interopRequireDefault(_presenter);

	exports['default'] = function () {
	  // TODO: 添加符合Module需求的状态对象
	  var moduleState = JSON.stringify({
	    module_id: _presenter2['default'].model.ID
	  });
	  return moduleState;
	};

	module.exports = exports['default'];

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * 翻页时隐藏模块
	 */
	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _presenter = __webpack_require__(1);

	var _presenter2 = _interopRequireDefault(_presenter);

	var _UtilsClose = __webpack_require__(52);

	var _UtilsClose2 = _interopRequireDefault(_UtilsClose);

	exports['default'] = function () {
		if ($(_presenter2['default'].view).find('.numberLine').css('display') === 'block') {
			(0, _UtilsClose2['default'])();
		}
	};

	module.exports = exports['default'];

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _presenter = __webpack_require__(1);

	var _presenter2 = _interopRequireDefault(_presenter);

	/**
	 * @param path {String} 服务器基础地址
	 */

	exports['default'] = function (path) {
	  _presenter2['default'].path = path;
	};

	module.exports = exports['default'];

/***/ },
/* 60 */
/***/ function(module, exports) {

	// 销毁 module 占用的内存，比如 DOM 事件的解除绑定
	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	exports["default"] = function () {};

	module.exports = exports["default"];

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _presenter = __webpack_require__(1);

	var _presenter2 = _interopRequireDefault(_presenter);

	exports['default'] = function (properties) {
		console.log('setLocationProperties');
		_presenter2['default']._i18n = properties;
	};

	module.exports = exports['default'];

/***/ }
/******/ ]);
 return presenter() }]]>

</presenter>


<resources>

<file src='./resources/close_btn.png' />
<file src='./resources/icons_addcutline_atv.png' />
<file src='./resources/icons_addcutline_nor.png' />
<file src='./resources/icons_addcutline_off.png' />
<file src='./resources/icons_clean_atv.png' />
<file src='./resources/icons_clean_nor.png' />
<file src='./resources/icons_clean_off.png' />
<file src='./resources/icons_delete_atv.png' />
<file src='./resources/icons_delete_nor.png' />
<file src='./resources/icons_delete_off.png' />
<file src='./resources/icons_interval_atv.png' />
<file src='./resources/icons_interval_nor.png' />
<file src='./resources/icons_interval_off.png' />
<file src='./resources/icons_landmarks_atv.png' />
<file src='./resources/icons_landmarks_nor.png' />
<file src='./resources/icons_landmarks_off.png' />
<file src='./resources/icons_little_tick.png' />
<file src='./resources/icons_mixed_atv.png' />
<file src='./resources/icons_mixed_nor.png' />
<file src='./resources/icons_mixed_off.png' />
<file src='./resources/icons_union_atv.png' />
<file src='./resources/icons_union_nor.png' />
<file src='./resources/icons_union_off.png' />
<file src='./resources/icon_popBack.png' />
<file src='./resources/icon_popTip.png' />
<file src='./resources/icon_toolNumberLines.png' />
<file src='./resources/locations/en/lang.json' />
<file src='./resources/locations/en_US/lang.json' />
<file src='./resources/locations/ja/lang.json' />
<file src='./resources/locations/ja_JP/lang.json' />
<file src='./resources/locations/zh/lang.json' />
<file src='./resources/locations/zh_CN/lang.json' />
<file src='./resources/tips_pop_b_bg.png' />
<file src='./resources/tips_pop_lb_bg.png' />
<file src='./resources/tips_pop_lt_bg.png' />


</resources>

</addon>