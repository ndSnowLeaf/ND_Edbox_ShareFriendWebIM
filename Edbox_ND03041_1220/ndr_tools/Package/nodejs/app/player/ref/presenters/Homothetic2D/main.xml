<?xml version='1.0' encoding='UTF-8'?>
<addon id="templateid"><properties/><dependencies><jsDependency><javaScript name="tools_common" version="1.3.0"/><javaScript name="snap_svg" version="1.0.0"/><javaScript name="Svg2DCalculate" version="1.0.1"/></jsDependency></dependencies><css><![CDATA[.exam_skin_wood .Homothetic_wrapper{background-color:#bfd3e2;padding-bottom:5.75em;padding-top:2.6667em;overflow:hidden}.exam_skin_wood .Homothetic_wrapper,.exam_skin_wood .Homothetic_wrapper .Homothetic_main{position:relative;width:100%;height:100%}.exam_skin_wood .Homothetic_wrapper .Homothetic_bottom{position:absolute;height:5.75em;background-color:#cfdee9;width:100%;bottom:0;left:0;text-align:center}.exam_skin_wood .Homothetic_wrapper .Homothetic_bottom:after{display:inline-block;width:0;height:100%;content:"center";vertical-align:middle;overflow:hidden}.exam_skin_wood .Homothetic_main .homo_tip_scale{position:absolute;top:.625em;left:5em}.exam_skin_wood .Homothetic_main .homo_tip_scale span{font-family:Microsoft yahei;color:#384650}.exam_skin_wood .Homothetic_main .homo_tip_scale .text{font-size:2em}.exam_skin_wood .Homothetic_main .homo_tip_scale .num{font-size:3.54167em}.exam_skin_wood .Homothetic_main .Homothetic_main_bd{width:100%;height:100%;padding-left:4em;padding-right:13.33333em}.exam_skin_wood .Homothetic_main .Homothetic_main_bd .Homothetic_main_bd_box{width:62.5em;height:100%;margin:auto}.exam_skin_wood .Homothetic_main .Homothetic_main_right_menu{display:inline-block;width:7.25em;height:30.08333em;background:#b1c9dc;border-radius:.25em;position:absolute;right:6em;top:5em;border-radius:.20833em}.exam_skin_wood .Homothetic_main .Homothetic_main_right_menu .homo_menu_box{position:relative;height:100%;width:100%;margin:0;padding:0}.exam_skin_wood .Homothetic_main .Homothetic_main_right_menu .homo_menu_box.change_pause .homo_btn_play{background:url(resources/wood/images/icon_pause.png) no-repeat;background-size:100% auto}.exam_skin_wood .Homothetic_main .Homothetic_main_right_menu .homo_menu_box .homo_btn_play{position:absolute;bottom:0;left:-5.41667em;width:4.25em;height:4.25em;background:url(resources/wood/images/icon_play.png) no-repeat;background-size:100% auto;background-position:0 0}.exam_skin_wood .Homothetic_main .Homothetic_main_right_menu .homo_menu_box .homo_btn_play.ui_btn_active,.exam_skin_wood .Homothetic_main .Homothetic_main_right_menu .homo_menu_box .homo_btn_play:active{background-size:100% auto;background-position:0 100%}.exam_skin_wood .Homothetic_main .Homothetic_main_right_menu .homo_menu_item{position:relative;float:left;width:100%;height:6.54167em;background:url(resources/wood/images/icon_aside.png) no-repeat;background-size:7.33333em auto;cursor:pointer}.exam_skin_wood .Homothetic_main .Homothetic_main_right_menu .homo_menu_item.on,.exam_skin_wood .Homothetic_main .Homothetic_main_right_menu .homo_menu_item:active{background-color:rgba(87,143,184,.3)}.exam_skin_wood .Homothetic_main .Homothetic_main_right_menu .homo_menu_item.homo_item1{background-position:0 top;border-top-left-radius:.20833em;border-top-right-radius:.20833em}.exam_skin_wood .Homothetic_main .Homothetic_main_right_menu .homo_menu_item.homo_item2{background-position:0 -6.95833em}.exam_skin_wood .Homothetic_main .Homothetic_main_right_menu .homo_menu_item.homo_item3{background-position:0 -13.91667em}.exam_skin_wood .Homothetic_main .Homothetic_main_right_menu .homo_menu_item.homo_item4{position:relative;float:left;width:100%;height:10.5em;cursor:default;background:0 0;text-align:center}.exam_skin_wood .Homothetic_main .Homothetic_main_right_menu .homo_menu_item.homo_item4:before{content:"";display:inline-block;width:100%;height:0;border-top:1px solid #96abbb;border-bottom:1px solid #cee0ee;position:absolute;left:0;top:0}.exam_skin_wood .Homothetic_main .Homothetic_main_right_menu .homo_menu_item.homo_item4 .homo_item4_text{display:inline-block;margin-top:.91667em;margin-bottom:.54167em}.exam_skin_wood .Homothetic_main .Homothetic_main_right_menu .homo_menu_item.homo_item4 .homo_item4_text .txt{display:inline-block;color:#384650;font-size:2em;font-family:Microsoft yahei;font-weight:700}.exam_skin_wood .Homothetic_main .Homothetic_main_right_menu .homo_menu_item.homo_item4 .homo_item4_input_box{position:relative;display:block;margin-left:.95833em;width:5.58333em;height:5.5em}.exam_skin_wood .Homothetic_main .Homothetic_main_right_menu .homo_menu_item.homo_item4 .homo_item4_input_box:after{position:absolute;left:0;top:50%;margin-top:-.0625em;content:"";width:100%;height:.125em;background-color:#384650}.exam_skin_wood .Homothetic_main .Homothetic_main_right_menu .homo_menu_item.homo_item4 .homo_item4_input_box .homo_drop_num_wrap{position:relative;width:5.58333em;height:2.41667em}.exam_skin_wood .Homothetic_main .Homothetic_main_right_menu .homo_menu_item.homo_item4 .homo_item4_input_box .homo_drop_num_wrap1{margin-bottom:.66667em}.exam_skin_wood .Homothetic_main .Homothetic_main_right_menu .homo_menu_item.homo_item4 .homo_item4_input_box .homo_drop_num{position:relative;display:inline-block;width:5.58333em;height:100%;overflow:hidden;text-align:center;vertical-align:middle;border:1px solid #8b8b8b;border-radius:.29167em;background:-webkit-linear-gradient(bottom,#fff,#e9e9e9);background:linear-gradient(0deg,#fff 0,#e9e9e9)}.exam_skin_wood .Homothetic_main .Homothetic_main_right_menu .homo_menu_item.homo_item4 .homo_item4_input_box .homo_drop_num .num_input{position:absolute;top:.16667em;left:.75em;width:2em;height:2em}.exam_skin_wood .Homothetic_main .Homothetic_main_right_menu .homo_menu_item.homo_item4 .homo_item4_input_box .homo_drop_num .num_input .num_input_text{font-size:2em;font-family:Microsoft yahei;font-weight:700;color:#4d4d4d}.exam_skin_wood .Homothetic_main .Homothetic_main_right_menu .homo_menu_item.homo_item4 .homo_item4_input_box .homo_drop_num.ui_btn_active .homo_drop_arrow,.exam_skin_wood .Homothetic_main .Homothetic_main_right_menu .homo_menu_item.homo_item4 .homo_item4_input_box .homo_drop_num:active .homo_drop_arrow{background-position:0 100%}.exam_skin_wood .Homothetic_main .Homothetic_main_right_menu .homo_menu_item.homo_item4 .homo_item4_input_box .homo_drop_num.ui_open .homo_drop_arrow{background-image:url(resources/wood/images/drop_arrow_1.png)}.exam_skin_wood .Homothetic_main .Homothetic_main_right_menu .homo_menu_item.homo_item4 .homo_item4_input_box .homo_drop_num.click_disabled{border-color:#93989a;background:-webkit-linear-gradient(top,#c8d1d7,#c1c8cc);background:linear-gradient(180deg,#c8d1d7 0,#c1c8cc);cursor:default}.exam_skin_wood .Homothetic_main .Homothetic_main_right_menu .homo_menu_item.homo_item4 .homo_item4_input_box .homo_drop_num.click_disabled .homo_drop_arrow{filter:Gray;-webkit-filter:grayscale(100%);background-position:0 0!important;opacity:.3}.exam_skin_wood .Homothetic_main .Homothetic_main_right_menu .homo_menu_item.homo_item4 .homo_item4_input_box .homo_drop_num.click_disabled .num_input .num_input_text{color:#969fa4}.exam_skin_wood .Homothetic_main .Homothetic_main_right_menu .homo_menu_item.homo_item4 .homo_item4_input_box .homo_drop_preload_img01{display:none;background-image:url(resources/wood/images/drop_arrow_1.png)}.exam_skin_wood .Homothetic_main .Homothetic_main_right_menu .homo_menu_item.homo_item4 .homo_item4_input_box .homo_drop_arrow{width:2.25em;height:2.25em;overflow:hidden;background:url(resources/wood/images/drop_arrow.png) no-repeat;background-size:100% 4.91667em;background-position:0 0;position:absolute;right:.08333em;top:.08333em}.exam_skin_wood .Homothetic_main .Homothetic_main_right_menu .homo_menu_item.homo_item4 .homo_item4_input_box .homo_drop_arrow.ui_btn_active,.exam_skin_wood .Homothetic_main .Homothetic_main_right_menu .homo_menu_item.homo_item4 .homo_item4_input_box .homo_drop_arrow:active{background-position:0 100%}.exam_skin_wood .Homothetic_main .Homothetic_main_right_menu .homo_menu_item.homo_item4 .homo_item4_input_box .homo_drop_numselect{white-space:normal;z-index:100;position:absolute;bottom:2.5em;right:0;left:-148%;pointer-events:none}.exam_skin_wood .Homothetic_main .Homothetic_main_right_menu .homo_menu_item.homo_item4 .homo_item4_input_box .homo_drop_numselect .homo_numselect_wrap{border:1px solid #686868;padding:.58333em .5em;background-color:#ebebeb;text-align:center;display:inline-block;pointer-events:auto}.exam_skin_wood .Homothetic_main .Homothetic_main_right_menu .homo_menu_item.homo_item4 .homo_item4_input_box .homo_drop_numselect.hide_dom{display:none}.exam_skin_wood .Homothetic_main .Homothetic_main_right_menu .homo_menu_item.homo_item4 .homo_item4_input_box .homo_drop_numselect a{display:inline-block;width:3.66667em;height:2.25em;line-height:2.25em;color:#4d4d4d;background:#fff;text-align:center;border-radius:.16667em;border:1px solid #9c9c9c;margin:.16667em}.exam_skin_wood .Homothetic_main .Homothetic_main_right_menu .homo_menu_item.homo_item4 .homo_item4_input_box .homo_drop_numselect a.ui_btn_active,.exam_skin_wood .Homothetic_main .Homothetic_main_right_menu .homo_menu_item.homo_item4 .homo_item4_input_box .homo_drop_numselect a:active{background:#31b0ee;color:#fff;border-color:#007ab6}.exam_skin_wood .Homothetic_main .Homothetic_main_right_menu .homo_menu_item.homo_item4 .homo_item4_input_box .homo_drop_numselect a span{font-size:1.5em;font-family:Microsoft yahei;vertical-align:top}.exam_skin_wood .Homothetic_bottom .com_btns{min-width:8.91667em;padding:0 .83333em}.exam_skin_wood .Homothetic_bottom .homo_btns_list{height:100%}.exam_skin_wood .Homothetic_bottom .homo_btns_list:after{display:inline-block;width:0;height:100%;content:"center";vertical-align:middle;overflow:hidden}.exam_skin_wood .Homothetic_bottom .homo_btns_list .homo_btn_item{cursor:pointer;display:inline-block;vertical-align:middle;margin-left:2.08333em;margin-right:2.08333em}.exam_skin_wood .Homothetic_bottom .homo_btn_1,.exam_skin_wood .Homothetic_bottom .homo_btns_list .homo_btn_outside{position:relative}.exam_skin_wood .Homothetic_bottom .homo_btn_1.show_2circle .homo_icon_2circle{display:block}.exam_skin_wood .Homothetic_bottom .homo_btn_1.show_2circle .homo_btn_outside .homo_btn_2_sanjiao{display:inline-block;position:absolute;width:1.5em;height:1.5em;background:url(resources/wood/images/icon_sanjiao.png) no-repeat;background-size:100% auto;background-position:0 0;left:50%;margin-left:-.75em;top:-28%}.exam_skin_wood .Homothetic_bottom .homo_btn_1.show_2circle .homo_btn_outside.ui_btn_active .homo_btn_2_sanjiao,.exam_skin_wood .Homothetic_bottom .homo_btn_1.show_2circle .homo_btn_outside:active .homo_btn_2_sanjiao{background:url(resources/wood/images/icon_sanjiao.png) no-repeat;background-position:left -1.91667em;background-size:100% auto}.exam_skin_wood .Homothetic_bottom .homo_btn_1.show_2circle .homo_btn_outside.click_disabled .homo_btn_2_sanjiao{background:url(resources/wood/images/icon_sanjiao.png) no-repeat;background-position:0 100%;background-size:100% auto}.exam_skin_wood .Homothetic_bottom .homo_btn_1.show_2circle .homo_icon_com{position:absolute;display:inline-block;width:5em;height:5em;text-align:center;line-height:5em;background:url(resources/wood/images/icon_circle.png) no-repeat;background-size:5em auto;background-position:0 0}.exam_skin_wood .Homothetic_bottom .homo_btn_1.show_2circle .homo_icon_com .homo_icon_text_com{color:#384650;font-family:microsoft yahei;font-size:1.5em}.exam_skin_wood .Homothetic_bottom .homo_btn_1.show_2circle .homo_icon_com.ui_btn_active,.exam_skin_wood .Homothetic_bottom .homo_btn_1.show_2circle .homo_icon_com:active{background-size:5em auto;background-position:left -5.41667em}.exam_skin_wood .Homothetic_bottom .homo_btn_1.show_2circle .homo_icon_com.ui_btn_active .homo_icon_text_com,.exam_skin_wood .Homothetic_bottom .homo_btn_1.show_2circle .homo_icon_com:active .homo_icon_text_com{color:#fff}.exam_skin_wood .Homothetic_bottom .homo_btn_1.show_2circle .homo_icon_com.click_disabled{background-size:5em auto;background-position:0 100%;pointer-events:none}.exam_skin_wood .Homothetic_bottom .homo_btn_1.show_2circle .homo_icon_com.click_disabled .homo_icon_text_com{color:#97a0a6}.exam_skin_wood .Homothetic_bottom .homo_btn_1 .homo_icon_2circle{position:absolute;bottom:80%;left:-50%;right:-50%;height:6.25em;display:none}.exam_skin_wood .Homothetic_bottom .homo_btn_1 .homo_icon_2circle .homo_icon_box{position:relative;width:100%;height:100%}.exam_skin_wood .Homothetic_bottom .homo_btn_1 .homo_icon_2circle .homo_icon_1{left:40%;margin-left:-2.91667em;bottom:20%}.exam_skin_wood .Homothetic_bottom .homo_btn_1 .homo_icon_2circle .homo_icon_2{right:40%;margin-right:-2.91667em;bottom:20%}.exam_skin_wood .Homothetic_wrapper ._js_main_svg{width:100%;height:100%}.exam_skin_wood .Homothetic_wrapper .abc_text{font-size:55px}.exam_skin_wood .Homothetic_wrapper .abc_text_blue{color:#8400df;fill:#8400df}.exam_skin_wood .Homothetic_wrapper .preload_text{visibility:hidden;position:absolute;left:-1000px}.typefaces_long .exam_skin_wood .Homothetic_main .Homothetic_main_right_menu{width:12.29167em;right:5.5em}.typefaces_long .exam_skin_wood .Homothetic_main .Homothetic_main_right_menu .homo_menu_item.homo_item4 .homo_item4_text .txt{font-size:1.33333em}.typefaces_long .exam_skin_wood .Homothetic_main .Homothetic_main_right_menu .homo_menu_item{background-position-x:center}.typefaces_long .exam_skin_wood .Homothetic_main .Homothetic_main_right_menu .homo_menu_item.homo_item1:after,.typefaces_long .exam_skin_wood .Homothetic_main .Homothetic_main_right_menu .homo_menu_item.homo_item2:after{content:"";height:1px;width:80%;left:10%;background:#96adba;position:absolute;bottom:0}.typefaces_long .exam_skin_wood .Homothetic_main .Homothetic_main_right_menu .homo_menu_item.homo_item4 .homo_item4_text{margin-top:.71667em;margin-bottom:.74167em}.typefaces_long .exam_skin_wood .Homothetic_main .Homothetic_main_right_menu .homo_menu_item.homo_item4 .homo_item4_input_box{margin:0 auto}.typefaces_long .exam_skin_wood .Homothetic_bottom .homo_btn_1.show_2circle .homo_icon_com{width:auto;height:4.16667em;padding:0 .5em;line-height:4.08333em;background:-webkit-linear-gradient(top,#fff,#e9e9e9);background:linear-gradient(180deg,#fff 0,#e9e9e9);border-radius:4.16667em;border:1px solid #387374;box-shadow:1px 2px 8px 0 rgba(0,0,0,.2)}.typefaces_long .exam_skin_wood .Homothetic_bottom .homo_btn_1.show_2circle .homo_icon_com.ui_btn_active,.typefaces_long .exam_skin_wood .Homothetic_bottom .homo_btn_1.show_2circle .homo_icon_com:active{background:-webkit-linear-gradient(top,#87c7c6,#76b9ba);background:linear-gradient(180deg,#87c7c6 0,#76b9ba)}.typefaces_long .exam_skin_wood .Homothetic_bottom .homo_btn_1.show_2circle .homo_icon_com.homo_icon_1{left:auto;right:50%;margin-right:.5em}.typefaces_long .exam_skin_wood .Homothetic_bottom .homo_btn_1.show_2circle .homo_icon_com.homo_icon_2{right:auto;left:50%;margin-left:.5em}.typefaces_ru_RU .exam_skin_wood .Homothetic_main .Homothetic_main_right_menu{width:12.29167em;right:5.5em}.typefaces_ru_RU .exam_skin_wood .Homothetic_main .Homothetic_main_right_menu .homo_menu_item.homo_item4 .homo_item4_text .txt{font-size:1.33333em}.typefaces_ru_RU .exam_skin_wood .Homothetic_main .Homothetic_main_right_menu .homo_menu_item{background-position-x:center}.typefaces_ru_RU .exam_skin_wood .Homothetic_main .Homothetic_main_right_menu .homo_menu_item.homo_item1:after,.typefaces_ru_RU .exam_skin_wood .Homothetic_main .Homothetic_main_right_menu .homo_menu_item.homo_item2:after{content:"";height:1px;width:80%;left:10%;background:#96adba;position:absolute;bottom:0}.typefaces_ru_RU .exam_skin_wood .Homothetic_main .Homothetic_main_right_menu .homo_menu_item.homo_item4 .homo_item4_text{margin-top:.71667em;margin-bottom:.74167em}.typefaces_ru_RU .exam_skin_wood .Homothetic_main .Homothetic_main_right_menu .homo_menu_item.homo_item4 .homo_item4_input_box{margin:0 auto}.typefaces_ru_RU .exam_skin_wood .Homothetic_bottom .homo_btn_1.show_2circle .homo_icon_com{width:auto;height:4.16667em;padding:0 .5em;line-height:4.08333em;background:-webkit-linear-gradient(top,#fff,#e9e9e9);background:linear-gradient(180deg,#fff 0,#e9e9e9);border-radius:4.16667em;border:1px solid #387374;box-shadow:1px 2px 8px 0 rgba(0,0,0,.2)}.typefaces_ru_RU .exam_skin_wood .Homothetic_bottom .homo_btn_1.show_2circle .homo_icon_com.ui_btn_active,.typefaces_ru_RU .exam_skin_wood .Homothetic_bottom .homo_btn_1.show_2circle .homo_icon_com:active{background:-webkit-linear-gradient(top,#87c7c6,#76b9ba);background:linear-gradient(180deg,#87c7c6 0,#76b9ba)}.typefaces_ru_RU .exam_skin_wood .Homothetic_bottom .homo_btn_1.show_2circle .homo_icon_com.homo_icon_1{left:auto;right:50%;margin-right:.5em}.typefaces_ru_RU .exam_skin_wood .Homothetic_bottom .homo_btn_1.show_2circle .homo_icon_com.homo_icon_2{right:auto;left:50%;margin-left:.5em}]]></css><view><![CDATA[<div class="exam_skin_wood"><div class="Homothetic_wrapper"><div class="Homothetic_main"><span class="preload_text nd_NewRoman_italic">缩放比例:</span><span class="_js_scale_container homo_tip_scale hide_dom"><span class="text text_t _js_scale_txt">缩放比例:</span> <span class="num _js_scale"></span> <span class="text">%</span></span><div class="Homothetic_main_bd"><div class="Homothetic_main_bd_box"><svg class="_js_main_svg" viewBox="0 0 1011 611"></svg></div></div><div class="Homothetic_main_right_menu"><ul class="homo_menu_box _js_right_menu"><a class="homo_btn_play hide_dom _js_play_btn"></a><li class="homo_menu_item homo_item1 on" data-type="THIRD"></li><li class="homo_menu_item homo_item2" data-type="FOUR"></li><li class="homo_menu_item homo_item3" data-type="FIVE"></li><li class="homo_menu_item homo_item4"><span class="homo_item4_text"><p class="txt _js_ratio_txt">位似比</p></span><div class="homo_item4_input_box"><div class="homo_drop_num_wrap homo_drop_num_wrap1"><a href="javascript:void(0)" class="homo_drop_num _js_numerator"><span class="num_input"><span class="num_input_text _js_numerator_val"></span> </span><span class="homo_drop_arrow"></span> <span class="homo_drop_preload_img01"></span></a><div class="homo_drop_numselect homo_drop_numselect1 clearfix"><div class="homo_numselect_wrap hide_dom _js_numerator_select"><a href="javascript:;"><span>1</span> </a><a href="javascript:;"><span>2</span> </a><a href="javascript:;"><span>3</span></a><br><a href="javascript:;"><span>4</span> </a><a href="javascript:;"><span>5</span> </a><a href="javascript:;"><span>6</span></a><br><a href="javascript:;"><span>7</span> </a><a href="javascript:;"><span>8</span> </a><a href="javascript:;"><span>9</span></a></div></div></div><div class="homo_drop_num_wrap"><a href="javascript:void(0)" class="homo_drop_num _js_denominator"><span class="num_input"><span class="num_input_text _js_denominator_val"></span> </span><span class="homo_drop_arrow"></span> <span class="homo_drop_preload_img01"></span></a><div class="homo_drop_numselect homo_drop_numselect2 clearfix"><div class="homo_numselect_wrap hide_dom _js_denominator_select"><a href="javascript:;"><span>1</span> </a><a href="javascript:;"><span>2</span> </a><a href="javascript:;"><span>3</span></a><br><a href="javascript:;"><span>4</span> </a><a href="javascript:;"><span>5</span> </a><a href="javascript:;"><span>6</span></a><br><a href="javascript:;"><span>7</span> </a><a href="javascript:;"><span>8</span> </a><a href="javascript:;"><span>9</span></a></div></div></div></div></li></ul></div></div><div class="Homothetic_bottom"><ul class="homo_btns_list"><li class="homo_btn_item homo_btn_1 _js_outside_container"><a class="com_btns btns-primary homo_btn_outside _js_outside_btn" href="javascript:;"><span class="btns-primary-txt _js_outside_txt">O在图形外</span> <span class="homo_btn_2_sanjiao"></span></a><div class="homo_icon_2circle"><div class="homo_icon_box"><span class="homo_icon_com homo_icon_1 _js_outside_same_btn"><span class="homo_icon_text_com homo_icon_text_1 _js_outside_same_txt">同侧</span> </span><span class="homo_icon_com homo_icon_2 _js_outside_diff_btn"><span class="homo_icon_text_com homo_icon_text_2 _js_outside_diff_txt">两侧</span></span></div></div></li><li class="homo_btn_item homo_btn_2"><a class="com_btns btns-primary homo_btn_inside _js_inside_btn" href="javascript:;"><span class="btns-primary-txt _js_inside_txt">O在图形内</span></a></li></ul></div></div></div>]]></view><presenter><![CDATA[/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(1);
	__webpack_require__(10);
	__webpack_require__(4);
	__webpack_require__(7);
	__webpack_require__(6);
	__webpack_require__(12);
	__webpack_require__(2);
	__webpack_require__(3);
	__webpack_require__(11);
	__webpack_require__(5);
	__webpack_require__(13);
	__webpack_require__(9);
	module.exports = __webpack_require__(8);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _Logger = __webpack_require__(2);

	var _Logger2 = _interopRequireDefault(_Logger);

	var _Main = __webpack_require__(3);

	var _Main2 = _interopRequireDefault(_Main);

	var _Lang = __webpack_require__(12);

	var _Lang2 = _interopRequireDefault(_Lang);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	(function () {

	    var Presenter = BasicPresenter.extend({
	        metaInfo: {
	            name: 'Homothetic2D',
	            type: "",
	            subtype: ""
	        },
	        /**
	         * Presenter的初始化方法
	         * @private
	         */
	        $init: function $init() {
	            this._super();
	        },
	        /**
	         * Presenter对外暴露的方法
	         */
	        _service_: {
	            constructor: function constructor(parent) {
	                this.parent = parent;
	            },
	            setLocationProperties: function setLocationProperties(data) {
	                _Lang2.default.extend(data || {});
	            },
	            getExtendData: function getExtendData() {
	                var options = this.parent.homo.getData();
	                return options;
	            },
	            getQuestionInfo: function getQuestionInfo() {
	                return {
	                    id: '',
	                    type_code: 'Homothetic2D',
	                    type_name: _Lang2.default.get('homo_name'),
	                    url: '',
	                    noExistStatistics: true,
	                    noNeedQuizProgress: true
	                };
	            }
	        },
	        getService: function getService() {
	            this._service_.constructor(this);
	            return this._service_;
	        },
	        /****以下开始为icPlayer的生命周期方法*****/
	        run: function run(view, model) {
	            //var $deferred = $.Deferred();
	            var that = this;
	            that.$view = $(view);
	            that.model = model;
	            that.lang = null;
	            var data = model.__ExtendModel;
	            this.homo = new _Main2.default(that.$view);

	            //等待字体加载完成后，才能计算文字所占有的正确宽高值
	            setTimeout(function () {
	                that.homo.render(data);
	            }, 100);
	            //多语言处理
	            _Lang2.default.initI18N(that.$view);
	            this.$addEventListener('PLAYER.TOOL.MAXIMIZE', PresenterEventType.IC_PLAYER_EVENT, function () {});
	            this.$addEventListener('PLAYER.TOOL.MINIMIZE', PresenterEventType.IC_PLAYER_EVENT, function () {
	                if (that.homo) {
	                    that.homo.pause();
	                }
	            });

	            //return $deferred.promise();
	        },
	        pageShow: function pageShow() {},
	        pageLeave: function pageLeave() {},
	        setBasePath: function setBasePath(path) {
	            this.basePath = path;
	        },
	        destroy: function destroy() {},
	        /**如果不需要处理icplayer的状态恢复事件, 请将以下两个方法删除掉**/
	        getState: function getState() {},
	        setState: function setState(state, options) {}
	    });

	    window.AddonHomothetic2D_create = function () {
	        return new Presenter('Homothetic2D');
	    };
	})();

/***/ },
/* 2 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	var methods = ['assert', 'clear', 'count', 'debug', 'dir', 'dirxml', 'error', 'exception', 'group', 'groupCollapsed', 'groupEnd', 'info', 'log', 'markTimeline', 'profile', 'profileEnd', 'table', 'time', 'timeEnd', 'timeline', 'timelineEnd', 'timeStamp', 'trace', 'warn'];
	var length = methods.length;
	var _console = window.console = window.console || {};
	var method = null;

	var emptyFuc = function emptyFuc() {};

	while (length--) {
	    method = methods[length];
	    // Only stub undefined methods.
	    if (!_console[method]) {
	        _console[method] = emptyFuc;
	    }
	}

	//logger level值(debug:3, info:2, warn:1, error: 0, close: -1)
	var _logger = {
	    _level: 0,
	    _console: _console,
	    setLevel: function setLevel(level) {
	        switch (level) {
	            case 'debug':
	                this._level = 3;
	                break;
	            case 'info':
	                this._level = 2;
	                break;
	            case 'warn':
	                this._level = 1;
	                break;
	            case 'error':
	                this._level = 0;
	                break;
	            default:
	                this._level = -1;
	        }
	    },
	    debug: function debug() {
	        if (this._level >= 3) {
	            this._console.log.apply(this._console, arguments);
	        }
	    },
	    info: function info(msg) {
	        if (this._level >= 2) {
	            this._console.info.apply(this._console, arguments);
	        }
	    },
	    warn: function warn(msg) {
	        if (this._level >= 1) {
	            this._console.warn.apply(this._console, arguments);
	        }
	    },
	    error: function error(msg) {
	        if (this._level >= 0) {
	            this._console.error.apply(this._console, arguments);
	        }
	    }
	};

	exports.default = _logger;

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _Config = __webpack_require__(4);

	var _Preset = __webpack_require__(5);

	var _Preset2 = _interopRequireDefault(_Preset);

	var _outclick = __webpack_require__(11);

	var _outclick2 = _interopRequireDefault(_outclick);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var DataAdapter = {
	    adapter: function adapter(data) {
	        //做数据的版本适配
	        if (data && data.data) {
	            return data.data;
	        } else {
	            return null;
	        }
	    }
	};

	var DATA_VERSION = '1.0';

	var Main = function () {
	    function Main($view) {
	        _classCallCheck(this, Main);

	        this.$view = $view;
	        this._svg = Snap($view.find('._js_main_svg').get(0));
	        this._preset = {};
	        this._presetType = _Config.GRAPHIC_TYPE.THIRD;
	        this._data = null;
	        this._findView();
	        this._bindDomEvent();
	    }

	    _createClass(Main, [{
	        key: 'render',
	        value: function render(data) {
	            var data = DataAdapter.adapter(data);
	            this._data = data;
	            //默认显示三角形预设
	            this._presetType = data ? data.presetType : _Config.GRAPHIC_TYPE.THIRD;
	            this._createShowPreset(this._presetType);

	            //选中右侧按钮
	            this._$rightMenu.removeClass('on');
	            this.$view.find('[data-type="' + this._presetType + '"]').addClass('on');

	            //默认激活o在图形内
	            this._updatePresetView();
	            //更新缩放值
	            this._updateScaleView();
	            //更新播放按钮状态
	            this._updatePlayView();
	        }

	        //创建并显示预设

	    }, {
	        key: '_createShowPreset',
	        value: function _createShowPreset(presetType) {
	            if (!this._preset[presetType]) {
	                this._preset[presetType] = new _Preset2.default(this._svg, presetType);
	                this._preset[presetType].render(this._data ? this._data.preset[presetType] : null);
	                this._preset[presetType].setVisibility(true);
	            } else {
	                this._preset[presetType].setVisibility(true);
	            }
	        }
	    }, {
	        key: 'show',
	        value: function show(presetType) {
	            var _this = this;

	            this._presetType = presetType;
	            var keys = Object.keys(_Config.GRAPHIC_TYPE);
	            keys.forEach(function (key) {
	                if (_this._preset[key]) {
	                    _this._preset[key].setVisibility(key === presetType);
	                }
	            });
	            this._createShowPreset(this._presetType);
	            this._updatePresetView();
	            this._updateScaleView();
	        }
	    }, {
	        key: 'getCurrentPreset',
	        value: function getCurrentPreset() {
	            return this._preset[this._presetType];
	        }
	    }, {
	        key: '_findView',
	        value: function _findView() {
	            var that = this;
	            //右侧菜单容器
	            this._$rightMenuContainer = this.$view.find('._js_right_menu');
	            //右侧预设按钮
	            this._$rightMenu = this.$view.find('._js_right_menu li:lt(3)');
	            //缩放值
	            this._$scale = this.$view.find('._js_scale');
	            //缩放容器
	            this._$scaleContainer = this.$view.find('._js_scale_container');

	            //o在图形外容器
	            this._$outsideConainer = this.$view.find('._js_outside_container');
	            //o在图像外按钮
	            this._$outsideBtn = this.$view.find('._js_outside_btn');
	            //同侧按钮
	            this._$outsideSameBtn = this.$view.find('._js_outside_same_btn');
	            //两侧按钮
	            this._$outsideDiffBtn = this.$view.find('._js_outside_diff_btn');
	            //o在图形内按钮
	            this._$insideBtn = this.$view.find('._js_inside_btn');
	            //播放按钮
	            this._$playBtn = this.$view.find('._js_play_btn');

	            this._ratio = {
	                numerator: { //分子
	                    btn: this.$view.find('._js_numerator'), //按钮
	                    val: this.$view.find('._js_numerator_val'), //分子值
	                    select: this.$view.find('._js_numerator_select'), //选择框
	                    getVal: function getVal() {
	                        var txt = that._ratio.numerator.val.text();
	                        if (txt.length > 0) {
	                            return parseInt(txt);
	                        }
	                        return -1;
	                    },

	                    setVal: function setVal(val) {
	                        if (val > 0) {
	                            that._ratio.numerator.val.text(val);
	                        } else {
	                            that._ratio.numerator.val.text('');
	                        }
	                    }
	                },
	                denominator: { //分母
	                    btn: this.$view.find('._js_denominator'),
	                    val: this.$view.find('._js_denominator_val'),
	                    select: this.$view.find('._js_denominator_select'),
	                    getVal: function getVal() {
	                        var txt = that._ratio.denominator.val.text();
	                        if (txt.length > 0) {
	                            return parseInt(txt);
	                        }
	                        return -1;
	                    },

	                    setVal: function setVal(val) {
	                        if (val > 0) {
	                            that._ratio.denominator.val.text(val);
	                        } else {
	                            that._ratio.denominator.val.text('');
	                        }
	                    }
	                }
	            };
	        }

	        //显示同侧、两侧按钮

	    }, {
	        key: '_updateOrientationView',
	        value: function _updateOrientationView() {
	            //是否显示按钮
	            if (this._ratio.numerator.getVal() >= 0 && this._ratio.denominator.getVal() >= 0 && this._$outsideBtn.hasClass('ui_btn_active')) {
	                this._$outsideConainer.addClass('show_2circle');
	            } else {
	                this._$outsideConainer.removeClass('show_2circle');
	            }

	            //是否激活按钮
	            if (this.getCurrentPreset().getOrientationType() === _Config.ORIENTATION_TYPE.SAME) {
	                this._$outsideDiffBtn.removeClass('ui_btn_active');
	                this._$outsideSameBtn.addClass('ui_btn_active');
	            } else if (this.getCurrentPreset().getOrientationType() === _Config.ORIENTATION_TYPE.DIFF) {
	                this._$outsideDiffBtn.addClass('ui_btn_active');
	                this._$outsideSameBtn.removeClass('ui_btn_active');
	            } else {
	                this._$outsideDiffBtn.removeClass('ui_btn_active');
	                this._$outsideSameBtn.removeClass('ui_btn_active');
	            }
	        }
	    }, {
	        key: '_updateScaleView',
	        value: function _updateScaleView() {
	            var scale = this.getCurrentPreset().getCurrentComposite().getScale();
	            this._$scale.text(parseInt(scale * 100));
	            //if (scale === 1) {
	            //    this._$scaleContainer.addClass('hide_dom');
	            //} else {
	            this._$scaleContainer.removeClass('hide_dom');
	            //}
	        }
	    }, {
	        key: '_changeRatio',
	        value: function _changeRatio() {
	            var numerator = this._ratio.numerator.getVal();
	            var denominator = this._ratio.denominator.getVal();
	            if (numerator >= 0 && denominator >= 0) {
	                this.getCurrentPreset().changeRatio(numerator, denominator);
	            }
	        }
	    }, {
	        key: '_bindDomEvent',
	        value: function _bindDomEvent() {
	            var _this2 = this;

	            var that = this;
	            //右侧菜单
	            this._$rightMenu.on('click', function (e) {
	                var $target = $(e.target);
	                var presetType = $target.data('type');
	                if (presetType && !$target.hasClass('on')) {
	                    _this2._$rightMenu.removeClass('on');
	                    $target.addClass('on');
	                    //显示当前预设，并重置按钮状态
	                    _this2.show(presetType);
	                }
	            });

	            //位似比按钮
	            var outClickInstance = _outclick2.default.create(this.$view.get(0));
	            for (var key in this._ratio) {
	                (function (key) {
	                    var ratio = that._ratio[key];
	                    //按钮
	                    ratio.btn.on('click', function (e) {
	                        ratio.select.toggleClass('hide_dom');
	                        ratio.btn.toggleClass('ui_open');
	                        ratio.select.find('a').removeClass('ui_btn_active');
	                        var val = ratio.val.text() - 1;
	                        if (val >= 0) {
	                            ratio.select.find('a:eq(' + val + ')').addClass('ui_btn_active');
	                        }
	                    });
	                    //选择框
	                    ratio.select.on('click', function (e) {
	                        var $target = $(e.target);
	                        if ($target.get(0).tagName.toLocaleLowerCase() === 'a' || $target.parent().get(0).tagName.toLocaleLowerCase() === 'a') {
	                            ratio.val.text($target.text());
	                            ratio.select.addClass('hide_dom');
	                            that._updateOrientationView();
	                            that._changeRatio();
	                            that._updatePlayView();
	                            that._updateScaleView();
	                        }
	                    });
	                    //点击外部隐藏
	                    ratio.select.outclick(function (e) {
	                        ratio.select.addClass('hide_dom');
	                    }, ratio.btn.get(0), outClickInstance);
	                })(key);
	            }

	            //外部
	            this._$outsideBtn.on('click', function (e) {
	                _this2._$insideBtn.removeClass('ui_btn_active');
	                _this2._$outsideBtn.addClass('ui_btn_active');
	                _this2._updateOrientationView();
	                //默认同侧
	                var positionType = _Config.COMPOSITE_TYPE.O_OUTSIDE;
	                if (_this2._$outsideDiffBtn.hasClass('ui_btn_active')) {
	                    positionType = _Config.COMPOSITE_TYPE.O_OUTSIDE_DIFF;
	                } else if (_this2._$outsideSameBtn.hasClass('ui_btn_active')) {
	                    positionType = _Config.COMPOSITE_TYPE.O_OUTSIDE_SAME;
	                }
	                _this2.getCurrentPreset().changeCurrentCompositeType(positionType);
	                _this2._updatePlayView();
	                _this2._updateScaleView();
	            });

	            //同侧
	            this._$outsideSameBtn.on('click', function (e) {
	                _this2._$outsideDiffBtn.removeClass('ui_btn_active');
	                _this2._$outsideSameBtn.addClass('ui_btn_active');
	                _this2.getCurrentPreset().changeCurrentCompositeType(_Config.COMPOSITE_TYPE.O_OUTSIDE_SAME);
	                _this2._updatePlayView();
	                _this2._updateScaleView();
	            });

	            //两侧
	            this._$outsideDiffBtn.on('click', function (e) {
	                _this2._$outsideSameBtn.removeClass('ui_btn_active');
	                _this2._$outsideDiffBtn.addClass('ui_btn_active');
	                _this2.getCurrentPreset().changeCurrentCompositeType(_Config.COMPOSITE_TYPE.O_OUTSIDE_DIFF);
	                _this2._updatePlayView();
	                _this2._updateScaleView();
	            });

	            //内部
	            this._$insideBtn.on('click', function (e) {
	                _this2._$outsideBtn.removeClass('ui_btn_active');
	                _this2._$insideBtn.addClass('ui_btn_active');
	                _this2._updateOrientationView();
	                _this2.getCurrentPreset().changeCurrentCompositeType(_Config.COMPOSITE_TYPE.O_INSIDE);
	                _this2._updatePlayView();
	                _this2._updateScaleView();
	            });

	            //播放按钮
	            this._$playBtn.on('click', function (e) {
	                if (_this2._$rightMenuContainer.hasClass('change_pause')) {
	                    that._$rightMenuContainer.removeClass('change_pause');
	                    _this2.getCurrentPreset().pause();
	                } else {
	                    that._$rightMenuContainer.addClass('change_pause');
	                    _this2.getCurrentPreset().play(function () {
	                        that._$rightMenuContainer.removeClass('change_pause');
	                    });
	                }
	            });
	        }
	    }, {
	        key: 'changeCurrentCompositeType',
	        value: function changeCurrentCompositeType(type) {
	            this.getCurrentPreset().changeCurrentCompositeType(type);
	        }

	        //是否显示播放按钮

	    }, {
	        key: '_updatePlayView',
	        value: function _updatePlayView() {
	            var that = this;
	            this._$rightMenuContainer.removeClass('change_pause');
	            var preset = this.getCurrentPreset();
	            if (preset.getRatioNumerator() > -1 && preset.getRatioDenominator() > -1 && preset.getCurrentCompositeType() !== _Config.COMPOSITE_TYPE.O_OUTSIDE) {
	                this._$playBtn.removeClass('hide_dom');
	                if (preset.getCurrentComposite().isPlaying()) {
	                    preset.getCurrentComposite().setOnPlayEndListener(function () {
	                        that._$rightMenuContainer.removeClass('change_pause');
	                    });
	                    this._$rightMenuContainer.addClass('change_pause');
	                }
	            } else {
	                this._$playBtn.addClass('hide_dom');
	            }
	        }

	        //根据数据重置当前按钮状态

	    }, {
	        key: '_updatePresetView',
	        value: function _updatePresetView() {
	            var preset = this.getCurrentPreset();

	            //重置为该预设的位似比
	            this._ratio.numerator.setVal(preset.getRatioNumerator());
	            this._ratio.denominator.setVal(preset.getRatioDenominator());

	            //重置内部、外部按钮
	            if (preset.getCurrentCompositeType() === _Config.COMPOSITE_TYPE.O_INSIDE) {
	                this._$insideBtn.addClass('ui_btn_active');
	                this._$outsideBtn.removeClass('ui_btn_active');
	            } else {
	                this._$insideBtn.removeClass('ui_btn_active');
	                this._$outsideBtn.addClass('ui_btn_active');
	            }
	            //重置同侧、两侧按钮
	            this._updateOrientationView();

	            //重置播放按钮
	            this._updatePlayView();
	        }
	    }, {
	        key: 'pause',
	        value: function pause() {
	            this._$rightMenuContainer.removeClass('change_pause');
	            this.getCurrentPreset().pause();
	        }
	    }, {
	        key: 'getData',
	        value: function getData() {
	            var data = {
	                version: DATA_VERSION,
	                data: {
	                    presetType: this._presetType, //当前显示的预设
	                    preset: {}
	                }
	            };

	            for (var key in this._preset) {
	                data.data.preset[key] = this._preset[key].getData();
	            }

	            if (this._data && this._data.preset) {
	                for (var key in this._data.preset) {
	                    if (!data.data.preset[key]) {
	                        data.data.preset[key] = this._data.preset[key];
	                    }
	                }
	            }

	            return data;
	        }
	    }, {
	        key: 'destroy',
	        value: function destroy() {}
	    }]);

	    return Main;
	}();

	exports.default = Main;

/***/ },
/* 4 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	//点位置类型
	var COMPOSITE_TYPE = {
	    O_INSIDE: 'O_INSIDE', //内部
	    O_OUTSIDE: 'O_OUTSIDE', //外部
	    O_OUTSIDE_SAME: 'O_OUTSIDE_SAME', //外部同侧
	    O_OUTSIDE_DIFF: 'O_OUTSIDE_DIFF' //外部两侧
	};

	//点位置类型
	var ORIENTATION_TYPE = {
	    SAME: 'SAME', //内部
	    DIFF: 'DIFF' //外部同侧
	};

	//预设类型
	var GRAPHIC_TYPE = {
	    THIRD: 'THIRD',
	    FOUR: 'FOUR',
	    FIVE: 'FIVE'
	};

	//预设类型
	var GRAPHIC_TEXT_TYPE = {
	    ORIGIN: 'ORIGIN',
	    HOMO: 'HOMO',
	    ONESCALE: 'ONESCALE',
	    NONE: 'NONE'
	};

	//不同图形点坐标
	var POS = {
	    THIRD: {
	        pos: [{ x: 346, y: 122 }, { x: 170, y: 460 }, { x: 666, y: 454 }],
	        marginLeft: -0,
	        oInside: { x: 365, y: 322 },
	        oOutSide: { x: 920, y: 195 }
	    },
	    FOUR: {
	        pos: [{ x: 388, y: 245 }, { x: 261, y: 483 }, { x: 745, y: 484 }, { x: 602, y: 151 }],
	        marginLeft: -90,
	        oInside: { x: 530, y: 335 },
	        oOutSide: { x: 920, y: 195 }
	    },
	    FIVE: {
	        pos: [{ x: 407, y: 114 }, { x: 215, y: 253 }, { x: 282, y: 482 }, { x: 527, y: 482 }, { x: 601, y: 253 }],
	        marginLeft: 0,
	        oInside: { x: 407, y: 320 },
	        oOutSide: { x: 920, y: 195 }
	    },
	    CIRCLE_WIDTH: 6.5,
	    RED_CIRCLE_WIDTH: 7.5,
	    STROKE_WIDTH: 5
	};

	var COLOR = {
	    BLACK: '#4D4D4D',
	    RED: '#CB1F1F',
	    ORANGE: '#E06313',
	    GRAY: '#717272',
	    BLUE: '#8400DF'
	};

	//矫正图形位置
	var types = Object.keys(GRAPHIC_TYPE);
	types.forEach(function (type) {
	    var gp = POS[type];
	    gp.pos.forEach(function (pos) {
	        pos.x = pos.x + gp.marginLeft;
	    });
	    gp.oInside.x = gp.oInside.x + gp.marginLeft;
	});

	exports.COMPOSITE_TYPE = COMPOSITE_TYPE;
	exports.POS = POS;
	exports.GRAPHIC_TYPE = GRAPHIC_TYPE;
	exports.COLOR = COLOR;
	exports.ORIENTATION_TYPE = ORIENTATION_TYPE;
	exports.GRAPHIC_TEXT_TYPE = GRAPHIC_TEXT_TYPE;

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _GraphicComposite = __webpack_require__(6);

	var _GraphicComposite2 = _interopRequireDefault(_GraphicComposite);

	var _Config = __webpack_require__(4);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Preset = function () {
	    function Preset(svg, graphicType) {
	        _classCallCheck(this, Preset);

	        this._composite = {};
	        this._graphicType = graphicType;
	        this._svg = svg;
	        //默认同侧
	        this._currentCompositeType = _Config.COMPOSITE_TYPE.O_OUTSIDE;
	        this._orientationType = ''; //同侧、两侧状态
	        this._g = this._svg.g();
	        this._svg.add(this._g);
	        this.ratioNumerator = -1;
	        this.ratioDenominator = -1;
	        this.data = null;
	    }

	    //初始化内部


	    _createClass(Preset, [{
	        key: 'render',
	        value: function render(data) {
	            this.data = data;
	            if (data) {
	                this._currentCompositeType = data.currentCompositeType;
	                this._orientationType = data.orientationType;
	                this.ratioNumerator = data.ratioNumerator;
	                this.ratioDenominator = data.ratioDenominator;
	            }
	            this.createShowComposite(this._currentCompositeType);
	        }
	    }, {
	        key: 'createShowComposite',
	        value: function createShowComposite(compositeType) {
	            var key = compositeType;

	            //显示默认

	            if (!this._composite[key]) {
	                this._composite[key] = new _GraphicComposite2.default(this._svg, this._g, key, this._graphicType);
	                this._composite[key].setVisible(this._currentCompositeType === key);
	                var compositeData = this.data ? this.data.composite[key] : null;
	                this._composite[key].render(this.data ? this.data.composite[key] : null);
	                if (!compositeData && this.getRatioNumerator() > 0 && this.getRatioDenominator() > 0) {
	                    this._composite[key].changeRatio(this.getRatioNumerator() / this.getRatioDenominator());
	                }
	            } else if (this._composite[key].getRatio() !== this.getRatioNumerator() / this.getRatioDenominator()) {
	                this._composite[key].setVisible(this._currentCompositeType === key);
	                this._composite[key].changeRatio(this.getRatioNumerator() / this.getRatioDenominator());
	            }
	        }

	        //变更当前位置信息和组件

	    }, {
	        key: 'changeCurrentCompositeType',
	        value: function changeCurrentCompositeType(compositeType) {
	            if (this._composite[this._currentCompositeType]) {
	                this._composite[this._currentCompositeType].setVisible(false);
	            }
	            this._currentCompositeType = compositeType;
	            if (compositeType === _Config.COMPOSITE_TYPE.O_OUTSIDE_SAME) {
	                this._orientationType = _Config.ORIENTATION_TYPE.SAME;
	            } else if (compositeType === _Config.COMPOSITE_TYPE.O_OUTSIDE_DIFF) {
	                this._orientationType = _Config.ORIENTATION_TYPE.DIFF;
	            }

	            this.createShowComposite(this._currentCompositeType);

	            for (var key in this._composite) {
	                this._composite[key].setVisible(compositeType === key);
	                this._composite[key].terminate();
	            }
	        }

	        //返回当前位置信息

	    }, {
	        key: 'getCurrentCompositeType',
	        value: function getCurrentCompositeType() {
	            return this._currentCompositeType;
	        }

	        //返回当前位置组件

	    }, {
	        key: 'getCurrentComposite',
	        value: function getCurrentComposite() {
	            return this._composite[this._currentCompositeType];
	        }

	        //更改位似比

	    }, {
	        key: 'changeRatio',
	        value: function changeRatio(numerator, denominator) {
	            this.data = null;
	            this.ratioNumerator = numerator;
	            this.ratioDenominator = denominator;
	            this.getCurrentComposite().changeRatio(numerator / denominator);
	        }

	        //获取位似比分子

	    }, {
	        key: 'getRatioNumerator',
	        value: function getRatioNumerator() {
	            return this.ratioNumerator || -1;
	        }

	        //获取位似比分母

	    }, {
	        key: 'getRatioDenominator',
	        value: function getRatioDenominator() {
	            return this.ratioDenominator || -1;
	        }

	        //返回当前位置信息

	    }, {
	        key: 'getOrientationType',
	        value: function getOrientationType() {
	            return this._orientationType;
	        }
	    }, {
	        key: 'getData',
	        value: function getData() {
	            var data = {};
	            data.currentCompositeType = this._currentCompositeType; //当前组件类型
	            data.orientationType = this._orientationType; //同侧、两侧选值
	            data.ratioNumerator = this.ratioNumerator; //位似分子
	            data.ratioDenominator = this.ratioDenominator; //位似分母
	            data.composite = {};

	            for (var key in this._composite) {
	                //排除已经更改位似比，但是位及时更新的组件
	                if (this._composite[key].getRatio() == data.ratioNumerator / data.ratioDenominator) {
	                    data.composite[key] = this._composite[key].getData();
	                }
	            }

	            //render(data)来初始化但是还没有创建的组件，动态从数据里读取
	            if (this.data && this.data.composite) {
	                for (var key in this.data.composite) {
	                    if (!data.composite[key]) {
	                        data.composite[key] = this.data.composite[key];
	                    }
	                }
	            }
	            return data;
	        }
	    }, {
	        key: 'play',
	        value: function play(onEnd) {
	            this.getCurrentComposite().setOnPlayEndListener(onEnd);
	            this.getCurrentComposite().play();
	        }
	    }, {
	        key: 'pause',
	        value: function pause() {
	            this.getCurrentComposite().pause();
	        }
	    }, {
	        key: 'setVisibility',
	        value: function setVisibility(visible) {
	            this._g.setVisibility(visible);
	            //这个地方防止内部visibility:hidden时，内部还是visibility:visible，会直接显示出来。这边切换到其他预设时，直接全部设置display:none
	            for (var key in this._composite) {
	                this._composite[key].setVisible(false);
	                //关闭内部动画
	                if (!visible) {
	                    this._composite[key].terminate();
	                }
	            }
	            if (visible) {
	                this._composite[this._currentCompositeType].setVisible(true);
	            }
	        }
	    }, {
	        key: 'destroy',
	        value: function destroy() {}
	    }]);

	    return Preset;
	}();

	exports.default = Preset;

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _Graphic = __webpack_require__(7);

	var _Graphic2 = _interopRequireDefault(_Graphic);

	var _Config = __webpack_require__(4);

	var _Utils = __webpack_require__(8);

	var _Utils2 = _interopRequireDefault(_Utils);

	var _Command = __webpack_require__(10);

	var _Command2 = _interopRequireDefault(_Command);

	var _TextArea = __webpack_require__(9);

	var _TextArea2 = _interopRequireDefault(_TextArea);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	//
	var GraphicComposite = function () {
	    function GraphicComposite(svg, parentEl, compositeType, graphicType) {
	        _classCallCheck(this, GraphicComposite);

	        this.svg = svg;
	        this.graphicType = graphicType; //预设类型
	        this.compositeType = compositeType; //组件类型
	        this.originalPos = {
	            o: {},
	            presetGraphic: []
	        };
	        //虚线
	        this.dashLine = [];

	        this.oPos; //o点坐标
	        if (this.compositeType === _Config.COMPOSITE_TYPE.O_INSIDE) {
	            this.oPos = $.extend(true, {}, _Config.POS[graphicType].oInside);
	            this.originalPos.o = _Config.POS[graphicType].oInside;
	        } else {
	            this.oPos = $.extend(true, {}, _Config.POS[graphicType].oOutSide);
	            this.originalPos.o = _Config.POS[graphicType].oOutSide;
	        }
	        this.originalPos.presetGraphic = _Config.POS[graphicType].pos;

	        this.graphicPos = $.extend(true, [], _Config.POS[graphicType].pos); //预设图坐标点
	        this.oTextArea;
	        //位似比
	        this.ratio = 1;
	        //创建根节点
	        this.g = this.svg.g();
	        parentEl.add(this.g);
	        //视图缩放比
	        this.scale = 1;
	        //绘制命令
	        this.command = new _Command2.default();
	        this.homoPos = $.extend(true, [], _Config.POS[graphicType].pos); //位似图坐标点
	        this.homoEl = null;

	        this.equalRatioCommand = $.proxy(this.equalRatioCommand, this);
	    }

	    _createClass(GraphicComposite, [{
	        key: 'render',
	        value: function render(data) {
	            //初始化命令
	            this.initCommand();

	            this.createView();

	            if (data) {
	                this.changeRatio(data.ratio);
	                if (this.compositeType !== _Config.COMPOSITE_TYPE.O_OUTSIDE_DIFF) {
	                    this.matchParent();
	                }
	                if (data.isEnd) {
	                    this.command.doAllImmediately();
	                } else if (data.isPlaying && _Utils2.default.isMobile) {
	                    //} else if (data.isPlaying) {
	                    //只有在学生端保存时需要，处理这个播放状态
	                    this.command.reStart();
	                }
	            } else {
	                //计算坐标并居中处理
	                this.matchParent();
	            }

	            this.updateInitPos();
	        }
	    }, {
	        key: 'createView',
	        value: function createView() {

	            //创建虚线
	            this.createDashLine();

	            //绘制o点
	            this.createOPoint();

	            //绘制预设图形
	            this.createPresetGraphic();

	            this.createHomo();
	        }
	    }, {
	        key: 'updateView',
	        value: function updateView() {
	            //重新技术坐标
	            this.mathPos();
	            this.updatePresetGraphic();
	            this.updateOPoint();
	            this.updateHomo();
	            this.updateDashLine(this.ratio);
	        }

	        //初始化动画步骤

	    }, {
	        key: 'initCommand',
	        value: function initCommand() {
	            var _this = this;

	            var that = this;
	            //显示虚线
	            this.command.push(function () {
	                that.dashLine.setVisibility(true);
	                that.updateTextPos();
	            });
	            //显示位似点
	            this.command.push(function () {
	                that.homoEl.updateColor(_Config.COLOR.BLUE);
	                that.homoEl.setPointVisible(true);
	                if ((that.compositeType === _Config.COMPOSITE_TYPE.O_INSIDE || that.compositeType === _Config.COMPOSITE_TYPE.O_OUTSIDE_SAME) && that.ratio === 1) {
	                    //显示位似比为1的样式
	                    that.graphic.updateTextType(_Config.GRAPHIC_TEXT_TYPE.ONESCALE);
	                    that.updateTextPos();
	                } else {
	                    that.homoEl.setTextVisible(true);
	                }
	            });
	            //显示位似线
	            this.command.push(function () {
	                that.homoEl.updateColor(_Config.COLOR.BLUE);
	                that.homoEl.setLineVisible(true);
	                if (that.ratio === 1 && (_this.compositeType === _Config.COMPOSITE_TYPE.O_INSIDE || _this.compositeType === _Config.COMPOSITE_TYPE.O_OUTSIDE_SAME)) {
	                    _this.graphic.setPointVisible(false);
	                    _this.graphic.setLineVisible(false);
	                }
	            });

	            this.initLastCommand();
	        }
	    }, {
	        key: 'equalRatioCommand',
	        value: function equalRatioCommand(animate) {
	            var that = this;
	            var _changeColor = function _changeColor(color, delay) {
	                if (that.ratio === 1) {
	                    that.homoEl.updateColor(color);
	                }
	            };

	            if (animate) {
	                return that.command.createPromise(function () {
	                    _changeColor(_Config.COLOR.ORANGE);
	                }, 0, true).then(that.command.createPromise(function () {
	                    _changeColor(_Config.COLOR.BLUE);
	                }, 120)).then(that.command.createPromise(function () {
	                    _changeColor(_Config.COLOR.ORANGE);
	                }, 120)).then(that.command.createPromise(function () {
	                    _changeColor(_Config.COLOR.BLUE);
	                }, 120)).then(that.command.createPromise(function () {
	                    _changeColor(_Config.COLOR.ORANGE);
	                }, 120));
	            } else {
	                _changeColor(_Config.COLOR.ORANGE);
	            }
	        }
	    }, {
	        key: 'initLastCommand',
	        value: function initLastCommand() {
	            this.command.removeLast(this.equalRatioCommand);
	            if (this.ratio === 1 && this.compositeType !== _Config.COMPOSITE_TYPE.O_OUTSIDE_DIFF) {
	                this.command.push(this.equalRatioCommand);
	            }
	        }
	    }, {
	        key: 'createPresetGraphic',
	        value: function createPresetGraphic() {
	            //位似比为1时，更新特殊文字
	            this.graphic = new _Graphic2.default(this.graphicPos, _Config.COLOR.BLACK, this.svg, this.ratio === 1 ? _Config.GRAPHIC_TEXT_TYPE.ONESCALE : _Config.GRAPHIC_TEXT_TYPE.ORIGIN);
	            this.graphic.appendTo(this.g);
	        }
	    }, {
	        key: 'updatePresetGraphic',
	        value: function updatePresetGraphic() {
	            this.graphic.updatePos(this.graphicPos);
	        }
	    }, {
	        key: 'createOPoint',
	        value: function createOPoint() {
	            this.oCircle = this.svg.circle(this.oPos.x, this.oPos.y, _Config.POS.RED_CIRCLE_WIDTH).attr({ fill: _Config.COLOR.RED });
	            this.g.add(this.oCircle);
	            this.oTextArea = new _TextArea2.default(this.svg, this.oPos, this.oPos, 'O');
	            this.oTextArea.fill(_Config.COLOR.RED);
	            this.oTextArea.appendTo(this.g);
	            var textPos = {
	                x: this.oPos.x + 50,
	                y: this.oPos.y - 15
	            };
	            this.oTextArea.updatePos(textPos, this.oPos);
	        }
	    }, {
	        key: 'updateOPoint',
	        value: function updateOPoint() {
	            this.oCircle.attr({ cx: this.oPos.x, cy: this.oPos.y });
	            var textPos = {
	                x: this.oPos.x + 50,
	                y: this.oPos.y - 15
	            };
	            this.oTextArea.updatePos(textPos, this.oPos);
	        }
	    }, {
	        key: 'mathOPos',
	        value: function mathOPos() {
	            var pos = this.originalPos.o;
	            this.oPos.x = pos.x * this.scale;
	            this.oPos.y = pos.y * this.scale;
	        }
	    }, {
	        key: 'mathHomoPresetPos',
	        value: function mathHomoPresetPos() {
	            var _this2 = this;

	            this.homoPos = [];
	            this.graphicPos = [];
	            var oPos = this.oPos;
	            var ratio = this.ratio;
	            //同侧或者o在园内，坐标换算即可，不需要matchParent
	            if (this.compositeType === _Config.COMPOSITE_TYPE.O_INSIDE || this.compositeType === _Config.COMPOSITE_TYPE.O_OUTSIDE_SAME) {
	                if (this.ratio <= 1) {
	                    this.graphicPos = $.extend(true, [], this.originalPos.presetGraphic);
	                    //计算位似图坐标
	                    this.graphicPos.forEach(function (pos) {
	                        var length = _Utils2.default.getTwoPointDistance(oPos, pos) * ratio;
	                        var newPos = _Utils2.default.getLightPos(oPos, pos, length);
	                        _this2.homoPos.push(newPos);
	                    });
	                } else {
	                    this.homoPos = $.extend(true, [], this.originalPos.presetGraphic);
	                    //计算位似图坐标
	                    this.homoPos.forEach(function (pos) {
	                        var length = _Utils2.default.getTwoPointDistance(oPos, pos) * (1 / ratio);
	                        var newPos = _Utils2.default.getLightPos(oPos, pos, length);
	                        _this2.graphicPos.push(newPos);
	                    });
	                }
	            } else {
	                var scale = this.scale;
	                var allPos = this.graphicPos;
	                //两侧 计算正常坐标值
	                this.originalPos.presetGraphic.forEach(function (pos, i) {
	                    allPos[i] = { x: pos.x * scale, y: pos.y * scale };
	                });
	                //计算位似图坐标
	                this.graphicPos.forEach(function (pos) {
	                    //o到预设图形距离
	                    var opLength = _Utils2.default.getTwoPointDistance(oPos, pos);
	                    //o到位似图形距离
	                    var oHomoLength = opLength * ratio;
	                    var newPos = _Utils2.default.getLightPos(pos, oPos, oHomoLength + opLength);
	                    _this2.homoPos.push(newPos);
	                });
	            }
	        }

	        //计算坐标值

	    }, {
	        key: 'mathPos',
	        value: function mathPos() {
	            this.mathOPos();
	            this.mathHomoPresetPos();
	        }

	        //父容器中居中处理

	    }, {
	        key: 'matchParent',
	        value: function matchParent() {
	            var scale = 1;
	            var viewBox = this.svg.attr('viewBox');
	            var box;
	            if (this.compositeType === _Config.COMPOSITE_TYPE.O_OUTSIDE_DIFF) {
	                //先还原
	                this.scale = 1;
	                this.updateView();
	                this.g.attr('transform', '');
	                //计算缩放比例
	                box = this.g.getBBox();
	                var innerWidth = viewBox.width - 120;
	                var innerHeight = viewBox.height - 120;
	                if (box.width > innerWidth) {
	                    scale = innerWidth / box.width;
	                }
	                if (box.height > innerHeight) {
	                    var hScale = innerHeight / box.height;
	                    if (hScale < scale) {
	                        scale = hScale;
	                    }
	                }
	                //重置内部坐标
	                this.scale = scale;
	                this.updateView();
	                //居中处理
	                box = this.g.getBBox();
	            } else {
	                //if (this.ratio > 1) {
	                //    scale = 1 / this.ratio;
	                //}
	                this.g.attr('transform', '');
	                box = this.g.getBBox();
	                this.updateView();
	            }

	            //居中处理
	            var m = new Snap.Matrix();
	            var x = viewBox.cx - box.cx;
	            var y = viewBox.cy - box.cy;
	            m.translate(x, y);
	            this.g.transform(m);

	            //设定缩放值
	            this.scale = scale;
	        }
	    }, {
	        key: 'toCenter',
	        value: function toCenter() {
	            this.g.attr('transform', '');
	            var box = this.g.getBBox();
	            var viewBox = this.svg.attr('viewBox');
	            //居中处理
	            var m = new Snap.Matrix();
	            var x = viewBox.cx - box.cx;
	            var y = viewBox.cy - box.cy;
	            m.translate(x, y);
	            this.g.transform(m);
	        }

	        //创建位似图

	    }, {
	        key: 'createHomo',
	        value: function createHomo() {
	            this.homoEl = new _Graphic2.default(this.homoPos, _Config.COLOR.BLUE, this.svg, _Config.GRAPHIC_TEXT_TYPE.HOMO);
	            this.homoEl.appendTo(this.g);
	            this.updateTextIndex();
	            //默认隐藏点、线
	            this.homoEl.setVisibility(false);
	        }
	    }, {
	        key: 'updateHomo',
	        value: function updateHomo() {
	            this.homoEl.updatePos(this.homoPos);
	            this.homoEl.updateColor(_Config.COLOR.BLUE);
	            //默认隐藏点、线
	            this.homoEl.setVisibility(false);
	        }
	    }, {
	        key: '_getHomoColor',
	        value: function _getHomoColor() {
	            return this.ratio === 1 && (this.compositeType === _Config.COMPOSITE_TYPE.O_INSIDE || this.compositeType === _Config.COMPOSITE_TYPE.O_OUTSIDE_SAME) ? _Config.COLOR.ORANGE : _Config.COLOR.BLUE;
	        }

	        //视图还原为初始状态

	    }, {
	        key: '_restoreToDefault',
	        value: function _restoreToDefault() {
	            this.graphic.setPointVisible(true);
	            this.graphic.setLineVisible(true);
	            this.dashLine.setVisibility(false);
	            this.homoEl.setVisibility(false);
	            this.homoEl.updateColor(_Config.COLOR.BLUE);
	            this.oTextArea.rotateText(0);
	            var homoTextAreas = this.homoEl.getTextAreas();
	            var graphicTextAreas = this.graphic.getTextAreas();
	            this.graphic.updateTextType(_Config.GRAPHIC_TEXT_TYPE.ORIGIN);
	            homoTextAreas.forEach(function (textArea, i) {
	                textArea.rotateText(0);
	            });
	            graphicTextAreas.forEach(function (textArea, i) {
	                textArea.rotateText(0);
	            });
	            this.updateInitPos();
	        }
	    }, {
	        key: 'createDashLine',
	        value: function createDashLine() {
	            var oPos = this.oPos;
	            var d = '';
	            this.graphicPos.forEach(function (pos) {
	                var length = _Utils2.default.getTwoPointDistance(oPos, pos);
	                var newPos = _Utils2.default.getLightPos(oPos, pos, length + 80);
	                d += 'M' + oPos.x + ' ' + oPos.y + 'L' + newPos.x + ' ' + newPos.y + ' ';
	            });
	            this.dashLine = this.svg.path(d).attr({
	                strokeWidth: 5,
	                strokeDasharray: "24,11         ",
	                stroke: _Config.COLOR.GRAY
	            });
	            this.g.add(this.dashLine);
	            this.dashLine.setVisibility(false);
	        }
	    }, {
	        key: 'updateDashLine',
	        value: function updateDashLine(ratio) {
	            this.dashLine.setVisibility(false);

	            var oPos = this.oPos;
	            var d = '';
	            if (this.compositeType === _Config.COMPOSITE_TYPE.O_INSIDE || this.compositeType === _Config.COMPOSITE_TYPE.O_OUTSIDE_SAME || this.compositeType === _Config.COMPOSITE_TYPE.O_OUTSIDE) {
	                this.graphicPos.forEach(function (pos, i) {
	                    var length = _Utils2.default.getTwoPointDistance(oPos, pos);
	                    if (ratio > 1) {
	                        length = length * ratio;
	                    }
	                    var newPos = _Utils2.default.getLightPos(oPos, pos, length + 80);
	                    d += 'M' + oPos.x + ' ' + oPos.y + 'L' + newPos.x + ' ' + newPos.y + ' ';
	                });
	                this.dashLine.attr('d', d);
	            } else if (this.compositeType === _Config.COMPOSITE_TYPE.O_OUTSIDE_DIFF) {
	                this.graphicPos.forEach(function (pos, i) {
	                    var opLength = _Utils2.default.getTwoPointDistance(oPos, pos);
	                    var oHomoLength = opLength * ratio;
	                    var newPos = _Utils2.default.getLightPos(oPos, pos, opLength + 80);
	                    var lastPos = _Utils2.default.getLightPos(newPos, pos, oHomoLength + opLength + 2 * 80);
	                    d += 'M' + newPos.x + ' ' + newPos.y + 'L' + lastPos.x + ' ' + lastPos.y + ' ';
	                });
	                this.dashLine.attr('d', d);
	            }
	        }

	        //设置是否显示隐藏

	    }, {
	        key: 'setVisible',
	        value: function setVisible(visible) {
	            this.g.setVisible(visible);
	        }
	    }, {
	        key: 'getScale',
	        value: function getScale() {
	            if (this.compositeType === _Config.COMPOSITE_TYPE.O_OUTSIDE_DIFF) {
	                return this.scale;
	            } else if (this.compositeType === _Config.COMPOSITE_TYPE.O_OUTSIDE) {
	                return 1;
	            } else {
	                if (this.ratio <= 1) {
	                    return 1;
	                } else {
	                    return 1 / this.ratio;
	                }
	            }
	        }

	        //终止动画，如果播放中还原为初始值

	    }, {
	        key: 'terminate',
	        value: function terminate() {
	            if (this.command.isDoing() && !this.command.isEnd()) {
	                this._restoreToDefault();
	                this.command.reset();
	            }
	        }

	        //播放动画

	    }, {
	        key: 'play',
	        value: function play() {
	            if (this.command.isEnd()) {
	                //还原
	                this._restoreToDefault();
	                this.command.reStart();
	            } else {
	                this.command.start();
	            }
	        }

	        //设置播放动画监听接口

	    }, {
	        key: 'setOnPlayStartListener',
	        value: function setOnPlayStartListener(onPlayStartListener) {
	            this.command.setOnPlayStartListener(onPlayStartListener);
	        }

	        //设置播放动画监听接口

	    }, {
	        key: 'setOnPlayEndListener',
	        value: function setOnPlayEndListener(onPlayEndListener) {
	            this.command.setOnPlayEndListener(onPlayEndListener);
	        }

	        //是否播放中

	    }, {
	        key: 'isPlaying',
	        value: function isPlaying() {
	            return this.command.isPlaying();
	        }

	        //只要开始播放后，暂停状态也是播放中

	    }, {
	        key: 'isDoing',
	        value: function isDoing() {
	            return this.command.isDoing();
	        }
	    }, {
	        key: 'pause',
	        value: function pause() {
	            this.command.stop();
	        }

	        //改变位似比

	    }, {
	        key: 'changeRatio',
	        value: function changeRatio(ratio) {
	            this.ratio = ratio;

	            if (this.compositeType === _Config.COMPOSITE_TYPE.O_OUTSIDE) {
	                return;
	            }
	            this.initLastCommand();
	            this.command.reset();

	            this.graphic.updateTextType(_Config.GRAPHIC_TEXT_TYPE.ORIGIN);
	            this.graphic.setPointVisible(true);
	            this.graphic.setLineVisible(true);

	            if (this.compositeType === _Config.COMPOSITE_TYPE.O_OUTSIDE_DIFF) {
	                this.matchParent();
	            } else {
	                this.updateView();
	                //this.toCenter();
	            }
	            this.updateInitPos();
	        }
	    }, {
	        key: 'updateTextIndex',
	        value: function updateTextIndex() {
	            var texts = this.g.selectAll('text');
	            var children = this.g.children();
	            var lastEl = children[children.length - 1];
	            for (var i = 0; i < texts.length; i++) {
	                var text = texts[i];
	                text.insertAfter(lastEl);
	            }
	        }
	    }, {
	        key: 'updateTextPos',
	        value: function updateTextPos() {
	            var that = this;
	            var homoTextAreas = this.homoEl.getTextAreas();
	            var graphicTextAreas = this.graphic.getTextAreas();
	            var homoTextRects = [];
	            var graphicTextRects = [];
	            homoTextAreas.forEach(function (textArea) {
	                homoTextRects.push(textArea.getTextRect());
	            });
	            graphicTextAreas.forEach(function (textArea) {
	                graphicTextRects.push(textArea.getTextRect());
	            });

	            var graphicNotIntersList = [];
	            var homoNotIntersList = [];
	            var oNotIntersList = [];

	            graphicNotIntersList.push(this.dashLine);
	            homoNotIntersList.push(this.dashLine);
	            oNotIntersList.push(this.dashLine);

	            if (this.ratio > 1) {
	                //两侧时，只需要判断各自位置即可
	                if (this.compositeType === _Config.COMPOSITE_TYPE.O_OUTSIDE_DIFF) {
	                    //位似图点不变
	                    graphicNotIntersList = graphicNotIntersList.concat(this.graphic.getLine());
	                    homoNotIntersList = homoNotIntersList.concat(this.homoEl.getLine());
	                } else {
	                    graphicNotIntersList = graphicNotIntersList.concat(homoTextRects).concat(this.graphic.getLine()).concat(this.homoEl.getLine());
	                    homoNotIntersList = homoNotIntersList.concat(this.homoEl.getLine());
	                }
	            } else if (this.ratio === 1) {
	                //预设顶点不和线相交
	                graphicNotIntersList = graphicNotIntersList.concat(this.graphic.getLine());
	                //两侧时，需要判断位似图位置
	                if (this.compositeType === _Config.COMPOSITE_TYPE.O_OUTSIDE_DIFF) {
	                    homoNotIntersList = homoNotIntersList.concat(this.homoEl.getLine());
	                }
	            } else {
	                //预设顶点不和线相交
	                graphicNotIntersList = graphicNotIntersList.concat(this.graphic.getLine());
	                //位似图不和预设图线、文本、虚线相交
	                homoNotIntersList = homoNotIntersList.concat(graphicTextRects).concat(this.homoEl.getLine()).concat(this.graphic.getLine());
	            }

	            var graphicHasEmpty = true;
	            var homoHasEmpty = true;

	            if (this.compositeType === _Config.COMPOSITE_TYPE.O_OUTSIDE_SAME && this.ratio > 1) {
	                //防止出现E和C重叠情况 4/2 5/2
	                homoTextAreas.forEach(function (textArea, i) {
	                    if (homoHasEmpty) {
	                        homoHasEmpty = textArea.notIntersection(homoNotIntersList);
	                    } else {
	                        textArea.notIntersection(homoNotIntersList);
	                    }
	                });
	                graphicTextAreas.forEach(function (textArea, i) {
	                    if (graphicHasEmpty) {
	                        graphicHasEmpty = textArea.notIntersection(graphicNotIntersList);
	                    } else {
	                        textArea.notIntersection(graphicNotIntersList);
	                    }
	                });
	            } else {
	                graphicTextAreas.forEach(function (textArea, i) {
	                    if (graphicHasEmpty) {
	                        graphicHasEmpty = textArea.notIntersection(graphicNotIntersList);
	                    } else {
	                        textArea.notIntersection(graphicNotIntersList);
	                    }
	                });
	                homoTextAreas.forEach(function (textArea, i) {
	                    if (homoHasEmpty) {
	                        homoHasEmpty = textArea.notIntersection(homoNotIntersList);
	                    } else {
	                        textArea.notIntersection(homoNotIntersList);
	                    }
	                });
	            }

	            //o点
	            oNotIntersList = oNotIntersList.concat(graphicTextRects).concat(homoTextRects);
	            var oHasEmpty = this.oTextArea.notIntersection(oNotIntersList);

	            /*一下是特殊情况处理*/
	            //o在内部时，且位似比接近1，将字母放在内部显示
	            if (this.compositeType === _Config.COMPOSITE_TYPE.O_INSIDE) {
	                if (this.ratio < 1) {
	                    if (!homoHasEmpty || this.ratio >= 6 / 9) {
	                        homoTextAreas.forEach(function (textArea, i) {
	                            var r = that.getRadius(textArea.getText());
	                            textArea.rotateText(180, undefined, r + textArea.r);
	                        });
	                    }
	                } else if (this.ratio > 1) {
	                    if (!graphicHasEmpty || this.ratio <= 9 / 6) {
	                        graphicTextAreas.forEach(function (textArea, i) {
	                            var r = that.getRadius(textArea.getText());
	                            textArea.rotateText(180, undefined, r + textArea.r);
	                        });
	                    }
	                }
	            }

	            //处理o两侧时，位似比较小，o点覆盖在位似图上的问题
	            if (this.compositeType === _Config.COMPOSITE_TYPE.O_OUTSIDE_DIFF && this.ratio < 1 && !oHasEmpty) {
	                this.oTextArea.rotateText(180);
	            }

	            //
	            if (this.graphicType === _Config.GRAPHIC_TYPE.FOUR) {
	                //处理位似比为1时，A点重叠问题
	                if (this.ratio === 1 && this.compositeType === _Config.COMPOSITE_TYPE.O_INSIDE) {
	                    var A = graphicTextAreas[0];
	                    A.rotateText(45);
	                } else if (this.compositeType === _Config.COMPOSITE_TYPE.O_OUTSIDE_SAME) {
	                    //点不能在图形内部
	                    var A, path;
	                    if (this.ratio > 1) {
	                        A = graphicTextAreas[0];
	                        path = this.graphic.getLine()[0].attr('d');
	                    } else {
	                        A = homoTextAreas[0];
	                        path = this.homoEl.getLine()[0].attr('d');
	                    }
	                    var centerPos = A.getTextCenterPos();
	                    var flag = Snap.path.isPointInside(path, centerPos.cx, centerPos.cy);
	                    if (flag) {
	                        A.rotateText(0);
	                    }
	                }
	                //处理遮挡到自身实线的问题
	                if (this.ratio === 9 / 4) {
	                    var B = graphicTextAreas[1];
	                    B.rotateText(0);
	                }
	                if (this.ratio === 4 / 9) {
	                    var B = homoTextAreas[1];
	                    B.rotateText(0);
	                }
	            }

	            //位似比小于等于2/9时，对小图和o点进行特殊处理
	            if (this.graphicType === _Config.GRAPHIC_TYPE.FIVE) {
	                var E;
	                if (this.compositeType === _Config.COMPOSITE_TYPE.O_OUTSIDE_DIFF) {
	                    if (this.ratio <= 1 / 4) {
	                        homoTextAreas.forEach(function (textArea, i) {
	                            textArea.rotateText(0);
	                        });
	                        this.oTextArea.rotateText(180);
	                        E = homoTextAreas[4];
	                    } else if (this.ratio >= 4 / 1) {
	                        graphicTextAreas.forEach(function (textArea, i) {
	                            textArea.rotateText(0);
	                        });
	                        E = graphicTextAreas[4];
	                    }
	                } else if (this.compositeType === _Config.COMPOSITE_TYPE.O_OUTSIDE_SAME) {
	                    if (this.ratio <= 1 / 4) {
	                        homoTextAreas.forEach(function (textArea, i) {
	                            textArea.rotateText(0);
	                        });
	                        E = homoTextAreas[4];
	                    } else if (this.ratio >= 4 / 1) {
	                        graphicTextAreas.forEach(function (textArea, i) {
	                            textArea.rotateText(0);
	                        });
	                        E = graphicTextAreas[4];
	                    }
	                } else if (this.compositeType === _Config.COMPOSITE_TYPE.O_INSIDE) {
	                    if (this.ratio === 1 / 9) {
	                        homoTextAreas.forEach(function (textArea, i) {
	                            textArea.rotateText(0);
	                        });
	                        homoTextAreas[4].rotateText(-10);
	                        this.oTextArea.rotateText(40);
	                    } else if (this.ratio <= 1 / 5) {
	                        inter = homoTextAreas[4].intersection(this.oTextArea.getTextRect()).points.length > 0;
	                        if (inter) {
	                            this.oTextArea.rotateText(17);
	                        }
	                    } else if (this.ratio >= 6 / 1) {
	                        this.oTextArea.rotateText(10);
	                    }
	                }

	                if (E) {
	                    var inter = E.intersection(this.oCircle).points.length > 0 || Snap.path.isPointInsideBBox(E.getTextRect().getBBox(), this.oPos.x, this.oPos.y);
	                    if (inter) {
	                        E.rotateText(50);
	                    }
	                }
	            }
	        }

	        //处理初始情况下（还没绘制位似比）的字母和o点重叠问题

	    }, {
	        key: 'updateInitPos',
	        value: function updateInitPos() {
	            if (this.graphicType === _Config.GRAPHIC_TYPE.FIVE && this.ratio > 1) {
	                var graphicTextAreas = this.graphic.getTextAreas();
	                var E;
	                if (this.ratio >= 4 / 1) {
	                    E = graphicTextAreas[4];
	                }
	                if (this.compositeType === _Config.COMPOSITE_TYPE.O_INSIDE && this.ratio === 4 / 1) {
	                    this.oTextArea.rotateText(35);
	                } else if (E) {
	                    //字母o点和字母重叠
	                    var inter = E.intersection(this.oCircle).points.length > 0 || Snap.path.isPointInsideBBox(E.getTextRect().getBBox(), this.oPos.x, this.oPos.y);
	                    if (inter) {
	                        E.rotateText(50);
	                    } else {
	                        inter = E.intersection(this.oTextArea.getTextRect()).points.length > 0;
	                        if (inter) {
	                            E.rotateText(25);
	                            this.oTextArea.rotateText(-25);
	                        }
	                    }
	                }
	            }
	        }
	    }, {
	        key: 'getRadius',
	        value: function getRadius(text) {
	            var r = 20;
	            if (this.graphicType === _Config.GRAPHIC_TYPE.THIRD) {
	                if (text.indexOf('A') >= 0) {
	                    r = 20;
	                } else if (text.indexOf('C') >= 0) {
	                    r = +37;
	                }
	            } else if (this.graphicType === _Config.GRAPHIC_TYPE.FOUR) {
	                if (text.indexOf('A') >= 0) {
	                    r = -5;
	                } else if (text.indexOf('C') >= 0) {
	                    r = 20;
	                } else if (text.indexOf('D') >= 0) {
	                    r = 10;
	                }
	            } else if (this.graphicType === _Config.GRAPHIC_TYPE.FIVE) {
	                r = 5;
	            }
	            return r;
	        }
	    }, {
	        key: 'getData',
	        value: function getData() {
	            var data = {};
	            data.scale = 1;
	            data.isEnd = this.command.isEnd();
	            data.isPlaying = this.command.isPlaying();
	            data.ratio = this.ratio;
	            return data;
	        }
	    }, {
	        key: 'getRatio',
	        value: function getRatio() {
	            return this.ratio;
	        }

	        //销毁

	    }, {
	        key: 'destroy',
	        value: function destroy() {}
	    }]);

	    return GraphicComposite;
	}();

	exports.default = GraphicComposite;

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _Config = __webpack_require__(4);

	var _Utils = __webpack_require__(8);

	var _Utils2 = _interopRequireDefault(_Utils);

	var _TextArea = __webpack_require__(9);

	var _TextArea2 = _interopRequireDefault(_TextArea);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Graphic = function () {
	    function Graphic(pos, color, svg, textType) {
	        _classCallCheck(this, Graphic);

	        this.pos = pos;
	        this.color = color;
	        this.svg = svg;
	        this.id = _Utils2.default.getUuid();

	        this.path = [];
	        this.circle = [];
	        this.textType = textType;
	        this.textAreas = [];
	        this.textPosData = []; //文本位置信息
	        this.init();
	    }

	    _createClass(Graphic, [{
	        key: 'init',
	        value: function init() {
	            var _this = this;

	            var that = this;
	            var allPos = this.pos;
	            var pathd = '';
	            allPos.forEach(function (pos, i) {

	                //添加文本
	                var str = String.fromCharCode(0x41 + i);
	                if (_this.textType === _Config.GRAPHIC_TEXT_TYPE.HOMO) {
	                    str += '\'';
	                }
	                var textArea = new _TextArea2.default(that.svg, pos, pos, str);
	                textArea.fill(that.color);
	                _this.textAreas.push(textArea);

	                if (i === 0) {
	                    pathd += 'M' + pos.x + ' ' + pos.y;
	                } else if (i === allPos.length - 1) {
	                    pathd += ' L' + pos.x + ' ' + pos.y + ' Z';
	                } else {
	                    pathd += ' L' + pos.x + ' ' + pos.y;
	                }

	                //添加圆
	                var circle = that.svg.circle(pos.x, pos.y, _Config.POS.CIRCLE_WIDTH).attr({
	                    fill: that.color
	                });
	                that.circle.push(circle);
	            });

	            that.path.push(that.svg.path(pathd).attr({
	                stroke: that.color,
	                strokeWidth: _Config.POS.STROKE_WIDTH,
	                fill: 'none'
	            }));

	            this.resetTextPos();
	        }
	    }, {
	        key: 'updateTextType',
	        value: function updateTextType(type) {
	            this.textAreas.forEach(function (textArea, i) {
	                var abc = String.fromCharCode(0x41 + i);
	                if (type === _Config.GRAPHIC_TEXT_TYPE.HOMO) {
	                    abc += '\'';
	                } else if (type === _Config.GRAPHIC_TEXT_TYPE.ONESCALE) {
	                    abc = [{
	                        txt: abc + '(',
	                        cls: 'abc_text nd_NewRoman_italic'
	                    }, {
	                        txt: abc + '\'',
	                        cls: 'abc_text nd_NewRoman_italic abc_text_blue'
	                    }, {
	                        txt: ')',
	                        cls: 'abc_text nd_NewRoman_italic'
	                    }];
	                } else if (type === _Config.GRAPHIC_TEXT_TYPE.NONE) {
	                    abc = '';
	                }
	                textArea.setText(abc);
	            });
	        }
	    }, {
	        key: 'updatePos',
	        value: function updatePos(pos) {
	            var that = this;
	            this.pos = pos;
	            var pathd = '';
	            this.each(function (circle, path, textArea, pos, i) {
	                circle.attr({ cx: pos.x, cy: pos.y });
	                textArea.setOriginPos(pos);
	                if (i === 0) {
	                    pathd += 'M' + pos.x + ' ' + pos.y;
	                } else if (i === that.pos.length - 1) {
	                    pathd += ' L' + pos.x + ' ' + pos.y + ' Z';
	                } else {
	                    pathd += ' L' + pos.x + ' ' + pos.y;
	                }
	            });
	            this.path[0].attr({ d: pathd });
	            this.resetTextPos();
	        }
	    }, {
	        key: 'updateColor',
	        value: function updateColor(color) {
	            this.each(function (circle, path, text) {
	                circle.attr({ fill: color });
	                if (path) {
	                    path.attr({ stroke: color });
	                }
	                text.attr({ fill: color });
	            });
	        }
	    }, {
	        key: 'each',
	        value: function each(cb) {
	            var _this2 = this;

	            this.pos.forEach(function (pos, i) {
	                cb(_this2.circle[i], _this2.path[i], _this2.textAreas[i], pos, i);
	            });
	        }
	    }, {
	        key: 'appendTo',
	        value: function appendTo(parentEl) {
	            this.each(function (circle, path, textArea, pos, i) {
	                textArea.appendTo(parentEl);
	                parentEl.add(circle);
	                if (path) {
	                    parentEl.add(path);
	                }
	            });
	        }
	    }, {
	        key: 'setPointVisible',
	        value: function setPointVisible(visible) {
	            this.circle.forEach(function (circle) {
	                circle.setVisibility(visible);
	            });
	        }
	    }, {
	        key: 'setLineVisible',
	        value: function setLineVisible(visible) {
	            this.path.forEach(function (path) {
	                path.setVisibility(visible);
	            });
	        }
	    }, {
	        key: 'setTextVisible',
	        value: function setTextVisible(visible) {
	            this.textAreas.forEach(function (text) {
	                text.setVisibility(visible);
	            });
	        }
	    }, {
	        key: 'setVisibility',
	        value: function setVisibility(visible) {
	            this.setPointVisible(visible);
	            this.setLineVisible(visible);
	            this.setTextVisible(visible);
	        }
	    }, {
	        key: 'remove',
	        value: function remove() {
	            this.g.remove();
	        }

	        //重置文本节点位置

	    }, {
	        key: 'resetTextPos',
	        value: function resetTextPos() {
	            var _this3 = this;

	            var centerPos = this.getCenterPos();
	            var r = 42;
	            this.pos.forEach(function (pos, i) {
	                var txtPos = _this3.getLinePos(centerPos, pos, r);

	                _this3.textAreas[i].updatePos(txtPos);

	                //更新文本节点数据
	                _this3.textPosData[i] = {
	                    oPos: pos,
	                    r: r
	                };
	            });
	        }

	        //获取图形中心点

	    }, {
	        key: 'getCenterPos',
	        value: function getCenterPos() {
	            var centerPos = { x: 0, y: 0 };
	            this.pos.forEach(function (pos, i) {
	                centerPos.x += pos.x;
	                centerPos.y += pos.y;
	            });
	            centerPos.x = centerPos.x / this.pos.length;
	            centerPos.y = centerPos.y / this.pos.length;

	            return centerPos;
	        }

	        //获取字母位置

	    }, {
	        key: 'getLinePos',
	        value: function getLinePos(posA, posB, r) {
	            var length = _Utils2.default.getTwoPointDistance(posA, posB);
	            var newPos = _Utils2.default.getLightPos(posA, posB, length + r);
	            return newPos;
	        }
	    }, {
	        key: 'getLine',
	        value: function getLine() {
	            return this.path;
	        }
	    }, {
	        key: 'getCircle',
	        value: function getCircle() {
	            return this.circle;
	        }
	    }, {
	        key: 'getTextAreas',
	        value: function getTextAreas() {
	            return this.textAreas;
	        }
	    }]);

	    return Graphic;
	}();

	exports.default = Graphic;

/***/ },
/* 8 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	/**
	 * Created by ylf on 2016/7/25.
	 */

	var Utils = {
	    /**
	     * 获取两条线的交点位置和坐标
	     * @param line1 {k:0.5,b:2}
	     * @param line2 kb
	     * @returns {*}
	     */
	    getTwoLineIntersection: function getTwoLineIntersection(a, b, c, d) {

	        /** 1 解线性方程组, 求线段交点. **/
	        // 如果分母为0 则平行或共线, 不相交
	        var denominator = (b.y - a.y) * (d.x - c.x) - (a.x - b.x) * (c.y - d.y);
	        if (denominator == 0) {
	            return false;
	        }

	        // 线段所在直线的交点坐标 (x , y)
	        var x = ((b.x - a.x) * (d.x - c.x) * (c.y - a.y) + (b.y - a.y) * (d.x - c.x) * a.x - (d.y - c.y) * (b.x - a.x) * c.x) / denominator;
	        var y = -((b.y - a.y) * (d.y - c.y) * (c.x - a.x) + (b.x - a.x) * (d.y - c.y) * a.y - (d.x - c.x) * (b.y - a.y) * c.y) / denominator;

	        /** 2 判断交点是否在两条线段上 **/
	        if (
	        // 交点在线段1上
	        Math.round((x - a.x) * (x - b.x)) <= 0 && Math.round((y - a.y) * (y - b.y)) <= 0
	        // 且交点也在线段2上
	        && Math.round((x - c.x) * (x - d.x)) <= 0 && Math.round((y - c.y) * (y - d.y)) <= 0) {

	            // 返回交点p
	            return {
	                x: x,
	                y: y
	            };
	        }
	        //否则不相交
	        return false;
	    },
	    /**
	     * 获取弧度
	     * @param degree 角度
	     * @returns {number}
	     */
	    getRadian: function getRadian(degree) {
	        return 2 * Math.PI / 360 * degree;
	    },
	    /**
	     * 获取角度
	     * @param degree 弧度
	     * @returns {number}
	     */
	    getDegree: function getDegree(radian) {
	        return radian * 360 / (2 * Math.PI);
	    },
	    /**
	     * 获取直接kb值
	     * @param degree 与x轴角度
	     * @param pos 线上的一点
	     */
	    getLineKb: function getLineKb(degree, pos) {
	        var kb = {};
	        if (degree > 90) {
	            kb.k = Math.tan(this.getRadian(180 - degree));
	            kb.k = -kb.k;
	        } else {
	            kb.k = Math.tan(this.getRadian(degree));
	        }
	        //pos.y = k * pos.x + b;
	        kb.b = pos.y - kb.k * pos.x;
	        return kb;
	    },

	    /**
	     * 获取弧长
	     * @param degree 角度
	     * @param r 半径
	     * @returns {number}
	     */
	    getArc: function getArc(degree, r) {
	        return 2 * Math.PI * r * degree / 360;
	    },
	    /**
	     * 获取差积
	     * @param originPos 焦点、原始坐标
	     * @param startPos  相对开始坐标
	     * @param endPos 结束坐标
	     * @returns {number}
	     */
	    getDifferent: function getDifferent(originPos, startPos, endPos) {
	        var startVector = {
	            x: startPos.x - originPos.x,
	            y: startPos.y - originPos.y
	        };
	        var endVector = {
	            x: endPos.x - originPos.x,
	            y: endPos.y - originPos.y
	        };
	        return parseFloat(startVector.x * endVector.y) - parseFloat(endVector.x * startVector.y); //叉积
	    },
	    /**
	     * 余弦定理，已知三边，求角度
	     * @param a
	     * @param b
	     * @param c
	     * @returns {Number}
	     */
	    getCosineAngle: function getCosineAngle(a, b, c) {
	        //余弦定理
	        //由余弦定理得a²=b²+c²-2bc*CosA
	        //∴CosA=(b²+c²-a²)/(2bc)=7/8
	        var cosA = (Math.pow(b, 2) + Math.pow(c, 2) - Math.pow(a, 2)) / (2 * b * c);
	        // 得到弧度
	        var acosA = Math.acos(cosA);
	        // 弧度转角度
	        //1弧度=180/π度
	        //1度=π/180弧度
	        return parseFloat(acosA * (180 / Math.PI));
	    },
	    getCosineAngleByPos: function getCosineAngleByPos(aPos, bPos, cPos) {
	        var a, b, c;
	        a = parseFloat(Math.sqrt(Math.pow(bPos.x - cPos.x, 2) + Math.pow(bPos.y - cPos.y, 2)));
	        b = parseFloat(Math.sqrt(Math.pow(bPos.x - aPos.x, 2) + Math.pow(bPos.y - aPos.y, 2)));
	        c = parseFloat(Math.sqrt(Math.pow(cPos.x - aPos.x, 2) + Math.pow(cPos.y - aPos.y, 2)));
	        return this.getCosineAngle(a, b, c);
	    },
	    /**
	     * 勾股定理，求C边的值
	     * @param a a边长
	     * @param b b边长
	     * @returns {number}
	     */
	    getPythagoreanLineC: function getPythagoreanLineC(a, b) {
	        return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2));
	    },
	    /**
	     * 已知角度和斜边长，求斜边坐标
	     * @param a a边长
	     * @param b b边长
	     * @returns {number}
	     */
	    getLinePosByAngle: function getLinePosByAngle(angle, width) {
	        //TODO:确认一下角度超过90度时候的值是否是对称的
	        if (angle > 90) {
	            angle = 180 - angle;
	        }
	        var x = Math.cos(this.getRadian(angle)) * width;
	        var y = Math.sin(this.getRadian(angle)) * width;
	        return { x: x, y: y };
	    },
	    /**
	     * 获取两点距离
	     * @param pos1 {x:100,y:100}
	     * @param pos2
	     * @returns {number}
	     */
	    getTwoPointDistance: function getTwoPointDistance(pos1, pos2) {
	        var x = pos2.x - pos1.x,
	            y = pos2.y - pos1.y;
	        return Math.sqrt(x * x + y * y);
	    },

	    /**
	     * 求点在圆上的坐标
	     * @param degree 角度
	     * @param r 半径
	     * @returns {{x: number, y: number}}
	     */
	    getSpherePos: function getSpherePos(degree, r) {

	        var x1 = 0 + r * Math.cos(degree * Math.PI / 180);
	        var y1 = 0 + r * Math.sin(degree * Math.PI / 180);

	        return {
	            x: x1,
	            y: y1
	        };
	    },

	    /**
	     * 定比点公式，获取线段上的第三点坐标
	     * @param posa 点a
	     * @param posb 点b
	     * @param ca 点c到a的距离
	     * @returns {{x: (number|*), y: (number|*)}}
	     */
	    getLightPos: function getLightPos(posa, posb, ca) {
	        //http://www.zybang.com/question/0f4a343e136e33929290d3d599fc1d7c.html
	        var m, n;
	        var s = ca;
	        var a = posa.x;
	        var b = posa.y;
	        var c = posb.x;
	        var d = posb.y;

	        var M = this.getTwoPointDistance(posa, posb);
	        if (M == ca) {
	            return {
	                x: c,
	                y: d
	            };
	        }
	        var la = s / (Math.sqrt(Math.pow(a - c, 2) + Math.pow(b - d, 2)) - s);
	        m = (a + la * c) / (1 + la);
	        n = (b + la * d) / (1 + la);
	        return {
	            x: m,
	            y: n
	        };
	    },

	    /**
	     * 根据三点获取旋转角度
	     * @param posa 中心点
	     * @param posb 上一个点
	     * @param posc 当前点
	     * @returns {*}
	     */
	    getRotateAngle: function getRotateAngle(posa, posb, posc) {
	        //通过三点计算旋转角度
	        var angle = this.getCosineAngleByPos(posa, posb, posc);
	        //计算三点的差积，判断旋转方向
	        var different = this.getDifferent(posa, posb, posc);
	        if (different < 0) {
	            angle = -angle;
	        }
	        return angle;
	    },
	    /**
	     * http://blog.csdn.net/fly542/article/details/6638299
	     * 已知三点，求第三点到另外两点组成的垂线长度
	     * @param pos1
	     * @param pos2
	     * @param pos3
	     * @returns {number}
	     */
	    getPedalHeight: function getPedalHeight(pos1, pos2, pos3) {
	        var A = (pos1.y - pos2.y) / (pos1.x - pos2.x);
	        var B = pos1.y - A * pos1.y;
	        /// > 0 = ax +b -y;
	        return Math.abs(A * pos3.x + B - pos3.y) / Math.sqrt(A * A + 1);
	    },
	    /**
	     * 获取圆和线段的交点
	     * http://blog.csdn.net/luols/article/details/7476512
	     * @param ptStart 线起点
	     * @param ptEnd 线终点
	     * @param ptCenter 原心
	     * @param Radius 半径
	     * @returns {boolean}
	     * @constructor
	     */
	    getLineCircleIntersectionPos: function getLineCircleIntersectionPos(ptStart, ptEnd, ptCenter, Radius) {
	        var EPS = 0.00001;
	        var ptInter1 = {};
	        var ptInter2 = {};
	        var fDis = Math.sqrt((ptEnd.x - ptStart.x) * (ptEnd.x - ptStart.x) + (ptEnd.y - ptStart.y) * (ptEnd.y - ptStart.y));
	        var d = {};
	        d.x = (ptEnd.x - ptStart.x) / fDis;
	        d.y = (ptEnd.y - ptStart.y) / fDis;
	        var E = {};
	        E.x = ptCenter.x - ptStart.x;
	        E.y = ptCenter.y - ptStart.y;
	        var a = E.x * d.x + E.y * d.y;
	        var a2 = a * a;
	        var e2 = E.x * E.x + E.y * E.y;
	        var Radius2 = Radius * Radius;
	        if (Radius2 - e2 + a2 < 0) {
	            return false;
	        } else {
	            var f = Math.sqrt(Radius2 - e2 + a2);
	            var t = a - f;
	            if (t - 0.0 > -EPS && t - fDis < EPS) {
	                ptInter1.x = ptStart.x + t * d.x;
	                ptInter1.y = ptStart.y + t * d.y;
	            }
	            t = a + f;
	            if (t - 0.0 > -EPS && t - fDis < EPS) {
	                ptInter2.x = ptStart.x + t * d.x;
	                ptInter2.y = ptStart.y + t * d.y;
	            }
	            return [ptInter1, ptInter2];
	        }
	    },
	    getUuid: function getUuid() {
	        var s = [];
	        var hexDigits = "0123456789abcdef";
	        for (var i = 0; i < 36; i++) {
	            s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1);
	        }
	        s[14] = "4"; // bits 12-15 of the time_hi_and_version field to 0010
	        s[19] = hexDigits.substr(s[19] & 0x3 | 0x8, 1); // bits 6-7 of the clock_seq_hi_and_reserved to 01
	        s[8] = s[13] = s[18] = s[23] = "-";

	        var uuid = s.join("");
	        return uuid;
	    },
	    /**
	     * 计算点离矩形最短距离
	     * @param posa 点
	     * @param rect 矩形 {left:,top,right,bottom}
	     * @returns {number}
	     */
	    getRectShortestDistance: function getRectShortestDistance(posa, rect) {
	        //上
	        var s = this.getShortestDistanceAndPoint(posa, { x: rect.left, y: rect.top }, { x: rect.right, y: rect.top });
	        //右
	        var y = this.getShortestDistanceAndPoint(posa, { x: rect.right, y: rect.top }, { x: rect.right, y: rect.bottom });
	        //下
	        var x = this.getShortestDistanceAndPoint(posa, { x: rect.left, y: rect.bottom }, { x: rect.right, y: rect.bottom });
	        //左
	        var z = this.getShortestDistanceAndPoint(posa, { x: rect.left, y: rect.top }, { x: rect.left, y: rect.bottom });

	        var target = s;

	        var d = Math.min(s.d, y.d, x.d, z.d);
	        if (d === s.d) {
	            target = s;
	            target.vertical = true;
	            target.direction = 'top';
	        }
	        if (d === y.d) {
	            target = y;
	            target.vertical = false;
	            target.direction = 'right';
	        }
	        if (d === x.d) {
	            target = x;
	            target.vertical = true;
	            target.direction = 'bottom';
	        }
	        if (d === z.d) {
	            target = z;
	            target.vertical = false;
	            target.direction = 'left';
	        }
	        return target;
	    },
	    isPosInsideRect: function isPosInsideRect(pos, rect) {
	        return pos.x >= rect.left && pos.x <= rect.right && pos.y >= rect.top && pos.y <= rect.bottom;
	    },
	    /**
	     * 计算点a到线段bc的最短距离
	     * @param posa
	     * @param posb
	     * @param posc
	     */
	    getShortestDistanceAndPoint: function getShortestDistanceAndPoint(posa, posb, posc) {
	        var ab = this.getTwoPointDistance(posa, posb);
	        var ac = this.getTwoPointDistance(posa, posc);
	        var bc = this.getTwoPointDistance(posb, posc);
	        var halfPerimeter = (ab + ac + bc) / 2; //半周长
	        //求面积：海伦公式
	        var S = Math.sqrt(halfPerimeter * (halfPerimeter - ab) * (halfPerimeter - ac) * (halfPerimeter - bc));
	        //另外一个面积公式： 底*高/2
	        var height = 2 * S / bc;
	        //判断高是否在三角形内
	        var thirdLong = Math.max(ab, ac);
	        var hc = Math.sqrt(thirdLong * thirdLong - height * height); //计算高垂足点到c的位置
	        //计算出来的长度大于底边，在外部
	        var shortestDistance = 0;
	        var shortestPos = {};
	        if (hc > bc) {
	            shortestDistance = Math.min(ac, ab);
	            if (ac > ab) {
	                shortestDistance = ab;
	                shortestPos = posb;
	            } else {
	                shortestDistance = ac;
	                shortestPos = posc;
	            }
	        } else {
	            //返回最短距离
	            shortestDistance = height;
	            shortestPos = this.getRectVerticalPos(posa, posb, posc, height); //
	        }
	        return {
	            d: shortestDistance, //最短距离
	            pos: shortestPos, //高在a边上的坐标
	            h: height, //高
	            minSide: Math.min(ab, ac)
	        };
	    },
	    /**
	     * 特例（矩形上的）已知直角对应的两点和两侧线长，求直接坐标
	     * @param pos1
	     * @param pos2
	     */
	    getRectVerticalPos: function getRectVerticalPos(posa, posb, posc, height) {
	        var x = 0,
	            y = 0;
	        if (posb.x === posc.x) {
	            x = posb.x;
	            y = posa.y;
	        } else if (posb.y = posc.y) {
	            y = posb.y;
	            x = posa.x;
	        }
	        return {
	            x: x,
	            y: y
	        };
	    },
	    //Angle为正时逆时针转动, 单位为弧度
	    /**
	     * 已有点和圆心，旋转指定角度
	     * @param Source 圆上一点
	     * @param Angle 离圆上改点的旋转弧度
	     * @param R 半径
	     * @returns {{x: number, y: number}}
	     */
	    rotate: function rotate(Source, Angle, R) {
	        var A, R;
	        A = Math.atan2(Source.y, Source.x); //atan2自带坐标系识别, 注意X,Y的顺序
	        A += Angle; //旋转
	        return {
	            x: Math.cos(A) * R,
	            y: Math.sin(A) * R
	        };
	    },

	    isMobile: navigator.userAgent.match(/Android|iPhone|iPad|iPod|BlackBerry|IEMobile/i) ? true : false
	};

	exports.default = Utils;

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _Config = __webpack_require__(4);

	var _Utils = __webpack_require__(8);

	var _Utils2 = _interopRequireDefault(_Utils);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var TextArea = function () {
	    function TextArea(svg, txtPos, oPos, txt) {
	        _classCallCheck(this, TextArea);

	        this.svg = svg;
	        this.txtPos = txtPos;
	        this.oPos = oPos;
	        this.txt = txt;
	        this.text;
	        this.textRect;
	        this.r = _Utils2.default.getTwoPointDistance(txtPos, oPos);
	        this.init();
	    }

	    _createClass(TextArea, [{
	        key: 'init',
	        value: function init() {
	            this.text = this.svg.text(this.txtPos.x, this.txtPos.y, this.txt).attr({
	                'class': 'abc_text nd_NewRoman_italic'
	            });

	            var pos = this.getTextRectPos();
	            this.textRect = this.svg.rect(pos.x, pos.y, pos.width, pos.height - 2, pos.rx).attr({
	                fill: 'yellow',
	                opacity: '0'
	            });
	        }
	    }, {
	        key: 'getTextRectPos',
	        value: function getTextRectPos() {
	            var rx = 10;
	            var txt = this.text.getText();
	            if (txt.endsWith('\'')) {
	                rx = 100;
	            }
	            var box = this.text.getBBox();
	            var subWidth = 2;
	            var x = box.x + subWidth / 2;
	            var y = box.y + 10;
	            var height = box.height - 10 * 2;
	            var innerWidth = box.width - subWidth;
	            return {
	                x: x,
	                y: y,
	                width: innerWidth,
	                height: height,
	                rx: rx,
	                ry: rx
	            };
	        }
	    }, {
	        key: 'updateTextRect',
	        value: function updateTextRect() {
	            this.textRect.attr(this.getTextRectPos());
	        }
	    }, {
	        key: 'getTextRect',
	        value: function getTextRect() {
	            return this.textRect;
	        }
	    }, {
	        key: 'fill',
	        value: function fill(color) {
	            this.text.attr({ fill: color });
	        }
	    }, {
	        key: 'getText',
	        value: function getText() {
	            return this.text.getText();
	        }

	        /**
	         * 更新文本节点运动中心点
	         * @param oPos
	         */

	    }, {
	        key: 'setOriginPos',
	        value: function setOriginPos(oPos) {
	            this.oPos = oPos;
	        }

	        //重置文本坐标位置

	    }, {
	        key: 'updatePos',
	        value: function updatePos(txtPos, oPos) {
	            this.txtPos = txtPos;
	            if (oPos) {
	                this.oPos = oPos;
	            }

	            this.r = _Utils2.default.getTwoPointDistance(txtPos, this.oPos);
	            this.text.toPos(txtPos);
	            this.updateTextRect();
	        }
	    }, {
	        key: 'setVisibility',
	        value: function setVisibility(visibility) {
	            this.textRect.setVisibility(visibility);
	            this.text.setVisibility(visibility);
	        }
	    }, {
	        key: 'attr',
	        value: function attr(data) {
	            this.text.attr(data);
	        }
	    }, {
	        key: 'appendTo',
	        value: function appendTo(parentEl) {
	            parentEl.add(this.textRect);
	            parentEl.add(this.text);
	        }
	    }, {
	        key: 'setText',
	        value: function setText(data) {
	            this.text.setText(data);
	            this.updateTextRect();
	        }
	    }, {
	        key: 'getIntersectionShape',
	        value: function getIntersectionShape(node) {
	            var shape;
	            if (!node || !node.localName) {
	                shape = null;
	            }
	            switch (node.localName) {
	                case "circle":
	                    shape = new Svg2DCalculate.Circle(node);
	                    break;
	                case "ellipse":
	                    shape = new Svg2DCalculate.Ellipse(node);
	                    break;
	                case "line":
	                    shape = new Svg2DCalculate.Line(node);
	                    break;
	                case "path":
	                    shape = new Svg2DCalculate.Path(node);
	                    break;
	                case "polygon":
	                    shape = new Svg2DCalculate.Polygon(node);
	                    break;
	                case "rect":
	                    shape = new Svg2DCalculate.Rectangle(node);
	                    break;
	                default:
	                // do nothing for now
	            }
	            return shape;
	        }
	    }, {
	        key: 'notIntersection',
	        value: function notIntersection(els) {
	            if (!(els instanceof Array)) {
	                var elAry = [];
	                elAry.push(els);
	                els = elAry;
	            }
	            if (els.length <= 0) {
	                return true;
	            }
	            var that = this;
	            var angle = null;
	            var textRect = this.textRect;

	            //递归执行判断
	            var __rotate = function __rotate() {
	                if (angle == null) {
	                    angle = 0;
	                } else {
	                    angle -= 15;
	                }
	                if (angle < -360) {
	                    //一圈都没空，还原坐标位置
	                    that.rotateText(0);
	                    return false;
	                }

	                var shape2 = that.getIntersectionShape(textRect.node);

	                //判断是否和其他元素有交点
	                var inters;
	                for (var i = 0; i < els.length; i++) {
	                    var el = els[i];
	                    var shape1 = that.getIntersectionShape(el.node);
	                    inters = Svg2DCalculate.Intersection.intersectShapes(shape1, shape2);
	                    if (inters.points.length > 0) {
	                        break;
	                    }
	                }

	                //旋转到下一个位置，继续进行判断
	                if (inters && inters.points.length > 0) {
	                    that.rotateText(angle);
	                    return __rotate();
	                } else {
	                    return true;
	                }
	            };
	            return __rotate();
	        }
	    }, {
	        key: 'intersection',
	        value: function intersection(snapEl) {
	            var shape2 = this.getIntersectionShape(this.textRect.node);
	            var shape1 = this.getIntersectionShape(snapEl.node);
	            var inters = Svg2DCalculate.Intersection.intersectShapes(shape2, shape1);
	            return inters;
	        }
	    }, {
	        key: 'rotateText',
	        value: function rotateText(angle, minDis, r) {
	            if ((typeof minDis === 'undefined' ? 'undefined' : _typeof(minDis)) === ( true ? 'undefined' : _typeof(undefined))) {
	                minDis = this.text.getText().length > 2;
	            }
	            r = r || this.r;
	            var that = this;
	            var rotatePos = _Utils2.default.rotate({ x: that.txtPos.x - this.oPos.x, y: this.oPos.y - that.txtPos.y }, _Utils2.default.getRadian(angle), r);
	            var pos = {
	                x: rotatePos.x + this.oPos.x,
	                y: -rotatePos.y + this.oPos.y
	            };

	            if (minDis) {
	                //计算先对更远的坐标，防止碰撞
	                var absPos = _Utils2.default.getLightPos(that.oPos, pos, that.r * 5);
	                that.text.toPos(absPos);
	                var b2 = that.text.getBBox();

	                var rect = {
	                    left: b2.x,
	                    top: b2.y,
	                    right: b2.x + b2.width,
	                    bottom: b2.y + b2.height
	                };
	                //计算出离矩形最短坐标点
	                var shortDistance = _Utils2.default.getRectShortestDistance(that.oPos, rect);
	                //求原点离该距离的坐标
	                var actualPos = _Utils2.default.getLightPos(that.oPos, shortDistance.pos, that.r / 3);
	                var newPosX = absPos.x - (shortDistance.pos.x - actualPos.x);
	                var newPosY = absPos.y - (shortDistance.pos.y - actualPos.y);
	                that.text.toPos({ x: newPosX, y: newPosY });
	            } else {
	                that.text.toPos(pos);
	            }
	            //重新定位容器
	            that.updateTextRect();
	        }
	    }, {
	        key: 'getTextCenterPos',
	        value: function getTextCenterPos() {
	            var box = this.text.getBBox();
	            return {
	                cx: box.cx,
	                cy: box.cy
	            };
	        }
	    }, {
	        key: 'restore',
	        value: function restore() {
	            this.updatePos(this.txtPos);
	        }
	    }]);

	    return TextArea;
	}();

	exports.default = TextArea;

/***/ },
/* 10 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Timer = function () {
	    function Timer(delay) {
	        _classCallCheck(this, Timer);

	        this._timeOutId = 0;
	        this._delay = delay;
	        this._status = false;
	    }

	    _createClass(Timer, [{
	        key: '_start',
	        value: function _start(cb) {
	            //已经暂停
	            if (!this._status) {
	                return false;
	            }
	            var that = this;
	            this._timeOutId = setTimeout(function () {
	                cb();
	                that._start(cb);
	            }, this._delay);
	        }
	    }, {
	        key: 'start',
	        value: function start(task) {
	            var immediately = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

	            this.stop();
	            this._status = true;
	            if (immediately) {
	                task && task();
	            }
	            this._start(function () {
	                task && task();
	            });
	        }
	    }, {
	        key: 'stop',
	        value: function stop() {
	            this._status = false;
	            clearTimeout(this._timeOutId);
	        }
	    }, {
	        key: 'isPlaying',
	        value: function isPlaying() {
	            return this._status;
	        }
	    }]);

	    return Timer;
	}();

	var Command = function () {
	    function Command() {
	        _classCallCheck(this, Command);

	        this._command = [];
	        this._currentIndex = -1;
	        //TODO:这个开发完成后需要改回正常数值
	        this._timer = new Timer(1000);
	    }

	    _createClass(Command, [{
	        key: 'push',
	        value: function push(command) {
	            this._command.push(command);
	        }
	    }, {
	        key: 'removeLast',
	        value: function removeLast(cb) {
	            if (this._command[this._command.length - 1] === cb) {
	                this._command.pop();
	            }
	        }
	    }, {
	        key: 'do',
	        value: function _do() {
	            if (!this.isEnd()) {
	                this._currentIndex++;
	                var cb = this._command[this._currentIndex];
	                if (cb.cb) {
	                    cb.option.bk = false;
	                    cb.cb(true);
	                } else {
	                    cb(true);
	                }
	            }
	            if (this._currentIndex >= this._command.length - 1) {
	                this._currentIndex = this._command.length - 1;
	                this.stop();
	                this._onPlayEndListener && this._onPlayEndListener();
	            }
	        }
	    }, {
	        key: 'doAllImmediately',
	        value: function doAllImmediately() {
	            var animate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

	            this._command.forEach(function (cb) {
	                if (cb.cb) {
	                    cb.option.bk = false;
	                    cb.cb(false);
	                } else {
	                    cb(false);
	                }
	            });
	            this._currentIndex = this._command.length - 1;
	        }
	    }, {
	        key: 'isEnd',
	        value: function isEnd() {
	            return this._currentIndex >= this._command.length - 1;
	        }
	    }, {
	        key: 'reset',
	        value: function reset() {
	            this.break();
	            this.stop();
	            this._currentIndex = -1;
	        }
	    }, {
	        key: 'start',
	        value: function start() {
	            var _this = this;

	            var immediately = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

	            this._onPlayStartListener && this._onPlayStartListener();
	            this._timer.start(function () {
	                _this.do();
	            }, immediately);
	        }
	    }, {
	        key: 'reStart',
	        value: function reStart() {
	            var immediately = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

	            this._currentIndex = -1;
	            this.break();
	            this.start(immediately);
	        }
	    }, {
	        key: 'setOnPlayEndListener',
	        value: function setOnPlayEndListener(onPlayEndListener) {
	            this._onPlayEndListener = onPlayEndListener;
	        }
	    }, {
	        key: 'setOnPlayStartListener',
	        value: function setOnPlayStartListener(onPlayStartListener) {
	            this._onPlayStartListener = onPlayStartListener;
	        }
	    }, {
	        key: 'stop',
	        value: function stop() {
	            this._timer.stop();
	        }
	    }, {
	        key: 'isDoing',
	        value: function isDoing() {
	            return this._currentIndex >= 0;
	        }
	    }, {
	        key: 'isPlaying',
	        value: function isPlaying() {
	            return this._timer.isPlaying();
	        }
	    }, {
	        key: 'break',
	        value: function _break() {
	            var cb = this._command[this._currentIndex];
	            if (cb && cb.cb) {
	                cb.option.bk = true;
	            }
	        }
	    }, {
	        key: 'breakPromise',
	        value: function breakPromise() {
	            var cb = this._command[this._currentIndex];
	            if (cb && cb.cb && cb.option.bk) {
	                throw new Error('break promise');
	            }
	        }
	    }, {
	        key: 'createPromiseCommand',
	        value: function createPromiseCommand(cb) {
	            var option = {
	                bk: false
	            };
	            return {
	                cb: cb,
	                option: option
	            };
	        }
	    }, {
	        key: 'createPromise',
	        value: function createPromise(task, delay, start) {
	            var that = this;
	            if (start) {
	                return new Promise(function (resolve, reject) {
	                    that.breakPromise();
	                    var tasks = function tasks() {
	                        that.breakPromise();
	                        task();
	                        resolve();
	                    };
	                    setTimeout(tasks, delay);
	                });
	            } else {
	                return function () {
	                    return new Promise(function (resolve, reject) {
	                        that.breakPromise();
	                        var tasks = function tasks() {
	                            that.breakPromise();
	                            task();
	                            resolve();
	                        };
	                        setTimeout(tasks, delay);
	                    });
	                };
	            }
	        }
	    }]);

	    return Command;
	}();

	exports.default = Command;

/***/ },
/* 11 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	//参考：https://github.com/kticka/jquery-outclick/blob/master/outclick.js
	var OutClick = {
	    instances: [], //{containerEle:'',listener:[]}
	    containerEle: document,
	    create: function create(containerEle) {
	        var ins = Object.create(this);
	        ins.instances = [];
	        ins.containerEle = containerEle;
	        return ins;
	    },
	    trigger: function trigger(event) {
	        var _this = this;

	        return $.each(this.instances, function (index, instance) {
	            if (_this.outside(instance.element, event.target)) {
	                var invoke = true;
	                if (instance.ignoreEle && !_this.outside($(instance.ignoreEle), event.target)) {
	                    invoke = false;
	                }
	                if (invoke && typeof instance.callback === 'function') {
	                    return instance.callback.call(instance.element);
	                }
	            }
	        });
	    },
	    register: function register(element, ignoreEle, callback) {
	        return this.instances.push({
	            element: element,
	            ignoreEle: ignoreEle,
	            options: [],
	            callback: callback
	        });
	    },
	    enable: function enable() {
	        var _this2 = this;

	        return $(this.containerEle).on('mouseup.outclick', function (e) {
	            _this2.trigger(e);
	        });
	    },
	    disable: function disable() {
	        return $(this.containerEle).off('mouseup.outclick');
	    },
	    reset: function reset() {
	        this.disable();
	        return this.enable();
	    },
	    outside: function outside(element, target) {
	        return !element.is(target) && element.has(target).length === 0;
	    }
	};

	$.fn.outclick = function (callback, ignoreEle, outClickInstance) {
	    outClickInstance.reset();
	    outClickInstance.register(this, ignoreEle, callback);
	    return this;
	};

	exports.default = OutClick;

/***/ },
/* 12 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	var Lang = {
	    'homo_name': '位似图形的画法',
	    'homo_scale': '缩放比例：',
	    'homo_ratio': '位似比',
	    'homo_outside': 'O在图形外',
	    'homo_outside_same': '同侧',
	    'homo_outside_diff': '两侧',
	    'homo_inside': 'O在图形内',
	    get: function get(key) {
	        return this[key] || '';
	    },
	    extend: function extend(lang) {
	        $.extend(this, lang);
	    },
	    initI18N: function initI18N($view) {
	        $view.find('._js_scale_txt').html(this.get('homo_scale'));
	        $view.find('._js_ratio_txt').html(this.get('homo_ratio'));
	        $view.find('._js_outside_txt').html(this.get('homo_outside'));
	        $view.find('._js_outside_same_txt').html(this.get('homo_outside_same'));
	        $view.find('._js_outside_diff_txt').html(this.get('homo_outside_diff'));
	        $view.find('._js_inside_txt').html(this.get('homo_inside'));
	    }
	};

	exports.default = Lang;

/***/ },
/* 13 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Snap.plugin(function (Snap, Element, Paper, global) {
	    //显示隐藏
	    Element.prototype.setVisible = function (visible) {
	        this.attr({ display: visible ? 'block' : 'none' });
	        return this;
	    };

	    //显示隐藏
	    Element.prototype.setVisibility = function (visible) {
	        this.attr({ visibility: visible ? 'visible' : 'hidden' });
	        return this;
	    };

	    //显示隐藏
	    Element.prototype.css = function (name, value) {
	        if ((typeof name === 'undefined' ? 'undefined' : _typeof(name)) === _typeof('')) {
	            this.node.style[name] = value;
	        } else if ((typeof name === 'undefined' ? 'undefined' : _typeof(name)) === 'object') {
	            for (var key in name) {
	                this.node.style[key] = name[key];
	            }
	        }
	        return this;
	    };

	    /**
	     * 设置文本
	     * @param data [{txt:'',cls:''}]
	     * @returns {Element}
	     */
	    Element.prototype.setText = function (datas) {
	        this.node.innerHTML = '';
	        var svgHtml = '';
	        if (datas instanceof Array) {
	            datas.forEach(function (data) {
	                svgHtml += '<tspan class="' + data.cls + '">' + data.txt + '</tspan>';
	            });
	            var c = Snap.fragment(svgHtml);
	            this.append(c);
	        } else {
	            this.node.innerHTML = datas;
	        }
	        return this;
	    };

	    /**
	     * 设置文本
	     * @param data [{txt:'',cls:''}]
	     * @returns {Element}
	     */
	    Element.prototype.getText = function () {
	        return $(this.node).text();
	    };

	    /**
	     * 定位到新节点
	     * @param pos
	     * @returns {Element}
	     */
	    Element.prototype.toPos = function (pos) {
	        this.attr('transform', '');
	        var bBox = this.getBBox();
	        var subX = pos.x - bBox.cx;
	        var subY = pos.y - bBox.cy;
	        var m = new Snap.Matrix();
	        m.translate(subX, subY);
	        this.transform(m);
	        return this;
	    };
	});

	exports.default = {};

/***/ }
/******/ ]);]]></presenter><resources><file src="./resources/index.html"/><file src="./resources/wood/images/drop_arrow_1.png"/><file src="./resources/wood/images/drop_arrow.png"/><file src="./resources/wood/images/icon_aside.png"/><file src="./resources/wood/images/icon_circle.png"/><file src="./resources/wood/images/icon_pause.png"/><file src="./resources/wood/images/icon_play.png"/><file src="./resources/wood/images/icon_sanjiao.png"/></resources></addon>