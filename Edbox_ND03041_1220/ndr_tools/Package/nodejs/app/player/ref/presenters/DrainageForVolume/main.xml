<?xml version='1.0' encoding='UTF-8'?>
<addon id="templateid"><properties/><dependencies><jsDependency><javaScript name="basicPresenter" version="1.0.2"/><javaScript name="Spry" version="1.0.0"/><javaScript name="out_frame" version="1.0.8"/><javaScript name="log4js" version="2.0.0"/><javaScript name="tools_common" version="1.3.0"/></jsDependency></dependencies><css><![CDATA[.exam_skin_wood .drainage_for_volume_box{position:relative;width:100%;height:100%;background:#bfd3e2}.exam_skin_wood .drainage_for_volume_box .drainage_content{width:100%;height:100%;padding:3.66667em 0 0;background:#c0d3e2;overflow:hidden}.exam_skin_wood .drainage_for_volume_box .drainage_tools{position:absolute;bottom:0;width:100%;z-index:105;background:-webkit-linear-gradient(top,#fbfbf4,#e5e5e5);background:linear-gradient(180deg,#fbfbf4,#e5e5e5);border-top:1px solid #b3c6d5;border-bottom:1px solid #b3c6d5;text-align:center}.exam_skin_wood .drainage_for_volume_box .drainage_tools .button_modules{position:relative;height:4.58333em;border-bottom:1px solid #efefe7}.exam_skin_wood .drainage_for_volume_box .drainage_tools .button_modules .com_part_toolbar{height:auto;position:relative;white-space:normal;right:0;left:0;top:0;bottom:0}.exam_skin_wood .drainage_for_volume_box .drainage_tools .button_modules .com_part_toolbar ul:first-child{margin-right:1.25em}.exam_skin_wood .drainage_for_volume_box .drainage_tools .button_modules .com_part_toolbar ul:first-child:before{content:"";position:absolute;top:.41667em;bottom:.41667em;width:1px;right:-.625em;background:#fff}.exam_skin_wood .drainage_for_volume_box .drainage_tools .button_modules .com_part_toolbar ul:first-child:after{content:"";position:absolute;top:.41667em;bottom:.41667em;width:1px;right:-.66667em;background:#d4d4d4}.exam_skin_wood .drainage_for_volume_box .drainage_tools .button_modules .com_part_toolbar ul:first-child li{min-width:5.5em;margin:0}.exam_skin_wood .drainage_for_volume_box .drainage_tools .button_modules .com_part_toolbar ul:first-child li .com_btn_text{padding:0 .3em}.exam_skin_wood .drainage_for_volume_box .drainage_tools .button_modules .com_part_toolbar ul:first-child li .com_btn_square_tool{background:0 0;border:.08333em solid transparent}.exam_skin_wood .drainage_for_volume_box .drainage_tools .button_modules .com_part_toolbar ul:first-child li.click_btn_on .com_btn_square_tool,.exam_skin_wood .drainage_for_volume_box .drainage_tools .button_modules .com_part_toolbar ul:first-child li:active .com_btn_square_tool{background:url(resources/wood/images/buttons_bg.png) no-repeat 50%;background-size:100% 100%;border:.08333em solid #fff}.exam_skin_wood .drainage_for_volume_box .drainage_tools ul{display:inline-block;position:relative;text-align:center;height:4.41667em;margin-top:.08333em}.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li{margin:0 .75em 0 .5em;display:inline-block;height:100%;position:relative;min-width:4.16667em}.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li:last-child{margin-right:0}.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li a{display:block;height:100%}.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li i{margin:0 auto;display:inline-block;width:2.83333em;height:2.83333em;vertical-align:top}.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li em{line-height:1;color:#595959;font-size:1em;display:block}.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_beaker em{color:#595959}.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_beaker i{background-image:url(resources/wood/images/icons_cup_nor.png);background-size:100% auto;background-position:50%;background-repeat:no-repeat}.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_flume em{color:#595959}.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_flume i{background-image:url(resources/wood/images/icons_watertank_nor.png);background-size:100% auto;background-position:50%;background-repeat:no-repeat}.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_flume:active em{color:#595959}.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_flume:active i{background-image:url(resources/wood/images/icons_watertank_nor.png);background-size:100% auto;background-position:50%;background-repeat:no-repeat}.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_l_stone em{color:#595959}.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_l_stone i{background-image:url(resources/wood/images/icons_l_stone_nor.png);background-size:100% auto;background-position:50%;background-repeat:no-repeat}.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_l_stone:active em{color:#595959}.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_l_stone:active i{background-image:url(resources/wood/images/icons_l_stone_nor.png);background-size:100% auto;background-position:50%;background-repeat:no-repeat}.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_b_stone em{color:#595959}.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_b_stone i{background-image:url(resources/wood/images/icons_b_stone_nor.png);background-size:100% auto;background-position:50%;background-repeat:no-repeat}.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_b_stone:active em{color:#595959}.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_b_stone:active i{background-image:url(resources/wood/images/icons_b_stone_nor.png);background-size:100% auto;background-position:50%;background-repeat:no-repeat}.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_cylinder em{color:#595959}.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_cylinder i{background-image:url(resources/wood/images/icons_cylinder_nor.png);background-size:100% auto;background-position:50%;background-repeat:no-repeat}.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_cylinder:active em{color:#595959}.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_cylinder:active i{background-image:url(resources/wood/images/icons_cylinder_nor.png);background-size:100% auto;background-position:50%;background-repeat:no-repeat}.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_cone em{color:#595959}.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_cone i{background-image:url(resources/wood/images/icons_cone_nor.png);background-size:100% auto;background-position:50%;background-repeat:no-repeat}.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_cone:active em{color:#595959}.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_cone:active i{background-image:url(resources/wood/images/icons_cone_nor.png);background-size:100% auto;background-position:50%;background-repeat:no-repeat}.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_pear em{color:#595959}.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_pear i{background-image:url(resources/wood/images/icons_pear_nor.png);background-size:100% auto;background-position:50%;background-repeat:no-repeat}.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_pear:active em{color:#595959}.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_pear:active i{background-image:url(resources/wood/images/icons_pear_nor.png);background-size:100% auto;background-position:50%;background-repeat:no-repeat}.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_pear.click_disabled .com_btn_pic{opacity:1}.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_pear.click_disabled em{color:#595959}.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_pear.click_disabled i{background-image:url(resources/wood/images/icons_pear_dis.png);background-size:100% auto;background-position:50%;background-repeat:no-repeat}.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_pear.click_disabled .com_btn_text{opacity:.32}.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_tennis em{color:#595959}.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_tennis i{background-image:url(resources/wood/images/icons_tennis_nor.png);background-size:100% auto;background-position:50%;background-repeat:no-repeat}.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_tennis:active em{color:#595959}.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_tennis:active i{background-image:url(resources/wood/images/icons_tennis_nor.png);background-size:100% auto;background-position:50%;background-repeat:no-repeat}.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_tennis.click_disabled .com_btn_pic{opacity:1}.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_tennis.click_disabled em{color:#595959}.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_tennis.click_disabled i{background-image:url(resources/wood/images/icons_tennis_dis.png);background-size:100% auto;background-position:50%;background-repeat:no-repeat}.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_tennis.click_disabled .com_btn_text{opacity:.32}.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_cleaned_out,.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_show_light_water{cursor:pointer;display:block;min-width:6.91667em;margin:0 0 .66667em}.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_cleaned_out .com_btns,.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_show_light_water .com_btns{min-width:9em;display:inline-block;padding:0 .75em;margin:0 .75em;height:3.16667em;line-height:3.16667em;text-align:center;vertical-align:middle;border-radius:.41667em}.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_cleaned_out .com_btns .btns-primary-txt,.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_show_light_water .com_btns .btns-primary-txt{font-size:1.5em;color:#384650}.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_cleaned_out .com_btns.btns-primary,.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_show_light_water .com_btns.btns-primary{border:1px solid #397274;background:-webkit-linear-gradient(bottom,#e9e9e9,#fff);background:linear-gradient(0deg,#e9e9e9 0,#fff)}.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_cleaned_out .com_btns.btns-primary .btns-primary-icon,.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_show_light_water .com_btns.btns-primary .btns-primary-icon{display:inline-block;height:3em;vertical-align:top;margin-right:.33333em;background-position:top;background-repeat:no-repeat;background-size:100% auto}.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_cleaned_out .com_btns.btns-primary.ui_btn_active,.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_cleaned_out .com_btns.btns-primary:active,.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_show_light_water .com_btns.btns-primary.ui_btn_active,.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_show_light_water .com_btns.btns-primary:active{background:-webkit-linear-gradient(bottom,#76b8ba,#89c5c7);background:linear-gradient(0deg,#76b8ba 0,#89c5c7)}.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_cleaned_out .com_btns.btns-primary.ui_btn_active .btns-primary-txt,.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_cleaned_out .com_btns.btns-primary:active .btns-primary-txt,.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_show_light_water .com_btns.btns-primary.ui_btn_active .btns-primary-txt,.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_show_light_water .com_btns.btns-primary:active .btns-primary-txt{color:#fff}.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_cleaned_out .com_btns.btns-primary.ui_btn_active .btns-primary-icon,.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_cleaned_out .com_btns.btns-primary:active .btns-primary-icon,.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_show_light_water .com_btns.btns-primary.ui_btn_active .btns-primary-icon,.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_show_light_water .com_btns.btns-primary:active .btns-primary-icon{background-position:bottom}.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_cleaned_out .com_btns.btns-primary.click_disabled,.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_show_light_water .com_btns.btns-primary.click_disabled{border-color:#93989a;background:-webkit-linear-gradient(top,#c8d1d7,#c1c8cc);background:linear-gradient(180deg,#c8d1d7 0,#c1c8cc);cursor:default}.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_cleaned_out .com_btns.btns-primary.click_disabled .btns-primary-txt,.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_show_light_water .com_btns.btns-primary.click_disabled .btns-primary-txt{color:#969fa4}.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_cleaned_out .com_btns.btns-primary.click_disabled .btns-primary-icon,.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_show_light_water .com_btns.btns-primary.click_disabled .btns-primary-icon{background-position:50%}.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.click_btn_on .icon_making_tick{display:block}.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.click_disabled .com_btn_pic,.exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.click_disabled .com_btn_text{opacity:.32}.exam_skin_wood .drainage_for_volume_box .drainage_tools ul.button_rightbottom{position:absolute;top:-7.91667em;right:4.16667em;height:auto}.exam_skin_wood .drainage_for_volume_box .dra_pop_bg{position:fixed;z-index:995;left:0;top:0;right:0;bottom:0;text-align:center}.exam_skin_wood .drainage_for_volume_box .dra_pop_bg .dra_close_pop_box{padding-bottom:.83333em;position:relative;display:inline-block;vertical-align:middle;max-width:27.08333em;background:#fff}.exam_skin_wood .drainage_for_volume_box .dra_pop_bg .dra_close_pop_box .close_pop_top{position:relative;height:3.25em;background:#000 url(resources/wood/images/icon_popBack.png) no-repeat 1.08333em 0;background-size:4.04167em 3.25em}.exam_skin_wood .drainage_for_volume_box .dra_pop_bg .dra_close_pop_box .close_pop_top i{position:absolute;right:.83333em;display:inline-block;width:.83333em;height:100%;background:url(resources/wood/images/close_btn.png) no-repeat 50%;background-size:100% auto;cursor:pointer}.exam_skin_wood .drainage_for_volume_box .dra_pop_bg .dra_close_pop_box .close_pop_tip{padding:3.75em 1.91667em;position:relative;min-height:2.33333em;color:#000;text-align:left}.exam_skin_wood .drainage_for_volume_box .dra_pop_bg .dra_close_pop_box .close_pop_tip .close_pop_tipCon{padding-left:2.33333em;font-size:1.25em;line-height:1.5}.exam_skin_wood .drainage_for_volume_box .dra_pop_bg .dra_close_pop_box .close_pop_tip:before{content:"";position:absolute;display:inline-block;width:2.33333em;height:2.33333em;background:url(resources/wood/images/icon_popTip.png) no-repeat;background-size:2.33333em 2.33333em;vertical-align:top}.exam_skin_wood .drainage_for_volume_box .dra_pop_bg .dra_close_pop_box ul{padding:0 1.91667em;text-align:center}.exam_skin_wood .drainage_for_volume_box .dra_pop_bg .dra_close_pop_box ul li{margin-right:.83333em;display:inline-block;width:5em;height:2em;line-height:2em;background:#11b0b6}.exam_skin_wood .drainage_for_volume_box .dra_pop_bg .dra_close_pop_box ul li a{display:block;font-size:1em;color:#fff}.exam_skin_wood .drainage_for_volume_box .dra_pop_bg .dra_close_pop_box ul li:last-child{margin-right:0}.exam_skin_wood .drainage_for_volume_box .dra_pop_bg .dra_close_pop_box ul li:hover{background:#11b0b6}.exam_skin_wood .drainage_for_volume_box .dra_pop_bg .dra_close_pop_box ul li:active{background:#169196}.exam_skin_wood .drainage_for_volume_box .dra_pop_bg:after{display:inline-block;vertical-align:middle;content:"";width:0;height:100%}.exam_skin_wood .drainage_for_volume_box .pop_zhezhao{position:fixed;left:0;top:0;z-index:990;display:inline-block;width:100%;height:100%;background:rgba(0,0,0,.3)}.exam_skin_wood .drainage_for_volume_box .show_tips .operation_tips_box{display:block;z-index:300}.exam_skin_wood .drainage_for_volume_box .main_content{z-index:100;position:absolute;left:50%;top:50%;height:42em;width:72.70833em;width:100%;left:0;margin:-20em 0 0;padding-bottom:6em;background:url(resources/wood/images/bg_cup_bbg.png) bottom no-repeat;background-size:100% auto;background-size:72.70833em auto}.exam_skin_wood .drainage_for_volume_box .main_content.show_box_beaker .box_flume{display:none}.exam_skin_wood .drainage_for_volume_box .main_content.show_box_flume{padding-top:2.91667em}.exam_skin_wood .drainage_for_volume_box .main_content.show_box_flume .box_beaker{display:none}.exam_skin_wood .drainage_for_volume_box .box_beaker{position:relative;width:30.375em;height:35.75em;margin:0 auto}.exam_skin_wood .drainage_for_volume_box .box_beaker:before{content:"";left:0;top:0;position:absolute;width:30.375em;height:3.41667em;margin:0;background:url(resources/wood/images/bg_icon_cup_top.png) top no-repeat;background-size:100% auto}.exam_skin_wood .drainage_for_volume_box .box_beaker:after{content:"";left:0;bottom:0;position:absolute;width:30.375em;height:32.33333em;margin:0;background:url(resources/wood/images/bg_icon_cup_body.png) bottom no-repeat;background-size:100% auto;z-index:200}.exam_skin_wood .drainage_for_volume_box .box_flume{position:relative;width:41.45833em;height:32.41667em;margin:0 auto;left:-1.5em}.exam_skin_wood .drainage_for_volume_box .box_flume:before{content:"";left:0;top:0;position:absolute;width:41.45833em;height:2.54167em;margin:0;background:url(resources/wood/images/bg_icon_flume_bg_nl.png) top no-repeat;background-size:100% auto}.exam_skin_wood .drainage_for_volume_box .box_flume:after{content:"";left:0;bottom:0;position:absolute;width:41.45833em;height:29.875em;margin:0;background:url(resources/wood/images/bg_icon_flume_bg_nl.png) bottom no-repeat;background-size:100% auto;z-index:100}.exam_skin_wood .drainage_for_volume_box .box_flume .bg_line{left:0;top:0;position:absolute;width:41.45833em;height:32.41667em;margin:0;background:url(resources/wood/images/bg_icon_flume_bg_line.png) top no-repeat;background-size:100% auto;z-index:0}.exam_skin_wood .drainage_for_volume_box .box_flume .water_box{left:.16667em;right:.58333em;bottom:.16667em;padding-right:3.91667em}.exam_skin_wood .drainage_for_volume_box .box_flume .water_blue_init{background:rgba(0,138,200,.66);width:auto}.exam_skin_wood .drainage_for_volume_box .box_flume .water_blue_init:after{background:rgba(0,138,200,.66);left:auto;position:absolute;right:-3.83333em;bottom:1.41667em;width:3.83333em;height:100%;margin:0;-webkit-transform:skewY(-38deg);transform:skewY(-38deg);border-radius:.2em}.exam_skin_wood .drainage_for_volume_box .box_flume .water_blue_init_back{position:absolute;left:0;bottom:0;width:100%}.exam_skin_wood .drainage_for_volume_box .box_flume .tickline_tips{left:33.5em}.exam_skin_wood .drainage_for_volume_box .box_flume .tickline_tips.tips_bottom{bottom:9.83333em}.exam_skin_wood .drainage_for_volume_box .box_flume .tickline_tips.tips_top{top:-.08333em}.exam_skin_wood .drainage_for_volume_box .box_flume .box_flume_length{position:absolute;left:50%;bottom:-4.16667em;text-align:center;width:8em;margin-left:-2.75em}.exam_skin_wood .drainage_for_volume_box .box_flume .box_flume_length span{display:inline;font-family:Times new Roman;color:#000}.exam_skin_wood .drainage_for_volume_box .box_flume .box_flume_length .num{font-size:3.54167em}.exam_skin_wood .drainage_for_volume_box .box_flume .box_flume_length .cm{font-size:2.5em}.exam_skin_wood .drainage_for_volume_box .box_flume .box_flume_width{position:absolute;right:-4.375em;bottom:-1.66667em;text-align:center;margin-left:-2.5em}.exam_skin_wood .drainage_for_volume_box .box_flume .box_flume_width span{display:inline;font-family:Times new Roman;color:#000}.exam_skin_wood .drainage_for_volume_box .box_flume .box_flume_width .num{font-size:3.54167em}.exam_skin_wood .drainage_for_volume_box .box_flume .box_flume_width .cm{font-size:2.5em}.exam_skin_wood .drainage_for_volume_box .box_flume .init_water_height{height:9.91667em;-webkit-transition:height 1s linear;transition:height 1s linear}.exam_skin_wood .drainage_for_volume_box .box_flume .water_light{bottom:9.91667em;background:rgba(255,216,0,.6)}.exam_skin_wood .drainage_for_volume_box .box_flume .water_light:before{display:none}.exam_skin_wood .drainage_for_volume_box .box_flume .water_light:after{background:rgba(255,216,0,.6);left:auto;position:absolute;right:-3.83333em;bottom:1.41667em;width:3.83333em;height:100%;margin:0;-webkit-transform:skewY(-38deg);transform:skewY(-38deg);z-index:10;border-radius:.2em}.exam_skin_wood .drainage_for_volume_box .water_box{position:absolute;left:2.45833em;right:3.54167em;bottom:4.41667em;top:auto}.exam_skin_wood .drainage_for_volume_box .init_water_height{height:3.83333em;-webkit-transition:height 1s linear;transition:height 1s linear}.exam_skin_wood .drainage_for_volume_box .water_blue_init_back{position:absolute;left:0;bottom:0;width:100%;z-index:0}.exam_skin_wood .drainage_for_volume_box .water_blue_init{position:relative;width:100%;background:url(resources/wood/images/bg_water_b_rep.png) top repeat-y;background-size:100% auto}.exam_skin_wood .drainage_for_volume_box .water_blue_init:after{content:"";left:0;bottom:-4.95833em;position:absolute;width:24.375em;height:4.95833em;margin:0;background:url(resources/wood/images/bg_water_bot.png) center -.75em no-repeat;background-size:100% auto}.exam_skin_wood .drainage_for_volume_box .water_light{position:absolute;left:0;top:0;bottom:6.29167em;width:100%;background:url(resources/wood/images/bg_water_b_l_rep.png) top repeat-y;background-size:100% auto;z-index:20}.exam_skin_wood .drainage_for_volume_box .water_light:after{content:"";left:0;bottom:-2.54167em;position:absolute;width:24.375em;height:2.54167em;margin:0;background:url(resources/wood/images/bg_water_b_light_b.png) bottom no-repeat;background-size:100% auto}.exam_skin_wood .drainage_for_volume_box .water_light:before{content:"";left:0;top:-3.33333em;position:absolute;width:24.375em;height:3.33333em;margin:0;background:url(resources/wood/images/bg_water_b_light_t.png) top no-repeat;background-size:100% auto;z-index:10}.exam_skin_wood .drainage_for_volume_box .tickline_tips{position:absolute;z-index:333;border-top:.16667em dashed #003b67;width:10em;left:18.95833em}.exam_skin_wood .drainage_for_volume_box .tickline_tips .tips_box{position:absolute;left:11.25em}.exam_skin_wood .drainage_for_volume_box .tickline_tips .tips_bg{position:absolute;left:0;top:0;width:100%;height:100%;background:#2f2f2f;opacity:.81}.exam_skin_wood .drainage_for_volume_box .tickline_tips .tips_bg:before{content:"";position:absolute;width:0;height:0}.exam_skin_wood .drainage_for_volume_box .tickline_tips .tips_text_beaker,.exam_skin_wood .drainage_for_volume_box .tickline_tips .tips_text_flume{width:10.75em}.exam_skin_wood .drainage_for_volume_box .tickline_tips .tips_text{position:relative;text-align:center}.exam_skin_wood .drainage_for_volume_box .tickline_tips .tips_text span{display:inline;font-family:Times new Roman;line-height:1.2;color:#fff!important}.exam_skin_wood .drainage_for_volume_box .tickline_tips .tips_text .num{font-size:3.54167em}.exam_skin_wood .drainage_for_volume_box .tickline_tips .tips_text .cm,.exam_skin_wood .drainage_for_volume_box .tickline_tips .tips_text .ml{font-size:2.5em}.exam_skin_wood .drainage_for_volume_box .tickline_tips.tips_top{top:-.58333em}.exam_skin_wood .drainage_for_volume_box .tickline_tips.tips_top .tips_box{bottom:2px}.exam_skin_wood .drainage_for_volume_box .tickline_tips.tips_top .tips_bg{border-radius:.25em .25em .25em 0}.exam_skin_wood .drainage_for_volume_box .tickline_tips.tips_top .tips_bg:before{bottom:0;right:98%;margin-left:-.5em;border:.5em solid transparent;border-right:0;border-bottom:.6em solid #2f2f2f;border-left-width:1.2em}.exam_skin_wood .drainage_for_volume_box .tickline_tips.tips_bottom{bottom:4.25em}.exam_skin_wood .drainage_for_volume_box .tickline_tips.tips_bottom .tips_box{top:-.08333em}.exam_skin_wood .drainage_for_volume_box .tickline_tips.tips_bottom .tips_bg{border-radius:0 .25em .25em .25em}.exam_skin_wood .drainage_for_volume_box .tickline_tips.tips_bottom .tips_bg:before{top:0;right:98%;margin-left:-.5em;border:.5em solid transparent;border-right:0;border-top:.6em solid #2f2f2f;border-left-width:1.2em}.exam_skin_wood .drainage_for_volume_box .init_water_add0{height:3.91667em}.exam_skin_wood .drainage_for_volume_box .init_water_add0p{height:4.125em}.exam_skin_wood .drainage_for_volume_box .init_water_add50{height:6.29167em}.exam_skin_wood .drainage_for_volume_box .init_water_add50p{height:6.5em}.exam_skin_wood .drainage_for_volume_box .init_water_add100{height:8.58333em}.exam_skin_wood .drainage_for_volume_box .init_water_add100p{height:8.79167em}.exam_skin_wood .drainage_for_volume_box .init_water_add150{height:11em}.exam_skin_wood .drainage_for_volume_box .init_water_add150p{height:11.20833em}.exam_skin_wood .drainage_for_volume_box .init_water_add200{height:13.33333em}.exam_skin_wood .drainage_for_volume_box .init_water_add200p{height:13.54167em}.exam_skin_wood .drainage_for_volume_box .init_water_add250{height:15.54167em}.exam_skin_wood .drainage_for_volume_box .init_water_add250p{height:15.75em}.exam_skin_wood .drainage_for_volume_box .init_water_add300{height:17.91667em}.exam_skin_wood .drainage_for_volume_box .init_water_add300p{height:18.125em}.exam_skin_wood .drainage_for_volume_box .box_flume .init_water_add50{height:12.16667em}.exam_skin_wood .drainage_for_volume_box .box_flume .init_water_add100{height:14.54167em}.exam_skin_wood .drainage_for_volume_box .box_flume .init_water_add150{height:16.83333em}.exam_skin_wood .drainage_for_volume_box .box_flume .init_water_add200{height:19.16667em}.exam_skin_wood .drainage_for_volume_box .box_flume .init_water_add250{height:21.5em}.exam_skin_wood .drainage_for_volume_box .box_flume .init_water_add300{height:23.75em}.exam_skin_wood .drainage_for_volume_box .box_flume .init_water_add0p{height:10.08333em}.exam_skin_wood .drainage_for_volume_box .box_flume .init_water_add50p{height:12.375em}.exam_skin_wood .drainage_for_volume_box .box_flume .init_water_add100p{height:14.75em}.exam_skin_wood .drainage_for_volume_box .box_flume .init_water_add150p{height:17.04167em}.exam_skin_wood .drainage_for_volume_box .box_flume .init_water_add200p{height:19.375em}.exam_skin_wood .drainage_for_volume_box .box_flume .init_water_add250p{height:21.70833em}.exam_skin_wood .drainage_for_volume_box .box_flume .init_water_add300p{height:23.95833em}.exam_skin_wood .drainage_for_volume_box .box_flume .measure_items_pear.left_bottom{bottom:1em;left:6.5em}.exam_skin_wood .drainage_for_volume_box .box_flume .measure_items_pear.right_bottom{bottom:1em;right:6.5em}.exam_skin_wood .drainage_for_volume_box .box_flume .measure_items_pear.start{bottom:16.91667em}.exam_skin_wood .drainage_for_volume_box .box_flume .measure_items_cone.left_bottom{bottom:1em;left:6em}.exam_skin_wood .drainage_for_volume_box .box_flume .measure_items_cone.right_bottom{bottom:1em;right:6em}.exam_skin_wood .drainage_for_volume_box .box_flume .measure_items_cone.start{bottom:17.25em}.exam_skin_wood .drainage_for_volume_box .box_flume .measure_items_cylinder.left_bottom{bottom:1em;left:6.5em}.exam_skin_wood .drainage_for_volume_box .box_flume .measure_items_cylinder.right_bottom{bottom:1em;right:6.5em}.exam_skin_wood .drainage_for_volume_box .box_flume .measure_items_cylinder.start{bottom:16.79167em}.exam_skin_wood .drainage_for_volume_box .box_flume .measure_items_bigstone.left_bottom{bottom:1.08333em;left:5.75em}.exam_skin_wood .drainage_for_volume_box .box_flume .measure_items_bigstone.right_bottom{bottom:1.08333em;right:5.75em}.exam_skin_wood .drainage_for_volume_box .box_flume .measure_items_bigstone.start{bottom:16.75em}.exam_skin_wood .drainage_for_volume_box .box_flume .measure_items_littlestone.left_bottom{bottom:1.04167em;left:8.5em}.exam_skin_wood .drainage_for_volume_box .box_flume .measure_items_littlestone.center_bottom{bottom:1.04167em;left:16.25em}.exam_skin_wood .drainage_for_volume_box .box_flume .measure_items_littlestone.right_bottom{bottom:1.04167em;right:8.5em}.exam_skin_wood .drainage_for_volume_box .box_flume .measure_items_littlestone.start{bottom:17.20833em}.exam_skin_wood .drainage_for_volume_box .box_flume .measure_items_tennis.top_center{top:-7.70833em;left:16em}.exam_skin_wood .drainage_for_volume_box .box_flume .measure_items_tennis.start{bottom:-7.83333em}.exam_skin_wood .drainage_for_volume_box .measure_items_pear{position:absolute;width:8.20833em;height:12.66667em;background:url(resources/wood/images/pics_pear.png) bottom no-repeat;background-size:100% auto}.exam_skin_wood .drainage_for_volume_box .measure_items_pear .items_actual_volume{position:absolute;bottom:1.33333em;top:.04167em;right:.375em;left:.54167em}.exam_skin_wood .drainage_for_volume_box .measure_items_pear.left_bottom{bottom:-2.5em;left:2.66667em}.exam_skin_wood .drainage_for_volume_box .measure_items_pear.right_bottom{bottom:-2.5em;right:2.66667em}.exam_skin_wood .drainage_for_volume_box .measure_items_pear.start{bottom:13em}.exam_skin_wood .drainage_for_volume_box .measure_items_cone{position:absolute;width:9em;height:8.45833em;background:url(resources/wood/images/pics_cone.png) bottom no-repeat;background-size:100% auto;z-index:1}.exam_skin_wood .drainage_for_volume_box .measure_items_cone .items_actual_volume{position:absolute;bottom:.95833em;top:.04167em;right:.04167em;left:.16667em}.exam_skin_wood .drainage_for_volume_box .measure_items_cone.left_bottom{bottom:-2.5em;left:2.5em}.exam_skin_wood .drainage_for_volume_box .measure_items_cone.right_bottom{bottom:-2.5em;right:2.5em}.exam_skin_wood .drainage_for_volume_box .measure_items_cone.start{bottom:13.41667em}.exam_skin_wood .drainage_for_volume_box .measure_items_cylinder{position:absolute;width:8.875em;height:10.29167em;background:url(resources/wood/images/pics_cylinder.png) bottom no-repeat;background-size:100% auto}.exam_skin_wood .drainage_for_volume_box .measure_items_cylinder .items_actual_volume{position:absolute;bottom:1.45833em;top:0;right:1.54167em;left:1.375em}.exam_skin_wood .drainage_for_volume_box .measure_items_cylinder.left_bottom{bottom:-2.5em;left:2.5em}.exam_skin_wood .drainage_for_volume_box .measure_items_cylinder.right_bottom{bottom:-2.5em;right:2.5em}.exam_skin_wood .drainage_for_volume_box .measure_items_cylinder.start{bottom:12.875em}.exam_skin_wood .drainage_for_volume_box .measure_items_bigstone{position:absolute;width:10.375em;height:7.08333em;background:url(resources/wood/images/pics_b_stone.png) bottom no-repeat;background-size:100% auto}.exam_skin_wood .drainage_for_volume_box .measure_items_bigstone .items_actual_volume{position:absolute;bottom:1.5em;top:.04167em;right:.04167em;left:1.16667em}.exam_skin_wood .drainage_for_volume_box .measure_items_bigstone.left_bottom{bottom:-2.33333em;left:2.5em}.exam_skin_wood .drainage_for_volume_box .measure_items_bigstone.right_bottom{bottom:-2.33333em;right:2.5em}.exam_skin_wood .drainage_for_volume_box .measure_items_bigstone.start{bottom:12.83333em}.exam_skin_wood .drainage_for_volume_box .measure_items_littlestone{position:absolute;width:6.91667em;height:6.95833em;background:url(resources/wood/images/pics_l_stone.png) bottom no-repeat;background-size:100% auto}.exam_skin_wood .drainage_for_volume_box .measure_items_littlestone .items_actual_volume{position:absolute;bottom:1.08333em;top:0;right:.54167em;left:.08333em}.exam_skin_wood .drainage_for_volume_box .measure_items_littlestone.left_bottom{bottom:-2.5em;left:2.91667em}.exam_skin_wood .drainage_for_volume_box .measure_items_littlestone.right_bottom{bottom:-2.5em;right:2.91667em}.exam_skin_wood .drainage_for_volume_box .measure_items_littlestone.start{bottom:13.29167em}.exam_skin_wood .drainage_for_volume_box .measure_items_tennis{position:absolute;width:6.41667em;height:6.41667em;background:url(resources/wood/images/pics_tennis.png) 50% no-repeat;background-size:100% 100%}.exam_skin_wood .drainage_for_volume_box .measure_items_tennis .items_actual_volume{position:absolute;bottom:1em;top:0;right:0;left:.33333em}.exam_skin_wood .drainage_for_volume_box .measure_items_tennis.top_center{top:-9.625em;left:8.5em}.exam_skin_wood .drainage_for_volume_box .measure_items_tennis.start{top:-9.75em}.exam_skin_wood .icon_making_tick{display:none;position:absolute;top:1.16667em;left:50%;margin-left:.5em;width:1.25em;height:1.25em;border-radius:50%;background:#11b0b6 url(resources/wood/images/icons_little_tick.png) 50% no-repeat;background-size:100% auto}.exam_skin_wood .operation_tips_box{display:none;position:absolute;left:50%;width:36em;margin-left:-18em;bottom:5em;pointer-events:none}.exam_skin_wood .operation_tips_box .tips_box_controller{position:relative;margin:0 auto;display:inline-block;pointer-events:auto}.exam_skin_wood .operation_tips_box .op_tips_box_bg{position:absolute;left:0;top:0;width:100%;height:100%;background:#2f2f2f;border-radius:.25em;opacity:.81}.exam_skin_wood .operation_tips_box .op_tips_box_bg:before{content:"";position:absolute;top:100%;left:50%;margin:-.5em 0 0 -1em;width:0;height:0;border:1em solid transparent;border-top:1em solid #2f2f2f;border-bottom:0}.exam_skin_wood .operation_tips_box .op_tips_box_txt{position:relative;text-align:center;min-width:13.75em;max-width:32em;padding:.66667em}.exam_skin_wood .operation_tips_box .op_tips_box_txt span{font-size:1em;line-height:1.5;color:#fff!important;display:inline-block;text-align:left}.exam_skin_wood .box_beaker .water_blue_init_back_t{width:24.375em;height:3.5em;margin:0;background:url(resources/wood/images/bg_water_t.png) bottom no-repeat;background-size:100% auto;position:relative}.exam_skin_wood .box_beaker .water_blue_init_t{width:24.375em;height:3.375em;margin:0;background:url(resources/wood/images/bg_water_b.png) top no-repeat;background-size:100% auto;position:relative}.exam_skin_wood .box_flume .water_blue_init_back_t{width:40.70833em;height:1.375em;margin:0;background:url(resources/wood/images/bg_watertank.png) 0 0 no-repeat;background-size:100% auto;position:relative}.exam_skin_wood .box_flume .water_blue_init_back_t:after{background:#bfd3e2;left:0;position:absolute;bottom:-.125em;width:3.7em;height:100%;margin:0;-webkit-transform:skewY(-37deg);transform:skewY(-37deg);z-index:10;content:"";border-radius:1em}.exam_skin_wood .box_flume .water_blue_init_t{width:40.70833em;height:1.45833em;margin:0;background:url(resources/wood/images/bg_watertank.png) 0 100% no-repeat;background-size:100% auto;position:relative}.exam_skin_wood .box_flume_debug_01{position:absolute;left:.5em;top:1em;width:3.20833em;height:2.625em;background:url(resources/wood/images/icbg_flume_bg.png) 0 100% no-repeat;background-size:100% 100%;z-index:103}.exam_skin_wood .box_flume_debug_02{position:absolute;right:1em;top:1.25em;width:3.20833em;height:2.625em;background:url(resources/wood/images/icbg_flume_bg2.png) 0 100% no-repeat;background-size:100% 100%;z-index:103}.exam_skin_wood .tool_com_dialog_layer{position:absolute;z-index:995;left:0;top:0;right:0;bottom:0;text-align:center}.exam_skin_wood .tool_com_dialog_layer:after{display:inline-block;vertical-align:middle;content:"";width:0;height:100%}.exam_skin_wood .tool_com_dialog_box{padding:1.66667em;position:relative;display:inline-block;vertical-align:middle;max-width:33em;background:rgba(47,47,47,.8);border-radius:.41667em}.exam_skin_wood .tool_com_dialog_main{padding:1em 0 2.08333em;position:relative;color:#fff;text-align:center}.exam_skin_wood .tool_com_dialog_main .tool_com_dialog_txt{font-size:1.25em;line-height:1.5;text-align:left;display:inline-block}.exam_skin_wood .tool_com_dialog_foot{padding:0 1.91667em;text-align:center}.exam_skin_wood .tool_com_dialog_foot .tool_com_dialog_btn{display:inline-block;font-size:1em;color:#fff;height:2em;line-height:2em;padding:0 1em;min-width:4.5em;background:#11b0b6;margin:0 1.25em}.exam_skin_wood .tool_com_dialog_foot .tool_com_dialog_btn:active{background:#62999b}.exam_skin_wood .drainage_for_volume_box .box_flume .init_water_add100{height:14.5em}.exam_skin_wood .drainage_for_volume_box .box_flume .init_water_add150{height:16.8em}.twinkleOut{-webkit-animation:twinklingOut 2s ease 0s forwards;animation:twinklingOut 2s ease 0s forwards}.twinkleIn{-webkit-animation:twinklingIn 1s ease 0s forwards;animation:twinklingIn 1s ease 0s forwards}@-webkit-keyframes twinklingIn{0%{opacity:1}20%{opacity:0}40%{opacity:1}50%{opacity:0}to{opacity:1}}@keyframes twinklingIn{0%{opacity:1}20%{opacity:0}40%{opacity:1}50%{opacity:0}to{opacity:1}}@-webkit-keyframes twinklingOut{0%{opacity:0}10%{opacity:1}20%{opacity:0}30%{opacity:1}40%{opacity:0}50%{opacity:1}to{opacity:0}}@keyframes twinklingOut{0%{opacity:0}10%{opacity:1}20%{opacity:0}30%{opacity:1}40%{opacity:0}50%{opacity:1}to{opacity:0}}.typefaces_long .exam_skin_wood .drainage_for_volume_box .drainage_tools ul.button_rightbottom{text-align:right}.typefaces_long .exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_cleaned_out .com_btns,.typefaces_long .exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_show_light_water .com_btns{padding:0 .5em;max-width:13em;line-height:1.2em}.typefaces_long .exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_cleaned_out .com_btns .btns-primary-txt,.typefaces_long .exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_show_light_water .com_btns .btns-primary-txt{font-size:1.3em;display:inline-block;position:relative;top:50%;-webkit-transform:translateY(-50%);transform:translateY(-50%)}.typefaces_ru_RU .exam_skin_wood .drainage_for_volume_box .drainage_tools ul.button_rightbottom{text-align:right}.typefaces_ru_RU .exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_cleaned_out .com_btns,.typefaces_ru_RU .exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_show_light_water .com_btns{padding:0 .5em;max-width:13em;line-height:1.2em}.typefaces_ru_RU .exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_cleaned_out .com_btns .btns-primary-txt,.typefaces_ru_RU .exam_skin_wood .drainage_for_volume_box .drainage_tools ul li.btn_show_light_water .com_btns .btns-primary-txt{font-size:1.3em;display:inline-block;position:relative;top:50%;-webkit-transform:translateY(-50%);transform:translateY(-50%)}.exam_skin_wood .drainage_for_volume_box .init_water_height{-webkit-transition:initial;transition:initial}.exam_skin_wood .drainage_for_volume_box .box_flume .init_water_height{-webkit-transition:initial;transition:initial}]]></css><view><![CDATA[<div class="exam_skin_wood _drainage_out_container" id="layout"><div class="drainage_for_volume_box"><div class="main_content show_box_beaker _drainage_container _drainage_container_main_content" style="font-size: 0.8em"><div class="box_beaker _container_beaker"><div class="water_box"><div class="water_blue_init_back_t"></div><div class="water_blue_init_back init_water_height _drainage_water" style="height: 3.83333em"><div class="measure_items_pear _mea_pear hide_dom"><div class="items_actual_volume"></div></div><div class="measure_items_cone _mea_cone hide_dom"><div class="items_actual_volume"></div></div><div class="measure_items_cylinder _mea_cylinder hide_dom"><div class="items_actual_volume"></div></div><div class="measure_items_bigstone _mea_big_stone hide_dom"><div class="items_actual_volume"></div></div><div class="measure_items_littlestone _mea_small_stone hide_dom"><div class="items_actual_volume"></div></div><div class="measure_items_tennis _mea_ping_pang hide_dom"><div class="items_actual_volume"></div></div></div><div class="water_blue_init_t"></div><div class="water_blue_init init_water_height _drainage_water" style="height: 3.83333em"><div class="water_light hide_dom _raise_container"></div><div class="tickline_tips tips_bottom"><div class="tips_box"><div class="tips_bg"></div><div class="tips_text tips_text_beaker"><span class="num">200</span><span class="ml">ml</span></div></div></div><div class="tickline_tips tips_top _pop_box_dest hide_dom"><div class="tips_box"><div class="tips_bg"></div><div class="tips_text tips_text_beaker"><span class="num _current_volume">200</span><span class="ml">ml</span></div></div></div></div></div></div><div class="box_flume _container_basin"><div class="bg_line"></div><div class="water_box"><div class="water_blue_init_back_t"></div><div class="water_blue_init_back init_water_height _drainage_water" style="height: 9.91667em"><div class="measure_items_pear _mea_pear hide_dom"><div class="items_actual_volume"></div></div><div class="measure_items_cone _mea_cone hide_dom"><div class="items_actual_volume"></div></div><div class="measure_items_cylinder _mea_cylinder hide_dom"><div class="items_actual_volume"></div></div><div class="measure_items_bigstone _mea_big_stone hide_dom"><div class="items_actual_volume"></div></div><div class="measure_items_littlestone _mea_small_stone hide_dom"><div class="items_actual_volume"></div></div><div class="measure_items_tennis _mea_ping_pang hide_dom"><div class="items_actual_volume"></div></div></div><div class="water_blue_init_t"></div><div class="water_blue_init init_water_height _drainage_water" style="height: 9.91667em"><div class="water_light hide_dom _raise_container"></div><div class="tickline_tips tips_bottom"><div class="tips_box"><div class="tips_bg"></div><div class="tips_text tips_text_flume"><span class="num">4</span><span class="cm">cm</span></div></div></div><div class="tickline_tips tips_top hide_dom _pop_box_dest"><div class="tips_box"><div class="tips_bg"></div><div class="tips_text tips_text_flume"><span class="num _current_volume">4</span><span class="cm">cm</span></div></div></div></div></div><div class="box_flume_length"><span class="num">10</span><span class="cm">cm</span></div><div class="box_flume_width"><span class="num">5</span> <span class="cm">cm</span></div><span class="box_flume_debug_01"></span> <span class="box_flume_debug_02"></span></div></div><div class="drainage_tools _drainage_toolbar"><div class="button_modules"><div class="com_part_toolbar"><ul><li class="btn_beaker click_btn_on _container_beaker"><a class="com_btn_square_tool" href="#"><i class="com_btn_pic"></i> <em class="com_btn_text beaker-text"></em></a></li><li class="btn_flume _container_basin"><a class="com_btn_square_tool" href="#"><i class="com_btn_pic"></i> <em class="com_btn_text basin-text"></em></a></li></ul><ul><li class="btn_l_stone _mea_small_stone _substances_name" item-selector="._mea_small_stone"><a class="com_btn_square_tool" href="#"><i class="com_btn_pic"></i> <em class="com_btn_text small-stone-text"></em> </a><span class="icon_making_tick"></span><div class="operation_tips_box"><div class="tips_box_controller"><div class="op_tips_box_bg"></div><div class="op_tips_box_txt"><span class="tip-text"></span></div></div></div></li><li class="btn_b_stone _mea_big_stone _substances_name" item-selector="._mea_big_stone"><a class="com_btn_square_tool" href="#"><i class="com_btn_pic"></i> <em class="com_btn_text big-stone-text"></em> </a><span class="icon_making_tick"></span><div class="operation_tips_box"><div class="tips_box_controller"><div class="op_tips_box_bg"></div><div class="op_tips_box_txt"><span class="tip-text"></span></div></div></div></li><li class="btn_cylinder _mea_cylinder _substances_name" item-selector="._mea_cylinder"><a class="com_btn_square_tool" href="#"><i class="com_btn_pic"></i> <em class="com_btn_text cylinder-text"></em> </a><span class="icon_making_tick"></span><div class="operation_tips_box"><div class="tips_box_controller"><div class="op_tips_box_bg"></div><div class="op_tips_box_txt"><span class="tip-text"></span></div></div></div></li><li class="btn_cone _mea_cone _substances_name" item-selector="._mea_cone"><a class="com_btn_square_tool" href="#"><i class="com_btn_pic"></i> <em class="com_btn_text cone-text"></em> </a><span class="icon_making_tick"></span><div class="operation_tips_box"><div class="tips_box_controller"><div class="op_tips_box_bg"></div><div class="op_tips_box_txt"><span class="tip-text"></span></div></div></div></li><li class="btn_pear _mea_pear _substances_name" item-selector="._mea_pear"><a class="com_btn_square_tool" href="#"><i class="com_btn_pic"></i> <em class="com_btn_text pear-text"></em> </a><span class="icon_making_tick"></span><div class="operation_tips_box"><div class="tips_box_controller"><div class="op_tips_box_bg"></div><div class="op_tips_box_txt"><span class="tip-text"></span></div></div></div></li><li class="btn_tennis _mea_ping_pang _substances_name" item-selector="._mea_ping_pang"><a class="com_btn_square_tool" href="#"><i class="com_btn_pic"></i> <em class="com_btn_text ball-text"></em> </a><span class="icon_making_tick"></span><div class="operation_tips_box"><div class="tips_box_controller"><div class="op_tips_box_bg"></div><div class="op_tips_box_txt"><span class="tip-text"></span></div></div></div></li></ul><ul class="button_rightbottom"><li class="btn_show_light_water"><a class="com_btns btns-primary _view_change_water_level_beaker hide_dom"><span class="btns-primary-txt _delta_text_beaker water-level-text"></span></a></li><li class="btn_cleaned_out"><a class="com_btns btns-primary _clear_all_beaker hide_dom"><span class="btns-primary-txt empty-text"></span></a></li></ul><ul class="button_rightbottom"><li class="btn_show_light_water"><a class="com_btns btns-primary _view_change_water_level_basin hide_dom"><span class="btns-primary-txt _delta_text_basin water-level-text"></span></a></li><li class="btn_cleaned_out"><a class="com_btns btns-primary _clear_all_basin hide_dom"><span class="btns-primary-txt empty-text"></span></a></li></ul></div></div></div><div class="tool_com_dialog_layer _confirm_dialog hide_dom"><div class="tool_com_dialog_box"><div class="tool_com_dialog_main"><p class="tool_com_dialog_txt clear-tip-text"></p></div><div class="tool_com_dialog_foot"><a class="tool_com_dialog_btn _click_all_yes confirm-text" href="javascript:;"></a> <a class="tool_com_dialog_btn _click_all_no cancel-text" href="javascript:;"></a></div></div></div><div class="pop_zhezhao hide_dom"></div></div></div>]]></view><presenter><![CDATA[/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(1);
	__webpack_require__(5);
	__webpack_require__(4);
	__webpack_require__(3);
	__webpack_require__(9);
	__webpack_require__(2);
	__webpack_require__(8);
	__webpack_require__(7);
	module.exports = __webpack_require__(6);


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _Lang = __webpack_require__(2);

	var _Lang2 = _interopRequireDefault(_Lang);

	var _Const = __webpack_require__(3);

	var _Beaker = __webpack_require__(4);

	var _Beaker2 = _interopRequireDefault(_Beaker);

	var _Basin = __webpack_require__(5);

	var _Basin2 = _interopRequireDefault(_Basin);

	var _Volume = __webpack_require__(6);

	var _Utils = __webpack_require__(7);

	var _Utils2 = _interopRequireDefault(_Utils);

	var _State = __webpack_require__(8);

	var _State2 = _interopRequireDefault(_State);

	var _Container = __webpack_require__(9);

	var _Container2 = _interopRequireDefault(_Container);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	(function () {
	    var $container;
	    var $toolbar;
	    var $view;
	    var presenterSelf;
	    var isAnimateFished = true;
	    var isHighLightFinished = true;
	    var currentContainerSelector = '._container_beaker';

	    var Presenter = BasicPresenter.extend({
	        metaInfo: {
	            name: "DrainageForVolume",
	            type: "",
	            subtype: ""
	        },
	        /**
	         * Presenter的初始化方法
	         * @private
	         */
	        $init: function $init() {
	            this._super();
	            this._containers = []; //容器对象的列表  对应烧杯和水槽
	        },
	        /**
	         * Presenter对外暴露的方法
	         */
	        _service_: {
	            constructor: function constructor(parent) {
	                this.parent = parent;
	            },
	            /**
	             * 实现推送功能
	             */
	            getQuestionInfo: function getQuestionInfo() {
	                return {
	                    'id': _Utils2.default.generateUUID(),
	                    'type_code': 'DrainageForVolume',
	                    'type_name': "排水法测量物体体积",
	                    'notExistStatistics': true,
	                    'noNeedQuizProgress': true
	                };
	            },
	            getExtendData: function getExtendData() {
	                var options = {
	                    width: '100%',
	                    "toolState": this.parent.state.getState()
	                };
	                console.log("教师端发出的数据为：", JSON.stringify(options));
	                return options;
	            },
	            setLocationProperties: function setLocationProperties(properties) {
	                _Lang2.default.extend(properties || {});
	            }
	        },
	        getService: function getService() {
	            this._service_.constructor(this);
	            return this._service_;
	        },
	        /****以下开始为icPlayer的生命周期方法*****/
	        run: function run(view, model) {
	            this.$view = $view = $(view);
	            presenterSelf = this;
	            this.$toolbar = $toolbar = $view.find(_Const.SELECTOR.TOOLBAR);
	            this.$container = $container = $view.find(_Const.SELECTOR.CONTAINER);
	            // window.state = this.state = new State(this);
	            this.state = new _State2.default(this);
	            //上一次的状态信息
	            /**
	             *  op:addItem,data:itemCls
	             *  op:removeItem,data:itemCls
	             *  op:removeAllItem
	             *  op:waterHighlight
	             *  op:waterNoHighlight
	             *  op:switch
	             *
	             */
	            this.lastState = null;

	            this._initContainerProps();
	            this._updateButtonStyle();
	            this._initDrainageForVolumeI18nView();

	            this._bindEvent();
	            var stateData;
	            if (model && model.__ExtendModel && !$.isEmptyObject(model.__ExtendModel)) {
	                stateData = model.__ExtendModel.toolState;
	            }

	            // var stateData = {
	            //     "state": {
	            //         "toolbar": {
	            //             "beaker": "btn_beaker _container_beaker",
	            //             "basin": "btn_flume _container_basin click_btn_on",
	            //             "smallStone": "btn_l_stone _mea_small_stone _substances_name click_btn_on",
	            //             "bigStone": "btn_b_stone _mea_big_stone _substances_name",
	            //             "cylinder": "btn_cylinder _mea_cylinder _substances_name",
	            //             "cone": "btn_cone _mea_cone _substances_name",
	            //             "pear": "btn_pear _mea_pear _substances_name",
	            //             "tennis": "btn_tennis _mea_ping_pang _substances_name",
	            //             "currentContainerSelector": "._container_basin"
	            //         },
	            //         "container": [{
	            //             "visible": false,
	            //             "measureObjList": [],
	            //             "containerInfo": {"left": null, "middle": null, "right": null, "tennis": null, "isHighLight": false, "currentVolume": 200}
	            //         }, {
	            //             "visible": true,
	            //             "measureObjList": [{"volume": 50, "selector": "._mea_small_stone"}],
	            //             "containerInfo": {"left": {"volume": 50, "selector": "._mea_small_stone"}, "middle": null, "right": null, "tennis": null, "isHighLight": false, "currentVolume": 250}
	            //         }]
	            //     }
	            // }

	            if (stateData) {
	                //兼容旧版数据
	                if (stateData.toolbar) {
	                    stateData = {
	                        state: {
	                            toolbar: stateData.toolbar,
	                            container: stateData.containers
	                        }
	                    };
	                }
	                this.state.setState(stateData);
	            }
	        },
	        pageShow: function pageShow() {},
	        destroy: function destroy() {
	            _Beaker2.default.reset();
	            _Basin2.default.reset();
	            isAnimateFished = true;
	            isHighLightFinished = true;
	            currentContainerSelector = '._container_beaker';
	        },
	        /****以下开始为Presenter的私有方法*****/
	        _bindEvent: function _bindEvent() {
	            //为工具栏上的元素绑定操作事件
	            //烧杯,水槽
	            var that = this;
	            var cSelector = [_Const.SELECTOR.CONTAINER_BASIN, _Const.SELECTOR.CONTAINER_BEAKER];
	            $toolbar.on('click', cSelector.join(','), function () {
	                that._switchContainer($(this));
	            });

	            //小石头、大石头....
	            var itemSelector = [_Const.SELECTOR.SMALL_STONE, _Const.SELECTOR.BIG_STONE, _Const.SELECTOR.CYLINDER, _Const.SELECTOR.CONE, _Const.SELECTOR.PEAR, _Const.SELECTOR.PING_PANG];
	            that._toggle = _Utils2.default.throttle(500, that._toggle, that);
	            $toolbar.on('click', itemSelector.join(','), function () {
	                that._toggle($(this));
	            });

	            //水位变化量
	            that._viewDeltaHeight = _Utils2.default.throttle(500, that._viewDeltaHeight, that);
	            $view.on('click', _Const.SELECTOR.VIEW_CHANGE_BTN_BASIN + ',' + _Const.SELECTOR.VIEW_CHANGE_BTN_BEAKER, function () {
	                that._viewDeltaHeight($(this));
	            });
	            //清空物品
	            that._showPop = _Utils2.default.throttle(500, that._showPop, that);
	            $view.on('click', _Const.SELECTOR.CLEAR_ALL_BTN_BASIN + ',' + _Const.SELECTOR.CLEAR_ALL_BTN_BEAKER, this._showPop);
	            $view.on('click', _Const.SELECTOR.CLEAR_ALL_YES, this._removeAllYes.bind(that));
	            $view.on('click', _Const.SELECTOR.CLEAR_ALL_NO, this._removeAllNo);
	        },
	        /**
	         * 初始化容器对象的属性
	         */
	        _initContainerProps: function _initContainerProps(containers) {
	            var beaker, basin;
	            if (!containers) {
	                beaker = new _Container2.default(this, _Beaker2.default, true);
	                basin = new _Container2.default(this, _Basin2.default, false);
	                this._containers.push(beaker);
	                this._containers.push(basin);
	            } else {
	                this._containers = containers;
	            }
	            //工具栏按钮初始化
	            $toolbar.find(_Const.SELECTOR.MEASURE_ITEM).removeClass(_Const.SELECTOR.DISABLE_STYLE).removeClass(_Const.SELECTOR.SELECTED_STYLE);
	        },
	        /**
	         * 切换容器
	         */
	        _switchContainer: function _switchContainer($this) {
	            if ($this.hasClass(_Const.SELECTOR.PRESS_STYLE)) {
	                return;
	            }
	            if (!isAnimateFished || !isHighLightFinished) {
	                return;
	            }
	            $toolbar.find("li").removeClass(_Const.SELECTOR.SHOW_TIPS);

	            var container_selector = '',
	                className = _Const.SELECTOR.CONTAINER_BEAKER.substring(1),
	                container,
	                selector,
	                i,
	                length = presenterSelf._containers.length;

	            if ($this.hasClass(className)) {
	                container_selector = _Const.SELECTOR.CONTAINER_BEAKER;
	                $container.find(_Const.SELECTOR.CONTAINER_BEAKER).removeClass(_Const.SELECTOR.HIDE_DOM);
	                $container.find(_Const.SELECTOR.CONTAINER_BASIN).addClass(_Const.SELECTOR.HIDE_DOM);
	                $toolbar.find(_Const.SELECTOR.CONTAINER_BEAKER).addClass(_Const.SELECTOR.PRESS_STYLE);
	                $toolbar.find(_Const.SELECTOR.CONTAINER_BASIN).removeClass(_Const.SELECTOR.PRESS_STYLE);
	                $toolbar.find(_Const.SELECTOR.VIEW_CHANGE_BTN_BASIN).addClass(_Const.SELECTOR.HIDE_DOM);
	                $toolbar.find(_Const.SELECTOR.CLEAR_ALL_BTN_BASIN).addClass(_Const.SELECTOR.HIDE_DOM);
	                $container.removeClass(_Const.SELECTOR.SHOW_BOX_FLUME).addClass(_Const.SELECTOR.SHOW_BOX_BEAKER);
	            } else {
	                container_selector = _Const.SELECTOR.CONTAINER_BASIN;
	                $container.find(_Const.SELECTOR.CONTAINER_BEAKER).addClass(_Const.SELECTOR.HIDE_DOM);
	                $container.find(_Const.SELECTOR.CONTAINER_BASIN).removeClass(_Const.SELECTOR.HIDE_DOM);
	                $toolbar.find(_Const.SELECTOR.CONTAINER_BEAKER).removeClass(_Const.SELECTOR.PRESS_STYLE);
	                $toolbar.find(_Const.SELECTOR.CONTAINER_BASIN).addClass(_Const.SELECTOR.PRESS_STYLE);
	                $toolbar.find(_Const.SELECTOR.VIEW_CHANGE_BTN_BEAKER).addClass(_Const.SELECTOR.HIDE_DOM);
	                $toolbar.find(_Const.SELECTOR.CLEAR_ALL_BTN_BEAKER).addClass(_Const.SELECTOR.HIDE_DOM);
	                $container.removeClass(_Const.SELECTOR.SHOW_BOX_BEAKER).addClass(_Const.SELECTOR.SHOW_BOX_FLUME);
	            }
	            currentContainerSelector = container_selector;
	            for (i = 0; i < length; i++) {
	                container = presenterSelf._containers[i];
	                selector = container.container.selector;
	                container.visible = selector === container_selector;
	            }
	            presenterSelf._updateSwitchContainer();
	        },
	        /**
	         * 向容器中添加物体
	         */
	        _addMeasureObj: function _addMeasureObj(measureObj) {
	            if (!isAnimateFished) {
	                return;
	            }
	            this._getContainer().addMeasureObj(measureObj);
	            this._updateToolbarStyle();
	        },
	        /**
	         * 获取当前的容器对象
	         */
	        _getContainer: function _getContainer() {
	            var i,
	                length = presenterSelf._containers.length;
	            for (i = 0; i < length; i++) {
	                var container = this._containers[i];
	                if (container.visible) {
	                    return container;
	                }
	            }
	        },
	        /**
	         * 从容器中移除物体
	         */
	        _removeMeasureObj: function _removeMeasureObj(measureObj) {
	            var container = this._getContainer();
	            if (isAnimateFished) {
	                container.remove(measureObj);
	                this._updateToolbarStyle();
	            }
	        },
	        /**
	         * 工具栏按钮的点击处理
	         */
	        _toggle: function _toggle($this) {
	            var item_selector, out, measureObj;
	            out = $this;
	            item_selector = out.attr("item-selector");
	            if (out.hasClass(_Const.SELECTOR.DISABLE_STYLE)) {
	                //置灰状态下不能点击
	                $toolbar.find("li").removeClass(_Const.SELECTOR.SHOW_TIPS);
	                out.addClass(_Const.SELECTOR.SHOW_TIPS);
	                if (this.tipTimeId) {
	                    clearTimeout(this.tipTimeId);
	                }
	                this.tipTimeId = setTimeout(function () {
	                    out.removeClass(_Const.SELECTOR.SHOW_TIPS);
	                }, 800);
	                return;
	            }
	            if (!isAnimateFished) {
	                return;
	            }

	            this.preToggleTriggerTime = new Date().getTime();

	            measureObj = _Volume.MeasureObjMap[item_selector];
	            if (measureObj) {
	                this._initLastState('addOrRemoveItem', item_selector);
	                if (out.hasClass(_Const.SELECTOR.SELECTED_STYLE)) {
	                    //当前已经是选中状态，点击操作是从容器中移除该物体
	                    presenterSelf._removeMeasureObj(measureObj);
	                } else {
	                    //将物体添加到容器
	                    presenterSelf._addMeasureObj(measureObj);
	                }
	            }
	        },

	        _initLastState: function _initLastState(op, itemCls) {
	            if (this.lastState && !this.lastState.op) {
	                this.lastState.op = [];
	            }

	            if (op === 'addOrRemoveItem') {
	                if (isHighLightFinished) {
	                    this.lastState = {
	                        state: this.state.getCurState(),
	                        op: [{ op: op, itemCls: itemCls, interval: 0 }]
	                    };
	                } else {
	                    this.lastState.op.push({
	                        interval: new Date().getTime() - this.preDeltaTriggerTime,
	                        op: op,
	                        itemCls: itemCls
	                    });
	                }
	            } else if (op === 'removeAllItem') {
	                if (!isHighLightFinished) {
	                    this.lastState.op.push({
	                        interval: new Date().getTime() - this.preDeltaTriggerTime,
	                        op: op
	                    });
	                }

	                if (!isAnimateFished) {
	                    this.lastState.op.push({
	                        interval: new Date().getTime() - this.preToggleTriggerTime,
	                        op: op
	                    });
	                }

	                if (isHighLightFinished && isAnimateFished) {
	                    this.lastState = {
	                        state: this.state.getCurState(),
	                        op: [{ op: op, itemCls: itemCls, interval: 0 }]
	                    };
	                }
	            } else if (op === 'waterHighLight') {
	                if (isAnimateFished) {
	                    this.lastState = {
	                        state: this.state.getCurState(),
	                        op: [{ op: op, itemCls: itemCls, interval: 0 }]
	                    };
	                } else {
	                    this.lastState.op.push({
	                        interval: new Date().getTime() - this.preToggleTriggerTime,
	                        op: op,
	                        itemCls: itemCls
	                    });
	                }
	            }
	        },

	        /**
	         * 高亮显示升高的水位
	         */
	        _viewDeltaHeight: function _viewDeltaHeight($this) {
	            if ($this.hasClass(_Const.SELECTOR.DISABLE_STYLE)) {
	                return;
	            }

	            if (!isHighLightFinished) {
	                return;
	            }

	            if (!presenterSelf._getContainer().isViewChangeValid()) {
	                return;
	            }

	            this.preDeltaTriggerTime = new Date().getTime();
	            this._initLastState('waterHighLight', $this.hasClass(_Const.SELECTOR.VIEW_CHANGE_BTN_BEAKER.replace('.', '')) ? _Const.SELECTOR.VIEW_CHANGE_BTN_BEAKER : _Const.SELECTOR.VIEW_CHANGE_BTN_BASIN);
	            presenterSelf._getContainer().container.isHighLight = !presenterSelf._getContainer().container.isHighLight;
	            presenterSelf._getContainer().highLightWater();
	        },
	        /**
	         * 显示移除所有物体对话框
	         * @private
	         */
	        _showPop: function _showPop() {
	            if ($(this).hasClass(_Const.SELECTOR.DISABLE_STYLE)) {
	                return;
	            }
	            $view.find(_Const.SELECTOR.CONFIRM_DIALOG).removeClass(_Const.SELECTOR.HIDE_DOM);
	        },

	        /**
	         * 确认移除所有物体
	         */
	        _removeAllYes: function _removeAllYes() {
	            this._initLastState('removeAllItem', '');
	            presenterSelf._getContainer().removeAll();
	            $view.find(_Const.SELECTOR.CONFIRM_DIALOG).addClass(_Const.SELECTOR.HIDE_DOM);
	            presenterSelf._updateToolbarStyle();
	        },
	        /**
	         * 取消移除所有物体
	         */
	        _removeAllNo: function _removeAllNo() {
	            $view.find(_Const.SELECTOR.CONFIRM_DIALOG).addClass(_Const.SELECTOR.HIDE_DOM);
	        },
	        _updateSwitchContainer: function _updateSwitchContainer() {

	            var isHighLight,
	                length,
	                container = presenterSelf._getContainer(),

	            //是否高亮
	            isHighLight = container.container.isHighLight,
	                containerSelector = container.container.selector;

	            this._updateToolbarStyle();

	            if (containerSelector === _Const.SELECTOR.CONTAINER_BEAKER) {
	                $toolbar.find(_Const.SELECTOR.CLEAR_ALL_BTN_BASIN).addClass(_Const.SELECTOR.HIDE_DOM);
	                $toolbar.find(_Const.SELECTOR.VIEW_CHANGE_BTN_BASIN).addClass(_Const.SELECTOR.HIDE_DOM);
	                if (isHighLight) {
	                    $toolbar.find(_Const.SELECTOR.DELTA_TEXT_BEAKER).html(_Lang2.default.get("un-highlight"));
	                } else {
	                    $toolbar.find(_Const.SELECTOR.DELTA_TEXT_BEAKER).html(_Lang2.default.get("water-level-text"));
	                }
	                length = container.measureObjList.length;
	                if (length > 0) {
	                    $toolbar.find(_Const.SELECTOR.CLEAR_ALL_BTN_BEAKER).removeClass(_Const.SELECTOR.HIDE_DOM);
	                    if (length === 1) {
	                        if (container.measureObjList[0].selector === _Const.SELECTOR.PING_PANG) {
	                            $toolbar.find(_Const.SELECTOR.VIEW_CHANGE_BTN_BEAKER).removeClass(_Const.SELECTOR.HIDE_DOM).addClass(_Const.SELECTOR.DISABLE_STYLE);
	                            return;
	                        }
	                    }
	                    $toolbar.find(_Const.SELECTOR.VIEW_CHANGE_BTN_BEAKER).removeClass(_Const.SELECTOR.HIDE_DOM).removeClass(_Const.SELECTOR.DISABLE_STYLE);
	                } else {
	                    $toolbar.find(_Const.SELECTOR.CLEAR_ALL_BTN_BEAKER).addClass(_Const.SELECTOR.HIDE_DOM);
	                    $toolbar.find(_Const.SELECTOR.VIEW_CHANGE_BTN_BEAKER).addClass(_Const.SELECTOR.HIDE_DOM);
	                }
	                if (containerSelector !== currentContainerSelector) {
	                    $toolbar.find(_Const.SELECTOR.CLEAR_ALL_BTN_BEAKER).addClass(_Const.SELECTOR.HIDE_DOM);
	                    $toolbar.find(_Const.SELECTOR.VIEW_CHANGE_BTN_BEAKER).addClass(_Const.SELECTOR.HIDE_DOM);
	                }
	            } else {
	                $toolbar.find(_Const.SELECTOR.CLEAR_ALL_BTN_BEAKER).addClass(_Const.SELECTOR.HIDE_DOM);
	                $toolbar.find(_Const.SELECTOR.VIEW_CHANGE_BTN_BEAKER).addClass(_Const.SELECTOR.HIDE_DOM);
	                if (isHighLight) {
	                    $toolbar.find(_Const.SELECTOR.DELTA_TEXT_BASIN).html(_Lang2.default.get("un-highlight"));
	                } else {
	                    $toolbar.find(_Const.SELECTOR.DELTA_TEXT_BASIN).html(_Lang2.default.get("water-level-text"));
	                }
	                length = container.measureObjList.length;
	                if (length > 0) {
	                    $toolbar.find(_Const.SELECTOR.CLEAR_ALL_BTN_BASIN).removeClass(_Const.SELECTOR.HIDE_DOM);
	                    if (length === 1) {
	                        if (container.measureObjList[0].selector === _Const.SELECTOR.PING_PANG) {

	                            $toolbar.find(_Const.SELECTOR.VIEW_CHANGE_BTN_BASIN).removeClass(_Const.SELECTOR.HIDE_DOM).addClass(_Const.SELECTOR.DISABLE_STYLE);
	                            return;
	                        }
	                    }
	                    $toolbar.find(_Const.SELECTOR.VIEW_CHANGE_BTN_BASIN).removeClass(_Const.SELECTOR.HIDE_DOM).removeClass(_Const.SELECTOR.DISABLE_STYLE);
	                } else {
	                    $toolbar.find(_Const.SELECTOR.CLEAR_ALL_BTN_BASIN).addClass(_Const.SELECTOR.HIDE_DOM);
	                    $toolbar.find(_Const.SELECTOR.VIEW_CHANGE_BTN_BASIN).addClass(_Const.SELECTOR.HIDE_DOM);
	                }

	                if (containerSelector !== currentContainerSelector) {
	                    $toolbar.find(_Const.SELECTOR.CLEAR_ALL_BTN_BASIN).addClass(_Const.SELECTOR.HIDE_DOM);
	                    $toolbar.find(_Const.SELECTOR.VIEW_CHANGE_BTN_BASIN).addClass(_Const.SELECTOR.HIDE_DOM);
	                }
	            }
	        },
	        /**
	         * 更新工具栏的图标样式
	         */
	        _updateToolbarStyle: function _updateToolbarStyle() {
	            var measureObj,
	                selector,
	                container = presenterSelf._getContainer(),
	                isHighLight,
	                key,
	                length,
	                containerSelector;
	            $toolbar.find(_Const.SELECTOR.MEASURE_ITEM).removeClass(_Const.SELECTOR.DISABLE_STYLE);

	            //初始化工具栏
	            for (key in _Volume.MeasureObjMap) {
	                if (_Volume.MeasureObjMap.hasOwnProperty(key)) {
	                    measureObj = _Volume.MeasureObjMap[key];
	                    selector = measureObj.selector;

	                    if (container.isMeasureObjInContainer(selector)) {
	                        $toolbar.find(selector).addClass(_Const.SELECTOR.SELECTED_STYLE);
	                    } else {
	                        $toolbar.find(selector).removeClass(_Const.SELECTOR.SELECTED_STYLE);
	                        //不能超过最大容量限制值
	                        if (!container.validateState(measureObj)) {
	                            $toolbar.find(selector).addClass(_Const.SELECTOR.DISABLE_STYLE);
	                        }
	                    }
	                }
	            }
	        },
	        _updateButtonStyle: function _updateButtonStyle() {
	            /* var isPC = presenterSelf.currentRuntime == icCreatePlayer.RUNTIME.TEACHER_PC;
	             var isTeacher = presenterSelf.currentRuntime == icCreatePlayer.RUNTIME.TEACHER_MOBILE;
	             var isStudent = presenterSelf.currentRuntime == icCreatePlayer.RUNTIME.STUDENT_MOBILE;
	             if(isPC || isTeacher){
	             //老师端因为有工具外框，所以需要修改按钮的偏移，避免被遮挡.学生端不需要
	             $toolbar.find(SELECTOR.BUTTON_RIGHT_BOTTOM).css("right", 6.08333 + "em");
	             }
	             if(isStudent){
	             console.log("remove style");
	             $container.removeAttr("style");
	             }*/
	        },
	        setCurrentContainerSelector: function setCurrentContainerSelector(val) {
	            currentContainerSelector = val;
	        },
	        getCurrentContainerSelector: function getCurrentContainerSelector() {
	            return currentContainerSelector;
	        },
	        setIsAnimateFished: function setIsAnimateFished(val) {
	            isAnimateFished = val;
	        },
	        getIsAnimateFinished: function getIsAnimateFinished() {
	            return isAnimateFished;
	        },
	        setIsHighLightFinished: function setIsHighLightFinished(val) {
	            isHighLightFinished = val;
	        },
	        getIsHighLightFinished: function getIsHighLightFinished() {
	            return isHighLightFinished;
	        },
	        /**
	         * i18n支持
	         */
	        _initDrainageForVolumeI18nView: function _initDrainageForVolumeI18nView() {
	            _Lang2.default.initI18N($view);
	            var width = "7em";
	            $view.find(_Const.SELECTOR.CLEAR_ALL_YES).css("width", width);
	            $view.find(_Const.SELECTOR.CLEAR_ALL_NO).css("width", width);
	        }
	    }, 'DrainageForVolume');

	    window.AddonDrainageForVolume_create = function () {
	        return new Presenter();
	    };
	})();

/***/ }),
/* 2 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	/**
	 * 多语言语言处理
	 * Created by ylf on 2017/4/6.
	 */

	var LangKeySet = {
	    "title-text": "排水法测体积",
	    "beaker-text": "烧杯",
	    "basin-text": "水槽",
	    "big-stone-text": "大石头",
	    "small-stone-text": "小石头",
	    "cylinder-text": "圆柱体",
	    "cone-text": "圆锥体",
	    "ball-text": "乒乓球",
	    "pear-text": "鸭梨",
	    "water-level-text": "水位变化量",
	    "un-highlight": "取消点亮",
	    "empty-text": "清空物品",
	    "clear-tip-text": "确定要删除所有物品吗？",
	    "tip-text": "容器里已经装不下了",
	    "confirm-text": "确定",
	    "cancel-text": "取消"
	};

	var Lang = {
	    get: function get(key) {
	        if (LangKeySet[key] == undefined) return "ERROR";
	        return LangKeySet[key];
	    },
	    extend: function extend(lang) {
	        $.extend(LangKeySet, lang);
	    },
	    initI18N: function initI18N($view) {
	        for (var key in LangKeySet) {
	            if (LangKeySet.hasOwnProperty(key)) {
	                var text = LangKeySet[key];
	                $view.find("." + key).text(text);
	            }
	        }
	    }
	};

	exports.default = Lang;

/***/ }),
/* 3 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	/**
	 * 代码中所用到的CSS选择器
	 */
	var SELECTOR = exports.SELECTOR = {
	    BUTTON_RIGHT_BOTTOM: '.button_rightbottom',
	    MAIN_CONTENT: '._drainage_container_main_content',
	    OUT_CONTAINER: '._drainage_out_container',
	    MEASURE_ITEM: '._substances_name',
	    CONFIRM_DIALOG: '._confirm_dialog',
	    SHOW_TIPS: 'show_tips',
	    CAN_BE_CLICE: '.clicked',
	    TWINKLEIN: 'twinkleIn',
	    DELTA_TEXT_BEAKER: '._delta_text_beaker',
	    DELTA_TEXT_BASIN: '._delta_text_basin',
	    OPERATION_TIPS_BOX: '.operation_tips_box',
	    CLEAR_ALL_YES: '._click_all_yes',
	    CLEAR_ALL_NO: '._click_all_no',
	    CURRENT_VOLUME: '._current_volume',
	    TWINKLE_OUT: 'twinkleOut',
	    ADD_VOLUME: 'init_water_add',
	    DELETE_CLASS: 'init_water_add0 init_water_add50 init_water_add100 init_water_add150 init_water_add200 init_water_add250 init_water_add300 init_water_add0p init_water_add50p init_water_add100p init_water_add150p init_water_add200p init_water_add250p init_water_add300p',
	    HIDE_DOM: 'hide_dom',
	    SHOW_BOX_BEAKER: 'show_box_beaker',
	    SHOW_BOX_FLUME: 'show_box_flume',
	    BIG_STONE: '._mea_big_stone',
	    SMALL_STONE: '._mea_small_stone',
	    CYLINDER: '._mea_cylinder',
	    CONE: '._mea_cone',
	    PEAR: '._mea_pear',
	    PING_PANG: '._mea_ping_pang',
	    VIEW_CHANGE_BTN_BEAKER: '._view_change_water_level_beaker',
	    CLEAR_ALL_BTN_BEAKER: '._clear_all_beaker',
	    VIEW_CHANGE_BTN_BASIN: '._view_change_water_level_basin',
	    CLEAR_ALL_BTN_BASIN: '._clear_all_basin',
	    POP_BOX_ORI: '._pop_box_ori',
	    POP_BOX_DEST: '._pop_box_dest',
	    TOOLBAR: '._drainage_toolbar',
	    CONTAINER: '._drainage_container',
	    CONTAINER_BEAKER: '._container_beaker',
	    CONTAINER_BASIN: '._container_basin',
	    WATER_CONTAINER: '._drainage_water',
	    RAISE_CONTAINER: '._raise_container',
	    PRESS_STYLE: 'click_btn_on',
	    SELECTED_STYLE: 'click_btn_on',
	    DISABLE_STYLE: 'click_disabled',
	    HIGH_LIGHT: '._high_light',
	    OBJECTIVE_LAYOUT: '.objective_layout'

	    /**
	     * 常量定义
	     */
	};var CONSTANT_ENUM = exports.CONSTANT_ENUM = {
	    PING_PANG_HEIGHT: 7.375,
	    ADD: "add",
	    DELETE: "delete",
	    LAYOUT_LEFT: "left",
	    LAYOUT_RIGHT: "right",
	    LAYOUT_MIDDLE: "middle",
	    ORIGIN_VOLUME: 200,
	    MAX_VOLUME: 500,
	    BIG_STONE_VOLUME: 100,
	    SMALL_STONE_VOLUME: 50,
	    CYLINDER_VOLUME: 150,
	    CONE_VOLUME: 50,
	    PEAR_VOLUME: 150,
	    ANIMATE_SPEED: 1000,
	    PING_PANG_VOLUME: 0,
	    LAYOUT_FONT_SIZE: 18 /*layout的字体*/
	};

	var WATER_HEIGHT = exports.WATER_HEIGHT = {
	    BREAKER: {
	        0: 3.91667,
	        50: 6.29167,
	        100: 8.58333,
	        150: 11,
	        200: 13.33333,
	        250: 15.54167,
	        300: 17.91667,
	        '0p': 4.125,
	        '50p': 6.5,
	        '100p': 8.79167,
	        '150p': 11.20833,
	        '200p': 13.54167,
	        '250p': 15.75,
	        '300p': 18.125
	    },
	    FLUME: {
	        0: 9.91667,
	        50: 12.16667,
	        100: 14.5,
	        150: 16.8,
	        200: 19.16667,
	        250: 21.5,
	        300: 23.75,
	        '0p': 10.08333,
	        '50p': 12.375,
	        '100p': 14.75,
	        '150p': 17.04167,
	        '200p': 19.375,
	        '250p': 21.70833,
	        '300p': 23.95833
	    }
	};

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _Const = __webpack_require__(3);

	var Beaker = {
	    name: 'beaker',
	    left: null,
	    right: null,
	    middle: null,
	    tennis: null,
	    srcTipText: "200ml",
	    maxVolume: 500,
	    currentVolume: 200,
	    isHighLight: false,
	    top: -9.54167,
	    selector: _Const.SELECTOR.CONTAINER_BEAKER,
	    left_pos_info: {
	        start: {
	            bottom: 25.208,
	            left: 1.5
	        },
	        end: {
	            bottom: -1.192,
	            left: 1.5
	        }
	    },
	    middle_pos_info: {
	        start: {
	            bottom: 25.208,
	            left: 8
	        },
	        end: {
	            bottom: -1.192,
	            left: 8
	        }
	    },
	    right_pos_info: {
	        start: {
	            bottom: 25.208,
	            left: 13
	        },
	        end: {
	            bottom: -1.192,
	            left: 13
	        }
	    },
	    reset: function reset() {
	        this.left = null;
	        this.right = null;
	        this.middle = null;
	        this.tennis = null;
	        this.currentVolume = 200;
	        this.isHighLight = false;
	    }
	}; /**
	    * 烧杯的基本信息
	    */

	exports.default = Beaker;

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _Const = __webpack_require__(3);

	var Basin = {
	    name: 'basin',
	    left: null,
	    right: null,
	    middle: null,
	    tennis: null,
	    srcTipText: "4cm",
	    currentVolume: 200,
	    maxVolume: 500,
	    isHighLight: false,
	    selector: _Const.SELECTOR.CONTAINER_BASIN,
	    top: -7.625,
	    left_pos_info: {
	        start: {
	            bottom: 26,
	            left: 6
	        },
	        end: {
	            bottom: 1.5,
	            left: 6
	        }
	    },
	    middle_pos_info: {
	        start: {
	            bottom: 26,
	            left: 15
	        },
	        end: {
	            bottom: 1.5,
	            left: 15
	        }
	    },
	    right_pos_info: {
	        start: {
	            bottom: 26,
	            left: 25
	        },
	        end: {
	            bottom: 1.5,
	            left: 25
	        }
	    },
	    reset: function reset() {
	        this.left = null;
	        this.right = null;
	        this.middle = null;
	        this.tennis = null;
	        this.currentVolume = 200;
	        this.isHighLight = false;
	    }
	}; /**
	    * 水槽的基本信息
	    */

	exports.default = Basin;

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.MeasureObjMap = exports.VolumeHeight = undefined;

	var _Const = __webpack_require__(3);

	/**
	 * 容器的容积和水面高度之间的关系
	 * 单位：em
	 */

	var volumeToHeight = function volumeToHeight(container_selector, volume) {
	    var result = 0;
	    if (container_selector === _Const.SELECTOR.CONTAINER_BEAKER) {
	        switch (volume) {
	            case 200:
	                result = 3.83333;
	                break;
	            case 250:
	                result = 6.29167;
	                break;
	            case 300:
	                result = 8.58333;
	                break;
	            case 350:
	                result = 11;
	                break;
	            case 400:
	                result = 13.33333;
	                break;
	            case 450:
	                result = 15.66667;
	                break;
	            case 500:
	                result = 17.91667;
	                break;
	        }
	    } else {
	        switch (volume) {
	            case 200:
	                result = 9.91667;
	                break;
	            case 250:
	                result = 12.08333;
	                break;
	            case 300:
	                result = 14.54167;
	                break;
	            case 350:
	                result = 16.83333;
	                break;
	            case 400:
	                result = 19.16667;
	                break;
	            case 450:
	                result = 21.5;
	                break;
	            case 500:
	                result = 23.75;
	                break;
	        }
	    }
	    return result;
	};

	/**
	 * 计算物体和水面接触的高度
	 * @param {Object} container_selector   容器的选择器
	 * @param {Object} volume                容器当前容积
	 * @param {Object} measure_selector        物体的选择器
	 */
	var computeCurrentHeightByMeasure = function computeCurrentHeightByMeasure(container_selector, volume) {
	    var result = volumeToHeight(container_selector, volume);
	    return container_selector === _Const.SELECTOR.CONTAINER_BEAKER ? result + 3.375 : result + 1.45833;
	};

	var updateMiddleLeftPos = function updateMiddleLeftPos(measureObj, container, pos, selector) {
	    var left = pos.start.left;
	    if (pos === container.middle_pos_info && selector === _Const.SELECTOR.CONTAINER_BASIN) {
	        if (measureObj.selector === _Const.SELECTOR.SMALL_STONE) {
	            left = left + 1;
	        } else if (measureObj.selector === _Const.SELECTOR.CONE) {
	            left = left + 0.5;
	        }
	    }
	    return left;
	};

	var VolumeHeight = exports.VolumeHeight = {
	    volumeToHeight: volumeToHeight,
	    computeCurrentHeightByMeasure: computeCurrentHeightByMeasure,
	    updateMiddleLeftPos: updateMiddleLeftPos
	};

	var MeasureObjMap = exports.MeasureObjMap = {
	    '._mea_big_stone': {
	        volume: _Const.CONSTANT_ENUM.BIG_STONE_VOLUME,
	        selector: _Const.SELECTOR.BIG_STONE
	    },
	    '._mea_small_stone': {
	        volume: _Const.CONSTANT_ENUM.SMALL_STONE_VOLUME,
	        selector: _Const.SELECTOR.SMALL_STONE
	    },
	    '._mea_cylinder': {
	        volume: _Const.CONSTANT_ENUM.CYLINDER_VOLUME,
	        selector: _Const.SELECTOR.CYLINDER
	    },
	    '._mea_cone': {
	        volume: _Const.CONSTANT_ENUM.CONE_VOLUME,
	        selector: _Const.SELECTOR.CONE
	    },
	    '._mea_pear': {
	        volume: _Const.CONSTANT_ENUM.PEAR_VOLUME,
	        selector: _Const.SELECTOR.PEAR
	    },
	    '._mea_ping_pang': {
	        volume: _Const.CONSTANT_ENUM.PING_PANG_VOLUME,
	        selector: _Const.SELECTOR.PING_PANG
	    }
	};

/***/ }),
/* 7 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	/**
	 * 公共方法
	 */

	var numReg = /^([+-]?[.\d]*)([a-z%]*)$/;

	var Utils = {
	    /**
	     * 生成uuid
	     * @return {string}
	     */
	    generateUUID: function generateUUID() {
	        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
	            var r = Math.random() * 16 | 0,
	                v = c === 'x' ? r : r & 0x3 | 0x8;
	            return v.toString(16);
	        });
	    },
	    getTargetUnitStyle: function getTargetUnitStyle($el, key, unit) {
	        var style = $el.attr('style'),
	            start = $el.css(key),
	            startParts = numReg.exec(start),
	            height = style && style.match(/height:\s*([\da-z.]*)/);

	        //优先从style属性内获取值
	        if (height && height.length === 2) {
	            startParts = numReg.exec(height[1]);
	            if (startParts.length === 3 && startParts[2] === unit) {
	                return parseFloat(startParts[1]);
	            }
	        }

	        if (startParts.length === 3 && startParts[2] === unit) {
	            return parseFloat(start);
	        }

	        // var scale = 1, maxIterations = 20, startNum = parseFloat(start);
	        // do {
	        //     // If previous iteration zeroed out, double until we get *something*
	        //     // Use a string for doubling factor so we don't accidentally see scale as unchanged below
	        //     scale = scale || ".5";
	        //
	        //     // Adjust and apply
	        //     startNum = startNum / scale;
	        //     $el.css(key, startNum + unit);
	        //
	        //     // Update scale, tolerating zero or NaN from tween.cur()
	        //     // And breaking the loop if scale is unchanged or perfect, or if we've just had enough
	        // } while (scale !== (scale = parseFloat($el.css(key)) / parseFloat(start)) && scale !== 1 && --maxIterations);
	        // return startNum;

	        //此处有误差，
	        $el.css(key, parseFloat(start) + unit);
	        var cur = $el.css(key);
	        var scale = parseFloat(cur) / parseFloat(start);
	        $el.css(key, start);
	        return parseFloat(start) / scale;
	    },
	    /**
	     * 节流
	     * @param delay
	     * @param action
	     * @return {Function}
	     */
	    throttle: function throttle(delay, fn, context) {
	        var last = 0;
	        return function () {
	            var curr = new Date().getTime();
	            if (curr - last > delay) {
	                fn.apply(context || this, arguments);
	                last = curr;
	            }
	        };
	    }
	};

	exports.default = Utils;

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _Const = __webpack_require__(3);

	var _Beaker = __webpack_require__(4);

	var _Beaker2 = _interopRequireDefault(_Beaker);

	var _Basin = __webpack_require__(5);

	var _Basin2 = _interopRequireDefault(_Basin);

	var _Lang = __webpack_require__(2);

	var _Lang2 = _interopRequireDefault(_Lang);

	var _Volume = __webpack_require__(6);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var invokeOp = function invokeOp(op, itemCls) {
	    if (op === 'addOrRemoveItem') {
	        this.mContext.$toolbar.find(itemCls).trigger('click');
	    } else if (op === 'removeAllItem') {
	        this.mContext.$view.find(_Const.SELECTOR.CLEAR_ALL_YES).trigger('click');
	    } else if (op === 'waterHighLight') {
	        this.mContext.$toolbar.find(itemCls).trigger('click');
	    }
	};

	var State = function () {
	    function State(presenter) {
	        _classCallCheck(this, State);

	        this.mContext = presenter;
	    }

	    /**
	     *
	     * @return {
	     *      state:{
	     *          toolbar:{},
	     *          container:{}
	     *      },
	     *      op:[
	     *              {
	                        interval: ,
	                        op: op,
	                        itemCls: itemCls
	                    }
	     *      ]
	     * }
	     */


	    _createClass(State, [{
	        key: 'getState',
	        value: function getState() {
	            if (!this.mContext.getIsAnimateFinished() || !this.mContext.getIsHighLightFinished()) {
	                return this.mContext.lastState;
	            }
	            return {
	                state: {
	                    toolbar: this.getToolbarState(),
	                    container: this.getContainerState()
	                }
	            };
	        }
	    }, {
	        key: 'getCurState',
	        value: function getCurState() {
	            return {
	                toolbar: this.getToolbarState(),
	                container: this.getContainerState()
	            };
	        }
	    }, {
	        key: 'setState',
	        value: function setState(state) {
	            var that = this;
	            if (state) {
	                this.setToolbarState(state.state.toolbar);
	                this.setContainerState(state.state.container);
	            }

	            var ops = state.op;
	            if (ops && ops.length > 0) {
	                ops.forEach(function (op) {
	                    setTimeout(function () {
	                        invokeOp.apply(that, [op.op, op.itemCls]);
	                    }, op.interval);
	                });
	            }
	        }

	        /**
	         * 获取工具栏的按钮状态信息
	         */

	    }, {
	        key: 'getToolbarState',
	        value: function getToolbarState() {
	            var $toolbar = this.mContext.$toolbar;
	            return {
	                beaker: $toolbar.find(_Const.SELECTOR.CONTAINER_BEAKER).attr("class"),
	                basin: $toolbar.find(_Const.SELECTOR.CONTAINER_BASIN).attr("class"),
	                smallStone: $toolbar.find(_Const.SELECTOR.SMALL_STONE).attr("class"),
	                bigStone: $toolbar.find(_Const.SELECTOR.BIG_STONE).attr("class"),
	                cylinder: $toolbar.find(_Const.SELECTOR.CYLINDER).attr("class"),
	                cone: $toolbar.find(_Const.SELECTOR.CONE).attr("class"),
	                pear: $toolbar.find(_Const.SELECTOR.PEAR).attr("class"),
	                tennis: $toolbar.find(_Const.SELECTOR.PING_PANG).attr("class"),
	                currentContainerSelector: this.mContext.getCurrentContainerSelector()
	            };
	        }

	        /**
	         * 根据状态设置工具栏的显示
	         */

	    }, {
	        key: 'setToolbarState',
	        value: function setToolbarState(state) {
	            var $toolbar = this.mContext.$toolbar;
	            $toolbar.find(_Const.SELECTOR.CONTAINER_BEAKER).removeClass().addClass(state.beaker);
	            $toolbar.find(_Const.SELECTOR.CONTAINER_BASIN).removeClass().addClass(state.basin);
	            $toolbar.find(_Const.SELECTOR.SMALL_STONE).removeClass().addClass(state.smallStone);
	            $toolbar.find(_Const.SELECTOR.BIG_STONE).removeClass().addClass(state.bigStone);
	            $toolbar.find(_Const.SELECTOR.CYLINDER).removeClass().addClass(state.cylinder);
	            $toolbar.find(_Const.SELECTOR.CONE).removeClass().addClass(state.cone);
	            $toolbar.find(_Const.SELECTOR.PEAR).removeClass().addClass(state.pear);
	            $toolbar.find(_Const.SELECTOR.PING_PANG).removeClass().addClass(state.tennis);
	            this.mContext.setCurrentContainerSelector(state.currentContainerSelector);
	        }

	        /**
	         * 获取容器的状态信息
	         */

	    }, {
	        key: 'getContainerState',
	        value: function getContainerState() {
	            var result = [],
	                index = 0,
	                containerObj,
	                container,
	                length = this.mContext._containers.length,
	                item;
	            for (; index < length; index++) {
	                containerObj = this.mContext._containers[index];
	                container = containerObj.container;
	                item = {
	                    "visible": containerObj.visible,
	                    "measureObjList": containerObj.measureObjList,
	                    "containerInfo": {
	                        "left": container.left,
	                        "middle": container.middle,
	                        "right": container.right,
	                        "tennis": container.tennis,
	                        "isHighLight": container.isHighLight,
	                        "currentVolume": container.currentVolume,
	                        "visible": container.visible
	                    }
	                };
	                result.push(item);
	            }
	            return result;
	        }

	        /**
	         * 设置容器的状态
	         */

	    }, {
	        key: 'setContainerState',
	        value: function setContainerState(containers) {
	            var index = 0,
	                containerObj,
	                container,
	                length = this.mContext._containers.length,
	                item;
	            if (this.mContext._containers.length === containers.length) {
	                for (; index < length; index++) {
	                    containerObj = this.mContext._containers[index];
	                    container = containerObj.container;
	                    item = containers[index];
	                    containerObj.visible = item.visible;
	                    containerObj.measureObjList = item.measureObjList;
	                    container.left = item.containerInfo.left;
	                    container.middle = item.containerInfo.middle;
	                    container.right = item.containerInfo.right;
	                    container.tennis = item.containerInfo.tennis;
	                    container.isHighLight = item.containerInfo.isHighLight;
	                    container.currentVolume = item.containerInfo.currentVolume;
	                    container.visible = item.containerInfo.visible;
	                    this._recoverContainer(containerObj);
	                }
	            }
	        }

	        /**
	         * 恢复容器中的物体显示状态
	         * type = 1 :  恢复烧杯中的物体显示  type = 2 : 恢复水槽中的物体显示
	         */

	    }, {
	        key: '_recoverContainer',
	        value: function _recoverContainer(containerObj) {
	            var selector = containerObj.container.selector;
	            var container, className, measureObj, $obj, left, endPos, pos, top_end, destinationText;
	            this.mContext.setIsAnimateFished(true);
	            if (selector == _Const.SELECTOR.CONTAINER_BEAKER) {
	                //设置容器的显示
	                if (containerObj.visible) {
	                    this.mContext.$container.find(_Const.SELECTOR.CONTAINER_BEAKER).removeClass(_Const.SELECTOR.HIDE_DOM);
	                    this.mContext.$container.find(_Const.SELECTOR.CONTAINER_BASIN).addClass(_Const.SELECTOR.HIDE_DOM);
	                    this.mContext.$container.removeClass(_Const.SELECTOR.SHOW_BOX_FLUME).addClass(_Const.SELECTOR.SHOW_BOX_BEAKER);
	                }
	                //设置烧杯中的物体显示
	                container = containerObj.container;
	                //判断水位是否高亮显示
	                if (container.isHighLight) {
	                    this.mContext.$container.find(selector).find(_Const.SELECTOR.RAISE_CONTAINER).removeClass(_Const.SELECTOR.HIDE_DOM).addClass(_Const.SELECTOR.TWINKLEIN).removeClass(_Const.SELECTOR.TWINKLEIN);
	                    this.mContext.$toolbar.find(_Const.SELECTOR.DELTA_TEXT_BEAKER).html(_Lang2.default.get("un-highlight"));
	                } else {
	                    this.mContext.$toolbar.find(_Const.SELECTOR.DELTA_TEXT_BEAKER).html(_Lang2.default.get("water-level-text"));
	                }
	                //设置水位
	                className = _Const.SELECTOR.ADD_VOLUME + (container.currentVolume - _Const.CONSTANT_ENUM.ORIGIN_VOLUME);
	                var key = container.currentVolume - _Const.CONSTANT_ENUM.ORIGIN_VOLUME;
	                if (container.tennis) {
	                    className = className + "p";
	                    key += 'p';
	                }
	                var water = containerObj.container.name === 'beaker' ? _Const.WATER_HEIGHT.BREAKER : _Const.WATER_HEIGHT.FLUME;
	                this.mContext.$container.find(container.selector).find(_Const.SELECTOR.WATER_CONTAINER).removeClass(_Const.SELECTOR.DELETE_CLASS).addClass(className);
	                this.mContext.$container.find(container.selector).find(_Const.SELECTOR.WATER_CONTAINER).css('height', water[key] + 'em');

	                //设置烧杯中物体的显示
	                if (container.left) {
	                    measureObj = container.left;
	                    $obj = this.mContext.$container.find(selector).find(measureObj.selector);
	                    pos = container.left_pos_info;
	                    endPos = pos.end;
	                    left = _Volume.VolumeHeight.updateMiddleLeftPos(measureObj, container, pos, selector);
	                    $obj.css({
	                        bottom: endPos.bottom + "em",
	                        left: left + "em",
	                        right: 0 + "em"
	                    }).removeClass(_Const.SELECTOR.HIDE_DOM).removeClass(_Const.SELECTOR.TWINKLE_OUT);
	                }

	                if (container.middle) {
	                    measureObj = container.middle;
	                    $obj = this.mContext.$container.find(selector).find(measureObj.selector);
	                    pos = container.middle_pos_info;
	                    endPos = pos.end;
	                    left = _Volume.VolumeHeight.updateMiddleLeftPos(measureObj, container, pos, selector);
	                    $obj.css({
	                        bottom: endPos.bottom + "em",
	                        left: left + "em",
	                        right: 0 + "em"
	                    }).removeClass(_Const.SELECTOR.HIDE_DOM).removeClass(_Const.SELECTOR.TWINKLE_OUT);
	                }

	                if (container.right) {
	                    measureObj = container.right;
	                    $obj = this.mContext.$container.find(selector).find(measureObj.selector);
	                    pos = container.right_pos_info;
	                    endPos = pos.end;
	                    left = _Volume.VolumeHeight.updateMiddleLeftPos(measureObj, container, pos, selector);
	                    $obj.css({
	                        bottom: endPos.bottom + "em",
	                        left: left + "em",
	                        right: 0 + "em"
	                    }).removeClass(_Const.SELECTOR.HIDE_DOM);
	                }

	                if (container.tennis) {
	                    $obj = this.mContext.$container.find(selector).find(_Const.SELECTOR.PING_PANG);
	                    $obj.addClass("top_center");
	                    top_end = _Beaker2.default.top + "em";
	                    $obj.css({
	                        top: top_end
	                    }).removeClass(_Const.SELECTOR.HIDE_DOM).removeClass(_Const.SELECTOR.TWINKLE_OUT);
	                }
	                destinationText = containerObj.getVolumeText().destinationText;
	                //设置浮标的显示文字
	                this.mContext.$container.find(_Const.SELECTOR.CONTAINER_BEAKER).find(_Const.SELECTOR.POP_BOX_DEST).find(_Const.SELECTOR.CURRENT_VOLUME).text(destinationText);
	                //判断最终水位浮标是否应该显示
	                if (container.currentVolume > _Const.CONSTANT_ENUM.ORIGIN_VOLUME || container.tennis) {
	                    this.mContext.$container.find(selector).find(_Const.SELECTOR.POP_BOX_DEST).removeClass(_Const.SELECTOR.HIDE_DOM);
	                }
	                if (containerObj.visible) {
	                    this.mContext.$toolbar.find(_Const.SELECTOR.VIEW_CHANGE_BTN_BASIN).addClass(_Const.SELECTOR.HIDE_DOM);
	                    this.mContext.$toolbar.find(_Const.SELECTOR.CLEAR_ALL_BTN_BASIN).addClass(_Const.SELECTOR.HIDE_DOM);
	                    if (container.currentVolume > _Const.CONSTANT_ENUM.ORIGIN_VOLUME) {
	                        this.mContext.$toolbar.find(_Const.SELECTOR.VIEW_CHANGE_BTN_BEAKER).removeClass(_Const.SELECTOR.HIDE_DOM).removeClass(_Const.SELECTOR.DISABLE_STYLE);
	                        this.mContext.$toolbar.find(_Const.SELECTOR.CLEAR_ALL_BTN_BEAKER).removeClass(_Const.SELECTOR.HIDE_DOM);
	                    } else {
	                        if (container.tennis) {
	                            this.mContext.$toolbar.find(_Const.SELECTOR.VIEW_CHANGE_BTN_BEAKER).removeClass(_Const.SELECTOR.HIDE_DOM).addClass(_Const.SELECTOR.DISABLE_STYLE);
	                            this.mContext.$toolbar.find(_Const.SELECTOR.CLEAR_ALL_BTN_BEAKER).removeClass(_Const.SELECTOR.HIDE_DOM);
	                        } else {
	                            this.mContext.$toolbar.find(_Const.SELECTOR.VIEW_CHANGE_BTN_BEAKER).addClass(_Const.SELECTOR.HIDE_DOM).removeClass(_Const.SELECTOR.DISABLE_STYLE);
	                            this.mContext.$toolbar.find(_Const.SELECTOR.CLEAR_ALL_BTN_BEAKER).addClass(_Const.SELECTOR.HIDE_DOM);
	                        }
	                    }
	                }
	            } else {
	                //设置容器的显示
	                if (containerObj.visible) {
	                    this.mContext.$container.find(_Const.SELECTOR.CONTAINER_BEAKER).addClass(_Const.SELECTOR.HIDE_DOM);
	                    this.mContext.$container.find(_Const.SELECTOR.CONTAINER_BASIN).removeClass(_Const.SELECTOR.HIDE_DOM);
	                    this.mContext.$container.removeClass(_Const.SELECTOR.SHOW_BOX_BEAKER).addClass(_Const.SELECTOR.SHOW_BOX_FLUME);
	                }

	                //设置水槽中的物体显示
	                container = containerObj.container;
	                //判断水位是否高亮显示
	                if (container.isHighLight) {
	                    this.mContext.$container.find(selector).find(_Const.SELECTOR.RAISE_CONTAINER).removeClass(_Const.SELECTOR.HIDE_DOM).addClass(_Const.SELECTOR.TWINKLEIN).removeClass(_Const.SELECTOR.TWINKLEIN);
	                    this.mContext.$toolbar.find(_Const.SELECTOR.DELTA_TEXT_BASIN).html(_Lang2.default.get("un-highlight"));
	                } else {
	                    this.mContext.$toolbar.find(_Const.SELECTOR.DELTA_TEXT_BASIN).html(_Lang2.default.get("water-level-text"));
	                }
	                //设置水位
	                className = _Const.SELECTOR.ADD_VOLUME + (container.currentVolume - _Const.CONSTANT_ENUM.ORIGIN_VOLUME);
	                var key = container.currentVolume - _Const.CONSTANT_ENUM.ORIGIN_VOLUME;
	                if (container.tennis) {
	                    className = className + "p";
	                    key += 'p';
	                }
	                this.mContext.$container.find(container.selector).find(_Const.SELECTOR.WATER_CONTAINER).css('height', _Const.WATER_HEIGHT.FLUME[key] + 'em');
	                this.mContext.$container.find(container.selector).find(_Const.SELECTOR.WATER_CONTAINER).removeClass(_Const.SELECTOR.DELETE_CLASS).addClass(className);
	                //设置烧杯中物体的显示
	                if (container.left) {
	                    measureObj = container.left;
	                    $obj = this.mContext.$container.find(selector).find(measureObj.selector);
	                    pos = container.left_pos_info;
	                    endPos = pos.end;
	                    left = _Volume.VolumeHeight.updateMiddleLeftPos(measureObj, container, pos, selector);
	                    $obj.css({
	                        bottom: endPos.bottom + "em",
	                        left: left + "em",
	                        right: 0 + "em"
	                    }).removeClass(_Const.SELECTOR.HIDE_DOM).removeClass(_Const.SELECTOR.TWINKLE_OUT);
	                }

	                if (container.middle) {
	                    measureObj = container.middle;
	                    $obj = this.mContext.$container.find(selector).find(measureObj.selector);
	                    pos = container.middle_pos_info;
	                    endPos = pos.end;
	                    left = _Volume.VolumeHeight.updateMiddleLeftPos(measureObj, container, pos, selector);
	                    $obj.css({
	                        bottom: endPos.bottom + "em",
	                        left: left + "em",
	                        right: 0 + "em"
	                    }).removeClass(_Const.SELECTOR.HIDE_DOM).removeClass(_Const.SELECTOR.TWINKLE_OUT);
	                }

	                if (container.right) {
	                    measureObj = container.right;
	                    $obj = this.mContext.$container.find(selector).find(measureObj.selector);
	                    pos = container.right_pos_info;
	                    endPos = pos.end;
	                    left = _Volume.VolumeHeight.updateMiddleLeftPos(measureObj, container, pos, selector);
	                    $obj.css({
	                        bottom: endPos.bottom + "em",
	                        left: left + "em",
	                        right: 0 + "em"
	                    }).removeClass(_Const.SELECTOR.HIDE_DOM).removeClass(_Const.SELECTOR.TWINKLE_OUT);
	                }

	                if (container.tennis) {
	                    $obj = this.mContext.$container.find(selector).find(_Const.SELECTOR.PING_PANG);
	                    $obj.addClass("top_center");
	                    top_end = _Basin2.default.top + "em";
	                    $obj.css({
	                        top: top_end
	                    }).removeClass(_Const.SELECTOR.HIDE_DOM).removeClass(_Const.SELECTOR.TWINKLE_OUT);
	                }

	                destinationText = containerObj.getVolumeText().destinationText;
	                //设置浮标的显示文字
	                this.mContext.$container.find(_Const.SELECTOR.CONTAINER_BASIN).find(_Const.SELECTOR.POP_BOX_DEST).find(_Const.SELECTOR.CURRENT_VOLUME).text(destinationText);
	                //判断最终水位浮标是否应该显示
	                if (container.currentVolume > _Const.CONSTANT_ENUM.ORIGIN_VOLUME || container.tennis) {
	                    this.mContext.$container.find(selector).find(_Const.SELECTOR.POP_BOX_DEST).removeClass(_Const.SELECTOR.HIDE_DOM);
	                }

	                if (containerObj.visible) {
	                    this.mContext.$toolbar.find(_Const.SELECTOR.VIEW_CHANGE_BTN_BEAKER).addClass(_Const.SELECTOR.HIDE_DOM);
	                    this.mContext.$toolbar.find(_Const.SELECTOR.CLEAR_ALL_BTN_BEAKER).addClass(_Const.SELECTOR.HIDE_DOM);
	                    //显示按钮
	                    if (container.currentVolume > _Const.CONSTANT_ENUM.ORIGIN_VOLUME) {
	                        this.mContext.$toolbar.find(_Const.SELECTOR.VIEW_CHANGE_BTN_BASIN).removeClass(_Const.SELECTOR.HIDE_DOM).removeClass(_Const.SELECTOR.DISABLE_STYLE);
	                        this.mContext.$toolbar.find(_Const.SELECTOR.CLEAR_ALL_BTN_BASIN).removeClass(_Const.SELECTOR.HIDE_DOM);
	                    } else {
	                        if (container.tennis) {
	                            this.mContext.$toolbar.find(_Const.SELECTOR.VIEW_CHANGE_BTN_BASIN).removeClass(_Const.SELECTOR.HIDE_DOM).addClass(_Const.SELECTOR.DISABLE_STYLE);
	                            this.mContext.$toolbar.find(_Const.SELECTOR.CLEAR_ALL_BTN_BASIN).removeClass(_Const.SELECTOR.HIDE_DOM);
	                        } else {
	                            this.mContext.$toolbar.find(_Const.SELECTOR.VIEW_CHANGE_BTN_BASIN).addClass(_Const.SELECTOR.HIDE_DOM).removeClass(_Const.SELECTOR.DISABLE_STYLE);
	                            this.mContext.$toolbar.find(_Const.SELECTOR.CLEAR_ALL_BTN_BASIN).addClass(_Const.SELECTOR.HIDE_DOM);
	                        }
	                    }
	                }
	            }
	            //去除提示信息
	            this.mContext.$toolbar.find("li").removeClass(_Const.SELECTOR.SHOW_TIPS);
	        }
	    }]);

	    return State;
	}();

	exports.default = State;

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _Const = __webpack_require__(3);

	var _Beaker = __webpack_require__(4);

	var _Beaker2 = _interopRequireDefault(_Beaker);

	var _Basin = __webpack_require__(5);

	var _Basin2 = _interopRequireDefault(_Basin);

	var _Lang = __webpack_require__(2);

	var _Lang2 = _interopRequireDefault(_Lang);

	var _Volume = __webpack_require__(6);

	var _Utils = __webpack_require__(7);

	var _Utils2 = _interopRequireDefault(_Utils);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	 * 执行物体的下落动画
	 */
	var executeAnimate = function executeAnimate(layout, measureObj) {
	    var that = this,
	        container = that.container,
	        volumeText = that.getVolumeText(),
	        risingText = volumeText.risingText,
	        destinationText = volumeText.destinationText,
	        isTennisShow = volumeText.isTennisShow,
	        start,
	        pos,
	        $waterContainer = that.$waterContainer,
	        $obj = that.$cupContainer.find(measureObj.selector),
	        end,
	        upWaterHeight;

	    that.mContext.setIsAnimateFished(false);
	    disabledButton.apply(that);

	    if (layout == _Const.CONSTANT_ENUM.LAYOUT_LEFT) {
	        pos = container.left_pos_info;
	    } else if (layout == _Const.CONSTANT_ENUM.LAYOUT_MIDDLE) {
	        pos = container.middle_pos_info;
	    } else {
	        pos = container.right_pos_info;
	    }
	    start = pos.start;
	    if (start.left) {
	        var left = _Volume.VolumeHeight.updateMiddleLeftPos(measureObj, container, pos, that.container.selector);
	        $obj.css({
	            bottom: start.bottom + "em",
	            left: left + "em",
	            right: 0 + "em"
	        }).removeClass(_Const.SELECTOR.HIDE_DOM);
	    } else {
	        $obj.css({
	            left: '',
	            bottom: start.bottom + "em",
	            right: start.right + "em"
	        }).removeClass(_Const.SELECTOR.HIDE_DOM);
	    }
	    end = pos.end;
	    upWaterHeight = _Volume.VolumeHeight.computeCurrentHeightByMeasure(that.container.selector, that.container.currentVolume - measureObj.volume);

	    var key = that.container.currentVolume - _Const.CONSTANT_ENUM.ORIGIN_VOLUME;
	    if (isTennisShow) {
	        key += "p";
	    }

	    var waterHeight = _Utils2.default.getTargetUnitStyle($waterContainer, 'height', 'em');
	    var waterEndHeight = that.waterHeight[key];

	    var tween = this.addTween = new Spry.Tween({
	        keyframe: {
	            0: { bottom: start.bottom },
	            1000: {
	                bottom: upWaterHeight,
	                height: waterHeight,
	                onStart: function onStart() {
	                    //开始显示当前容积值
	                    that.$popBox.removeClass(_Const.SELECTOR.HIDE_DOM);
	                    that.$popBox.find(_Const.SELECTOR.CURRENT_VOLUME).text(risingText);
	                    if (container.currentVolume > _Const.CONSTANT_ENUM.ORIGIN_VOLUME + measureObj.volume) {
	                        that.$popBox.removeClass(_Const.SELECTOR.HIDE_DOM);
	                    }
	                }
	            },
	            2000: { bottom: end.bottom, height: waterEndHeight }
	        },
	        onUpdate: function onUpdate(val) {
	            $obj.css({ bottom: val.bottom + 'em' });
	            if (_typeof(val.height) !== ( true ? 'undefined' : _typeof(undefined))) {
	                $waterContainer.css({ height: val.height + 'em' });
	            }
	        },
	        duration: 2000
	    });

	    tween.play().then(function () {
	        that.$popBox.find(_Const.SELECTOR.CURRENT_VOLUME).text(destinationText);
	        updateButtonStyle.call(that);
	        that.mContext.setIsAnimateFished(true);
	    });
	};

	var disabledButton = function disabledButton() {
	    var that = this;
	    return;
	    that.$clearAll.addClass(_Const.SELECTOR.DISABLE_STYLE);
	    that.$viewChange.addClass(_Const.SELECTOR.DISABLE_STYLE);
	};

	var updateButtonStyle = function updateButtonStyle() {
	    var that = this,
	        $toolbar = that.mContext.$toolbar,
	        isHighLight = that.container.isHighLight,
	        length,
	        containerSelector = that.container.selector;

	    that.$clearAll.removeClass(_Const.SELECTOR.DISABLE_STYLE);
	    that.$viewChange.removeClass(_Const.SELECTOR.DISABLE_STYLE);

	    if (containerSelector === _Const.SELECTOR.CONTAINER_BEAKER) {
	        $toolbar.find(_Const.SELECTOR.CLEAR_ALL_BTN_BASIN).addClass(_Const.SELECTOR.HIDE_DOM);
	        $toolbar.find(_Const.SELECTOR.VIEW_CHANGE_BTN_BASIN).addClass(_Const.SELECTOR.HIDE_DOM);
	    } else {
	        $toolbar.find(_Const.SELECTOR.CLEAR_ALL_BTN_BEAKER).addClass(_Const.SELECTOR.HIDE_DOM);
	        $toolbar.find(_Const.SELECTOR.VIEW_CHANGE_BTN_BEAKER).addClass(_Const.SELECTOR.HIDE_DOM);
	    }
	    if (isHighLight) {
	        that.$deltaText.html(_Lang2.default.get("un-highlight"));
	    } else {
	        that.$deltaText.html(_Lang2.default.get("water-level-text"));
	    }
	    length = that.measureObjList.length;
	    if (length > 0) {
	        if (length === 1) {
	            if (that.measureObjList[0].selector === _Const.SELECTOR.PING_PANG) {
	                that.$clearAll.removeClass(_Const.SELECTOR.HIDE_DOM);
	                that.$viewChange.removeClass(_Const.SELECTOR.HIDE_DOM).addClass(_Const.SELECTOR.DISABLE_STYLE);
	                return;
	            }
	        }
	        that.$clearAll.removeClass(_Const.SELECTOR.HIDE_DOM);
	        that.$viewChange.removeClass(_Const.SELECTOR.HIDE_DOM).removeClass(_Const.SELECTOR.DISABLE_STYLE);
	    } else {
	        that.$clearAll.addClass(_Const.SELECTOR.HIDE_DOM);
	        that.$viewChange.addClass(_Const.SELECTOR.HIDE_DOM);
	    }
	    if (containerSelector !== that.mContext.getCurrentContainerSelector()) {
	        that.$clearAll.addClass(_Const.SELECTOR.HIDE_DOM);
	        that.$viewChange.addClass(_Const.SELECTOR.HIDE_DOM);
	    }
	};

	var hidePopDialog = function hidePopDialog() {
	    if (this.container.currentVolume === 200) {
	        this.mContext.$view.find(_Const.SELECTOR.CONFIRM_DIALOG).addClass(_Const.SELECTOR.HIDE_DOM);
	    }
	};

	/**
	 * 容器对象的定义
	 * visible: 容器是否可见
	 * measureObjList: 容器内已经放置的物体,
	 * container:具体的容器对象
	 */

	var Container = function () {
	    function Container(context, container, visible, measureObjList) {
	        _classCallCheck(this, Container);

	        this.mContext = context;
	        this.container = container;
	        this.visible = visible;
	        this.measureObjList = measureObjList || [];
	        this.mContext.setIsAnimateFished(true);

	        this.$cupContainer = this.mContext.$container.find(this.container.selector);
	        this.$waterContainer = this.$cupContainer.find(_Const.SELECTOR.WATER_CONTAINER);
	        this.$popBox = this.$cupContainer.find(_Const.SELECTOR.POP_BOX_DEST);
	        if (this.container.name === 'beaker') {
	            this.$clearAll = this.mContext.$toolbar.find(_Const.SELECTOR.CLEAR_ALL_BTN_BEAKER);
	            this.$viewChange = this.mContext.$toolbar.find(_Const.SELECTOR.VIEW_CHANGE_BTN_BEAKER);
	            this.$deltaText = this.mContext.$toolbar.find(_Const.SELECTOR.DELTA_TEXT_BEAKER);
	        } else {
	            this.$clearAll = this.mContext.$toolbar.find(_Const.SELECTOR.CLEAR_ALL_BTN_BASIN);
	            this.$viewChange = this.mContext.$toolbar.find(_Const.SELECTOR.VIEW_CHANGE_BTN_BASIN);
	            this.$deltaText = this.mContext.$toolbar.find(_Const.SELECTOR.DELTA_TEXT_BASIN);
	        }
	        this.waterHeight = this.container.name === 'beaker' ? _Const.WATER_HEIGHT.BREAKER : _Const.WATER_HEIGHT.FLUME;
	    }

	    /**
	     * 向容器内添加物体
	     * @param {Object} measureObj 被测量的物体
	     */


	    _createClass(Container, [{
	        key: 'addMeasureObj',
	        value: function addMeasureObj(measureObj) {
	            var that = this,
	                result = that.validateState(measureObj);
	            if (result) {
	                if (measureObj.selector === _Const.SELECTOR.PING_PANG && that.container.currentVolume < _Const.CONSTANT_ENUM.MAX_VOLUME) {
	                    that.measureObjList.push(measureObj);
	                    that.addPingPangAnimate();
	                    that.container.tennis = measureObj;
	                    return true;
	                }
	                if (that.addMeasureItem(measureObj)) {
	                    //物体添加成功，执行添加物体动画过程
	                    that.measureObjList.push(measureObj);
	                    that.addMeasureObjAnimate(measureObj);
	                    return true;
	                } else {
	                    return false;
	                }
	            }
	            return false;
	        }
	    }, {
	        key: 'isViewChangeValid',
	        value: function isViewChangeValid() {
	            var length = this.measureObjList.length;
	            if (length === 1) {
	                return this.measureObjList[0].selector !== _Const.SELECTOR.PING_PANG;
	            }

	            return length !== 0;
	        }

	        /**
	         * 将物体添加到容器
	         */

	    }, {
	        key: 'addMeasureItem',
	        value: function addMeasureItem(measureObj) {
	            var that = this;
	            if (!that.container.left) {
	                that.container.left = measureObj;
	                that.container.currentVolume += measureObj.volume;
	                //添加成功，直接返回
	                return true;
	            }

	            if (!that.container.middle) {
	                //中间列表为空，判断物体是否可以加入到中间
	                that.container.middle = measureObj;
	                that.container.currentVolume += measureObj.volume;
	                return true;
	            }

	            if (!that.container.right) {
	                //右侧列表为空，判断物体是否可以添加到中间
	                that.container.right = measureObj;
	                that.container.currentVolume += measureObj.volume;
	                return true;
	            }
	            return false;
	        }
	    }, {
	        key: 'validateState',


	        /**
	         * 判断是否能够向容器内添加物体
	         * @param {Object} measureObj
	         */
	        value: function validateState(measureObj) {
	            var that = this;
	            //乒乓球始终可以添加
	            var selector = measureObj.selector;
	            var $tennis = that.mContext.$container.find(that.container.selector).find(_Const.SELECTOR.PING_PANG);
	            if (selector === _Const.SELECTOR.PING_PANG) {
	                return that.container.currentVolume < that.container.maxVolume;
	            }
	            //判断乒乓球是否显示
	            if ($tennis.hasClass(_Const.SELECTOR.HIDE_DOM) || $tennis.hasClass(_Const.SELECTOR.TWINKLE_OUT)) {
	                return that.container.currentVolume + measureObj.volume <= that.container.maxVolume;
	            } else {
	                return that.container.currentVolume + measureObj.volume + 6 <= that.container.maxVolume;
	            }
	        }
	    }, {
	        key: 'removeAll',


	        /**
	         * 移除容器内的所有物体
	         */
	        value: function removeAll() {
	            var that = this;
	            that.mContext.setIsAnimateFished(false);
	            that.measureObjList = [];
	            that.container.reset();
	            updateButtonStyle.call(that);

	            if (this.addTween) {
	                this.addTween.pause();
	            }
	            if (this.removeTween) {
	                this.removeTween.pause();
	            }

	            var waterHeight = _Utils2.default.getTargetUnitStyle(that.$waterContainer, 'height', 'em');
	            var waterEndHeight = that.waterHeight['0'];
	            var itemSelector = [_Const.SELECTOR.SMALL_STONE, _Const.SELECTOR.BIG_STONE, _Const.SELECTOR.CYLINDER, _Const.SELECTOR.CONE, _Const.SELECTOR.PEAR, _Const.SELECTOR.PING_PANG];
	            var $items = that.$cupContainer.find(itemSelector.join(','));

	            var tween = new Spry.Tween({
	                keyframe: {
	                    '0': { opacity: 0, filter: 0 },
	                    '0.4s': { opacity: 0, filter: 0 },
	                    '0.8s': { opacity: 0, filter: 0 },
	                    '0.2s': { opacity: 1, filter: 100 },
	                    '0.6s': { opacity: 1, filter: 100 },
	                    '1s': {
	                        opacity: 1, filter: 1, height: waterHeight, onStart: function onStart() {
	                            that.$cupContainer.find(_Const.SELECTOR.RAISE_CONTAINER).addClass(_Const.SELECTOR.HIDE_DOM);
	                        }
	                    },
	                    '2s': {
	                        opacity: 0, filter: 0, height: waterEndHeight
	                    }
	                },
	                onUpdate: function onUpdate(val) {
	                    $items.css({ opacity: val.opacity, filter: ' alpha(opacity=' + val.filter + ')' });
	                    if (_typeof(val.height) !== ( true ? 'undefined' : _typeof(undefined))) {
	                        that.$waterContainer.css({ height: val.height + 'em' });
	                    }
	                },
	                duration: '2s'
	            });

	            tween.play().then(function () {
	                $items.css({ opacity: '', filter: '' }).addClass(_Const.SELECTOR.HIDE_DOM);
	                that.$popBox.addClass(_Const.SELECTOR.HIDE_DOM);

	                that.mContext.setIsAnimateFished(true);
	            });

	            return true;
	        }
	    }, {
	        key: 'remove',


	        /**
	         * 从容器中移除物体
	         */
	        value: function remove(measureObj) {
	            var that = this;
	            if (measureObj.selector === _Const.SELECTOR.PING_PANG) {
	                that.removePingPangAnimate();
	                that.removeObjectFromList(measureObj);
	                that.container.tennis = null;
	                return true;
	            }
	            that.removeMeasureObjAnimate(measureObj);
	            return true;
	        }
	    }, {
	        key: 'highLightWater',


	        /**
	         * 高亮显示容器中上升的水位
	         */
	        value: function highLightWater() {
	            var that = this;
	            if (that.container.currentVolume === _Const.CONSTANT_ENUM.ORIGIN_VOLUME) {
	                return;
	            }
	            that.mContext.setIsHighLightFinished(false);
	            disabledButton.apply(that);

	            var $item = that.$cupContainer.find(_Const.SELECTOR.RAISE_CONTAINER);

	            if ($item.hasClass(_Const.SELECTOR.HIDE_DOM)) {
	                $item.removeClass(_Const.SELECTOR.HIDE_DOM);
	                var tween = new Spry.Tween({
	                    keyframe: {
	                        '0s': { opacity: 1, filter: 100 },
	                        '0.4s': { opacity: 1, filter: 100 },
	                        '0.5s': { opacity: 0, filter: 0 },
	                        '0.2s': { opacity: 0, filter: 0 },
	                        '1s': { opacity: 1, filter: 1 }
	                    },
	                    onUpdate: function onUpdate(val) {
	                        $item.css({ opacity: val.opacity, filter: ' alpha(opacity=' + val.filter + ')' });
	                    },
	                    duration: '1s'
	                });

	                tween.play().then(function () {
	                    $item.css({ opacity: '', filter: '' });
	                    updateButtonStyle.call(that);
	                    that.mContext.setIsHighLightFinished(true);
	                });
	            } else {
	                var tween = new Spry.Tween({
	                    keyframe: {
	                        '0': { opacity: 0, filter: 0 },
	                        '0.4s': { opacity: 0, filter: 0 },
	                        '0.8s': { opacity: 0, filter: 0 },
	                        '0.2s': { opacity: 1, filter: 100 },
	                        '0.6s': { opacity: 1, filter: 100 },
	                        '1s': { opacity: 1, filter: 1 },
	                        '1.5s': { opacity: 0, filter: 0 }
	                    },
	                    onUpdate: function onUpdate(val) {
	                        $item.css({ opacity: val.opacity, filter: ' alpha(opacity=' + val.filter + ')' });
	                    },
	                    duration: '1.5s'
	                });

	                tween.play().then(function () {
	                    $item.css({ opacity: '', filter: '' }).addClass(_Const.SELECTOR.HIDE_DOM);
	                    updateButtonStyle.call(that);
	                    that.mContext.setIsHighLightFinished(true);
	                });
	            }
	        }
	    }, {
	        key: 'addMeasureObjAnimate',


	        /**
	         * 放入物体的执行动画
	         */
	        value: function addMeasureObjAnimate(measureObj) {
	            var that = this;
	            var layout = _Const.CONSTANT_ENUM.LAYOUT_LEFT;
	            if (that.container.middle && that.container.middle.selector === measureObj.selector) {
	                layout = _Const.CONSTANT_ENUM.LAYOUT_MIDDLE;
	            }
	            if (that.container.right && that.container.right.selector === measureObj.selector) {
	                layout = _Const.CONSTANT_ENUM.LAYOUT_RIGHT;
	            }
	            executeAnimate.call(that, layout, measureObj);
	        }
	    }, {
	        key: 'removeMeasureObjAnimate',


	        /**
	         * 删除物体的动画过程
	         */
	        value: function removeMeasureObjAnimate(measureObj) {
	            var that = this,
	                $item = that.$cupContainer.find(measureObj.selector),
	                $waterContainer = that.$waterContainer,
	                $popBox = that.$popBox,
	                delta;

	            that.mContext.setIsAnimateFished(false);
	            disabledButton.apply(that);
	            that.container.currentVolume -= measureObj.volume;

	            var volumeText = that.getVolumeText(),
	                isTennisShow = volumeText.isTennisShow,
	                risingText = volumeText.risingText,
	                destinationText = volumeText.destinationText;

	            if (that.container.left && that.container.left.selector === measureObj.selector) {
	                that.container.left = null;
	            } else if (that.container.middle && that.container.middle.selector === measureObj.selector) {
	                that.container.middle = null;
	            } else {
	                that.container.right = null;
	            }
	            delta = that.container.currentVolume - _Const.CONSTANT_ENUM.ORIGIN_VOLUME;
	            var key = isTennisShow ? delta + 'p' : delta;
	            var waterHeight = _Utils2.default.getTargetUnitStyle($waterContainer, 'height', 'em');
	            var waterEndHeight = that.waterHeight[key];
	            var keyframe = {
	                '0': { opacity: 0, filter: 0 },
	                '0.4s': { opacity: 0, filter: 0 },
	                '0.8s': { opacity: 0, filter: 0 },
	                '0.2s': { opacity: 1, filter: 100 },
	                '0.6s': { opacity: 1, filter: 100 },
	                '1s': { opacity: 1, filter: 1 },
	                '1.2s': {
	                    opacity: 0.8,
	                    filter: 0.8,
	                    height: waterHeight,
	                    onStart: function onStart() {
	                        $popBox.removeClass(_Const.SELECTOR.HIDE_DOM);
	                        $popBox.find(_Const.SELECTOR.CURRENT_VOLUME).text(risingText);
	                        $popBox.removeClass(_Const.SELECTOR.HIDE_DOM);
	                        if (that.container.currentVolume <= _Const.CONSTANT_ENUM.ORIGIN_VOLUME) {
	                            that.$cupContainer.find(_Const.SELECTOR.RAISE_CONTAINER).addClass(_Const.SELECTOR.HIDE_DOM);
	                            that.container.isHighLight = false;
	                        }
	                        hidePopDialog.call(that);
	                    }
	                },
	                '2s': {
	                    opacity: 0, filter: 0, height: waterHeight + (waterEndHeight - waterHeight) * 0.8
	                },
	                '2.2s': { opacity: 0, filter: 0, height: waterEndHeight }
	            };

	            var tween = this.removeTween = new Spry.Tween({
	                keyframe: keyframe,
	                onUpdate: function onUpdate(val) {
	                    $item.css({ opacity: val.opacity, filter: ' alpha(opacity=' + val.filter + ')' });
	                    if (_typeof(val.height) !== ( true ? 'undefined' : _typeof(undefined))) {
	                        $waterContainer.css({ height: val.height + 'em' });
	                    }
	                },
	                duration: '2.2s'
	            });

	            tween.play().then(function () {
	                if (delta > 0 || isTennisShow) {
	                    $popBox.find(_Const.SELECTOR.CURRENT_VOLUME).text(destinationText);
	                    that.container.destinationText = destinationText;
	                } else {
	                    $popBox.addClass(_Const.SELECTOR.HIDE_DOM);
	                }
	                updateButtonStyle.call(that);
	                $item.addClass(_Const.SELECTOR.HIDE_DOM);
	                $item.css({ opacity: '', filter: '' });
	                that.mContext.setIsAnimateFished(true);
	            });

	            that.removeObjectFromList(measureObj);
	            return true;
	        }
	    }, {
	        key: 'removeObjectFromList',
	        value: function removeObjectFromList(measureObj) {

	            var that = this,
	                i,
	                length = that.measureObjList.length,
	                item;
	            for (i = length - 1; i >= 0; i--) {
	                item = that.measureObjList[i];
	                if (item.selector === measureObj.selector) {
	                    that.measureObjList.splice(i, 1);
	                }
	            }
	        }
	    }, {
	        key: 'addPingPangAnimate',


	        /**
	         * 添加乒乓球动画
	         */
	        value: function addPingPangAnimate() {
	            var that = this,
	                $obj = that.$cupContainer.find(_Const.SELECTOR.PING_PANG),
	                top_start,
	                top_end,
	                height = _Volume.VolumeHeight.volumeToHeight(that.container.selector, that.container.currentVolume),
	                containerHeight,
	                $waterContainer = that.$waterContainer,
	                $popBox = that.$popBox;

	            that.mContext.setIsAnimateFished(false);
	            disabledButton.call(that);

	            $obj.addClass("top_center").removeClass(_Const.SELECTOR.HIDE_DOM);
	            if (that.container.selector === _Const.SELECTOR.CONTAINER_BEAKER) {
	                containerHeight = _Beaker2.default.middle_pos_info.start.bottom;
	                top_start = height - containerHeight - _Const.CONSTANT_ENUM.PING_PANG_HEIGHT;
	                top_end = _Beaker2.default.top;
	            } else {
	                containerHeight = _Basin2.default.middle_pos_info.start.bottom;
	                top_start = height - containerHeight - _Const.CONSTANT_ENUM.PING_PANG_HEIGHT;
	                top_end = _Basin2.default.top;
	            }

	            //计算物体下落到水面的高度
	            if (that.container.currentVolume > _Const.CONSTANT_ENUM.ORIGIN_VOLUME) {
	                $popBox.removeClass(_Const.SELECTOR.HIDE_DOM);
	            }

	            var waterHeight = _Utils2.default.getTargetUnitStyle($waterContainer, 'height', 'em');
	            var key = that.container.currentVolume - _Const.CONSTANT_ENUM.ORIGIN_VOLUME + "p";
	            var waterEndHeight = that.waterHeight[key];

	            var tween = this.addTween = new Spry.Tween({
	                keyframe: {
	                    '0s': { top: top_start },
	                    '0.8s': { top: top_start + (top_end - top_start) * 0.8, height: waterHeight },
	                    '1s': { top: top_end, height: waterHeight + (waterEndHeight - waterHeight) * 0.3 },
	                    '1.1s': { top: top_end, height: waterEndHeight }
	                },
	                onUpdate: function onUpdate(val) {
	                    $obj.css({ top: val.top + 'em' });
	                    if (_typeof(val.height) !== ( true ? 'undefined' : _typeof(undefined))) {
	                        $waterContainer.css({ height: val.height + 'em' });
	                    }
	                },
	                duration: '1.1s'
	            });

	            tween.play().then(function () {
	                $popBox.find(_Const.SELECTOR.CURRENT_VOLUME).text(that.getVolumeText().destinationText);
	                $popBox.removeClass(_Const.SELECTOR.HIDE_DOM);
	                updateButtonStyle.call(that);
	                that.mContext.setIsAnimateFished(true);
	            });
	        }
	    }, {
	        key: 'removePingPangAnimate',


	        /**
	         * 移除乒乓球动画
	         */
	        value: function removePingPangAnimate() {
	            var that = this,
	                $element = that.$cupContainer.find(_Const.SELECTOR.PING_PANG),
	                $popBox = that.$popBox,
	                $waterContainer = that.$waterContainer;

	            that.container.tennis = null;
	            that.mContext.setIsAnimateFished(false);
	            disabledButton.call(that);

	            //设置水位
	            var key = that.container.currentVolume - _Const.CONSTANT_ENUM.ORIGIN_VOLUME;
	            var waterHeight = _Utils2.default.getTargetUnitStyle($waterContainer, 'height', 'em');
	            var waterEndHeight = that.waterHeight[key];

	            var keyframe = {
	                '0': { opacity: 0, filter: 0, height: waterHeight },
	                '0.4s': { opacity: 0, filter: 0, height: waterHeight + (waterEndHeight - waterHeight) * 0.4 },
	                '0.8s': { opacity: 0, filter: 0, height: waterHeight + (waterEndHeight - waterHeight) * 0.8 },
	                '0.2s': { opacity: 1, filter: 100, height: waterHeight + (waterEndHeight - waterHeight) * 0.2 },
	                '0.6s': { opacity: 1, filter: 100, height: waterHeight + (waterEndHeight - waterHeight) * 0.6 },
	                '1s': { opacity: 1, filter: 1, height: waterEndHeight },
	                '1.5s': {
	                    opacity: 0.5,
	                    filter: 0.5,
	                    height: waterEndHeight,
	                    onStart: function onStart() {
	                        $element.addClass(_Const.SELECTOR.HIDE_DOM);
	                        $popBox.find(_Const.SELECTOR.CURRENT_VOLUME).text(that.getVolumeText().destinationText);
	                        if (that.container.currentVolume > _Const.CONSTANT_ENUM.ORIGIN_VOLUME) {
	                            $popBox.removeClass(_Const.SELECTOR.HIDE_DOM);
	                        } else {
	                            $popBox.addClass(_Const.SELECTOR.HIDE_DOM);
	                        }
	                    }
	                },
	                '2s': {
	                    opacity: 0, filter: 0, height: waterEndHeight
	                }
	            };

	            var tween = this.removeTween = new Spry.Tween({
	                keyframe: keyframe,
	                onUpdate: function onUpdate(val) {
	                    $element.css({ opacity: val.opacity, filter: ' alpha(opacity=' + val.filter + ')' });
	                    $waterContainer.css({ height: val.height + 'em' });
	                },
	                duration: '2s'
	            });

	            tween.play().then(function () {
	                $element.css({ opacity: '', filter: '' });
	                that.mContext.setIsAnimateFished(true);
	                updateButtonStyle.call(that);
	                hidePopDialog.call(that);
	            });
	        }
	    }, {
	        key: 'isMeasureObjInContainer',


	        /**
	         * 判断物体是否已经放入容器
	         */
	        value: function isMeasureObjInContainer(selector) {
	            var that = this,
	                i,
	                item,
	                length = that.measureObjList.length;
	            for (i = 0; i < length; i++) {
	                item = that.measureObjList[i];
	                if (item.selector === selector) {
	                    return true;
	                }
	            }
	            return false;
	        }
	    }, {
	        key: 'getVolumeText',


	        //根据容器的容积设置最终的水位数值
	        value: function getVolumeText() {
	            var that = this,
	                isTennisShow,
	                destinationText,
	                $tennis,
	                risingText;
	            destinationText = that.container.currentVolume;
	            $tennis = that.mContext.$container.find(that.container.selector).find(_Const.SELECTOR.PING_PANG);
	            if (!$tennis.hasClass(_Const.SELECTOR.HIDE_DOM)) {
	                isTennisShow = true;
	            }
	            if (isTennisShow) {
	                destinationText = that.container.currentVolume + 5;
	            }
	            risingText = "?";
	            if (that.container.selector === _Const.SELECTOR.CONTAINER_BASIN) {
	                risingText = "?";
	                destinationText = (that.container.currentVolume - _Const.CONSTANT_ENUM.ORIGIN_VOLUME) / 50 + 4;
	                if (isTennisShow) {
	                    destinationText = (that.container.currentVolume - _Const.CONSTANT_ENUM.ORIGIN_VOLUME) / 50 + 4 + 0.1;
	                }
	            }
	            return {
	                "destinationText": destinationText,
	                "risingText": risingText,
	                "isTennisShow": isTennisShow
	            };
	        }
	    }]);

	    return Container;
	}();

	exports.default = Container;

/***/ })
/******/ ]);]]></presenter><resources><file src="./resources/wood/images/bg_cup_bbg.png"/><file src="./resources/wood/images/bg_icon_cup_body.png"/><file src="./resources/wood/images/bg_icon_cup_top.png"/><file src="./resources/wood/images/bg_icon_cup.png"/><file src="./resources/wood/images/bg_icon_flume_bg_line.png"/><file src="./resources/wood/images/bg_icon_flume_bg_nl.png"/><file src="./resources/wood/images/bg_icon_flume_bg.png"/><file src="./resources/wood/images/bg_icon_flume_top.png"/><file src="./resources/wood/images/bg_water_b_l_rep.png"/><file src="./resources/wood/images/bg_water_b_light_b.png"/><file src="./resources/wood/images/bg_water_b_light_t.png"/><file src="./resources/wood/images/bg_water_b_light_t79.png"/><file src="./resources/wood/images/bg_water_b_rep.png"/><file src="./resources/wood/images/bg_water_b.png"/><file src="./resources/wood/images/bg_water_bot.png"/><file src="./resources/wood/images/bg_water_t.png"/><file src="./resources/wood/images/bg_watertank_b.png"/><file src="./resources/wood/images/bg_watertank_t.png"/><file src="./resources/wood/images/bg_watertank.png"/><file src="./resources/wood/images/buttons_bg.png"/><file src="./resources/wood/images/close_btn.png"/><file src="./resources/wood/images/icbg_flume_bg.png"/><file src="./resources/wood/images/icbg_flume_bg2.png"/><file src="./resources/wood/images/icon_popBack.png"/><file src="./resources/wood/images/icon_popTip.png"/><file src="./resources/wood/images/icons_b_stone_dis.png"/><file src="./resources/wood/images/icons_b_stone_nor.png"/><file src="./resources/wood/images/icons_cone_dis.png"/><file src="./resources/wood/images/icons_cone_nor.png"/><file src="./resources/wood/images/icons_cup_nor.png"/><file src="./resources/wood/images/icons_cylinder_dis.png"/><file src="./resources/wood/images/icons_cylinder_nor.png"/><file src="./resources/wood/images/icons_l_stone_dis.png"/><file src="./resources/wood/images/icons_l_stone_nor.png"/><file src="./resources/wood/images/icons_little_tick.png"/><file src="./resources/wood/images/icons_pear_dis.png"/><file src="./resources/wood/images/icons_pear_nor.png"/><file src="./resources/wood/images/icons_tennis_dis.png"/><file src="./resources/wood/images/icons_tennis_nor.png"/><file src="./resources/wood/images/icons_watertank_nor.png"/><file src="./resources/wood/images/pics_b_stone.png"/><file src="./resources/wood/images/pics_cone.png"/><file src="./resources/wood/images/pics_cylinder.png"/><file src="./resources/wood/images/pics_l_stone.png"/><file src="./resources/wood/images/pics_pear.png"/><file src="./resources/wood/images/pics_tennis.png"/><file src="./resources/wood/images/tips_pop_b_bg.png"/><file src="./resources/wood/images/tips_pop_lb_bg.png"/><file src="./resources/wood/images/tips_pop_lt_bg.png"/></resources></addon>