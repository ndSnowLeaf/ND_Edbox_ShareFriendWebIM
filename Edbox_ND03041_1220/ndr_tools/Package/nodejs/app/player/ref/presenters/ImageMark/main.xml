<?xml version='1.0' encoding='UTF-8' ?>
<addon id='ImageMark'>
<properties>

                <property name="questionId" displayName="ImageMark" type="string" isLocalized="false" />
                <property name="questionData" displayName="question_url" type="jsonFile" isLocalized="false" />

</properties>

<dependencies>

</dependencies>

<css>



</css>


<view>


</view>


<presenter>

<![CDATA[(function() {
    var Presenter = BasicPresenter.extend({
        /**
         * Presenter的初始化方法
         */
        $init: function() {
            this._super();
            this.model = [];
            this.componentSetting = {};
            //定义日志
            this.logger.appendHandler(function(message, context) {
                console.log(message);
            }, {
                level: Logger.DEBUG
            });
        },
        /****以下开始为icPlayer的生命周期方法*****/
        run: function(view, model) {
            $(view).width(0);
            $(view).height(0)
            this.presenterModel = model;
            var self = this;

            //适配颗粒中定义的数据
            self._adaptedOriginData(model);
            self.logger.debug("ImageMark model " + JSON.stringify(model));
            //构建组件配置
            self._configComponents();
            //加载启动器
            self.model.push({
                name: "Components",
                type: "json",
                text: JSON.stringify(self.componentSetting)
            });

            self.$requireComponent('ComponentLoader', self.model, $(view), {
                left: 0,
                top: 0,
                width: 0,
                height: 0
            });
        },
        destroy: function() {

        },
        /****以下开始为Presenter的私有方法*****/
        _adaptedOriginData: function(model) {
            var self = this;
            var timeLimit = 0;
            if (model.question_url.timer.timer_type == 'countdown') {
                timeLimit = parseInt(model.question_url.timer.time_minute) * 60 + parseInt(model.question_url
                    .timer.time_second)
            }
            //添加题型所需要的数据
            this.model.push({
                "name": "questionType",
                "type": "string",
                "value": "TextSlectRemake"
            });
            this.model.push({
                name: "TimerController",
                type: "string",
                value: JSON.stringify([{
                    name: "timer_type",
                    type: "string",
                    value: model.question_url.timer.timer_type
                }, {
                    name: "isPauseOnSubmit",
                    type: "boolean",
                    value: "false"
                }, {
                    name: "time_limit",
                    type: "string",
                    value: timeLimit
                }])
            });
            this.model.push({
                name: "InteractionSubmitButton",
                type: "string",
                value: JSON.stringify([{
                    name: "can_modify",
                    type: "string",
                    value: true
                }, {
                    name: "linkQuestionType",
                    type: "string",
                    value: "imagemark"
                }, {
                    name: "linkQuestionId",
                    type: "string",
                    value: model['question_id']
                }, {
                    name: "view_type",
                    type: "string",
                    value: 'new_em_button'
                }])
            });
            this.model.push({
                name: "InteractionTimer",
                type: "string",
                value: JSON.stringify([{
                    "name": "view_type",
                    "type": "string",
                    "value": "new_timer"
                }])
            });
            this.model.push({
                name: "ImageMarkRemake",
                type: "string",
                value: JSON.stringify([{
                    "name": "questionId",
                    "type": "string",
                    "value": model.question_id
                }, {
                    name: "questionData",
                    type: "json",
                    text: JSON.stringify(model.question_url)
                }])
            });

            this.model.push({
                name: "ObjectiveInteractionLayout",
                type: "string",
                value: JSON.stringify([{
                    name: "questionType",
                    type: "string",
                    value: "ImageMark"
                }, {
                    name: "specialTemplate",
                    type: "string",
                    value: "false"
                }])
            });
            this.model.push({
                name: "AnswerFlowController",
                type: "string",
                value: JSON.stringify([{
                    name: "showResultOnSubmit",
                    type: "string",
                    value: "false"
                }])
            });
            this.model.push({
                name: "ObjectiveStatisticsRemake",
                type: "string",
                value: JSON.stringify([])
            });
            this.model.push({
                name: 'ClassroomStatusController',
                type: 'string',
                value: JSON.stringify([{
                    name: 'questionId',
                    type: 'string',
                    value: model.question_id
                }])
            });
        },
        _configComponents: function() {
            //根据不同的运行场景定义需要加载的组件
            if (this.isPPTShell || this.isWeb) {
                //如果是PPTShell的场景
                this.componentSetting = {
                    controllers: [{
                        presenter: "InteractionStateRecoverFilter"
                    }, {
                        presenter: "I18nFilter"
                    }, {
                        presenter: "AnswerFlowController",
                        depends: [{
                            property: "TimerService",
                            presenter: "TimerController"
                        }]
                    }, {
                        presenter: "ObjectiveStatController"
                    }, {
                        presenter: 'ClassroomStatusController'
                    }],
                    layout: "ObjectiveInteractionLayout",
                    components: [{
                        presenter: "InteractionTimer",
                        renderTo: "TopLeftPanel"
                    }, {
                        presenter: "InteractionSubmitButton",
                        renderTo: "BottomPanel"
                    }, {
                        presenter: "ImageMarkRemake",
                        renderTo: "CenterPanel"
                    }, {
                        presenter: "ObjectiveStatisticsRemake",
                        renderTo: "StatisticsPanel"
                    }]
                };
            } else if (this.isStudent) {
                //如果是学生端Pad或Web的场景
                this.componentSetting = {
                    controllers: [{
                        presenter: "InteractionStateRecoverFilter"
                    }, {
                        presenter: "I18nFilter"
                    }, {
                        presenter: "AnswerFlowController",
                        depends: [{
                            property: "TimerService",
                            presenter: "TimerController"
                        }]
                    }, {
                        presenter: "AnswerProgressController"
                    }],
                    layout: "ObjectiveInteractionLayout",
                    components: [{
                        presenter: "InteractionTimer",
                        renderTo: "TopLeftPanel"
                    }, {
                        presenter: "InteractionSubmitButton",
                        renderTo: "TopRightPanel"
                    }, {
                        presenter: "ImageMarkRemake",
                        renderTo: "CenterPanel"
                    }]
                };
            }
        }
    }, "ImageMark");

    window.AddonImageMark_create = function() {
        return new Presenter();
    }
})();

]]>

</presenter>


<resources>

<file src='./resources/images/bg_option.jpg' />
<file src='./resources/locations/bo/lang.json' />
<file src='./resources/locations/bo/lang.po' />
<file src='./resources/locations/bo_CN/lang.json' />
<file src='./resources/locations/bo_CN/lang.po' />
<file src='./resources/locations/zh/lang.json' />
<file src='./resources/locations/zh/lang.po' />
<file src='./resources/locations/zh_CN/lang.json' />
<file src='./resources/locations/zh_CN/lang.po' />


</resources>

</addon>