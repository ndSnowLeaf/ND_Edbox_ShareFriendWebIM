<?xml version='1.0' encoding='UTF-8' ?>
<addon id='MarkPoint'>
<properties>

                <property name="title" type="string" />
                <property name="confuse_answer" type="string" />
                <property name="content" type="string" />
                <property name="question_id" type="string" />
                <property name="timer_type" type="string" />
                <property name="timer_time" type="string" />

</properties>

<dependencies>

<jsDependency>
    <javaScript  name="jquery-ui-touch-punch" version="0.2.3.2" />
</jsDependency>


</dependencies>

<css>



</css>


<view>


</view>


<presenter>

<![CDATA[(function() {
    var Presenter = BasicPresenter.extend({
        // getQuestionInfo: function () {
        //     return {
        //         id: this.presenterModel.question_id,
        //         type_code: 'compare',
        //         type_name: '比大小',
        //         url: this.presenterModel.question_id,
        //         dispatchOnly: true
        //     }
        // },
        /**
         * Presenter的初始化方法
         * @private
         */
        $init: function() {
            this._super();
            this.model = [];
            this.componentSetting = {};
            //定义日志
            this.logger.appendHandler(function(message, context) {
                console.log(message);
            }, { level: Logger.DEBUG });
        },
        /****以下开始为icPlayer的生命周期方法*****/
        run: function(view, model) {
            //将View的width和height设置为0
            view.style['width'] = 0;
            view.style['height'] = 0;
            this.presenterModel = model;
            var self = this;
            //适配颗粒中定义的数据
            self._adaptedOriginData(model);
            self.logger.debug("MarkPoint model " + JSON.stringify(model));
            //构建组件配置
            self._configComponents();
            //加载启动器
            self.model.push({
                name: "Components",
                type: "json",
                text: JSON.stringify(self.componentSetting)
            });
            return self.$requireComponent('ComponentLoader', self.model, $(view), {
                left: 0,
                top: 0,
                width: 0,
                height: 0
            });

        },
        destroy: function() {

        },
        /****以下开始为Presenter的私有方法*****/
        _adaptedOriginData: function(model) {
            var self = this;
            //添加题型所需要的数据
            this.model.push({
                "name": "questionType",
                "type": "string",
                "value": "MarkPointRemake"
            });
            this.model.push({
                name: "TimerController",
                type: "string",
                value: JSON.stringify([{
                        name: "timer_type",
                        type: "string",
                        value: model.timer_type
                    },
                    {
                        name: "time_limit",
                        type: "string",
                        value: model.time_limit
                    },
                    {
                        name: "isPauseOnSubmit",
                        type: "boolean",
                        value: "false"
                    }
                ])
            });
            this.model.push({
                name: "InteractionSubmitButton",
                type: "string",
                value: JSON.stringify([{
                        name: "can_modify",
                        type: "string",
                        value: true
                    },
                    {
                        name: "linkQuestionType",
                        type: "string",
                        value: "compare"
                    },
                    {
                        name: "linkQuestionId",
                        type: "string",
                        value: model['question_id']
                    },
                    {
                        name: "view_type",
                        type: "string",
                        value: "new_em_button"
                    }
                ])
            });
            this.model.push({
                name: "InteractionTimer",
                type: "string",
                value: JSON.stringify([{
                    "name": "view_type",
                    "type": "string",
                    "value": "new_timer"
                }])
            });
            this.model.push({
                name: "MarkPointRemake",
                type: "string",
                value: JSON.stringify([{
                    "name": "content",
                    "type": "string",
                    "value": model.content
                }, {
                    name: "confuse_answer",
                    type: "string",
                    value: model.confuse_answer
                }, {
                    name: "question_id",
                    type: "string",
                    value: model.question_id
                }, {
                    name: "title",
                    type: "string",
                    value: model.title
                }])
            });

            this.model.push({
                name: "ObjectiveInteractionLayout",
                type: "string",
                value: JSON.stringify([{
                    name: "questionType",
                    type: "string",
                    value: "MarkPoint"
                }, {
                    name: "specialTemplate",
                    type: "string",
                    value: "false"
                }])
            });
            this.model.push({
                name: "AnswerFlowController",
                type: "string",
                value: JSON.stringify([{
                    name: "showResultOnSubmit",
                    type: "string",
                    value: "false"
                }])
            });
            this.model.push({
                name: "ObjectiveStatisticsRemake",
                type: "string",
                value: JSON.stringify([])
            });
            this.model.push({
                name: 'ClassroomStatusController',
                type: 'string',
                value: JSON.stringify([{
                    name: 'questionId',
                    type: 'string',
                    value: model.question_id
                }])
            });
        },
        _configComponents: function() {
            //根据不同的运行场景定义需要加载的组件
            if (this.isPPTShell || this.currentRuntime == icCreatePlayer.RUNTIME.WEB) {
                //如果是PPTShell或Web的场景
                this.componentSetting = {
                    controllers: [{
                            presenter: "InteractionStateRecoverFilter"
                        },
                        {
                            presenter: 'I18nFilter'
                        },
                        {
                            presenter: "AnswerFlowController",
                            depends: [{
                                property: "TimerService",
                                presenter: "TimerController"
                            }]
                        },
                        {
                            presenter: "ObjectiveStatController"
                        }, {
                            presenter: 'ClassroomStatusController'
                        }
                    ],
                    layout: "ObjectiveInteractionLayout",
                    components: [
                        { presenter: "InteractionTimer", renderTo: "TopLeftPanel" },
                        { presenter: "InteractionSubmitButton", renderTo: "BottomPanel" },
                        { presenter: "MarkPointRemake", renderTo: "CenterPanel" },
                        { presenter: "ObjectiveStatisticsRemake", renderTo: "StatisticsPanel" }
                    ]
                };
            } else if (this.currentRuntime == icCreatePlayer.RUNTIME.STUDENT_MOBILE) {
                //如果是学生端Pad
                this.componentSetting = {
                    controllers: [{
                            presenter: "InteractionStateRecoverFilter"
                        },
                        {
                            presenter: 'I18nFilter'
                        },
                        {
                            presenter: "AnswerFlowController",
                            depends: [{
                                property: "TimerService",
                                presenter: "TimerController"
                            }]
                        },
                        {
                            presenter: "AnswerProgressController"
                        }
                    ],
                    layout: "ObjectiveInteractionLayout",
                    components: [
                        { presenter: "InteractionTimer", renderTo: "TopLeftPanel" },
                        { presenter: "InteractionSubmitButton", renderTo: "TopRightPanel" },
                        { presenter: "MarkPointRemake", renderTo: "CenterPanel" }
                    ]
                };
            }
        }
    }, "Compare");

    window.AddonMarkPoint_create = function() {
        return new Presenter();
    }
})();

]]>

</presenter>


<resources>


</resources>

</addon>