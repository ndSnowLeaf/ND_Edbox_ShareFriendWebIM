<?xml version='1.0' encoding='UTF-8'?>
<addon id="templateid"><properties><property name="question_id" displayName="题目ID" type="string" isLocalized="undefined"/><property name="question_url" displayName="undefined" type="jsonFile" isLocalized="false"/></properties><dependencies><jsDependency><javaScript name="tools_common" version="1.3.0"/><javaScript name="snap_svg" version="1.0.0"/></jsDependency></dependencies><css><![CDATA[.exam_skin_wood .polarcoordinate_wrapper{position:relative;width:100%;height:100%;background-color:#bfd3e2;text-align:center;overflow:hidden}.exam_skin_wood .polarcoordinate_wrapper .pcs_main{position:relative;width:100%;height:100%;padding:2.66667em 12.83333em 0 4em}.exam_skin_wood .polarcoordinate_wrapper .pcs_main svg *{-webkit-tap-highlight-color:transparent}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset{position:relative;width:100%;height:100%;background-color:#b8cdde}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2,.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_3,.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_4{display:none}.exam_skin_wood .polarcoordinate_wrapper .pcs_main_content{position:relative;width:100%;height:100%;padding-bottom:5.75em;overflow:hidden}.exam_skin_wood .polarcoordinate_wrapper .pcs_main_toolbar{position:absolute;left:0;bottom:0;width:100%;height:5.75em;z-index:100;background-color:#cfdee9;text-align:center}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_1 .pcs_com_btns{padding:0 .875em;margin:0 .66667em}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_1 .svg_container{position:relative;width:100%;height:100%;overflow:hidden}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_1 .svg_container svg{width:100%;height:100%}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_1 .pcs_over_range{position:absolute;left:50%;top:40%;width:33.58333em;height:20.16667em;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%);background:rgba(47,47,47,.81);border-radius:.5em;padding:3em 1.875em;z-index:500}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_1 .pcs_over_range .tip_txt{font-size:2em;line-height:2em;text-align:left;color:#fff}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_1 .pcs_over_range .tip_btn{position:absolute;left:50%;bottom:1.83333em;-webkit-transform:translate(-50%);transform:translate(-50%);padding:0 1.33333em}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_btns_group{display:inline-block;margin-top:1.3em}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_com_btns{float:left;margin:0;min-width:11.16667em}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_coordinate_btn{border-radius:.33333em 0 0 .33333em;margin-right:-1px}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_point_btn{border-radius:0 .33333em .33333em 0}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .svg_degA_txt{top:10%;left:10%;color:#04740b}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .svg_degA_txt .pcs_pi{font-size:4.375em}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .svg_degA_txt .pcs_numerator:after{background-color:#04740b}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .svg_degB_txt{top:30%;left:10%;color:#e06313}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .svg_degB_txt .pcs_pi{font-size:4.375em}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .svg_degB_txt .pcs_numerator:after{background-color:#e06313}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .svg_degC_txt{top:50%;left:10%;color:#cb1f1f}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .svg_degC_txt .pcs_pi{font-size:4.375em}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .svg_degC_txt .pcs_numerator:after{background-color:#cb1f1f}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .svg_degD_txt{top:70%;left:10%;color:#8300de}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .svg_degD_txt .pcs_pi{font-size:4.375em}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .svg_degD_txt .pcs_numerator:after{background-color:#8300de}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_polar_to_point{position:relative;width:100%;height:100%}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_polar_to_point .pcs_points_list{width:100%;height:34.16667em}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_polar_to_point .pcs_point{height:6.70833em;padding:1.75em 1.25em 0 0;margin:1.33333em 0}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_polar_to_point .pcs_point:last-child{margin:0}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_polar_to_point .pcs_point .pcs_show_btn{position:relative;top:-.25em;display:inline-block;width:2.5em;height:1.83333em;font-size:1em;background:url(resources/wood/images/preset2_eye_2.png) 0 0;background-size:100% auto;cursor:pointer;vertical-align:middle}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_polar_to_point .pcs_point .pcs_show_btn.ui_btn_active{background:url(resources/wood/images/preset2_eye_1.png) 0 0;background-size:100% auto}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_polar_to_point .pcs_point .pcs_inputs{position:relative;display:inline-block;width:21.04167em;height:3.20833em;background:url(resources/wood/images/preset_2_points.png) 0 0;background-size:100% auto;vertical-align:middle}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_polar_to_point .pcs_point .pcs_input_1{position:absolute;left:3.83333em;top:-1.70833em;width:5.04167em;height:6.58333em;background:-webkit-linear-gradient(top,#f3f4f3,#fff);background:linear-gradient(180deg,#f3f4f3,#fff);border:1px solid #686868;border-radius:.41667em;box-shadow:inset 0 0 .20833em rgba(0,0,0,.4);padding-right:2.08333em}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_polar_to_point .pcs_point .pcs_input_1 span:first-child{display:inline-block;font:700 3.54167em Times New Roman;color:#4d4d4d;margin-top:.29167em}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_polar_to_point .pcs_point .pcs_input_1 span:last-child{position:absolute;right:.5em;top:50%;-webkit-transform:translateY(-50%);transform:translateY(-50%);width:1.91667em;height:1.91667em;background:-webkit-linear-gradient(bottom,#dfdfdf,#f2f2f2);background:linear-gradient(0deg,#dfdfdf,#f2f2f2);border:1px solid #686868;border-radius:.41667em;cursor:pointer}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_polar_to_point .pcs_point .pcs_input_1 span:last-child:after{content:"";position:absolute;left:50%;top:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%);width:1em;height:1em;background:url(resources/wood/images/arrow_icon.png) no-repeat;background-size:2.41667em auto}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_polar_to_point .pcs_point .pcs_input_1 span:last-child.ui_btn_active,.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_polar_to_point .pcs_point .pcs_input_1 span:last-child:active{background:#88c4c6;border:1px solid #397274}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_polar_to_point .pcs_point .pcs_input_1 span:last-child.ui_btn_active:after,.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_polar_to_point .pcs_point .pcs_input_1 span:last-child:active:after{background-position:0 -1.41667em}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_polar_to_point .pcs_point .pcs_input_1.up span:last-child:after{background-position:-1.41667em 0}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_polar_to_point .pcs_point .pcs_input_1.up span:last-child.ui_btn_active,.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_polar_to_point .pcs_point .pcs_input_1.up span:last-child:active{background:#88c4c6;border:1px solid #397274}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_polar_to_point .pcs_point .pcs_input_1.up span:last-child.ui_btn_active:after,.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_polar_to_point .pcs_point .pcs_input_1.up span:last-child:active:after{background-position:-1.41667em -1.41667em}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_polar_to_point .pcs_point .pcs_input_2{position:absolute;left:10.5em;top:-1.70833em;width:9em;height:6.58333em;padding-right:2.08333em;color:#4d4d4d;background:-webkit-linear-gradient(top,#f3f4f3,#fff);background:linear-gradient(180deg,#f3f4f3,#fff);border:1px solid #686868;border-radius:.41667em;box-shadow:inset 0 0 .20833em rgba(0,0,0,.4)}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_polar_to_point .pcs_point .pcs_input_2 .pcs_numerator{display:block;position:relative;top:-1.75em;padding:0 .29167em}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_polar_to_point .pcs_point .pcs_input_2 .pcs_numerator:after{content:"";position:absolute;left:.41667em;top:82.5%;width:5.83333em;height:.20833em;background-color:#4d4d4d}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_polar_to_point .pcs_point .pcs_input_2.pcs_integer .pcs_numerator{top:-.41667em;height:6.25em;line-height:6.25em}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_polar_to_point .pcs_point .pcs_input_2.pcs_integer .pcs_numerator:after{height:0}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_polar_to_point .pcs_point .pcs_input_2.pcs_integer .pcs_denominator{display:none}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_polar_to_point .pcs_point .pcs_input_2 .pcs_denominator{display:block;position:relative;top:-3.25em}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_polar_to_point .pcs_point .pcs_input_2 span{font:700 3.54167em Times New Roman;vertical-align:baseline}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_polar_to_point .pcs_point .pcs_input_2 .pcs_pi{font:italic 5.20833em Times New Roman;vertical-align:baseline}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_polar_to_point .pcs_point .pcs_input_2 .pcs_turn{position:absolute;right:.5em;top:50%;-webkit-transform:translateY(-50%);transform:translateY(-50%);width:1.91667em;height:1.91667em;background:-webkit-linear-gradient(bottom,#dfdfdf,#f2f2f2);background:linear-gradient(0deg,#dfdfdf,#f2f2f2);border:1px solid #686868;border-radius:.41667em;cursor:pointer}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_polar_to_point .pcs_point .pcs_input_2 .pcs_turn:after{content:"";position:absolute;left:50%;top:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%);width:1em;height:1em;background:url(resources/wood/images/arrow_icon.png) no-repeat;background-size:2.41667em auto}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_polar_to_point .pcs_point .pcs_input_2 .pcs_turn.ui_btn_active,.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_polar_to_point .pcs_point .pcs_input_2 .pcs_turn:active{background:#88c4c6;border:1px solid #397274}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_polar_to_point .pcs_point .pcs_input_2 .pcs_turn.ui_btn_active:after,.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_polar_to_point .pcs_point .pcs_input_2 .pcs_turn:active:after{background-position:0 -1.41667em}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_polar_to_point .pcs_point .pcs_input_2.up .pcs_turn:after{background-position:-1.41667em 0}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_polar_to_point .pcs_point .pcs_input_2.up .pcs_turn.ui_btn_active,.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_polar_to_point .pcs_point .pcs_input_2.up .pcs_turn:active{background:#88c4c6;border:1px solid #397274}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_polar_to_point .pcs_point .pcs_input_2.up .pcs_turn.ui_btn_active:after,.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_polar_to_point .pcs_point .pcs_input_2.up .pcs_turn:active:after{background-position:-1.41667em -1.41667em}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_polar_to_point .pcs_random{position:absolute;right:3.25em;bottom:.5em;padding:0 .83333em;min-width:8.66667em}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_polar_to_point .pcs_random.btns-primary:active{background:-webkit-linear-gradient(bottom,#76b8ba,#89c5c7);background:linear-gradient(0deg,#76b8ba 0,#89c5c7)}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_polar_to_point .pcs_random.btns-primary:active .btns-primary-txt{color:#fff}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_polar_to_point .pcs_random.btns-primary:active .btns-primary-icon{background-image:url(resources/wood/images/com_eye_2.png)}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_polar_to_point .pcs_point_a .pcs_show_btn{background:url(resources/wood/images/preset2_eye_2.png) 0 0;background-size:100% auto}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_polar_to_point .pcs_point_a .pcs_inputs{background:url(resources/wood/images/preset_2_points.png) 0 0;background-size:100% auto}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_polar_to_point .pcs_point_b .pcs_show_btn{background:url(resources/wood/images/preset2_eye_2.png) 0 -2.25em;background-size:100% auto}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_polar_to_point .pcs_point_b .pcs_inputs{background:url(resources/wood/images/preset_2_points.png) 0 -3.625em;background-size:100% auto}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_polar_to_point .pcs_point_c .pcs_show_btn{background:url(resources/wood/images/preset2_eye_2.png) 0 -4.5em;background-size:100% auto}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_polar_to_point .pcs_point_c .pcs_inputs{background:url(resources/wood/images/preset_2_points.png) 0 -7.25em;background-size:100% auto}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_polar_to_point .pcs_point_d .pcs_show_btn{background:url(resources/wood/images/preset2_eye_2.png) 0 -6.75em;background-size:100% auto}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_polar_to_point .pcs_point_d .pcs_inputs{background:url(resources/wood/images/preset_2_points.png) 0 -10.875em;background-size:100% auto}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_point_to_polar{position:relative;width:100%;height:100%;display:none}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_point_to_polar .pcs_points_list{width:100%;height:34.16667em;padding-left:2em}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_point_to_polar .pcs_point{height:6.70833em;padding-top:1.75em;margin:1.33333em 0}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_point_to_polar .pcs_point:last-child{margin:0}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_point_to_polar .pcs_point .pcs_show_btn{position:relative;top:-.25em;display:inline-block;width:2.5em;height:1.83333em;font-size:1em;background:url(resources/wood/images/preset2_eye_2.png) 0 0;background-size:100% auto;cursor:pointer;vertical-align:middle}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_point_to_polar .pcs_point .pcs_show_btn.ui_btn_active{background:url(resources/wood/images/preset2_eye_1.png) 0 0;background-size:100% auto}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_point_to_polar .pcs_point .pcs_inputs_letter{position:relative;vertical-align:middle;top:-.0625em;margin-right:.09167em;font:italic 3.54167em Times New Roman}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_point_to_polar .pcs_point .pcs_inputs{position:relative;vertical-align:middle;display:inline-block;width:11.95833em;height:3.20833em;background:url(resources/wood/images/preset_2_2_points.png) 0 0;background-size:100% auto;margin-left:-.25em}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_point_to_polar .pcs_point .pcs_input_1{position:absolute;left:.91667em;top:-1.58333em;width:2.95833em;height:6.58333em}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_point_to_polar .pcs_point .pcs_input_1 span:first-child{display:inline-block;font:700 3.54167em Times New Roman;margin-top:.29167em}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_point_to_polar .pcs_point .pcs_input_2{position:absolute;left:4.58333em;top:-1.58333em;width:6.91667em;height:6.58333em}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_point_to_polar .pcs_point .pcs_input_2 .pcs_numerator{display:block;position:relative;top:-1.75em;padding:0 .29167em}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_point_to_polar .pcs_point .pcs_input_2 .pcs_numerator:after{content:"";position:absolute;left:.41667em;top:82.5%;width:5.83333em;height:.20833em}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_point_to_polar .pcs_point .pcs_input_2.pcs_integer .pcs_numerator{top:-.41667em;height:6.25em;line-height:6.25em}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_point_to_polar .pcs_point .pcs_input_2.pcs_integer .pcs_numerator:after{height:0}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_point_to_polar .pcs_point .pcs_input_2.pcs_integer .pcs_denominator{display:none}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_point_to_polar .pcs_point .pcs_input_2 .pcs_denominator{display:block;position:relative;top:-3.25em}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_point_to_polar .pcs_point .pcs_input_2 span{font:700 3.54167em Times New Roman;vertical-align:baseline}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_point_to_polar .pcs_point .pcs_input_2 .pcs_pi{font:italic 5.20833em Times New Roman;vertical-align:baseline}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_point_to_polar .pcs_random{position:absolute;right:3.25em;bottom:.5em;padding:0 .83333em;min-width:8.66667em}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_point_to_polar .pcs_random.btns-primary:active{background:-webkit-linear-gradient(bottom,#76b8ba,#89c5c7);background:linear-gradient(0deg,#76b8ba 0,#89c5c7)}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_point_to_polar .pcs_random.btns-primary:active .btns-primary-txt{color:#fff}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_point_to_polar .pcs_random.btns-primary:active .btns-primary-icon{background-image:url(resources/wood/images/com_eye_2.png)}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_point_to_polar .pcs_point_a{color:#04740b;margin-top:1.08333em}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_point_to_polar .pcs_point_a .pcs_show_btn{background:url(resources/wood/images/preset2_eye_2.png) 0 0;background-size:100% auto}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_point_to_polar .pcs_point_a .pcs_inputs{background:url(resources/wood/images/preset_2_2_points.png) 0 0;background-size:100% auto}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_point_to_polar .pcs_point_a .pcs_numerator:after{background-color:#04740b}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_point_to_polar .pcs_point_b{color:#e06313}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_point_to_polar .pcs_point_b .pcs_show_btn{background:url(resources/wood/images/preset2_eye_2.png) 0 -2.25em;background-size:100% auto}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_point_to_polar .pcs_point_b .pcs_inputs{background:url(resources/wood/images/preset_2_2_points.png) 0 -3.625em;background-size:100% auto}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_point_to_polar .pcs_point_b .pcs_numerator:after{background-color:#e06313}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_point_to_polar .pcs_point_c{color:#cb1f1f}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_point_to_polar .pcs_point_c .pcs_show_btn{background:url(resources/wood/images/preset2_eye_2.png) 0 -4.5em;background-size:100% auto}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_point_to_polar .pcs_point_c .pcs_inputs{background:url(resources/wood/images/preset_2_2_points.png) 0 -7.25em no-repeat;background-size:100% auto}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_point_to_polar .pcs_point_c .pcs_numerator:after{background-color:#cb1f1f}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_point_to_polar .pcs_point_d{color:#8300de}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_point_to_polar .pcs_point_d .pcs_show_btn{background:url(resources/wood/images/preset2_eye_2.png) 0 -6.75em no-repeat;background-size:100% auto}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_point_to_polar .pcs_point_d .pcs_inputs{background:url(resources/wood/images/preset_2_2_points.png) 0 -10.875em no-repeat;background-size:100% auto}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_point_to_polar .pcs_point_d .pcs_numerator:after{background-color:#8300de}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_left_area{width:100%;height:100%;padding-right:26.08333em}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_right_area{position:absolute;right:0;top:0;width:26.08333em;height:100%}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_drop_numselect_1{white-space:normal;z-index:100;position:absolute;pointer-events:none}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_drop_numselect_1.show_1{top:8.04167em;right:13.91667em}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_drop_numselect_1.show_2{top:16.08333em;right:13.91667em}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_drop_numselect_1.show_3{top:8.08333em;right:13.91667em}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_drop_numselect_1.show_4{top:16.125em;right:13.91667em}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_drop_numselect_1 .pcs_numselect_wrap{width:13.54167em;border:1px solid #686868;padding:.58333em .5em;background-color:#ebebeb;display:inline-block;pointer-events:auto;text-align:left}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_drop_numselect_1.hide_dom{display:none}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_drop_numselect_1 .pcs_num_btn{display:inline-block;width:3.66667em;height:2.25em;float:left;line-height:2.25em;color:#4d4d4d;background:#fff;text-align:center;border-radius:.16667em;border:1px solid #9c9c9c;margin:.20833em;cursor:pointer}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_drop_numselect_1 .pcs_num_btn.ui_btn_active,.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_drop_numselect_1 .pcs_num_btn:active{background:#31b0ee;color:#fff;border-color:#007ab6}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_drop_numselect_1 .pcs_num_btn span{font:700 1.5em Times New Roman}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_drop_numselect_1 .pcs_num_btn.click_disabled{cursor:default;color:#9ca2a6;background:#c7d0d6;border-color:#9c9c9c}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_drop_numselect_2{white-space:normal;z-index:100;position:absolute;pointer-events:none}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_drop_numselect_2.show_1{top:8.04167em;right:3.25em}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_drop_numselect_2.show_2{top:16.08333em;right:3.25em}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_drop_numselect_2.show_3{top:3.79167em;right:3.29167em}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_drop_numselect_2.show_4{top:11.83333em;right:3.29167em}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_drop_numselect_2 .pcs_numselect_wrap{width:33.95833em;border:1px solid #686868;padding:.58333em .5em;background-color:#ebebeb;display:inline-block;pointer-events:auto;text-align:left}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_drop_numselect_2.hide_dom{display:none}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_drop_numselect_2 .pcs_num_btn{display:inline-block;width:3.66667em;height:3.66667em;color:#4d4d4d;background:#fff;text-align:center;float:left;border-radius:.16667em;border:1px solid #9c9c9c;margin:.20833em;cursor:pointer;vertical-align:top;overflow:hidden}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_drop_numselect_2 .pcs_num_btn .pcs_numerator{position:relative;top:-.75em;padding:0 .29167em}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_drop_numselect_2 .pcs_num_btn .pcs_numerator:after{content:"";position:absolute;left:.29167em;top:85%;width:2.95833em;height:.125em;background-color:#4d4d4d}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_drop_numselect_2 .pcs_num_btn .pcs_integer{top:0;height:3.66667em;line-height:3.66667em}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_drop_numselect_2 .pcs_num_btn .pcs_integer:after{height:0}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_drop_numselect_2 .pcs_num_btn .pcs_denominator{position:relative;top:-1.08333em}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_drop_numselect_2 .pcs_num_btn.ui_btn_active,.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_drop_numselect_2 .pcs_num_btn:active{background:#31b0ee;color:#fff;border-color:#007ab6}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_drop_numselect_2 .pcs_num_btn.ui_btn_active .pcs_numerator:after,.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_drop_numselect_2 .pcs_num_btn:active .pcs_numerator:after{background-color:#fff}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_drop_numselect_2 .pcs_num_btn.click_disabled{cursor:default;color:#9ca2a6;background:#c7d0d6;border-color:#9c9c9c}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_drop_numselect_2 .pcs_num_btn.click_disabled .pcs_numerator:after{background-color:#9ca2a6}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_drop_numselect_2 .pcs_num_btn span{font:700 1.5em Times New Roman;vertical-align:baseline}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_2 .pcs_drop_numselect_2 .pcs_num_btn .pcs_pi{font:italic 2.5em Times New Roman;vertical-align:baseline}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_3{position:relative;padding:2.33333em 2.91667em 0}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_3 .pcs_operate_1,.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_3 .pcs_operate_2,.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_3 .pcs_operate_3{padding:0 .91667em}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_3 .pcs_operate_1 .pcs_operate_img{display:block;width:2.875em;height:2.75em;border:none;margin:.66667em auto .16667em;background:url(resources/wood/images/rectangular_sys.png) no-repeat;background-size:100% 100%}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_3 .pcs_operate_2 .pcs_operate_img{display:block;width:3.45833em;height:2.875em;border:none;margin:.625em auto .08333em;background:url(resources/wood/images/polar_sys.png) no-repeat;background-size:100% 100%}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_3 .pcs_operate_2 .pcs_operate_txt{color:#292525}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_3 .pcs_operate_bg_2{position:absolute;z-index:10;left:0;top:0;width:6.25em;height:100%;border:1px solid #fff;background:-webkit-linear-gradient(top,#dedede,#f4f4f4);background:linear-gradient(180deg,#dedede,#f4f4f4);box-shadow:inset 0 .08333em .75em rgba(0,0,0,.15)}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_3 .pcs_com_btns{padding:0 .875em;margin:0 .66667em}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_3 .pcs_mid_wrap{position:relative;width:56.91667em;height:31.91667em;margin:0 auto;top:46%;-webkit-transform:translateY(-50%);transform:translateY(-50%)}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_3 .svg_container{position:absolute;z-index:20;width:56.91667em;height:31.91667em;padding:.29167em}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_3 .pcs_bg_layout{position:absolute;z-index:10;width:56.91667em;height:31.91667em;border:.29167em solid #bfd3e2;background:#f3f3f3}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_4 .svg_container{width:100%;height:100%;padding-right:8.33333em}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_4 .svg_container svg{overflow:visible}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_4 .pcs_shapes_list{position:absolute;right:1.875em;bottom:7.625em;width:5.83333em;height:19.58333em;border-radius:.33333em;background-color:#c8d7e1}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_4 .pcs_shapes_list ul{height:100%;overflow:hidden}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_4 .pcs_shapes_list .pcs_shape_btn{position:relative;height:33.3%;cursor:pointer}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_4 .pcs_shapes_list .pcs_shape_btn.on,.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_4 .pcs_shapes_list .pcs_shape_btn:active{background-color:#a6c1d5}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_4 .pcs_shapes_list .pcs_shape_btn:after{content:"";position:absolute;left:.41667em;bottom:0;width:5em;height:1px;background-color:#aab7bf}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_4 .pcs_shapes_list .pcs_shape_btn:first-child{border-radius:.33333em .33333em 0 0}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_4 .pcs_shapes_list .pcs_shape_btn:last-child{border-radius:0 0 .33333em .33333em}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_4 .pcs_shapes_list .pcs_shape_btn:last-child:after{height:0}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_4 .pcs_shapes_list .pcs_shape_img{position:absolute;left:50%;top:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%)}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_4 .pcs_shapes_list .pcs_square .pcs_shape_img{width:3.29167em;height:3.29167em;background:url(resources/wood/images/square.png) no-repeat;background-size:100% 100%}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_4 .pcs_shapes_list .pcs_triangle .pcs_shape_img{width:4.83333em;height:2.66667em;background:url(resources/wood/images/triangle.png) no-repeat;background-size:100% 100%}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_4 .pcs_shapes_list .pcs_circle .pcs_shape_img{width:3.33333em;height:3.33333em;background:url(resources/wood/images/circle.png) no-repeat;background-size:100% 100%}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_4 .pcs_com_btns{padding:0 .875em;margin:0 .66667em}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_4 .pcs_keyboard_box{position:absolute;top:0;left:50%;z-index:120;width:6.91667em;height:3.66667em;background:-webkit-linear-gradient(top,#f3f4f3,#fff);background:linear-gradient(180deg,#f3f4f3,#fff);border:1px solid #686868;border-radius:.41667em;box-shadow:inset 0 0 .20833em rgba(0,0,0,.4)}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_4 .pcs_keyboard_input{padding:0 2.25em 0 .41667em}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_4 .pcs_keyboard_input span:first-child{position:relative;top:-.08333em;display:inline-block;font:3.54167em Times New Roman;color:#4d4d4d}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_4 .pcs_keyboard_input span:last-child{position:absolute;right:.54167em;top:50%;-webkit-transform:translateY(-50%);transform:translateY(-50%);width:1.91667em;height:1.91667em;border:1px solid #686868;background:-webkit-linear-gradient(bottom,#dfdfdf,#f2f2f2);background:linear-gradient(0deg,#dfdfdf,#f2f2f2);border-radius:.41667em;cursor:pointer}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_4 .pcs_keyboard_input span:last-child:after{content:"";position:absolute;left:50%;top:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%);width:1em;height:1em;background:url(resources/wood/images/arrow_icon.png) no-repeat;background-size:2.41667em auto}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_4 .pcs_keyboard_input span:last-child.ui_btn_active,.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_4 .pcs_keyboard_input span:last-child:active{background:#88c4c6;border:1px solid #397274}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_4 .pcs_keyboard_input span:last-child.ui_btn_active:after,.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_4 .pcs_keyboard_input span:last-child:active:after{background-position:0 -1.41667em}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_4 .pcs_keyboard_list{position:absolute;top:102%;right:0;border:.04167em solid #686868;background:#ebebeb;width:13.33333em;text-align:center}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_4 .pcs_keyboard_list .bd{padding:.41667em}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_4 .pcs_keyboard_list .bd .bd_num{width:3.66667em;height:2.33333em;line-height:2.33333em;color:#4d4d4d;float:left;background:#fff;border-radius:.25em;border:.04167em solid #9c9c9c;margin:.20833em;cursor:pointer}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_4 .pcs_keyboard_list .bd .bd_num span{font:700 2em Times New Roman}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_4 .pcs_keyboard_list .bd .bd_num.btn_del .btn_del_icon{display:block;width:3.66667em;height:1.5em;margin-top:.33333em;background:url(resources/wood/images/fractions_keyboard_del_btn.png) top no-repeat;background-size:3em auto}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_4 .pcs_keyboard_list .bd .bd_num.btn_enter span{font:normal normal 1.25em Microsoft YaHei}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_4 .pcs_keyboard_list .bd .bd_num.ui_btn_active,.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_4 .pcs_keyboard_list .bd .bd_num:active{background-color:#31b0ee;color:#fff}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_4 .pcs_keyboard_list .bd .bd_num.ui_btn_active.btn_del .btn_del_icon,.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_4 .pcs_keyboard_list .bd .bd_num:active.btn_del .btn_del_icon{background-position:bottom}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_4 .pcs_keyboard_box.up .pcs_keyboard_input span:last-child:after{background-position:-1.41667em 0}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_4 .pcs_keyboard_box.up .pcs_keyboard_input span:last-child.ui_btn_active,.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_4 .pcs_keyboard_box.up .pcs_keyboard_input span:last-child:active{background:#88c4c6;border:1px solid #397274}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_4 .pcs_keyboard_box.up .pcs_keyboard_input span:last-child.ui_btn_active:after,.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_4 .pcs_keyboard_box.up .pcs_keyboard_input span:last-child:active:after{background-position:-1.41667em -1.41667em}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_4 .pcs_keyboard_box.up .pcs_keyboard_list{bottom:102%;top:auto}.exam_skin_wood .polarcoordinate_wrapper .svg_deg_txt{position:absolute;top:30%;left:90%;min-width:3.41667em;color:#8300de;pointer-events:none}.exam_skin_wood .polarcoordinate_wrapper .svg_deg_txt .pcs_numerator{display:block;position:relative;padding:0 .29167em;top:-3.66667em;left:-50%}.exam_skin_wood .polarcoordinate_wrapper .svg_deg_txt .pcs_numerator:after{content:"";position:absolute;left:0;top:88%;width:100%;height:.25em;background-color:#8300de}.exam_skin_wood .polarcoordinate_wrapper .svg_deg_txt .pcs_denominator{display:block;position:relative;left:-50%;top:-4.5em}.exam_skin_wood .polarcoordinate_wrapper .svg_deg_txt span{font:3.54167em Times New Roman;vertical-align:baseline}.exam_skin_wood .polarcoordinate_wrapper .svg_deg_txt .pcs_pi{font-style:italic}.exam_skin_wood .polarcoordinate_wrapper .svg_deg_txt.pcs_integer .pcs_numerator{top:-2.08333em}.exam_skin_wood .polarcoordinate_wrapper .svg_deg_txt.pcs_integer .pcs_numerator:after{height:0}.exam_skin_wood .polarcoordinate_wrapper .svg_deg_txt.pcs_integer .pcs_denominator{display:none}.exam_skin_wood .polarcoordinate_wrapper .svg_coords_txt{position:absolute;top:76%;left:20%;min-width:9.58333em;color:#8300de;pointer-events:none;z-index:100;white-space:nowrap}.exam_skin_wood .polarcoordinate_wrapper .svg_coords_txt span{font:3.54167em Times New Roman;vertical-align:baseline}.exam_skin_wood .polarcoordinate_wrapper .svg_coords_txt .svg_coords_dis_txt{position:relative;top:.25em}.exam_skin_wood .polarcoordinate_wrapper .svg_coords_txt .svg_coords_dis_txt span.sqrt{position:relative;top:.02083em;left:-.02083em;border-top:.05em solid #8300de}.exam_skin_wood .polarcoordinate_wrapper .svg_coords_txt .svg_coords_deg_txt{display:inline-block;position:relative;left:auto;top:auto;min-width:3.41667em;color:#8300de;pointer-events:none}.exam_skin_wood .polarcoordinate_wrapper .svg_coords_txt .svg_coords_deg_txt .pcs_numerator{display:block;position:relative;padding:0 .29167em;height:100%;top:-1.66667em;left:0}.exam_skin_wood .polarcoordinate_wrapper .svg_coords_txt .svg_coords_deg_txt .pcs_numerator:after{content:"";position:absolute;left:0;top:88%;width:100%;height:.25em;background-color:#8300de}.exam_skin_wood .polarcoordinate_wrapper .svg_coords_txt .svg_coords_deg_txt .pcs_denominator{display:block;position:relative;left:0;top:-2.41667em}.exam_skin_wood .polarcoordinate_wrapper .svg_coords_txt .svg_coords_deg_txt span{font:3.54167em Times New Roman;vertical-align:baseline}.exam_skin_wood .polarcoordinate_wrapper .svg_coords_txt .svg_coords_deg_txt .pcs_pi{font-style:italic}.exam_skin_wood .polarcoordinate_wrapper .svg_coords_txt .svg_coords_deg_txt.pcs_integer .pcs_numerator{top:.25em}.exam_skin_wood .polarcoordinate_wrapper .svg_coords_txt .svg_coords_deg_txt.pcs_integer .pcs_numerator:after{height:0}.exam_skin_wood .polarcoordinate_wrapper .svg_coords_txt .svg_coords_deg_txt.pcs_integer .pcs_denominator{display:none}.exam_skin_wood .polarcoordinate_wrapper .svg_coords_txt>div{display:inline-block;vertical-align:top}.exam_skin_wood .polarcoordinate_wrapper .pcs_operate_list{position:relative;display:inline-block;height:100%;vertical-align:middle;margin-right:1.08333em}.exam_skin_wood .polarcoordinate_wrapper .pcs_operate_list:before{content:"";position:absolute;top:0;right:-1px;width:1px;height:100%;background-color:#e7f3fc}.exam_skin_wood .polarcoordinate_wrapper .pcs_operate_list:after{content:"";position:absolute;top:0;right:-2px;width:1px;height:100%;background-color:#b3c1cb}.exam_skin_wood .polarcoordinate_wrapper .pcs_operate_txt{font-size:1.5em;color:#292525}.exam_skin_wood .polarcoordinate_wrapper .pcs_operate_1{position:relative;z-index:20;min-width:5.29167em;height:100%;float:left;cursor:pointer;padding:0 .66667em}.exam_skin_wood .polarcoordinate_wrapper .pcs_operate_1 .pcs_operate_img{display:block;width:1.66667em;height:1.66667em;border:.125em solid #976b38;border-radius:50%;background-color:#f7c747;margin:1.25em auto .58333em}.exam_skin_wood .polarcoordinate_wrapper .move_polar_point{position:absolute;z-index:1000;top:20%;width:1.66667em;height:1.66667em;border:.125em solid #976b38;border-radius:50%;background-color:#f7c747}.exam_skin_wood .polarcoordinate_wrapper .pcs_operate_2{position:relative;z-index:20;min-width:5.29167em;height:100%;float:left;cursor:pointer;padding:0 .66667em}.exam_skin_wood .polarcoordinate_wrapper .pcs_operate_2 .pcs_operate_img{display:block;width:3.20833em;height:1.79167em;margin:1.16667em auto .54167em;background:url(resources/wood/images/axis_btn.png) 0 -2.20833em no-repeat;background-size:100% auto}.exam_skin_wood .polarcoordinate_wrapper .pcs_operate_2 .pcs_operate_txt{color:#a9b6c0}.exam_skin_wood .polarcoordinate_wrapper .pcs_operate_2.on .pcs_operate_img{background-position:0 0}.exam_skin_wood .polarcoordinate_wrapper .pcs_operate_2.on .pcs_operate_txt{color:#292525}.exam_skin_wood .polarcoordinate_wrapper .move_polar_axis{position:absolute;z-index:1000;top:10%;width:3.20833em;height:1.79167em;background:url(resources/wood/images/axis_btn.png) 0 0 no-repeat;background-size:100% auto}.exam_skin_wood .polarcoordinate_wrapper .pcs_operate_3{position:relative;z-index:20;min-width:6.66667em;height:100%;float:left;cursor:pointer;padding:0 .66667em}.exam_skin_wood .polarcoordinate_wrapper .pcs_operate_3 .pcs_operate_img{display:block;width:1.66667em;height:1.66667em;border:.125em solid #bec9cc;border-radius:50%;background-color:#a9b6c0;margin:1.25em auto .58333em}.exam_skin_wood .polarcoordinate_wrapper .pcs_operate_3 .pcs_operate_txt{color:#a9b6c0}.exam_skin_wood .polarcoordinate_wrapper .pcs_operate_3.on .pcs_operate_img{border-color:#f3cf6e;background-color:#804602}.exam_skin_wood .polarcoordinate_wrapper .pcs_operate_3.on .pcs_operate_txt{color:#292525}.exam_skin_wood .polarcoordinate_wrapper .move_point{position:absolute;z-index:1000;top:25%;width:1.66667em;height:1.66667em;border:.125em solid #f3cf6e;border-radius:50%;background-color:#804602}.exam_skin_wood .polarcoordinate_wrapper .pcs_operate_bg{position:absolute;z-index:10;left:0;top:0;width:10.58333em;height:100%;border:1px solid #fff;background:-webkit-linear-gradient(top,#dedede,#f4f4f4);background:linear-gradient(180deg,#dedede,#f4f4f4);box-shadow:inset 0 .08333em .75em rgba(0,0,0,.15)}.exam_skin_wood .polarcoordinate_wrapper .move_square{position:absolute;width:3.29167em;height:3.29167em;z-index:1000;top:30%;background:url(resources/wood/images/square.png) no-repeat;background-size:100% 100%}.exam_skin_wood .polarcoordinate_wrapper .move_triangle{position:absolute;z-index:1000;top:35%;width:4.83333em;height:2.66667em;background:url(resources/wood/images/triangle.png) no-repeat;background-size:100% 100%}.exam_skin_wood .polarcoordinate_wrapper .move_circle{position:absolute;z-index:1000;top:40%;width:3.33333em;height:3.33333em;background:url(resources/wood/images/circle.png) no-repeat;background-size:100% 100%}.exam_skin_wood .polarcoordinate_wrapper .pcs_delete_btn{position:absolute;top:0;z-index:110;width:3.66667em;height:3.66667em;border:1px solid #397274;border-radius:8%;cursor:pointer;background:-webkit-linear-gradient(bottom,#e9e9e9,#fff);background:linear-gradient(0deg,#e9e9e9 0,#fff);background-color:#456}.exam_skin_wood .polarcoordinate_wrapper .pcs_delete_btn span{display:inline-block;width:2.20833em;height:2.29167em;margin-top:21%;background:url(resources/wood/images/delete.png);background-size:100% 100%}.exam_skin_wood .polarcoordinate_wrapper .pcs_delete_btn.ui_btn_active,.exam_skin_wood .polarcoordinate_wrapper .pcs_delete_btn:active{background:-webkit-linear-gradient(bottom,#76b8ba,#89c5c7);background:linear-gradient(0deg,#76b8ba 0,#89c5c7)}.exam_skin_wood .polarcoordinate_wrapper .pcs_delete_btn.ui_btn_active span,.exam_skin_wood .polarcoordinate_wrapper .pcs_delete_btn:active span{background:url(resources/wood/images/delete_active.png);background-size:100% 100%}.exam_skin_wood .polarcoordinate_wrapper .pcs_slide_block{position:absolute;top:0;z-index:110;width:1.29167em;height:2.5em;cursor:pointer}.exam_skin_wood .polarcoordinate_wrapper .pcs_slide_block span{display:inline-block;width:100%;height:100%;background:url(resources/wood/images/slide_block.png);background-size:100% 100%}.exam_skin_wood .polarcoordinate_wrapper .pcs_slide_block.ui_btn_active span,.exam_skin_wood .polarcoordinate_wrapper .pcs_slide_block:active span{background:url(resources/wood/images/slide_block_active.png);background-size:100% 100%}.exam_skin_wood .polarcoordinate_wrapper .pcs_stretch_btn{position:absolute;top:0;z-index:110;width:2.5em;height:.95833em;cursor:pointer}.exam_skin_wood .polarcoordinate_wrapper .pcs_stretch_btn span{display:inline-block;width:100%;height:100%;background:url(resources/wood/images/stretch.png);background-size:100% 100%}.exam_skin_wood .polarcoordinate_wrapper .pcs_stretch_btn.ui_btn_active span,.exam_skin_wood .polarcoordinate_wrapper .pcs_stretch_btn:active span{background:url(resources/wood/images/stretch_active.png);background-size:100% 100%}.exam_skin_wood .polarcoordinate_wrapper .pcs_com_btns{display:inline-block;margin:0 .75em;padding:0 1.41667em;height:3.16667em;line-height:3.16667em;text-align:center;vertical-align:middle;border-radius:.41667em;cursor:pointer}.exam_skin_wood .polarcoordinate_wrapper .pcs_com_btns .btns-primary-txt{font-size:1.5em;color:#384650}.exam_skin_wood .polarcoordinate_wrapper .pcs_com_btns .btns-primary-icon{display:inline-block;width:1.83333em;height:100%;vertical-align:top;margin-right:.33333em;background:url(resources/wood/images/com_eye_1.png) no-repeat;background-size:100% auto}.exam_skin_wood .polarcoordinate_wrapper .pcs_com_btns.btns-primary{border:1px solid #397274;background:-webkit-linear-gradient(bottom,#e9e9e9,#fff);background:linear-gradient(0deg,#e9e9e9 0,#fff)}.exam_skin_wood .polarcoordinate_wrapper .pcs_com_btns.btns-primary.ui_btn_active{background:-webkit-linear-gradient(bottom,#76b8ba,#89c5c7);background:linear-gradient(0deg,#76b8ba 0,#89c5c7)}.exam_skin_wood .polarcoordinate_wrapper .pcs_com_btns.btns-primary.ui_btn_active .btns-primary-txt{color:#fff}.exam_skin_wood .polarcoordinate_wrapper .pcs_com_btns.btns-primary.ui_btn_active .btns-primary-icon{background-image:url(resources/wood/images/com_eye_2.png)}.exam_skin_wood .polarcoordinate_wrapper .pcs_com_btns.btns-primary.click_disabled{border-color:#93989a;background:-webkit-linear-gradient(top,#c8d1d7,#c1c8cc);background:linear-gradient(180deg,#c8d1d7 0,#c1c8cc);cursor:default}.exam_skin_wood .polarcoordinate_wrapper .pcs_com_btns.btns-primary.click_disabled .btns-primary-txt{color:#969fa4}.exam_skin_wood .polarcoordinate_wrapper .pcs_com_btns.btns-primary.click_disabled .btns-primary-icon{background-image:url(resources/wood/images/com_eye_3.png)}.exam_skin_wood .polarcoordinate_wrapper .pcs_sidebar{position:absolute;right:5.95833em;bottom:8.08333em;width:5.83333em;height:26.20833em;border-radius:.33333em;background-color:#b0c9dc}.exam_skin_wood .polarcoordinate_wrapper .pcs_sidebar .pcs_preset_list{height:100%;overflow:hidden}.exam_skin_wood .polarcoordinate_wrapper .pcs_sidebar .pcs_preset_btn{position:relative;height:25%;cursor:pointer}.exam_skin_wood .polarcoordinate_wrapper .pcs_sidebar .pcs_preset_btn.on,.exam_skin_wood .polarcoordinate_wrapper .pcs_sidebar .pcs_preset_btn:active{background-color:#95b7d1}.exam_skin_wood .polarcoordinate_wrapper .pcs_sidebar .pcs_preset_btn:after{content:"";position:absolute;left:.41667em;bottom:0;width:5em;height:1px;background-color:#96abbb}.exam_skin_wood .polarcoordinate_wrapper .pcs_sidebar .pcs_preset_btn:first-child{border-radius:.33333em .33333em 0 0}.exam_skin_wood .polarcoordinate_wrapper .pcs_sidebar .pcs_preset_btn:last-child{border-radius:0 0 .33333em .33333em}.exam_skin_wood .polarcoordinate_wrapper .pcs_sidebar .pcs_preset_btn:last-child:after{height:0}.exam_skin_wood .polarcoordinate_wrapper .pcs_sidebar .pcs_preset_img{position:absolute;left:50%;top:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%)}.exam_skin_wood .polarcoordinate_wrapper .pcs_sidebar .pcs_preset_btn_1 .pcs_preset_img{width:3.25em;height:2.75em;background:url(resources/wood/images/preset_1.png);background-size:100% 100%}.exam_skin_wood .polarcoordinate_wrapper .pcs_sidebar .pcs_preset_btn_2 .pcs_preset_img{width:3.29167em;height:3.16667em;background:url(resources/wood/images/preset_2.png);background-size:100% 100%}.exam_skin_wood .polarcoordinate_wrapper .pcs_sidebar .pcs_preset_btn_3 .pcs_preset_img{width:3.33333em;height:3.33333em;background:url(resources/wood/images/preset_3.png);background-size:100% 100%}.exam_skin_wood .polarcoordinate_wrapper .pcs_sidebar .pcs_preset_btn_4 .pcs_preset_img{width:3.29167em;height:2.70833em;background:url(resources/wood/images/preset_4.png);background-size:100% 100%}.typefaces_long .exam_skin_wood .polarcoordinate_wrapper .pcs_over_range .pcs_com_btns .btns-primary-txt{white-space:nowrap}.typefaces_long .exam_skin_wood .polarcoordinate_wrapper .pcs_preset_1 .pcs_over_range{width:40em}.typefaces_long .exam_skin_wood .pcs_preset_1 .pcs_operate_bg{width:14.48em}.typefaces_long .exam_skin_wood .pcs_preset_1 .pcs_operate_list{margin-right:.38333em}.typefaces_long .exam_skin_wood .pcs_preset_1 .pcs_main_toolbar .pcs_com_btns{position:relative;max-width:17.2em;text-align:left;height:4em;line-height:1.3;margin:0 .3em;padding-left:3.5em;padding-top:.35em}.typefaces_long .exam_skin_wood .pcs_preset_1 .pcs_main_toolbar .pcs_com_btns .btns-primary-icon{position:absolute;left:.875em;top:0;background-position:50%}.typefaces_long .exam_skin_wood .pcs_preset_1 .pcs_main_toolbar .pcs_com_btns .btns-primary-txt{font-size:1.2em;word-wrap:break-word;word-break:break-all}.typefaces_long .exam_skin_wood .pcs_preset_1 .pcs_operate_1{max-width:8em}.typefaces_long .exam_skin_wood .pcs_preset_1 .pcs_operate_1 .pcs_operate_img{margin:.66667em auto .79167em}.typefaces_long .exam_skin_wood .pcs_preset_1 .pcs_operate_2{max-width:8em}.typefaces_long .exam_skin_wood .pcs_preset_1 .pcs_operate_2 .pcs_operate_img{margin:.66667em auto .33333em}.typefaces_long .exam_skin_wood .pcs_preset_1 .pcs_operate_2 .pcs_operate_txt{font-size:1.33333em}.typefaces_long .exam_skin_wood .pcs_preset_1 .pcs_operate_3{max-width:10em}.typefaces_long .exam_skin_wood .pcs_preset_1 .pcs_operate_3 .pcs_operate_img{margin:.66667em auto .41667em}.typefaces_long .exam_skin_wood .pcs_preset_1 .pcs_operate_3 .pcs_operate_txt{font-size:1.33333em}.typefaces_long .exam_skin_wood .pcs_preset_3 .pcs_operate_bg{width:14.48em}.typefaces_long .exam_skin_wood .pcs_preset_3 .pcs_operate_list{margin-right:.38333em}.typefaces_long .exam_skin_wood .pcs_preset_3 .pcs_main_toolbar .pcs_com_btns{position:relative;max-width:17.2em;text-align:left;height:4em;line-height:1.3;margin:0 .3em;padding-left:3.5em;padding-top:.35em}.typefaces_long .exam_skin_wood .pcs_preset_3 .pcs_main_toolbar .pcs_com_btns .btns-primary-icon{position:absolute;left:.875em;top:0;background-position:50%}.typefaces_long .exam_skin_wood .pcs_preset_3 .pcs_main_toolbar .pcs_com_btns .btns-primary-txt{font-size:1.2em;word-wrap:break-word;word-break:break-all}.typefaces_long .exam_skin_wood .pcs_preset_3 .pcs_operate_1{max-width:17em}.typefaces_long .exam_skin_wood .pcs_preset_3 .pcs_operate_1 .pcs_operate_img{margin:.66667em auto .79167em;font-size:.7em}.typefaces_long .exam_skin_wood .pcs_preset_3 .pcs_operate_1 .pcs_operate_txt{font-size:1.33333em}.typefaces_long .exam_skin_wood .pcs_preset_3 .pcs_operate_2{max-width:15em}.typefaces_long .exam_skin_wood .pcs_preset_3 .pcs_operate_2 .pcs_operate_img{font-size:.7em;margin:.66667em auto .33333em}.typefaces_long .exam_skin_wood .pcs_preset_3 .pcs_operate_2 .pcs_operate_txt{font-size:1.33333em}.typefaces_long .exam_skin_wood .pcs_preset_3 .pcs_operate_3{max-width:11em}.typefaces_long .exam_skin_wood .pcs_preset_3 .pcs_operate_3 .pcs_operate_img{margin:.66667em auto .41667em}.typefaces_long .exam_skin_wood .pcs_preset_3 .pcs_operate_3 .pcs_operate_txt{font-size:1.33333em}.typefaces_long .exam_skin_wood .pcs_preset_4 .pcs_operate_bg{width:14.48em}.typefaces_long .exam_skin_wood .pcs_preset_4 .pcs_operate_list{margin-right:.38333em}.typefaces_long .exam_skin_wood .pcs_preset_4 .pcs_main_toolbar .pcs_com_btns{position:relative;max-width:17.2em;text-align:left;height:4em;line-height:1.3;margin:0 .3em;padding-left:3.5em;padding-top:.35em}.typefaces_long .exam_skin_wood .pcs_preset_4 .pcs_main_toolbar .pcs_com_btns .btns-primary-icon{position:absolute;left:.875em;top:0;background-position:50%}.typefaces_long .exam_skin_wood .pcs_preset_4 .pcs_main_toolbar .pcs_com_btns .btns-primary-txt{font-size:1.2em;word-wrap:break-word;word-break:break-all}.typefaces_long .exam_skin_wood .pcs_preset_4 .pcs_operate_1{max-width:8em}.typefaces_long .exam_skin_wood .pcs_preset_4 .pcs_operate_1 .pcs_operate_img{margin:.66667em auto .79167em}.typefaces_long .exam_skin_wood .pcs_preset_4 .pcs_operate_2{max-width:8em}.typefaces_long .exam_skin_wood .pcs_preset_4 .pcs_operate_2 .pcs_operate_img{margin:.66667em auto .33333em}.typefaces_long .exam_skin_wood .pcs_preset_4 .pcs_operate_2 .pcs_operate_txt{font-size:1.33333em}.typefaces_long .exam_skin_wood .pcs_preset_4 .pcs_operate_3{max-width:10em}.typefaces_long .exam_skin_wood .pcs_preset_4 .pcs_operate_3 .pcs_operate_img{margin:.66667em auto .41667em}.typefaces_long .exam_skin_wood .pcs_preset_4 .pcs_operate_3 .pcs_operate_txt{font-size:1.33333em}.typefaces_ru_RU .exam_skin_wood .polarcoordinate_wrapper .pcs_over_range .pcs_com_btns .btns-primary-txt{white-space:nowrap}.typefaces_ru_RU .exam_skin_wood .polarcoordinate_wrapper .pcs_preset_1 .pcs_over_range{width:40em}.typefaces_ru_RU .exam_skin_wood .pcs_preset_1 .pcs_operate_bg{width:14.48em}.typefaces_ru_RU .exam_skin_wood .pcs_preset_1 .pcs_operate_list{margin-right:.38333em}.typefaces_ru_RU .exam_skin_wood .pcs_preset_1 .pcs_main_toolbar .pcs_com_btns{position:relative;max-width:17.2em;text-align:left;height:4em;line-height:1.3;margin:0 .3em;padding-left:3.5em;padding-top:.35em}.typefaces_ru_RU .exam_skin_wood .pcs_preset_1 .pcs_main_toolbar .pcs_com_btns .btns-primary-icon{position:absolute;left:.875em;top:0;background-position:50%}.typefaces_ru_RU .exam_skin_wood .pcs_preset_1 .pcs_main_toolbar .pcs_com_btns .btns-primary-txt{font-size:1.2em;word-wrap:break-word;word-break:break-all}.typefaces_ru_RU .exam_skin_wood .pcs_preset_1 .pcs_operate_1{max-width:8em}.typefaces_ru_RU .exam_skin_wood .pcs_preset_1 .pcs_operate_1 .pcs_operate_img{margin:.66667em auto .79167em}.typefaces_ru_RU .exam_skin_wood .pcs_preset_1 .pcs_operate_2{max-width:8em}.typefaces_ru_RU .exam_skin_wood .pcs_preset_1 .pcs_operate_2 .pcs_operate_img{margin:.66667em auto .33333em}.typefaces_ru_RU .exam_skin_wood .pcs_preset_1 .pcs_operate_2 .pcs_operate_txt{font-size:1.33333em}.typefaces_ru_RU .exam_skin_wood .pcs_preset_1 .pcs_operate_3{max-width:10em}.typefaces_ru_RU .exam_skin_wood .pcs_preset_1 .pcs_operate_3 .pcs_operate_img{margin:.66667em auto .41667em}.typefaces_ru_RU .exam_skin_wood .pcs_preset_1 .pcs_operate_3 .pcs_operate_txt{font-size:1.33333em}.typefaces_ru_RU .exam_skin_wood .pcs_preset_3 .pcs_operate_bg{width:14.48em}.typefaces_ru_RU .exam_skin_wood .pcs_preset_3 .pcs_operate_list{margin-right:.38333em}.typefaces_ru_RU .exam_skin_wood .pcs_preset_3 .pcs_main_toolbar .pcs_com_btns{position:relative;max-width:17.2em;text-align:left;height:4em;line-height:1.3;margin:0 .3em;padding-left:3.5em;padding-top:.35em}.typefaces_ru_RU .exam_skin_wood .pcs_preset_3 .pcs_main_toolbar .pcs_com_btns .btns-primary-icon{position:absolute;left:.875em;top:0;background-position:50%}.typefaces_ru_RU .exam_skin_wood .pcs_preset_3 .pcs_main_toolbar .pcs_com_btns .btns-primary-txt{font-size:1.2em;word-wrap:break-word;word-break:break-all}.typefaces_ru_RU .exam_skin_wood .pcs_preset_3 .pcs_operate_1{max-width:17em}.typefaces_ru_RU .exam_skin_wood .pcs_preset_3 .pcs_operate_1 .pcs_operate_img{margin:.66667em auto .79167em;font-size:.7em}.typefaces_ru_RU .exam_skin_wood .pcs_preset_3 .pcs_operate_1 .pcs_operate_txt{font-size:1.33333em}.typefaces_ru_RU .exam_skin_wood .pcs_preset_3 .pcs_operate_2{max-width:15em}.typefaces_ru_RU .exam_skin_wood .pcs_preset_3 .pcs_operate_2 .pcs_operate_img{font-size:.7em;margin:.66667em auto .33333em}.typefaces_ru_RU .exam_skin_wood .pcs_preset_3 .pcs_operate_2 .pcs_operate_txt{font-size:1.33333em}.typefaces_ru_RU .exam_skin_wood .pcs_preset_3 .pcs_operate_3{max-width:11em}.typefaces_ru_RU .exam_skin_wood .pcs_preset_3 .pcs_operate_3 .pcs_operate_img{margin:.66667em auto .41667em}.typefaces_ru_RU .exam_skin_wood .pcs_preset_3 .pcs_operate_3 .pcs_operate_txt{font-size:1.33333em}.typefaces_ru_RU .exam_skin_wood .pcs_preset_4 .pcs_operate_bg{width:14.48em}.typefaces_ru_RU .exam_skin_wood .pcs_preset_4 .pcs_operate_list{margin-right:.38333em}.typefaces_ru_RU .exam_skin_wood .pcs_preset_4 .pcs_main_toolbar .pcs_com_btns{position:relative;max-width:17.2em;text-align:left;height:4em;line-height:1.3;margin:0 .3em;padding-left:3.5em;padding-top:.35em}.typefaces_ru_RU .exam_skin_wood .pcs_preset_4 .pcs_main_toolbar .pcs_com_btns .btns-primary-icon{position:absolute;left:.875em;top:0;background-position:50%}.typefaces_ru_RU .exam_skin_wood .pcs_preset_4 .pcs_main_toolbar .pcs_com_btns .btns-primary-txt{font-size:1.2em;word-wrap:break-word;word-break:break-all}.typefaces_ru_RU .exam_skin_wood .pcs_preset_4 .pcs_operate_1{max-width:8em}.typefaces_ru_RU .exam_skin_wood .pcs_preset_4 .pcs_operate_1 .pcs_operate_img{margin:.66667em auto .79167em}.typefaces_ru_RU .exam_skin_wood .pcs_preset_4 .pcs_operate_2{max-width:8em}.typefaces_ru_RU .exam_skin_wood .pcs_preset_4 .pcs_operate_2 .pcs_operate_img{margin:.66667em auto .33333em}.typefaces_ru_RU .exam_skin_wood .pcs_preset_4 .pcs_operate_2 .pcs_operate_txt{font-size:1.33333em}.typefaces_ru_RU .exam_skin_wood .pcs_preset_4 .pcs_operate_3{max-width:10em}.typefaces_ru_RU .exam_skin_wood .pcs_preset_4 .pcs_operate_3 .pcs_operate_img{margin:.66667em auto .41667em}.typefaces_ru_RU .exam_skin_wood .pcs_preset_4 .pcs_operate_3 .pcs_operate_txt{font-size:1.33333em}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_4 .pcs_keyboard_list .bd .bd_num{border-width:1px}.exam_skin_wood .polarcoordinate_wrapper .pcs_preset_4 .pcs_keyboard_list{border-width:1px}]]></css><view><![CDATA[<div class="exam_skin_wood"><div class="polarcoordinate_wrapper"><div class="pcs_main"><div class="pcs_preset pcs_preset_1"><div class="pcs_main_content"><div class="svg_container"><svg></svg><div class="svg_deg_txt _js_deg_1 hide_dom"><div class="pcs_numerator"><span>4</span><span class="pcs_pi">π</span></div><div class="pcs_denominator"><span>4</span></div></div><div class="svg_deg_txt _js_deg_2 hide_dom"><div class="pcs_numerator"><span>4</span><span class="pcs_pi">π</span></div><div class="pcs_denominator"><span>4</span></div></div><div class="svg_coords_txt _js_coords_1 hide_dom"><div><span>(</span></div><div class="svg_coords_dis_txt"><span>6</span></div><div><span>,&nbsp;</span></div><div class="svg_coords_deg_txt"><div class="pcs_numerator"><span>4</span><span class="pcs_pi">π</span></div><div class="pcs_denominator"><span>4</span></div></div><div><span>)</span></div></div><div class="svg_coords_txt _js_coords_2 hide_dom"><div><span>(</span></div><div class="svg_coords_dis_txt"><span>6</span></div><div><span>,&nbsp;</span></div><div class="svg_coords_sign"><span>-</span></div><div class="svg_coords_deg_txt"><div class="pcs_numerator"><span>4</span><span class="pcs_pi">π</span></div><div class="pcs_denominator"><span>4</span></div></div><div><span>)</span></div></div><div class="pcs_delete_btn hide_dom"><span></span></div><div class="pcs_slide_block hide_dom"><span></span></div><div class="pcs_stretch_btn hide_dom"><span></span></div></div></div><div class="pcs_main_toolbar"><ul class="pcs_operate_list"><li class="pcs_operate_1"><span class="pcs_operate_img"></span> <span class="pcs_operate_txt _i18_polar_point"></span></li><li class="pcs_operate_2"><span class="pcs_operate_img"></span> <span class="pcs_operate_txt _i18_polar_axis"></span></li><li class="pcs_operate_3"><span class="pcs_operate_img"></span> <span class="pcs_operate_txt _i18_any_point"></span></li><li class="pcs_operate_bg hide_dom"></li></ul><a class="pcs_com_btns btns-primary pcs_show_coordinate click_disabled"><b class="btns-primary-icon"></b><span class="btns-primary-txt _i18_show_polar_coord"></span> </a><a class="pcs_com_btns btns-primary pcs_show_point click_disabled"><b class="btns-primary-icon"></b><span class="btns-primary-txt _i18_show_sym_point"></span></a></div><div class="pcs_over_range hide_dom"><div class="tip_txt _i18_tip_txt"></div><a class="pcs_com_btns btns-primary tip_btn"><span class="btns-primary-txt _i18_i_know"></span></a></div><div class="move_polar_point hide_dom"></div><div class="move_polar_axis hide_dom"></div><div class="move_point hide_dom"></div></div><div class="pcs_preset pcs_preset_2"><div class="pcs_main_content"><div class="pcs_polar_to_point"><div class="pcs_left_area"><svg width="100%" height="100%"></svg><div class="svg_deg_txt svg_degA_txt hide_dom"><div class="pcs_numerator"><span>4</span><span class="pcs_pi">π</span></div><div class="pcs_denominator"><span>4</span></div></div></div><div class="pcs_right_area"><ul class="pcs_points_list"><li class="pcs_point pcs_point_a"><a class="pcs_show_btn"></a><div class="pcs_inputs"><span class="pcs_input_1"><span class="_js_distance_num">7</span> <span class="_js_input1_down_btn"></span></span><div class="pcs_input_2"><div class="pcs_numerator"><span class="_js_numerator"></span><span class="pcs_pi">π</span></div><div class="pcs_denominator"><span class="_js_denominator">12</span></div><a class="pcs_turn"></a></div></div></li><li class="pcs_point pcs_point_b"><a class="pcs_show_btn"></a><div class="pcs_inputs"><span class="pcs_input_1"><span class="_js_distance_num">8</span> <span class="_js_input1_down_btn"></span></span><div class="pcs_input_2"><div class="pcs_numerator"><span class="_js_numerator">4</span><span class="pcs_pi">π</span></div><div class="pcs_denominator"><span class="_js_denominator">12</span></div><a class="pcs_turn"></a></div></div></li><li class="pcs_point pcs_point_c"><a class="pcs_show_btn"></a><div class="pcs_inputs"><span class="pcs_input_1 up"><span class="_js_distance_num">7</span> <span class="_js_input1_down_btn"></span></span><div class="pcs_input_2 up"><div class="pcs_numerator"><span class="_js_numerator">5</span><span class="pcs_pi">π</span></div><div class="pcs_denominator"><span class="_js_denominator">12</span></div><a class="pcs_turn"></a></div></div></li><li class="pcs_point pcs_point_d"><a class="pcs_show_btn"></a><div class="pcs_inputs"><span class="pcs_input_1 up"><span class="_js_distance_num">5</span> <span class="_js_input1_down_btn"></span></span><div class="pcs_input_2 up"><div class="pcs_numerator"><span class="_js_numerator">5</span><span class="pcs_pi">π</span></div><div class="pcs_denominator"><span class="_js_denominator">12</span></div><a class="pcs_turn"></a></div></div></li></ul><a class="pcs_com_btns btns-primary pcs_random"><span class="btns-primary-txt _i18_random_draft"></span></a><div class="pcs_drop_numselect_1 clearfix hide_dom"><div class="pcs_numselect_wrap"><span class="pcs_num_btn"><span>1</span></span> <span class="pcs_num_btn"><span>2</span></span> <span class="pcs_num_btn"><span>3</span></span><br><span class="pcs_num_btn"><span>4</span></span> <span class="pcs_num_btn"><span>5</span></span> <span class="pcs_num_btn"><span>6</span></span><br><span class="pcs_num_btn"><span>7</span></span> <span class="pcs_num_btn"><span>8</span></span> <span class="pcs_num_btn"><span>9</span></span></div></div><div class="pcs_drop_numselect_2 clearfix hide_dom"><div class="pcs_numselect_wrap"><div class="pcs_num_btn"><div class="pcs_numerator"><span class="pcs_pi">π</span></div><div class="pcs_denominator"><span>12</span></div></div><div class="pcs_num_btn"><div class="pcs_numerator"><span class="pcs_pi">π</span></div><div class="pcs_denominator"><span>6</span></div></div><div class="pcs_num_btn"><div class="pcs_numerator"><span class="pcs_pi">π</span></div><div class="pcs_denominator"><span>4</span></div></div><div class="pcs_num_btn"><div class="pcs_numerator"><span class="pcs_pi">π</span></div><div class="pcs_denominator"><span>3</span></div></div><div class="pcs_num_btn"><div class="pcs_numerator"><span>5</span><span class="pcs_pi">π</span></div><div class="pcs_denominator"><span>12</span></div></div><div class="pcs_num_btn"><div class="pcs_numerator"><span class="pcs_pi">π</span></div><div class="pcs_denominator"><span>2</span></div></div><div class="pcs_num_btn"><div class="pcs_numerator"><span>7</span><span class="pcs_pi">π</span></div><div class="pcs_denominator"><span>12</span></div></div><div class="pcs_num_btn"><div class="pcs_numerator"><span>2</span><span class="pcs_pi">π</span></div><div class="pcs_denominator"><span>3</span></div></div><br><div class="pcs_num_btn"><div class="pcs_numerator"><span>3</span><span class="pcs_pi">π</span></div><div class="pcs_denominator"><span>4</span></div></div><div class="pcs_num_btn"><div class="pcs_numerator"><span>5</span><span class="pcs_pi">π</span></div><div class="pcs_denominator"><span>6</span></div></div><div class="pcs_num_btn"><div class="pcs_numerator"><span>11</span><span class="pcs_pi">π</span></div><div class="pcs_denominator"><span>12</span></div></div><div class="pcs_num_btn"><div class="pcs_numerator pcs_integer"><span class="pcs_pi">π</span></div></div><div class="pcs_num_btn"><div class="pcs_numerator"><span>13</span><span class="pcs_pi">π</span></div><div class="pcs_denominator"><span>12</span></div></div><div class="pcs_num_btn"><div class="pcs_numerator"><span>7</span><span class="pcs_pi">π</span></div><div class="pcs_denominator"><span>6</span></div></div><div class="pcs_num_btn"><div class="pcs_numerator"><span>5</span><span class="pcs_pi">π</span></div><div class="pcs_denominator"><span>4</span></div></div><div class="pcs_num_btn"><div class="pcs_numerator"><span>4</span><span class="pcs_pi">π</span></div><div class="pcs_denominator"><span>3</span></div></div><br><div class="pcs_num_btn"><div class="pcs_numerator"><span>17</span><span class="pcs_pi">π</span></div><div class="pcs_denominator"><span>12</span></div></div><div class="pcs_num_btn"><div class="pcs_numerator"><span>3</span><span class="pcs_pi">π</span></div><div class="pcs_denominator"><span>2</span></div></div><div class="pcs_num_btn"><div class="pcs_numerator"><span>19</span><span class="pcs_pi">π</span></div><div class="pcs_denominator"><span>12</span></div></div><div class="pcs_num_btn"><div class="pcs_numerator"><span>5</span><span class="pcs_pi">π</span></div><div class="pcs_denominator"><span>3</span></div></div><div class="pcs_num_btn"><div class="pcs_numerator"><span>7</span><span class="pcs_pi">π</span></div><div class="pcs_denominator"><span>4</span></div></div><div class="pcs_num_btn"><div class="pcs_numerator"><span>11</span><span class="pcs_pi">π</span></div><div class="pcs_denominator"><span>6</span></div></div><div class="pcs_num_btn"><div class="pcs_numerator"><span>23</span><span class="pcs_pi">π</span></div><div class="pcs_denominator"><span>12</span></div></div><div class="pcs_num_btn"><div class="pcs_numerator pcs_integer"><span>2</span><span class="pcs_pi">π</span></div></div></div></div></div></div><div class="pcs_point_to_polar"><div class="pcs_left_area"><svg width="100%" height="100%"></svg><div class="svg_deg_txt svg_degA_txt hide_dom"><div class="pcs_numerator"><span>4</span><span class="pcs_pi">π</span></div><div class="pcs_denominator"><span>4</span></div></div></div><div class="pcs_right_area"><ul class="pcs_points_list"><li class="pcs_point pcs_point_a"><a class="pcs_show_btn"></a> <span class="pcs_inputs_letter">A</span><div class="pcs_inputs hide_visibility"><span class="pcs_input_1"><span class="_js_distance_num">7</span></span><div class="pcs_input_2"><div class="pcs_numerator"><span class="_js_numerator"></span><span class="pcs_pi">π</span></div><div class="pcs_denominator"><span class="_js_denominator">12</span></div></div></div></li><li class="pcs_point pcs_point_b"><a class="pcs_show_btn"></a> <span class="pcs_inputs_letter">B</span><div class="pcs_inputs hide_visibility"><span class="pcs_input_1"><span class="_js_distance_num">8</span></span><div class="pcs_input_2"><div class="pcs_numerator"><span class="_js_numerator">4</span><span class="pcs_pi">π</span></div><div class="pcs_denominator"><span class="_js_denominator">12</span></div></div></div></li><li class="pcs_point pcs_point_c"><a class="pcs_show_btn"></a> <span class="pcs_inputs_letter">C</span><div class="pcs_inputs hide_visibility"><span class="pcs_input_1"><span class="_js_distance_num">7</span></span><div class="pcs_input_2 pcs_integer"><div class="pcs_numerator"><span class="_js_numerator">11</span><span class="pcs_pi">π</span></div><div class="pcs_denominator"><span class="_js_denominator">12</span></div></div></div></li><li class="pcs_point pcs_point_d"><a class="pcs_show_btn"></a> <span class="pcs_inputs_letter">D</span><div class="pcs_inputs hide_visibility"><span class="pcs_input_1 up"><span class="_js_distance_num">5</span></span><div class="pcs_input_2 up"><div class="pcs_numerator"><span class="_js_numerator">11</span><span class="pcs_pi">π</span></div><div class="pcs_denominator"><span class="_js_denominator">12</span></div></div></div></li></ul><a class="pcs_com_btns btns-primary pcs_random"><span class="btns-primary-txt _i18_random_draft"></span></a></div></div></div><div class="pcs_main_toolbar"><div class="pcs_btns_group"><a class="pcs_com_btns btns-primary pcs_coordinate_btn ui_btn_active"><span class="btns-primary-txt _i18_polar_to_point"></span> </a><a class="pcs_com_btns btns-primary pcs_point_btn"><span class="btns-primary-txt _i18_point_to_polar"></span></a></div></div></div><div class="pcs_preset pcs_preset_3"><div class="pcs_main_content"><div class="pcs_mid_wrap"><div class="svg_container"><svg height="100%" width="100%"></svg><div class="pcs_delete_btn hide_dom"><span></span></div><div class="svg_coords_txt _js_coords_1 hide_dom"><div><span>(</span></div><div class="svg_coords_dis_txt"><span>6</span><span class="sqrt"></span></div><div><span>,&nbsp;</span></div><div class="svg_coords_deg_txt"><div class="pcs_numerator"><span>4</span><span class="pcs_pi">π</span></div><div class="pcs_denominator"><span>4</span></div></div><div><span>)</span></div></div></div><div class="pcs_bg_layout"></div></div></div><div class="pcs_main_toolbar"><ul class="pcs_operate_list"><li class="pcs_operate_1"><span class="pcs_operate_img"></span> <span class="pcs_operate_txt _i18_rect_axis_sys"></span></li><li class="pcs_operate_2"><span class="pcs_operate_img"></span> <span class="pcs_operate_txt _i18_polar_axis_sys"></span></li><li class="pcs_operate_3"><span class="pcs_operate_img"></span> <span class="pcs_operate_txt _i18_any_point"></span></li><li class="pcs_operate_bg hide_dom"></li><li class="pcs_operate_bg_2 hide_dom"></li></ul><a class="pcs_com_btns btns-primary pcs_show_coordinate click_disabled"><b class="btns-primary-icon"></b><span class="btns-primary-txt _i18_show_rect_coord"></span> </a><a class="pcs_com_btns btns-primary pcs_show_point click_disabled"><b class="btns-primary-icon"></b><span class="btns-primary-txt _i18_show_polar_coord"></span></a></div><div class="move_point hide_dom"></div></div><div class="pcs_preset pcs_preset_4"><div class="pcs_main_content"><div class="svg_container"><svg width="100%" height="100%"></svg><div class="pcs_keyboard_box hide_dom"><div class="pcs_keyboard_input"><span class="keyboard_input_num">6</span> <span class="_js_keyboard_drop"></span></div><div class="pcs_keyboard_list clearfix hide_dom"><div class="bd clearfix"><a class="bd_num"><span>1</span></a> <a class="bd_num"><span>2</span></a> <a class="bd_num"><span>3</span></a> <a class="bd_num"><span>4</span></a> <a class="bd_num"><span>5</span></a> <a class="bd_num"><span>6</span></a> <a class="bd_num"><span>7</span></a> <a class="bd_num"><span>8</span></a> <a class="bd_num"><span>9</span></a> <a class="bd_num btn_del"><i class="btn_del_icon"></i></a> <a class="bd_num"><span>0</span></a> <a class="bd_num btn_enter"><span>Enter</span></a></div></div></div><div class="pcs_delete_btn hide_dom"><span></span></div><div class="svg_coords_txt _js_coords_1 hide_dom"><div><span>(</span></div><div class="svg_coords_dis_txt"><span>6</span><span class="sqrt"></span></div><div><span>,&nbsp;</span></div><div class="svg_coords_deg_txt"><div class="pcs_numerator"><span>4</span><span class="pcs_pi">π</span></div><div class="pcs_denominator"><span>4</span></div></div><div><span>)</span></div></div></div><div class="pcs_shapes_list"><ul><li class="pcs_shape_btn pcs_square"><span class="pcs_shape_img"></span></li><li class="pcs_shape_btn pcs_triangle"><span class="pcs_shape_img"></span></li><li class="pcs_shape_btn pcs_circle"><span class="pcs_shape_img"></span></li></ul></div></div><div class="pcs_main_toolbar"><ul class="pcs_operate_list"><li class="pcs_operate_1"><span class="pcs_operate_img"></span> <span class="pcs_operate_txt _i18_polar_point"></span></li><li class="pcs_operate_2"><span class="pcs_operate_img"></span> <span class="pcs_operate_txt _i18_polar_axis"></span></li><li class="pcs_operate_3"><span class="pcs_operate_img"></span> <span class="pcs_operate_txt _i18_any_point"></span></li><li class="pcs_operate_bg hide_dom"></li></ul><a class="pcs_com_btns btns-primary pcs_show_coordinate click_disabled"><b class="btns-primary-icon"></b><span class="btns-primary-txt _i18_show_polar_coord"></span></a></div><div class="move_polar_point hide_dom"></div><div class="move_polar_axis hide_dom"></div><div class="move_point hide_dom"></div><div class="move_square hide_dom"></div><div class="move_triangle hide_dom"></div><div class="move_circle hide_dom"></div></div></div><div class="pcs_sidebar"><ul class="pcs_preset_list"><li class="pcs_preset_btn pcs_preset_btn_1 on"><span class="pcs_preset_img"></span></li><li class="pcs_preset_btn pcs_preset_btn_2"><span class="pcs_preset_img"></span></li><li class="pcs_preset_btn pcs_preset_btn_3"><span class="pcs_preset_img"></span></li><li class="pcs_preset_btn pcs_preset_btn_4"><span class="pcs_preset_img"></span></li></ul></div></div></div>]]></view><presenter><![CDATA[/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(1);
	__webpack_require__(6);
	__webpack_require__(5);
	__webpack_require__(3);
	__webpack_require__(2);
	__webpack_require__(7);
	__webpack_require__(8);
	__webpack_require__(9);
	module.exports = __webpack_require__(4);


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _presetA = __webpack_require__(2);

	var _presetA2 = _interopRequireDefault(_presetA);

	var _presetB = __webpack_require__(7);

	var _presetB2 = _interopRequireDefault(_presetB);

	var _presetC = __webpack_require__(8);

	var _presetC2 = _interopRequireDefault(_presetC);

	var _presetD = __webpack_require__(9);

	var _presetD2 = _interopRequireDefault(_presetD);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	(function () {
	  var i18nModel = {
	    'polar_point': '极点',
	    'polar_axis': '极轴',
	    'any_point': '任意点',
	    'show_polar_coord': '显示极坐标',
	    'hide_polar_coord': '隐藏极坐标',
	    'show_sym_point': '显示对称点',
	    'hide_sym_point': '隐藏对称点',
	    'polar_to_point': '极坐标→点',
	    'point_to_polar': '点→极坐标',
	    'random_draft': '随机生成',
	    'rect_axis_sys': '直角坐标系',
	    'polar_axis_sys': '极坐标系',
	    'show_rect_coord': '显示直角坐标',
	    'hide_rect_coord': '隐藏直角坐标',
	    'i_know': '我知道了',
	    'tip_txt': '对称点已超出边界，请重新调整坐标系位置。'
	  };

	  var Presenter = BasicPresenter.extend({
	    metaInfo: {
	      name: 'PolarCoordinateSystem',
	      type: '',
	      subtype: ''
	    },
	    /**
	     * Presenter的初始化方法
	     * @private
	     */
	    $init: function $init() {
	      this._super();
	    },
	    /**
	     * Presenter对外暴露的方法
	     */
	    _service_: {
	      constructor: function constructor(parent) {
	        this.parent = parent;
	      },
	      getQuestionInfo: function getQuestionInfo() {
	        return {
	          id: '',
	          type_code: 'PolarCoordinateSystem',
	          type_name: '极坐标系',
	          url: '',
	          notExistStatistics: true,
	          noNeedQuizProgress: true
	        };
	      },
	      setLocationProperties: function setLocationProperties(data) {
	        $.extend(i18nModel, data || {});
	      },
	      getExtendData: function getExtendData() {}
	    },
	    getService: function getService() {
	      this._service_.constructor(this);
	      return this._service_;
	    },
	    /** **以下开始为icPlayer的生命周期方法*****/
	    run: function run(view, model) {
	      this.model = model;
	      this.$view = $(view);
	      this.setMultiLanguage(this.$view);
	      var that = this;
	      that.presetA = new _presetA2.default(this.$view, i18nModel);
	      this.__interface = {
	        resizeScreen: function resizeScreen(data) {
	          that.presetA.resizeScreenHandler(eval(data.ratio));
	          that.presetB && that.presetB.resizeScreenHandler();
	          that.presetC && that.presetC.resizeScreenHandler();
	          that.presetD && that.presetD.resizeScreenHandler();
	        }
	      };
	    },
	    setMultiLanguage: function setMultiLanguage($view) {
	      $view.find('._i18_polar_point').text(i18nModel.polar_point);
	      $view.find('._i18_polar_axis').text(i18nModel.polar_axis);
	      $view.find('._i18_any_point').text(i18nModel.any_point);
	      $view.find('._i18_show_polar_coord').text(i18nModel.show_polar_coord);
	      $view.find('._i18_show_sym_point').text(i18nModel.show_sym_point);
	      $view.find('._i18_polar_to_point').text(i18nModel.polar_to_point);
	      $view.find('._i18_point_to_polar').text(i18nModel.point_to_polar);
	      $view.find('._i18_random_draft').text(i18nModel.random_draft);
	      $view.find('._i18_rect_axis_sys').text(i18nModel.rect_axis_sys);
	      $view.find('._i18_polar_axis_sys').text(i18nModel.polar_axis_sys);
	      $view.find('._i18_show_rect_coord').text(i18nModel.show_rect_coord);
	      $view.find('._i18_i_know').text(i18nModel.i_know);
	      $view.find('._i18_tip_txt').text(i18nModel.tip_txt);
	    },
	    pageShow: function pageShow() {
	      this._bindEvent();
	    },
	    pageLeave: function pageLeave() {
	      this._unbindEvent();
	    },
	    destroy: function destroy() {},
	    /** 如果不需要处理icplayer的状态恢复事件, 请将以下两个方法删除掉**/
	    getState: function getState() {},
	    setState: function setState(state, options) {},
	    /** **以下开始为Presenter的私有方法*****/
	    _bindEvent: function _bindEvent() {
	      var that = this;
	      var presetBtns = that.$view.find('.pcs_preset_btn');
	      var presets = that.$view.find('.pcs_preset');
	      // 侧边栏预设选择、预设切换也要执行全屏事件
	      presetBtns.click(function () {
	        var $this = $(this);
	        presetBtns.removeClass('on');
	        $this.addClass('on');
	        presets.hide();
	        presets.eq($this.index()).show();
	        switch ($this.index()) {
	          case 0:
	            that.presetA.resizeScreenHandler();
	            break;
	          case 1:
	            if (!that.presetB) {
	              that.presetB = new _presetB2.default(that.$view, i18nModel);
	            }
	            that.presetB.resizeScreenHandler();
	            break;
	          case 2:
	            if (!that.presetC) {
	              that.presetC = new _presetC2.default(that.$view, i18nModel);
	            }
	            that.presetC.resizeScreenHandler();
	            break;
	          case 3:
	            if (!that.presetD) {
	              that.presetD = new _presetD2.default(that.$view, i18nModel);
	            }
	            that.presetD.resizeScreenHandler();
	            break;
	        }
	      });
	    },
	    _unbindEvent: function _unbindEvent() {}
	  });

	  window.AddonPolarCoordinateSystem_create = function () {
	    return new Presenter();
	  };
	})();

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _polarPoint = __webpack_require__(3);

	var _polarPoint2 = _interopRequireDefault(_polarPoint);

	var _polarAxis = __webpack_require__(5);

	var _polarAxis2 = _interopRequireDefault(_polarAxis);

	var _anyPoint = __webpack_require__(6);

	var _anyPoint2 = _interopRequireDefault(_anyPoint);

	var _utils = __webpack_require__(4);

	var _utils2 = _interopRequireDefault(_utils);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var dsvgWidth = 1512;
	var dsvgHeight = 876;
	var dpolarPointX = 440;
	var dpolarPointY = 435;
	var dpolarAxisLen = 590;

	var PresetA = function () {
	  function PresetA($view, i18nModel) {
	    _classCallCheck(this, PresetA);

	    this.$view = $view;
	    this._init();
	    this.i18nModel = i18nModel;
	  }

	  // 初始化


	  _createClass(PresetA, [{
	    key: '_init',
	    value: function _init() {
	      this.paper = Snap('.pcs_preset_1 svg');
	      this.paper.attr('viewBox', '0 0 ' + dsvgWidth + ' ' + dsvgHeight);
	      this.$selfView = this.$view.find('.pcs_preset_1');
	      this.svgContainer = this.$selfView.find('div.svg_container');
	      this.svgDom = this.svgContainer.find('svg')[0];
	      // 自适应缩放系数
	      this.scale = Math.min(this.svgContainer.width() / dsvgWidth, this.svgContainer.height() / dsvgHeight);
	      // 操作顺序数字
	      this.operateNum = -1;
	      this.polarPointBtn = this.$selfView.find('li.pcs_operate_1');
	      this.polarAxisBtn = this.$selfView.find('li.pcs_operate_2');
	      this.anyPointBtn = this.$selfView.find('li.pcs_operate_3');
	      this.operateBg = this.$selfView.find('li.pcs_operate_bg');
	      this.showCoordBtn = this.$selfView.find('a.pcs_show_coordinate');
	      this.showSymBtn = this.$selfView.find('a.pcs_show_point');
	      this.movePolarPoint = this.$selfView.find('div.move_polar_point');
	      this.movePolarAxis = this.$selfView.find('div.move_polar_axis');
	      this.movePoint = this.$selfView.find('div.move_point');
	      this.deleteBtn = this.$selfView.find('div.pcs_delete_btn');
	      this.stretchBtn = this.$selfView.find('div.pcs_stretch_btn');
	      this.stretchBtnWidth = this.stretchBtn.width();
	      // 极点坐标
	      this.orix = dpolarPointX;
	      this.oriy = dpolarPointY;
	      this._bindDom();
	    }
	  }, {
	    key: '_bindDom',
	    value: function _bindDom() {
	      var that = this;
	      // hasMove 判断底部工具栏是拖动还是点击
	      that.hasMove = false;
	      that.isToolMouseDown = false;
	      that._excuteToolMove = that._toolMove.bind(that);
	      // 极点、极轴、任意点按钮事件绑定
	      that.polarPointBtn.on('mousedown touchstart', function (e) {
	        e = e.originalEvent.touches ? e.originalEvent.touches[0] : e;
	        that._start(e, 0);
	      });
	      that.polarAxisBtn.on('mousedown touchstart', function (e) {
	        e = e.originalEvent.touches ? e.originalEvent.touches[0] : e;
	        that._start(e, 1);
	      });
	      that.anyPointBtn.on('mousedown touchstart', function (e) {
	        e = e.originalEvent.touches ? e.originalEvent.touches[0] : e;
	        that._start(e, 2);
	      });
	      $(document).on('mouseup touchend', function () {
	        that._end();
	      });
	      // 点击其他位置关闭编辑工具
	      that.svgContainer.on('mousedown touchstart', function () {
	        that.isCloseEdit = true;
	      });
	      // 显示极坐标按钮事件绑定
	      that.showCoordBtn.click(function () {
	        that._showCoord();
	      });
	      // 显示对称点事件绑定
	      that.showSymBtn.click(function () {
	        that._showSym();
	      });
	      // 删除按钮事件绑定
	      that.deleteBtn.on('mouseup touchend', function () {
	        that._delete();
	      });
	    }
	  }, {
	    key: '_start',
	    value: function _start(e, flowNum) {
	      this.hasMove = false;
	      this.isToolMouseDown = true;
	      // 记录初始数据
	      var point = _utils2.default.reportMouseCoordinates(this.svgDom, e.pageX, e.pageY, this.svgDom);
	      this.startX = point.x;
	      this.startY = point.y;
	      this.wrapperLeft = this.$selfView.offset().left;
	      this.wrapperTop = this.$selfView.offset().top;
	      this._controlFlow(flowNum);
	      $(document).on('mousemove touchmove', this._excuteToolMove);
	    }
	  }, {
	    key: '_toolMove',
	    value: function _toolMove(e) {
	      if (this.isToolMouseDown) {
	        e = e.originalEvent.touches ? e.originalEvent.touches[0] : e;
	        var point2 = _utils2.default.reportMouseCoordinates(this.svgDom, e.pageX, e.pageY, this.svgDom);
	        var startX2 = point2.x;
	        var startY2 = point2.y;
	        var operateObject = void 0;
	        // 拖动极点、极轴、任意点进入显示区
	        if (Math.abs(startX2 - this.startX) > 3 || Math.abs(startY2 - this.startY) > 3) {
	          this.hasMove = true;
	          switch (this.operateNum) {
	            case 0:
	              if (this.polarPointObject) {
	                this.isObjExist = true;return;
	              }
	              operateObject = this.movePolarPoint;
	              break;
	            case 1:
	              if (this.polarAxisObject) {
	                this.isObjExist = true;return;
	              }
	              operateObject = this.movePolarAxis;
	              break;
	            case 2:
	              if (this.anyPointObject) {
	                this.isObjExist = true;return;
	              }
	              operateObject = this.movePoint;
	              break;
	          }
	          operateObject.removeClass('hide_dom');
	          this.left = startX2;
	          this.top = startY2;
	          operateObject.css({
	            left: e.pageX - this.wrapperLeft - operateObject.innerWidth() / 2,
	            top: e.pageY - this.wrapperTop - operateObject.innerHeight() / 2
	          });
	        }
	      }
	    }
	  }, {
	    key: '_end',
	    value: function _end() {
	      if (this.isCloseEdit) {
	        this.deleteBtn.addClass('hide_dom');
	      }
	      this.isCloseEdit = false;
	      if (!this.isToolMouseDown) return;
	      this.isToolMouseDown = false;
	      // 拖动时边界判断
	      if (this.hasMove && !this.isObjExist && (this.left < 0 || this.left > dsvgWidth || this.top < 0 || this.top > dsvgHeight)) {
	        this.movePolarPoint.addClass('hide_dom');
	        this.movePolarAxis.addClass('hide_dom');
	        this.movePoint.addClass('hide_dom');
	        this.operateNum--;
	        this._controlFlow(this.operateNum, true);
	        return;
	      }
	      this._layObj();
	      this.hasMove = false;
	      this.isObjExist = false;
	      $(document).off('mousemove touchmove', this._excuteToolMove);
	    }
	  }, {
	    key: '_layObj',
	    value: function _layObj() {
	      // 绘制极点、极轴、任意点
	      switch (this.operateNum) {
	        case 0:
	          if (this.polarPointObject) return;
	          if (this.hasMove) {
	            if (this.left > dsvgWidth - dpolarAxisLen * 1.1 - this.stretchBtnWidth) {
	              this.left = dsvgWidth - dpolarAxisLen * 1.1 - this.stretchBtnWidth;
	            } else if (this.left < 140) {
	              this.left = 140;
	            }
	            if (this.top < 390) {
	              this.top = 390;
	            } else if (this.top > dsvgHeight - 50) {
	              this.top = dsvgHeight - 50;
	            }
	            this.orix = this.left;
	            this.oriy = this.top;
	            this.polarPointObject = new _polarPoint2.default({
	              paper: this.paper,
	              x: this.left,
	              y: this.top,
	              scale: this.scale,
	              view: this.$selfView,
	              dsvgWidth: dsvgWidth,
	              dsvgHeight: dsvgHeight
	            });
	            this.movePolarPoint.addClass('hide_dom');
	          } else {
	            this._click();
	          }
	          break;
	        case 1:
	          if (this.polarAxisObject) return;
	          if (this.hasMove) {
	            this.orix = parseInt(this.polarPointObject.polarPoint.attr('cx'));
	            this.oriy = parseInt(this.polarPointObject.polarPoint.attr('cy'));
	            this.polarAxisObject = new _polarAxis2.default({
	              paper: this.paper,
	              x: this.orix,
	              y: this.oriy,
	              scale: this.scale,
	              view: this.$selfView,
	              dsvgWidth: dsvgWidth,
	              dsvgHeight: dsvgHeight
	            });
	            this.polarAxisObject.setDrawMeasureFlag(true);
	            this.polarPointObject.addFollowObject(this.polarAxisObject);
	            this.polarAxisObject.addFollowObject(this.polarPointObject);
	            this.polarAxisObject.draw();
	            this.movePolarAxis.addClass('hide_dom');
	            this.polarAxisObject.polarAxis.after(this.polarPointObject.polarPoint);
	          } else {
	            this._click();
	          }
	          break;
	        case 2:
	          if (this.anyPointObject) return;
	          if (this.hasMove) {
	            this.orix = parseInt(this.polarPointObject.polarPoint.attr('cx'));
	            this.oriy = parseInt(this.polarPointObject.polarPoint.attr('cy'));
	            this.anyPointObject = new _anyPoint2.default({
	              paper: this.paper,
	              x: this.left,
	              y: this.top,
	              orix: this.orix,
	              oriy: this.oriy,
	              scale: this.scale,
	              view: this.$selfView,
	              perMeasure: this.polarAxisObject.perMeasure,
	              dsvgWidth: dsvgWidth,
	              dsvgHeight: dsvgHeight
	            });
	            this.anyPointObject.isMoreJudge = true;
	            this.anyPointObject.addControl(this);
	            this.polarPointObject.addFollowObject(this.anyPointObject);
	            this.polarAxisObject.addFollowObject(this.anyPointObject);
	            this.anyPointObject.openPolarAssist(true);
	            this.polarAxisObject.polarAxis.after(this.anyPointObject.lineToOrigin);
	            this.polarAxisObject.polarAxis.before(this.anyPointObject.degArc);
	            this.polarAxisObject.addPoint(this.anyPointObject);
	            this.movePoint.addClass('hide_dom');
	          } else {
	            this._click();
	          }
	      }
	    }

	    // 点击产生极点极轴和任意点

	  }, {
	    key: '_click',
	    value: function _click() {
	      var that = this;
	      switch (that.operateNum) {
	        case 0:
	          if (that.polarPointObject) return;
	          that.polarPointObject = new _polarPoint2.default({
	            paper: that.paper,
	            x: dpolarPointX,
	            y: dpolarPointY,
	            scale: that.scale,
	            view: that.$selfView,
	            dsvgWidth: dsvgWidth,
	            dsvgHeight: dsvgHeight
	          });
	          that.orix = dpolarPointX;
	          that.oriy = dpolarPointY;
	          break;
	        case 1:
	          if (that.polarAxisObject) return;
	          that.orix = parseInt(that.polarPointObject.polarPoint.attr('cx'));
	          that.oriy = parseInt(that.polarPointObject.polarPoint.attr('cy'));
	          that.polarAxisObject = new _polarAxis2.default({
	            paper: that.paper,
	            x: that.orix,
	            y: that.oriy,
	            scale: that.scale,
	            view: that.$selfView,
	            dsvgWidth: dsvgWidth,
	            dsvgHeight: dsvgHeight
	          });
	          that.polarPointObject.addFollowObject(that.polarAxisObject);
	          that.polarAxisObject.addFollowObject(that.polarPointObject);
	          that.polarAxisObject.setDrawMeasureFlag(true);
	          that.polarAxisObject.draw();
	          that.polarAxisObject.polarAxis.after(that.polarPointObject.polarPoint);
	          break;
	        case 2:
	          if (that.anyPointObject) return;
	          that.orix = parseInt(that.polarPointObject.polarPoint.attr('cx'));
	          that.oriy = parseInt(that.polarPointObject.polarPoint.attr('cy'));
	          var x = that.orix + Math.cos(Math.PI / 4) * 450;
	          var y = that.oriy - Math.sin(Math.PI / 4) * 450;
	          that.anyPointObject = new _anyPoint2.default({
	            paper: that.paper,
	            x: x,
	            y: y,
	            orix: that.orix,
	            oriy: that.oriy,
	            scale: that.scale,
	            view: that.$selfView,
	            perMeasure: that.polarAxisObject.perMeasure,
	            dsvgWidth: dsvgWidth,
	            dsvgHeight: dsvgHeight
	          });
	          that.anyPointObject.isMoreJudge = true;
	          that.anyPointObject.addControl(that);
	          that.polarPointObject.addFollowObject(that.anyPointObject);
	          that.polarAxisObject.addFollowObject(that.anyPointObject);
	          that.anyPointObject.openPolarAssist(true);
	          that.polarAxisObject.polarAxis.after(that.anyPointObject.lineToOrigin);
	          that.polarAxisObject.polarAxis.before(that.anyPointObject.degArc);
	          that.polarAxisObject.addPoint(that.anyPointObject);
	          break;
	      }
	    }

	    // 吸附极轴和原点

	  }, {
	    key: 'snap',
	    value: function snap() {
	      var that = this;
	      if (that.anyPointObject) {
	        var x = parseFloat(that.anyPointObject.anyPoint.attr('cx'));
	        var y = parseFloat(that.anyPointObject.anyPoint.attr('cy'));
	        if (Math.abs(x - that.anyPointObject.orix) < 32 && Math.abs(y - that.anyPointObject.oriy) < 32) {
	          that.anyPointObject.deg = 0;
	          that.anyPointObject.changePos(that.anyPointObject.orix, that.anyPointObject.oriy);
	        } else if (Math.abs(y - that.anyPointObject.oriy) < 27) {
	          that.anyPointObject.deg = x >= that.anyPointObject.orix ? 0 : 180;
	          that.anyPointObject.changePos(x, that.anyPointObject.oriy);
	        }
	      }
	    }
	  }, {
	    key: 'resizeScreenHandler',
	    value: function resizeScreenHandler(ratio) {
	      this.scale = Math.min(this.svgContainer.width() / dsvgWidth, this.svgContainer.height() / dsvgHeight);
	      this.polarPointObject && this.polarPointObject.resizeScreenHandler(this.scale);
	      this.polarAxisObject && this.polarAxisObject.resizeScreenHandler(this.scale);
	      this.anyPointObject && this.anyPointObject.resizeScreenHandler(this.scale);
	      switch (this.operateNum) {
	        case -1:
	          this.operateBg.addClass('hide_dom');
	          break;
	        case 0:
	          this.operateBg.removeClass('hide_dom').width(this.polarPointBtn.innerWidth());
	          break;
	        case 1:
	          this.operateBg.show().width(this.polarAxisBtn.innerWidth() + this.polarPointBtn.innerWidth());
	          break;
	        case 2:
	          this.operateBg.width(this.anyPointBtn.innerWidth() + this.polarPointBtn.innerWidth() + this.polarAxisBtn.innerWidth());
	          break;
	      }
	    }
	  }, {
	    key: '_showCoord',
	    value: function _showCoord() {
	      var showCoordBtn = this.showCoordBtn;
	      if (!showCoordBtn.hasClass('click_disabled')) {
	        if (showCoordBtn.hasClass('ui_btn_active')) {
	          this.anyPointObject.hidePolarCoords();
	          showCoordBtn.find('span').text(this.i18nModel.show_polar_coord);
	          showCoordBtn.removeClass('ui_btn_active');
	        } else {
	          this.anyPointObject.showPolarCoords();
	          showCoordBtn.find('span').text(this.i18nModel.hide_polar_coord);
	          showCoordBtn.addClass('ui_btn_active');
	        }
	      }
	    }
	  }, {
	    key: '_showSym',
	    value: function _showSym() {
	      var showSymBtn = this.showSymBtn;
	      if (!showSymBtn.hasClass('click_disabled')) {
	        if (showSymBtn.hasClass('ui_btn_active')) {
	          this.anyPointObject.hideSym();
	          showSymBtn.removeClass('ui_btn_active');
	          showSymBtn.find('span').text(this.i18nModel.show_sym_point);
	        } else {
	          if (this.anyPointObject.showSym(true)) {
	            showSymBtn.addClass('ui_btn_active');
	            showSymBtn.find('span').text(this.i18nModel.hide_sym_point);
	          }
	        }
	      }
	    }
	  }, {
	    key: '_delete',
	    value: function _delete() {
	      var that = this;
	      switch (that.deleteBtn.data('trigger')) {
	        case 0:
	          that.polarPointObject.remove();
	          that.polarPointObject = null;
	          if (that.polarAxisObject) {
	            that.polarAxisObject.remove();
	            that.polarAxisObject = null;
	          }
	          if (that.anyPointObject) {
	            that.anyPointObject.remove();
	            that.anyPointObject = null;
	          }
	          that._controlFlow(-1, true);
	          break;
	        case 1:
	          if (that.anyPointObject) {
	            that.anyPointObject.remove();
	            that.anyPointObject = null;
	          }
	          that.polarPointObject.followObjects.pop();
	          that.polarPointObject.followObjects.pop();
	          that.polarAxisObject.remove();
	          that.polarAxisObject = null;
	          that._controlFlow(0, true);
	          break;
	        case 2:
	          that.anyPointObject.remove();
	          that.polarAxisObject.addPoint(null);
	          that.anyPointObject = null;
	          that.polarAxisObject.followObjects.pop();
	          that.polarPointObject.followObjects.pop();
	          that._controlFlow(1, true);
	          break;
	      }
	      that.deleteBtn.addClass('hide_dom');
	    }

	    // 极点、极轴、任意点逻辑控制

	  }, {
	    key: '_controlFlow',
	    value: function _controlFlow(num, isDeleteOperate) {
	      if (this.operateNum + 1 !== num && !isDeleteOperate) return;
	      this.operateNum = num;
	      this._resetFlow();
	      switch (num) {
	        case 0:
	          this._flowOne();
	          break;
	        case 1:
	          this._flowTwo();
	          break;
	        case 2:
	          this._flowThree();
	          break;
	      }
	    }
	  }, {
	    key: '_flowOne',
	    value: function _flowOne() {
	      this.operateBg.removeClass('hide_dom').width(this.polarPointBtn.innerWidth());
	      this.polarAxisBtn.addClass('on');
	    }
	  }, {
	    key: '_flowTwo',
	    value: function _flowTwo() {
	      this._flowOne();
	      this.anyPointBtn.addClass('on');
	      this.operateBg.show().width(this.polarAxisBtn.innerWidth() + this.polarPointBtn.innerWidth());
	    }
	  }, {
	    key: '_flowThree',
	    value: function _flowThree() {
	      this._flowOne();
	      this._flowTwo();
	      this.operateBg.width(this.anyPointBtn.innerWidth() + this.polarPointBtn.innerWidth() + this.polarAxisBtn.innerWidth());
	      this.showCoordBtn.removeClass('click_disabled').removeClass('ui_btn_active');
	      this.showSymBtn.removeClass('click_disabled').removeClass('ui_btn_active');
	    }
	  }, {
	    key: '_resetFlow',
	    value: function _resetFlow() {
	      this.operateBg.addClass('hide_dom');
	      this.showCoordBtn.addClass('click_disabled');
	      this.showSymBtn.addClass('click_disabled');
	      this.showCoordBtn.find('span').text(this.i18nModel.show_polar_coord);
	      this.showSymBtn.find('span').text(this.i18nModel.show_sym_point);
	      this.polarAxisBtn.removeClass('on');
	      this.anyPointBtn.removeClass('on');
	    }
	  }]);

	  return PresetA;
	}();

	exports.default = PresetA;

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _utils = __webpack_require__(4);

	var _utils2 = _interopRequireDefault(_utils);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var pointRaidus = 15.5;
	var pointStrokeWidth = 5;
	var dpolarAxisLen = 590;

	var PolarPoint = function () {
	  function PolarPoint(options) {
	    _classCallCheck(this, PolarPoint);

	    this.paper = options.paper;
	    this.x = options.x;
	    this.y = options.y;
	    this.scale = options.scale;
	    this.$view = options.view;
	    this.svgDom = this.$view.find('svg')[0];
	    this.r = pointRaidus;
	    this.dsvgWidth = options.dsvgWidth;
	    this.dsvgHeight = options.dsvgHeight;
	    this.followObjects = [];
	    this._init();
	  }

	  _createClass(PolarPoint, [{
	    key: '_init',
	    value: function _init() {
	      var that = this;
	      // svg极点
	      that.polarPoint = that.paper.circle(that.x, that.y, that.r).attr({
	        fill: '#ffffff',
	        stroke: '#cb2627',
	        strokeWidth: pointStrokeWidth,
	        cursor: 'pointer'
	      });
	      // 删除按钮
	      that.deleteBtn = that.$view.find('div.pcs_delete_btn');
	      that.svgContainer = that.$view.find('.svg_container');
	      // that.svgWidth = that.svgContainer.width()
	      // that.svgHeight = that.svgContainer.height()
	      // 极轴的长度变化按钮 用于移动边界判断
	      that.stretchBtn = that.$view.find('div.pcs_stretch_btn');
	      that._bindDom();
	    }
	  }, {
	    key: '_bindDom',
	    value: function _bindDom() {
	      var that = this;
	      that._excuteMove = that._move.bind(this);
	      that.polarPoint.mousedown(function (e) {
	        that._start(e);
	      });

	      that.polarPoint.touchstart(function (e) {
	        e = e.touches[0];
	        that._start(e);
	      });

	      $(document).on('mouseup touchend', function (e) {
	        that._end(e);
	      });
	    }
	  }, {
	    key: '_start',
	    value: function _start(e) {
	      this.hasMove = false;
	      this.isMouseDown = true;
	      var point = _utils2.default.reportMouseCoordinates(this.svgDom, e.pageX, e.pageY, this.svgDom);
	      this.startX = point.x;
	      this.startY = point.y;
	      this.initX = parseInt(this.polarPoint.attr('cx'));
	      this.initY = parseInt(this.polarPoint.attr('cy'));
	      // 用于预设4的图形随动
	      if (this.preset) {
	        if (this.preset.squareObject) {
	          this.shapeX = parseInt(this.preset.squareObject.attr('x'));
	          this.shapeY = parseInt(this.preset.squareObject.attr('y'));
	        } else if (this.preset.triangleObject) {
	          this.shapeX = this.preset.triangleObject.data('x');
	          this.shapeY = this.preset.triangleObject.data('y');
	        } else if (this.preset.circleObject) {
	          this.shapeX = parseInt(this.preset.circleObject.attr('cx'));
	          this.shapeY = parseInt(this.preset.circleObject.attr('cy'));
	        }
	      }
	      $(document).on('mousemove touchmove', this._excuteMove);
	    }
	  }, {
	    key: '_move',
	    value: function _move(e) {
	      var that = this;
	      if (that.isMouseDown) {
	        e = e.originalEvent.touches ? e.originalEvent.touches[0] : e;
	        var point = _utils2.default.reportMouseCoordinates(this.svgDom, e.pageX, e.pageY, this.svgDom);
	        var startX2 = point.x;
	        var startY2 = point.y;
	        if (Math.abs(startX2 - that.startX) > 3 || Math.abs(startY2 - that.startY) > 3) {
	          that.closeEdit();
	          that.hasMove = true;
	          var newX = that.initX + startX2 - that.startX;
	          var newY = that.initY + startY2 - that.startY;
	          var restrict = 50;
	          // 自身移动边界判断
	          if (newX < restrict * 2.8) {
	            newX = restrict * 2.8;
	          }
	          if (newY > that.dsvgHeight - restrict) {
	            newY = that.dsvgHeight - restrict;
	          }
	          // 没有极轴下边界判断，防止点击极轴时超出
	          var stretchBtnWidth = that.stretchBtn.width() / that.scale;
	          if (!that.followObjects[0]) {
	            if (newX > that.dsvgWidth - dpolarAxisLen * 1.1 - stretchBtnWidth) {
	              newX = that.dsvgWidth - dpolarAxisLen * 1.1 - stretchBtnWidth;
	            }
	          } else {
	            if (newX > that.dsvgWidth - restrict) {
	              newX = that.dsvgWidth - restrict;
	            }
	          }
	          // 没有任意点下边界判断，防止点击极点时超出
	          if (!that.followObjects[1]) {
	            if (newY < 390) {
	              newY = 390;
	            }
	          } else {
	            if (newY < restrict) {
	              newY = restrict;
	            }
	          }
	          // 加入任意点极轴后移动边界判断
	          for (var i = 0; i < that.followObjects.length; i++) {
	            var newCoord = that.followObjects[i].getMoveRange(newX, newY);
	            newX = newCoord.newX;
	            newY = newCoord.newY;
	          }
	          // 预设4加入图形后移动边界判断
	          if (that.preset) {
	            if (that.preset.squareObject || that.preset.triangleObject || that.preset.circleObject) {
	              var _newCoord = that.preset.getMoveRange(newX, newY);
	              newX = _newCoord.newX;
	              newY = _newCoord.newY;
	            }
	          }
	          // 改变位置
	          that.polarPoint.attr({
	            cx: newX,
	            cy: newY
	          });
	          // 极点极轴随动
	          for (var _i = 0; _i < this.followObjects.length; _i++) {
	            if (_i === 0) {
	              this.followObjects[_i].changeLinePos(newX, newY);
	            } else {
	              this.followObjects[_i].followPolarPoint(newX, newY);
	            }
	          }
	          // 预设4图形随动
	          var newShapeX = newX - that.initX + that.shapeX;
	          var newShapeY = newY - that.initY + that.shapeY;
	          if (that.preset) {
	            if (that.preset.squareObject) {
	              that.preset.changeSquarePos(newShapeX, newShapeY);
	            }
	            if (that.preset.triangleObject) {
	              that.preset.changeTrianglePos(newShapeX, newShapeY);
	            }
	            if (that.preset.circleObject) {
	              that.preset.changeCirclePos(newShapeX, newShapeY);
	            }
	          }
	        }
	      }
	    }
	  }, {
	    key: '_end',
	    value: function _end(e) {
	      var that = this;
	      // 判断是移动还是点击
	      if (!that.hasMove && e.target === that.polarPoint.node) {
	        that._click();
	      }
	      that.isMouseDown = false;
	      $(document).off('mousemove touchmove', this._excuteMove);
	    }

	    // 获取移动范围

	  }, {
	    key: 'getMoveRange',
	    value: function getMoveRange(x, y) {
	      var restrict = 50;
	      var newX = x;
	      var newY = y;
	      if (newX < restrict * 2.8) {
	        newX = restrict * 2.8;
	      } else if (newX > this.dsvgWidth - restrict) {
	        newX = this.dsvgWidth - restrict;
	      }
	      if (newY < restrict) {
	        newY = restrict;
	      } else if (newY > this.dsvgHeight - restrict) {
	        newY = this.dsvgHeight - restrict;
	      }
	      return { newX: newX, newY: newY };
	    }
	  }, {
	    key: 'addFollowObject',
	    value: function addFollowObject(method) {
	      this.followObjects.push(method);
	    }
	  }, {
	    key: 'addControl',
	    value: function addControl(preset) {
	      this.preset = preset;
	    }

	    // 点击极点进入编辑态

	  }, {
	    key: '_click',
	    value: function _click() {
	      var that = this;
	      var x = parseInt(that.polarPoint.attr('cx'));
	      var y = parseInt(that.polarPoint.attr('cy'));
	      var left = x - that.r * 3 - that.deleteBtn.innerWidth() / that.scale;
	      var top = y - that.deleteBtn.innerHeight() / (2 * that.scale);
	      that.deleteBtn.removeClass('hide_dom').css({
	        left: left * that.scale,
	        top: top * that.scale
	      }).data('trigger', 0);
	    }
	  }, {
	    key: 'relocateDom',
	    value: function relocateDom() {
	      if (!this.deleteBtn.hasClass('hide_dom') && this.deleteBtn.data('trigger') == 0) {
	        this._click();
	      }
	    }
	  }, {
	    key: 'resizeScreenHandler',
	    value: function resizeScreenHandler(scale) {
	      this.scale = scale;
	      this.relocateDom();
	    }

	    // 改变极点位置

	  }, {
	    key: 'changePos',
	    value: function changePos(x, y) {
	      this.polarPoint.attr({
	        cx: x,
	        cy: y
	      });
	    }

	    // 删除极点

	  }, {
	    key: 'remove',
	    value: function remove() {
	      this.polarPoint.remove();
	    }

	    // 关闭编辑态

	  }, {
	    key: 'closeEdit',
	    value: function closeEdit() {
	      this.deleteBtn.addClass('hide_dom');
	      if (this.preset && this.preset.keyboardBox) {
	        this.preset.keyboardBox.addClass('hide_dom');
	        this.preset.keyboardList.addClass('hide_dom');
	      }
	      if (this.followObjects[0]) {
	        this.followObjects[0].slideBlock.addClass('hide_dom');
	        this.followObjects[0].stretchBtn.addClass('hide_dom');
	      }
	    }
	  }]);

	  return PolarPoint;
	}();

	exports.default = PolarPoint;

/***/ }),
/* 4 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Utils = function () {
	  function Utils() {
	    _classCallCheck(this, Utils);
	  }

	  _createClass(Utils, null, [{
	    key: "getDistance",
	    value: function getDistance(x1, y1, x2, y2) {
	      return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));
	    }

	    // 求两个数的最大公约数

	  }, {
	    key: "getGongYueShu",
	    value: function getGongYueShu(a, b) {
	      if (parseInt(a) === 0 || parseInt(b) === 0) {
	        return 0;
	      }
	      var t = 0;
	      if (a < b) {
	        t = a;
	        a = b;
	        b = t;
	      }
	      var c = a % b;
	      if (c == 0) {
	        return b;
	      } else {
	        return Utils.getGongYueShu(b, c);
	      }
	    }
	  }, {
	    key: "reportMouseCoordinates",
	    value: function reportMouseCoordinates(svgElement, pageX, pageY, svgChild) {
	      var point = svgElement.createSVGPoint();
	      point.x = pageX;
	      point.y = pageY;
	      point = _coordinateTransform(point, svgChild);
	      return point;
	    }
	  }]);

	  return Utils;
	}();

	/* 获取svg对象的转化矩阵并求其逆矩阵*/


	function _coordinateTransform(screenPoint, someSvgObject) {
	  var CTM = someSvgObject.getScreenCTM();
	  return screenPoint.matrixTransform(CTM.inverse());
	}

	exports.default = Utils;

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _utils = __webpack_require__(4);

	var _utils2 = _interopRequireDefault(_utils);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var PolarAxis = function () {
	  function PolarAxis(options) {
	    _classCallCheck(this, PolarAxis);

	    this.paper = options.paper;
	    this.x = options.x;
	    this.y = options.y;
	    this.scale = options.scale;
	    this.len = 590;
	    this.perMeasure = 90;
	    this.$view = options.view;
	    this.svgDom = this.$view.find('svg')[0];
	    this.dsvgWidth = options.dsvgWidth;
	    this.dsvgHeight = options.dsvgHeight;
	    this._init();
	  }

	  _createClass(PolarAxis, [{
	    key: '_init',
	    value: function _init() {
	      var that = this;
	      that.polarAxis = that.paper.g().attr({
	        cursor: 'pointer'
	      });
	      // 极轴线加箭头
	      that.g1 = that.polarAxis.g();
	      // 极轴线点击区
	      that.g3 = that.polarAxis.g();
	      // 极轴刻度
	      that.g2 = that.polarAxis.g();
	      // 删除按钮
	      that.deleteBtn = that.$view.find('div.pcs_delete_btn');
	      // 改变单位长度按钮
	      that.slideBlock = that.$view.find('div.pcs_slide_block');
	      // 改变极轴长按钮
	      that.stretchBtn = that.$view.find('div.pcs_stretch_btn');
	      that.svgContainer = that.$view.find('div.svg_container');
	      // that.svgWidth = that.svgContainer.width()
	      // that.svgHeight = that.svgContainer.height()
	      that._bindDom();
	      that.followObjects = [];
	    }
	  }, {
	    key: '_bindDom',
	    value: function _bindDom() {
	      var that = this;
	      that._excuteMove = that._move.bind(this);
	      that.polarAxis.mousedown(function (e) {
	        that._start(e);
	      });
	      that.polarAxis.touchstart(function (e) {
	        e = e.touches[0];
	        that._start(e);
	      });

	      that.slideBlockMove = that._adjustMeasure.bind(that);
	      // 单位长度按钮事件绑定
	      that.slideBlock.on('mousedown touchstart', function (e) {
	        that._slideBlockStart(e);
	      });

	      that.stretchBtnMove = that._adjustLen.bind(that);
	      // 极轴长度按钮事件绑定
	      that.stretchBtn.on('mousedown touchstart', function (e) {
	        that._stretchBtnStart(e);
	      });

	      // 点击其他位置关闭编辑态
	      that.svgContainer.on('mousedown touchstart', function () {
	        that.isCloseEdit = true;
	      });

	      $(document).on('mouseup touchend', function (e) {
	        that._end(e);
	      });
	    }
	  }, {
	    key: '_start',
	    value: function _start(e) {
	      e.stopPropagation();
	      var that = this;
	      that.hasMove = false;
	      that.isMouseDown = true;
	      var point = _utils2.default.reportMouseCoordinates(this.svgDom, e.pageX, e.pageY, this.svgDom);
	      that.startX = point.x;
	      that.startY = point.y;
	      that.initX = that.x;
	      that.initY = that.y;
	      // 预设4的图形随动初始位置记录
	      if (that.preset) {
	        if (that.preset.squareObject) {
	          that.shapeX = parseInt(that.preset.squareObject.attr('x'));
	          that.shapeY = parseInt(that.preset.squareObject.attr('y'));
	        } else if (that.preset.triangleObject) {
	          that.shapeX = that.preset.triangleObject.data('x');
	          that.shapeY = that.preset.triangleObject.data('y');
	        } else if (that.preset.circleObject) {
	          that.shapeX = parseInt(that.preset.circleObject.attr('cx'));
	          that.shapeY = parseInt(that.preset.circleObject.attr('cy'));
	        }
	      }
	      $(document).on('mousemove touchmove', this._excuteMove);
	    }
	  }, {
	    key: '_slideBlockStart',
	    value: function _slideBlockStart(e) {
	      e.stopPropagation();
	      e = e.originalEvent.touches ? e.originalEvent.touches[0] : e;
	      var point = _utils2.default.reportMouseCoordinates(this.svgDom, e.pageX, e.pageY, this.svgDom);
	      this.startX = point.x;
	      this.initPerMeasure = this.perMeasure;
	      this.initLeft = parseFloat(this.slideBlock.css('left')) / this.scale;
	      $(document).on('mousemove touchmove', this.slideBlockMove);
	    }
	  }, {
	    key: '_stretchBtnStart',
	    value: function _stretchBtnStart(e) {
	      e.stopPropagation();
	      e = e.originalEvent.touches ? e.originalEvent.touches[0] : e;
	      var point = _utils2.default.reportMouseCoordinates(this.svgDom, e.pageX, e.pageY, this.svgDom);
	      this.startX = point.x;
	      this.initLen = this.len;
	      this.initLeft = parseFloat(this.stretchBtn.css('left')) / this.scale;
	      $(document).on('mousemove touchmove', this.stretchBtnMove);
	    }
	  }, {
	    key: '_move',
	    value: function _move(e) {
	      var that = this;
	      if (that.isMouseDown) {
	        e = e.originalEvent.touches ? e.originalEvent.touches[0] : e;
	        var point2 = _utils2.default.reportMouseCoordinates(this.svgDom, e.pageX, e.pageY, this.svgDom);
	        var startX2 = point2.x;
	        var startY2 = point2.y;
	        if (Math.abs(startX2 - that.startX) > 3 || Math.abs(startY2 - that.startY) > 3) {
	          that.closeEdit();
	          that.hasMove = true;
	          var newX = that.initX + startX2 - that.startX;
	          var newY = that.initY + startY2 - that.startY;
	          // 自身移动边界判断
	          var newCoord = that.getMoveRange(newX, newY);
	          newX = newCoord.newX;
	          newY = newCoord.newY;
	          // 极点和任意点移动边界判断
	          for (var i = 0; i < this.followObjects.length; i++) {
	            var _newCoord = this.followObjects[i].getMoveRange(newX, newY);
	            newX = _newCoord.newX;
	            newY = _newCoord.newY;
	          }
	          // 预设4图形移动边界判断
	          if (that.preset) {
	            if (that.preset.squareObject || that.preset.triangleObject || that.preset.circleObject) {
	              var _newCoord2 = that.preset.getMoveRange(newX, newY);
	              newX = _newCoord2.newX;
	              newY = _newCoord2.newY;
	            }
	          }
	          // 改变位置
	          that.x = newX;
	          that.y = newY;
	          that.changeLinePos(that.x, that.y);
	          // 极点和任意点随动
	          for (var _i = 0; _i < this.followObjects.length; _i++) {
	            if (_i === 0) {
	              this.followObjects[_i].changePos(newX, newY);
	            } else {
	              this.followObjects[_i].followPolarPoint(newX, newY);
	            }
	          }
	          // 预设4图形随动
	          var newShapeX = newX - that.initX + that.shapeX;
	          var newShapeY = newY - that.initY + that.shapeY;
	          if (that.preset) {
	            if (that.preset.squareObject) {
	              that.preset.changeSquarePos(newShapeX, newShapeY);
	            }
	            if (that.preset.triangleObject) {
	              that.preset.changeTrianglePos(newShapeX, newShapeY);
	            }
	            if (that.preset.circleObject) {
	              that.preset.changeCirclePos(newShapeX, newShapeY);
	            }
	          }
	        }
	      }
	    }
	  }, {
	    key: '_end',
	    value: function _end(e) {
	      var that = this;
	      var flag = e.target.parentNode.parentNode === that.polarAxis.node;
	      // 判断是移动还是点击
	      if (!that.hasMove && flag) {
	        that._click();
	      }
	      that.isMouseDown = false;
	      if (that.isCloseEdit) {
	        that.slideBlock.addClass('hide_dom');
	        that.stretchBtn.addClass('hide_dom');
	      }
	      that.isCloseEdit = false;
	      $(document).off('mousemove touchmove', that._excuteMove);
	      $(document).off('mousemove touchmove', that.slideBlockMove);
	      $(document).off('mousemove touchmove', that.stretchBtnMove);
	    }

	    // 极轴点击进入编辑态

	  }, {
	    key: '_click',
	    value: function _click() {
	      var that = this;
	      var left = that.x + that.len / 2 - that.deleteBtn.innerWidth() / (2 * that.scale);
	      var top = that.y + 40;
	      that.deleteBtn.removeClass('hide_dom').css({
	        left: left * that.scale,
	        top: top * that.scale
	      }).data('trigger', 1);
	      left = that.x + that.perMeasure - that.slideBlock.innerWidth() / (2 * that.scale);
	      top = that.y - that.slideBlock.innerHeight() / (2 * that.scale);
	      that.slideBlock.removeClass('hide_dom').css({
	        left: left * that.scale,
	        top: top * that.scale
	      });
	      left = that.x + that.len + 30;
	      top = that.y - that.stretchBtn.innerHeight() / (2 * that.scale);
	      that.stretchBtn.removeClass('hide_dom').css({
	        left: left * that.scale,
	        top: top * that.scale
	      });
	    }

	    // 调整单位长度

	  }, {
	    key: '_adjustMeasure',
	    value: function _adjustMeasure(e) {
	      var slideBlockWidth = this.slideBlock.width() / this.scale;
	      e = e.originalEvent.touches ? e.originalEvent.touches[0] : e;
	      var point = _utils2.default.reportMouseCoordinates(this.svgDom, e.pageX, e.pageY, this.svgDom);
	      var endX = point.x;
	      var delta = endX - this.startX;
	      var newLeft = this.initLeft + delta;
	      // 边界判断
	      if (newLeft < this.x + 17) {
	        newLeft = this.x + 17;
	        delta = newLeft - this.initLeft;
	      } else if (newLeft > this.x + this.len - slideBlockWidth * 1.4) {
	        newLeft = this.x + this.len - slideBlockWidth * 1.4;
	        delta = newLeft - this.initLeft;
	      }
	      this.slideBlock.css('left', newLeft * this.scale);
	      this.perMeasure = delta + this.initPerMeasure;
	      this.g2.selectAll('*').remove();
	      this._drawMeasure();
	      // 极点存在的话相关数据改变
	      if (this.anyPoint) {
	        this.anyPoint.perMeasure = this.perMeasure;
	        this.anyPoint.calcuAndDrawText();
	        this.anyPoint._drawDegArc();
	        if (this.anyPoint.isShowPolarCoords) {
	          this.anyPoint.showPolarCoords();
	        }
	        if (this.anyPoint.isShowSym) {
	          this.anyPoint._drawSymText();
	          this.anyPoint._drawSymDegArc();
	        }
	      }
	    }

	    // 调整极轴总长度

	  }, {
	    key: '_adjustLen',
	    value: function _adjustLen(e) {
	      var slideBlockWidth = this.slideBlock.width() / this.scale;
	      var stretchBtnWidth = this.stretchBtn.width() / this.scale;
	      e = e.originalEvent.touches ? e.originalEvent.touches[0] : e;
	      var point = _utils2.default.reportMouseCoordinates(this.svgDom, e.pageX, e.pageY, this.svgDom);
	      var endX = point.x;
	      var delta = endX - this.startX;
	      var newLeft = this.initLeft + delta;
	      // 边界判断
	      if (newLeft < this.x + this.perMeasure + slideBlockWidth * 2) {
	        newLeft = this.x + this.perMeasure + slideBlockWidth * 2;
	        delta = newLeft - this.initLeft;
	      } else if (newLeft > this.dsvgWidth - stretchBtnWidth * 1.4 - 15) {
	        newLeft = this.dsvgWidth - stretchBtnWidth * 1.4 - 15;
	        delta = newLeft - this.initLeft;
	      }
	      this.stretchBtn.css('left', newLeft * this.scale);
	      this.len = delta + this.initLen;
	      this.g1.selectAll('*').remove();
	      this.g2.selectAll('*').remove();
	      this.g3.selectAll('*').remove();
	      this.draw();
	    }
	  }, {
	    key: 'relocateDom',
	    value: function relocateDom() {
	      if (!this.deleteBtn.hasClass('hide_dom') && this.deleteBtn.data('trigger') == 1) {
	        this._click();
	      }
	    }
	  }, {
	    key: 'resizeScreenHandler',
	    value: function resizeScreenHandler(scale) {
	      this.scale = scale;
	      this.relocateDom();
	    }
	  }, {
	    key: 'addControl',
	    value: function addControl(preset) {
	      this.preset = preset;
	    }

	    // 绘制极轴

	  }, {
	    key: 'draw',
	    value: function draw() {
	      this.drawLine();
	      this._drawMeasure();
	    }

	    // 设置极轴长度

	  }, {
	    key: 'setLen',
	    value: function setLen(len) {
	      this.len = len;
	    }

	    // 获取极轴移动范围

	  }, {
	    key: 'getMoveRange',
	    value: function getMoveRange(x, y) {
	      var restrict = 50;
	      var newX = x;
	      var newY = y;
	      if (x < restrict) {
	        newX = restrict;
	      } else if (x + this.len > this.dsvgWidth - restrict * 2.6) {
	        newX = this.dsvgWidth - restrict * 2.6 - this.len;
	      }
	      if (!this.followObjects[1]) {
	        if (newY < 390) {
	          newY = 390;
	        }
	      } else {
	        if (newY < restrict) {
	          newY = restrict;
	        }
	      }
	      if (y > this.dsvgHeight - restrict * 2.8) {
	        newY = this.dsvgHeight - restrict * 2.8;
	      }
	      return { newX: newX, newY: newY };
	    }

	    // 改变极轴位置

	  }, {
	    key: 'changeLinePos',
	    value: function changeLinePos(x, y) {
	      var that = this;
	      var destX = x + that.len;
	      var destY = y;
	      that.x = x;
	      that.y = y;
	      that.mask.attr({
	        x1: x,
	        y1: y,
	        x2: destX,
	        y2: destY
	      });
	      that.line.attr({
	        x1: x,
	        y1: y,
	        x2: destX,
	        y2: destY
	      });
	      var arrowPath = 'M{x1} {y1}Q{cx1} {cy1} {x2} {y2}Q{cx2} {cy2} {x3} {y3}Q{cx3} {cy3} {x4} {y4}Q{cx4} {cy4} {x5} {y5}';
	      arrowPath = Snap.format(arrowPath, {
	        x1: destX,
	        y1: destY,
	        cx1: destX - 6,
	        cy1: destY + 5,
	        x2: destX - 12,
	        y2: destY + 22,
	        cx2: destX,
	        cy2: destY + 6,
	        x3: destX + 18,
	        y3: destY,
	        cx3: destX,
	        cy3: destY - 6,
	        x4: destX - 12,
	        y4: destY - 22,
	        cx4: destX - 6,
	        cy4: destY - 5,
	        x5: destX,
	        y5: destY
	      });
	      that.lineArrow.attr('d', arrowPath);
	      if (that.isDrawMeasure) {
	        that.g2.selectAll('*').remove();
	        for (var i = 1; i < (that.len - 20) / that.perMeasure; i++) {
	          var x1 = x + i * that.perMeasure;
	          var y1 = y;
	          that.g2.line(x1, y1, x1, y1 - 20).attr({
	            stroke: '#4d4d4d',
	            strokeWidth: 8
	          });
	        }
	      }
	    }

	    // 是否绘制刻度

	  }, {
	    key: 'setDrawMeasureFlag',
	    value: function setDrawMeasureFlag(flag) {
	      this.isDrawMeasure = flag;
	    }

	    // 绘制直线、刻度、点击区

	  }, {
	    key: 'drawLine',
	    value: function drawLine() {
	      var that = this;
	      var destX = that.x + that.len;
	      var destY = that.y;
	      if (that.mask) {
	        that.mask.remove();
	      }
	      if (that.line) {
	        that.line.remove();
	      }
	      if (that.lineArrow) {
	        that.lineArrow.remove();
	      }
	      // 扩大点击区域
	      that.mask = that.g3.line(that.x, that.y, destX, destY).attr({
	        stroke: 'rgba(0,0,0,0)',
	        strokeWidth: 50
	      });
	      that.line = that.g1.line(that.x, that.y, destX, destY).attr({
	        stroke: '#4d4d4d',
	        strokeWidth: 10
	      });
	      var arrowPath = 'M{x1} {y1}Q{cx1} {cy1} {x2} {y2}Q{cx2} {cy2} {x3} {y3}Q{cx3} {cy3} {x4} {y4}Q{cx4} {cy4} {x5} {y5}';
	      arrowPath = Snap.format(arrowPath, {
	        x1: destX,
	        y1: destY,
	        cx1: destX - 6,
	        cy1: destY + 5,
	        x2: destX - 12,
	        y2: destY + 22,
	        cx2: destX,
	        cy2: destY + 6,
	        x3: destX + 18,
	        y3: destY,
	        cx3: destX,
	        cy3: destY - 6,
	        x4: destX - 12,
	        y4: destY - 22,
	        cx4: destX - 6,
	        cy4: destY - 5,
	        x5: destX,
	        y5: destY
	      });
	      that.lineArrow = that.g1.path(arrowPath).attr({
	        fill: '#4d4d4d'
	      });
	    }

	    // 绘制刻度

	  }, {
	    key: '_drawMeasure',
	    value: function _drawMeasure() {
	      var that = this;
	      for (var i = 1; i < (that.len - 20) / that.perMeasure; i++) {
	        var x = that.x + i * that.perMeasure;
	        var y = that.y;
	        that.g2.line(x, y, x, y - 20).attr({
	          stroke: '#4d4d4d',
	          strokeWidth: 8
	        });
	      }
	    }
	  }, {
	    key: 'addFollowObject',
	    value: function addFollowObject(method) {
	      this.followObjects.push(method);
	    }
	  }, {
	    key: 'addPoint',
	    value: function addPoint(point) {
	      this.anyPoint = point;
	    }
	  }, {
	    key: 'remove',
	    value: function remove() {
	      this.polarAxis.remove();
	      this.slideBlock.addClass('hide_dom');
	      this.stretchBtn.addClass('hide_dom');
	    }
	  }, {
	    key: 'closeEdit',
	    value: function closeEdit() {
	      if (this.preset) {
	        this.preset.keyboardBox.addClass('hide_dom');
	        this.preset.keyboardList.addClass('hide_dom');
	      }
	      this.deleteBtn.addClass('hide_dom');
	      this.slideBlock.addClass('hide_dom');
	      this.stretchBtn.addClass('hide_dom');
	    }
	  }]);

	  return PolarAxis;
	}();

	exports.default = PolarAxis;

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _utils = __webpack_require__(4);

	var _utils2 = _interopRequireDefault(_utils);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var dDegArcR = 90;

	var AnyPoint = function () {
	  function AnyPoint(options) {
	    _classCallCheck(this, AnyPoint);

	    this.paper = options.paper;
	    this.x = options.x;
	    this.y = options.y;
	    this.orix = options.orix;
	    this.oriy = options.oriy;
	    this.scale = options.scale;
	    this.r = 16;
	    this.$view = options.view;
	    this.perMeasure = options.perMeasure;
	    this.dperMeasure = 90;
	    this.isMoreJudge = false;
	    this.restrict = options.restrict || 50;
	    this.dsvgWidth = options.dsvgWidth;
	    this.dsvgHeight = options.dsvgHeight;
	    this._init();
	  }

	  _createClass(AnyPoint, [{
	    key: '_init',
	    value: function _init() {
	      var that = this;
	      // 各个元素样式
	      var txtAttr = {
	        'font': '85px "Times New Roman"',
	        'text-anchor': 'middle',
	        'dominant-baseline': 'central',
	        'fill': '#8300de',
	        'pointer-events': 'none'
	      };
	      var coordsTxtAttr = {
	        'font': '85px "Times New Roman"',
	        'dominant-baseline': 'central',
	        'fill': '#8300de'
	      };
	      var degArcAttr = {
	        'fill': '#8300de',
	        'stroke': '#8e6ca6',
	        'fill-opacity': 0.3,
	        'stroke-width': 5,
	        'pointer-events': 'none'
	      };
	      var pointAttr = {
	        fill: '#8300de',
	        stroke: '#ffffff',
	        strokeWidth: 5,
	        cursor: 'pointer'
	      };
	      var lineAttr = {
	        stroke: '#4d4d4d',
	        strokeWidth: 6
	      };
	      var dashLineAttr = {
	        stroke: '#8300de',
	        strokeWidth: 6,
	        'stroke-dasharray': 24 + ',' + 12
	      };
	      var rectDashLineAttr = {
	        stroke: '#626f79',
	        strokeWidth: 8,
	        'stroke-dasharray': 16 + ',' + 16
	        /* svg元素 */
	      };that.anyPoint = that.paper.circle(that.x, that.y, that.r).attr(pointAttr);
	      that.lineToOrigin = that.paper.line(that.orix, that.oriy, that.x, that.y).attr(lineAttr);
	      that.distanceText = that.paper.text(0, 0, '').attr(txtAttr).attr('font-size', 85);
	      that.degArc = that.paper.path('').attr(degArcAttr);
	      that.anySymPoint = that.paper.circle(0, 0, 0).attr(pointAttr);
	      that.lineToOriginSym = that.paper.line(0, 0, 0, 0).attr(lineAttr);
	      that.dashLine = that.paper.line(0, 0, 0, 0).attr(dashLineAttr);
	      that.degArcSym = that.paper.path('').attr(degArcAttr);
	      that.distanceTextSym = that.paper.text(0, 0, '').attr(txtAttr).attr('font-size', 85);
	      that.rectCoordsText = that.paper.text(0, 0, '').attr(coordsTxtAttr);
	      that.rectDashLine1 = that.paper.line(0, 0, 0, 0).attr(rectDashLineAttr);
	      that.rectDashLine2 = that.paper.line(0, 0, 0, 0).attr(rectDashLineAttr);
	      /* dom元素 */
	      // 删除按钮
	      that.deleteBtn = that.$view.find('div.pcs_delete_btn');
	      // 极轴编辑态元素 用于退出编辑态
	      that.slideBlock = that.$view.find('div.pcs_slide_block');
	      that.stretchBtn = that.$view.find('div.pcs_stretch_btn');
	      // 对称点超出提示
	      that.overRangeTip = that.$view.find('div.pcs_over_range');
	      that.closeTipBtn = that.$view.find('a.tip_btn');
	      that.svgContainer = that.$view.find('div.svg_container');
	      that.svgDom = that.svgContainer.find('svg')[0];
	      // that.svgWidth = that.svgContainer.width()
	      // that.svgHeight = that.svgContainer.height()
	      // 角度文字
	      that.svgDegTxt = that.$view.find('div._js_deg_1');
	      that.svgDegFenziTxt = that.svgDegTxt.find('div.pcs_numerator');
	      that.svgDegFenmuTxt = that.svgDegTxt.find('div.pcs_denominator');
	      // 坐标文字
	      that.svgCoordTxt = that.$view.find('div._js_coords_1');
	      that.svgCoordDisTxt = that.svgCoordTxt.find('div.svg_coords_dis_txt');
	      that.svgCoordFenshu = that.svgCoordTxt.find('div.svg_coords_deg_txt');
	      that.svgCoordFenziTxt = that.svgCoordTxt.find('div.pcs_numerator');
	      that.svgCoordFenmuTxt = that.svgCoordTxt.find('div.pcs_denominator');
	      // 对称点角度
	      that.svgDegTxtSym = that.$view.find('div._js_deg_2');
	      that.svgDegFenziTxtSym = that.svgDegTxtSym.find('div.pcs_numerator');
	      that.svgDegFenmuTxtSym = that.svgDegTxtSym.find('div.pcs_denominator');
	      // 对称点坐标文字
	      that.svgCoordTxtSym = that.$view.find('div._js_coords_2');
	      that.svgCoordFenshuSym = that.svgCoordTxtSym.find('div.svg_coords_deg_txt');
	      that.svgCoordDisTxtSym = that.svgCoordTxtSym.find('div.svg_coords_dis_txt');
	      that.svgCoordFenziTxtSym = that.svgCoordTxtSym.find('div.pcs_numerator');
	      that.svgCoordFenmuTxtSym = that.svgCoordTxtSym.find('div.pcs_denominator');
	      that.svgCoordSignSym = that.svgCoordTxtSym.find('div.svg_coords_sign span');
	      // 文字pi
	      that.piText = that.$view.find('.pcs_pi');
	      that.isShowSym = false;
	      that.isShowPolarAssist = false;
	      that.isShowPolarCoords = false;
	      that.isShowRectAssist = false;
	      that.isShowRectCoords = false;
	      that.calcuAndDrawText();
	      that._drawDegArc();
	      that.closePolarAssist();
	      that.closeRectAssist();
	      that._bindDom();
	    }
	  }, {
	    key: '_bindDom',
	    value: function _bindDom() {
	      var that = this;
	      that.hasMove = false;
	      that._excuteMove = that._move.bind(this);
	      that.anyPoint.mousedown(function (e) {
	        that._start(e);
	      });
	      that.anyPoint.touchstart(function (e) {
	        e = e.touches[0];
	        that._start(e);
	      });
	      $(document).on('mouseup touchend', function (e) {
	        that._end(e);
	      });
	      // 关闭提示框
	      that.closeTipBtn.click(function () {
	        that.overRangeTip.addClass('hide_dom');
	      });
	    }
	  }, {
	    key: '_start',
	    value: function _start(e) {
	      e.stopPropagation();
	      this.isMouseDown = true;
	      this.hasMove = false;
	      var point = _utils2.default.reportMouseCoordinates(this.svgDom, e.pageX, e.pageY, this.svgDom);
	      this.startX = point.x;
	      this.startY = point.y;
	      this.cx = parseFloat(this.anyPoint.attr('cx'));
	      this.cy = parseFloat(this.anyPoint.attr('cy'));
	      // 预设4白板防止图形误动
	      if (this.preset) this.preset.isShapeDown = false;
	      $(document).on('mousemove touchmove', this._excuteMove);
	    }
	  }, {
	    key: '_move',
	    value: function _move(e) {
	      var that = this;
	      if (that.isMouseDown) {
	        that.isSnap = false;
	        // 移动关闭任何编辑态
	        that.deleteBtn.addClass('hide_dom');
	        that.slideBlock.addClass('hide_dom');
	        that.stretchBtn.addClass('hide_dom');
	        if (that.preset && that.preset.keyboardBox) {
	          that.preset.keyboardBox.addClass('hide_dom');
	          that.preset.keyboardList.addClass('hide_dom');
	          that.preset.keyboardInputNum.text(that.preset.initNum);
	          that.preset.keyboardDrop.removeClass('ui_btn_active');
	        }
	        e = e.originalEvent.touches ? e.originalEvent.touches[0] : e;
	        var point2 = _utils2.default.reportMouseCoordinates(that.svgDom, e.pageX, e.pageY, that.svgDom);
	        var startX2 = point2.x;
	        var startY2 = point2.y;
	        var deltaX = startX2 - that.startX;
	        var deltaY = startY2 - that.startY;
	        // 任意点移动边界判断
	        if (Math.abs(deltaX) > 3 || Math.abs(deltaY) > 3) {
	          that.hasMove = true;
	          that.x = that.cx + deltaX;
	          that.y = that.cy + deltaY;
	          if (that.x < that.restrict) {
	            that.x = that.restrict;
	          } else if (that.x > that.dsvgWidth - that.restrict) {
	            that.x = that.dsvgWidth - that.restrict;
	          }
	          if (that.y < that.restrict) {
	            that.y = that.restrict;
	          } else if (that.y > that.dsvgHeight - that.restrict) {
	            that.y = that.dsvgHeight - that.restrict;
	          }
	          // 对称任意点边界判断
	          if (that.isShowSym) {
	            var symY = that.oriy * 2 - that.y;
	            var newSymY = symY;
	            if (symY < that.restrict) {
	              newSymY = that.restrict;
	            } else if (symY > that.dsvgHeight - that.restrict) {
	              newSymY = that.dsvgHeight - that.restrict;
	            }
	            that.y -= newSymY - symY;
	          }
	          that.anyPoint.attr({
	            cx: that.x,
	            cy: that.y
	          });
	          that.lineToOrigin.attr({
	            x2: that.x,
	            y2: that.y
	          });
	          if (that.isShowPolarAssist) {
	            that.calcuAndDrawText();
	            that._drawDegArc();
	          }
	          if (that.isShowPolarCoords) {
	            that.calcuAndDrawText();
	            that._drawDegArc();
	            that.showPolarCoords();
	          }
	          if (that.isShowRectAssist) {
	            that._drawRectDashLine();
	          }
	          if (that.isShowRectCoords) {
	            that.showRectCoords();
	          }
	          if (that.isShowSym) {
	            that.showSym();
	          }
	        }
	      }
	    }
	  }, {
	    key: '_end',
	    value: function _end() {
	      if (!this.hasMove && this.isMouseDown) {
	        this._click();
	      }
	      // 判断极点是否要吸附
	      if (this.preset && this.anyPoint && this.preset.snap && !this.isSnap) {
	        this.isSnap = true;
	        this.preset.snap();
	      }
	      this.hasMove = false;
	      this.isMouseDown = false;
	      $(document).off('mousemove touchmove', this._excuteMove);
	    }
	  }, {
	    key: 'relocateDom',
	    value: function relocateDom() {
	      if (!this.deleteBtn.hasClass('hide_dom') && this.deleteBtn.data('trigger') == 2) {
	        this._click();
	      }
	      if (this.isShowPolarAssist) {
	        this.calcuAndDrawText();
	        this._drawDegArc();
	      }
	      if (this.isShowPolarCoords) {
	        this.calcuAndDrawText();
	        this._drawDegArc();
	        this.showPolarCoords();
	      }
	      if (this.isShowRectAssist) {
	        this._drawRectDashLine();
	      }
	      if (this.isShowRectCoords) {
	        this.showRectCoords();
	      }
	      if (this.isShowSym) {
	        this.showSym();
	      }
	    }
	  }, {
	    key: 'resizeScreenHandler',
	    value: function resizeScreenHandler(scale) {
	      this.scale = scale;
	      this.relocateDom();
	    }
	  }, {
	    key: 'addControl',
	    value: function addControl(preset) {
	      this.preset = preset;
	    }

	    // 改变极点位置

	  }, {
	    key: 'changePos',
	    value: function changePos(x, y, sqrtDisTxt) {
	      var that = this;
	      that.x = x;
	      that.y = y;
	      that.anyPoint.attr({
	        cx: that.x,
	        cy: that.y
	      });
	      that.lineToOrigin.attr({
	        x2: that.x,
	        y2: that.y
	      });
	      that.calcuAndDrawText();
	      if (that.isShowPolarAssist) {
	        that._drawDegArc();
	      }
	      if (that.isShowRectAssist) {
	        that._drawRectDashLine();
	      }
	      if (that.isShowRectCoords) {
	        that.showRectCoords();
	      }
	      if (that.isShowSym) {
	        that.anySymPoint.attr({
	          cx: that.x,
	          cy: that.y
	        });
	        that.showSym();
	      }
	      if (that.isShowPolarCoords) {
	        that._drawDegArc();
	        that.showPolarCoords(sqrtDisTxt);
	      }
	    }

	    // 点击进入编辑态

	  }, {
	    key: '_click',
	    value: function _click() {
	      var that = this;
	      // const left = parseFloat(that.deleteBtn.css('left'))
	      // const top = parseFloat(that.deleteBtn.css('top'))
	      var deleteBtnW = that.deleteBtn.innerWidth() / that.scale;
	      var deleteBtnH = that.deleteBtn.innerHeight() / that.scale;
	      var newLeft = that.x - that.r * 3 - deleteBtnW;
	      var newTop = that.y - deleteBtnH / 2;
	      if (newLeft < 10 + deleteBtnW) {
	        newLeft = that.x + that.r * 3;
	      }
	      if (newTop < 0) {
	        newTop = 10;
	      } else if (newTop > that.dsvgHeight - deleteBtnH - 20) {
	        newTop = that.dsvgHeight - deleteBtnH - 20;
	      }
	      that.deleteBtn.removeClass('hide_dom').css({
	        left: Math.floor(newLeft * that.scale),
	        top: Math.floor(newTop * that.scale)
	      }).data('trigger', 2);
	      var stretch = that.$view.find('div.pcs_stretch_btn');
	      if (!stretch.hasClass('hide_dom')) {
	        stretch.addClass('hide_dom');
	        that.$view.find('div.pcs_slide_block').addClass('hide_dom');
	      }
	      // 预设4键盘关闭编辑态
	      if (that.preset && that.preset.keyboardBox) {
	        that.preset.keyboardBox.addClass('hide_dom');
	        that.preset.keyboardList.addClass('hide_dom');
	        that.preset.keyboardInputNum.text(that.preset.initNum);
	        that.preset.keyboardDrop.removeClass('ui_btn_active');
	      }
	    }

	    // 设置单位长度

	  }, {
	    key: 'setPerMeasure',
	    value: function setPerMeasure(perMeasure) {
	      this.perMeasure = perMeasure;
	    }

	    // 打开任意点辅助线和文字，isMore为true显示全部辅助，false显示部分

	  }, {
	    key: 'openPolarAssist',
	    value: function openPolarAssist(isMore) {
	      this.isShowPolarAssist = true;
	      this.isMoreShowPolarAssist = isMore;
	      this.calcuAndDrawText();
	      this._drawDegArc();
	      if (isMore) {
	        this.distanceText.node.style.display = 'block';
	        this.svgDegTxt.removeClass('hide_dom');
	      }
	      this.degArc.node.style.display = 'block';
	    }

	    // 关闭任意点辅助线和文字

	  }, {
	    key: 'closePolarAssist',
	    value: function closePolarAssist() {
	      this.isShowPolarAssist = false;
	      this.distanceText.node.style.display = 'none';
	      this.svgDegTxt.addClass('hide_dom');
	      this.degArc.node.style.display = 'none';
	    }

	    // 显示任意点坐标

	  }, {
	    key: 'showPolarCoords',
	    value: function showPolarCoords(sqrtDisTxt) {
	      var that = this;
	      that.calcuAndDrawText();
	      that.isShowPolarCoords = true;
	      that.svgCoordTxt.removeClass('hide_dom');
	      var sqrt = that.svgCoordDisTxt.find('span.sqrt');
	      if (sqrt.length !== 0) {
	        that.svgCoordDisTxt.find('span.sqrt').text('');
	      }
	      // 判断距离是否要显示成根号形式
	      if (sqrtDisTxt !== undefined) {
	        sqrtDisTxt = sqrtDisTxt.toString();
	        var sqrtIndex = sqrtDisTxt.indexOf('√');
	        if (sqrtIndex !== -1) {
	          that.svgCoordDisTxt.find('span:first-child').text(sqrtDisTxt.substr(0, sqrtIndex + 1));
	          if (sqrt.length !== 0) {
	            that.svgCoordDisTxt.find('span.sqrt').text(sqrtDisTxt.substr(sqrtIndex + 1, sqrtDisTxt.length));
	          }
	        } else {
	          that.svgCoordDisTxt.find('span:first-child').text(sqrtDisTxt);
	        }
	      } else {
	        that.svgCoordDisTxt.find('span:first-child').text(that.distTxt);
	      }
	      // 预设4正方形45度长度根号形式
	      if (that.preset && that.preset.squareObject && Math.abs(that.deg - 45) < 0.4) {
	        that.svgCoordDisTxt.find('span:first-child').text(that.preset.squareLen.node.innerHTML + '√');
	        that.svgCoordDisTxt.find('span.sqrt').text(2);
	      }
	      // 坐标角度分子形式赋值
	      that.svgCoordFenziTxt.find('span:first-child').text(that.degFenzi);
	      that.svgCoordFenmuTxt.find('span').text(that.degFenmu);
	      that.svgCoordFenshu.removeClass('pcs_integer');
	      var deg = parseFloat(that.deg.toFixed(0));
	      deg = deg === 360 ? 0 : deg;
	      if (deg !== 0) {
	        if (that.degFenzi === 1) {
	          that.svgCoordFenziTxt.find('span:first-child').text('');
	        }
	        if (that.degFenmu === 1) {
	          that.svgCoordFenshu.addClass('pcs_integer');
	        }
	      } else {
	        that.svgCoordFenshu.addClass('pcs_integer');
	      }
	      // 任意点坐标的自适应
	      var tx = that.x + 40;
	      var ty = that.y - 50;
	      if (tx > that.dsvgWidth - 360) {
	        tx = tx - that.svgCoordTxt.width() / that.scale - 80;
	      }
	      var svgCoordTxtW = 375;
	      // 预设1开启更多判断
	      if (that.isMoreJudge) {
	        if (deg > 75 && deg < 210 && tx - svgCoordTxtW - 70 > 0) {
	          tx = tx - svgCoordTxtW - 70;
	        } else if (that.isShowSym && deg > 75 && deg < 210 && tx - svgCoordTxtW + 10 > 0 && ty > 150 && that.isShowSym) {
	          tx = tx - svgCoordTxtW + 50;
	          ty = ty - 100;
	        } else if (deg <= 75 && that.distance < 200 && that.oriy - 300 > 0) {
	          ty = that.oriy - 300;
	        } else if (deg <= 45 && tx > that.dsvgWidth / 2.5 && tx < that.x && ty - 140 > 0) {
	          ty = ty - 120;
	          tx = tx + 80;
	        } else if (deg >= 315 && tx > that.dsvgWidth / 2.5 && tx < that.x && ty + 140 < that.dsvgHeight && tx < that.orix) {
	          ty = ty + 120;
	          tx = tx + 80;
	        } else if (that.isShowSym && deg <= 75 && that.distance < 350 && that.oriy - 300 > 0) {
	          ty = that.oriy - 300;
	        }
	        var svgDegTxtLeft = parseInt(that.svgDegTxt.css('left')) / that.scale;
	        var svgDegTxtSymLeft = parseInt(that.svgDegTxtSym.css('left')) / that.scale;
	        var svgCoordTxtSymLeft = parseInt(that.svgCoordTxtSym.css('left')) / that.scale;
	        var svgCoordTxtWCur = that.svgCoordTxt.innerWidth() / that.scale;
	        if (Math.abs(ty - that.oriy) < 350 && tx > that.x && deg > 90 && deg < 180 && Math.abs(tx - svgDegTxtLeft) < svgCoordTxtW) {
	          that.svgDegTxt.css('left', (tx + svgCoordTxtWCur + 120) * that.scale);
	        } else if (Math.abs(ty - that.oriy) < 270 && that.isShowSym && tx > that.x && deg >= 180 && deg < 270 && Math.abs(tx - svgDegTxtSymLeft) < svgCoordTxtW) {
	          that.svgDegTxtSym.css('left', (tx + svgCoordTxtWCur + 98) * that.scale);
	        } else if (Math.abs(ty - that.oriy) < 270 && that.isShowSym && svgCoordTxtSymLeft > that.x && deg > 180 && deg < 270 && Math.abs(svgCoordTxtSymLeft - svgDegTxtLeft) < svgCoordTxtW) {
	          that.svgDegTxt.css('left', (svgDegTxtSymLeft + svgCoordTxtWCur + 98) * that.scale);
	        }
	        if (that.isShowSym && deg > 210 && deg < 270 && Math.abs(ty - that.oriy) > 270) {
	          that.svgDegTxt.css('left', (parseInt(that.distanceText.attr('x')) + 150) * that.scale);
	        }
	        if (deg < 10 && that.isShowSym) {
	          ty = that.oriy - 140;
	        } else if (deg > 345 && that.isShowSym) {
	          ty = that.oriy + 40;
	        } else if (that.distance < 180 && that.deg > 325) {
	          ty = that.oriy + 40;
	        } else if (that.distance < 80 && that.deg > 270) {
	          ty = that.oriy + 40;
	        }
	        if (deg > 150 && deg < 180 && that.isShowSym) {
	          that.distanceText.attr('y', that.oriy - 50);
	          ty = that.oriy - 240;
	        } else if (deg >= 180 && deg < 210 && that.isShowSym) {
	          that.distanceText.attr('y', that.oriy + 30);
	          ty = that.oriy + 140;
	        } else if (deg < 28 && tx < that.x && tx > that.orix) {
	          ty = that.oriy - 240;
	          var disX = parseInt(that.distanceText.attr('x'));
	          var disY = parseInt(that.distanceText.attr('y'));
	          if (tx - disX < 100) {
	            that.distanceText.attr('x', disX - 120);
	            that.distanceText.attr('y', disY + 20);
	          }
	        } else if (deg > 332 && tx < that.x && tx > that.orix) {
	          ty = that.oriy + 140;
	          var _disX = parseInt(that.distanceText.attr('x'));
	          var _disY = parseInt(that.distanceText.attr('y'));
	          if (tx - _disX < 100) {
	            that.distanceText.attr('x', _disX - 120);
	            that.distanceText.attr('y', _disY - 20);
	          }
	        }
	      }
	      if (ty < 30) {
	        ty = ty + 42;
	      } else if (ty > that.dsvgHeight - 120) {
	        ty = ty - 42;
	      }
	      if (deg === 0 && that.distance < 10) {
	        tx = that.orix + 40;
	        ty = that.oriy - 150;
	      }
	      that.svgCoordTxt.css({
	        left: tx * that.scale,
	        top: ty * that.scale
	      });
	      // 对称点坐标是否显示
	      if (that.isShowSym) {
	        that.svgCoordSignSym.show();
	        that.svgCoordTxtSym.removeClass('hide_dom');
	        that.svgCoordDisTxtSym.find('span').text(that.distTxt);
	        that.svgCoordFenziTxtSym.find('span:first-child').text(that.degFenzi);
	        that.svgCoordFenmuTxtSym.find('span').text(that.degFenmu);
	        that.svgCoordFenshuSym.removeClass('pcs_integer');
	        var _deg = parseFloat(that.deg.toFixed(0));
	        _deg = _deg === 360 ? 0 : _deg;
	        if (_deg !== 0) {
	          if (that.degFenzi === 1) {
	            that.svgCoordFenziTxtSym.find('span:first-child').text('');
	          }
	          if (that.degFenmu === 1) {
	            that.svgCoordFenshuSym.addClass('pcs_integer');
	          }
	        } else {
	          that.svgCoordSignSym.hide();
	          that.svgCoordFenziTxtSym.find('span:first-child').text(0);
	          that.svgCoordFenshuSym.addClass('pcs_integer');
	        }
	        // 对称点坐标自适应
	        tx = that.x + 40;
	        ty = that.oriy * 2 - that.y - 50;
	        if (tx > that.dsvgWidth - 360) {
	          tx = tx - that.svgCoordTxt.width() / that.scale - 80;
	        }
	        svgCoordTxtW = 375;
	        if (_deg > 75 && _deg < 210 && tx - svgCoordTxtW - 70 > 0) {
	          tx = tx - svgCoordTxtW - 70;
	        } else if (_deg <= 45 && tx > that.dsvgWidth / 2.5 && tx < that.x && ty + 140 < that.dsvgHeight) {
	          ty = ty + 120;
	          tx = tx + 80;
	        } else if (_deg >= 315 && tx > that.dsvgWidth / 2.5 && tx < that.x && ty - 140 > 50 && tx < that.orix) {
	          ty = ty - 120;
	          tx = tx + 80;
	        } else if (that.isShowSym && _deg <= 75 && that.distance < 350 && that.oriy - 300 > 0) {
	          ty = that.oriy + 150;
	        }
	        var _svgCoordTxtSymLeft = parseInt(that.svgCoordTxtSym.css('left')) / that.scale;
	        var _svgDegTxtLeft = parseInt(that.svgDegTxt.css('left')) / that.scale;
	        var svgCoordTxtSymW = that.svgCoordTxtSym.innerWidth() / that.scale;
	        if (Math.abs(ty - that.oriy) < 270 && tx > that.x && _deg > 90 && _deg < 180 && Math.abs(tx - _svgCoordTxtSymLeft)) {
	          that.svgDegTxtSym.css('left', (tx + svgCoordTxtSymW + 75) * that.scale);
	        } else if (Math.abs(ty - that.oriy) < 372 && tx > that.x && _deg >= 180 && _deg < 270 && Math.abs(tx - _svgDegTxtLeft) < svgCoordTxtW - 20) {
	          that.svgDegTxt.css('left', (tx + svgCoordTxtSymW + 90) * that.scale);
	        }
	        if (_deg > 210 && _deg < 270 && Math.abs(ty - that.oriy) > 350) {
	          that.svgDegTxtSym.css('left', (parseInt(that.distanceTextSym.attr('x')) + 150) * that.scale);
	        }
	        if (_deg < 10) {
	          ty = that.oriy + 40;
	        } else if (_deg > 345) {
	          ty = that.oriy - 140;
	        } else if (that.distance < 180 && that.deg > 325) {
	          ty = that.oriy - 140;
	        } else if (that.distance < 80 && that.deg > 270) {
	          ty = that.oriy - 140;
	        }
	        if (_deg > 150 && _deg < 180) {
	          ty = that.oriy + 140;
	          that.distanceTextSym.attr('y', that.oriy + 30);
	        } else if (_deg >= 180 && _deg < 210) {
	          ty = that.oriy - 240;
	          that.distanceTextSym.attr('y', that.oriy - 50);
	        } else if (_deg < 28 && tx < that.x && tx > that.orix) {
	          ty = that.oriy + 140;
	          var _disX2 = parseInt(that.distanceTextSym.attr('x'));
	          var _disY2 = parseInt(that.distanceTextSym.attr('y'));
	          if (tx - _disX2 < 100) {
	            that.distanceTextSym.attr('x', _disX2 - 120);
	            that.distanceTextSym.attr('y', _disY2 - 20);
	          }
	        } else if (_deg > 332 && tx < that.x && tx > that.orix) {
	          ty = that.oriy - 240;
	          var _disX3 = parseInt(that.distanceTextSym.attr('x'));
	          var _disY3 = parseInt(that.distanceTextSym.attr('y'));
	          if (tx - _disX3 < 100) {
	            that.distanceTextSym.attr('x', _disX3 - 120);
	            that.distanceTextSym.attr('y', _disY3 + 20);
	          }
	        }
	        if (ty < 55) {
	          ty = ty + 55;
	        } else if (ty > that.dsvgHeight - 120) {
	          ty = ty - 55;
	        }
	        if (_deg === 0 && that.distance < 10) {
	          tx = that.orix + 40;
	          ty = that.oriy + 40;
	        } else if (_deg === 0) {
	          ty = that.oriy + 40;
	        }
	        that.svgCoordTxtSym.css({
	          left: tx * that.scale,
	          top: ty * that.scale
	        });
	      }
	    }

	    // 隐藏任意点坐标

	  }, {
	    key: 'hidePolarCoords',
	    value: function hidePolarCoords() {
	      this.isShowPolarCoords = false;
	      this.svgCoordTxt.addClass('hide_dom');
	      this.svgCoordTxtSym.addClass('hide_dom');
	    }

	    // 显示直角坐标系的辅助线

	  }, {
	    key: 'openRectAssist',
	    value: function openRectAssist() {
	      this.isShowRectAssist = true;
	      this._drawRectDashLine();
	      this.rectDashLine1.node.style.display = 'block';
	      this.rectDashLine2.node.style.display = 'block';
	    }

	    // 关闭直角坐标系辅助线

	  }, {
	    key: 'closeRectAssist',
	    value: function closeRectAssist() {
	      this.isShowRectAssist = false;
	      this.rectDashLine1.node.style.display = 'none';
	      this.rectDashLine2.node.style.display = 'none';
	    }

	    // 显示直角坐标

	  }, {
	    key: 'showRectCoords',
	    value: function showRectCoords() {
	      var that = this;
	      var x = ((that.x - that.dsvgWidth / 2) / that.perMeasure).toFixed(1).toString().replace(/\.0/, '');
	      var y = -((that.y - that.dsvgHeight / 2) / that.perMeasure).toFixed(1).toString().replace(/\.0/, '');
	      x = parseFloat(x) === 0 ? 0 : x;
	      y = parseFloat(y) === 0 ? 0 : y;
	      var text = '(' + x + ',' + y + ')';
	      that.isShowRectCoords = true;
	      that.rectCoordsText.node.style.display = 'block';
	      that.rectCoordsText.attr({
	        text: text
	      });
	      var tx = that.x + 40;
	      var ty = that.y;
	      // 文字自适应
	      if (that.x > that.dsvgWidth - 360) {
	        tx = that.x - that.rectCoordsText.getBBox().width - 40;
	      }
	      if (that.y < 50) {
	        ty = that.y + 30;
	      } else if (that.y > that.dsvgHeight - 50) {
	        ty = that.y - 30;
	      }
	      that.rectCoordsText.attr({
	        x: tx,
	        y: ty
	      });
	    }

	    // 隐藏直角坐标

	  }, {
	    key: 'hideRectCoords',
	    value: function hideRectCoords() {
	      this.isShowRectCoords = false;
	      this.rectCoordsText.node.style.display = 'none';
	    }

	    // 计算并绘制距离和角度

	  }, {
	    key: 'calcuAndDrawText',
	    value: function calcuAndDrawText() {
	      this._drawDisText();
	      this._drawDegText();
	    }

	    // 根据极点获取移动范围

	  }, {
	    key: 'getMoveRange',
	    value: function getMoveRange(orix, oriy) {
	      var that = this;
	      // 任意点坐标
	      var x = orix + that.distance * Math.cos(that.deg / 180 * Math.PI);
	      var y = oriy - that.distance * Math.sin(that.deg / 180 * Math.PI);
	      if (x < that.restrict) {
	        x = that.restrict;
	      } else if (x > that.dsvgWidth - that.restrict) {
	        x = that.dsvgWidth - that.restrict;
	      }
	      if (y < that.restrict) {
	        y = that.restrict;
	      } else if (y > that.dsvgHeight - that.restrict) {
	        y = that.dsvgHeight - that.restrict;
	      }
	      if (that.isShowSym) {
	        var symY = oriy * 2 - y;
	        var newSymY = symY;
	        if (symY < that.restrict) {
	          newSymY = that.restrict;
	        } else if (symY > that.dsvgHeight - that.restrict) {
	          newSymY = that.dsvgHeight - that.restrict;
	        }
	        y += newSymY - symY;
	      }

	      // 极点坐标
	      var newX = x - that.distance * Math.cos(that.deg / 180 * Math.PI);
	      var newY = y + that.distance * Math.sin(that.deg / 180 * Math.PI);
	      // 文字自适应处理
	      var tx = that.dperMeasure * 2 * Math.cos(that.deg / 180 / 1.8 * Math.PI) + newX;
	      var ty = -that.dperMeasure * 2 * Math.sin(that.deg / 180 / 1.8 * Math.PI) + newY;
	      var symty = that.dperMeasure * 2 * Math.sin(that.deg / 360 * Math.PI) + newY;
	      if (tx < that.restrict * 2) {
	        x += that.restrict * 2 - tx;
	      }
	      if (ty < that.restrict * 2) {
	        y += that.restrict * 2 - ty;
	      }
	      if (that.isShowSym && symty > that.dsvgHeight - that.restrict * 2) {
	        y += that.dsvgHeight - that.restrict * 2 - symty;
	      }
	      newX = x - that.distance * Math.cos(that.deg / 180 * Math.PI);
	      newY = y + that.distance * Math.sin(that.deg / 180 * Math.PI);
	      if (that.deg > 180) {
	        newY = newY < 140 ? 140 : newY;
	      }
	      return { newX: newX, newY: newY };
	    }

	    // 绘制距离文字

	  }, {
	    key: '_drawDisText',
	    value: function _drawDisText() {
	      var that = this;
	      // 是否显示极坐标的更多辅助线和文字
	      if (that.isMoreShowPolarAssist) {
	        that.distanceText.node.style.display = 'block';
	        that.svgDegTxt.show();
	      }
	      // 计算极径和极径文字
	      that.distance = _utils2.default.getDistance(that.x, that.y, that.orix, that.oriy);
	      that.distTxt = (that.distance / that.perMeasure).toFixed(1).toString().replace(/\.0/, '');
	      // 计算角度
	      var deg = 360 - Snap.angle(that.x, that.y, that.orix, that.oriy);
	      deg = deg === 360 ? 0 : deg;
	      // 靠近x轴和y轴时赋值
	      var x = ((that.x - that.orix) / that.perMeasure).toFixed(1);
	      var y = -((that.y - that.oriy) / that.perMeasure).toFixed(1);
	      if (parseFloat(x) === 0 && y > 0) {
	        deg = 90;
	      } else if (parseFloat(x) === 0 && y < 0) {
	        deg = 270;
	      }
	      if (parseFloat(y) === 0 && x > 0) {
	        deg = 0;
	      } else if (parseFloat(y) === 0 && x < 0) {
	        deg = 180;
	      }

	      // 距离文字赋值和自适应
	      var distance = that.distance;
	      distance = distance < 50 ? 100 : distance;
	      if (distance < 550 && deg < 48) {
	        deg = deg + 18;
	      }
	      var delta = 15;
	      delta = deg > 170 && deg < 190 ? 28 : delta;
	      var txtAngle = deg > 180 ? deg - delta : deg + delta;
	      var tx = distance / 2 * Math.cos(txtAngle / 180 * Math.PI) + that.orix;
	      var ty = -distance / 2 * Math.sin(txtAngle / 180 * Math.PI) + that.oriy;
	      if (distance < 120) {
	        ty = ty > that.oriy ? ty + 30 : ty - 30;
	      }
	      that.distanceText.attr({
	        x: tx,
	        y: ty,
	        text: that.distTxt
	      });
	    }

	    // 绘制角度文字

	  }, {
	    key: '_drawDegText',
	    value: function _drawDegText() {
	      var that = this;
	      var maxYueShu = void 0;
	      that.svgDegTxt.removeClass('pcs_integer');
	      that.piText.show();
	      that.deg = 360 - Snap.angle(that.x, that.y, that.orix, that.oriy);
	      that.deg = parseFloat(that.distTxt) === 0 ? 0 : that.deg;
	      var deg = parseFloat(that.deg.toFixed(0));
	      deg = deg === 360 ? 0 : deg;
	      if (deg !== 0) {
	        maxYueShu = _utils2.default.getGongYueShu(180, deg);
	        that.degFenzi = deg / maxYueShu;
	        that.degFenmu = 180 / maxYueShu;
	        that.svgDegFenziTxt.find('span:first-child').text(that.degFenzi);
	        that.svgDegFenmuTxt.find('span').text(that.degFenmu);
	        if (that.degFenzi === 1) {
	          that.svgDegFenziTxt.find('span:first-child').text('');
	        }
	        if (that.degFenmu === 1) {
	          that.svgDegTxt.addClass('pcs_integer');
	        }
	      } else {
	        that.degFenzi = 0;
	        that.svgDegTxt.addClass('pcs_integer');
	        that.piText.hide();
	        that.svgDegFenziTxt.find('span:first-child').text('0');
	        that.svgDegTxt.hide();
	        if (parseFloat(that.distTxt) === 0) {
	          that.distanceText.node.style.display = 'none';
	        }
	      }
	      // 角度显示自适应
	      deg = deg > 295 ? 295 : deg;
	      var x = that.dperMeasure * 2 * Math.cos(deg / 180 / 1.8 * Math.PI) + that.orix;
	      var y = -that.dperMeasure * 2 * Math.sin(deg / 180 / 1.8 * Math.PI) + that.oriy;
	      if (x < 110) {
	        x = 110;
	      }
	      if (y < 90) {
	        y = 90;
	      }
	      if (!that.isShowPolarCoords && deg > 215 && deg < 270) {
	        x += 180;
	      }
	      that.svgDegTxt.css({
	        left: x * that.scale,
	        top: y * that.scale
	      });
	    }

	    // 绘制角度显示弧

	  }, {
	    key: '_drawDegArc',
	    value: function _drawDegArc() {
	      var that = this;
	      var flag = that.deg >= 180 ? 1 : 0;
	      var r = Math.min(that.perMeasure, dDegArcR);
	      r = r > that.distance / 2 ? that.distance / 2 : r;
	      var arcPath = 'M{x1} {y1}L{x2} {y2}A{r} {r} 0 {d} 0 {x3} {y3}Z';
	      arcPath = Snap.format(arcPath, {
	        x1: that.orix,
	        y1: that.oriy,
	        x2: that.orix + r,
	        y2: that.oriy,
	        r: r,
	        d: flag,
	        x3: r * Math.cos(that.deg / 180 * Math.PI) + that.orix,
	        y3: -r * Math.sin(that.deg / 180 * Math.PI) + that.oriy
	      });
	      that.degArc.attr({
	        path: arcPath
	      });
	    }

	    // 绘制直角坐标系的辅助线

	  }, {
	    key: '_drawRectDashLine',
	    value: function _drawRectDashLine() {
	      var that = this;
	      that.rectDashLine1.attr({
	        x1: that.orix,
	        y1: that.y,
	        x2: that.x,
	        y2: that.y
	      });
	      that.rectDashLine2.attr({
	        x1: that.x,
	        y1: that.oriy,
	        x2: that.x,
	        y2: that.y
	      });
	    }

	    // 绘制对称点距离和角度文字

	  }, {
	    key: '_drawSymText',
	    value: function _drawSymText() {
	      this._drawSymDisText();
	      this._drawSymDegText();
	    }

	    // 绘制对称点距离文字

	  }, {
	    key: '_drawSymDisText',
	    value: function _drawSymDisText() {
	      var that = this;
	      if (that.isMoreShowPolarAssist) {
	        that.distanceTextSym.node.style.display = 'block';
	        that.svgDegTxtSym.show();
	      }
	      var deg = 360 - that.deg;
	      deg = deg === 360 ? 0 : deg;
	      // 靠近x轴和y轴时赋值
	      var x = ((that.x - that.orix) / that.perMeasure).toFixed(1);
	      var y = -((that.y - that.oriy) / that.perMeasure).toFixed(1);
	      if (parseFloat(x) === 0 && y > 0) {
	        deg = 270;
	      } else if (parseFloat(x) === 0 && y < 0) {
	        deg = 90;
	      }
	      if (parseFloat(y) === 0 && x > 0) {
	        deg = 0;
	      } else if (parseFloat(y) === 0 && x < 0) {
	        deg = 180;
	      }
	      // 自适应和赋值
	      var distance = that.distance;
	      distance = distance < 50 ? 100 : distance;
	      if (distance < 550 && deg > 312) {
	        deg = deg - 18;
	      }
	      var delta = 15;
	      delta = deg > 170 && deg < 190 ? 28 : delta;
	      var txtAngle = deg > 180 ? deg - delta : deg + delta;
	      if (deg === 0 && that.distance < 500) {
	        txtAngle = -30;
	      } else if (deg === 0 && that.distance >= 500) {
	        txtAngle = -15;
	      }
	      x = distance / 2 * Math.cos(txtAngle / 180 * Math.PI) + that.orix;
	      y = -distance / 2 * Math.sin(txtAngle / 180 * Math.PI) + that.oriy;
	      if (distance < 120) {
	        y = y > that.oriy ? y + 30 : y - 30;
	      }
	      that.distanceTextSym.attr({
	        x: x,
	        y: y,
	        text: that.distTxt
	      });
	    }

	    // 绘制对称点角度文字

	  }, {
	    key: '_drawSymDegText',
	    value: function _drawSymDegText() {
	      var that = this;
	      var deg = 360 - parseFloat(that.deg.toFixed(0));
	      deg = deg === 360 ? 0 : deg;
	      var textDis = that.dperMeasure * 2;
	      // 自适应
	      if (deg > 320) {
	        textDis = that.dperMeasure * 3.5;
	      }
	      if (deg < 65 && deg !== 0) {
	        deg = 65;
	      }
	      var x = -textDis * Math.cos(deg / 360 * Math.PI) + that.orix;
	      var y = textDis * Math.sin(deg / 360 * Math.PI) + that.oriy;
	      // 角度赋值
	      that.svgDegFenziTxtSym.find('span:first-child').text(that.degFenzi);
	      that.svgDegFenmuTxtSym.find('span').text(that.degFenmu);
	      that.svgDegTxtSym.removeClass('pcs_integer');
	      if (deg !== 0) {
	        if (that.degFenzi === 1) {
	          that.svgDegFenziTxtSym.find('span:first-child').text('');
	        }
	        if (that.degFenmu === 1) {
	          that.svgDegTxtSym.addClass('pcs_integer');
	        }
	      } else {
	        that.degFenzi = 0;
	        that.svgDegTxtSym.addClass('pcs_integer');
	        that.piText.hide();
	        that.svgDegFenziTxtSym.find('span:first-child').text('0');
	        that.svgDegTxtSym.hide();
	        if (parseFloat(that.distTxt) === 0) {
	          that.distanceTextSym.node.style.display = 'none';
	        }
	      }
	      if (x < 110) {
	        x = 110;
	      }
	      if (y > that.dsvgHeight - 90) {
	        y = that.dsvgHeight - 90;
	      }
	      if (!that.isShowPolarCoords && that.deg > 215 && that.deg < 270) {
	        x += 180;
	      }
	      that.svgDegTxtSym.css({
	        left: x * that.scale,
	        top: y * that.scale
	      });
	    }

	    // 绘制对称点角度显示弧

	  }, {
	    key: '_drawSymDegArc',
	    value: function _drawSymDegArc() {
	      var that = this;
	      var flag = that.deg >= 180 ? 1 : 0;
	      var r = Math.min(that.perMeasure, dDegArcR);
	      r = r > that.distance / 2 ? that.distance / 2 : r;
	      var arcPath = 'M{x1} {y1}L{x2} {y2}A{r} {r} 0 {d} 0 {x3} {y3}Z';
	      arcPath = Snap.format(arcPath, {
	        x1: that.orix,
	        y1: that.oriy,
	        x2: r * 1.3 * Math.cos((360 - that.deg) / 180 * Math.PI) + that.orix,
	        y2: -r * 1.3 * Math.sin((360 - that.deg) / 180 * Math.PI) + that.oriy,
	        r: r * 1.3,
	        d: flag,
	        x3: that.orix + r * 1.3,
	        y3: that.oriy
	      });
	      that.degArcSym.attr({
	        path: arcPath
	      });
	    }

	    // 根据极点坐标改变任意点位置

	  }, {
	    key: 'followPolarPoint',
	    value: function followPolarPoint(x, y) {
	      var that = this;
	      that.orix = x;
	      that.oriy = y;
	      that.x = that.orix + that.distance * Math.cos(that.deg / 180 * Math.PI);
	      that.y = that.oriy - that.distance * Math.sin(that.deg / 180 * Math.PI);
	      that.lineToOrigin.attr({
	        x1: that.orix,
	        y1: that.oriy,
	        x2: that.x,
	        y2: that.y
	      });
	      that.anyPoint.attr({
	        cx: that.x,
	        cy: that.y
	      });
	      that.calcuAndDrawText();
	      that._drawDegArc();
	      if (that.isShowPolarCoords) {
	        that.showPolarCoords();
	      }
	      if (that.isShowSym) {
	        that.showSym();
	      }
	    }

	    // 显示对称点

	  }, {
	    key: 'showSym',
	    value: function showSym(isBtnClick) {
	      var that = this;
	      var x = that.x;
	      var y = that.oriy * 2 - that.y;
	      that._drawSymText();
	      that._drawSymDegArc();
	      that.anyPoint.before(that.anySymPoint);
	      // 超出边界判断
	      if (isBtnClick && (y < 30 || y > that.dsvgHeight - 30)) {
	        that.distanceTextSym.node.style.display = 'none';
	        that.svgDegTxtSym.hide();
	        that.overRangeTip.removeClass('hide_dom');
	        that.degArcSym.node.style.display = 'none';
	        return false;
	      }
	      that.anySymPoint.node.style.display = 'block';
	      that.lineToOriginSym.node.style.display = 'block';
	      that.dashLine.node.style.display = 'block';
	      that.degArcSym.node.style.display = 'block';
	      that.svgDegTxtSym.removeClass('hide_dom');
	      that.distanceTextSym.node.style.display = 'block';
	      that.isShowSym = true;
	      that.lineToOrigin.before(that.lineToOriginSym);
	      that.lineToOrigin.after(that.dashLine);
	      that.degArc.before(that.degArcSym);
	      that.anySymPoint.attr({
	        cx: x,
	        cy: y,
	        r: that.r
	      });
	      that.lineToOriginSym.attr({
	        x1: that.orix,
	        y1: that.oriy,
	        x2: x,
	        y2: y
	      });
	      that.dashLine.attr({
	        x1: that.x,
	        y1: that.y,
	        x2: x,
	        y2: y
	      });
	      // 是否显示极坐标
	      if (that.isShowPolarCoords) {
	        that.svgCoordSignSym.show();
	        that.svgCoordTxtSym.removeClass('hide_dom');
	        that.svgCoordDisTxtSym.find('span').text(that.distTxt);
	        that.svgCoordFenziTxtSym.find('span:first-child').text(that.degFenzi);
	        that.svgCoordFenmuTxtSym.find('span').text(that.degFenmu);
	        that.svgCoordFenshuSym.removeClass('pcs_integer');
	        var deg = parseFloat(that.deg.toFixed(0));
	        deg = deg === 360 ? 0 : deg;
	        if (deg !== 0) {
	          if (that.degFenzi === 1) {
	            that.svgCoordFenziTxtSym.find('span:first-child').text('');
	          }
	          if (that.degFenmu === 1) {
	            that.svgCoordFenshuSym.addClass('pcs_integer');
	          }
	        } else {
	          that.svgCoordSignSym.hide();
	          that.svgCoordFenziTxtSym.find('span:first-child').text(0);
	          that.svgCoordFenshuSym.addClass('pcs_integer');
	          if (parseFloat(that.distTxt) === 0) {
	            that.distanceTextSym.node.style.display = 'none';
	          }
	        }
	        // 位置自适应处理
	        var tx = that.x + 40;
	        var ty = that.oriy * 2 - that.y - 50;
	        if (tx > that.dsvgWidth - 360) {
	          tx = tx - that.svgCoordTxt.width() / that.scale - 80;
	        }
	        var svgCoordTxtW = 375;
	        if (deg > 75 && deg < 210 && tx - svgCoordTxtW - 70 > 0) {
	          tx = tx - svgCoordTxtW - 70;
	        } else if (deg <= 45 && tx > that.dsvgWidth / 2.5 && tx < that.x && ty + 140 < that.dsvgHeight) {
	          ty = ty + 120;
	          tx = tx + 80;
	        } else if (deg >= 315 && tx > that.dsvgWidth / 2.5 && tx < that.x && ty - 140 > 50 && tx < that.orix) {
	          ty = ty - 120;
	          tx = tx + 80;
	        } else if (that.isShowSym && deg <= 75 && that.distance < 350 && that.oriy - 300 > 0) {
	          ty = that.oriy + 150;
	        }

	        var svgCoordTxtSymLeft = parseInt(that.svgCoordTxtSym.css('left')) / that.scale;
	        var svgCoordTxtLeft = parseInt(that.svgDegTxt.css('left')) / that.scale;
	        var svgCoorTxtSymW = that.svgCoordTxtSym.innerWidth() / that.scale;
	        if (Math.abs(ty - that.oriy) < 270 && tx > that.x && deg > 90 && deg < 180 && Math.abs(tx - svgCoordTxtSymLeft)) {
	          that.svgDegTxtSym.css('left', (tx + svgCoorTxtSymW + 75) * that.scale);
	        } else if (Math.abs(ty - that.oriy) < 372 && tx > that.x && deg >= 180 && deg < 270 && Math.abs(tx - svgCoordTxtLeft) < svgCoordTxtW - 20) {
	          that.svgDegTxt.css('left', (tx + svgCoorTxtSymW + 90) * that.scale);
	        }
	        if (deg > 210 && deg < 270 && Math.abs(ty - that.oriy) > 350) {
	          that.svgDegTxtSym.css('left', (parseInt(that.distanceTextSym.attr('x')) + 150) * that.scale);
	        }
	        if (ty < 55) {
	          ty = ty + 55;
	        } else if (ty > that.dsvgHeight - 120) {
	          ty = ty - 55;
	        }
	        if (that.deg < 10) {
	          ty = that.oriy + 40;
	        } else if (that.deg > 345) {
	          ty = that.oriy - 140;
	        } else if (that.distance < 180 && that.deg > 325) {
	          ty = that.oriy - 140;
	        } else if (that.distance < 80 && that.deg > 270) {
	          ty = that.oriy - 140;
	        }
	        if (deg > 150 && deg < 180) {
	          ty = that.oriy + 140;
	          that.distanceTextSym.attr('y', that.oriy + 30);
	        } else if (deg >= 180 && deg < 210) {
	          ty = that.oriy - 240;
	          that.distanceTextSym.attr('y', that.oriy - 50);
	        } else if (deg < 28 && tx < that.x && tx > that.orix) {
	          ty = that.oriy + 140;
	          var disX = parseInt(that.distanceTextSym.attr('x'));
	          var disY = parseInt(that.distanceTextSym.attr('y'));
	          if (tx - disX < 100) {
	            that.distanceTextSym.attr('x', disX - 120);
	            that.distanceTextSym.attr('y', disY - 20);
	          }
	        } else if (deg > 332 && tx < that.x && tx > that.orix) {
	          ty = that.oriy - 240;
	          var _disX4 = parseInt(that.distanceTextSym.attr('x'));
	          var _disY4 = parseInt(that.distanceTextSym.attr('y'));
	          if (tx - _disX4 < 100) {
	            that.distanceTextSym.attr('x', _disX4 - 120);
	            that.distanceTextSym.attr('y', _disY4 + 20);
	          }
	        }
	        if (deg === 0 && that.distance < 10) {
	          tx = that.orix + 40;
	          ty = that.oriy + 40;
	        } else if (deg === 0) {
	          ty = that.oriy + 40;
	        }
	        that.svgCoordTxtSym.css({
	          left: tx * that.scale,
	          top: ty * that.scale
	        });
	      }
	      // 显示对称点后原来的点坐标位置重新计算
	      that.calcuAndDrawText();
	      if (that.isShowPolarCoords) {
	        that.showPolarCoords();
	      }
	      return true;
	    }
	  }, {
	    key: 'hideSym',
	    value: function hideSym() {
	      this.isShowSym = false;
	      this.anySymPoint.node.style.display = 'none';
	      this.lineToOriginSym.node.style.display = 'none';
	      this.dashLine.node.style.display = 'none';
	      this.degArcSym.node.style.display = 'none';
	      this.svgDegTxtSym.addClass('hide_dom');
	      this.distanceTextSym.node.style.display = 'none';
	      this.svgCoordTxtSym.addClass('hide_dom');
	    }
	  }, {
	    key: 'remove',
	    value: function remove() {
	      this.anyPoint.remove();
	      this.anyPoint = null;
	      this.lineToOrigin.remove();
	      this.distanceText.remove();
	      this.svgDegTxt.addClass('hide_dom');
	      this.degArc.remove();
	      this.svgCoordTxt.addClass('hide_dom');
	      this.svgCoordTxtSym.addClass('hide_dom');
	      this.anySymPoint.remove();
	      this.anySymPoint = null;
	      this.lineToOriginSym.remove();
	      this.dashLine.remove();
	      this.degArcSym.remove();
	      this.svgDegTxtSym.addClass('hide_dom');
	      this.distanceTextSym.remove();
	    }
	  }]);

	  return AnyPoint;
	}();

	exports.default = AnyPoint;

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _utils = __webpack_require__(4);

	var _utils2 = _interopRequireDefault(_utils);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var dsvgWidth = 888;
	var dsvgHeight = 913;
	var perMeasure = 40;
	var pointRadius = 15.5;

	var PresetB = function () {
	  function PresetB($view) {
	    _classCallCheck(this, PresetB);

	    this.$view = $view;
	    this.$selfView = this.$view.find('div.pcs_preset_2');
	    this.$firstView = this.$selfView.find('div.pcs_polar_to_point');
	    this.$secondView = this.$selfView.find('div.pcs_point_to_polar');
	    this._init();
	  }

	  _createClass(PresetB, [{
	    key: '_init',
	    value: function _init() {
	      this.polarToPoint = new PolarToPoint(this.$firstView);
	      this._bindDom();
	    }
	  }, {
	    key: '_bindDom',
	    value: function _bindDom() {
	      var that = this;
	      var coordinateBtn = that.$selfView.find('.pcs_coordinate_btn');
	      var pointBtn = that.$selfView.find('.pcs_point_btn');
	      var coordinateCase = that.$selfView.find('.pcs_polar_to_point');
	      var pointCase = that.$selfView.find('.pcs_point_to_polar');
	      // 底部切换按钮事件绑定
	      coordinateBtn.on('click', function () {
	        $(this).addClass('ui_btn_active');
	        pointBtn.removeClass('ui_btn_active');
	        coordinateCase.show();
	        pointCase.hide();
	        that.polarToPoint.resizeScreenHandler();
	      });
	      pointBtn.on('click', function () {
	        $(this).addClass('ui_btn_active');
	        coordinateBtn.removeClass('ui_btn_active');
	        pointCase.show();
	        coordinateCase.hide();
	        if (!that.pointToPolar) {
	          that.pointToPolar = new PointToPolar(that.$secondView);
	        }
	        that.pointToPolar.resizeScreenHandler();
	      });
	    }
	  }, {
	    key: 'resizeScreenHandler',
	    value: function resizeScreenHandler() {
	      this.polarToPoint.resizeScreenHandler();
	      if (this.pointToPolar) this.pointToPolar.resizeScreenHandler();
	    }
	  }]);

	  return PresetB;
	}();

	function getTextAttr(fill, text) {
	  return {
	    fill: fill,
	    font: 'italic 85px "Times New Roman"',
	    'text-anchor': 'middle',
	    'dominant-baseline': 'central',
	    'pointer-events': 'none',
	    text: text
	  };
	}

	function getPointAttr(fill) {
	  return {
	    fill: fill,
	    strokeWidth: 5,
	    stroke: '#ffffff',
	    r: pointRadius,
	    cursor: 'pointer'
	  };
	}

	function getDegArcAttr(stroke, fill) {
	  return {
	    stroke: stroke,
	    strokeWidth: 6,
	    'fill-opacity': 0.1,
	    fill: fill
	  };
	}

	function getLineAttr(stroke) {
	  return {
	    stroke: stroke,
	    strokeWidth: 7
	  };
	}

	var PolarToPoint = function () {
	  function PolarToPoint($view) {
	    _classCallCheck(this, PolarToPoint);

	    this.$view = $view;
	    this._init();
	  }

	  _createClass(PolarToPoint, [{
	    key: '_init',
	    value: function _init() {
	      this.svgContainer = this.$view.find('div.pcs_left_area');
	      var svg = this.svgContainer.find('svg');
	      this.paper = Snap(svg.get(0));
	      this.paper.attr('viewBox', '0 0 ' + dsvgWidth + ' ' + dsvgHeight);
	      // this.svgWidth = this.svgContainer.width()
	      // this.svgHeight = this.svgContainer.height()
	      // 自适应缩放系数
	      this.scale = Math.min(this.svgContainer.width() / dsvgWidth, this.svgContainer.height() / dsvgHeight);
	      this.isClosekeyboard1 = false;
	      this.isClosekeyboard2 = false;
	      // 输入框距离数值
	      this.distanceNums = this.$view.find('span._js_distance_num');
	      // 输入框弧度、分子、分母数值
	      this.degInputs = this.$view.find('div.pcs_input_2');
	      this.degNumerators = this.$view.find('span._js_numerator');
	      this.degDenominators = this.$view.find('span._js_denominator');
	      var that = this;
	      // 绘制背景
	      this._drawBg();
	      // 点及其文字组
	      this.groupA = that.paper.g();
	      this.groupB = that.paper.g();
	      this.groupC = that.paper.g();
	      this.groupD = that.paper.g();
	      this.groups = [this.groupA, this.groupB, this.groupC, this.groupD];
	      this.textA = that.groupA.text().attr(getTextAttr('#1a720c', 'A'));
	      this.textB = that.groupB.text().attr(getTextAttr('#e06313', 'B'));
	      this.textC = that.groupC.text().attr(getTextAttr('#cd261e', 'C'));
	      this.textD = that.groupD.text().attr(getTextAttr('#8c0ac9', 'D'));
	      this.texts = [this.textA, this.textB, this.textC, this.textD];
	      this.pointA = that.groupA.circle().attr(getPointAttr('#1a720c'));
	      this.pointB = that.groupB.circle().attr(getPointAttr('#e06313'));
	      this.pointC = that.groupC.circle().attr(getPointAttr('#cd261e'));
	      this.pointD = that.groupD.circle().attr(getPointAttr('#8c0ac9'));
	      this.points = [this.pointA, this.pointB, this.pointC, this.pointD];
	      // 弧度的扇形
	      this.degArcA = that.paper.path().attr(getDegArcAttr('#318a40', "#1a720c"));
	      this.degArcB = that.paper.path().attr(getDegArcAttr('#d67e46', "#e06313"));
	      this.degArcC = that.paper.path().attr(getDegArcAttr('#c64b4f', "#cb1f1f"));
	      this.degArcD = that.paper.path().attr(getDegArcAttr('#9033de', "#8300de"));
	      this.degArcs = [this.degArcA, this.degArcB, this.degArcC, this.degArcD];
	      // 点与原点连线
	      this.lineOA = that.paper.line().attr(getLineAttr('#04740b'));
	      this.lineOB = that.paper.line().attr(getLineAttr('#e06313'));
	      this.lineOC = that.paper.line().attr(getLineAttr('#cb1f1f'));
	      this.lineOD = that.paper.line().attr(getLineAttr('#8300de'));
	      this.lines = [this.lineOA, this.lineOB, this.lineOC, this.lineOD];
	      // 调整层级关系
	      this.originCircle.before(this.lineOA);
	      this.originCircle.before(this.lineOB);
	      this.originCircle.before(this.lineOC);
	      this.originCircle.before(this.lineOD);
	      this.xAxis.before(this.degArcA);
	      this.xAxis.before(this.degArcB);
	      this.xAxis.before(this.degArcC);
	      this.xAxis.before(this.degArcD);
	      this.svgDegTxt = this.$view.find('div.svg_deg_txt');
	      this.svgDegTxtClass = ['svg_degA_txt', 'svg_degB_txt', 'svg_degC_txt', 'svg_degD_txt'];
	      this.svgDegFenziTxt = this.svgDegTxt.find('div.pcs_numerator');
	      this.svgDegFenmuTxt = this.svgDegTxt.find('div.pcs_denominator');
	      // 随机距离数组
	      this.randomDisArr = [];
	      for (var i = 1; i < 10; i++) {
	        this.randomDisArr[i] = i;
	      }
	      for (var _i = 10; _i < 15; _i++) {
	        this.randomDisArr[_i] = _i - 5;
	      }
	      // 当前距离数组
	      this.currentDisArr = [];
	      // 随机弧度数组
	      this.randomDegArr = [];
	      for (var _i2 = 1; _i2 < 25; _i2++) {
	        this.randomDegArr[_i2] = _i2;
	      }
	      // 当前弧度数组
	      this.currentDegArr = [];
	      this._randomGenerate();
	      this._drawPoint();
	      this._bindDom();
	    }
	  }, {
	    key: '_bindDom',
	    value: function _bindDom() {
	      var that = this;
	      // 随机生成按钮
	      var randomBtn = this.$view.find('.pcs_random');
	      // 键盘上下拉按钮
	      var input1DownBtn = this.$view.find('span._js_input1_down_btn');
	      var input2DownBtn = this.$view.find('a.pcs_turn');
	      // 键盘1和键盘2
	      var keyboard1 = this.$view.find('div.pcs_drop_numselect_1');
	      var keyboard2 = this.$view.find('div.pcs_drop_numselect_2');
	      // 键盘上的数值按钮
	      var keyboard1Nums = keyboard1.find('span.pcs_num_btn');
	      var keyboard2Nums = keyboard2.find('div.pcs_num_btn');
	      // svg展示各个点按钮
	      var showPointBtn = this.$view.find('.pcs_show_btn');

	      // 距离键盘上下拉按钮事件绑定
	      input1DownBtn.click(function () {
	        var $this = $(this);
	        var index = input1DownBtn.index($this);
	        keyboard1.removeClass('show_1 show_2 show_3 show_4');
	        input1DownBtn.removeClass('ui_btn_active');
	        keyboard2.addClass('hide_dom');
	        input2DownBtn.removeClass('ui_btn_active');
	        $this.addClass('ui_btn_active');
	        // 重复点判断
	        keyboard1Nums.removeClass('click_disabled');
	        var disabledArr = [];
	        var _iteratorNormalCompletion = true;
	        var _didIteratorError = false;
	        var _iteratorError = undefined;

	        try {
	          for (var _iterator = that.currentDegArr.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	            var _step$value = _slicedToArray(_step.value, 2),
	                i = _step$value[0],
	                elem = _step$value[1];

	            if (i === index) continue;
	            if (elem === that.currentDegArr[index]) {
	              disabledArr.push(that.currentDisArr[i]);
	            }
	          }
	        } catch (err) {
	          _didIteratorError = true;
	          _iteratorError = err;
	        } finally {
	          try {
	            if (!_iteratorNormalCompletion && _iterator.return) {
	              _iterator.return();
	            }
	          } finally {
	            if (_didIteratorError) {
	              throw _iteratorError;
	            }
	          }
	        }

	        var _iteratorNormalCompletion2 = true;
	        var _didIteratorError2 = false;
	        var _iteratorError2 = undefined;

	        try {
	          for (var _iterator2 = disabledArr[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	            var i = _step2.value;

	            keyboard1Nums.eq(i - 1).addClass('click_disabled');
	          }
	        } catch (err) {
	          _didIteratorError2 = true;
	          _iteratorError2 = err;
	        } finally {
	          try {
	            if (!_iteratorNormalCompletion2 && _iterator2.return) {
	              _iterator2.return();
	            }
	          } finally {
	            if (_didIteratorError2) {
	              throw _iteratorError2;
	            }
	          }
	        }

	        if (keyboard1.hasClass('hide_dom')) {
	          keyboard1.removeClass('hide_dom');
	        } else {
	          // 判断是否是其他召唤键盘按钮点击还是自身点击
	          if (keyboard1.data('trigger') === index) {
	            keyboard1.addClass('hide_dom');
	            $this.removeClass('ui_btn_active');
	          }
	        }
	        // 键盘调整到相应位置
	        keyboard1.addClass('show_' + (index + 1));
	        // 记录当前触发键盘的输入框序号
	        keyboard1.data('trigger', index);
	      });
	      input1DownBtn.on('mousedown touchstart', function (e) {
	        e.stopPropagation();
	      });

	      // 弧度键盘上下拉按钮事件绑定
	      input2DownBtn.click(function () {
	        var $this = $(this);
	        var index = input2DownBtn.index($this);
	        keyboard2.removeClass('show_1 show_2 show_3 show_4');
	        input2DownBtn.removeClass('ui_btn_active');
	        keyboard1.addClass('hide_dom');
	        input1DownBtn.removeClass('ui_btn_active');
	        $this.addClass('ui_btn_active');
	        // 重复点判断
	        keyboard2Nums.removeClass('click_disabled');
	        var disabledArr = [];
	        var _iteratorNormalCompletion3 = true;
	        var _didIteratorError3 = false;
	        var _iteratorError3 = undefined;

	        try {
	          for (var _iterator3 = that.currentDisArr.entries()[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
	            var _step3$value = _slicedToArray(_step3.value, 2),
	                i = _step3$value[0],
	                elem = _step3$value[1];

	            if (i === index) continue;
	            if (elem === that.currentDisArr[index]) {
	              disabledArr.push(that.currentDegArr[i]);
	            }
	          }
	        } catch (err) {
	          _didIteratorError3 = true;
	          _iteratorError3 = err;
	        } finally {
	          try {
	            if (!_iteratorNormalCompletion3 && _iterator3.return) {
	              _iterator3.return();
	            }
	          } finally {
	            if (_didIteratorError3) {
	              throw _iteratorError3;
	            }
	          }
	        }

	        var _iteratorNormalCompletion4 = true;
	        var _didIteratorError4 = false;
	        var _iteratorError4 = undefined;

	        try {
	          for (var _iterator4 = disabledArr[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
	            var i = _step4.value;

	            keyboard2Nums.eq(i - 1).addClass('click_disabled');
	          }
	        } catch (err) {
	          _didIteratorError4 = true;
	          _iteratorError4 = err;
	        } finally {
	          try {
	            if (!_iteratorNormalCompletion4 && _iterator4.return) {
	              _iterator4.return();
	            }
	          } finally {
	            if (_didIteratorError4) {
	              throw _iteratorError4;
	            }
	          }
	        }

	        if (keyboard2.hasClass('hide_dom')) {
	          keyboard2.removeClass('hide_dom');
	        } else {
	          // 判断是否是其他召唤键盘按钮点击还是自身点击
	          if (keyboard2.data('trigger') === index) {
	            keyboard2.addClass('hide_dom');
	            $this.removeClass('ui_btn_active');
	          }
	        }
	        // 键盘调整到相应位置
	        keyboard2.addClass('show_' + (index + 1));
	        // 记录当前触发键盘的输入框序号
	        keyboard2.data('trigger', index);
	      });
	      input2DownBtn.on('mousedown touchstart', function (e) {
	        e.stopPropagation();
	      });

	      // 距离键盘事件绑定
	      keyboard1.on('click', function (e) {
	        var $target = $(e.target);
	        if ($target.hasClass('pcs_num_btn') || $target.parent().hasClass('pcs_num_btn')) {
	          $target = $target.parent().hasClass('pcs_num_btn') ? $target.parent() : $target;
	          if ($target.hasClass('click_disabled')) return;
	          // 记录按下按钮的序号
	          var index = keyboard1Nums.index($target);
	          // 获取相应的输入框并改变数值
	          var trigger = keyboard1.data('trigger');
	          that.distanceNums.eq(trigger).text(index + 1);
	          keyboard1.addClass('hide_dom');
	          input1DownBtn.removeClass('ui_btn_active');
	          // 当前距离数组值随之改变
	          that.currentDisArr[trigger] = index + 1;
	          showPointBtn.eq(trigger).removeClass('ui_btn_active');
	          that._drawPoint(trigger);
	          that._hideAssistant(trigger);
	        }
	      });
	      keyboard1.on('mousedown touchstart', function (e) {
	        e.stopPropagation();
	      });

	      // 弧度键盘事件绑定
	      keyboard2.on('click', function (e) {
	        var $target = $(e.target);
	        if ($target.hasClass('pcs_num_btn') || $target.parents('.pcs_num_btn').length !== 0) {
	          $target = $target.parents('.pcs_num_btn') ? $target.parents('.pcs_num_btn') : $target;
	          if ($target.hasClass('click_disabled')) return;
	          // 记录按下按钮的序号
	          var index = keyboard2Nums.index($target);
	          // 角度转化为分数弧度
	          if (index < 0) return;
	          var maxYueShu = _utils2.default.getGongYueShu(180, (index + 1) * 15);
	          var degFenzi = (index + 1) * 15 / maxYueShu;
	          var degFenmu = 180 / maxYueShu;
	          degFenzi = degFenzi === 1 ? '' : degFenzi;
	          // 获取相应的输入框序号
	          var trigger = keyboard2.data('trigger');
	          // 判断是否为整数并处理
	          that.degInputs.eq(trigger).removeClass('pcs_integer');
	          if (degFenmu === 1) {
	            that.degInputs.eq(trigger).addClass('pcs_integer');
	          }
	          // 改变输入框数值
	          that.degNumerators.eq(trigger).text(degFenzi);
	          that.degDenominators.eq(trigger).text(degFenmu);
	          keyboard2.addClass('hide_dom');
	          input2DownBtn.removeClass('ui_btn_active');
	          // 当前弧度数组值随之改变
	          that.currentDegArr[trigger] = index + 1;
	          showPointBtn.eq(trigger).removeClass('ui_btn_active');
	          that._drawPoint(trigger);
	          that._hideAssistant(trigger);
	        }
	      });
	      keyboard2.on('mousedown touchstart', function (e) {
	        e.stopPropagation();
	      });

	      // 其他位置点击 键盘关闭
	      that.$view.parents('.polarcoordinate_wrapper').on('mousedown touchstart', function () {
	        that.isClosekeyboard1 = true;
	        that.isClosekeyboard2 = true;
	      });
	      $(document).on('mouseup touchend', function () {
	        if (that.isClosekeyboard1) {
	          keyboard1.addClass('hide_dom');
	          input1DownBtn.removeClass('ui_btn_active');
	        }
	        that.isClosekeyboard1 = false;
	        if (that.isClosekeyboard2) {
	          keyboard2.addClass('hide_dom');
	          input2DownBtn.removeClass('ui_btn_active');
	        }
	        that.isClosekeyboard2 = false;
	      });

	      // 随机生成按钮事件绑定
	      randomBtn.on('mousedown touchstart', function (e) {
	        if (that.isTouchEvent && e.type == 'mousedown') {
	          return;
	        }
	        if (e.type == 'touchstart') {
	          that.isTouchEvent = true;
	        }
	      }).on('mouseup touchend', function (e) {
	        if (that.isTouchEvent && e.type == 'mousedown') {
	          return;
	        }
	        showPointBtn.removeClass('ui_btn_active');
	        that._randomGenerate();
	        that._drawPoint();
	        that._hideAssistant();
	        that.pointA.data('isShowAssistant', false);
	        that.pointB.data('isShowAssistant', false);
	        that.pointC.data('isShowAssistant', false);
	        that.pointD.data('isShowAssistant', false);
	      });

	      // 眼睛按钮事件绑定
	      showPointBtn.on('click', function () {
	        var $this = $(this);
	        var index = showPointBtn.index($this);
	        var groupObject = that.groups[index];
	        if ($this.hasClass('ui_btn_active')) {
	          $this.removeClass('ui_btn_active');
	          groupObject.node.style.display = 'none';
	          that._hideAssistant(index);
	        } else {
	          $this.addClass('ui_btn_active');
	          groupObject.node.style.display = 'block';
	        }
	      });

	      // svg上各个点事件绑定
	      that.pointA.click(function () {
	        pointClick(this, 0);
	      });
	      that.pointB.click(function () {
	        pointClick(this, 1);
	      });
	      that.pointC.click(function () {
	        pointClick(this, 2);
	      });
	      that.pointD.click(function () {
	        pointClick(this, 3);
	      });

	      function pointClick(target, num) {
	        that._hideAssistant();
	        var isShowAssistant = target.data('isShowAssistant');
	        that.pointA.data('isShowAssistant', false);
	        that.pointB.data('isShowAssistant', false);
	        that.pointC.data('isShowAssistant', false);
	        that.pointD.data('isShowAssistant', false);
	        if (!isShowAssistant) {
	          that._drawAssistant(num);
	          target.data('isShowAssistant', true);
	        }
	      }
	    }
	  }, {
	    key: 'resizeScreenHandler',
	    value: function resizeScreenHandler() {
	      this.scale = Math.min(this.svgContainer.width() / dsvgWidth, this.svgContainer.height() / dsvgHeight);
	      var disNum = this.currentDisArr[this.curNum];
	      var deg = this.currentDegArr[this.curNum] * 15;
	      var tDeg = disNum <= 3 && deg <= 45 ? 80 : deg / 1.8;
	      var tDis = disNum <= 3 && deg <= 45 ? 150 : 120;
	      tDeg = tDeg < 25 ? 80 : tDeg;
	      var tx = dsvgWidth / 2 + tDis * Math.cos(tDeg / 180 * Math.PI);
	      var ty = dsvgHeight / 2 - tDis * Math.sin(tDeg / 180 * Math.PI);
	      this.svgDegTxt.css({
	        left: tx * this.scale,
	        top: ty * this.scale
	      });
	    }

	    // 随机生成4个点坐标

	  }, {
	    key: '_randomGenerate',
	    value: function _randomGenerate() {
	      var that = this;
	      var num = void 0;
	      var maxYueShu = void 0;
	      var degFenzi = void 0;
	      var degFenmu = void 0;
	      that.currentDisArr.length = 0;
	      that.currentDegArr.length = 0;
	      that.degInputs.removeClass('pcs_integer');
	      that.randomDisArr.sort(function () {
	        return 0.5 - Math.random();
	      });
	      that.randomDegArr.sort(function () {
	        return 0.5 - Math.random();
	      });
	      // 距离赋值和记录
	      for (var i = 0; i < 4; i++) {
	        that.distanceNums.eq(i).text(that.randomDisArr[i]);
	        that.currentDisArr.push(that.randomDisArr[i]);
	      }
	      // 弧度赋值和记录
	      for (var _i3 = 0; _i3 < 4; _i3++) {
	        num = that.randomDegArr[_i3];
	        that.currentDegArr.push(num);
	        maxYueShu = _utils2.default.getGongYueShu(180, num * 15);
	        degFenzi = num * 15 / maxYueShu;
	        degFenmu = 180 / maxYueShu;
	        degFenzi = degFenzi === 1 ? '' : degFenzi;
	        if (degFenmu === 1) {
	          that.degInputs.eq(_i3).addClass('pcs_integer');
	        }
	        that.degNumerators.eq(_i3).text(degFenzi);
	        that.degDenominators.eq(_i3).text(degFenmu);
	      }
	    }

	    // svg画布有关点的辅助线绘制

	  }, {
	    key: '_drawAssistant',
	    value: function _drawAssistant(num) {
	      var that = this;
	      var centralx = dsvgWidth / 2;
	      var centraly = dsvgHeight / 2;
	      that.curNum = num;
	      that.svgDegTxt.removeClass('svg_degA_txt svg_degB_txt svg_degC_txt svg_degD_txt');
	      var pointObject = that.points[num];
	      var lineObject = that.lines[num];
	      var degArcObject = that.degArcs[num];
	      that.svgDegTxt.addClass(that.svgDegTxtClass[num]).removeClass('hide_dom');
	      lineObject.node.style.display = 'block';
	      degArcObject.node.style.display = 'block';
	      var distance = perMeasure * that.currentDisArr[num];
	      var disNum = that.currentDisArr[num];
	      var deg = that.currentDegArr[num] * 15;
	      var flag = deg >= 180 ? 1 : 0;
	      var x = pointObject.attr('cx');
	      var y = pointObject.attr('cy');
	      lineObject.attr({
	        x1: centralx,
	        y1: centraly,
	        x2: x,
	        y2: y
	      });
	      var clockwise = 0;
	      if (deg === 360) {
	        y = y - 0.2;
	        clockwise = 1;
	      }
	      var arcPath = 'M{x1} {y1}L{x2} {y2}A{r} {r} 0 {d} {c} {x3} {y3}Z';
	      arcPath = Snap.format(arcPath, {
	        x1: centralx,
	        y1: centraly,
	        x2: centralx + distance,
	        y2: centraly,
	        r: distance,
	        d: flag,
	        c: clockwise,
	        x3: x,
	        y3: y
	      });
	      degArcObject.attr({
	        path: arcPath
	      });
	      var maxYueShu = void 0;
	      var degFenzi = void 0;
	      var degFenmu = void 0;
	      if (parseInt(deg) !== 0) {
	        maxYueShu = _utils2.default.getGongYueShu(180, deg);
	        degFenzi = deg / maxYueShu;
	        degFenzi = degFenzi === 1 ? '' : degFenzi;
	        degFenmu = 180 / maxYueShu;
	      }
	      that.svgDegFenziTxt.find('span:first-child').text(degFenzi);
	      that.svgDegFenmuTxt.find('span').text(degFenmu);
	      if (degFenzi === 1) {
	        that.svgDegFenziTxt.find('span:first-child').text('');
	      }
	      that.svgDegTxt.removeClass('pcs_integer');
	      if (degFenmu === 1) {
	        that.svgDegTxt.addClass('pcs_integer');
	      }
	      var tDeg = disNum <= 3 && deg <= 45 ? 80 : deg / 1.8;
	      var tDis = disNum <= 3 && deg <= 45 ? 150 : 120;
	      tDeg = tDeg < 25 ? 80 : tDeg;
	      var tx = centralx + tDis * Math.cos(tDeg / 180 * Math.PI);
	      var ty = centraly - tDis * Math.sin(tDeg / 180 * Math.PI);
	      that.svgDegTxt.css({
	        left: tx * that.scale,
	        top: ty * that.scale
	      });
	    }

	    // 隐藏辅助线

	  }, {
	    key: '_hideAssistant',
	    value: function _hideAssistant(num) {
	      if (num !== undefined) {
	        this.degArcs[num].node.style.display = 'none';
	        this.lines[num].node.style.display = 'none';
	        if (this.svgDegTxt.hasClass(this.svgDegTxtClass[num])) {
	          this.svgDegTxt.addClass('hide_dom');
	        }
	      } else {
	        var _iteratorNormalCompletion5 = true;
	        var _didIteratorError5 = false;
	        var _iteratorError5 = undefined;

	        try {
	          for (var _iterator5 = this.degArcs[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
	            var degArc = _step5.value;

	            degArc.node.style.display = 'none';
	          }
	        } catch (err) {
	          _didIteratorError5 = true;
	          _iteratorError5 = err;
	        } finally {
	          try {
	            if (!_iteratorNormalCompletion5 && _iterator5.return) {
	              _iterator5.return();
	            }
	          } finally {
	            if (_didIteratorError5) {
	              throw _iteratorError5;
	            }
	          }
	        }

	        var _iteratorNormalCompletion6 = true;
	        var _didIteratorError6 = false;
	        var _iteratorError6 = undefined;

	        try {
	          for (var _iterator6 = this.lines[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
	            var line = _step6.value;

	            line.node.style.display = 'none';
	          }
	        } catch (err) {
	          _didIteratorError6 = true;
	          _iteratorError6 = err;
	        } finally {
	          try {
	            if (!_iteratorNormalCompletion6 && _iterator6.return) {
	              _iterator6.return();
	            }
	          } finally {
	            if (_didIteratorError6) {
	              throw _iteratorError6;
	            }
	          }
	        }

	        this.svgDegTxt.addClass('hide_dom');
	      }
	    }

	    // svg画布画点

	  }, {
	    key: '_drawPoint',
	    value: function _drawPoint(num) {
	      var that = this;
	      var centralx = dsvgWidth / 2;
	      var centraly = dsvgHeight / 2;
	      var init = 0;
	      var final = 4;
	      if (num !== undefined) {
	        init = num;
	        final = num + 1;
	      }
	      for (var i = init; i < final; i++) {
	        var x = centralx + perMeasure * that.currentDisArr[i] * Math.cos(that.currentDegArr[i] * 15 / 180 * Math.PI);
	        var y = centraly - perMeasure * that.currentDisArr[i] * Math.sin(that.currentDegArr[i] * 15 / 180 * Math.PI);
	        var tx = centralx + perMeasure * (that.currentDisArr[i] + 1.4) * Math.cos(that.currentDegArr[i] * 15 / 180 * Math.PI);
	        var ty = centraly - perMeasure * (that.currentDisArr[i] + 1.4) * Math.sin(that.currentDegArr[i] * 15 / 180 * Math.PI);
	        that.points[i].attr({
	          cx: x,
	          cy: y
	        });
	        that.texts[i].attr({
	          x: tx,
	          y: ty
	        });
	        that.groups[i].node.style.display = 'none';
	      }
	    }

	    // 绘制背景

	  }, {
	    key: '_drawBg',
	    value: function _drawBg() {
	      var that = this;
	      var cx = dsvgWidth / 2;
	      var cy = dsvgHeight / 2;
	      // 绘制同心圆
	      for (var i = 0; i < 9; i++) {
	        that.paper.circle(cx, cy, perMeasure * (i + 1)).attr({
	          fill: 'none',
	          stroke: '#4d4d4d',
	          strokeWidth: 2
	        });
	      }
	      // 绘制虚线射线
	      var distance = 410;
	      for (var _i4 = 0; _i4 < 24; _i4++) {
	        var x = distance * Math.cos(15 * _i4 / 180 * Math.PI) + cx;
	        var y = distance * Math.sin(15 * _i4 / 180 * Math.PI) + cy;
	        that.paper.line(cx, cy, x, y).attr({
	          stroke: '#4d4d4d',
	          strokeWidth: 2,
	          'stroke-dasharray': 6 + ',' + 2
	        });
	      }
	      // 绘制刻度
	      for (var _i5 = 1; _i5 < 10; _i5++) {
	        that.paper.text(cx + perMeasure * _i5, cy + 10, _i5).attr({
	          'font': 'bold 2.5em "Times New Roman"',
	          'text-anchor': 'middle',
	          'dominant-baseline': 'hanging',
	          'fill': '#4d4d4d'
	        });
	      }
	      // 绘制极点
	      that.originCircle = that.paper.circle(cx, cy, 18.5).attr({
	        fill: '#4d4d4d'
	      });
	      // 绘制x轴
	      var destX = cx + distance;
	      var destY = cy;
	      that.xAxis = that.paper.line(cx, cy, destX, destY).attr({
	        stroke: '#4d4d4d',
	        strokeWidth: 8
	      });
	      that.originCircle.before(that.xAxis);
	      // 绘制x轴箭头
	      var arrowPath = 'M{x1} {y1}Q{cx1} {cy1} {x2} {y2}Q{cx2} {cy2} {x3} {y3}Q{cx3} {cy3} {x4} {y4}Q{cx4} {cy4} {x5} {y5}';
	      arrowPath = Snap.format(arrowPath, {
	        x1: destX,
	        y1: destY,
	        cx1: destX - 6,
	        cy1: destY + 5,
	        x2: destX - 12,
	        y2: destY + 22,
	        cx2: destX,
	        cy2: destY + 6,
	        x3: destX + 18,
	        y3: destY,
	        cx3: destX,
	        cy3: destY - 6,
	        x4: destX - 12,
	        y4: destY - 22,
	        cx4: destX - 6,
	        cy4: destY - 5,
	        x5: destX,
	        y5: destY
	      });
	      that.paper.path(arrowPath).attr({
	        fill: '#4d4d4d'
	      });
	    }
	  }]);

	  return PolarToPoint;
	}();

	var PointToPolar = function () {
	  function PointToPolar($view) {
	    _classCallCheck(this, PointToPolar);

	    this.$view = $view;
	    this._init();
	  }

	  _createClass(PointToPolar, [{
	    key: '_init',
	    value: function _init() {
	      this.svgContainer = this.$view.find('div.pcs_left_area');
	      var $svg = this.svgContainer.find('svg');
	      this.svgDom = $svg[0];
	      this.paper = Snap($svg.get(0));
	      this.paper.attr('viewBox', '0 0 ' + dsvgWidth + ' ' + dsvgHeight);
	      // this.svgWidth = this.svgContainer.width()
	      // this.svgHeight = this.svgContainer.height()
	      // 自适应缩放系数
	      this.scale = Math.min(this.svgContainer.width() / dsvgWidth, this.svgContainer.height() / dsvgHeight);
	      this._drawBg();
	      var that = this;
	      // 点及其文字组
	      this.groupA = that.paper.g();
	      this.groupB = that.paper.g();
	      this.groupC = that.paper.g();
	      this.groupD = that.paper.g();
	      this.groups = [this.groupA, this.groupB, this.groupC, this.groupD];
	      this.textA = that.groupA.text().attr(getTextAttr('#1a720c', 'A'));
	      this.textB = that.groupB.text().attr(getTextAttr('#e06313', 'B'));
	      this.textC = that.groupC.text().attr(getTextAttr('#cd261e', 'C'));
	      this.textD = that.groupD.text().attr(getTextAttr('#8c0ac9', 'D'));
	      this.texts = [this.textA, this.textB, this.textC, this.textD];
	      this.pointA = that.groupA.circle().attr(getPointAttr('#1a720c'));
	      this.pointB = that.groupB.circle().attr(getPointAttr('#e06313'));
	      this.pointC = that.groupC.circle().attr(getPointAttr('#cd261e'));
	      this.pointD = that.groupD.circle().attr(getPointAttr('#8c0ac9'));
	      this.points = [this.pointA, this.pointB, this.pointC, this.pointD];
	      // 弧度的扇形
	      this.degArcA = that.paper.path().attr(getDegArcAttr('#318a40', '#1a720c'));
	      this.degArcB = that.paper.path().attr(getDegArcAttr('#d67e46', '#e06313'));
	      this.degArcC = that.paper.path().attr(getDegArcAttr('#c64b4f', '#cb1f1f'));
	      this.degArcD = that.paper.path().attr(getDegArcAttr('#9033de', '#8300de'));
	      this.degArcs = [this.degArcA, this.degArcB, this.degArcC, this.degArcD];
	      // 点与原点连线
	      this.lineOA = that.paper.line().attr(getLineAttr('#04740b'));
	      this.lineOB = that.paper.line().attr(getLineAttr('#e06313'));
	      this.lineOC = that.paper.line().attr(getLineAttr('#cb1f1f'));
	      this.lineOD = that.paper.line().attr(getLineAttr('#8300de'));
	      this.lines = [this.lineOA, this.lineOB, this.lineOC, this.lineOD];

	      // 调整层级关系
	      this.originCircle.before(this.lineOA);
	      this.originCircle.before(this.lineOB);
	      this.originCircle.before(this.lineOC);
	      this.originCircle.before(this.lineOD);
	      this.xAxis.before(this.degArcA);
	      this.xAxis.before(this.degArcB);
	      this.xAxis.before(this.degArcC);
	      this.xAxis.before(this.degArcD);
	      this.svgDegTxt = this.$view.find('div.svg_deg_txt');
	      this.svgDegTxtClass = ['svg_degA_txt', 'svg_degB_txt', 'svg_degC_txt', 'svg_degD_txt'];
	      this.svgDegFenziTxt = this.svgDegTxt.find('div.pcs_numerator');
	      this.svgDegFenmuTxt = this.svgDegTxt.find('div.pcs_denominator');
	      // 坐标数值
	      this.axisInputs = this.$view.find('div.pcs_inputs');
	      // 输入框距离数值
	      this.distanceNums = this.$view.find('span._js_distance_num');
	      // 输入框弧度、分子、分母数值
	      this.degInputs = this.$view.find('div.pcs_input_2');
	      this.degNumerators = this.$view.find('span._js_numerator');
	      this.degDenominators = this.$view.find('span._js_denominator');
	      // 随机距离数组
	      this.randomDisArr = [];
	      this.snapDisArr = [];
	      for (var i = 1; i < 10; i++) {
	        this.randomDisArr[i] = i;
	        this.snapDisArr[i] = i * perMeasure;
	      }
	      for (var _i6 = 10; _i6 < 15; _i6++) {
	        this.randomDisArr[_i6] = _i6 - 5;
	      }
	      // 当前距离数组
	      this.currentDisArr = [];
	      // 随机弧度数组
	      this.randomDegArr = [];
	      this.snapDegArr = [];
	      for (var _i7 = 1; _i7 < 25; _i7++) {
	        this.randomDegArr[_i7] = _i7;
	        this.snapDegArr[_i7] = _i7 * 15;
	      }
	      // 当前弧度数组
	      this.currentDegArr = [];
	      this._randomGenerate();
	      this._drawPoint();
	      this._bindDom();
	    }
	  }, {
	    key: '_bindDom',
	    value: function _bindDom() {
	      // 随机生成按钮
	      var that = this;
	      var randomBtn = this.$view.find('.pcs_random');
	      var showPointBtn = this.$view.find('.pcs_show_btn');
	      var isMouseDown = false;
	      var hasMove = false;
	      var centralx = dsvgWidth / 2;
	      var centraly = dsvgHeight / 2;
	      var movePoint = void 0;
	      var moveText = void 0;
	      var moveGroup = void 0;
	      var startX = void 0;
	      var startY = void 0;
	      var x = void 0;
	      var y = void 0;
	      var tx = void 0;
	      var ty = void 0;
	      var pointNum = void 0;

	      // 随机生成按钮事件绑定
	      randomBtn.on('mousedown touchstart', function (e) {
	        if (that.isTouchEvent && e.type == 'mousedown') {
	          return;
	        }
	        if (e.type == 'touchstart') {
	          that.isTouchEvent = true;
	        }
	      }).on('mouseup touchend', function (e) {
	        if (that.isTouchEvent && e.type == 'mouseup') {
	          return;
	        }
	        showPointBtn.removeClass('ui_btn_active');
	        that.axisInputs.addClass('hide_visibility');
	        that._randomGenerate();
	        that._hideAssistant();
	        that._drawPoint();
	      });

	      // 眼睛按钮事件绑定
	      showPointBtn.on('click', function () {
	        var $this = $(this);
	        var index = showPointBtn.index($this);
	        if ($this.hasClass('ui_btn_active')) {
	          $this.removeClass('ui_btn_active');
	          that.axisInputs.eq(index).addClass('hide_visibility');
	        } else {
	          $this.addClass('ui_btn_active');
	          that.axisInputs.eq(index).removeClass('hide_visibility');
	        }
	      });

	      that.pointA.mousedown(function (e) {
	        isMouseDown = true;
	        hasMove = false;
	        movePoint = that.pointA;
	        moveText = that.textA;
	        pointNum = 0;
	        moveGroup = that.groupA;
	        mousedownInit(e);
	      });
	      that.pointA.touchstart(function (e) {
	        that.isTouchEvent = true;
	        isMouseDown = true;
	        hasMove = false;
	        movePoint = that.pointA;
	        moveText = that.textA;
	        pointNum = 0;
	        moveGroup = that.groupA;
	        mousedownInit(e);
	      });
	      that.pointB.mousedown(function (e) {
	        isMouseDown = true;
	        hasMove = false;
	        movePoint = that.pointB;
	        moveText = that.textB;
	        pointNum = 1;
	        moveGroup = that.groupB;
	        mousedownInit(e);
	      });
	      that.pointB.touchstart(function (e) {
	        that.isTouchEvent = true;
	        isMouseDown = true;
	        hasMove = false;
	        movePoint = that.pointB;
	        moveText = that.textB;
	        pointNum = 1;
	        moveGroup = that.groupB;
	        mousedownInit(e);
	      });
	      that.pointC.mousedown(function (e) {
	        isMouseDown = true;
	        hasMove = false;
	        movePoint = that.pointC;
	        moveText = that.textC;
	        pointNum = 2;
	        moveGroup = that.groupC;
	        mousedownInit(e);
	      });
	      that.pointC.touchstart(function (e) {
	        that.isTouchEvent = true;
	        isMouseDown = true;
	        hasMove = false;
	        movePoint = that.pointC;
	        moveText = that.textC;
	        pointNum = 2;
	        moveGroup = that.groupC;
	        mousedownInit(e);
	      });
	      that.pointD.mousedown(function (e) {
	        isMouseDown = true;
	        hasMove = false;
	        movePoint = that.pointD;
	        moveText = that.textD;
	        pointNum = 3;
	        moveGroup = that.groupD;
	        mousedownInit(e);
	      });
	      that.pointD.touchstart(function (e) {
	        that.isTouchEvent = true;
	        isMouseDown = true;
	        hasMove = false;
	        movePoint = that.pointD;
	        moveText = that.textD;
	        pointNum = 3;
	        moveGroup = that.groupD;
	        mousedownInit(e);
	      });

	      function mousedownInit(e) {
	        e = e.touches ? e.touches[0] : e;
	        that.paper.append(moveGroup);
	        var point = _utils2.default.reportMouseCoordinates(that.svgDom, e.pageX, e.pageY, that.svgDom);
	        startX = point.x;
	        startY = point.y;
	        x = parseInt(movePoint.attr('cx'));
	        y = parseInt(movePoint.attr('cy'));
	        tx = parseInt(moveText.attr('x'));
	        ty = parseInt(moveText.attr('y'));
	      }

	      $(document).on('mousemove touchmove', function (e) {
	        if (isMouseDown) {
	          if (that.isTouchEvent && e.type == 'mousemove') {
	            return;
	          }
	          e = e.originalEvent.touches ? e.originalEvent.touches[0] : e;
	          var point2 = _utils2.default.reportMouseCoordinates(that.svgDom, e.pageX, e.pageY, that.svgDom);
	          var moveX = point2.x;
	          var moveY = point2.y;
	          var deltaX = moveX - startX;
	          var deltaY = moveY - startY;
	          if (Math.abs(deltaX) > 3 || Math.abs(deltaY) > 3) {
	            that._hideAssistant(pointNum);
	            var newX = x + deltaX;
	            var newY = y + deltaY;
	            if (newX < 85) {
	              newX = 85;
	            } else if (newX > dsvgWidth - 85) {
	              newX = dsvgWidth - 85;
	            }
	            if (newY < 85) {
	              newY = 85;
	            } else if (newY > dsvgHeight - 85) {
	              newY = dsvgHeight - 85;
	            }
	            movePoint.data('isShowAssistant', false);
	            hasMove = true;
	            movePoint.attr({
	              cx: newX,
	              cy: newY
	            });
	            moveText.attr({
	              x: newX - x + tx,
	              y: newY - y + ty
	            });
	          }
	        }
	      });

	      $(document).on('mouseup touchend', function (e) {
	        if (isMouseDown) {
	          if (that.isTouchEvent && e.type == 'mouseup') {
	            return;
	          }
	          if (hasMove) {
	            that._snap(movePoint, moveText, pointNum);
	            showPointBtn.eq(pointNum).removeClass('ui_btn_active');
	            that.axisInputs.eq(pointNum).addClass('hide_visibility');
	            var _tx = centralx + perMeasure * (that.currentDisArr[pointNum] + 1.4) * Math.cos(that.currentDegArr[pointNum] * 15 / 180 * Math.PI);
	            var _ty = centraly - perMeasure * (that.currentDisArr[pointNum] + 1.4) * Math.sin(that.currentDegArr[pointNum] * 15 / 180 * Math.PI);
	            moveText.attr({
	              x: _tx,
	              y: _ty
	            });
	          } else {
	            that._click(movePoint, pointNum);
	          }
	        }
	        isMouseDown = false;
	        hasMove = false;
	      });
	    }
	  }, {
	    key: '_click',
	    value: function _click(target, num) {
	      this._hideAssistant();
	      var isShowAssistant = target.data('isShowAssistant');
	      this.pointA.data('isShowAssistant', false);
	      this.pointB.data('isShowAssistant', false);
	      this.pointC.data('isShowAssistant', false);
	      this.pointD.data('isShowAssistant', false);
	      if (!isShowAssistant) {
	        this._drawAssistant(num);
	        target.data('isShowAssistant', true);
	      }
	    }
	  }, {
	    key: '_snap',
	    value: function _snap(point, text, num) {
	      var centralx = dsvgWidth / 2;
	      var centraly = dsvgHeight / 2;
	      var x = parseInt(point.attr('cx'));
	      var y = parseInt(point.attr('cy'));
	      var tx = parseInt(text.attr('x'));
	      var ty = parseInt(text.attr('y'));
	      var deg = 360 - Snap.angle(x, y, centralx, centraly);
	      var distance = _utils2.default.getDistance(x, y, centralx, centraly);
	      var newDeg = Snap.snapTo(this.snapDegArr, deg, 7.5);
	      newDeg = newDeg <= 7.5 ? 360 : newDeg;
	      var newDis = Snap.snapTo(this.snapDisArr, distance, perMeasure * 0.5);
	      newDis = newDis < perMeasure ? perMeasure : newDis;
	      newDis = newDis > perMeasure * 9 ? perMeasure * 9 : newDis;
	      var newX = newDis * Math.cos(newDeg / 180 * Math.PI) + centralx;
	      var newY = -newDis * Math.sin(newDeg / 180 * Math.PI) + centraly;
	      point.attr({
	        cx: newX,
	        cy: newY
	      });
	      text.attr({
	        x: newX - x + tx,
	        y: newY - y + ty
	      });
	      this.currentDegArr[num] = Math.round(newDeg / 15);
	      var maxYueShu = _utils2.default.getGongYueShu(180, newDeg);
	      var degFenzi = newDeg / maxYueShu;
	      var degFenmu = 180 / maxYueShu;
	      degFenzi = degFenzi === 1 ? '' : degFenzi;
	      this.degInputs.eq(num).removeClass('pcs_integer');
	      if (degFenmu === 1) {
	        this.degInputs.eq(num).addClass('pcs_integer');
	      }
	      this.degNumerators.eq(num).text(degFenzi);
	      this.degDenominators.eq(num).text(degFenmu);
	      this.currentDisArr[num] = Math.round(newDis / perMeasure);
	      this.distanceNums.eq(num).text(this.currentDisArr[num]);
	    }
	  }, {
	    key: 'resizeScreenHandler',
	    value: function resizeScreenHandler() {
	      this.scale = Math.min(this.svgContainer.width() / dsvgWidth, this.svgContainer.height() / dsvgHeight);
	      var disNum = this.currentDisArr[this.curNum];
	      var deg = this.currentDegArr[this.curNum] * 15;
	      var tDeg = disNum <= 3 && deg <= 45 ? 80 : deg / 1.7;
	      var tDis = disNum <= 3 && deg <= 45 ? 150 : 120;
	      tDeg = tDeg < 25 ? 80 : tDeg;
	      var tx = dsvgWidth / 2 + tDis * Math.cos(tDeg / 180 * Math.PI);
	      var ty = dsvgHeight / 2 - tDis * Math.sin(tDeg / 180 * Math.PI);
	      this.svgDegTxt.css({
	        left: tx * this.scale,
	        top: ty * this.scale
	      });
	    }
	  }, {
	    key: '_drawPoint',
	    value: function _drawPoint(num) {
	      var that = this;
	      var centralx = dsvgWidth / 2;
	      var centraly = dsvgHeight / 2;
	      var init = 0;
	      var final = 4;
	      if (num !== undefined) {
	        init = num;
	        final = num + 1;
	      }
	      for (var i = init; i < final; i++) {
	        var x = centralx + perMeasure * that.currentDisArr[i] * Math.cos(that.currentDegArr[i] * 15 / 180 * Math.PI);
	        var y = centraly - perMeasure * that.currentDisArr[i] * Math.sin(that.currentDegArr[i] * 15 / 180 * Math.PI);
	        var tx = centralx + perMeasure * (that.currentDisArr[i] + 1.4) * Math.cos(that.currentDegArr[i] * 15 / 180 * Math.PI);
	        var ty = centraly - perMeasure * (that.currentDisArr[i] + 1.4) * Math.sin(that.currentDegArr[i] * 15 / 180 * Math.PI);
	        that.points[i].attr({
	          cx: x,
	          cy: y
	        });
	        that.texts[i].attr({
	          x: tx,
	          y: ty
	        });
	      }
	    }

	    // svg画布有关点的辅助线绘制

	  }, {
	    key: '_drawAssistant',
	    value: function _drawAssistant(num) {
	      var that = this;
	      var centralx = dsvgWidth / 2;
	      var centraly = dsvgHeight / 2;
	      that.curNum = num;
	      that.svgDegTxt.removeClass('svg_degA_txt svg_degB_txt svg_degC_txt svg_degD_txt');
	      var pointObject = that.points[num];
	      var lineObject = that.lines[num];
	      var degArcObject = that.degArcs[num];
	      that.svgDegTxt.addClass(that.svgDegTxtClass[num]).removeClass('hide_dom');
	      lineObject.node.style.display = 'block';
	      degArcObject.node.style.display = 'block';
	      var distance = perMeasure * that.currentDisArr[num];
	      var disNum = that.currentDisArr[num];
	      var deg = that.currentDegArr[num] * 15;
	      var flag = deg >= 180 ? 1 : 0;
	      var x = pointObject.attr('cx');
	      var y = pointObject.attr('cy');
	      lineObject.attr({
	        x1: centralx,
	        y1: centraly,
	        x2: x,
	        y2: y
	      });
	      var clockwise = 0;
	      var arcPath = 'M{x1} {y1}L{x2} {y2}A{r} {r} 0 {d} {c} {x3} {y3}Z';
	      if (deg === 360) {
	        y = y - 0.2;
	        clockwise = 1;
	      }
	      arcPath = Snap.format(arcPath, {
	        x1: centralx,
	        y1: centraly,
	        x2: centralx + distance,
	        y2: centraly,
	        r: distance,
	        d: flag,
	        c: clockwise,
	        x3: x,
	        y3: y
	      });
	      degArcObject.attr({
	        path: arcPath
	      });
	      var maxYueShu = void 0;
	      var degFenzi = void 0;
	      var degFenmu = void 0;
	      if (parseInt(deg) !== 0) {
	        maxYueShu = _utils2.default.getGongYueShu(180, deg);
	        degFenzi = deg / maxYueShu;
	        degFenzi = degFenzi === 1 ? '' : degFenzi;
	        degFenmu = 180 / maxYueShu;
	      }
	      that.svgDegFenziTxt.find('span:first-child').text(degFenzi);
	      that.svgDegFenmuTxt.find('span').text(degFenmu);
	      if (degFenzi === 1) {
	        that.svgDegFenziTxt.find('span:first-child').text('');
	      }
	      that.svgDegTxt.removeClass('pcs_integer');
	      if (degFenmu === 1) {
	        that.svgDegTxt.addClass('pcs_integer');
	      }
	      var tDeg = disNum <= 3 && deg <= 45 ? 80 : deg / 1.7;
	      var tDis = disNum <= 3 && deg <= 45 ? 150 : 120;
	      tDeg = tDeg < 25 ? 80 : tDeg;
	      var tx = centralx + tDis * Math.cos(tDeg / 180 * Math.PI);
	      var ty = centraly - tDis * Math.sin(tDeg / 180 * Math.PI);
	      that.svgDegTxt.css({
	        left: tx * that.scale,
	        top: ty * that.scale
	      });
	    }

	    // 隐藏辅助线

	  }, {
	    key: '_hideAssistant',
	    value: function _hideAssistant(num) {
	      if (num !== undefined) {
	        this.degArcs[num].node.style.display = 'none';
	        this.lines[num].node.style.display = 'none';
	        if (this.svgDegTxt.hasClass(this.svgDegTxtClass[num])) {
	          this.svgDegTxt.addClass('hide_dom');
	        }
	      } else {
	        var _iteratorNormalCompletion7 = true;
	        var _didIteratorError7 = false;
	        var _iteratorError7 = undefined;

	        try {
	          for (var _iterator7 = this.degArcs[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
	            var degArc = _step7.value;

	            degArc.node.style.display = 'none';
	          }
	        } catch (err) {
	          _didIteratorError7 = true;
	          _iteratorError7 = err;
	        } finally {
	          try {
	            if (!_iteratorNormalCompletion7 && _iterator7.return) {
	              _iterator7.return();
	            }
	          } finally {
	            if (_didIteratorError7) {
	              throw _iteratorError7;
	            }
	          }
	        }

	        var _iteratorNormalCompletion8 = true;
	        var _didIteratorError8 = false;
	        var _iteratorError8 = undefined;

	        try {
	          for (var _iterator8 = this.lines[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
	            var line = _step8.value;

	            line.node.style.display = 'none';
	          }
	        } catch (err) {
	          _didIteratorError8 = true;
	          _iteratorError8 = err;
	        } finally {
	          try {
	            if (!_iteratorNormalCompletion8 && _iterator8.return) {
	              _iterator8.return();
	            }
	          } finally {
	            if (_didIteratorError8) {
	              throw _iteratorError8;
	            }
	          }
	        }

	        this.svgDegTxt.addClass('hide_dom');
	      }
	    }
	  }, {
	    key: '_randomGenerate',
	    value: function _randomGenerate() {
	      var that = this;
	      var num = void 0;
	      var maxYueShu = void 0;
	      var degFenzi = void 0;
	      var degFenmu = void 0;
	      that.currentDisArr.length = 0;
	      that.currentDegArr.length = 0;
	      that.degInputs.removeClass('pcs_integer');
	      that.randomDisArr.sort(function () {
	        return 0.5 - Math.random();
	      });
	      that.randomDegArr.sort(function () {
	        return 0.5 - Math.random();
	      });
	      // 距离赋值和记录
	      for (var i = 0; i < 4; i++) {
	        that.distanceNums.eq(i).text(that.randomDisArr[i]);
	        that.currentDisArr.push(that.randomDisArr[i]);
	      }
	      // 弧度赋值和记录
	      for (var _i8 = 0; _i8 < 4; _i8++) {
	        num = that.randomDegArr[_i8];
	        that.currentDegArr.push(num);
	        maxYueShu = _utils2.default.getGongYueShu(180, num * 15);
	        degFenzi = num * 15 / maxYueShu;
	        degFenmu = 180 / maxYueShu;
	        degFenzi = degFenzi === 1 ? '' : degFenzi;
	        if (degFenmu === 1) {
	          that.degInputs.eq(_i8).addClass('pcs_integer');
	        }
	        that.degNumerators.eq(_i8).text(degFenzi);
	        that.degDenominators.eq(_i8).text(degFenmu);
	      }
	    }

	    // 绘制背景

	  }, {
	    key: '_drawBg',
	    value: function _drawBg() {
	      var that = this;
	      var cx = dsvgWidth / 2;
	      var cy = dsvgHeight / 2;
	      // 绘制同心圆
	      for (var i = 0; i < 9; i++) {
	        that.paper.circle(cx, cy, perMeasure * (i + 1)).attr({
	          fill: 'none',
	          stroke: '#4d4d4d',
	          strokeWidth: 2
	        });
	      }
	      // 绘制虚线射线
	      var distance = 410;
	      for (var _i9 = 0; _i9 < 24; _i9++) {
	        var x = distance * Math.cos(15 * _i9 / 180 * Math.PI) + cx;
	        var y = distance * Math.sin(15 * _i9 / 180 * Math.PI) + cy;
	        that.paper.line(cx, cy, x, y).attr({
	          stroke: '#4d4d4d',
	          strokeWidth: 2,
	          'stroke-dasharray': 6 + ',' + 2
	        });
	      }
	      // 绘制刻度
	      for (var _i10 = 1; _i10 < 10; _i10++) {
	        that.paper.text(cx + perMeasure * _i10, cy + 10, _i10).attr({
	          'font': 'bold 2.5em "Times New Roman"',
	          'text-anchor': 'middle',
	          'dominant-baseline': 'hanging',
	          'fill': '#4d4d4d'
	        });
	      }
	      // 绘制极点
	      that.originCircle = that.paper.circle(cx, cy, 18.5).attr({
	        fill: '#4d4d4d'
	      });
	      // 绘制x轴
	      var destX = cx + distance;
	      var destY = cy;
	      that.xAxis = that.paper.line(cx, cy, destX, destY).attr({
	        stroke: '#4d4d4d',
	        strokeWidth: 8
	      });
	      that.originCircle.before(that.xAxis);
	      // 绘制x轴箭头
	      var arrowPath = 'M{x1} {y1}Q{cx1} {cy1} {x2} {y2}Q{cx2} {cy2} {x3} {y3}Q{cx3} {cy3} {x4} {y4}Q{cx4} {cy4} {x5} {y5}';
	      arrowPath = Snap.format(arrowPath, {
	        x1: destX,
	        y1: destY,
	        cx1: destX - 6,
	        cy1: destY + 5,
	        x2: destX - 12,
	        y2: destY + 22,
	        cx2: destX,
	        cy2: destY + 6,
	        x3: destX + 18,
	        y3: destY,
	        cx3: destX,
	        cy3: destY - 6,
	        x4: destX - 12,
	        y4: destY - 22,
	        cx4: destX - 6,
	        cy4: destY - 5,
	        x5: destX,
	        y5: destY
	      });
	      that.paper.path(arrowPath).attr({
	        fill: '#4d4d4d'
	      });
	    }
	  }]);

	  return PointToPolar;
	}();

	exports.default = PresetB;

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _anyPoint = __webpack_require__(6);

	var _anyPoint2 = _interopRequireDefault(_anyPoint);

	var _utils = __webpack_require__(4);

	var _utils2 = _interopRequireDefault(_utils);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var dsvgWidth = 1353;
	var dsvgHeight = 752;
	var dpolarAxisLen = 505;
	var gridXNum = 18;
	var gridYNum = 10;

	var PresetC = function () {
	  function PresetC($view, i18nModel) {
	    _classCallCheck(this, PresetC);

	    this.$view = $view;
	    this.i18nModel = i18nModel;
	    this._init();
	  }

	  _createClass(PresetC, [{
	    key: '_init',
	    value: function _init() {
	      this.paper = Snap('.pcs_preset_3 svg');
	      this.paper.attr('viewBox', '0 0 ' + dsvgWidth + ' ' + dsvgHeight);
	      this.$selfView = this.$view.find('div.pcs_preset_3');
	      this.svgContainer = this.$selfView.find('div.svg_container');
	      this.svgDom = this.svgContainer.find('svg')[0];
	      // this.svgWidth = this.svgContainer.width()
	      // this.svgHeight = this.svgContainer.height()
	      this.svgLeft = this.svgContainer.offset().left;
	      this.svgTop = this.svgContainer.offset().top;
	      // 自适应缩放系数
	      this.scale = Math.min(this.svgContainer.width() / dsvgWidth, this.svgContainer.height() / dsvgHeight);
	      this.perMeasure = dsvgWidth / gridXNum;
	      // 绘制背景网格
	      this._drawAxis();
	      // 底部按钮
	      this.polarRectAxisBtn = this.$selfView.find('li.pcs_operate_1');
	      this.polarPolarAxisBtn = this.$selfView.find('li.pcs_operate_2');
	      this.anyPointBtn = this.$selfView.find('li.pcs_operate_3');
	      this.isRectAxisShow = false;
	      this.isPolarAxisShow = false;
	      this.isAnyPointShow = false;
	      this.orix = dsvgWidth / 2;
	      this.oriy = dsvgHeight / 2;
	      // 底部按钮背景
	      this.operateBg = this.$selfView.find('li.pcs_operate_bg');
	      this.operateBg2 = this.$selfView.find('li.pcs_operate_bg_2');
	      this.showRectCoordBtn = this.$selfView.find('a.pcs_show_coordinate');
	      this.showPolarCoordBtn = this.$selfView.find('a.pcs_show_point');
	      this.movePoint = this.$selfView.find('div.move_point');
	      this.deleteBtn = this.$selfView.find('div.pcs_delete_btn');
	      this.arrX = [];
	      // 吸附时用的数组
	      for (var i = 0; i < 17; i++) {
	        this.arrX[i] = i - 8;
	      }
	      this.arrY = [];
	      for (var _i = 0; _i < 9; _i++) {
	        this.arrY[_i] = _i - 4;
	      }
	      this._bindDom();
	    }
	  }, {
	    key: '_bindDom',
	    value: function _bindDom() {
	      var that = this;
	      that._executeToolMove = that._toolMove.bind(this);
	      // 直角坐标系事件绑定
	      that.polarRectAxisBtn.on('click', function () {
	        that._controlFlow(0);
	      });
	      // 极坐标系事件绑定
	      that.polarPolarAxisBtn.on('click', function () {
	        that._controlFlow(1);
	      });
	      that.anyPointBtn.on('mousedown', function (e) {
	        that._start(e, 2);
	      });
	      that.svgContainer.on('mousedown', function () {
	        that.isCloseEdit = true;
	      });
	      $(document).on('mouseup', function (e) {
	        that._end();
	      });
	      that.deleteBtn.click(function (e) {
	        that._deleteAnyPoint();
	      });
	      // 显示直角坐标按钮
	      that.showRectCoordBtn.click(function () {
	        var $this = $(this);
	        if (!$this.hasClass('click_disabled')) {
	          if ($this.hasClass('ui_btn_active')) {
	            that.anyPointObject.closeRectAssist();
	            that.anyPointObject.hideRectCoords();
	            $this.removeClass('ui_btn_active');
	            $this.find('span').text(that.i18nModel.show_rect_coord);
	          } else {
	            that.anyPointObject.openRectAssist();
	            that.anyPointObject.showRectCoords();
	            that.anyPointObject.closePolarAssist();
	            that.anyPointObject.hidePolarCoords();
	            $this.addClass('ui_btn_active');
	            $this.find('span').text(that.i18nModel.hide_rect_coord);
	            that.showPolarCoordBtn.removeClass('ui_btn_active');
	            that.showPolarCoordBtn.find('span').text(that.i18nModel.show_polar_coord);
	          }
	        }
	      });
	      // 实现极坐标按钮
	      that.showPolarCoordBtn.click(function () {
	        var $this = $(this);
	        if (!$this.hasClass('click_disabled')) {
	          if ($this.hasClass('ui_btn_active')) {
	            that.anyPointObject.closePolarAssist();
	            that.anyPointObject.hidePolarCoords();
	            $this.removeClass('ui_btn_active');
	            $this.find('span').text(that.i18nModel.show_polar_coord);
	          } else {
	            that.anyPointObject.openPolarAssist();
	            that.anyPointObject.showPolarCoords();
	            that.anyPointObject.closeRectAssist();
	            that.anyPointObject.hideRectCoords();
	            that.snap();
	            $this.addClass('ui_btn_active');
	            $this.find('span').text(that.i18nModel.hide_polar_coord);
	            that.showRectCoordBtn.removeClass('ui_btn_active');
	            that.showRectCoordBtn.find('span').text(that.i18nModel.show_rect_coord);
	          }
	        }
	      });
	    }
	  }, {
	    key: '_start',
	    value: function _start(e, num) {
	      var that = this;
	      if (!that.anyPointBtn.hasClass('on') || that.isAnyPointShow) return;
	      that.hasMove = false;
	      that.isToolMouseDown = true;
	      var point = _utils2.default.reportMouseCoordinates(that.svgDom, e.pageX, e.pageY, that.svgDom);
	      that.startX = point.x;
	      that.startY = point.y;
	      that.wrapperLeft = that.$selfView.offset().left;
	      that.wrapperTop = that.$selfView.offset().top;
	      that._controlFlow(num);
	      $(document).on('mousemove', that._executeToolMove);
	    }
	  }, {
	    key: '_toolMove',
	    value: function _toolMove(e) {
	      var that = this;
	      if (that.isToolMouseDown) {
	        var point2 = _utils2.default.reportMouseCoordinates(that.svgDom, e.pageX, e.pageY, that.svgDom);
	        var startX2 = point2.x;
	        var startY2 = point2.y;
	        // 拖动任意点进入显示区
	        if (Math.abs(startX2 - that.startX) > 3 || Math.abs(startY2 - that.startY) > 3) {
	          that.hasMove = true;
	          if (that.anyPointObject) return;
	          that.movePoint.removeClass('hide_dom');
	          that.left = point2.x;
	          that.top = point2.y;
	          that.movePoint.css({
	            left: e.pageX - that.wrapperLeft - that.movePoint.innerWidth() / 2,
	            top: e.pageY - that.wrapperTop - that.movePoint.innerHeight() / 2
	          });
	        }
	      }
	    }
	  }, {
	    key: '_end',
	    value: function _end() {
	      var that = this;
	      if (that.isCloseEdit) {
	        that.deleteBtn.addClass('hide_dom');
	      }
	      that.isCloseEdit = false;
	      if (!that.isToolMouseDown) return;
	      that.isToolMouseDown = false;
	      // 拖动时边界判断
	      if (that.hasMove && (that.left < 17 || that.left > dsvgWidth - 17 || that.top < 17 || that.top > dsvgHeight - 17)) {
	        that.movePoint.addClass('hide_dom');
	        that._deleteAnyPoint();
	        return;
	      }
	      if (that.anyPointObject) return;
	      if (that.hasMove) {
	        that.anyPointObject = new _anyPoint2.default({
	          paper: that.paper,
	          x: that.left,
	          y: that.top,
	          orix: that.orix,
	          oriy: that.oriy,
	          scale: that.scale,
	          view: that.$selfView,
	          perMeasure: that.perMeasure,
	          restrict: 40,
	          dsvgWidth: dsvgWidth,
	          dsvgHeight: dsvgHeight
	        });
	        that.axisGroup1.after(that.anyPointObject.lineToOrigin);
	        that.axisGroup1.after(that.anyPointObject.degArc);
	        that.axisGroup1.before(that.anyPointObject.rectDashLine1);
	        that.axisGroup1.before(that.anyPointObject.rectDashLine2);
	        that.movePoint.addClass('hide_dom');
	      } else {
	        that._click();
	      }
	      that.anyPointObject.addControl(that);
	      that.snap();
	      that.hasMove = false;
	      $(document).off('mousemove', that._executeToolMove);
	    }
	  }, {
	    key: '_click',
	    value: function _click() {
	      var that = this;
	      if (that.anyPointObject) return;
	      var x = that.perMeasure * 13;
	      var y = that.perMeasure * 1;
	      that.anyPointObject = new _anyPoint2.default({
	        paper: that.paper,
	        x: x,
	        y: y,
	        orix: that.orix,
	        oriy: that.oriy,
	        scale: that.scale,
	        view: that.$selfView,
	        perMeasure: that.perMeasure,
	        restrict: 40,
	        dsvgWidth: dsvgWidth,
	        dsvgHeight: dsvgHeight
	      });
	      that.axisGroup1.before(that.anyPointObject.rectDashLine1);
	      that.axisGroup1.before(that.anyPointObject.rectDashLine2);
	      that.axisGroup1.after(that.anyPointObject.lineToOrigin);
	      that.axisGroup1.after(that.anyPointObject.degArc);
	    }

	    // 网格吸附

	  }, {
	    key: 'snap',
	    value: function snap() {
	      var that = this;
	      var needXTransform = false;
	      var needYTransform = false;
	      var x = parseFloat(that.anyPointObject.anyPoint.attr('cx'));
	      var y = parseFloat(that.anyPointObject.anyPoint.attr('cy'));
	      var coordX = (x - dsvgWidth / 2) / that.perMeasure;
	      var coordY = -(y - dsvgHeight / 2) / that.perMeasure;
	      var newCoordX = Snap.snapTo(that.arrX, coordX, 0.18);
	      var newCoordY = Snap.snapTo(that.arrY, coordY, 0.18);
	      for (var i = 0; i < 17; i++) {
	        if (Math.abs(newCoordX - that.arrX[i]) < 0.001) {
	          needXTransform = true;
	          break;
	        }
	      }
	      for (var j = 0; j < 9; j++) {
	        if (Math.abs(newCoordY - that.arrY[j]) < 0.001) {
	          needYTransform = true;
	          break;
	        }
	      }
	      if (needYTransform && needXTransform) {
	        var sqrtDisTxt = that._transformToSqrt(newCoordX, newCoordY);
	        that.anyPointObject.changePos(newCoordX * that.perMeasure + dsvgWidth / 2, -newCoordY * that.perMeasure + dsvgHeight / 2, sqrtDisTxt);
	      }
	    }
	  }, {
	    key: 'resizeScreenHandler',
	    value: function resizeScreenHandler() {
	      this.scale = Math.min(this.svgContainer.width() / dsvgWidth, this.svgContainer.height() / dsvgHeight);
	      this.anyPointObject && this.anyPointObject.resizeScreenHandler(this.scale);
	      this._operateBgControl();
	    }

	    // 转换根号形式距离

	  }, {
	    key: '_transformToSqrt',
	    value: function _transformToSqrt(x, y) {
	      if (x === 0 && y === 0) {
	        return 0;
	      }
	      var powSum = Math.pow(x, 2) + Math.pow(y, 2);
	      var a = 1;
	      var sqrtDisTxt = void 0;
	      for (var i = 9; i > 1; i--) {
	        if (powSum % Math.pow(i, 2) === 0) {
	          a *= i;
	          powSum = powSum / Math.pow(i, 2);
	        }
	      }
	      if (a === 1 && powSum !== 1) {
	        sqrtDisTxt = '√' + powSum;
	      } else if (powSum === 1) {
	        sqrtDisTxt = a;
	      } else {
	        sqrtDisTxt = a + '√' + powSum;
	      }
	      return sqrtDisTxt;
	    }

	    // 直角坐标系按钮、 极坐标系按钮、 任意点逻辑控制

	  }, {
	    key: '_controlFlow',
	    value: function _controlFlow(num) {
	      switch (num) {
	        case 0:
	          this._flowOne();
	          break;
	        case 1:
	          this._flowTwo();
	          break;
	        case 2:
	          this._flowThree();
	          break;
	      }
	    }
	  }, {
	    key: '_flowOne',
	    value: function _flowOne() {
	      if (this.isRectAxisShow) {
	        this.isRectAxisShow = false;
	        this.axisGroup1.node.style.display = 'none';
	        if (!this.isPolarAxisShow) {
	          this._deleteAnyPoint();
	        }
	        if (this.anyPointObject) {
	          this.anyPointObject.closeRectAssist();
	          this.anyPointObject.hideRectCoords();
	        }
	        this.showRectCoordBtn.addClass('click_disabled').removeClass('ui_btn_active');
	        this.showRectCoordBtn.find('span').text(this.i18nModel.show_rect_coord);
	      } else {
	        this.isRectAxisShow = true;
	        this.anyPointBtn.addClass('on');
	        this.axisGroup1.node.style.display = 'block';
	        if (this.isAnyPointShow) {
	          this.showRectCoordBtn.removeClass('click_disabled').removeClass('ui_btn_active');
	        }
	      }
	      this._operateBgControl();
	    }
	  }, {
	    key: '_flowTwo',
	    value: function _flowTwo() {
	      if (this.isPolarAxisShow) {
	        this.isPolarAxisShow = false;
	        this.axisGroup2.node.style.display = 'none';
	        if (!this.isRectAxisShow) {
	          this._deleteAnyPoint();
	        }
	        if (this.anyPointObject) {
	          this.anyPointObject.closePolarAssist();
	          this.anyPointObject.hidePolarCoords();
	        }
	        this.showPolarCoordBtn.addClass('click_disabled').removeClass('ui_btn_active');
	        this.showPolarCoordBtn.find('span').text(this.i18nModel.show_polar_coord);
	      } else {
	        this.isPolarAxisShow = true;
	        this.anyPointBtn.addClass('on');
	        this.axisGroup2.node.style.display = 'block';
	        if (this.isAnyPointShow) {
	          this.showPolarCoordBtn.removeClass('click_disabled').removeClass('ui_btn_active');
	        }
	      }
	      this._operateBgControl();
	    }
	  }, {
	    key: '_flowThree',
	    value: function _flowThree() {
	      if (!this.isRectAxisShow && !this.isPolarAxisShow) return;
	      this.isAnyPointShow = true;
	      this.anyPointBtn.addClass('on');
	      if (this.isPolarAxisShow) {
	        this.showPolarCoordBtn.removeClass('click_disabled').removeClass('ui_btn_active');
	      }
	      if (this.isRectAxisShow) {
	        this.showRectCoordBtn.removeClass('click_disabled').removeClass('ui_btn_active');
	      }
	      this._operateBgControl();
	    }

	    // 直角坐标系按钮、 极坐标系按钮、 任意点背景逻辑控制

	  }, {
	    key: '_operateBgControl',
	    value: function _operateBgControl() {
	      var len1 = this.polarRectAxisBtn.innerWidth();
	      var len2 = this.polarPolarAxisBtn.innerWidth();
	      var len3 = this.anyPointBtn.innerWidth();
	      this.operateBg.addClass('hide_dom');
	      this.operateBg2.addClass('hide_dom');
	      if (this.isRectAxisShow && this.isPolarAxisShow && this.isAnyPointShow) {
	        this.operateBg.removeClass('hide_dom').css('left', 0).width(len1 + len2 + len3);
	      } else if (this.isRectAxisShow && this.isPolarAxisShow && !this.isAnyPointShow) {
	        this.operateBg.removeClass('hide_dom').css('left', 0).width(len1 + len2);
	      } else if (this.isRectAxisShow && !this.isPolarAxisShow && this.isAnyPointShow) {
	        this.operateBg.removeClass('hide_dom').css('left', 0).width(len1);
	        this.operateBg2.removeClass('hide_dom').css('left', len1 + len2).width(len3);
	      } else if (!this.isRectAxisShow && this.isPolarAxisShow && this.isAnyPointShow) {
	        this.operateBg.removeClass('hide_dom').css('left', len1).width(len2 + len3);
	      } else if (this.isRectAxisShow && !this.isPolarAxisShow && !this.isAnyPointShow) {
	        this.operateBg.removeClass('hide_dom').css('left', 0).width(len1);
	      } else if (!this.isRectAxisShow && this.isPolarAxisShow && !this.isAnyPointShow) {
	        this.operateBg.removeClass('hide_dom').css('left', len1).width(len2);
	      }
	    }
	  }, {
	    key: '_deleteAnyPoint',
	    value: function _deleteAnyPoint() {
	      if (this.anyPointObject) {
	        this.anyPointObject.closeRectAssist();
	        this.anyPointObject.hideRectCoords();
	        this.anyPointObject.closePolarAssist();
	        this.anyPointObject.hidePolarCoords();
	        this.anyPointObject.remove();
	        this.anyPointObject = null;
	      }
	      this.isAnyPointShow = false;
	      if (!this.isPolarAxisShow && !this.isRectAxisShow) {
	        this.anyPointBtn.removeClass('on');
	      }
	      this.showRectCoordBtn.addClass('click_disabled').removeClass('ui_btn_active');
	      this.showPolarCoordBtn.addClass('click_disabled').removeClass('ui_btn_active');
	      this.showRectCoordBtn.find('span').text(this.i18nModel.show_rect_coord);
	      this.showPolarCoordBtn.find('span').text(this.i18nModel.show_polar_coord);
	      this.deleteBtn.addClass('hide_dom');
	      this._operateBgControl();
	    }
	  }, {
	    key: '_drawAxis',
	    value: function _drawAxis() {
	      var maxX = dsvgWidth;
	      var maxY = dsvgHeight;
	      var perMeasure = this.perMeasure;
	      for (var i = 0; i <= gridXNum; i++) {
	        this.paper.line(perMeasure * i, 0, perMeasure * i, maxY).attr({
	          stroke: '#a7b4bb'
	        });
	      }
	      for (var _i2 = 0; _i2 <= gridYNum; _i2++) {
	        this.paper.line(0, perMeasure * _i2, maxX, perMeasure * _i2).attr({
	          stroke: '#a7b4bb'
	        });
	      }
	      this.axisGroup1 = this.paper.g();
	      this.axisGroup2 = this.paper.g();
	      // 刻度
	      for (var _i3 = 0; _i3 < gridXNum; _i3++) {
	        if (_i3 !== 0 && _i3 !== gridXNum / 2) {
	          this.axisGroup1.line(perMeasure * _i3, maxY / 2, perMeasure * _i3, maxY / 2 + 20).attr({
	            stroke: '#8796a2',
	            strokeWidth: 8
	          });
	        }
	      }
	      for (var _i4 = 0; _i4 < gridYNum; _i4++) {
	        if (_i4 !== 0 && _i4 !== gridYNum / 2) {
	          this.axisGroup1.line(maxX / 2, perMeasure * _i4, maxX / 2 + 20, perMeasure * _i4).attr({
	            stroke: '#8796a2',
	            strokeWidth: 8
	          });
	        }
	      }
	      // 文字
	      for (var _i5 = 1; _i5 < gridXNum; _i5 += 2) {
	        if (_i5 !== gridXNum / 2) {
	          var x = perMeasure * _i5;
	          var y = maxY / 2 + 55;
	          x = _i5 < gridXNum / 2 ? x - 10 : x;
	          this.axisGroup1.text(x, y, _i5 - 9).attr({
	            'text-anchor': 'middle',
	            'dominant-baseline': 'central',
	            fill: '#8796a2',
	            font: 'bold 60px "Times New Roman"'
	          });
	        }
	      }
	      for (var _i6 = 1; _i6 < gridYNum; _i6 += 2) {
	        if (_i6 !== gridYNum / 2) {
	          var _x = maxX / 2 - 40;
	          var _y = perMeasure * _i6;
	          this.axisGroup1.text(_x, _y, 5 - _i6).attr({
	            'text-anchor': 'middle',
	            'dominant-baseline': 'central',
	            fill: '#8796a2',
	            font: 'bold 60px "Times New Roman"'
	          });
	        }
	      }
	      this.axisGroup1.line(0, maxY / 2, maxX - 18, maxY / 2).attr({
	        stroke: '#8796a2',
	        strokeWidth: 8
	      });
	      var destX = maxX - 18;
	      var destY = maxY / 2;
	      var arrowPath = 'M{x1} {y1}Q{cx1} {cy1} {x2} {y2}Q{cx2} {cy2} {x3} {y3}Q{cx3} {cy3} {x4} {y4}Q{cx4} {cy4} {x5} {y5}';
	      arrowPath = Snap.format(arrowPath, {
	        x1: destX,
	        y1: destY,
	        cx1: destX - 6,
	        cy1: destY + 5,
	        x2: destX - 12,
	        y2: destY + 22,
	        cx2: destX,
	        cy2: destY + 6,
	        x3: destX + 18,
	        y3: destY,
	        cx3: destX,
	        cy3: destY - 6,
	        x4: destX - 12,
	        y4: destY - 22,
	        cx4: destX - 6,
	        cy4: destY - 5,
	        x5: destX,
	        y5: destY
	      });
	      this.axisGroup1.path(arrowPath).attr({
	        fill: '#8796a2'
	      });
	      this.yAxis = this.axisGroup1.line(maxX / 2, 18, maxX / 2, maxY).attr({
	        stroke: '#8796a2',
	        strokeWidth: 8
	      });
	      destX = maxX / 2;
	      destY = 18;
	      arrowPath = 'M{x1} {y1}Q{cx1} {cy1} {x2} {y2}Q{cx2} {cy2} {x3} {y3}Q{cx3} {cy3} {x4} {y4}Q{cx4} {cy4} {x5} {y5}';
	      arrowPath = Snap.format(arrowPath, {
	        x1: destX,
	        y1: destY,
	        cx1: destX - 6,
	        cy1: destY + 5,
	        x2: destX - 12,
	        y2: destY + 22,
	        cx2: destX,
	        cy2: destY + 6,
	        x3: destX + 18,
	        y3: destY,
	        cx3: destX,
	        cy3: destY - 6,
	        x4: destX - 12,
	        y4: destY - 22,
	        cx4: destX - 6,
	        cy4: destY - 5,
	        x5: destX,
	        y5: destY
	      });
	      this.axisGroup1.path(arrowPath).attr({
	        fill: '#8796a2',
	        transform: 'rotate(-90,' + destX + ',' + destY + ')'
	      });
	      this.axisGroup1.text(maxX - 20, maxY / 2 + 30, 'x').attr({
	        'text-anchor': 'middle',
	        'dominant-baseline': 'central',
	        fill: '#8796a2',
	        font: 'bold 60px "Times New Roman"'
	      });
	      this.axisGroup1.text(maxX / 2 - 50, -8, 'y').attr({
	        'text-anchor': 'middle',
	        'dominant-baseline': 'hanging',
	        fill: '#8796a2',
	        font: 'bold 60px "Times New Roman"'
	      });

	      // 极坐标系
	      destX = maxX / 2 + dpolarAxisLen;
	      destY = maxY / 2;
	      this.axisGroup2.line(maxX / 2, maxY / 2, destX, destY).attr({
	        stroke: '#4d4d4d',
	        strokeWidth: 10
	      });
	      arrowPath = 'M{x1} {y1}Q{cx1} {cy1} {x2} {y2}Q{cx2} {cy2} {x3} {y3}Q{cx3} {cy3} {x4} {y4}Q{cx4} {cy4} {x5} {y5}';
	      arrowPath = Snap.format(arrowPath, {
	        x1: destX,
	        y1: destY,
	        cx1: destX - 6,
	        cy1: destY + 5,
	        x2: destX - 12,
	        y2: destY + 22,
	        cx2: destX,
	        cy2: destY + 6,
	        x3: destX + 18,
	        y3: destY,
	        cx3: destX,
	        cy3: destY - 6,
	        x4: destX - 12,
	        y4: destY - 22,
	        cx4: destX - 6,
	        cy4: destY - 5,
	        x5: destX,
	        y5: destY
	      });
	      this.axisGroup2.path(arrowPath).attr({
	        fill: '#333333'
	      });
	      this.axisGroup2.circle(maxX / 2, maxY / 2, 15.5).attr({
	        fill: '#ffffff',
	        stroke: '#cb2627',
	        strokeWidth: 5
	      });
	      for (var _i7 = 1; _i7 < (dpolarAxisLen - 20) / perMeasure; _i7++) {
	        var _x2 = maxX / 2 + _i7 * perMeasure;
	        var _y2 = maxY / 2;
	        this.axisGroup2.line(_x2, _y2, _x2, _y2 - 20).attr({
	          stroke: '#333333',
	          strokeWidth: 8
	        });
	      }

	      this.axisGroup1.node.style.display = 'none';
	      this.axisGroup2.node.style.display = 'none';
	    }
	  }]);

	  return PresetC;
	}();

	exports.default = PresetC;

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _polarPoint = __webpack_require__(3);

	var _polarPoint2 = _interopRequireDefault(_polarPoint);

	var _polarAxis = __webpack_require__(5);

	var _polarAxis2 = _interopRequireDefault(_polarAxis);

	var _anyPoint = __webpack_require__(6);

	var _anyPoint2 = _interopRequireDefault(_anyPoint);

	var _utils = __webpack_require__(4);

	var _utils2 = _interopRequireDefault(_utils);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var dsvgWidth = 1300;
	var dsvgHeight = 876;
	var dpolarPointX = 440;
	var dpolarPointY = 435;
	var dshapePointX = 680;
	var dshapePointY = 435;
	var dpolarAxisLen = 590;
	var dsquareLen = 600;
	var dtriangleW = 600;
	var dtriangleH = 300;
	var dcircleR = 350;
	var rAF = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {
	  window.setTimeout(callback, 1000 / 60);
	};

	var PresetD = function () {
	  function PresetD($view, i18nModel) {
	    _classCallCheck(this, PresetD);

	    this.$view = $view;
	    this.i18nModel = i18nModel;
	    this._init();
	  }

	  _createClass(PresetD, [{
	    key: '_init',
	    value: function _init() {
	      this.paper = Snap('.pcs_preset_4 svg');
	      this.paper.attr('viewBox', '0 0 ' + dsvgWidth + ' ' + dsvgHeight);
	      this.$selfView = this.$view.find('.pcs_preset_4');
	      this.svgContainer = this.$selfView.find('div.svg_container');
	      this.svgDom = this.svgContainer.find('svg')[0];
	      // this.svgWidth = this.svgContainer.width()
	      // this.svgHeight = this.svgContainer.height()
	      // 自适应缩放系数
	      this.scale = Math.min(this.svgContainer.width() / dsvgWidth, this.svgContainer.height() / dsvgHeight);
	      // 操作顺序数字
	      this.operateNum = -1;
	      // 底部操作按钮及背景
	      this.polarPointBtn = this.$selfView.find('li.pcs_operate_1');
	      this.polarAxisBtn = this.$selfView.find('li.pcs_operate_2');
	      this.anyPointBtn = this.$selfView.find('li.pcs_operate_3');
	      this.showCoordBtn = this.$selfView.find('a.pcs_show_coordinate');
	      this.operateBg = this.$selfView.find('li.pcs_operate_bg');
	      // 选取图形操作按钮
	      this.squareBtn = this.$selfView.find('li.pcs_square');
	      this.triangleBtn = this.$selfView.find('li.pcs_triangle');
	      this.circleBtn = this.$selfView.find('li.pcs_circle');
	      // 拖动选取时的元素
	      this.movePolarPoint = this.$selfView.find('div.move_polar_point');
	      this.movePolarAxis = this.$selfView.find('div.move_polar_axis');
	      this.movePoint = this.$selfView.find('div.move_point');
	      this.moveSquare = this.$selfView.find('div.move_square');
	      this.moveTriangle = this.$selfView.find('div.move_triangle');
	      this.moveCircle = this.$selfView.find('div.move_circle');
	      // 删除按钮
	      this.deleteBtn = this.$selfView.find('div.pcs_delete_btn');
	      this.deleteBtnW = this.deleteBtn.width() / this.scale;
	      this.deleteBtnH = this.deleteBtn.height() / this.scale;
	      // 键盘相关元素
	      this.keyboardBox = this.$selfView.find('div.pcs_keyboard_box');
	      this.keyboardBoxW = this.keyboardBox.width() / this.scale;
	      this.keyboardBoxH = this.keyboardBox.height() / this.scale;
	      this.keyboardList = this.$selfView.find('div.pcs_keyboard_list');
	      // 键盘数字
	      this.keyboardNum = this.keyboardList.find('a.bd_num');
	      // 键盘下拉按钮
	      this.keyboardDrop = this.keyboardBox.find('._js_keyboard_drop');
	      // 键盘输出数字
	      this.keyboardInputNum = this.$selfView.find('span.keyboard_input_num');
	      // 极点默认点位置
	      this.orix = dpolarPointX;
	      this.oriy = dpolarPointY;
	      this.isShapeShow = false;
	      this.shapeAttr = {
	        strokeWidth: 6,
	        fill: '#c7dff2',
	        stroke: '#7a8c99',
	        cursor: 'pointer'
	      };
	      var lenAttr = {
	        fill: '#4d4d4d',
	        font: '85px "Times New Roman"',
	        'text-anchor': 'middle',
	        'dominant-baseline': 'hanging'
	        // 各个图形长度文字
	      };this.squareLen = this.paper.text(0, 0, '').attr(lenAttr);
	      this.triangleLen = this.paper.text(0, 0, '').attr(lenAttr);
	      this.circleLen = this.paper.text(0, 0, '').attr(lenAttr);
	      this.circleDashLine = this.paper.line().attr({
	        stroke: '#7a8c99',
	        strokeWidth: 6,
	        'stroke-dasharray': 12 + ',' + 12
	      });
	      this._bindDom();
	    }
	  }, {
	    key: '_bindDom',
	    value: function _bindDom() {
	      var that = this;
	      // hasMove 判断底部工具栏是拖动还是点击
	      that.hasMove = false;
	      that.isToolMouseDown = false;
	      that._executeMove = that._move.bind(that);
	      // 极点、极轴、任意点事件绑定
	      that.polarPointBtn.on('mousedown touchstart', function (e) {
	        that._start(e, 0);
	      });
	      that.polarAxisBtn.on('mousedown touchstart', function (e) {
	        that._start(e, 1);
	      });
	      that.anyPointBtn.on('mousedown touchstart', function (e) {
	        that._start(e, 2);
	      });

	      // 图形选取按钮事件绑定
	      that.squareBtn.on('mousedown touchstart ', function (e) {
	        that._start(e, 3, true);
	      });
	      that.triangleBtn.on('mousedown touchstart', function (e) {
	        that._start(e, 4, true);
	      });
	      that.circleBtn.on('mousedown touchstart', function (e) {
	        that._start(e, 5, true);
	      });

	      // 图形移动
	      that.$view.find('.polarcoordinate_wrapper').on('mousedown touchstart', function (e) {
	        e = e.originalEvent.touches ? e.originalEvent.touches[0] : e;
	        // 点击其他位置关闭编辑工具
	        that.isCloseEdit = true;
	        that._svgShapeDown(e);
	      });

	      $(document).on('mouseup touchend', function (e) {
	        // 白板端触发touchend就不触发mouseup
	        if (e.type == 'mouseup' && that.isTouched) return;
	        // 点击极轴隐藏键盘
	        if (that.polarAxisObject) {
	          if (e.target.parentNode.parentNode === that.polarAxisObject.polarAxis.node) {
	            that.keyboardBox.addClass('hide_dom');
	            that.keyboardList.addClass('hide_dom');
	            that.keyboardInputNum.text(that.initNum);
	            that.keyboardDrop.removeClass('ui_btn_active');
	          }
	        }
	        that._svgShapeEnd(e);
	        that._end();
	        $(document).off('mousemove touchmove', that._executeMove);
	      });

	      // 删除按钮事件绑定
	      that.deleteBtn.on('mouseup touchend', function () {
	        that._delete();
	      });

	      // 显示坐标按钮绑定
	      that.showCoordBtn.click(function () {
	        var $this = $(this);
	        if (!$this.hasClass('click_disabled')) {
	          if ($this.hasClass('ui_btn_active')) {
	            that.anyPointObject.hidePolarCoords();
	            $this.removeClass('ui_btn_active');
	            $this.find('span').text(that.i18nModel.show_polar_coord);
	          } else {
	            that.anyPointObject.showPolarCoords();
	            if (that.squareObject) {
	              that.snap();
	            }
	            $this.addClass('ui_btn_active');
	            $this.find('span').text(that.i18nModel.hide_polar_coord);
	          }
	        }
	      });

	      that.keyboardBox.on('mousedown touchstart mouseup touchend mousemove touchmove', function (e) {
	        e.stopPropagation();
	      });

	      // 键盘下拉按钮事件绑定
	      that.keyboardDrop.on('click', function (e) {
	        var $this = $(this);
	        if ($this.hasClass('ui_btn_active')) {
	          $this.removeClass('ui_btn_active');
	          that.keyboardList.addClass('hide_dom');
	        } else {
	          $this.addClass('ui_btn_active');
	          that.keyboardList.css({
	            right: 0,
	            left: 'auto'
	          });
	          if (that.moveShapeNum === 4) {
	            var x = parseFloat(that.triangleObject.data('x'));
	            if (x < 180) {
	              that.keyboardList.css({
	                right: 'auto',
	                left: 0
	              });
	            }
	          }
	          that.keyboardList.removeClass('hide_dom');
	          that.isFirstClick = true;
	          that.initNum = parseInt(that.keyboardInputNum.text());
	        }
	      });

	      // 键盘事件绑定
	      that.keyboardList.on('mouseup touchend', function (e) {
	        e.stopPropagation();
	      });
	      that.keyboardList.on('click', function (e) {
	        that._keyboardClick(e);
	      });
	    }
	  }, {
	    key: '_start',
	    value: function _start(e, num, isShapeBtn) {
	      // 切换图形时去掉任意点
	      if (isShapeBtn) {
	        this.isShapeDown = false;
	        if (e.type === 'touchstart') this.isTouched = true;
	        if (this.anyPointObject && !$(this).hasClass('on')) {
	          this.anyPointObject.remove();
	          this.polarAxisObject.addPoint(null);
	          this.anyPointObject = null;
	          this._controlFlow(1, true);
	        }
	      }
	      this.hasMove = false;
	      this.isMoveShape = false;
	      this.isToolMouseDown = true;
	      e = e.originalEvent.touches ? e.originalEvent.touches[0] : e;
	      var point = _utils2.default.reportMouseCoordinates(this.svgDom, e.pageX, e.pageY, this.svgDom);
	      this.startX = point.x;
	      this.startY = point.y;
	      this.wrapperLeft = this.$selfView.offset().left;
	      this.wrapperTop = this.$selfView.offset().top;
	      if (num < 3) {
	        // 有图形时才能操作任意点
	        if (num === 2 && !this.isShapeShow) return;
	        this._controlFlow(num);
	      } else {
	        this.isMoveShape = true;
	        if (!this.isAnimating) {
	          this.previousMoveShapeNum = this.moveShapeNum;
	          this.moveShapeNum = num;
	        }
	      }
	      $(document).on('mousemove touchmove', this._executeMove);
	    }
	  }, {
	    key: '_svgShapeDown',
	    value: function _svgShapeDown(e) {
	      var isClickSquare = this.squareObject && e.target == this.squareObject.node;
	      var isClickTri = this.triangleObject && e.target == this.triangleObject.node;
	      var isClickCircle = this.circleObject && e.target == this.circleObject.node;
	      if (isClickSquare || isClickTri || isClickCircle) {
	        this.hasShapeMove = false;
	        this.isShapeDown = true;
	        this.isCloseEdit = false;
	        var point = _utils2.default.reportMouseCoordinates(this.svgDom, e.pageX, e.pageY, this.svgDom);
	        this.startX = point.x;
	        this.startY = point.y;
	      }
	      if (isClickSquare) {
	        this.initX = parseInt(this.squareObject.attr('x'));
	        this.initY = parseInt(this.squareObject.attr('y'));
	      } else if (isClickTri) {
	        this.initX = this.triangleObject.data('x');
	        this.initY = this.triangleObject.data('y');
	      } else if (isClickCircle) {
	        this.initX = parseInt(this.circleObject.attr('cx'));
	        this.initY = parseInt(this.circleObject.attr('cy'));
	      }
	      $(document).on('mousemove touchmove', this._executeMove);
	    }
	  }, {
	    key: '_move',
	    value: function _move(e) {
	      e = e.originalEvent.touches ? e.originalEvent.touches[0] : e;
	      if (this.isToolMouseDown) {
	        this._toolMove(e);
	      }
	      if (this.isShapeDown) {
	        this._svgShapeMove(e);
	      }
	    }
	  }, {
	    key: '_toolMove',
	    value: function _toolMove(e) {
	      var point2 = _utils2.default.reportMouseCoordinates(this.svgDom, e.pageX, e.pageY, this.svgDom);
	      var startX2 = point2.x;
	      var startY2 = point2.y;
	      var operateObject = void 0;
	      if (Math.abs(startX2 - this.startX) > 3 || Math.abs(startY2 - this.startY) > 3) {
	        this.hasMove = true;
	        // 判断移动是底部的按钮还是选取图形按钮
	        if (!this.isMoveShape) {
	          switch (this.operateNum) {
	            case 0:
	              if (this.polarPointObject) {
	                this.isObjExist = true;
	                return;
	              }
	              operateObject = this.movePolarPoint;
	              break;
	            case 1:
	              if (this.polarAxisObject) {
	                this.isObjExist = true;
	                return;
	              }
	              operateObject = this.movePolarAxis;
	              break;
	            case 2:
	              if (this.anyPointObject) {
	                this.isObjExist = true;
	                return;
	              }
	              operateObject = this.movePoint;
	              break;
	          }
	        } else {
	          switch (this.moveShapeNum) {
	            case 3:
	              if (this.squareObject) return;
	              operateObject = this.moveSquare;
	              break;
	            case 4:
	              if (this.triangleObject) return;
	              operateObject = this.moveTriangle;
	              break;
	            case 5:
	              if (this.circleObject) return;
	              operateObject = this.moveCircle;
	              break;
	          }
	        }
	        operateObject.removeClass('hide_dom');
	        this.left = startX2;
	        this.top = startY2;
	        operateObject.css({
	          left: e.pageX - this.wrapperLeft - operateObject.innerWidth() / 2,
	          top: e.pageY - this.wrapperTop - operateObject.innerHeight() / 2
	        });
	      }
	    }
	  }, {
	    key: '_svgShapeMove',
	    value: function _svgShapeMove(e) {
	      var point2 = _utils2.default.reportMouseCoordinates(this.svgDom, e.pageX, e.pageY, this.svgDom);
	      var startX2 = point2.x;
	      var startY2 = point2.y;
	      if (Math.abs(startX2 - this.startX) > 3 || Math.abs(startY2 - this.startY) > 3) {
	        this._closeEdit();
	        this.hasShapeMove = true;
	        var newX = this.initX + startX2 - this.startX;
	        var newY = this.initY + startY2 - this.startY;
	        if (this.squareObject) {
	          var restrict = dsquareLen / 2;
	          newX += dsquareLen / 2;
	          newY += dsquareLen / 2;
	          if (newX > dsvgWidth - restrict * 1.6) {
	            newX = dsvgWidth - restrict * 1.6;
	          } else if (newX < restrict * 1.45) {
	            newX = restrict * 1.45;
	          }
	          if (newY < restrict * 1.2) {
	            newY = restrict * 1.2;
	          } else if (newY > dsvgHeight - restrict * 1.45) {
	            newY = dsvgHeight - restrict * 1.45;
	          }
	          newX -= dsquareLen / 2;
	          newY -= dsquareLen / 2;
	          this.changeSquarePos(newX, newY);
	        }
	        if (this.triangleObject) {
	          var leftRestrict = dtriangleW / 2 * 1.15;
	          var rightRestrict = dsvgWidth - dtriangleW / 2 * 1.5;
	          var topRestrict = dtriangleH * 0.6 * 1.3;
	          var bottomRestrict = dsvgHeight - dtriangleH * 0.4 * 2.2;
	          newX = newX + dtriangleW * 0.5;
	          newY = newY - dtriangleH * 0.4;
	          if (newX > rightRestrict) {
	            newX = rightRestrict;
	          } else if (newX < leftRestrict) {
	            newX = leftRestrict;
	          }
	          if (newY < topRestrict) {
	            newY = topRestrict;
	          } else if (newY > bottomRestrict) {
	            newY = bottomRestrict;
	          }
	          newX = newX - dtriangleW * 0.5;
	          newY = newY + dtriangleH * 0.4;
	          this.changeTrianglePos(newX, newY);
	        }
	        if (this.circleObject) {
	          var _leftRestrict = dcircleR * 1.1;
	          var _rightRestrict = dsvgWidth - dcircleR * 1.3;
	          var _topRestrict = dcircleR * 1.18;
	          var _bottomRestrict = dsvgHeight - dcircleR * 1.08;
	          if (newX > _rightRestrict) {
	            newX = _rightRestrict;
	          } else if (newX < _leftRestrict) {
	            newX = _leftRestrict;
	          }
	          if (newY < _topRestrict) {
	            newY = _topRestrict;
	          } else if (newY > _bottomRestrict) {
	            newY = _bottomRestrict;
	          }
	          this.changeCirclePos(newX, newY);
	        }
	      }
	    }
	  }, {
	    key: '_end',
	    value: function _end() {
	      var that = this;
	      // 点击其他位置关闭相关的编辑态
	      if (that.isCloseEdit) {
	        that._closeEdit();
	      }
	      that.isCloseEdit = false;
	      if (!that.isToolMouseDown) return;
	      that.isToolMouseDown = false;
	      // 拖动时边界判断
	      if (that.hasMove && !that.isObjExist && (that.left < 0 || that.left > dsvgWidth || that.top < 0 || that.top > dsvgHeight)) {
	        that.movePolarPoint.addClass('hide_dom');
	        that.movePolarAxis.addClass('hide_dom');
	        that.movePoint.addClass('hide_dom');
	        that.moveSquare.addClass('hide_dom');
	        that.moveTriangle.addClass('hide_dom');
	        that.moveCircle.addClass('hide_dom');
	        if (!that.isMoveShape) {
	          that.operateNum--;
	          that._controlFlow(that.operateNum, true);
	        } else {
	          that.moveShapeNum = that.previousMoveShapeNum;
	        }
	        return;
	      }
	      // 判断移动是底部的按钮还是选取图形按钮
	      if (!that.isMoveShape) {
	        switch (that.operateNum) {
	          // 放置极点
	          case 0:
	            if (that.polarPointObject) return;
	            // 判断是移动还是点击
	            if (that.hasMove) {
	              // 判断是否有图形存在，有就吸附过去
	              if (that.isShapeShow) {
	                that.left = that.orix;
	                that.top = that.oriy;
	              } else {
	                // 限制范围
	                if (that.left > dsvgWidth - dpolarAxisLen * 1.1) {
	                  that.left = dsvgWidth - dpolarAxisLen * 1.1;
	                } else if (that.left < 140) {
	                  that.left = 140;
	                }
	                if (that.top < 50) {
	                  that.top = 50;
	                } else if (that.top > dsvgHeight - 50) {
	                  that.top = dsvgHeight - 50;
	                }
	                that.orix = that.left;
	                that.oriy = that.top;
	              }
	              that.polarPointObject = new _polarPoint2.default({
	                paper: that.paper,
	                x: that.left,
	                y: that.top,
	                scale: that.scale,
	                view: that.$selfView,
	                dsvgWidth: dsvgWidth,
	                dsvgHeight: dsvgHeight
	              });
	              that.movePolarPoint.addClass('hide_dom');
	            } else {
	              that._click();
	            }
	            that.polarPointObject.addControl(that);
	            break;
	          // 放置极轴
	          case 1:
	            if (that.polarAxisObject) return;
	            // 判断是移动还是点击
	            if (that.hasMove) {
	              that.orix = parseInt(that.polarPointObject.polarPoint.attr('cx'));
	              that.oriy = parseInt(that.polarPointObject.polarPoint.attr('cy'));
	              that.polarAxisObject = new _polarAxis2.default({
	                paper: that.paper,
	                x: that.orix,
	                y: that.oriy,
	                scale: that.scale,
	                view: that.$selfView,
	                dsvgWidth: dsvgWidth,
	                dsvgHeight: dsvgHeight
	              });
	              that.polarPointObject.addFollowObject(that.polarAxisObject);
	              that.polarAxisObject.addFollowObject(that.polarPointObject);
	              that.polarAxisObject.setDrawMeasureFlag(false);
	              that.polarAxisObject.drawLine();
	              that.movePolarAxis.addClass('hide_dom');
	              that.polarAxisObject.polarAxis.after(that.polarPointObject.polarPoint);
	            } else {
	              that._click();
	            }
	            that.polarAxisObject.addControl(that);
	            if (that.isShapeShow) {
	              switch (that.moveShapeNum) {
	                // 根据正方形设置极轴长
	                case 3:
	                  that.polarAxisObject.setLen(dsquareLen * 1.2);
	                  that.polarAxisObject.drawLine();
	                  break;
	                // 根据三角形设置极轴长
	                case 4:
	                  that.polarAxisObject.setLen(dtriangleW * 1.2);
	                  that.polarAxisObject.drawLine();
	                  break;
	                // 根据圆形设置极轴长
	                case 5:
	                  that.polarAxisObject.setLen(dcircleR * 1.2);
	                  that.polarAxisObject.drawLine();
	                  break;
	              }
	            }
	            break;
	          // 放置任意点
	          case 2:
	            if (that.anyPointObject) return;
	            // 判断是移动还是点击
	            if (that.hasMove) {
	              that.anyPointObject = new _anyPoint2.default({
	                paper: that.paper,
	                x: that.left,
	                y: that.top,
	                orix: that.orix,
	                oriy: that.oriy,
	                scale: that.scale,
	                view: that.$selfView,
	                perMeasure: that.perMeasure,
	                dsvgWidth: dsvgWidth,
	                dsvgHeight: dsvgHeight
	              });
	              that.polarAxisObject.polarAxis.after(that.anyPointObject.lineToOrigin);
	              that.polarAxisObject.polarAxis.before(that.anyPointObject.degArc);
	              that.polarAxisObject.addPoint(that.anyPointObject);
	              that.movePoint.addClass('hide_dom');
	              that.snap();
	            } else {
	              that._click();
	            }
	            that.snap();
	            that.polarPointObject.addControl(that);
	            that.anyPointObject.addControl(that);
	            // 设置计算所需的刻度
	            that.anyPointObject.setPerMeasure(that.perMeasure);
	            break;
	        }
	      } else {
	        that.isShapeShow = true;
	        that.isSnapToPolar = false;
	        switch (that.moveShapeNum) {
	          // 放置正方形
	          case 3:
	            that._laySquare();
	            break;
	          // 放置三角形
	          case 4:
	            that._layTriangle();
	            break;
	          // 放置圆形
	          case 5:
	            that._layCircle();
	            break;
	        }
	      }
	      that.hasMove = false;
	      that.isObjExist = false;
	    }
	  }, {
	    key: '_svgShapeEnd',
	    value: function _svgShapeEnd(e) {
	      if (!this.hasShapeMove && !this.isResizeScreen) {
	        // 正方形编辑状态
	        if (this.squareObject && e.target == this.squareObject.node) {
	          var x = parseInt(this.squareObject.attr('x'));
	          var y = parseInt(this.squareObject.attr('y'));
	          this.deleteBtn.removeClass('hide_dom').css({
	            left: (x - this.deleteBtnW * 1.4) * this.scale,
	            top: (y + dsquareLen - this.deleteBtnH / 2) * this.scale
	          }).data('trigger', 3);
	          this.keyboardBox.removeClass('hide_dom').css({
	            left: (x + dsquareLen / 2 - this.keyboardBoxW * 0.5) * this.scale,
	            top: (y + dsquareLen + this.keyboardBoxH * 0.3) * this.scale
	          }).addClass('up').data('trigger', 1);
	          this.keyboardInputNum.text(this.squareLen.node.innerHTML);
	          this.keyboardList.addClass('hide_dom');
	          this.keyboardDrop.removeClass('ui_btn_active');
	        }
	        // 三角形编辑状态
	        if (this.triangleObject && e.target == this.triangleObject.node) {
	          var _x = parseInt(this.triangleObject.data('x'));
	          var _y = parseInt(this.triangleObject.data('y'));
	          this.deleteBtn.removeClass('hide_dom').css({
	            left: (_x + dtriangleW / 2 - this.deleteBtnW / 2) * this.scale,
	            top: (_y + this.deleteBtnH * 0.3) * this.scale
	          }).data('trigger', 4);
	          this.keyboardBox.removeClass('hide_dom').css({
	            left: (_x - this.deleteBtnW * 0.2) * this.scale,
	            top: (_y - dtriangleH * 0.8) * this.scale
	          }).removeClass('up').data('trigger', 2);
	          this.keyboardInputNum.text(this.triangleLen.node.innerHTML);
	          this.keyboardList.addClass('hide_dom');
	          this.keyboardDrop.removeClass('ui_btn_active');
	        }
	        // 圆形编辑状态
	        if (this.circleObject && e.target == this.circleObject.node) {
	          var _x2 = parseInt(this.circleObject.attr('cx'));
	          var _y2 = parseInt(this.circleObject.attr('cy'));
	          this.deleteBtn.removeClass('hide_dom').css({
	            left: (_x2 - dcircleR) * this.scale,
	            top: (_y2 + dcircleR - this.deleteBtnH) * this.scale
	          }).data('trigger', 5);
	          this.keyboardBox.removeClass('hide_dom').css({
	            left: (_x2 - this.keyboardBoxW * 0.7) * this.scale,
	            top: (_y2 - dcircleR / 2 - this.keyboardBoxH * 0.5) * this.scale
	          }).removeClass('up').data('trigger', 3);
	          this.keyboardInputNum.text(this.circleLen.node.innerHTML);
	          this.keyboardList.addClass('hide_dom');
	          this.keyboardDrop.removeClass('ui_btn_active');
	        }
	      }
	      this.isResizeScreen = false;
	      this.hasShapeMove = false;
	      this.isShapeDown = false;
	    }
	  }, {
	    key: '_click',
	    value: function _click() {
	      var that = this;
	      // 判断点击是底部的按钮还是选取图形按钮
	      if (!that.isMoveShape) {
	        switch (that.operateNum) {
	          case 0:
	            if (!that.isShapeShow) {
	              that.orix = dpolarPointX;
	              that.oriy = dpolarPointY;
	            }
	            that.polarPointObject = new _polarPoint2.default({
	              paper: that.paper,
	              x: that.orix,
	              y: that.oriy,
	              scale: that.scale,
	              view: that.$selfView,
	              dsvgWidth: dsvgWidth,
	              dsvgHeight: dsvgHeight
	            });
	            break;
	          case 1:
	            that.orix = parseFloat(that.polarPointObject.polarPoint.attr('cx'));
	            that.oriy = parseFloat(that.polarPointObject.polarPoint.attr('cy'));
	            that.polarAxisObject = new _polarAxis2.default({
	              paper: that.paper,
	              x: that.orix,
	              y: that.oriy,
	              scale: that.scale,
	              view: that.$selfView,
	              dsvgWidth: dsvgWidth,
	              dsvgHeight: dsvgHeight
	            });
	            that.polarAxisObject.setDrawMeasureFlag(false);
	            that.polarPointObject.addFollowObject(that.polarAxisObject);
	            that.polarAxisObject.addFollowObject(that.polarPointObject);
	            that.polarAxisObject.drawLine();
	            that.polarAxisObject.polarAxis.after(that.polarPointObject.polarPoint);
	            break;
	          case 2:
	            var x = void 0;
	            var y = void 0;
	            // 根据图形设置任意点的默认位置
	            switch (that.moveShapeNum) {
	              case 3:
	                x = parseFloat(that.squareObject.attr('x')) + dsquareLen;
	                y = parseFloat(that.squareObject.attr('y'));
	                break;
	              case 4:
	                x = parseFloat(that.triangleObject.data('x')) + dtriangleW / 2;
	                y = parseFloat(that.triangleObject.data('y')) - dtriangleH;
	                break;
	              case 5:
	                x = parseFloat(that.circleObject.attr('cx'));
	                y = parseFloat(that.circleObject.attr('cy')) - dcircleR;
	                break;
	            }
	            that.anyPointObject = new _anyPoint2.default({
	              paper: that.paper,
	              x: x,
	              y: y,
	              orix: that.orix,
	              oriy: that.oriy,
	              scale: that.scale,
	              view: that.$selfView,
	              perMeasure: that.polarAxisObject.perMeasure,
	              dsvgWidth: dsvgWidth,
	              dsvgHeight: dsvgHeight
	            });
	            that.polarAxisObject.polarAxis.after(that.anyPointObject.lineToOrigin);
	            that.polarAxisObject.polarAxis.before(that.anyPointObject.degArc);
	            that.polarAxisObject.addPoint(that.anyPointObject);
	            break;
	        }
	      } else {
	        switch (that.moveShapeNum) {
	          case 3:
	            // 默认位置正方形
	            if (that.squareObject) return;
	            var _x3 = dshapePointX - dsquareLen / 2;
	            var _y3 = dshapePointY - dsquareLen / 2;
	            that.squareObject = that.paper.rect(_x3, _y3, dsquareLen, dsquareLen).attr(that.shapeAttr);
	            that.moveSquare.addClass('hide_dom');
	            break;
	          case 4:
	            // 默认位置三角形
	            if (that.triangleObject) return;
	            var x1 = dshapePointX - dtriangleW * 0.5;
	            var y1 = dshapePointY + dtriangleH * 0.4;
	            var x2 = dshapePointX;
	            var y2 = dshapePointY - dtriangleH * 0.6;
	            var x3 = dshapePointX + dtriangleW * 0.5;
	            var y3 = y1;
	            var path = 'M{x1} {y1}L{x2} {y2} {x3} {y3}Z';
	            path = Snap.format(path, {
	              x1: x1,
	              y1: y1,
	              x2: x2,
	              y2: y2,
	              x3: x3,
	              y3: y3
	            });
	            that.triangleObject = that.paper.path(path).attr(that.shapeAttr);
	            that.triangleObject.data('x', x1);
	            that.triangleObject.data('y', y1);
	            that.moveTriangle.addClass('hide_dom');
	            break;
	          case 5:
	            // 默认位置圆形
	            if (that.circleObject) return;
	            that.circleObject = that.paper.circle(dshapePointX, dshapePointY, dcircleR).attr(that.shapeAttr);
	            that.moveCircle.addClass('hide_dom');
	            break;
	        }
	      }
	    }
	  }, {
	    key: '_keyboardClick',
	    value: function _keyboardClick(e) {
	      e.stopPropagation();
	      var $target = $(e.target);
	      if ($target.hasClass('bd_num') || $target.parent().hasClass('bd_num')) {
	        $target = $target.hasClass('bd_num') ? $target : $target.parent();
	        var index = this.keyboardNum.index($target) + 1;
	        index = index === 11 ? 0 : index;
	        var currentNum = parseInt(this.keyboardInputNum.text());
	        if (this.isFirstClick) {
	          currentNum = 0;
	          this.isFirstClick = false;
	        }
	        // index为10是回退按钮 12是enter按钮
	        if (index === 10) {
	          if (currentNum < 10) {
	            this.keyboardInputNum.text(0);
	          } else {
	            this.keyboardInputNum.text(currentNum.toString().substr(0, 1));
	          }
	        } else if (index === 12) {
	          this.keyboardList.addClass('hide_dom');
	          if (parseInt(this.keyboardInputNum.text()) !== 0) {
	            this.initNum = this.keyboardInputNum.text();
	          }
	          var textObject = void 0;
	          switch (this.keyboardBox.data('trigger')) {
	            case 1:
	              textObject = this.squareLen;
	              this.perMeasure = dsquareLen / this.initNum;
	              break;
	            case 2:
	              textObject = this.triangleLen;
	              this.perMeasure = _utils2.default.getDistance(this.orix, this.oriy, this.orix + dtriangleW / 2, this.oriy - dtriangleH) / this.initNum;
	              break;
	            case 3:
	              textObject = this.circleLen;
	              this.perMeasure = dcircleR / this.initNum;
	              break;
	          }
	          if (this.anyPointObject) {
	            this.anyPointObject.setPerMeasure(this.perMeasure);
	            if (this.anyPointObject.isShowPolarCoords) {
	              this.anyPointObject.showPolarCoords();
	            }
	          }
	          textObject.attr('text', this.initNum);
	          this.keyboardInputNum.text(this.initNum);
	          this.keyboardDrop.removeClass('ui_btn_active');
	          if (this.squareObject) {
	            this.snap();
	          }
	        } else {
	          if (parseInt(currentNum + '' + index) < 100) {
	            this.keyboardInputNum.text(parseInt(currentNum + '' + index));
	          } else {
	            this.keyboardInputNum.text(99);
	          }
	        }
	      }
	    }

	    // 关闭编辑态

	  }, {
	    key: '_closeEdit',
	    value: function _closeEdit() {
	      this.deleteBtn.addClass('hide_dom');
	      this.keyboardBox.addClass('hide_dom');
	      this.keyboardList.addClass('hide_dom');
	      this.keyboardInputNum.text(this.initNum);
	      this.keyboardDrop.removeClass('ui_btn_active');
	    }
	  }, {
	    key: 'resizeScreenHandler',
	    value: function resizeScreenHandler() {
	      this.isResizeScreen = true;
	      this.scale = Math.min(this.svgContainer.width() / dsvgWidth, this.svgContainer.height() / dsvgHeight);
	      this.polarPointObject && this.polarPointObject.resizeScreenHandler(this.scale);
	      this.polarAxisObject && this.polarAxisObject.resizeScreenHandler(this.scale);
	      this.anyPointObject && this.anyPointObject.resizeScreenHandler(this.scale);
	      this.deleteBtnW = this.deleteBtn.width() / this.scale;
	      this.deleteBtnH = this.deleteBtn.height() / this.scale;
	      this.keyboardBoxW = this.keyboardBox.width() / this.scale;
	      this.keyboardBoxH = this.keyboardBox.height() / this.scale;
	      if (this.squareObject && this.deleteBtn.data('trigger') == 3) {
	        var x = parseInt(this.squareObject.attr('x'));
	        var y = parseInt(this.squareObject.attr('y'));
	        this.deleteBtn.css({
	          left: (x - this.deleteBtnW * 1.4) * this.scale,
	          top: (y + dsquareLen - this.deleteBtnH / 2) * this.scale
	        });
	        this.keyboardBox.css({
	          left: (x + dsquareLen / 2 - this.keyboardBoxW * 0.5) * this.scale,
	          top: (y + dsquareLen + this.keyboardBoxH * 0.3) * this.scale
	        });
	      }
	      // 三角形编辑状态
	      if (this.triangleObject && this.deleteBtn.data('trigger') == 4) {
	        var _x4 = parseInt(this.triangleObject.data('x'));
	        var _y4 = parseInt(this.triangleObject.data('y'));
	        this.deleteBtn.css({
	          left: (_x4 + dtriangleW / 2 - this.deleteBtnW / 2) * this.scale,
	          top: (_y4 + this.deleteBtnH * 0.3) * this.scale
	        });
	        this.keyboardBox.css({
	          left: (_x4 - this.deleteBtnW * 0.2) * this.scale,
	          top: (_y4 - dtriangleH * 0.8) * this.scale
	        });
	      }
	      // 圆形编辑状态
	      if (this.circleObject && this.deleteBtn.data('trigger') == 5) {
	        var _x5 = parseInt(this.circleObject.attr('cx'));
	        var _y5 = parseInt(this.circleObject.attr('cy'));
	        this.deleteBtn.css({
	          left: (_x5 - dcircleR) * this.scale,
	          top: (_y5 + dcircleR - this.deleteBtnH) * this.scale
	        });
	        this.keyboardBox.css({
	          left: (_x5 - this.keyboardBoxW * 0.7) * this.scale,
	          top: (_y5 - dcircleR / 2 - this.keyboardBoxH * 0.5) * this.scale
	        });
	      }
	      switch (this.operateNum) {
	        case -1:
	          this.operateBg.addClass('hide_dom');
	          break;
	        case 0:
	          this.operateBg.removeClass('hide_dom').width(this.polarPointBtn.innerWidth());
	          break;
	        case 1:
	          this.operateBg.show().width(this.polarAxisBtn.innerWidth() + this.polarPointBtn.innerWidth());
	          break;
	        case 2:
	          this.operateBg.width(this.anyPointBtn.innerWidth() + this.polarPointBtn.innerWidth() + this.polarAxisBtn.innerWidth());
	          break;
	      }
	    }

	    // 获取图形的移动

	  }, {
	    key: 'getMoveRange',
	    value: function getMoveRange(x, y) {
	      var that = this;
	      if (!that.squareObject && !that.triangleObject && !that.circleObject) {
	        return;
	      }
	      var restrict = void 0;
	      var leftRestrict = void 0;
	      var rightRestrict = void 0;
	      var topRestrict = void 0;
	      var bottomRestrict = void 0;
	      switch (that.moveShapeNum) {
	        // 正方形边界
	        case 3:
	          restrict = dsquareLen / 2;
	          x += dsquareLen / 2;
	          y -= dsquareLen / 2;
	          if (x > dsvgWidth - restrict * 1.6) {
	            x = dsvgWidth - restrict * 1.6;
	          } else if (x < restrict * 1.45) {
	            x = restrict * 1.45;
	          }
	          if (y < restrict * 1.2) {
	            y = restrict * 1.2;
	          } else if (y > dsvgHeight - restrict * 1.45) {
	            y = dsvgHeight - restrict * 1.45;
	          }
	          x -= dsquareLen / 2;
	          y += dsquareLen / 2;
	          break;
	        // 三角形边界
	        case 4:
	          leftRestrict = dtriangleW / 2 * 1.15;
	          rightRestrict = dsvgWidth - dtriangleW / 2 * 1.5;
	          topRestrict = dtriangleH * 0.6 * 1.3;
	          bottomRestrict = dsvgHeight - dtriangleH * 0.4 * 2.2;
	          x = x + dtriangleW * 0.5;
	          y = y - dtriangleH * 0.4;
	          if (x > rightRestrict) {
	            x = rightRestrict;
	          } else if (x < leftRestrict) {
	            x = leftRestrict;
	          }
	          if (y < topRestrict) {
	            y = topRestrict;
	          } else if (y > bottomRestrict) {
	            y = bottomRestrict;
	          }
	          x = x - dtriangleW * 0.5;
	          y = y + dtriangleH * 0.4;
	          break;
	        // 圆形边界
	        case 5:
	          leftRestrict = dcircleR * 1.1;
	          rightRestrict = dsvgWidth - dcircleR * 1.3;
	          topRestrict = dcircleR * 1.18;
	          bottomRestrict = dsvgHeight - dcircleR * 1.08;
	          if (x > rightRestrict) {
	            x = rightRestrict;
	          } else if (x < leftRestrict) {
	            x = leftRestrict;
	          }
	          if (y < topRestrict) {
	            y = topRestrict;
	          } else if (y > bottomRestrict) {
	            y = bottomRestrict;
	          }
	          break;
	      }
	      return { newX: x, newY: y };
	    }
	  }, {
	    key: '_delete',
	    value: function _delete() {
	      var that = this;
	      switch (that.deleteBtn.data('trigger')) {
	        // 极点删除
	        case 0:
	          that.polarPointObject.remove();
	          that.polarPointObject = null;
	          if (that.polarAxisObject) {
	            that.polarAxisObject.remove();
	            that.polarAxisObject = null;
	          }
	          if (that.anyPointObject) {
	            that.anyPointObject.remove();
	            that.anyPointObject = null;
	          }
	          that._controlFlow(-1, true);
	          break;
	        // 极轴删除
	        case 1:
	          if (that.anyPointObject) {
	            that.anyPointObject.remove();
	            that.anyPointObject = null;
	          }
	          that.polarAxisObject.remove();
	          that.polarPointObject.followObjects.pop();
	          that.polarAxisObject = null;
	          that._controlFlow(0, true);
	          break;
	        // 任意点删除
	        case 2:
	          that.anyPointObject.remove();
	          that.polarAxisObject.addPoint(null);
	          that.anyPointObject = null;
	          that._controlFlow(1, true);
	          break;
	        // 正方形删除
	        case 3:
	          if (that.anyPointObject) {
	            that.anyPointObject.remove();
	            that.polarAxisObject.addPoint(null);
	            that.anyPointObject = null;
	            that._controlFlow(1, true);
	          }
	          that.squareObject.remove();
	          that.squareObject = null;
	          that.keyboardBox.addClass('hide_dom');
	          that.keyboardList.addClass('hide_dom');
	          that.keyboardInputNum.text(that.initNum);
	          that.anyPointBtn.removeClass('on');
	          that.squareBtn.removeClass('on');
	          that.squareLen.node.style.display = 'none';
	          that.isShapeShow = false;
	          break;
	        // 三角形删除
	        case 4:
	          if (that.anyPointObject) {
	            that.anyPointObject.remove();
	            that.polarAxisObject.addPoint(null);
	            that.anyPointObject = null;
	            that._controlFlow(1, true);
	          }
	          that.triangleObject.remove();
	          that.triangleObject = null;
	          that.keyboardBox.addClass('hide_dom');
	          that.keyboardList.addClass('hide_dom');
	          that.keyboardInputNum.text(that.initNum);
	          that.anyPointBtn.removeClass('on');
	          that.triangleBtn.removeClass('on');
	          that.triangleLen.node.style.display = 'none';
	          that.isShapeShow = false;
	          break;
	        // 圆形删除
	        case 5:
	          if (that.anyPointObject) {
	            that.anyPointObject.remove();
	            that.polarAxisObject.addPoint(null);
	            that.anyPointObject = null;
	            that._controlFlow(1, true);
	          }
	          that.circleObject.remove();
	          that.circleObject = null;
	          that.keyboardBox.addClass('hide_dom');
	          that.keyboardList.addClass('hide_dom');
	          that.keyboardInputNum.text(that.initNum);
	          that.circleBtn.removeClass('on');
	          that.anyPointBtn.removeClass('on');
	          that.circleLen.node.style.display = 'none';
	          that.circleDashLine.node.style.display = 'none';
	          that.isShapeShow = false;
	          break;
	      }
	      that.deleteBtn.addClass('hide_dom');
	    }

	    // 任意点吸附到图形上

	  }, {
	    key: 'snap',
	    value: function snap() {
	      var that = this;
	      if (!this.anyPointObject) return;
	      switch (this.moveShapeNum) {
	        case 3:
	          that._snapToSquare();
	          break;
	        case 4:
	          that._snapToTriangle();
	          break;
	        case 5:
	          that._snapToCircle();
	          break;
	      }
	    }
	  }, {
	    key: '_snapToSquare',
	    value: function _snapToSquare() {
	      var that = this;
	      var x = parseFloat(this.anyPointObject.anyPoint.attr('cx'));
	      var y = parseFloat(this.anyPointObject.anyPoint.attr('cy'));
	      var left = that.orix;
	      var right = that.orix + dsquareLen;
	      var top = that.oriy - dsquareLen;
	      var bottom = that.oriy;
	      var sqrtDisTxt = void 0;
	      if (x < left && y > top && y < bottom) {
	        x = left;
	      } else if (x < left && y < top) {
	        x = left;
	        y = top;
	      } else if (x < left && y > bottom) {
	        x = left;
	        y = bottom;
	      } else if (x > left && x < right && y < top) {
	        y = top;
	      } else if (x > left && x < right && y > top && y < bottom) {
	        var detal1 = Math.abs(x - left);
	        var detal2 = Math.abs(x - right);
	        var detal3 = Math.abs(y - top);
	        var detal4 = Math.abs(y - bottom);
	        var delta = Math.min(detal1, detal2, detal3, detal4);
	        switch (delta) {
	          case detal1:
	            x = left;
	            break;
	          case detal2:
	            x = right;
	            break;
	          case detal3:
	            y = top;
	            break;
	          case detal4:
	            y = bottom;
	            break;
	        }
	      } else if (x > left && x < right && y > bottom) {
	        y = bottom;
	      } else if (x >= right && y <= top) {
	        x = right;
	        y = top;
	      } else if (x > right && y > top && y < bottom) {
	        x = right;
	      } else if (x > right && y > bottom) {
	        x = right;
	        y = bottom;
	      }
	      if (Math.abs(x - right) < 0.5 && Math.abs(y - top) < 0.5) {
	        sqrtDisTxt = that.squareLen.node.innerHTML + '√2';
	      }
	      that.anyPointObject.changePos(x, y, sqrtDisTxt);
	    }
	  }, {
	    key: '_snapToTriangle',
	    value: function _snapToTriangle() {
	      var that = this;
	      var x = parseFloat(this.anyPointObject.anyPoint.attr('cx'));
	      var y = parseFloat(this.anyPointObject.anyPoint.attr('cy'));
	      var bottom = that.oriy;
	      var top = that.oriy - dtriangleH;
	      var mid = that.orix + dtriangleW / 2;
	      var left = that.orix;
	      var right = that.orix + dtriangleW;
	      var a1 = 1;
	      var b1 = 1;
	      if (y > bottom) {
	        y = bottom;
	        if (x < left) {
	          x = left;
	        } else if (x > right) {
	          x = right;
	        }
	      } else if (x < mid) {
	        var deg = 360 - Snap.angle(x, y, that.orix, that.oriy);
	        if (deg >= 135) {
	          x = that.orix;
	          y = that.oriy;
	        } else {
	          deg = deg - 45;
	          var distance = _utils2.default.getDistance(x, y, that.orix, that.oriy);
	          distance = distance * Math.cos(deg / 180 * Math.PI);
	          if (deg < -1 && y > bottom - 80) {
	            y = bottom;
	          } else {
	            x = that.orix + distance * Math.cos(Math.PI / 4);
	            y = that.oriy - distance * Math.sin(Math.PI / 4);
	            if (y < top) {
	              x = mid;
	              y = top;
	            }
	          }
	        }
	      } else if (x > mid) {
	        var _deg = 360 - Snap.angle(x, y, right, that.oriy);
	        if (_deg <= 45) {
	          x = right;
	          y = that.oriy;
	        } else {
	          _deg = 135 - _deg;
	          var _distance = _utils2.default.getDistance(x, y, right, that.oriy);
	          _distance = _distance * Math.cos(_deg / 180 * Math.PI);
	          if (_distance < 0.1) return;
	          if (_deg < -1 && y > bottom - 80) {
	            y = bottom;
	          } else {
	            x = right + _distance * Math.cos(Math.PI * 0.75);
	            y = that.oriy - _distance * Math.sin(Math.PI * 0.75);
	            if (y < top) {
	              x = mid;
	              y = top;
	            }
	          }
	        }
	      }
	      that.anyPointObject.changePos(x, y);
	    }
	  }, {
	    key: '_snapToCircle',
	    value: function _snapToCircle() {
	      var that = this;
	      var x = parseFloat(this.anyPointObject.anyPoint.attr('cx'));
	      var y = parseFloat(this.anyPointObject.anyPoint.attr('cy'));
	      var deg = Snap.angle(x, y, that.orix, that.oriy);
	      x = that.orix + dcircleR * Math.cos(deg / 180 * Math.PI);
	      y = that.oriy + dcircleR * Math.sin(deg / 180 * Math.PI);
	      that.anyPointObject.changePos(x, y);
	    }

	    // 放置正方形

	  }, {
	    key: '_laySquare',
	    value: function _laySquare() {
	      var that = this;
	      if (that.squareObject || that.isAnimating) return;
	      if (that.triangleObject) {
	        that.triangleObject.remove();
	        that.triangleObject = null;
	      }
	      if (that.circleObject) {
	        that.circleObject.remove();
	        that.circleObject = null;
	      }
	      // 判断是否有极点存在，有就判断要不要吸附过去
	      var restrict = dsquareLen / 2;
	      if (that.polarPointObject) {
	        var polarX = parseFloat(that.polarPointObject.polarPoint.attr('cx'));
	        var polarY = parseFloat(that.polarPointObject.polarPoint.attr('cy'));
	        var left = polarX + dsquareLen / 2;
	        var top = polarY - dsquareLen / 2;
	        if (left < dsvgWidth - restrict * 1.6 && left > restrict * 1.45 && top > restrict * 1.2 && top < dsvgHeight - restrict * 1.45) {
	          that.left = left;
	          that.top = top;
	          that.isSnapToPolar = true;
	        }
	        if (that.polarAxisObject) {
	          that.polarAxisObject.setLen(dsquareLen * 1.2);
	          that.polarAxisObject.drawLine();
	        }
	      }
	      var x = void 0;
	      var y = void 0;
	      if (!that.isSnapToPolar) {
	        // 范围限制
	        if (that.left > dsvgWidth - restrict * 1.6) {
	          that.left = dsvgWidth - restrict * 1.6;
	        } else if (that.left < restrict * 1.45) {
	          that.left = restrict * 1.45;
	        }
	        if (that.top < restrict * 1.2) {
	          that.top = restrict * 1.2;
	        } else if (that.top > dsvgHeight - restrict * 1.45) {
	          that.top = dsvgHeight - restrict * 1.45;
	        }
	        x = that.left;
	        y = that.top;
	      }

	      // 判断是移动还是点击
	      if (that.hasMove || that.isSnapToPolar) {
	        x = that.left - dsquareLen / 2;
	        y = that.top - dsquareLen / 2;
	        that.squareObject = that.paper.rect(x, y, dsquareLen, dsquareLen).attr(that.shapeAttr);
	        that.moveSquare.addClass('hide_dom');
	      } else {
	        that._click();
	      }
	      // 调整层级和处理相关状态
	      if (that.polarAxisObject) {
	        that.polarAxisObject.polarAxis.before(that.squareObject);
	        that.anyPointBtn.addClass('on');
	      } else if (that.polarPointObject) {
	        that.polarPointObject.polarPoint.before(that.squareObject);
	      }
	      that.squareBtn.addClass('on');
	      that.triangleBtn.removeClass('on');
	      that.circleBtn.removeClass('on');
	      // 计算图形长度数值显示位置
	      x = parseFloat(that.squareObject.attr('x'));
	      y = parseFloat(that.squareObject.attr('y'));
	      var tx = x + dsquareLen / 2 - that.keyboardBoxW * 0.12;
	      var ty = y + dsquareLen + that.keyboardBoxH * 0.42;
	      that.squareLen.node.style.display = 'block';
	      that.triangleLen.node.style.display = 'none';
	      that.circleDashLine.node.style.display = 'none';
	      that.circleLen.node.style.display = 'none';
	      that.squareLen.attr({
	        x: tx,
	        y: ty,
	        text: '6'
	      });
	      // 设置极点默认位置和刻度值
	      that.orix = x;
	      that.oriy = y + dsquareLen;
	      that.perMeasure = dsquareLen / 6;
	      if (that.polarPointObject) {
	        if (!that.isSnapToPolar) {
	          that._animateTo();
	        } else {
	          that.polarPointObject.changePos(that.orix, that.oriy);
	          if (that.polarAxisObject) {
	            that.polarAxisObject.changeLinePos(that.orix, that.oriy);
	          }
	        }
	      }
	      that.deleteBtn.removeClass('hide_dom').css({
	        left: (x - that.deleteBtnW * 1.4) * that.scale,
	        top: (y + dsquareLen - that.deleteBtnH / 2) * that.scale
	      }).data('trigger', 3);
	      that.keyboardBox.removeClass('hide_dom').css({
	        left: (x + dsquareLen / 2 - that.keyboardBoxW * 0.5) * that.scale,
	        top: (y + dsquareLen + that.keyboardBoxH * 0.3) * that.scale
	      }).addClass('up').data('trigger', 1);
	      that.keyboardInputNum.text(that.squareLen.node.innerHTML);
	    }
	  }, {
	    key: 'changeSquarePos',
	    value: function changeSquarePos(x, y) {
	      var that = this;
	      that.squareObject.attr({
	        x: x,
	        y: y
	      });
	      var tx = x + dsquareLen / 2 - that.keyboardBoxW * 0.12;
	      var ty = y + dsquareLen + that.keyboardBoxH * 0.42;
	      that.squareLen.attr({
	        x: tx,
	        y: ty
	      });
	      that.orix = x;
	      that.oriy = y + dsquareLen;
	      if (that.polarPointObject) {
	        that.polarPointObject.changePos(that.orix, that.oriy);
	      }
	      if (that.polarAxisObject) {
	        that.polarAxisObject.changeLinePos(that.orix, that.oriy);
	      }
	      if (that.anyPointObject) {
	        that.anyPointObject.followPolarPoint(that.orix, that.oriy, true);
	      }
	    }

	    // 放置三角形

	  }, {
	    key: '_layTriangle',
	    value: function _layTriangle() {
	      var that = this;
	      if (that.triangleObject || that.isAnimating) return;
	      if (that.squareObject) {
	        that.squareObject.remove();
	        that.squareObject = null;
	      }
	      if (that.circleObject) {
	        that.circleObject.remove();
	        that.circleObject = null;
	      }
	      var leftRestrict = dtriangleW / 2 * 1.15;
	      var rightRestrict = dsvgWidth - dtriangleW / 2 * 1.5;
	      var topRestrict = dtriangleH * 0.6 * 1.3;
	      var bottomRestrict = dsvgHeight - dtriangleH * 0.4 * 2.2;
	      // 判断是否有极点存在，有就判断要不要吸附过去
	      if (that.polarPointObject) {
	        var polarX = parseFloat(that.polarPointObject.polarPoint.attr('cx'));
	        var polarY = parseFloat(that.polarPointObject.polarPoint.attr('cy'));
	        var left = polarX + dtriangleW * 0.5;
	        var top = polarY - dtriangleH * 0.4;
	        if (left < rightRestrict && left > leftRestrict && top > topRestrict && top < bottomRestrict) {
	          that.left = left;
	          that.top = top;
	          that.isSnapToPolar = true;
	        }
	        if (that.polarAxisObject) {
	          that.polarAxisObject.setLen(dtriangleW * 1.2);
	          that.polarAxisObject.drawLine();
	        }
	      }
	      if (!that.isSnapToPolar) {
	        // 范围限制
	        if (that.left > rightRestrict) {
	          that.left = rightRestrict;
	        } else if (that.left < leftRestrict) {
	          that.left = leftRestrict;
	        }
	        if (that.top < topRestrict) {
	          that.top = topRestrict;
	        } else if (that.top > bottomRestrict) {
	          that.top = bottomRestrict;
	        }
	      }
	      // 判断是移动还是点击
	      if (that.hasMove || that.isSnapToPolar) {
	        var x1 = that.left - dtriangleW * 0.5;
	        var y1 = that.top + dtriangleH * 0.4;
	        var x2 = that.left;
	        var y2 = that.top - dtriangleH * 0.6;
	        var x3 = that.left + dtriangleW * 0.5;
	        var y3 = y1;
	        var path = 'M{x1} {y1}L{x2} {y2} {x3} {y3}Z';
	        path = Snap.format(path, {
	          x1: x1,
	          y1: y1,
	          x2: x2,
	          y2: y2,
	          x3: x3,
	          y3: y3
	        });
	        that.triangleObject = that.paper.path(path).attr(that.shapeAttr);
	        that.triangleObject.data('x', x1);
	        that.triangleObject.data('y', y1);
	        that.moveTriangle.addClass('hide_dom');
	      } else {
	        that._click();
	      }
	      // 调整层级和处理相关状态
	      if (that.polarAxisObject) {
	        that.polarAxisObject.polarAxis.before(that.triangleObject);
	        that.anyPointBtn.addClass('on');
	      } else if (that.polarPointObject) {
	        that.polarPointObject.polarPoint.before(that.triangleObject);
	      }
	      that.squareBtn.removeClass('on');
	      that.triangleBtn.addClass('on');
	      that.circleBtn.removeClass('on');
	      // 计算图形长度数值显示位置
	      var x = parseFloat(that.triangleObject.data('x'));
	      var y = parseFloat(that.triangleObject.data('y'));
	      var tx = x + that.keyboardBoxW * 0.26;
	      var ty = y - dtriangleH * 0.76;
	      that.squareLen.node.style.display = 'none';
	      that.triangleLen.node.style.display = 'block';
	      that.circleDashLine.node.style.display = 'none';
	      that.circleLen.node.style.display = 'none';
	      that.triangleLen.attr({
	        x: tx,
	        y: ty,
	        text: '6'
	      });
	      // 设置极点默认位置和刻度值
	      that.orix = x;
	      that.oriy = y;
	      that.perMeasure = _utils2.default.getDistance(x, y, x + dtriangleW / 2, y - dtriangleH) / 6;
	      if (that.polarPointObject) {
	        if (!that.isSnapToPolar) {
	          that._animateTo();
	        } else {
	          that.polarPointObject.changePos(that.orix, that.oriy);
	          if (that.polarAxisObject) {
	            that.polarAxisObject.changeLinePos(that.orix, that.oriy);
	          }
	        }
	      }
	      that.deleteBtn.removeClass('hide_dom').css({
	        left: (x + dtriangleW / 2 - that.deleteBtnW / 2) * that.scale,
	        top: (y + that.deleteBtnH * 0.3) * that.scale
	      }).data('trigger', 4);
	      that.keyboardBox.removeClass('hide_dom').css({
	        left: (x - that.deleteBtnW * 0.2) * that.scale,
	        top: (y - dtriangleH * 0.8) * that.scale
	      }).removeClass('up').data('trigger', 2);
	      that.keyboardInputNum.text(that.triangleLen.node.innerHTML);
	    }
	  }, {
	    key: 'changeTrianglePos',
	    value: function changeTrianglePos(x, y) {
	      var that = this;
	      var cx = x + dtriangleW * 0.5;
	      var cy = y - dtriangleH * 0.4;
	      var x1 = x;
	      var y1 = y;
	      var x2 = cx;
	      var y2 = cy - dtriangleH * 0.6;
	      var x3 = cx + dtriangleW * 0.5;
	      var y3 = y1;
	      var path = 'M{x1} {y1}L{x2} {y2} {x3} {y3}Z';
	      path = Snap.format(path, {
	        x1: x1,
	        y1: y1,
	        x2: x2,
	        y2: y2,
	        x3: x3,
	        y3: y3
	      });
	      that.triangleObject.attr('d', path);
	      that.triangleObject.data('x', x);
	      that.triangleObject.data('y', y);
	      var tx = x + that.keyboardBoxW * 0.26;
	      var ty = y - dtriangleH * 0.76;
	      that.triangleLen.attr({
	        x: tx,
	        y: ty
	      });
	      // 设置极点默认位置和刻度值
	      that.orix = x;
	      that.oriy = y;
	      if (that.polarPointObject) {
	        that.polarPointObject.changePos(that.orix, that.oriy);
	      }
	      if (that.polarAxisObject) {
	        that.polarAxisObject.changeLinePos(that.orix, that.oriy);
	      }
	      if (that.anyPointObject) {
	        that.anyPointObject.followPolarPoint(that.orix, that.oriy);
	      }
	    }

	    // 放置圆形

	  }, {
	    key: '_layCircle',
	    value: function _layCircle() {
	      var that = this;
	      if (that.circleObject || that.isAnimating) return;
	      if (that.triangleObject) {
	        that.triangleObject.remove();
	        that.triangleObject = null;
	      }
	      if (that.squareObject) {
	        that.squareObject.remove();
	        that.squareObject = null;
	      }
	      var leftRestrict = dcircleR * 1.1;
	      var rightRestrict = dsvgWidth - dcircleR * 1.3;
	      var topRestrict = dcircleR * 1.18;
	      var bottomRestrict = dsvgHeight - dcircleR * 1.08;
	      // 判断是否有极点存在，有就判断要不要吸附过去
	      if (that.polarPointObject) {
	        var polarX = parseFloat(that.polarPointObject.polarPoint.attr('cx'));
	        var polarY = parseFloat(that.polarPointObject.polarPoint.attr('cy'));
	        var left = polarX;
	        var top = polarY;
	        if (left < rightRestrict && left > leftRestrict && top > topRestrict && top < bottomRestrict) {
	          that.left = left;
	          that.top = top;
	          that.isSnapToPolar = true;
	        }
	        if (that.polarAxisObject) {
	          that.polarAxisObject.setLen(dcircleR * 1.2);
	          that.polarAxisObject.drawLine();
	        }
	      }
	      if (!that.isSnapToPolar) {
	        // 范围限制
	        if (that.left > rightRestrict) {
	          that.left = rightRestrict;
	        } else if (that.left < leftRestrict) {
	          that.left = leftRestrict;
	        }
	        if (that.top < topRestrict) {
	          that.top = topRestrict;
	        } else if (that.top > bottomRestrict) {
	          that.top = bottomRestrict;
	        }
	      }

	      // 判断是移动还是点击
	      if (that.hasMove || that.isSnapToPolar) {
	        that.circleObject = that.paper.circle(that.left, that.top, dcircleR).attr(that.shapeAttr);
	        that.moveCircle.addClass('hide_dom');
	      } else {
	        that._click();
	      }
	      // 调整层级和处理相关状态
	      if (that.polarAxisObject) {
	        that.polarAxisObject.polarAxis.before(that.circleObject);
	        that.anyPointBtn.addClass('on');
	      } else if (that.polarPointObject) {
	        that.polarPointObject.polarPoint.before(that.circleObject);
	      }
	      that.squareBtn.removeClass('on');
	      that.triangleBtn.removeClass('on');
	      that.circleBtn.addClass('on');
	      that.squareLen.node.style.display = 'none';
	      that.triangleLen.node.style.display = 'none';
	      that.circleDashLine.node.style.display = 'block';
	      that.circleLen.node.style.display = 'block';
	      // 计算图形长度数值显示位置
	      var x = parseFloat(that.circleObject.attr('cx'));
	      var y = parseFloat(that.circleObject.attr('cy'));
	      var tx = x - that.keyboardBoxW * 0.32;
	      var ty = y - dcircleR / 2 - that.keyboardBoxH * 0.38;
	      that.circleObject.after(that.circleLen);
	      that.circleLen.attr({
	        x: tx,
	        y: ty,
	        text: '6'
	      });
	      that.circleDashLine.attr({
	        x1: x,
	        y1: y,
	        x2: x,
	        y2: y - dcircleR
	      });
	      that.circleObject.after(that.circleDashLine);
	      // 设置极点默认位置和刻度值
	      that.orix = x;
	      that.oriy = y;
	      that.perMeasure = dcircleR / 6;
	      if (that.polarPointObject) {
	        if (!that.isSnapToPolar) {
	          that._animateTo();
	        } else {
	          that.polarPointObject.changePos(that.orix, that.oriy);
	          if (that.polarAxisObject) {
	            that.polarAxisObject.changeLinePos(that.orix, that.oriy);
	          }
	        }
	      }
	      that.deleteBtn.removeClass('hide_dom').css({
	        left: (x - dcircleR) * that.scale,
	        top: (y + dcircleR - that.deleteBtnH) * that.scale
	      }).data('trigger', 5);
	      that.keyboardBox.removeClass('hide_dom').css({
	        left: (x - that.keyboardBoxW * 0.7) * that.scale,
	        top: (y - dcircleR / 2 - that.keyboardBoxH * 0.5) * that.scale
	      }).removeClass('up').data('trigger', 3);
	      that.keyboardInputNum.text(that.circleLen.node.innerHTML);
	    }
	  }, {
	    key: 'changeCirclePos',
	    value: function changeCirclePos(x, y) {
	      var that = this;
	      that.circleObject.attr({
	        cx: x,
	        cy: y
	      });
	      var tx = x - that.keyboardBoxW * 0.32;
	      var ty = y - dcircleR / 2 - that.keyboardBoxH * 0.38;
	      that.circleLen.attr({
	        x: tx,
	        y: ty
	      });
	      that.circleDashLine.attr({
	        x1: x,
	        y1: y,
	        x2: x,
	        y2: y - dcircleR
	      });
	      // 设置极点默认位置和刻度值
	      that.orix = x;
	      that.oriy = y;
	      if (that.polarPointObject) {
	        that.polarPointObject.changePos(that.orix, that.oriy);
	      }
	      if (that.polarAxisObject) {
	        that.polarAxisObject.changeLinePos(that.orix, that.oriy);
	      }
	      if (that.anyPointObject) {
	        that.anyPointObject.followPolarPoint(that.orix, that.oriy);
	      }
	    }

	    // 极轴和极点移动向图形

	  }, {
	    key: '_animateTo',
	    value: function _animateTo() {
	      var that = this;
	      var startX = parseInt(this.polarPointObject.polarPoint.attr('cx'));
	      var startY = parseInt(this.polarPointObject.polarPoint.attr('cy'));
	      var destX = that.orix;
	      var destY = that.oriy;
	      var startTime = Date.now();
	      var duration = 300;
	      var destTime = startTime + duration;

	      function step() {
	        var now = Date.now();
	        var newY = void 0;
	        var newX = void 0;

	        if (now >= destTime) {
	          that.isAnimating = false;
	          that.polarPointObject.changePos(destX, destY);
	          if (that.polarAxisObject) {
	            that.polarAxisObject.changeLinePos(destX, destY);
	            that.polarAxisObject.x = destX;
	            that.polarAxisObject.y = destY;
	          }
	          return;
	        }

	        now = (now - startTime) / duration;
	        newX = (destX - startX) * now + startX;
	        newY = (destY - startY) * now + startY;
	        that.polarPointObject.changePos(newX, newY);
	        if (that.polarAxisObject) {
	          that.polarAxisObject.changeLinePos(newX, newY);
	        }

	        if (that.isAnimating) {
	          rAF(step);
	        }
	      }

	      this.isAnimating = true;
	      step();
	    }

	    // 底部操作逻辑控制

	  }, {
	    key: '_controlFlow',
	    value: function _controlFlow(num, isDeleteOperate) {
	      if (this.operateNum + 1 !== num && !isDeleteOperate) return;
	      this.operateNum = num;
	      this._resetFlow();
	      switch (num) {
	        case 0:
	          this._flowOne();
	          break;
	        case 1:
	          this._flowTwo();
	          break;
	        case 2:
	          this._flowThree();
	          break;
	      }
	    }
	  }, {
	    key: '_flowOne',
	    value: function _flowOne() {
	      this.operateBg.removeClass('hide_dom').width(this.polarPointBtn.innerWidth());
	      this.polarAxisBtn.addClass('on');
	    }
	  }, {
	    key: '_flowTwo',
	    value: function _flowTwo() {
	      this._flowOne();
	      if (this.isShapeShow) {
	        this.anyPointBtn.addClass('on');
	      }
	      this.operateBg.show().width(this.polarAxisBtn.innerWidth() + this.polarPointBtn.innerWidth());
	    }
	  }, {
	    key: '_flowThree',
	    value: function _flowThree() {
	      this._flowOne();
	      this._flowTwo();
	      this.operateBg.width(this.anyPointBtn.innerWidth() + this.polarPointBtn.innerWidth() + this.polarAxisBtn.innerWidth());
	      this.showCoordBtn.removeClass('click_disabled').removeClass('ui_btn_active');
	    }
	  }, {
	    key: '_resetFlow',
	    value: function _resetFlow() {
	      this.operateBg.addClass('hide_dom');
	      this.showCoordBtn.addClass('click_disabled');
	      this.showCoordBtn.find('span').text(this.i18nModel.show_polar_coord);
	      this.polarAxisBtn.removeClass('on');
	      this.anyPointBtn.removeClass('on');
	    }
	  }]);

	  return PresetD;
	}();

	exports.default = PresetD;

/***/ })
/******/ ]);]]></presenter><resources><file src="./resources/PolarCoordinateSystem.json"/><file src="./resources/wood/images/arrow_icon.png"/><file src="./resources/wood/images/axis_btn.png"/><file src="./resources/wood/images/circle.png"/><file src="./resources/wood/images/com_eye_1.png"/><file src="./resources/wood/images/com_eye_2.png"/><file src="./resources/wood/images/com_eye_3.png"/><file src="./resources/wood/images/delete_active.png"/><file src="./resources/wood/images/delete.png"/><file src="./resources/wood/images/fractions_keyboard_del_btn.png"/><file src="./resources/wood/images/polar_sys.png"/><file src="./resources/wood/images/preset_1.png"/><file src="./resources/wood/images/preset_2_2_points.png"/><file src="./resources/wood/images/preset_2_points.png"/><file src="./resources/wood/images/preset_2.png"/><file src="./resources/wood/images/preset_3.png"/><file src="./resources/wood/images/preset_4.png"/><file src="./resources/wood/images/preset2_eye_1.png"/><file src="./resources/wood/images/preset2_eye_2.png"/><file src="./resources/wood/images/rectangular_sys.png"/><file src="./resources/wood/images/slide_block_active.png"/><file src="./resources/wood/images/slide_block.png"/><file src="./resources/wood/images/square.png"/><file src="./resources/wood/images/stretch_active.png"/><file src="./resources/wood/images/stretch.png"/><file src="./resources/wood/images/triangle.png"/></resources></addon>