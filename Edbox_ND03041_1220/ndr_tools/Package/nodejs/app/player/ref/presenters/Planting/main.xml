<?xml version='1.0' encoding='UTF-8'?>
<addon id="templateid"><properties><property name="question_id" displayName="题目ID" type="string" isLocalized="false"/><property name="question_url" displayName="题目内容" type="jsonFile" isLocalized="false"/></properties><dependencies><jsDependency><javaScript name="common_css" version="1.0.0"/></jsDependency></dependencies><css><![CDATA[.treeplanting_no-ani .line,.treeplanting_no-ani .tree{opacity:1!important}.treeplanting_no-ani.theline02 .line{opacity:0!important}.exam_skin_wood .treeplanting_box{position:relative;overflow:hidden;width:100%;height:100%;background:#bfd3e2;text-align:center}.exam_skin_wood .treeplanting_box .treeplant_wrap{position:absolute;bottom:0;left:0;width:100%}.exam_skin_wood .treeplanting_box .tree_con_top{position:relative;height:15.5em;background:url(resources/wood/images/tree_con_top.png) 50% no-repeat;background-size:100% 100%}.exam_skin_wood .treeplanting_box .scale{position:absolute;left:50%;margin-left:-32.91667em;width:68.75em;bottom:5.66667em}.exam_skin_wood .treeplanting_box .scale .numbox{display:block;position:relative;z-index:5}.exam_skin_wood .treeplanting_box .scale .numbox .num{float:left;width:4%;height:2.16667em;background:url(resources/wood/images/scale_num.png) bottom no-repeat;background-size:100% 1.08333em;text-align:right}.exam_skin_wood .treeplanting_box .scale .numbox .num:first-child{width:1px;background-image:url(resources/wood/images/scale_num2.png);background-position:100% 100%}.exam_skin_wood .treeplanting_box .scale .numbox .num:first-child i{-webkit-transform:translateX(-.20833em);transform:translateX(-.20833em)}.exam_skin_wood .treeplanting_box .scale .numbox .num:last-child i,.exam_skin_wood .treeplanting_box .scale .numbox .num:nth-last-child(2) i,.exam_skin_wood .treeplanting_box .scale .numbox .num:nth-last-child(3) i,.exam_skin_wood .treeplanting_box .scale .numbox .num:nth-last-child(4) i,.exam_skin_wood .treeplanting_box .scale .numbox .num:nth-last-child(5) i{letter-spacing:-.08333em}.exam_skin_wood .treeplanting_box .scale .numbox .num i{-webkit-transform:translateX(50%);transform:translateX(50%);display:inline-block;margin-top:-.25em;font-size:1.5em;font-weight:700;color:#b46100}.exam_skin_wood .treeplanting_box .scale .numbox .num.numopa i{opacity:0}.exam_skin_wood .treeplanting_box .scale .progress{position:absolute;left:0;bottom:0;height:.75em;background-color:#ff8a00}.exam_skin_wood .treeplanting_box .scale .progress.font-small .contl span{font-size:1.5em}.exam_skin_wood .treeplanting_box .scale .progress.font-small.small .contl span{font-size:1em}.exam_skin_wood .treeplanting_box .scale .progress .contl{position:absolute;right:-1.79167em;bottom:-.33333em;width:3.58333em;height:4.83333em;line-height:3.5em;background:url(resources/wood/images/contl.png) bottom no-repeat;background-size:100% 100%;z-index:6;cursor:pointer}.exam_skin_wood .treeplanting_box .scale .progress .contl span{font-size:2em;font-weight:700;color:#7b4600}.exam_skin_wood .treeplanting_box .scale .progress .round{position:absolute;right:-3.04167em;bottom:3.25em;display:inline-block;width:6.125em;height:1.83333em;background:url(resources/wood/images/round.png) 50% no-repeat;background-size:100% auto;z-index:7}.exam_skin_wood .treeplanting_box .scale .progress.small .contl{right:-1.25em;width:2.5em;height:3.45833em;line-height:2.5em}.exam_skin_wood .treeplanting_box .scale .progress.small .contl span{font-size:1.33333em}.exam_skin_wood .treeplanting_box .scale .progress.small .round{bottom:2.29167em;right:-2.16667em;width:4.33333em;height:1.45833em}.exam_skin_wood .treeplanting_box .scale .progress.addswing .round{-webkit-animation:swing 1s ease-in-out 0s forwards infinite;animation:swing 1s ease-in-out 0s forwards infinite}.exam_skin_wood .treeplanting_box .tree_wrap{position:absolute;left:50%;margin-left:-32.91667em;width:68.75em;bottom:-.54167em}.exam_skin_wood .treeplanting_box .tree_wrap .treebox{position:relative;float:left;width:4%;height:3.29167em;z-index:2}.exam_skin_wood .treeplanting_box .tree_wrap .treebox:last-child{position:absolute;left:96%;top:0;width:0}.exam_skin_wood .treeplanting_box .tree_wrap .treebox.stophouse{z-index:3}.exam_skin_wood .treeplanting_box .tree_wrap .tree{display:block;margin-left:-1.20833em;width:2.41667em;height:3.29167em;background:url(resources/wood/images/tree.png) no-repeat bottom;background-size:100% auto;opacity:0}.exam_skin_wood .treeplanting_box .tree_wrap .hole{display:block;position:absolute;left:0;bottom:0;width:.66667em;height:.20833em;background:url(resources/wood/images/treebox1.png) 0 100% no-repeat;background-size:100% auto;-webkit-transform:translateX(-50%);transform:translateX(-50%);z-index:2}.exam_skin_wood .treeplanting_box .tree_wrap .line{display:block;position:absolute;left:0;bottom:0;height:.125em;width:100%;background:#ff0f42;opacity:0}.exam_skin_wood .treeplanting_box .tree_wrap .addanimation .tree{-webkit-animation:bounceIn .2s ease 0s forwards;animation:bounceIn .2s ease 0s forwards}.exam_skin_wood .treeplanting_box .tree_wrap .addanimation .line{-webkit-animation:pulse .4s ease .4s forwards;animation:pulse .4s ease .4s forwards}.exam_skin_wood .treeplanting_box .tree_wrap .addanimation.theline02 .line{background:url(resources/wood/images/line02.png) 0 100% no-repeat;background-size:100% 100%;-webkit-animation:flash 1s ease .4s forwards;animation:flash 1s ease .4s forwards}.exam_skin_wood .treeplanting_box .tree_wrap .starthouse .hole,.exam_skin_wood .treeplanting_box .tree_wrap .starthouse .line,.exam_skin_wood .treeplanting_box .tree_wrap .starthouse .tree{display:none}.exam_skin_wood .treeplanting_box .tree_wrap .starthouse:after{content:"";position:absolute;left:0;bottom:-.70833em;display:inline-block;width:4.54167em;height:5.95833em;margin-left:-2.75em;background:url(resources/wood/images/house01.png) bottom no-repeat;background-size:100% 100%;z-index:3}.exam_skin_wood .treeplanting_box .tree_wrap .stophouse .hole,.exam_skin_wood .treeplanting_box .tree_wrap .stophouse .line,.exam_skin_wood .treeplanting_box .tree_wrap .stophouse .tree{display:none}.exam_skin_wood .treeplanting_box .tree_wrap .stophouse:after{content:"";position:absolute;left:0;bottom:-.25em;display:inline-block;width:3.33333em;height:5.33333em;margin-left:-1.25em;background:url(resources/wood/images/house02.png) bottom no-repeat;background-size:100% 100%;z-index:3}.exam_skin_wood .treeplanting_box .tree_con_bot{height:25.83333em;background:url(resources/wood/images/tree_con_mid.png) 50% repeat-y;background-size:100% auto}.exam_skin_wood .treeplanting_box .tree_con_bot .btnbox{display:inline-block;padding:1.58333em 0 .625em;min-width:9.91667em;max-width:20.83333em;height:6.125em;line-height:3.71667em;text-align:center}.exam_skin_wood .treeplanting_box .tree_con_bot .btn_play{display:inline-block;overflow:hidden;width:100%;height:100%;background:url(resources/wood/images/btn_normal.png) 50% no-repeat;background-size:100% 100%;font-size:1.75em;color:#864100;text-align:center;padding:0 .5em;white-space:nowrap;text-overflow:ellipsis}.exam_skin_wood .treeplanting_box .tree_con_bot .btn_play.ui_btn_active,.exam_skin_wood .treeplanting_box .tree_con_bot .btn_play:active{background-image:url(resources/wood/images/btn_press.png)}.exam_skin_wood .treeplanting_box .tree_con_bot .btn_play.click_disabled{background-image:url(resources/wood/images/btn_disable.png);color:#7f7f7f}.exam_skin_wood .treeplanting_box .table_wrap{position:relative;margin:0 auto;padding:3.54167em .625em 1.75em 10.83333em;width:56.33333em;height:16.08333em;background-color:rgba(245,245,245,.1);border:.08333em solid #84b82f;box-shadow:0 0 16px 0 rgba(0,0,0,.15)}.exam_skin_wood .treeplanting_box .table_wrap:before{content:"";width:54.16667em;height:15em;background-color:rgba(245,245,245,.2);position:absolute;left:.41667em;top:50%;-webkit-transform:translateY(-50%);transform:translateY(-50%)}.exam_skin_wood .treeplanting_box .table_wrap:after{content:"";width:100%;height:.375em;background-color:rgba(115,171,24,.3);position:absolute;bottom:-.375em;left:0}.exam_skin_wood .treeplanting_box .table_wrap .cover{position:absolute;left:1.04167em;top:50%;margin-top:-4.375em;padding-top:6.66667em;width:11.25em;height:8.75em;line-height:48px;background:url(resources/wood/images/cover.png) top no-repeat;background-size:3.95833em auto}.exam_skin_wood .treeplanting_box .table_wrap .cover .font{display:inline-block;overflow:hidden;width:100%;height:1.2em;line-height:1.2em;font-size:2em;font-weight:700;color:#fffde3;letter-spacing:.125em;white-space:nowrap;text-shadow:-2px -2px #a2cf5a,2px 2px #a2cf5a,-2px 2px #a2cf5a,2px -2px #a2cf5a;text-overflow:ellipsis}.exam_skin_wood .treeplanting_box .table_wrap .tablebox{position:relative;margin:1.45833em 0 0 1.45833em;overflow-y:auto;padding-right:1em;height:10.41667em;overflow-x:hidden}.exam_skin_wood .treeplanting_box .table_wrap .table_ul{display:inline-block;width:100%}.exam_skin_wood .treeplanting_box .table_wrap .table_row{float:left;overflow:hidden;width:42.316667em;height:2.08333em;line-height:2.08333em}.exam_skin_wood .treeplanting_box .table_wrap .table_row span{display:inline-block;width:25%;height:100%;font-size:1.5em;font-weight:700;color:#3f6400}.exam_skin_wood .treeplanting_box .table_wrap .table_row:nth-child(odd){background-color:rgba(255,255,255,.15)}.exam_skin_wood .treeplanting_box .table_wrap .tablebox_tit{position:absolute;left:0;top:.41667em;padding-left:12.29167em;padding-right:1.625em;width:100%;height:4.625em;line-height:3.25em;z-index:2}.exam_skin_wood .treeplanting_box .table_wrap .table_tt_box{display:inline-block;width:25%;height:100%;text-align:center;position:relative}.exam_skin_wood .treeplanting_box .table_wrap .table_tt_box:nth-child(odd):before{content:"";display:block;position:absolute;width:100%;height:15em;background-color:rgba(245,245,245,.2);top:0;left:50%;-webkit-transform:translate(-50%);transform:translate(-50%)}.exam_skin_wood .treeplanting_box .table_wrap .table_tt{position:relative;display:inline-block;min-width:6.91667em;max-width:10.83333em;height:4.375em;background:url(resources/wood/images/table_tt.png) 50% no-repeat;background-size:100% 17.08333em}.exam_skin_wood .treeplanting_box .table_wrap .table_tt .font{max-width:10.83333em;width:100%;overflow:hidden;display:inline-block;font-size:1.75em;padding:0 .2em;color:#fff;white-space:nowrap;text-overflow:ellipsis}.exam_skin_wood .treeplanting_box .table_wrap .title01{background-position:center 0}.exam_skin_wood .treeplanting_box .table_wrap .title02{background-position:center -4.375em}.exam_skin_wood .treeplanting_box .table_wrap .title03{background-position:center -8.75em}.exam_skin_wood .treeplanting_box .table_wrap .title04{background-position:center -13.125em}.exam_skin_wood .treeplanting_box .treeplant_type{margin-top:.20833em;height:3.08333em;line-height:3.25em;text-align:center}.exam_skin_wood .treeplanting_box .treeplant_type .type_list{display:inline-block;height:100%}.exam_skin_wood .treeplanting_box .treeplant_type .item{display:inline-block;overflow:hidden;padding:0 2.91667em 0 2.08333em;max-width:14.16667em;height:100%;background:url(resources/wood/images/icon_radio.png) 0 no-repeat;background-size:1.66667em auto;color:#2e4a00;vertical-align:top}.exam_skin_wood .treeplanting_box .treeplant_type .item.on{background-image:url(resources/wood/images/icon_radio_on.png);color:#ffed88}.exam_skin_wood .treeplanting_box .treeplant_type .radio{display:none}.exam_skin_wood .treeplanting_box .treeplant_type .font{font-size:1.5em}.exam_skin_wood .treeplanting_box.treeplanting_box_pad .tree_con_bot{height:27.70833em}.exam_skin_wood .treeplanting_box.treeplanting_box_pad .tree_con_bot .btnbox{margin-top:.5em}@-webkit-keyframes swing{0%{-webkit-transform:scale(1)}80%{-webkit-transform:scale(1.2)}110%{-webkit-transform:scale(1)}}@keyframes swing{0%{-webkit-transform:scale(1);transform:scale(1)}80%{-webkit-transform:scale(1.2);transform:scale(1.2)}110%{-webkit-transform:scale(1);transform:scale(1)}}@-webkit-keyframes bounceIn{0%{opacity:1;-webkit-transform:translate3d(0,-20px,0)}to{opacity:1;-webkit-transform:translateZ(0)}}@keyframes bounceIn{0%{opacity:1;-webkit-transform:translate3d(0,-20px,0);transform:translate3d(0,-20px,0)}to{opacity:1;-webkit-transform:translateZ(0);transform:translateZ(0)}}@-webkit-keyframes pulse{0%{opacity:0}to{opacity:1}}@keyframes pulse{0%{opacity:0}to{opacity:1}}@-webkit-keyframes flash{0%,33%,66%,to{opacity:0}16%,49%,82%{opacity:1}}@keyframes flash{0%,33%,66%,to{opacity:0}16%,49%,82%{opacity:1}}.exam_skin_wood .scrollbar_style_white::-webkit-scrollbar{width:.5em;height:.5em;background:rgba(255,255,255,.15);border-radius:.25em}.exam_skin_wood .scrollbar_style_white::-webkit-scrollbar-thumb{background:rgba(255,252,209,.7);border-radius:.25em}.typefaces_long .exam_skin_wood .treeplanting_box .table_wrap .cover{left:.5em;height:auto}.typefaces_long .exam_skin_wood .treeplanting_box .table_wrap .cover .font{display:-webkit-box;-webkit-line-clamp:2;-webkit-box-orient:vertical;overflow:hidden;height:auto;white-space:normal;font-size:1.04167em}.typefaces_long .exam_skin_wood .treeplanting_box .table_wrap .table_tt{line-height:.83333em}.typefaces_long .exam_skin_wood .treeplanting_box .table_wrap .table_tt:after{content:"";display:inline-block;width:0;height:100%;vertical-align:middle}.typefaces_long .exam_skin_wood .treeplanting_box .table_wrap .table_tt .font{display:inline-block;margin-top:-1em;padding:0 2em;overflow:hidden;max-height:2em;font-size:.83333em;vertical-align:middle;white-space:normal}.typefaces_long .exam_skin_wood .treeplanting_box .treeplant_type .type_list{display:-webkit-box;display:-ms-flexbox;display:flex;height:2.5em;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center}.typefaces_long .exam_skin_wood .treeplanting_box .treeplant_type .item{display:-webkit-box;display:-ms-flexbox;display:flex;margin-top:.625em;padding-right:1.25em;line-height:1.25em;-webkit-box-flex:1;-ms-flex:1;flex:1;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:left}.typefaces_long .exam_skin_wood .treeplanting_box .treeplant_type .font{max-height:100%;font-size:1.16667em;-webkit-box-flex:1;-ms-flex:1;flex:1}.typefaces_ru_RU .exam_skin_wood .treeplanting_box .table_wrap .cover{left:.5em;height:auto}.typefaces_ru_RU .exam_skin_wood .treeplanting_box .table_wrap .cover .font{display:-webkit-box;-webkit-line-clamp:2;-webkit-box-orient:vertical;overflow:hidden;height:auto;white-space:normal;font-size:1.04167em}.typefaces_ru_RU .exam_skin_wood .treeplanting_box .table_wrap .table_tt{line-height:.83333em}.typefaces_ru_RU .exam_skin_wood .treeplanting_box .table_wrap .table_tt:after{content:"";display:inline-block;width:0;height:100%;vertical-align:middle}.typefaces_ru_RU .exam_skin_wood .treeplanting_box .table_wrap .table_tt .font{display:inline-block;margin-top:-1em;padding:0 2em;overflow:hidden;max-height:2em;font-size:.83333em;vertical-align:middle;white-space:normal}.typefaces_ru_RU .exam_skin_wood .treeplanting_box .treeplant_type .type_list{display:-webkit-box;display:-ms-flexbox;display:flex;height:2.5em;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center}.typefaces_ru_RU .exam_skin_wood .treeplanting_box .treeplant_type .item{display:-webkit-box;display:-ms-flexbox;display:flex;margin-top:.625em;padding-right:1.25em;line-height:1.25em;-webkit-box-flex:1;-ms-flex:1;flex:1;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:left}.typefaces_ru_RU .exam_skin_wood .treeplanting_box .treeplant_type .font{max-height:100%;font-size:1.16667em;-webkit-box-flex:1;-ms-flex:1;flex:1}]]></css><view/><presenter><![CDATA["use strict";

function AddonPlanting_create() {
    /**
     * version:2015.12.7 17:10
     */
    /**
     * 模式
     */
    var MODE = {
        BOTH_SIDE: 2, // 两端栽
        ONE_SIDE: 1, // 只栽一端
        NO_SIDE: 0 // 两端不栽
    };

    var CURSOR_TYPE = {
        DISTANCE: 0,
        INTERVAL: 1
    };

    var helper = {
        $view: undefined,
        interval: undefined,
        distance: undefined,
        isPlanting: false,
        i18n: {}
    };
    var presenter = function presenter() {};

    var service = {};

    service.setLocationProperties = function (properties) {
        helper.i18n = properties;
    };

    service.getQuestionInfo = function () {
        return {
            id: viewModel.question_id,
            type_code: "Planting",
            type_name: helper.i18n['planting_planting'],
            url: "",
            item: "Planting",
            statistics_type: 'no_need',
            dispatchOnly: true,
            notExistStatistics: true,
            noNeedQuizProgress: true
        };
    };

    service.getExtendData = function () {
        var hasTree = false;
        if (!helper.isPlanting && treesModel.haveTrees()) {
            hasTree = true;
        }
        return {
            mode: mode,
            interval: helper.interval,
            distance: helper.distance,
            isPlanting: helper.isPlanting,
            hasTree: hasTree,
            tableHtml: resultView.$resultBody[0].innerHTML
        };
    };

    presenter.metaInfo = {
        name: "Planting",
        type: PresenterType.PRESENTER_COMPONENT
    };

    presenter.getService = function () {
        return service;
    };

    presenter.setBasePath = function (path) {
        //console.log('setBasePath, path = ' + path);
        presenter.basePath = path;
    };

    /**
     * 获取Module当前的运行环境, 通过icPlayer提供的接口
     * 已定义的环境枚举包括
     * icCreatePlayer.RUNTIME.TEACHER_MOBILE(教师端)
     * icCreatePlayer.RUNTIME.STUDENT_MOBILE(学生端)
     * icCreatePlayer.RUNTIME.PROJECTION_MOBILE(投影端)
     * icCreatePlayer.RUNTIME.WEB(WEB端 )
     * icCreatePlayer.RUNTIME.TEACHER_PC(PC端)
     * 判断例子
     * if(currentRuntime === icCreatePlayer.RUNTIME.TEACHER_MOBILE)
     */
    var currentRuntime = player.getPlayerServices().getRuntime();
    var viewModel;

    var mode; // 当前模式，在加载页面时初始化

    var resultCal;
    var resultData = []; // 结果数据
    var $plantingBtn;

    var envir = function envir() {};

    envir.isApp;
    envir.isTeacherApp;
    envir.isStudent;
    envir.isProjection;
    envir.isWeb;
    envir.isTeacherPc;

    switch (currentRuntime) {
        case icCreatePlayer.RUNTIME.TEACHER_MOBILE:
            // 教师端
            envir.isApp = true;
            envir.isTeacherApp = true;
            break;
        case icCreatePlayer.RUNTIME.STUDENT_MOBILE:
            // 学生段
            envir.isApp = true;
            envir.isStudent = true;
            break;
        case icCreatePlayer.RUNTIME.PROJECTION_MOBILE:
            // 投影端
            envir.isApp = true;
            envir.isProjection = true;
            break;
        case icCreatePlayer.RUNTIME.WEB:
            // web端
            envir.isWeb = true;
            break;
        case icCreatePlayer.RUNTIME.TEACHER_PC:
            // PC端
            envir.isApp = true;
            envir.isTeacherPc = true;
            break;
    }
    ;

    /**
     * Module的逻辑
     * @param view 视图对象, 根据是否为预览状态传入不同的视图对象
     * @param model 模型对象
     * @param isPreview 是否为编辑环境, true=编辑环境, false=运行环境
     */
    var presenterLogic = function presenterLogic(view, model, isPreview) {
        viewModel = model;
        //工具窗口是否有推送数据
        var extendData = viewModel['__ExtendModel'];
        if (!$.isEmptyObject(extendData)) {
            viewModel.question_url.content.plantingMode = extendData.mode;
            viewModel.question_url.content.interval = extendData.interval;
            viewModel.question_url.content.distance = extendData.distance;
        }
        var interval;
        var distance;

        //envir.isPreview = ClassroomUtils.isPreview();

        if (viewModel.question_url && viewModel.question_url.content) {
            mode = viewModel.question_url.content.plantingMode;
            helper.interval = interval = viewModel.question_url.content.interval;
            helper.distance = distance = viewModel.question_url.content.distance;
        }

        // test;
        /**
         interval = 16;
         distance = 80;
         mode = MODE.NO_SIDE;
         envir.isTeacherApp = true;
         */
        var $view = helper.$view = $(view);

        resultCal = new ResultCal(mode);

        // 1、渲染视图
        var html = '<div class="exam_skin_wood">';
        html += '    <div class="treeplanting_box ">';
        html += '        <div class="treeplant_wrap">';
        html += '            <div class="tree_con_top">';
        html += '                <div class="scale">';
        html += cursor.createHtml();
        html += '                </div>';
        html += treesModel.createHtml();
        html += '            </div>';
        html += '            <div class="tree_con_bot">';
        html += plantingBtn.createHtml();
        html += resultView.createHtml();
        html += plantingMode.createHtml();
        html += '            </div>';
        html += '        </div>';
        html += '    </div>';
        html += '</div>';
        $view.html(html);

        cursor.render($view);
        treesModel.render($view);
        plantingBtn.render($view);
        resultView.render($view);
        plantingMode.render($view);

        //工具窗表格有数据时，要渲染出来
        if (!$.isEmptyObject(extendData)) {
            resultView.$resultBody.html(extendData.tableHtml);
        }

        cursor.setPosition(cursor.$cursor, Math.round(distance / 0.8));
        cursor.setPosition(cursor.$cursorSmall, Math.round(interval / 0.8));

        treesModel.addTrees();

        cursor.callbackCursorSmallChange = function (value) {
            treesModel.clearAllTrees();
            treesModel.addTrees();
        };

        // 2、根据不同环境，初始化
        // 教师端注册监听
        cursor.callbackMove = function ($view, value) {
            var cursorSmallValue = cursor.getValue(cursor.$cursorSmall);
            cursor.callbackCursorSmallChange(cursorSmallValue);

            if (envir.isTeacherApp || envir.isTeacherPc) {
                var type;
                if ($view == cursor.$cursor) {
                    type = CURSOR_TYPE.DISTANCE;
                } else if ($view == cursor.$cursorSmall) {
                    type = CURSOR_TYPE.INTERVAL;
                }
                // 通知投影端
                userInput('cursor_move', '{"value":' + value + ', "type":' + type + ', "smallValue":' + cursorSmallValue + '}');
            }
        };

        if (envir.isTeacherApp || envir.isTeacherPc) {
            plantingBtn.callbackClick = function (distance, interval, spacingLength) {
                // 通知投影端
                userInput('planting', '{"distance":' + distance + ', "interval":' + interval + ', "spacingLength":' + spacingLength + '}');
            };

            resultView.callbackScrollTo = function (top) {
                // 通知投影端
                userInput('scroll_to', '{"top":' + top + '}');
            };
        }

        // 投影端
        if (envir.isProjection) {
            triggerEvents['cursor_move'] = function (data) {
                // 设置鼠标
                var obj = eval("(" + data + ")");
                var $view;
                if (obj.type == CURSOR_TYPE.DISTANCE) {
                    $view = cursor.$cursor;
                    treesModel.clearTrees(obj.value);
                } else if (obj.type = CURSOR_TYPE.INTERVAL) {
                    $view = cursor.$cursorSmall;
                }
                cursor.setPosition($view, obj.value);

                cursor.callbackCursorSmallChange(data.smallValue);
            };
            triggerEvents['planting'] = function (data) {
                // 播动画
                // 动画播完统计结果
                var obj = eval("(" + data + ")");
                if (!treesModel.hasTrees()) {
                    treesModel.clearAllTrees();
                    treesModel.addTrees();
                } else {
                    treesModel.clearAnimation();
                }
                plantingBtn.plantingClick(obj.distance, obj.interval, obj.spacingLength);
            };

            triggerEvents['scroll_to'] = function (data) {
                var obj = eval("(" + data + ")");
                resultView.scrollTo(obj.top);
            };

            registerNativeListener('TriggerUserInput', triggerUserInput);
        }

        //是否在动画过程中推送
        if (!$.isEmptyObject(extendData)) {
            if (extendData.isPlanting) {
                plantingBtn.$btn.trigger('click');
            }
        }
        //是否显示树
        if (!$.isEmptyObject(extendData)) {
            if (extendData.hasTree) {
                var $trees = treesModel.$treeContain.find('.treebox');
                $trees.addClass('treeplanting_no-ani');
                if (extendData.mode === MODE.BOTH_SIDE || extendData.mode === MODE.ONE_SIDE) {
                    $($trees[$trees.length - 1]).addClass('theline02');
                }
            }
        }
    };

    var treesModel = {
        $treeContain: '',
        "createHtml": function createHtml() {
            var html = '';
            html += '<div class="tree_wrap _tree_wrap">';
            html += '</div>';
            return html;
        },
        "render": function render($view) {
            treesModel.$treeContain = $view.find('._tree_wrap');
        },

        "doPlanting": function doPlanting(callbackActionEnd, animationTime) {
            var $treeContain = treesModel.$treeContain;
            var $trees = $treeContain.find('.treebox');
            var treeNum = $trees.length;
            animationTime = animationTime === undefined ? 1000 : animationTime;

            var startIndex = 0;
            if (mode != MODE.BOTH_SIDE) {
                startIndex = 1;
            }
            timeAction(startIndex);

            function timeAction(index) {
                if (index + 1 <= treeNum) {
                    setTimeout(function () {
                        // 1024*768分辨率下特定情况有时种树前画面乱，所以该样式让其重新渲染下
                        var opacity = parseFloat($trees.eq(index).css('opacity')) === 1 ? 0.99 : 1;
                        $trees.eq(index).css('opacity', opacity);
                        showTree($trees[index], index, treeNum, timeAction);
                    }, animationTime);
                } else {
                    if (typeof callbackActionEnd === 'function') {
                        callbackActionEnd();
                    }
                }
            }

            function showTree(treeObj, index, total, nextFunc) {
                var $view = $(treeObj);
                if (index == 0) {
                    if (mode == MODE.BOTH_SIDE) {
                        $view.addClass('addanimation');
                    }
                } else if (index + 1 == total) {
                    if (mode == MODE.BOTH_SIDE) {
                        $view.addClass('addanimation');
                        $view.addClass('theline02');
                    } else if (mode == MODE.NO_SIDE) {} else {
                        $view.addClass('addanimation');
                        $view.addClass('theline02');
                    }
                } else {
                    $view.addClass('addanimation');
                }
                nextFunc(++index);
            }
        },
        "clearAnimation": function clearAnimation() {
            var $trees = treesModel.$treeContain.find('.treebox');
            var total = $trees.length;
            $trees.each(function (index) {
                var $view = $(this);
                $view.removeClass('addanimation');
                $view.removeClass('theline02');
                /**
                 if(index == 0){
                if(mode != MODE.BOTH_SIDE){
                } else {
                $view.removeClass('addanimation');
                }
                } else if ((index + 1) == total){
                if(mode == MODE.BOTH_SIDE){
                $view.removeClass('theline02');
                } else if(mode == MODE.NO_SIDE){
                } else {
                $view.removeClass('addanimation');
                }
                } else {
                $view.removeClass('addanimation');
                }
                 */
            });
        },
        "addTrees": function addTrees() {
            var cursorLong = cursor.getCursorLong();
            var cursorUnit = cursor.getCursorUnit();
            var total = parseInt(cursorLong / cursorUnit) + 1;

            if (mode == MODE.NO_SIDE) {
                if (cursorLong % cursorUnit > 0) {
                    total++;
                }
            }

            var html = '';
            var cursorUnit = cursor.getCursorUnit();
            var width = cursorUnit * 0.8;
            var left = 0;

            for (var i = 0; i < total; i++) {
                if (i == 0) {
                    if (mode != MODE.BOTH_SIDE) {
                        html += '<p class="treebox starthouse" style="width:' + width + '%"><i class="tree"></i><i class="hole"></i><i class="line"></i></p>';
                    } else {
                        html += '<p class="treebox" style="width:' + width + '%"><i class="tree"></i><i class="hole"></i><i class="line"></i></p>';
                    }
                } else if (i + 1 == total) {
                    //console.log('aaa -- i = ' + i);
                    if (mode == MODE.NO_SIDE) {
                        left = cursorLong * 0.8;
                        html += '<p class="treebox stophouse" style="left:' + left + '%;width:' + width + '%"><i class="tree"></i><i class="hole"></i><i class="line"></i></p>';
                        //html += '<p class="treebox stophouse" style="width:' + width + '%"><i class="tree"></i><i class="hole"></i><i class="line"></i></p>';
                    } else {
                        left = (total - 1) * cursorUnit * 0.8;
                        html += '<p class="treebox" style="left:' + left + '%;width:' + width + '%"><i class="tree"></i><i class="hole"></i><i class="line"></i></p>';
                        //html += '<p class="treebox" style="width:' + width + '%"><i class="tree"></i><i class="hole"></i><i class="line"></i></p>';
                    }
                } else if (i + 2 == total) {
                    if (width * (i + 1) > 100) {
                        width = 100 - width * i;
                    }
                    html += '<p class="treebox" style="width:' + width + '%"><i class="tree"></i><i class="hole"></i><i class="line"></i></p>';
                } else {
                    //console.log('bbb i = ' + i);
                    html += '<p class="treebox" style="width:' + width + '%"><i class="tree"></i><i class="hole"></i><i class="line"></i></p>';
                }
            }

            treesModel.$treeContain.html(html);
            //console.log('html = ' + html);
        },

        "hasTrees": function hasTrees() {
            var $trees = treesModel.$treeContain.find('.treebox');
            if ($trees.length <= 0) {
                return false;
            }
            return true;
        },
        "haveTrees": function haveTrees() {
            var $trees = treesModel.$treeContain.find('.addanimation');
            if ($trees.length <= 0) {
                return false;
            }
            return true;
        },

        "clearAllTrees": function clearAllTrees() {
            treesModel.$treeContain.html('');
        },
        "clearTrees": function clearTrees(value) {
            var cursorUnit = cursor.getCursorUnit();
            var total = parseInt(value / cursorUnit) + 1;

            var $trees = treesModel.$treeContain.find('.treebox');
            var length = $trees.length;
            if (length >= total) {
                for (var i = total; i < length; i++) {
                    var $tree = $($trees[i]);
                    $tree.removeClass('addanimation');
                    $tree.removeClass('theline02');
                    $tree.find('.hole').remove();
                }
            }
        }
    };

    /*
     * 刻度标
     */
    var cursor = {
        "$cursor": '', // 刻度尺对象
        "$cursorSmall": '',
        "unit": 0, // 一个刻度长度
        "cursorUnitScale": 0.8, // 一个刻度单位长度，百分比
        "cursorLong": 0,
        "locked": false,

        /**
         * 移动刻度标回调
         * @param value
         */
        "callbackMove": function callbackMove($view, left) {},
        "callbackCursorSmallChange": function callbackCursorSmallChange(value) {},
        createHtml: function createHtml() {
            var html = '';
            html += '<div id="cursor" class="progress addswing" style="width:0%;">';
            html += '   <p class="contl">';
            html += '       <span>0</span>';
            html += '   </p>';
            html += '   <i class="round"></i>';
            html += '</div>';

            html += '<div id="cursorSmall" class="small progress addswing" style="width:0%;">';
            html += '   <p class="contl">';
            html += '       <span>0</span>';
            html += '   </p>';
            html += '   <i class="round"></i>';
            html += '</div>';

            html += '<div class="numbox">';
            for (var i = 0; i < 25; i++) {
                html += '<span class="num"><i>' + i * 5 + '</i></span>';
            }

            html += '</div>';
            return html;
        },
        render: function render($view, terminalType) {
            var $cursor = cursor.$cursor = $view.find('#cursor');
            var $cursorSmall = cursor.$cursorSmall = $view.find("#cursorSmall");
            var $numbox = $view.find('.numbox');
            var numWidth = cursor.cursorLong = parseInt($numbox.css('width'));
            cursor.unit = numWidth / 120;

            var $eventView = $view.find('.tree_con_top');

            // 投影端不触发按钮点击事件
            if (!envir.isProjection) {
                if (envir.isTeacherPc || envir.isWeb && !envir.isPreview) {
                    //console.log('cursor, handleMouseAction execute...');

                } else {
                        //console.log('cursor, handleTouchAction execute...');

                    }
                handleMouseAction($cursor);
                handleMouseAction($cursorSmall);
                handleTouchAction($cursor);
                handleTouchAction($cursorSmall);
            }

            // 不同终端，兼容事件
            function handleTouchAction($view) {
                $view.on('touchstart', function (event) {
                    //console.log('touchstart..');
                    if (cursor.locked) {
                        //console.log('cursor locked...');
                        return;
                    }
                    var touch = event.originalEvent.targetTouches[0];
                    var startX = touch.pageX;
                    if ($view == cursor.$cursor) {
                        cursor.cursorWidth = cursor.getWidth($view);
                    } else {
                        cursor.cursorSmallWidth = cursor.getWidth($view);
                    }

                    $view.on('touchmove', function (event) {
                        //console.log('touchmove..');
                        var touch = event.originalEvent.targetTouches[0];
                        var pageX = touch.pageX;
                        startX += dragEvent($view, startX, pageX, cursor.unit);
                    });

                    $view.on('touchend touchcancel', function () {
                        //console.log('touchend..');
                        $view.off('touchmove');
                        $view.off('touchend');

                        if (typeof cursor.callbackMove === 'function') {
                            var value = cursor.getValue($view);
                            cursor.callbackMove($view, value);
                        }
                    });
                });
            };

            function handleMouseAction($view) {
                $view.on('mousedown', function (event) {
                    if (cursor.locked) {
                        console.log('cursor locked...');
                        return;
                    }
                    var startX = event.pageX;
                    if ($view == cursor.$cursor) {
                        cursor.cursorWidth = cursor.getWidth($view);
                    } else {
                        cursor.cursorSmallWidth = cursor.getWidth($view);
                    }

                    $eventView.on('mousemove', function (event) {
                        event.stopPropagation();
                        var pageX = event.pageX;

                        startX += dragEvent($view, startX, pageX, cursor.unit);
                    });

                    $eventView.on('mouseup', function (event) {

                        $eventView.off('mousemove');
                        $eventView.off('mouseup');
                        helper.$view.off('mouseleave');

                        if (typeof cursor.callbackMove === 'function') {
                            var value = cursor.getValue($view);
                            cursor.callbackMove($view, value);
                        }
                    });

                    helper.$view.on('mouseleave', function (event) {
                        $eventView.trigger("mouseup");
                    });
                });
            };

            var dragEvent = function dragEvent($view, startX, pageX, unit) {
                var offsetX = 0;

                if (Math.abs(pageX - startX) > unit) {
                    var width = 0;
                    if ($view == cursor.$cursor) {
                        width = cursor.cursorWidth;
                    } else {
                        width = cursor.cursorSmallWidth;
                    }

                    if (pageX - startX > 0) {
                        var widthScale = width / cursor.cursorLong * 100;
                        var value = parseInt(Math.round((widthScale + cursor.cursorUnitScale) / cursor.cursorUnitScale));
                        var maxValue = 120;
                        if ($view == cursor.$cursorSmall) {
                            maxValue = cursor.cursorValue;
                        }

                        if (value > maxValue) {
                            return offsetX;
                        }

                        offsetX = unit;
                    } else {
                        if ($view == cursor.$cursor && cursor.cursorValue <= 3) {
                            return offsetX;
                        }
                        if ($view == cursor.$cursorSmall && cursor.cursorSmallValue <= 3) {
                            return offsetX;
                        }

                        var widthScale = width / cursor.cursorLong * 100;
                        var value = parseInt(Math.round((widthScale - cursor.cursorUnitScale) / cursor.cursorUnitScale));

                        if ($view == cursor.$cursor) {
                            var minValue = cursor.cursorSmallValue;
                            if (value < minValue) {
                                return offsetX;
                            }
                        }

                        offsetX = -unit;
                    }

                    cursor.setPosition($view, value);

                    if ($view == cursor.$cursor) {
                        treesModel.clearTrees(value);
                    }

                    /**
                     if(typeof(cursor.callbackMove) === 'function'){
                    cursor.callbackMove($view, value);
                    }
                     */
                }
                return offsetX;
            };

            function getCenterX() {
                return $cursor.position().left + $cursor.width() / 2;
            };
        },
        "cursorWidth": 0,
        "cursorSmallWidth": 0,
        "cursorValue": 0,
        "cursorSmallValue": 0,
        setPosition: function setPosition($view, value) {
            $view.find("span").text(value);
            value > 99 ? $view.addClass('font-small') : $view.removeClass('font-small');

            var width = value * cursor.cursorUnitScale;
            $view.width(width + '%');

            if ($view == cursor.$cursor) {
                cursor.cursorWidth = width * cursor.cursorLong / 100;
                cursor.cursorValue = value;
                helper.distance = value * 0.8;
            } else {
                cursor.cursorSmallWidth = width * cursor.cursorLong / 100;
                cursor.cursorSmallValue = value;
                helper.interval = value * 0.8;
            }
        },
        "getWidth": function getWidth($view) {
            if ($view == cursor.$cursor) {
                return cursor.cursorWidth;
            } else {
                return cursor.cursorSmallWidth;
            }
            //return $view.width();
        },
        "getValue": function getValue($view) {
            if ($view == cursor.$cursor) {
                return cursor.cursorValue;
            } else {
                return cursor.cursorSmallValue;
            }
        },
        "getCursorLong": function getCursorLong() {
            //return parseInt(cursor.$cursor.text());
            return cursor.cursorValue;
        },
        "getCursorUnit": function getCursorUnit() {
            return cursor.cursorSmallValue;
            //return parseInt(cursor.$cursorSmall.text());
        }
    };

    var plantingBtn = {
        "$btn": '',
        "callbackClick": function callbackClick(distance, interval) {},
        "createHtml": function createHtml() {
            var html = '<p class="btnbox"><a href="###" class="btn_play_enable btn_play">' + helper.i18n['planting_planting'] + '</a></p>';
            return html;
        },

        "render": function render($view) {
            // 投影端不触发按钮点击事件
            plantingBtn.$btn = $view.find('.btn_play');
            if (!envir.isProjection) {
                plantingBtn.$btn.on('click', plantingBtn.doPlantingBtnClick);
            }
        },
        "doPlantingBtnClick": function doPlantingBtnClick() {
            plantingBtn.$btn.off('click');
            //植树过程，模式不能切换
            plantingMode.$mode.off('click');
            plantingBtn.$btn.removeClass('btn_play_enable').addClass('click_disabled');
            helper.isPlanting = true;

            cursor.locked = true;

            if (!treesModel.hasTrees()) {
                treesModel.clearAllTrees();
                treesModel.addTrees();
            } else {
                treesModel.clearAnimation();
            }

            var spacingLength = cursor.getValue(cursor.$cursorSmall);
            var distance = cursor.getCursorLong();
            var interval = cursor.getCursorUnit();

            plantingBtn.plantingClick(distance, interval, spacingLength);

            if (typeof plantingBtn.callbackClick === 'function') {
                plantingBtn.callbackClick(distance, interval, spacingLength);
            }
        },
        "plantingClick": function plantingClick(distance, interval, spacingLength) {
            treesModel.$treeContain.find('.treebox').removeClass('treeplanting_no-ani');
            treesModel.doPlanting(function () {
                // 计算结果
                //console.log('action end');
                var spacingNum = resultCal.getSpacingNum(distance, interval);
                var treeNum = resultCal.getTreeNum(distance, interval);
                var data = {
                    'roadLength': distance,
                    'spacingLength': spacingLength,
                    'spacingNum': spacingNum,
                    'treeNum': treeNum
                };
                resultData.push(data);
                resultView.appendResult(data);

                if (!envir.isProjection) {
                    plantingBtn.$btn.on('click', plantingBtn.doPlantingBtnClick);
                    //植树完成，模式可以切换
                    plantingMode.$mode.on('click', plantingMode.doChangePlantingMode);
                    plantingBtn.$btn.removeClass('click_disabled').addClass('btn_play_enable');
                    helper.isPlanting = false;
                }
                cursor.locked = false;
            });
        }
    };

    var plantingMode = {
        createHtml: function createHtml() {
            var html = '';
            html += '<div class="treeplant_type">';
            html += '    <ul class="type_list _type_list">';
            html += '        <li class="item" data-mode="2">';
            html += '            <input class="radio" type="radio" />';
            html += '            <span class="font">' + helper.i18n['planting_both_ends_included'] + '</span>';
            html += '        </li>';
            html += '        <li class="item" data-mode="0">';
            html += '            <input class="radio" type="radio" />';
            html += '            <span class="font">' + helper.i18n['planting_both_ends_excluded'] + '</span>';
            html += '        </li>';
            html += '        <li class="item" data-mode="1">';
            html += '            <input class="radio" type="radio" />';
            html += '            <span class="font">' + helper.i18n['planting_one_end_included'] + '</span>';
            html += '        </li>';
            html += '    </ul>';
            html += '</div>';
            return html;
        },
        render: function render($view) {
            var self = this;
            self.$mode = $view.find('._type_list li');
            $view.find('._type_list li[data-mode=' + mode + ']').addClass('on');
            self.$mode.on('click', plantingMode.doChangePlantingMode);
        },
        doChangePlantingMode: function doChangePlantingMode() {
            if (mode == $(this).data('mode')) {
                return;
            }
            //切换模式清空表格
            helper.$view.find('._table_ul').html('');

            plantingMode.$mode.removeClass('on');
            $(this).addClass('on');
            mode = $(this).data('mode');
            resultCal = new ResultCal(mode);
            treesModel.clearAllTrees();
            treesModel.addTrees();
            switch (mode) {
                case MODE.BOTH_SIDE:
                    treesModel.$treeContain.children(':first').removeClass('starthouse');
                    treesModel.$treeContain.children(':last').removeClass('stophouse');
                    break;
                case MODE.NO_SIDE:
                    treesModel.$treeContain.children(':first').addClass('starthouse');
                    treesModel.$treeContain.children(':last').addClass('stophouse');
                    break;
                case MODE.ONE_SIDE:
                    treesModel.$treeContain.children(':first').addClass('starthouse');
                    treesModel.$treeContain.children(':last').removeClass('stophouse');
                    break;
                default:
                    break;
            }
        }
    };

    /**
     * 结果视图
     */
    var resultView = {
        "$resultBody": '',
        "callbackScrollTo": function callbackScrollTo(top) {},
        "createHtml": function createHtml() {
            var html = '<div class="table_wrap">';
            html += '   <div class="cover"><span class="font">' + helper.i18n['planting_record'] + '</span></div>';
            html += '   <div class="tablebox_tit">';
            html += '       <div class="table_tt_box"><i class="table_tt title01"><span class="font">' + helper.i18n['planting_length'] + '</span></i></div>';
            html += '<!----><div class="table_tt_box"><i class="table_tt title02"><span class="font">' + helper.i18n['planting_gap_length'] + '</span></i></div>';
            html += '<!----><div class="table_tt_box"><i class="table_tt title03"><span class="font">' + helper.i18n['planting_intervals'] + '</span></i></div>';
            html += '<!----><div class="table_tt_box"><i class="table_tt title04"><span class="font">' + helper.i18n['planting_rrees'] + '</span></i></div>';
            html += '   </div>';
            html += '   <div class="tablebox scrollbar_style_white">';
            html += '       <ul class="table_ul _table_ul">';
            html += '       </ul>';
            html += '   </div>';
            html += '</div>';
            return html;
        },
        "render": function render($view) {
            resultView.$resultBody = $view.find('._table_ul');
            resultView.$resultBody.on('scroll', function (event) {
                var top = $(event.currentTarget).scrollTop();
                resultView.callbackScrollTo(top);
            });
        },
        "appendResult": function appendResult(data) {
            var html = '<li class="table_row">';
            html += '       <span>' + data.roadLength + '</span>';
            html += '<!----><span>' + data.spacingLength + '</span>';
            html += '<!----><span>' + data.spacingNum + '</span>';
            html += '<!----><span>' + data.treeNum + '</span>';
            html += '</li>';
            resultView.$resultBody.prepend(html);
        },
        "scrollTo": function scrollTo(top) {
            resultView.$resultBody.scrollTop(top);
        }

    };

    /**
     *  结果计算方法
     * @param mode 模式
     * @param cursorLong 当前路长
     * @param unit 最小单位
     */
    function ResultCal(mode) {

        var bothSideCal = {
            "getTreeNum": function getTreeNum(cursorLong, unit) {
                if (cursorLong <= 0 || unit <= 0) {
                    return 0;
                }
                return parseInt(cursorLong / unit) + 1;
            },
            "getSpacingNum": function getSpacingNum(cursorLong, unit) {
                if (cursorLong <= 0 || unit <= 0) {
                    return 0;
                }
                return parseInt(cursorLong / unit);
            }
        };

        var oneSideCal = {
            "getTreeNum": function getTreeNum(cursorLong, unit) {
                if (cursorLong <= 0 || unit <= 0) {
                    return 0;
                }
                var result = parseInt(cursorLong / unit);
                if (result < 0) {
                    result = 0;
                }
                return result;
            },
            "getSpacingNum": function getSpacingNum(cursorLong, unit) {
                if (cursorLong <= 0 || unit <= 0) {
                    return 0;
                }
                var result = parseInt(cursorLong / unit);
                if (result < 0) {
                    result = 0;
                }
                return result;
            }
        };

        var noSideCal = {
            "getTreeNum": function getTreeNum(cursorLong, unit) {
                if (cursorLong <= 0 || unit <= 0) {
                    return 0;
                }

                var result = parseInt(cursorLong / unit);

                if (cursorLong % unit == 0) {
                    result--;
                }
                if (result < 0) {
                    result = 0;
                }
                return result;
            },
            "getSpacingNum": function getSpacingNum(cursorLong, unit) {
                if (cursorLong <= 0 || unit <= 0) {
                    return 0;
                }
                var result = parseInt(cursorLong / unit);
                if (result < 0) {
                    result = 0;
                }
                return result;
            }
        };

        switch (mode) {
            case MODE.BOTH_SIDE:
                return bothSideCal;
                break;
            case MODE.ONE_SIDE:
                return oneSideCal;
                break;
            case MODE.NO_SIDE:
                return noSideCal;
                break;
        }
        ;
    };

    /**
     * 编辑环境下, 创建/刷新预览视图的方法;
     * Module在编辑环境下,model改变; 位置改变; DOM结构改变时都会促发该方法
     * @param view 预览视图(DOM对象)
     * @param model Module的模型, Key-Value结构
     */
    presenter.createPreview = function (view, model) {
        //Todo: 在此处一般进行model的数据有效性验证
        presenterLogic(view, model, true);
    };

    /**
     * 运行环境下, 初始化Module的方法
     * @param view 运行视图(DOM对象)
     * @param model Module的模型, Key-Value结构
     * @remark 该方法为Module生命周期方法,仅在Module初始化时执行一次
     */
    presenter.run = function (view, model) {
        presenterLogic(view, model, false);
    };

    /**
     * 运行环境下, 销毁Module时执行的方法
     * @remark 该方法为Module生命周期方法, 仅在ICPlayer切换页面时执行
     */
    presenter.destroy = function () {
        //ToDo:释放Module占用的内存对象

        cursor.$cursor.off('touchstart');
        cursor.$cursor.off('mousedown');
        cursor.$cursorSmall.off('touchstart');
        cursor.$cursorSmall.off('mousedown');
    };

    /**
     * 获得当前Module的状态信息;
     * 可用于Module的状态恢复和保存
     */
    presenter.getState = function () {
        //TODO: 添加符合Module需求的状态对象
        var moduleState = JSON.stringify({
            module_id: ''
        });
        return moduleState;
    };

    /**
     * 设置Module当前状态
     * @param state Module状态对象
     */
    presenter.setState = function (state) {
        var currentState;
        if (state) {
            currentState = JSON.parse(state);
            //ToDo:处理Module的状态恢复
        }
    };

    /**
     * 投影端更新指令
     */
    var triggerUserInput = function triggerUserInput(eventData) {
        var value = eventData.value;
        var type = eventData.type;
        var item = eventData.item;
        if (eventData.source === viewModel.ID) {
            //console.log("triggerUserInput, type = " + type + ", eventData = " + JSON.stringify(eventData));
            triggerEvents[type](value);
        }
    };

    var triggerEvents = {
        /**
         * 移动刻度标
         */
        "cursor_move": function cursor_move(eventData) {},
        /**
         * 植树
         */
        "planting": function planting(eventData) {},
        /**
         * 滚动
         */
        "scroll_to": function scroll_to(eventData) {}
    };

    //发送投影端事件
    var userInput = function userInput(type, value, item) {
        //console.log('type = ' + type + ', value = ' + value);
        callNative("sendEvent", {
            "eventName": "UserInput",
            "eventData": {
                "source": viewModel.ID,
                "item": item,
                "value": value,
                "type": type
            }
        });
    };

    //调用本地方法
    var callNative = function callNative(eventName, data) {
        if (envir.isApp && Bridge && Bridge.callNative) {
            return Bridge.callNative('com.nd.pad.icr.ui.IcrJsBridge', eventName, data);
        }
        return false;
    };

    function registerNativeListener(key, callback) {
        if (envir.isApp && Bridge && Bridge.registerListener) {
            Bridge.registerListener(key, callback);
        }
    }

    return presenter;
}]]></presenter><resources><file src="./resources/wood/images/btn_disable.png"/><file src="./resources/wood/images/btn_normal.png"/><file src="./resources/wood/images/btn_press.png"/><file src="./resources/wood/images/contl.png"/><file src="./resources/wood/images/cover.png"/><file src="./resources/wood/images/house01.png"/><file src="./resources/wood/images/house02.png"/><file src="./resources/wood/images/icon_radio_on.png"/><file src="./resources/wood/images/icon_radio.png"/><file src="./resources/wood/images/line02.png"/><file src="./resources/wood/images/round.png"/><file src="./resources/wood/images/scale_num.png"/><file src="./resources/wood/images/scale_num2.png"/><file src="./resources/wood/images/table_bg_new.png"/><file src="./resources/wood/images/table_tt.png"/><file src="./resources/wood/images/tree_con_mid.png"/><file src="./resources/wood/images/tree_con_top.png"/><file src="./resources/wood/images/tree.png"/><file src="./resources/wood/images/treebox1.png"/></resources></addon>