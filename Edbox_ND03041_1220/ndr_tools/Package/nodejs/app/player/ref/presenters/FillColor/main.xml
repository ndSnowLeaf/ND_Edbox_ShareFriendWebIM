<?xml version='1.0' encoding='UTF-8' ?>
<addon id='FillColor'>
<properties>

                <property name="QuestionId" displayName="题目ID" type="string" isLocalized="false" />
                <property name="TimerType" displayName="计时类型" type="string" isLocalized="false" />
                <property name="TimeLimit" displayName="时间" type="string" isLocalized="false" />
                <property name="QuestionContent" displayName="题目内容" type="json" isLocalized="false" />

</properties>

<dependencies>

</dependencies>

<css>



</css>


<view>


</view>


<presenter>

<![CDATA[(function () {
	var Presenter = BasicPresenter.extend({
		/**
		 * Presenter的初始化方法
		 * @private
		 */
		$init: function () {
			this._super();
			this.model = [];
			this.componentSetting = {};
			//定义日志
			this.logger.appendHandler(function(message){
				console.log(message);
			}, {level: Logger.DEBUG});
		},
		/****以下开始为icPlayer的生命周期方法*****/
		run: function (view, model) {
			//将View的width和height设置为0
			view.style['width'] = 0;
			view.style['height'] = 0;

			var self = this;
			self._getSVGString(model.QuestionContent.origineImage)
				.then(function(origineSVGString){
					//转换颜色值16进制转到rbg
					var newModel = self._filterColor(model);
					//svg string
					newModel.origineSVGString = origineSVGString;
					self._adaptedOriginData(newModel);
					//构建组件配置
					self._configComponents();
					//加载启动器
					self.model.push({
						name: 'Components',
						type: 'json',
						text: JSON.stringify(self.componentSetting)
					});
					self.$requireComponent('ComponentLoader', self.model, $(view),
						{left: 0, top: 0, width: 0, height: 0});
				})
		},

		destroy: function () {

		},
		/****以下开始为Presenter的私有方法*****/

		/**
		 * 通过url获取svg节点的字符串
		 * @param url
		 * @returns {*|{!url, prototype}}
		 * @private
		 */
		_getSVGString: function(url){
			var deffer = $.Deferred();
			$.ajax({
				url: url,
				type: 'GET',
				dataType: 'xml',
				cache: false,
				success: function(data) {
					var svgNode = document.adoptNode($('svg', data)[0]);
					var svgString = new XMLSerializer().serializeToString(svgNode);
					deffer.resolve(svgString);
				},
				error: function(xhr, textStatus, error) {
					throw new Error('get svg error')
				}
			});
			return deffer;
		},

		/**
		 *	颜色值从16进制转rgb
		 */
		_hexToRGB: function(hex){
			var reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/;
			var hexColor = hex.toLowerCase();
			if(hexColor && reg.test(hexColor)){
				if(hexColor.length === 4){
					var hexColorTemp = '#';
					for(var i = 1; i < 4; i += 1){
						hexColorTemp += hexColor.slice(i, i + 1).concat(hexColor.slice(i, i + 1));
					}
					hexColor = hexColorTemp;
				}

				var colorChange = [];
				for(var i = 1; i < 7; i += 2){
					colorChange.push(parseInt('0x' + hexColor.slice(i, i + 2)));
				}
				return 'rgb(' + colorChange.join(',') + ')';
			}else{
				return hexColor.replace(/\s*/g, '');
			}
		},
		_filterColor: function(model){
			var self = this;
			var colors = model.QuestionContent.recommendColors;
			for(var i = 0; i < colors.length; i++){
				colors[i] = self._hexToRGB(colors[i]);
			}
			return model;
		},
		_adaptedOriginData: function (model) {
			//添加题型所需要的数据
			this.model.push({
				name: 'questionType',
				type: 'string',
				value: 'FillColor'
			})
			this.model.push({
				name: 'TimerController',
				type: 'string',
				value: JSON.stringify([
					{
						name: 'timer_type',
						type: 'string',
						value: model.TimerType
					},
					{
						name: 'time_limit',
						type: 'string',
						value: model.TimeLimit
					},
					{
						name: 'isPauseOnSubmit',
						type: 'boolean',
						value: 'false'
					}
				])
			})
			this.model.push({
				name: 'InteractionSubmitButton',
				type: 'string',
				value: JSON.stringify([
					{
						name: 'can_modify',
						type: 'string',
						value: true
					},
					{
						name: 'linkQuestionType',
						type: 'string',
						value: 'FillColor'
					},
					{
						name: 'linkQuestionId',
						type: 'string',
						value: model.QuestionId
					},
					{
						name: 'view_type',
						type: 'string',
						value: 'new_em_button'
					}
				])
			})
			this.model.push({
				name: 'InteractionTimer',
				type: 'string',
				value: JSON.stringify([{
					name: 'view_type',
					type: 'string',
					value: 'new_timer'
				}])
			})
			this.model.push({
				name: 'FillColorBusiness',
				type: 'string',
				value: JSON.stringify([
					{
						name: 'questionId',
						type: 'string',
						value: model.QuestionId
					},
					{
						name: 'fillColorData',
						type: 'json',
						text: JSON.stringify({
							title: model.QuestionContent.title,
							defaultColor: model.QuestionContent.recommendColors,
							origineImage: model.QuestionContent.origineImage,
							expectedImage: model.QuestionContent.expectedImage,
							isDemoHidden: model.QuestionContent.isDemoHidden,
							origineSVGString: model.origineSVGString,
							expectedSVGString: model.expectedSVGString
						})
					}
				])
			});

			this.model.push({
				name: 'ObjectiveInteractionLayout',
				type: 'string',
				value: JSON.stringify([{
					name: 'questionType',
					type: 'string',
					value: 'FillColor'
				}, {
					name: 'specialTemplate',
					type: 'string',
					value: 'false'
				}])
			})
			this.model.push({
				name: 'AnswerFlowController',
				type: 'string',
				value: JSON.stringify([{
					name: 'showResultOnSubmit',
					type: 'string',
					value: 'false'
				}])
			})
			this.model.push({
				name: 'AnswerClassStatis',
				type: 'string',
				value: JSON.stringify([{
					name: 'config',
					type: 'string',
					value: {
						toolbar: ['exit', 'order', 'question', 'reference', 'send.again'],
						plugins: ['AnswerContrast', 'PopularVoteTeacher', 'AnswerAssessment']
					}
				}])
			})
			this.model.push({
				name: 'ClassroomStatusController',
				type: 'string',
				value: JSON.stringify([
					{
						name: 'questionId',
						type: 'string',
						value: model.QuestionId
					}
				])
			})
		},
		_configComponents: function () {
			//根据不同的运行场景定义需要加载的组件
			if (this.isPPTShell  || this.currentRuntime == icCreatePlayer.RUNTIME.WEB) {
				//如果是PPTShell或Web的场景
				this.componentSetting = {
					controllers: [
						{
							presenter: 'InteractionStateRecoverFilter'
						},
						{
							presenter: 'I18nFilter'
						},
						{
							presenter: 'AnswerFlowController',
							depends: [
								{
									property: 'TimerService',
									presenter: 'TimerController'
								}
							]
						},
						{
							presenter: 'AnswerClassStatis'
						},
						{
							presenter: 'ClassroomStatusController'
						}
					],
					layout: 'ObjectiveInteractionLayout',
					components: [
						{presenter: 'InteractionTimer', renderTo: 'TopLeftPanel'},
						// {presenter: "InteractionSubmitButton", renderTo: "BottomPanel"},
						{presenter: 'FillColorBusiness', renderTo: 'CenterPanel'}
					]
				};
			} else if (this.currentRuntime == icCreatePlayer.RUNTIME.STUDENT_MOBILE) {
				//如果是学生端Pad
				this.componentSetting = {
					controllers: [
						{
							presenter: 'InteractionStateRecoverFilter'
						},
						{
							presenter: 'I18nFilter'
						},
						{
							presenter: 'AnswerFlowController',
							depends: [
								{
									property: 'TimerService',
									presenter: 'TimerController'
								}
							]
						},
						{
							presenter: 'AnswerProgressController'
						}
					],
					layout: 'ObjectiveInteractionLayout',
					components: [
						{presenter: 'InteractionTimer', renderTo: 'TopLeftPanel'},
						{presenter: 'InteractionSubmitButton', renderTo: 'TopRightPanel'},
						{presenter: 'FillColorBusiness', renderTo: 'CenterPanel'}
					]
				};
			}
		}
	}, 'FillColor');

	window.AddonFillColor_create = function(){
		return new Presenter();
	}
})();

]]>

</presenter>


<resources>


</resources>

</addon>