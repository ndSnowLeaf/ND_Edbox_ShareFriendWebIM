<?xml version='1.0' encoding='UTF-8' ?>
<addon id='BasicQuestionViewer'>
<properties>

                <property name="id" displayName="题目id" type="string" isLocalized="false" />
                <property name="type_code" displayName="题目类型编码" type="string" values="choice,multiplechoice,vote,textentry,order,match,judge,graphicgapmatch,textentrymultiple,handwrite,data" isLocalized="false" />
                <property name="type_name" displayName="题目的类型名称" type="string" isLocalized="false" />
                <property name="url" displayName="题目xml地址" type="question" isLocalized="false" />
                <property name="theme" displayName="题目主题" type="string" isLocalized="false" />

</properties>

<dependencies>

<jsDependency>
    <javaScript  name="AlamedaRequire" version="0.3.2" />
    <javaScript  name="PageXmlParser" version="1.0.0" />
</jsDependency>


</dependencies>

<css>



</css>


<view>


</view>


<presenter>

<![CDATA[(function () {
    /** 常量定义 */
    var _CONSTANTS_DEFINE = {
        SubjectiveEnum: { //主观题
            "handwrite": "手写题"
        },
        ObjectiveEnum: { //客观题
            "choice": "单选题",
            "multiplechoice": "多选题",
            "judge": "判断题",
            "order": "排序题",
            "match": "连线题",
            "extendedtext": "问答题",
            "graphicgapmatch": "拼图题",
            "textentry": "填空题",
            "vote": "投票题",
            "data": "复合题",
            "cloze": "完型填空"
        },
        GamingThemeEnum: {  //游戏化皮肤
            "fishing": {
                "choice": "FishingThemeForChoice",
                "multiplechoice": "FishingThemeForChoice"
            }
        },
        QUESTION_HAND_WRITE: "nd_handwritequestion",
        PARAM_IS_SCREENSHOT: "isScreenShot"
    };

    var Presenter = BasicPresenter.extend({
        /**
         * Presenter的初始化方法
         * @private
         */
        $init: function () {
            this._super();
            this.$view = null;
            this.model = [];
            this.componentSetting = {};
            this.isScreenShot = false; //是否为截图工具, 根据该字段套用不同的UI布局

            /** 兼容手写题 */
            var self = this;
            self.pageModels = {};

            /** 接口声明 */
            this.__interface = {
                //截图工具调用接口
                execute: self._createDelegate(self._execute, [], true, this)
            };

            this.logger.appendHandler(function (message, context) {
                console.log(message);
            }, { level: Logger.DEBUG });
        },
        /**
         * Presenter对外暴露的方法
         */
        _service_: {
            constructor: function (parent) {
                this.parent = parent;
            }
        },
        getService: function () {
            this._service_.constructor(this);
            return this._service_;
        },
        /****以下开始为icPlayer的生命周期方法*****/
        /**
         * @param view
         * @param model
         * {
         *      $: {
         *          presenterId
         *          unqiueId
         *      },
         *      ID: presenterID
         *      id: 习题颗粒ID
         *      type_code: 题型编码, 参照【OBJECTIVE_ENUM、SUBJECTIVE_ENUM】
         *      type_name: 题型名称
         *      url: 习题数据,
         *      theme: 皮肤主题【basic:基础皮肤，other:游戏化皮肤】,
         *      is_tool: 是否为截图工具
         * }
         *
         * 如果是截图工具 执行顺序 run -> execute -> _render
         * 否则：run -> _render
         */
        run: function (view, model) {
            this.logger.debug('BasicQuestionViewer Run :' + JSON.stringify(model));

            //Step1. 获取DOM树
            this.$view = $(view);
            this.$view.hide();

            //Step2. 判断是否为截图工具，若是，直接返回，等待execute的调用
            if (model.is_tool === true || model.is_tool === 'true') return;
            if (model.type_code === undefined) return;

            //判断是否需要以截图工具的UI显示QTI(支持课堂总结通过URL传参)
            var isScreenShot = this.urlParams[_CONSTANTS_DEFINE.PARAM_IS_SCREENSHOT];
            if (isScreenShot === true || isScreenShot === 'true') {
                model.is_tool = this.isScreenShot = true;
            }

            //Step3. 准备渲染
            return this._render(model);
        },
        destroy: function () {
            !!this.handWriteLaucher && this.handWriteLaucher.destroy && this.handWriteLaucher.destroy();
        },

        /****以下开始为Presenter的私有方法*****/
        /********私有的方法**********/
        /**
         * 截图工具调用接口
         * @param options.toolOptions
         * {
         *      "questionId":"题型ID"，
         *      "physicPath":"题目的绝对物理路径",
         *      "questionCode": "judge | choice | nd_handwritequestion",//判断题(judge)、单选题(choice)、手写题(nd_handwritequestion)
         *      "type": "normal | image"//normal-正常的题目;image-截图的题目
         * }
         * {
         *      files:[
         *          source:
         *          url: 相当于 physicPath
         *      ]
         * }
         */
        _execute: function (options) {
            if (!options || (!options.physicPath && options.files.length === 0)) return;

            var self = this;
            self.logger.debug('BasicQuestionViewer Execute :' + JSON.stringify(options));
            self.isScreenShot = true; //截图工具标识

            //Step1. 获取颗粒main.xml
            var questionCode = options.questionCode;
            var courseWareObjectUrl = options.physicPath || options.files[0].url;
            PageXmlParser.loadPageXML(courseWareObjectUrl).then(function (pageXML) {
                var questionModel, isHandWrite = false;

                if (!!questionCode) {
                    //教师端 有传入questionCode, 可通过该字段判断是否为手写题
                    isHandWrite = (questionCode === _CONSTANTS_DEFINE.QUESTION_HAND_WRITE);
                } else {
                    //学生端 无法通过questionCode判断是否为手写题, 需要通过解析Page.xml判断
                    isHandWrite = PageXmlParser.isExistAddonModule(pageXML, 'Write');
                }

                if (isHandWrite) { //新手写题
                    var panelModel = PageXmlParser.getPropertiesModel(pageXML, 'Panel');
                    self.pageModels['Panel'] = [panelModel];

                    questionModel = PageXmlParser.getPropertiesModel(pageXML, 'Write');
                    questionModel.is_tool = true; //截图出题标识
                    self.pageModels['Write'] = [questionModel];

                    /*
                     * TODO 优化：${ref-base}占位符处理 应当交由框架处理
                     */
                    if (!!questionModel.writer_background && questionModel.writer_background.url) {
                        questionModel.writer_background.url = questionModel.writer_background.url.replace('\$\{ref-base\}\/\.\.', courseWareObjectUrl);
                    }
                } else {
                    //Step3. 解析page.xml -> model
                    questionModel = PageXmlParser.getPropertiesModel(pageXML);
                    questionModel.is_tool = true; //截图出题标识

                    /*
                     * TODO 优化：${ref-base}占位符处理  耦合性太强 应当直接将courseWareObjectUrl当做${ref-base}传入qti(最好去掉这些不必要的处理)
                     * 非App端，不加入file:///协议头, qti Ajax加载item.json时报错
                     */
                    if (!!questionModel.url) {
                        questionModel.url = questionModel.url.replace('\$\{ref-base\}\/\.\.', courseWareObjectUrl).replace(/\\/g, '\/');

                        if (!self.isApp) {
                            questionModel.url = 'file:///' + questionModel.url;
                        }
                    }
                }

                //Step4. 调用_render方法
                self._render(questionModel, isHandWrite);
            }, function (XMLHttpRequest) {
                self.logger.error('Failed to load XML file');
                self.logger.error(XMLHttpRequest);
            });
        },
        /**
         * 解析数据模型，并准备渲染
         * @param questionModel
         * @private
         */
        _render: function (questionModel, isHandWrite) {
            if (!!isHandWrite || !!_CONSTANTS_DEFINE.SubjectiveEnum[questionModel.type_code]) { // 主观题

                return this._loadSubjective(questionModel);
            } else {

                return this._loadObjective(questionModel);
            }
        },
        //主观题加载
        _loadSubjective: function (questionModel) {
            var self = this;
            if (!!questionModel.url) questionModel.question_url = questionModel.url; //支持旧手写题

            return require(['HandWriteLauncher'], function (HandWriteLauncher) {
                self.handWriteLaucher = new HandWriteLauncher(self);
                return self.handWriteLaucher.run(self.$view[0], questionModel);
            });
        },
        //客观题加载
        _loadObjective: function (questionModel) {
            var gamingThemeMap = _CONSTANTS_DEFINE.GamingThemeEnum[questionModel.theme];
            if (!gamingThemeMap) { // 无主题
                this._adaptedOriginData(questionModel);
                this._configComponents(questionModel);
            } else { // 游戏化皮肤
                var gamingThemePresenter = gamingThemeMap[questionModel.type_code];
                if (!!gamingThemePresenter) {
                    this.model = this.model.concat([
                        {
                            name: gamingThemePresenter,
                            type: "string",
                            value: JSON.stringify([
                                {
                                    name: "question_id",
                                    type: "string",
                                    value: questionModel.id
                                },
                                {
                                    name: "question_url",
                                    type: "string",
                                    value: questionModel.url
                                }
                            ])
                        },
                        {
                            "name": "questionType",
                            "type": "string",
                            "value": gamingThemePresenter
                        },
                        {
                            name: "ObjectiveInteractionLayout",
                            type: "string",
                            value: JSON.stringify([{
                                name: "questionType",
                                type: "string",
                                value: "BasicQuestionViewer"
                            }, {
                                name: "specialTemplate",
                                type: "string",
                                value: "true"
                            }])
                        }
                    ]);
                    this.componentSetting = {
                        controllers: [
                            { presenter: "InteractionStateRecoverFilter" },
                            { presenter: "I18nFilter" },
                            { presenter: "ClassroomStatusController" }
                        ],
                        layout: "ObjectiveInteractionLayout",  //需要特殊布局
                        components: [
                            { presenter: gamingThemePresenter, renderTo: "CenterPanel" }
                        ]
                    }
                }
            }

            this.model.push({
                "name": "Components",
                "type": "json",
                "text": JSON.stringify(this.componentSetting)
            });

            return this.$requireComponent('ComponentLoader', this.model, this.$view);
        },
        /**
         * 数据模型转换（除完形填空题以外）
         * @param model
         * @returns {Array}
         * @private
         */
        _transformModel: function (model) {
            var properties = [];

            for (var key in model) {
                if (model.hasOwnProperty(key) && typeof model[key] != 'object') {
                    properties.push({
                        name: key,
                        type: "string",
                        value: model[key]
                    });
                }
            }

            return properties;
        },

        /**
         * 数据模型转换（完形填空）
         * @param model
         * @returns {Array}
         * @private
         */
        _transformModelCloze: function (model) {
            var properties = []
            var self = this
            for (var key in model) {
                if (model.hasOwnProperty(key)) {
                    if (typeof model[key] !== 'object') {
                        properties.push({
                            name: key,
                            type: 'string',
                            value: model[key]
                        })
                    }
                    if ('question_content' == key) {
                        properties.push({
                            name: key,
                            type: 'string',
                            value: self._qtiPlayerModelAdapted(model)
                        })
                    }
                }
            }

            return properties;
        },
        /**
         * TODO: 后续有另外的基础题，需要做QTI数据适配，改写此方法
         * 数据适配
         * @param model
         * @private
         */
        _qtiPlayerModelAdapted: function (model) {
            var questionContent = model.question_content
            return {
                identifier: '',
                title: '',
                label: null,
                lang: null,
                adaptive: false,
                time_dependent: false,
                responses: [
                    {
                        identifier: 'RESPONSE_1-1',
                        cardinality: 'ordered',
                        base_type: 'identifier',
                        sequence: '1-1',
                        corrects: questionContent.corrects
                    }
                ],
                items: [
                    {
                        identifier: null,
                        type: model.type_code,
                        raw: false,
                        response_identifier: 'RESPONSE_1-1',
                        prompt: questionContent.prompt,
                        layout: null,
                        prompt_object: null,
                        shuffle: false,
                        choices: questionContent.choices,
                        object: {
                            type: 'image/png',
                            width: '1000',
                            height: '600',
                            data: null,
                            text: null,
                            params: {}
                        },
                        gap_imgs: [],
                        associable_hotspots: [],
                        table: null,
                        min_choices: 0,
                        max_choices: 1,
                        rows: 1,
                        columns: 1,
                        papertype: null,
                        titletype: null,
                        children: [],
                        style: null,
                        multiple: false
                    }
                ],
                feedbacks: [
                    {
                        identifier: 'showHint',
                        show_hide: 'show',
                        content: questionContent.hint,
                        sequence: 1,
                        outcome_identifier: 'FEEDBACK',
                        outcomeIdentifier: 'FEEDBACK'
                    },
                    {
                        identifier: 'showAnswer',
                        show_hide: 'show',
                        content: questionContent.analysis,
                        sequence: 1,
                        outcome_identifier: 'FEEDBACK',
                        outcomeIdentifier: 'FEEDBACK'
                    }
                ]
            }
        },
        /**
         * 数据转换环境函数
         * @param typeCode
         * @param model
         * @private
         */
        _transformModelContext: function (typeCode, model) {
            var self = this
            // 完型填空
            if ('cloze' === typeCode) {
                return self._transformModelCloze(model)
            } else {
                return self._transformModel(model)
            }
        },
        //适配颗粒中定义的数据 - 客观题基础皮肤
        _adaptedOriginData: function (questionModel) {
            var self = this;
            self.model = self.model.concat([
                {
                    "name": "questionType",
                    "type": "string",
                    "value": "ObjectiveBasicQuestion"
                },
                //{
                //    "name": "ObjectiveBasicQuestion",
                //    "type": "json",
                //    "text": JSON.stringify(questionModel)
                //},
                {
                    "name": "ObjectiveBasicQuestion",
                    "type": "string",
                    "value": JSON.stringify(this._transformModelContext(questionModel.type_code, questionModel))
                },
                {
                    name: "InteractionSubmitButton",
                    type: "string",
                    value: JSON.stringify([
                        {
                            name: "can_modify",
                            type: "string",
                            value: true
                        },
                        {
                            name: "linkQuestionType",
                            type: "string",
                            value: "BasicQuestionViewer"
                        },
                        {
                            name: "linkQuestionId",
                            type: "string",
                            value: questionModel.id
                        },
                        {
                            name: "view_type",
                            type: "string",
                            value: "new_em_button"
                        }
                    ])
                },
                {
                    name: "InteractionTimer",
                    type: "string",
                    value: JSON.stringify([{
                        "name": "view_type",
                        "type": "string",
                        "value": "new_timer"
                    }])
                },
                {
                    name: "ObjectiveInteractionLayout",
                    type: "string",
                    value: JSON.stringify([{
                        name: "questionType",
                        type: "string",
                        value: (self.isScreenShot ? "ScreenShot" : "BasicQuestionViewer")
                    }, {
                        name: "specialTemplate",
                        type: "string",
                        value: "true"
                    }])
                },
                {
                    name: "AnswerFlowController",
                    type: "string",
                    value: JSON.stringify([{
                        name: "showResultOnSubmit",
                        type: "string",
                        value: "false"
                    }])
                },
                {
                    name: "ObjectiveStatisticsRemake",
                    type: "string",
                    value: JSON.stringify([])
                },
                {
                    name: "AnswerClassStatis",
                    type: "string",
                    value: JSON.stringify([{
                        name: "config",
                        type: "string",
                        value: JSON.stringify({
                            "toolbar": ["exit", "order", "statistics", "question", "parsing", "reference", "send.again"],
                            "plugins": ["AnswerContrast"]
                        })
                    }])
                },
                {
                    name: "TimerController",
                    type: "string",
                    value: JSON.stringify([
                        {
                            name: "timer_type",
                            type: "string",
                            value: questionModel.timer_type
                        },
                        {
                            name: "time_limit",
                            type: "string",
                            value: questionModel.time_limit
                        }
                    ])
                },
                {
                    name: 'ClassroomStatusController',
                    type: 'string',
                    value: JSON.stringify([{
                        name: "questionId",
                        type: "string",
                        value: questionModel.id
                    }])
                }
            ]);
        },
        //根据不同的运行场景定义需要加载的组件 - 客观题基础皮肤
        _configComponents: function (questionModel) {
            if (this.isPC || this.isWeb) { //白板端
                this.componentSetting = {
                    controllers: [
                        { presenter: "InteractionStateRecoverFilter" },
                        { presenter: "I18nFilter" },
                        {
                            presenter: "AnswerFlowController",
                            depends: [
                                {
                                    property: "TimerService",
                                    presenter: "TimerController"
                                }
                            ]
                        },
                        { presenter: "ClassroomStatusController" }
                    ],
                    layout: "ObjectiveInteractionLayout",
                    components: [
                        { presenter: "InteractionTimer", renderTo: "TopLeftPanel" },
                        { presenter: "InteractionSubmitButton", renderTo: "BottomPanel" },
                        { presenter: "ObjectiveBasicQuestion", renderTo: "CenterPanel" },
                        { presenter: "ObjectiveStatisticsRemake", renderTo: "StatisticsPanel" }
                    ]
                };

                if (questionModel && questionModel.type_code == 'graphicgapmatch') { //拼图题，使用D类统计
                    this.componentSetting.controllers.push({ presenter: "AnswerClassStatis" });
                } else {
                    this.componentSetting.controllers.push({ presenter: "ObjectiveStatController" });
                }
            } else if (this.isStudent) { //学生端
                this.componentSetting = {
                    controllers: [
                        { presenter: "InteractionStateRecoverFilter" },
                        { presenter: "I18nFilter" },
                        {
                            presenter: "AnswerFlowController",
                            depends: [
                                {
                                    property: "TimerService",
                                    presenter: "TimerController"
                                }
                            ]
                        },
                        {
                            presenter: "AnswerProgressController"
                        }
                    ],
                    layout: "ObjectiveInteractionLayout",
                    components: [
                        { presenter: "InteractionTimer", renderTo: "TopLeftPanel" },
                        { presenter: "InteractionSubmitButton", renderTo: "TopRightPanel" },
                        { presenter: "ObjectiveBasicQuestion", renderTo: "CenterPanel" }
                    ]
                }
            }
        }
    }, "BasicQuestionViewer");

    window.AddonBasicQuestionViewer_create = function () {
        return new Presenter();
    }
})();
define('HandWriteLauncher', function () {
    /**
     * Copy from Write Presenter 2.0.0
     */
    var WriteSnapShot = new BasicLauncher({
		'defaultConfig': 'simple',
		'dataParse': function (model, pageModels) {
			var self = this;
			//是否新版手写题
			model.isNew = true;
			var deferred = $.Deferred();
			if (model.question_url && !model.writer_background) {
				//旧手写题
				model.isNew = false;
				QtiPlayer.load(model.question_url, {
					refPath: icCreatePlayer.ref_path
				}, function (data) {
					for (var item in data.modelMap) {
						if (data.modelMap[item].questionType === 'handwrite') {
							model.writer_background = {
								url: data.modelMap[item].object.data,
								type: 1,
								left: 0,
								top: 0,
								right: 0,
								bottom: 0
							};
							break;
						}
					}
					deferred.resolve(model);
				});
			} else {
				var panelModel = pageModels.Panel[0];
				$.extend(model, panelModel);
				deferred.resolve(model);
			}
			return deferred.done(
				function (data) {
					data.isWhole = data.isWhole || 0;
					data.questionType = 'newhandwrite';
					data.initData = {
						'userID': ClassroomUtils.getCurrentUserInfo().studentId,
						'lessonId': self._getExamId(),
						'nativeId': 'write_pad',
						'isWhole': (data.isWhole == 1 ? true : false),
						'isSinglePage': 1,
						'autoSaveState': true,
						'questionType': data.questionType,
						'background': data.writer_background,
						'limitPage': 1,
						'wordsNum': 0
					};
					data.config = JSON.stringify({
						'toolbar': [].slice.apply(["exit", "order", "send.again"], model.is_tool ? [0, -1] : [0]),
						'plugins': ['PopularVoteTeacher', 'AnswerContrast', 'AnswerAssessment']
					});
				}
			);
		},
		'presenterParserMapping': {
			'answerFlowController': function (config, model) {
				config.value.linkQuestionId = model.id;
			}
		},
		'getEnvironment': function () {
			var envName;
			var sys = this._getQueryString('sys');

			if (this.isPPTShell || (sys != null && sys.toLowerCase() === 'icrstatisticsplatform')) {
				envName = BasicLauncher.simpleGetEnvironment.ENV.PPTShell;
			} else {
				envName = BasicLauncher.simpleGetEnvironment.ENV.Pad;
			}

			return envName;
		},
		'getComponent': function (model) {
			var panelConfig = (model.isNew) ?
				{
					name: 'panel',
					presenter: 'InteractionPanel',
					autowired: ['module', 'placeholder', 'text', 'textStyle', 'hideQuickArea'],
					renderTo: 'panel'
				} :
				{ presenter: 'OldWriteViewer', autowired: ['question_url'], renderTo: 'panel' };
			return [
				/*{
					presenter: 'HandWriter',
					autowired: ['initData'],
					renderTo: 'write'
				},*/
				panelConfig,
				{ presenter: 'InteractionTimer', value: { 'view_type': 'new_timer' }, renderTo: 'timer' },
				{
					presenter: 'InteractionSubmitButton',
					value: {
						'can_modify': 'true',
						'linkQuestionType': 'write',
						'linkQuestionId': model.id,
						'view_type': 'new_em_button'
					},
					renderTo: 'submit',
					applyTo: ['pad']
				}
			];
		},
		'getController': function (model) {
			return [
				{presenter: 'WriteController', autowired: ['id', 'questionType', 'writer_background','initData']},
				//手写题启动器 require d类统计
				{ presenter: 'AnswerClassStatis', autowired: ['config'], applyTo: ['ppt'] }
			];
		},
		'getLayout': function (model) {
			return {
				presenter: 'WriteLayout',
				value: { 'questionType': 'write', 'noSendQuestion': model.is_tool || false }
			};
		},
		'_getExamId': function () {
			var examId = '';
			this.$addEventListener('TaskInfoCallback', PresenterEventType.IC_PLAYER_EVENT, function (eventData) {
				if (eventData && eventData.value) {
					examId = eventData.value.examId;
				}
			});
			this.$dispatchEvent('TaskInfo', PresenterEventType.IC_PLAYER_EVENT, { 'item': 'exam', 'type': 'query' });
			return examId;
		},
		'_getQueryString': function (name) {
			var reg = new RegExp('(^|&)' + name + '=([^&]*)(&|$)', 'i');
			var r = window.location.search.substr(1).match(reg);
			if (r != null) return unescape(r[2]);
			return null;
		},
		'presenterParserMapping': {
			'interactionStateRecoverFilter': function (module) {
				module.applyTo = ['pad'];
			},
			'objectiveStatController': function (module) {
				module.applyTo = [];
			},
			'answerFlowController': function (config, model) {
				config.value.linkQuestionId = model.id;
			}
		}
	});

    var HandWriteLauncher = function (presenter) {
        this._init(presenter);
    };

    HandWriteLauncher.prototype = {
        run: function (view, model) {
            return this.presenter._run_(view, model);
        },
        destroy: function () {

        },

        /****���¿�ʼΪPresenter��˽�з���*****/
        /********˽�еķ���**********/
        _init: function (presenter) {
            this.presenter = presenter;
            this._extendUnOverride(this.presenter, WriteSnapShot);
            this.presenter._run_ = WriteSnapShot.run;
        },
        /**
         * ʵ���޸��ǵ���չ
         * @param target
         * @param object
         * @private
         */
        _extendUnOverride: function (target, object) {
            for (var key in object) {
                if (object.hasOwnProperty(key) && !target.hasOwnProperty(key) && target[key] === undefined) {
                    target[key] = object[key];
                }
            }
        }
    };

    return HandWriteLauncher;
})
;]]>

</presenter>


<resources>


</resources>

</addon>