<?xml version='1.0' encoding='UTF-8'?>
<addon id="templateid"><properties/><dependencies><jsDependency><javaScript name="basicPresenter" version="1.0.5"/><javaScript name="AlamedaRequire" version="0.3.2"/><javaScript name="knockout" version="3.3.0"/><javaScript name="tools_common" version="1.0.0"/><javaScript name="threejs" version="73.1"/></jsDependency></dependencies><css><![CDATA[.tool_to_edit .exam_skin_wood .mclaw_wrapper .mclaw_main{padding:2.66667em 0 .35em}.tool_to_edit .exam_skin_wood .mclaw_wrapper .mclaw_inner_player_area{left:2.2%;width:95.6%}.exam_skin_wood .mclaw_wrapper{position:relative;width:100%;height:100%;background-color:#bfd3e2;text-align:center;overflow:hidden}.exam_skin_wood .mclaw_wrapper .mclaw_main{position:absolute;width:100%;height:100%;padding:2.66667em 4em .35em;background:-webkit-linear-gradient(top,#c2dfeb 0,#d4e6f0 100%);background:linear-gradient(to bottom,#c2dfeb 0,#d4e6f0 100%)}.exam_skin_wood .mclaw_wrapper .mclaw_main_area{position:relative;width:100%;height:100%;padding-bottom:4.60833em}.exam_skin_wood .mclaw_wrapper .mclaw_data_tables{width:100%;height:50%;padding-top:2.5em}.exam_skin_wood .mclaw_wrapper .data_table{display:inline-block;width:32.16667em;height:15.16667em;border-radius:.625em;background-color:#90b3c8;box-shadow:0 0 .625em #fff inset,0 0 1.875em rgba(0,68,114,.37);overflow:hidden}.exam_skin_wood .mclaw_wrapper .data_table .row{width:101%;position:relative;white-space:nowrap;display:flex}.exam_skin_wood .mclaw_wrapper .data_table .row .cell{float:left;position:relative;height:3.75em;margin:0 3px 3px 0;border:1px solid #f2f6f6;background-color:#e8eef1}@media screen and (max-width:1600px){.exam_skin_wood .mclaw_wrapper .data_table .row .cell{margin:0 2px 2px 0}}@media screen and (max-width:900px){.exam_skin_wood .mclaw_wrapper .data_table .row .cell{margin:0 1px 1px 0}}.exam_skin_wood .mclaw_wrapper .data_table .row .cell:nth-child(1){width:7.83333em}.exam_skin_wood .mclaw_wrapper .data_table .row .cell:nth-child(2){width:10.16667em}.exam_skin_wood .mclaw_wrapper .data_table .row .cell:nth-child(3){width:13.83333em}.exam_skin_wood .mclaw_wrapper .data_table .row_2 .cell,.exam_skin_wood .mclaw_wrapper .data_table .row_3 .cell{height:3.58333em}.exam_skin_wood .mclaw_wrapper .data_table .row_1 .cell:first-child{border-top-left-radius:.5em}.exam_skin_wood .mclaw_wrapper .data_table .row_1 .cell:last-child{border-top-right-radius:.5em}.exam_skin_wood .mclaw_wrapper .data_table .row_4 .cell:first-child{border-bottom-left-radius:.625em}.exam_skin_wood .mclaw_wrapper .data_table .row_4 .cell:last-child{border-bottom-right-radius:.625em}.exam_skin_wood .mclaw_wrapper .data_table .row_2 span,.exam_skin_wood .mclaw_wrapper .data_table .row_3 span,.exam_skin_wood .mclaw_wrapper .data_table .row_4 span{display:inline-block;font:2.83333em "Times New Roman";margin-top:.0625em;color:#333}.exam_skin_wood .mclaw_wrapper .left_data_table{margin-right:.625em}.exam_skin_wood .mclaw_wrapper .left_data_table .row_1 .cell:nth-child(1) span{display:inline-block;width:5.54167em;height:2em;margin-top:1.33333em;background:url(resources/wood/images/m_g.png) no-repeat;background-size:100% auto}.exam_skin_wood .mclaw_wrapper .left_data_table .row_1 .cell:nth-child(2) span{display:inline-block;width:7.875em;height:2em;margin-top:.85417em;background:url(resources/wood/images/v_ms.png) no-repeat;background-size:100% auto}.exam_skin_wood .mclaw_wrapper .left_data_table .row_1 .cell:nth-child(3) span{display:inline-block;width:12.29167em;height:2.29167em;margin-top:.875em;background:url(resources/wood/images/mv_gms.png) no-repeat;background-size:100% auto}.exam_skin_wood .mclaw_wrapper .right_data_table{margin-left:.625em}.exam_skin_wood .mclaw_wrapper .right_data_table .row_1 .cell:nth-child(1) span{display:inline-block;width:5.54167em;height:2em;margin-top:1.33333em;background:url(resources/wood/images/m_g.png) 0 -2.41667em no-repeat;background-size:100% auto}.exam_skin_wood .mclaw_wrapper .right_data_table .row_1 .cell:nth-child(2) span{display:inline-block;width:7.875em;height:2em;margin-top:.875em;background:url(resources/wood/images/v_ms.png) 0 -2.41667em no-repeat;background-size:100% auto}.exam_skin_wood .mclaw_wrapper .right_data_table .row_1 .cell:nth-child(3) span{display:inline-block;width:12.29167em;height:2.29167em;margin-top:.875em;background:url(resources/wood/images/mv_gms.png) 0 -2.70833em no-repeat;background-size:100% auto}.exam_skin_wood .mclaw_wrapper .mclaw_play_area{position:relative;width:100%;height:50%}.exam_skin_wood .mclaw_wrapper .mclaw_inner_player_area{position:absolute;left:2.5%;top:0;width:95%;height:100%;z-index:-1}.exam_skin_wood .mclaw_wrapper .mclaw_road{position:absolute;left:0;bottom:0;width:100%;height:5.20833em;z-index:50;background:url(resources/wood/images/bg_road.png) no-repeat;background-size:100% 100%}.exam_skin_wood .mclaw_wrapper .mclaw_left_obstacle{position:absolute;left:0;bottom:.29167em;width:4.58333em;height:13.70833em;z-index:60;background:url(resources/wood/images/left_obstacle.png) no-repeat;background-size:100% 100%}.exam_skin_wood .mclaw_wrapper .mclaw_right_obstacle{position:absolute;right:0;bottom:.29167em;width:4.58333em;height:13.70833em;z-index:60;background:url(resources/wood/images/right_obstacle.png) no-repeat;background-size:100% 100%}.exam_skin_wood .mclaw_wrapper .mclaw_left_car{-webkit-backface-visibility:hidden;position:absolute;z-index:100;left:50%;-webkit-transform:translate(-100%);-ms-transform:translate(-100%);transform:translate3d(-100%,0,0);margin-left:-.70833em;bottom:3.66667em}.exam_skin_wood .mclaw_wrapper .mclaw_left_car .car_body{position:relative;width:14.125em;height:6.54167em;background:url(resources/wood/images/car_body.png) no-repeat;z-index:50;background-size:auto 100%}.exam_skin_wood .mclaw_wrapper .mclaw_left_car .car_railings{position:absolute;left:6.5em;bottom:2.08333em;width:7.70833em;height:1.16667em;z-index:60;background:url(resources/wood/images/railings.png) no-repeat;background-size:100% 100%}.exam_skin_wood .mclaw_wrapper .mclaw_left_car .car_front_wheel{position:absolute;top:4.5em;left:.91667em;width:3.41667em;height:3.375em;background:url(resources/wood/images/car_wheel.png) no-repeat;background-size:100% 100%;z-index:60}.exam_skin_wood .mclaw_wrapper .mclaw_left_car .car_front_wheel.roll{-webkit-animation:wheelRotate 2.5s infinite linear;animation:wheelRotate 2.5s infinite linear}.exam_skin_wood .mclaw_wrapper .mclaw_left_car .car_behind_wheel{position:absolute;top:4.5em;left:9.375em;width:3.41667em;height:3.375em;background:url(resources/wood/images/car_wheel.png) no-repeat;background-size:100% 100%;z-index:60}.exam_skin_wood .mclaw_wrapper .mclaw_left_car .car_behind_wheel.roll{-webkit-animation:wheelRotate 2.5s infinite linear;animation:wheelRotate 2.5s infinite linear}.exam_skin_wood .mclaw_wrapper .mclaw_left_car .car_wheel_shadow{position:absolute;left:.20833em;top:7em;width:13.5em;height:1.95833em;background:url(resources/wood/images/wheel_shadow.png) no-repeat;background-size:100% 100%}.exam_skin_wood .mclaw_wrapper .mclaw_left_car .weight_lay_area{position:absolute;left:-.625em;top:-6.25em;width:15.45833em;height:10.45833em;z-index:10}.exam_skin_wood .mclaw_wrapper .mclaw_left_car .layed_weight_1{position:absolute;left:8.54167em;bottom:2.29167em;z-index:52}.exam_skin_wood .mclaw_wrapper .mclaw_left_car .layed_weight_2{position:absolute;left:12.16667em;bottom:2.29167em;z-index:52}.exam_skin_wood .mclaw_wrapper .mclaw_left_car .layed_weight_1.weight_100g,.exam_skin_wood .mclaw_wrapper .mclaw_left_car .layed_weight_2.weight_100g{-webkit-transform:translate(-50%);-ms-transform:translate(-50%);transform:translate(-50%)}.exam_skin_wood .mclaw_wrapper .mclaw_left_car .layed_weight_1.weight_100g .weight_icon,.exam_skin_wood .mclaw_wrapper .mclaw_left_car .layed_weight_2.weight_100g .weight_icon{width:3.33333em;height:4.95833em;background:url(resources/wood/images/weight_100g.png);background-size:100% 100%}.exam_skin_wood .mclaw_wrapper .mclaw_left_car .layed_weight_1.weight_50g,.exam_skin_wood .mclaw_wrapper .mclaw_left_car .layed_weight_2.weight_50g{-webkit-transform:translate(-50%);-ms-transform:translate(-50%);transform:translate(-50%)}.exam_skin_wood .mclaw_wrapper .mclaw_left_car .layed_weight_1.weight_50g .weight_icon,.exam_skin_wood .mclaw_wrapper .mclaw_left_car .layed_weight_2.weight_50g .weight_icon{display:inline-block;width:2.95833em;height:4.375em;background:url(resources/wood/images/weight_50g.png);background-size:100% 100%}.exam_skin_wood .mclaw_wrapper .mclaw_left_car .layed_weight_1.weight_10g,.exam_skin_wood .mclaw_wrapper .mclaw_left_car .layed_weight_2.weight_10g{-webkit-transform:translate(-50%);-ms-transform:translate(-50%);transform:translate(-50%)}.exam_skin_wood .mclaw_wrapper .mclaw_left_car .layed_weight_1.weight_10g .weight_icon,.exam_skin_wood .mclaw_wrapper .mclaw_left_car .layed_weight_2.weight_10g .weight_icon{width:2.45833em;height:3.70833em;background:url(resources/wood/images/weight_10g.png);background-size:100% 100%}.exam_skin_wood .mclaw_wrapper .mclaw_left_car .layed_weight_1 .weight_shodow_icon,.exam_skin_wood .mclaw_wrapper .mclaw_left_car .layed_weight_2 .weight_shodow_icon{-webkit-transform:scale(1.2);-ms-transform:scale(1.2);transform:scale(1.2);-webkit-transform-origin:bottom center;-ms-transform-origin:bottom center;transform-origin:bottom center}.exam_skin_wood .mclaw_wrapper .mclaw_left_car .weight_info{position:absolute;left:.125em;top:-5em;width:11.91667em;height:3.66667em;background-color:#f6fafc;padding:0 1.25em;border-radius:.41667em;box-shadow:0 0 .54167em rgba(0,67,114,.37)}.exam_skin_wood .mclaw_wrapper .mclaw_left_car .weight_info span{font:2.5em "Times New Roman";color:#333}.exam_skin_wood .mclaw_wrapper .mclaw_left_car .weight_info span:first-child{position:relative;top:-.08333em}.exam_skin_wood .mclaw_wrapper .mclaw_left_car .weight_info span.equal_sign{font:2.5em "Microsoft YaHei"}.exam_skin_wood .mclaw_wrapper .mclaw_left_car .weight_info span.small_font{font-size:1.5em}.exam_skin_wood .mclaw_wrapper .mclaw_left_car .speed_info{position:absolute;left:.125em;top:-8.41667em}.exam_skin_wood .mclaw_wrapper .mclaw_left_car .speed_info span{font:2.5em "Times New Roman";color:#f12000}.exam_skin_wood .mclaw_wrapper .mclaw_left_car .speed_info span:first-child{position:relative;top:-.125em}.exam_skin_wood .mclaw_wrapper .mclaw_left_car .speed_info span.equal_sign{font:2.5em "Microsoft YaHei";margin:0 .08333em}.exam_skin_wood .mclaw_wrapper .mclaw_left_car .speed_info span.small_font{font-size:1.5em}.exam_skin_wood .mclaw_wrapper .mclaw_left_car .car_rope{display:none;position:absolute;top:3.79167em;right:-.70833em;width:.70833em;height:.66667em;background:url(resources/wood/images/break_rope.png) no-repeat;background-size:100% 100%}.exam_skin_wood .mclaw_wrapper .mclaw_left_car.moving .car_rope{display:block}.exam_skin_wood .mclaw_wrapper .mclaw_right_car{position:absolute;z-index:100;right:50%;-webkit-transform:translate(100%);-ms-transform:translate(100%);transform:translate(100%);margin-right:-.70833em;bottom:3.66667em}.exam_skin_wood .mclaw_wrapper .mclaw_right_car .car_body{position:relative;width:14.125em;height:6.54167em;z-index:50;background:url(resources/wood/images/car_body2.png) no-repeat;background-size:100% 100%}.exam_skin_wood .mclaw_wrapper .mclaw_right_car .car_railings{position:absolute;left:-.0625em;bottom:2.08333em;width:7.70833em;height:1.16667em;z-index:60;background:url(resources/wood/images/railings.png) no-repeat;background-size:100% 100%}.exam_skin_wood .mclaw_wrapper .mclaw_right_car .car_front_wheel{position:absolute;top:4.5em;left:9.91667em;width:3.41667em;height:3.375em;background:url(resources/wood/images/car_wheel.png) no-repeat;background-size:100% 100%;z-index:60}.exam_skin_wood .mclaw_wrapper .mclaw_right_car .car_front_wheel.roll{-webkit-animation:wheelRotate2 5s infinite linear;animation:wheelRotate2 5s infinite linear}.exam_skin_wood .mclaw_wrapper .mclaw_right_car .car_behind_wheel{position:absolute;top:4.5em;left:1.5em;width:3.41667em;height:3.375em;background:url(resources/wood/images/car_wheel.png) no-repeat;background-size:100% 100%;z-index:60}.exam_skin_wood .mclaw_wrapper .mclaw_right_car .car_behind_wheel.roll{-webkit-animation:wheelRotate2 5s infinite linear;animation:wheelRotate2 5s infinite linear}.exam_skin_wood .mclaw_wrapper .mclaw_right_car .car_wheel_shadow{position:absolute;left:.75em;top:7em;width:13.5em;height:1.95833em;background:url(resources/wood/images/wheel_shadow.png) no-repeat;background-size:100% 100%}.exam_skin_wood .mclaw_wrapper .mclaw_right_car .weight_lay_area{position:absolute;left:-.625em;top:-6.25em;width:15.45833em;height:10.45833em;z-index:10}.exam_skin_wood .mclaw_wrapper .mclaw_right_car .layed_weight_2{position:absolute;left:2em;bottom:2.29167em;z-index:52}.exam_skin_wood .mclaw_wrapper .mclaw_right_car .layed_weight_1{position:absolute;left:5.625em;bottom:2.29167em;z-index:52}.exam_skin_wood .mclaw_wrapper .mclaw_right_car .layed_weight_1.weight_100g,.exam_skin_wood .mclaw_wrapper .mclaw_right_car .layed_weight_2.weight_100g{-webkit-transform:translate(-50%);-ms-transform:translate(-50%);transform:translate(-50%)}.exam_skin_wood .mclaw_wrapper .mclaw_right_car .layed_weight_1.weight_100g .weight_icon,.exam_skin_wood .mclaw_wrapper .mclaw_right_car .layed_weight_2.weight_100g .weight_icon{width:3.33333em;height:4.95833em;background:url(resources/wood/images/weight_100g.png) no-repeat;background-size:100% 100%}.exam_skin_wood .mclaw_wrapper .mclaw_right_car .layed_weight_1.weight_50g,.exam_skin_wood .mclaw_wrapper .mclaw_right_car .layed_weight_2.weight_50g{-webkit-transform:translate(-50%);-ms-transform:translate(-50%);transform:translate(-50%)}.exam_skin_wood .mclaw_wrapper .mclaw_right_car .layed_weight_1.weight_50g .weight_icon,.exam_skin_wood .mclaw_wrapper .mclaw_right_car .layed_weight_2.weight_50g .weight_icon{display:inline-block;width:2.95833em;height:4.375em;background:url(resources/wood/images/weight_50g.png) no-repeat;background-size:100% 100%}.exam_skin_wood .mclaw_wrapper .mclaw_right_car .layed_weight_1.weight_10g,.exam_skin_wood .mclaw_wrapper .mclaw_right_car .layed_weight_2.weight_10g{-webkit-transform:translate(-50%);-ms-transform:translate(-50%);transform:translate(-50%)}.exam_skin_wood .mclaw_wrapper .mclaw_right_car .layed_weight_1.weight_10g .weight_icon,.exam_skin_wood .mclaw_wrapper .mclaw_right_car .layed_weight_2.weight_10g .weight_icon{width:2.45833em;height:3.70833em;background:url(resources/wood/images/weight_10g.png) no-repeat;background-size:100% 100%}.exam_skin_wood .mclaw_wrapper .mclaw_right_car .layed_weight_1 .weight_shodow_icon,.exam_skin_wood .mclaw_wrapper .mclaw_right_car .layed_weight_2 .weight_shodow_icon{-webkit-transform:scale(1.2);-ms-transform:scale(1.2);transform:scale(1.2);-webkit-transform-origin:bottom center;-ms-transform-origin:bottom center;transform-origin:bottom center}.exam_skin_wood .mclaw_wrapper .mclaw_right_car .weight_info{position:absolute;right:.125em;top:-5em;width:11.91667em;height:3.66667em;background-color:#f6fafc;padding:0 1.25em;border-radius:.41667em;box-shadow:0 0 .54167em rgba(0,67,114,.37)}.exam_skin_wood .mclaw_wrapper .mclaw_right_car .weight_info span{font:2.5em "Times New Roman";color:#333}.exam_skin_wood .mclaw_wrapper .mclaw_right_car .weight_info span:first-child{position:relative;top:-.08333em}.exam_skin_wood .mclaw_wrapper .mclaw_right_car .weight_info span.equal_sign{font:2.5em "Microsoft YaHei";margin:0 .04167em}.exam_skin_wood .mclaw_wrapper .mclaw_right_car .weight_info span.small_font{font-size:1.5em}.exam_skin_wood .mclaw_wrapper .mclaw_right_car .speed_info{position:absolute;right:.125em;top:-8.41667em}.exam_skin_wood .mclaw_wrapper .mclaw_right_car .speed_info span{font:2.5em "Times New Roman";color:#f12000}.exam_skin_wood .mclaw_wrapper .mclaw_right_car .speed_info span:first-child{position:relative;top:-.125em}.exam_skin_wood .mclaw_wrapper .mclaw_right_car .speed_info span.equal_sign{font:2.5em "Microsoft YaHei";margin:0 .08333em}.exam_skin_wood .mclaw_wrapper .mclaw_right_car .speed_info span.small_font{font-size:1.5em}.exam_skin_wood .mclaw_wrapper .mclaw_right_car .car_rope{display:none;position:absolute;top:3.79167em;left:-.70833em;width:.70833em;height:.66667em;background:url(resources/wood/images/break_rope.png) no-repeat;-webkit-transform:scale(-1,1);-ms-transform:scale(-1,1);transform:scale(-1,1);background-size:100% 100%}.exam_skin_wood .mclaw_wrapper .mclaw_right_car.moving .car_rope{display:block}.exam_skin_wood .mclaw_wrapper .mclaw_rope{position:absolute;left:50%;bottom:6.14583em;-webkit-transform:translate(-50%);-ms-transform:translate(-50%);transform:translate(-50%);width:1.70833em;height:.29167em;z-index:50;background:url(resources/wood/images/rope.png) no-repeat;background-size:100% 100%}.exam_skin_wood .mclaw_wrapper .mclaw_scissors{position:absolute;left:50%;margin-left:-.91667em;bottom:11.04167em}.exam_skin_wood .mclaw_wrapper .mclaw_scissors .mclaw_scissors_head{position:absolute;top:.08333em;left:0;width:2.20833em;height:2.25em;background:url(resources/wood/images/scissor_head.png) no-repeat;background-size:100% 100%}.exam_skin_wood .mclaw_wrapper .mclaw_scissors .mclaw_scissors_front{position:absolute;top:2.08333em;left:.41667em;width:.70833em;height:3.625em;z-index:125;background:url(resources/wood/images/scissor_front.png) no-repeat;background-size:100% 100%}.exam_skin_wood .mclaw_wrapper .mclaw_scissors .mclaw_scissors_behind{position:absolute;width:.75em;height:3.04167em;top:2.5625em;left:.66667em;z-index:25;background:url(resources/wood/images/scissor_behind.png) no-repeat;background-size:100% 100%}.exam_skin_wood .mclaw_wrapper .mclaw_scissors.close .mclaw_scissors_head{width:1.875em;height:2.20833em;left:.16667em;top:.08333em;background:url(resources/wood/images/scissor_head2.png) no-repeat;background-size:100% 100%}.exam_skin_wood .mclaw_wrapper .mclaw_scissors.close .mclaw_scissors_front{-webkit-transform:rotate(-5deg);-ms-transform:rotate(-5deg);transform:rotate(-5deg);-webkit-transform-origin:center .33333em;-ms-transform-origin:center .33333em;transform-origin:center .33333em}.exam_skin_wood .mclaw_wrapper .mclaw_scissors.close .mclaw_scissors_behind{-webkit-transform:rotate(7deg);-ms-transform:rotate(7deg);transform:rotate(7deg);-webkit-transform-origin:center top;-ms-transform-origin:center top;transform-origin:center top}.exam_skin_wood .mclaw_wrapper .mclaw_spring{position:absolute;left:50%;bottom:3.25em;width:5.75em;height:2.8125em;-webkit-transform:translate(-50%);-ms-transform:translate(-50%);transform:translate(-50%);z-index:100}.exam_skin_wood .mclaw_wrapper .mclaw_spring .spring_shadow{display:none;position:absolute;width:5.75em;height:2.25em;left:50%;bottom:.8em;-webkit-transform:translate(-50%,50%);-ms-transform:translate(-50%,50%);transform:translate(-50%,50%);background:url(resources/wood/images/spring_shadow.png) no-repeat;background-size:100% 100%}.exam_skin_wood .mclaw_wrapper .mclaw_spring.drop .spring_shadow{display:block}.exam_skin_wood .mclaw_wrapper .left_car_railings{position:absolute;left:50%;-webkit-transform:translate(-100%);-ms-transform:translate(-100%);transform:translate(-100%);bottom:10.70833em;width:7.70833em;height:1.16667em;margin-left:-.655em;z-index:110;background:url(resources/wood/images/railings.png) no-repeat;background-size:100% 100%}.exam_skin_wood .mclaw_wrapper .right_car_railings{position:absolute;right:50%;-webkit-transform:translate(100%);-ms-transform:translate(100%);transform:translate(100%);bottom:10.70833em;width:7.70833em;height:1.16667em;z-index:110;margin-right:-.625em;background:url(resources/wood/images/railings.png) no-repeat;background-size:100% 100%}.exam_skin_wood .mclaw_wrapper .mclaw_toolbar{position:absolute;left:0;bottom:0;width:100%;height:4.95833em;padding:0 4.08333em;background-color:#cfdee9;z-index:100;white-space:nowrap}.exam_skin_wood .mclaw_wrapper .mclaw_weight_area{position:relative;display:inline-block;width:25em;height:100%;vertical-align:middle;padding:.20833em 0 0 .83333em}.exam_skin_wood .mclaw_wrapper .mclaw_weight_area .weight{position:absolute;display:inline-block;z-index:5}.exam_skin_wood .mclaw_wrapper .mclaw_weight_area .weight.moving{opacity:.5}.exam_skin_wood .mclaw_wrapper .mclaw_weight_area .weight_100g{left:31.5%;top:4.2%}.exam_skin_wood .mclaw_wrapper .mclaw_weight_area .weight_50g{left:48.8%;top:14.29%}.exam_skin_wood .mclaw_wrapper .mclaw_weight_area .weight_10g{left:64%;top:24.5%}.exam_skin_wood .mclaw_wrapper .weight_100g .weight_icon{display:inline-block;width:3.33333em;height:4.95833em;background:url(resources/wood/images/weight_100g.png) no-repeat;background-size:86.25% 84.033%}.exam_skin_wood .mclaw_wrapper .weight_100g.big .weight_icon{background:url(resources/wood/images/weight_100g_big.png) no-repeat 0 0;background-size:100% 100%}.exam_skin_wood .mclaw_wrapper .weight_shodow_icon_100{position:absolute;left:29.5%;bottom:0;width:3.875em;height:1.66667em;background:url(resources/wood/images/weight_100g_shadow.png);background-size:100% 100%;z-index:-1}.exam_skin_wood .mclaw_wrapper .weight_50g .weight_icon{display:inline-block;width:2.95833em;height:4.375em;background:url(resources/wood/images/weight_50g.png) no-repeat;background-size:83.1% 83.8%}.exam_skin_wood .mclaw_wrapper .weight_50g.big .weight_icon{background:url(resources/wood/images/weight_50g_big.png) no-repeat 0 0;background-size:100% 100%}.exam_skin_wood .mclaw_wrapper .weight_shodow_icon_50{position:absolute;left:46.35%;bottom:0;width:3.70833em;height:1.625em;background:url(resources/wood/images/weight_50g_shadow.png);background-size:100% 100%;z-index:-1}.exam_skin_wood .mclaw_wrapper .weight_10g .weight_icon{display:inline-block;width:2.45833em;height:3.70833em;background:url(resources/wood/images/weight_10g.png) no-repeat;background-size:86.44% 85.39%}.exam_skin_wood .mclaw_wrapper .weight_10g.big .weight_icon{background:url(resources/wood/images/weight_10g_big.png) no-repeat 0 0;background-size:100% 100%}.exam_skin_wood .mclaw_wrapper .weight_shodow_icon_10{position:absolute;left:61.75%;bottom:0;width:3.33333em;height:1.41667em;background:url(resources/wood/images/weight_10g_shadow.png);background-size:100% 100%;z-index:-1}.exam_skin_wood .mclaw_wrapper .mc_law_mid_btns{display:inline-block;vertical-align:middle;min-width:30.83333em;padding-right:2.08333em;height:100%;text-align:left}.exam_skin_wood .mclaw_wrapper .mc_law_mid_btns .com_btns{position:relative;top:50%;-webkit-transform:translate(0,-50%);-ms-transform:translate(0,-50%);transform:translate(0,-50%)}.exam_skin_wood .mclaw_wrapper .mc_law_mid_btns .line_break_btn{margin:0 4.16667em 0 0}.exam_skin_wood .mclaw_wrapper .mc_law_mid_btns .state_reset_btn{margin:0}.exam_skin_wood .mclaw_wrapper .mc_law_rihgt_btns{display:inline-block;vertical-align:middle;min-width:15.41667em;height:100%;text-align:left}.exam_skin_wood .mclaw_wrapper .mc_law_rihgt_btns .reset_btn{display:inline-block;min-width:5em;height:100%;padding-top:.5em;vertical-align:middle;text-align:center}.exam_skin_wood .mclaw_wrapper .mc_law_rihgt_btns .reset_btn.ui_btn_active .reset_btn_icon,.exam_skin_wood .mclaw_wrapper .mc_law_rihgt_btns .reset_btn:active .reset_btn_icon{background-position:0 -2.625em}.exam_skin_wood .mclaw_wrapper .mc_law_rihgt_btns .reset_btn.click_disabled{cursor:default}.exam_skin_wood .mclaw_wrapper .mc_law_rihgt_btns .reset_btn.click_disabled .reset_btn_icon{background-position:0 -5.25em}.exam_skin_wood .mclaw_wrapper .mc_law_rihgt_btns .reset_btn.click_disabled .reset_btn_text{color:#a9b6c0}.exam_skin_wood .mclaw_wrapper .mc_law_rihgt_btns .reset_btn_imgcnt{display:block}.exam_skin_wood .mclaw_wrapper .mc_law_rihgt_btns .reset_btn_icon{display:inline-block;width:2.375em;height:2.20833em;background:url(resources/wood/images/reset_btns.png);background-size:100% auto}.exam_skin_wood .mclaw_wrapper .mc_law_rihgt_btns .reset_btn_text{display:inline-block;font-size:1.5em;color:#292525;margin-top:.08333em}@-webkit-keyframes wheelRotate{from{-webkit-transform:rotate(0);transform:rotate(0)}to{-webkit-transform:rotate(-360deg);transform:rotate(-360deg)}}@keyframes wheelRotate{from{-webkit-transform:rotate(0);transform:rotate(0)}to{-webkit-transform:rotate(-360deg);transform:rotate(-360deg)}}@-webkit-keyframes wheelRotate2{from{-webkit-transform:rotate(0);transform:rotate(0)}to{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes wheelRotate2{from{-webkit-transform:rotate(0);transform:rotate(0)}to{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}.typefaces_ru_RU .exam_skin_wood .mclaw_wrapper .mc_law_mid_btns .line_break_btn{margin-right:2em}.typefaces_ru_RU .exam_skin_wood .mclaw_wrapper .mc_law_rihgt_btns{min-width:none}.typefaces_ru_RU .exam_skin_wood .mclaw_wrapper .mc_law_rihgt_btns .reset_btn{padding-top:1.4em}.typefaces_ru_RU .exam_skin_wood .mclaw_wrapper .mc_law_rihgt_btns .reset_btn_text{display:none}]]></css><view><![CDATA[<div class="exam_skin_wood"><div class="mclaw_wrapper"><div class="mclaw_main"><div class="mclaw_main_area"><div class="mclaw_data_tables"><div class="data_table left_data_table"><div class="row row_1 clearfix"><div class="cell"><span></span></div><div class="cell"><span></span></div><div class="cell"><span></span></div></div><div class="row row_2 clearfix"><div class="cell"><span></span></div><div class="cell"><span></span></div><div class="cell"><span></span></div></div><div class="row row_3 clearfix"><div class="cell"><span></span></div><div class="cell"><span></span></div><div class="cell"><span></span></div></div><div class="row row_4 clearfix"><div class="cell"><span></span></div><div class="cell"><span></span></div><div class="cell"><span></span></div></div></div><div class="data_table right_data_table"><div class="row row_1 clearfix"><div class="cell"><span></span></div><div class="cell"><span></span></div><div class="cell"><span></span></div></div><div class="row row_2 clearfix"><div class="cell"><span></span></div><div class="cell"><span></span></div><div class="cell"><span></span></div></div><div class="row row_3 clearfix"><div class="cell"><span></span></div><div class="cell"><span></span></div><div class="cell"><span></span></div></div><div class="row row_4 clearfix"><div class="cell"><span></span></div><div class="cell"><span></span></div><div class="cell"><span></span></div></div></div></div><div class="mclaw_play_area"><div class="mclaw_inner_player_area"></div><div class="mclaw_left_obstacle"></div><div class="mclaw_right_obstacle"></div><div class="mclaw_road"></div><div class="mclaw_left_car"><div class="car_body"></div><div class="car_front_wheel"></div><div class="car_behind_wheel"></div><div class="car_wheel_shadow"></div><div class="weight_lay_area"></div><a class="layed_weight_1"><i class="weight_icon"></i> </a><a class="layed_weight_2"><i class="weight_icon"></i></a><div class="weight_info"><span>m</span><span class="small_font">1</span><span class="equal_sign">=</span><span class="value">50</span><span>g</span></div><div class="speed_info hide_dom"><span>v</span><span class="small_font">1</span><span class="equal_sign">=-</span><span class="speed">-0.1</span><span>m/s</span></div><div class="car_rope"></div></div><div class="mclaw_right_car"><div class="car_body"></div><div class="car_front_wheel"></div><div class="car_behind_wheel"></div><div class="car_wheel_shadow"></div><div class="weight_lay_area"></div><a class="layed_weight_1"><i class="weight_icon"></i> </a><a class="layed_weight_2"><i class="weight_icon"></i></a><div class="weight_info"><span>m</span><span class="small_font">2</span><span class="equal_sign">=</span><span class="value">50</span><span>g</span></div><div class="speed_info hide_dom"><span>v</span><span class="small_font">2</span><span class="equal_sign">=</span><span class="speed">0.1</span><span>m/s</span></div><div class="car_rope"></div></div><div class="mclaw_rope"></div><div class="mclaw_scissors hide_dom"><div class="mclaw_scissors_head"></div><div class="mclaw_scissors_front"></div><div class="mclaw_scissors_behind"></div></div><div class="mclaw_spring"><div class="spring" style="width: 100%;height: 100%"></div><div class="spring_shadow"></div></div></div></div><div class="left_car_railings"></div><div class="right_car_railings"></div><div class="mclaw_toolbar"><div class="mclaw_weight_area"><a class="weight weight_100g"><i class="weight_icon"></i> </a><i class="weight_shodow_icon_100"></i> <a class="weight weight_50g"><i class="weight_icon"></i> </a><i class="weight_shodow_icon_50"></i> <a class="weight weight_10g"><i class="weight_icon"></i> </a><i class="weight_shodow_icon_10"></i></div><div class="mc_law_mid_btns"><a class="com_btns btns-primary line_break_btn"><span class="btns-primary-txt" data-bind="text:cutLine"></span> </a><a class="com_btns btns-primary state_reset_btn click_disabled"><span class="btns-primary-txt" data-bind="text:resetState"></span></a></div><div class="mc_law_rihgt_btns"><a class="reset_btn"><span class="reset_btn_imgcnt"><i class="reset_btn_icon"></i> </span><span class="reset_btn_text" data-bind="text:resetAll"></span></a></div></div></div></div></div>]]></view><presenter><![CDATA[/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(1);
	__webpack_require__(5);
	__webpack_require__(3);
	__webpack_require__(4);
	module.exports = __webpack_require__(2);


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _ViewController = __webpack_require__(2);

	var _utils = __webpack_require__(4);

	var _utils2 = _interopRequireDefault(_utils);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	'use strict';
	(function () {
	    var i18nModel = null;
	    var Presenter = BasicPresenter.extend({
	        metaInfo: {
	            name: "MomentumConservationLaw",
	            type: PresenterType.PRESENTER_COMPONENT
	        },
	        /**
	         * Presenter的初始化方法
	         * @private
	         */
	        $init: function $init() {
	            this._super();
	        },
	        /**
	         * Presenter对外暴露的方法
	         */
	        _service_: {
	            constructor: function constructor(parent) {
	                this.parent = parent;
	            },
	            setLocationProperties: function setLocationProperties(data) {
	                i18nModel = data || {};
	            },
	            getExtendData: function getExtendData() {
	                var options = {};
	                return options;
	            },
	            getQuestionInfo: function getQuestionInfo() {
	                return {
	                    id: '',
	                    type_code: 'MomentumConservationLaw',
	                    type_name: i18nModel['MomentumConservationLaw'],
	                    url: '',
	                    noExistStatistics: true,
	                    noNeedQuizProgress: true
	                };
	            }
	        },
	        getService: function getService() {
	            this._service_.constructor(this);
	            return this._service_;
	        },
	        /****以下开始为icPlayer的生命周期方法*****/
	        run: function run(view, model) {
	            if (!_utils2.default.isWebGLSupported()) return;
	            var $deferred = $.Deferred();
	            var _self = this;
	            ko.applyBindings(i18nModel, view);
	            _self.$view = $(view);
	            _self.model = model;
	            _self.controller = null;
	            _self.lang = null;
	            var data = model.__ExtendModel;
	            var runTime = this.currentRuntime;
	            if (this.currentRuntime === icCreatePlayer.RUNTIME.WEB) {
	                runTime = 'web';
	            } else if (this.currentRuntime === icCreatePlayer.RUNTIME.TEACHER_PC) {
	                runTime = 'pc';
	            } else if (this.currentRuntime === icCreatePlayer.RUNTIME.STUDENT_MOBILE) {
	                runTime = 'mobile';
	            }

	            /*this.$addEventListener('PLAYER.TOOL.MAXIMIZE', PresenterEventType.IC_PLAYER_EVENT, function () {
	                if (self.render) {
	                    self.render.restore();
	                }
	            });
	              this.$addEventListener('PLAYER.TOOL.MINIMIZE', PresenterEventType.IC_PLAYER_EVENT, function () {
	                if (self.render) {
	                    self.render.save();
	                }
	            });*/

	            _self.controller = _ViewController.Mom_ViewController.create(_self.$view, _self.basePath, _self.model);
	        },
	        __interface: {
	            resizeScreen: function resizeScreen(data) {
	                var _self = this;
	                _self.controller.zoom(data);
	            }
	        },
	        destroy: function destroy() {
	            this.controller.destroy();
	        },
	        setState: function setState(state) {},
	        getState: function getState() {}
	    }, "SubjectToolLauncher");

	    window.AddonMomentumConservationLaw_create = function () {
	        return new Presenter();
	    };
	})();

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.Mom_ViewController = undefined;

	var _Spring3D = __webpack_require__(3);

	var TOTAL_ENERGY = 5; //弹簧的初始弹性势能大小
	/**
	 * Created by Administrator on 2017/1/23.
	 */
	// define("Mom_ViewController", ["Mom_Spring3DView"], function(Spring) {

	var CAR_WEIGHT = 50; //小车重量
	var SPEED_INTERVAL = 2000; //速度提示停留时间
	var RESTORE_DURATION = 150;
	var DISTANCE = 0.1; //小车运动距离
	var DISTANCE_PERCENT = 0.268;
	var ARRAY_LENGTH = 3;
	var END_POSITION = "23.2%";
	var END_RAILINGS = "25.9%";
	var SCISSORS_ANIMATION = 1200;
	var SPRING_INTERVAL = 10;
	var spring_animation = 60;
	var ANIMATION_INTERVAL = 20;
	var counter100 = null;
	var counter50 = null;
	var counter10 = null;
	var isStateChanged = true;

	function find(clazz) {
	    document.getElementsByClassName(clazz);
	}

	function showEle(ele) {
	    $(ele).removeClass("hide_dom");
	}

	function hideEle(ele) {
	    $(ele).addClass("hide_dom");
	}

	function Car(dom, railings, weight, speed_dom, n) {
	    var obj = this;
	    var dom = $(dom);
	    var rail = $(railings);
	    var number = n;
	    var speed_dom = speed_dom;
	    var counters = new Array();
	    var weight = weight;
	    var originalLeft = '';
	    var railOriginal = '';
	    var animation = null;
	    obj.init = function () {
	        originalLeft = getCarLeft(dom);
	        railOriginal = getCarLeft(rail);
	    };
	    var getCarLeft = function getCarLeft(node) {
	        if (number == 1) {
	            return parseFloat($(node).css("left"));
	        } else {
	            return parseFloat($(node).css("right"));
	        }
	    };
	    var getRailLeft = function getRailLeft(node) {
	        return parseFloat($(node).css("left"));
	    };
	    obj.moving = function () {
	        dom.addClass("moving");
	    };
	    obj.animate = function (distance, flag) {
	        var duration = obj.getDuration();
	        dom.find(".car_front_wheel").addClass("roll");
	        dom.find(".car_behind_wheel").addClass("roll");
	        dom.find(".car_front_wheel").css({
	            "-webkit-animation-duration": duration / 2000 + "s",
	            "animation-duration": duration / 2000 + "s"
	        });
	        dom.find(".car_behind_wheel").css({
	            "-webkit-animation-duration": duration / 2000 + "s",
	            "animation-duration": duration / 2000 + "s"
	        });
	        setIntervalAnimation(distance, duration);
	    };
	    var requestFrameAnimation = function requestFrameAnimation(distance, duration) {
	        var count = duration / 1000 * 60;
	        var step = distance / (duration / 1000 * 60);
	        var carWidth = dom.width();
	        var railWidth = rail.width();
	        if (number == 1) {
	            dom.css({ transform: "translate(-" + carWidth + "px)" });
	            rail.css({ transform: "translate(-" + railWidth + "px)" });
	            counters.forEach(function (counter) {
	                counter.animate(-distance, duration);
	            });
	        } else {
	            dom.css({ transform: "translate(" + carWidth + "px)" });
	            rail.css({ transform: "translate(" + railWidth + "px)" });
	            counters.forEach(function (counter) {
	                counter.animate(distance, duration);
	            });
	        }
	        if (animation) cancelAnimationFrame(animation);
	        animation = requestAnimationFrame(function fn() {
	            count--;
	            carWidth = carWidth + step;
	            railWidth = railWidth + step;
	            if (number == 1) {
	                dom.css({ transform: "translate(-" + carWidth + "px)" });
	                rail.css({ transform: "translate(-" + railWidth + "px)" });
	            } else {
	                dom.css({ transform: "translate(" + carWidth + "px)" });
	                rail.css({ transform: "translate(" + railWidth + "px)" });
	            }
	            if (count > 0) {
	                animation = requestAnimationFrame(fn);
	            } else {
	                afterAnimation();
	            }
	        });
	    };
	    var setIntervalAnimation = function setIntervalAnimation(distance, duration) {
	        var count = duration / ANIMATION_INTERVAL;
	        var step = distance / count;
	        var carWidth = dom.width();
	        var railWidth = rail.width();
	        count--;
	        carWidth = carWidth + step;
	        railWidth = railWidth + step;
	        if (number == 1) {
	            dom.css({ transform: "translate(-" + carWidth + "px)" });
	            rail.css({ transform: "translate(-" + railWidth + "px)" });
	            counters.forEach(function (counter) {
	                counter.animate(-distance, duration);
	            });
	        } else {
	            dom.css({ transform: "translate(" + carWidth + "px)" });
	            rail.css({ transform: "translate(" + railWidth + "px)" });
	            counters.forEach(function (counter) {
	                counter.animate(distance, duration);
	            });
	        }
	        if (animation) clearInterval(animation);
	        animation = setInterval(function fn() {
	            count--;
	            carWidth = carWidth + step;
	            railWidth = railWidth + step;
	            if (number == 1) {
	                dom.css({ transform: "translate(-" + carWidth + "px)" });
	                rail.css({ transform: "translate(-" + railWidth + "px)" });
	            } else {
	                dom.css({ transform: "translate(" + carWidth + "px)" });
	                rail.css({ transform: "translate(" + railWidth + "px)" });
	            }
	            if (count == 0) {
	                animation = clearInterval(animation);
	                afterAnimation();
	            }
	        }, 20);
	    };
	    var afterAnimation = function afterAnimation() {
	        dom.find(".car_front_wheel").removeClass("roll");
	        dom.find(".car_behind_wheel").removeClass("roll");
	        var weight = getWeight();
	        var speed = (TOTAL_ENERGY / weight).toFixed(3);
	        var sum = (speed * weight).toFixed(2);
	        $(speed_dom).find(".speed").text(speed);
	        if (number == 1) $(speed_dom).find(".speed").text((-speed).toFixed(3));
	        if (sum != 5.00) {
	            speed_dom.find(".equal_sign").text('≈');
	        } else {
	            speed_dom.find(".equal_sign").text('=');
	        }
	        showEle(speed_dom);
	        // speedHide = setTimeout(function () {
	        //     hideEle(speed_dom);
	        // },SPEED_INTERVAL);
	    };
	    obj.hideSpeed = function () {
	        var weight = getWeight();
	        var speed = (TOTAL_ENERGY / weight).toFixed(3);
	        var sum = (speed * weight).toFixed(2);
	        hideEle(speed_dom);
	        if (isStateChanged) Controller.pushData(number, { weight: weight, speed: speed, sum: sum });
	    };
	    obj.add = function (counter) {
	        counters.push(counter);
	        gain(counter.getWeight());
	        setCounterLayOut(counter);
	    };
	    obj.detach = function (counter) {
	        var index = counters.indexOf(counter);
	        if (index == 1) counters.pop();else counters.shift();
	        gain(-counter.getWeight());
	        var lay = counter.getLocation();
	        lay.removeClass("weight_" + counter.getWeight() + "g");
	    };
	    obj.canReceive = function (moving_counter) {
	        var flag = false;
	        counters.forEach(function (counter) {
	            if (counter == moving_counter) flag = true;
	        });
	        if (!flag && counters.length < 2) flag = true;
	        return flag;
	    };
	    obj.getDroppable = function () {
	        return $(dom).find(".weight_lay_area");
	    };
	    obj.getDuration = function () {
	        var weight = getWeight();
	        return DISTANCE * weight / TOTAL_ENERGY * 1000;
	    };
	    obj.getOffsetLeft = function () {
	        return dom.offset().left;
	    };
	    obj.setOffsetLeft = function (ratio) {
	        var left = obj.getTranslateX(dom[0]);
	        var leftrail = obj.getTranslateX(rail[0]);
	        dom.css({ transform: "translate(" + left * ratio + "px)" });
	        rail.css({ transform: "translate(" + leftrail * ratio + "px)" });
	    };
	    obj.getTranslateX = function (obj) {
	        var translates = document.defaultView.getComputedStyle(obj, null).transform;
	        var list = translates.substring(7).split(',');
	        return list.length > 5 ? list[4] : 0;
	    };

	    obj.setCountersEnable = function () {
	        counters.forEach(function (counter) {
	            counter.enable();
	        });
	    };
	    obj.setCountersDisable = function () {
	        counters.forEach(function (counter) {
	            counter.disable();
	        });
	    };
	    var gain = function gain(gainWeight) {
	        var weight = getWeight();
	        weight += gainWeight;
	        $(dom).find(".value").text(weight);
	    };
	    var setCounterLayOut = function setCounterLayOut(counter) {
	        var lay1 = dom.find(".layed_weight_1");
	        var lay2 = dom.find(".layed_weight_2");
	        var location = counter.getLocation();
	        if (lay1.hasClass("weight_100g") || lay1.hasClass("weight_50g") || lay1.hasClass("weight_10g")) {
	            counter.setLocation(lay2);
	        } else {
	            counter.setLocation(lay1);
	        }
	    };
	    var getWeight = function getWeight() {
	        return parseFloat($(dom).find(".value").text());
	    };
	    var speedShow = null;
	    var speedHide = null;
	    var showData = null;
	    var showSpeed = function showSpeed(duration) {
	        stopWheel(duration);
	        var weight = getWeight();
	        var speed = (TOTAL_ENERGY / weight).toFixed(3);
	        var sum = (speed * weight).toFixed(2);
	        $(speed_dom).find(".speed").text(speed);
	        speedShow = setTimeout(function () {
	            showEle(speed_dom);
	        }, duration);
	        speedHide = setTimeout(function () {
	            hideEle(speed_dom);
	        }, duration + SPEED_INTERVAL);
	        showData = setTimeout(function () {
	            Controller.pushData(number, { weight: weight, speed: speed, sum: sum });
	        }, duration);
	    };
	    var stopWheel = function stopWheel(duration) {
	        if (!duration) {
	            dom.find(".car_front_wheel").removeClass("roll");
	            dom.find(".car_behind_wheel").removeClass("roll");
	        } else {
	            setTimeout(function () {
	                dom.find(".car_front_wheel").removeClass("roll");
	                dom.find(".car_behind_wheel").removeClass("roll");
	            }, duration);
	        }
	    };
	    obj.reset = function (isResetCounters, flag) {
	        dom.removeClass("moving");
	        isStateChanged = false;
	        if (isResetCounters) {
	            isStateChanged = true;
	            if (counters[0]) {
	                var counter = counters[0];
	                obj.detach(counters[0]);
	                counter.destroy();
	            }
	            if (counters[0]) {
	                var counter = counters[0];
	                obj.detach(counters[0]);
	                counter.destroy();
	            }
	        }
	        clearTimeout(speedShow);
	        clearTimeout(showData);
	        hideEle(speed_dom);
	        clearInterval(animation);
	        stopWheel();
	        counters.forEach(function (counter) {
	            if (flag != counter) counter.stop();
	        });
	        $(dom).removeAttr("style");
	        $(rail).removeAttr("style");
	    };
	}

	function Counterweight(dom, weight, containment, differ) {
	    var dom = $(dom);
	    var weight = weight;
	    var startleft = 0;
	    var starttop = 0;
	    var container = null;
	    var cloneCounter = null;
	    var location = "";
	    var lay_left = "";
	    var isDelete = false;
	    var containment = $(containment);
	    var draggable = null;
	    var differ = differ;
	    this.init = function (car1, car2) {
	        var obj = this;
	        draggable = dom.drag(containment, obj, car1, car2, RESTORE_DURATION, startDrag, "", dragEnd);
	    };
	    this.getDiffer = function () {
	        return differ;
	    };
	    var startDrag = function startDrag(car1, car2) {
	        var state = isStateChanged;
	        Controller.resetState(false, this);
	        isStateChanged = state;
	        if (startleft == 0) startleft = dom.css("left");
	        if (starttop == 0) starttop = dom.css("top");
	        var cloneNode = dom.clone();
	        this.setOpacity(1, 0.5);
	        dom.addClass("big");
	        cloneNode.appendTo(dom.parent());
	        cloneNode.addClass("moving");
	        cloneCounter = new Counterweight(cloneNode, weight, containment, differ);
	        cloneCounter.setLocation(this.getLocation(), true);
	        if (cloneNode.css("top") == starttop) {
	            if (weight == 100) counter100 = cloneCounter;else if (weight == 50) counter50 = cloneCounter;else counter10 = cloneCounter;
	        }
	        cloneCounter.init(car1, car2);
	        cloneCounter.disable();
	    };
	    var dragEnd = function dragEnd(car1, car2) {
	        var obj = this;
	        obj.setOpacity(1, 1);
	        if (touch(car1) && !touchOverHalf(car2)) {
	            touchHandler(car1, obj);
	        } else if (touch(car2)) {
	            touchHandler(car2, obj);
	        } else {
	            restore(obj);
	        }
	    };
	    var restore = function restore(obj) {
	        draggable.disable();
	        if (container) {
	            container.detach(obj);
	            container = null;
	            cloneCounter.destroy();
	            isStateChanged = true;
	        }
	        dom.animate({
	            left: startleft,
	            top: starttop
	        }, RESTORE_DURATION);
	        setTimeout(function () {
	            obj.destroy();
	            if (!cloneCounter.isDeleted()) cloneCounter.enable();
	        }, RESTORE_DURATION);
	    };
	    var touchHandler = function touchHandler(car, obj) {
	        if (container) {
	            container.detach(obj);
	            cloneCounter.destroy();
	        }
	        if (car.canReceive(obj)) {
	            if (container != car) isStateChanged = true;
	            container = car;
	            car.add(obj);
	            if (!cloneCounter.isDeleted()) cloneCounter.enable();
	        } else if (container) {
	            container = container;
	            container.add(obj);
	            if (!cloneCounter.isDeleted()) cloneCounter.enable();
	        } else {
	            restore(obj);
	        }
	    };
	    var touch = function touch(car) {
	        var droppable = car.getDroppable();
	        if ($(droppable).offset().left < $(dom).offset().left + $(dom).width() && $(dom).offset().left < $(droppable).offset().left + $(droppable).width() && $(dom).offset().top < $(droppable).offset().top + $(droppable).height() && $(droppable).offset().top < $(dom).offset().top + $(dom).height()
	        /*&& car.canReceive(obj)*/
	        ) {
	                return true;
	            }
	        return false;
	    };
	    var touchOverHalf = function touchOverHalf(car, obj) {
	        var droppable = car.getDroppable();
	        if ($(droppable).offset().left < $(dom).offset().left + $(dom).width() / 2 && car.canReceive(obj)) {
	            return true;
	        }
	        return false;
	    };
	    this.animate = function (d, duration) {
	        var left = lay_left + d;
	        $(dom).css({ left: left + "px" });
	    };
	    var reset = function reset() {
	        dom.css({
	            left: lay_left + "px"
	        });
	    };
	    this.stop = function () {
	        if (draggable) draggable.enable();
	        reset();
	    };
	    this.destroy = function () {
	        dom.remove();
	        isDelete = true;
	        delete this;
	    };
	    this.isDeleted = function () {
	        return isDelete;
	    };
	    this.getWeight = function () {
	        return weight;
	    };
	    this.height = function () {
	        return parseFloat(dom.css("height"));
	    };
	    this.setOffset = function (offset) {
	        dom.offset(offset);
	    };
	    this.hasClass = function (clazz) {
	        return dom.hasClass(clazz);
	    };
	    this.addClass = function (clazz) {
	        return dom.addClass(clazz);
	    };
	    this.removeClass = function (clazz) {
	        return dom.removeClass(clazz);
	    };
	    this.disable = function () {
	        $(dom).addClass("moving");
	        if (draggable) draggable.disable();
	    };
	    this.enable = function () {
	        $(dom).removeClass("moving");
	        if (draggable) draggable.enable();
	    };
	    this.getLocation = function () {
	        return location;
	    };
	    this.setLocation = function (locations, flag) {
	        location = locations;
	        if (!flag) {
	            location.addClass("weight_" + this.getWeight() + "g");
	            dom.offset({
	                left: locations.offset().left,
	                top: locations.offset().top + (locations.height() - dom.height())
	            });
	            lay_left = parseFloat($(dom).css("left"));
	            this.setOpacity(0);
	        }
	    };
	    this.removeClass = function (clazz) {
	        dom.removeClass(clazz);
	    };
	    this.setOpacity = function (value1, value2) {
	        dom.css({ opacity: value1 });
	        if (location) location.css({ opacity: value2 });
	    };
	}

	function ViewController($view, basePath, model) {
	    var self = this;
	    self.model = model;
	    self.view = $($view);
	    self.ratio = 1;
	    self.car1 = null;
	    self.car2 = null;
	    self.spring = null;
	    self.button_cutLine = null;
	    self.button_resetState = null;
	    self.button_resetAll = null;
	    self.buttonEvent = [];

	    var car1_dom, car1_speed, car2_dom, car2_speed, spring_dom, weight_100, weight_50, weight_10, rope, scissors, left_railings, right_railings, left_obstacle, inner_play_area, play_area, main_area, mclaw_main;
	    var array = new Array(2);
	    var timeoutEvent = [];

	    self.init = function () {
	        findView();
	        var differ = 0;
	        if (!self.isWidderScreen()) differ = 25;
	        self.car1 = new Car(car1_dom, left_railings, CAR_WEIGHT, car1_speed, 1);
	        self.car2 = new Car(car2_dom, right_railings, CAR_WEIGHT, car2_speed, 2);
	        counter100 = new Counterweight(weight_100, 100, mclaw_main, differ);
	        counter50 = new Counterweight(weight_50, 50, mclaw_main, differ);
	        counter10 = new Counterweight(weight_10, 10, mclaw_main, differ);
	        self.spring = _Spring3D.Mom_Spring3DView.create(basePath);
	        self.spring.draw(spring_dom.find(".spring"));
	        array[0] = new Array();
	        array[1] = new Array();
	        self.car1.init();
	        self.car2.init();
	        counter100.init(this.car1, this.car2);
	        counter50.init(this.car1, this.car2);
	        counter10.init(this.car1, this.car2);
	    };
	    self.pushData = function (n, data) {
	        array[n - 1].push(data);
	        if (array[n - 1].length > ARRAY_LENGTH) array[n - 1].shift();
	        setArrayView(n);
	    };
	    self.resetArrayView = function () {
	        array[0].splice(0, array[0].length);
	        array[1].splice(0, array[1].length);
	        setArrayView(1);
	        setArrayView(2);
	    };
	    self.springDown = function (t) {
	        var e1 = setTimeout(function () {
	            spring_dom.animate({
	                bottom: "5.3%"
	            }, RESTORE_DURATION);
	        }, t);
	        timeoutEvent.push(e1);
	        var e2 = setTimeout(function () {
	            spring_dom.addClass("drop");
	        }, t + RESTORE_DURATION);
	        timeoutEvent.push(e2);
	    };
	    self.resetSpring = function (ratio) {
	        self.spring.stop();
	        self.spring.reset(ratio);
	        spring_dom.stop();
	        timeoutEvent.forEach(function (event) {
	            clearTimeout(event);
	        });
	        timeoutEvent = [];
	        if (ratio == 4 / 3) {
	            spring_dom.css({ bottom: "2.83em" });
	        } else {
	            spring_dom.css({ bottom: "3.25em" });
	        }

	        spring_dom.removeClass("drop");
	    };
	    self.scissorsMove = function () {
	        showEle(scissors);
	        var e1 = setTimeout(function () {
	            scissors.addClass("close");
	        }, SCISSORS_ANIMATION / 2);
	        timeoutEvent.push(e1);
	        var e2 = setTimeout(function () {
	            hideEle(scissors);
	        }, SCISSORS_ANIMATION);
	        timeoutEvent.push(e2);
	        var e3 = setTimeout(function () {
	            hideEle(rope);
	            self.car1.moving();
	            self.car2.moving();
	        }, SCISSORS_ANIMATION);
	        timeoutEvent.push(e3);
	    };
	    self.resetScissors = function () {
	        scissors.removeClass("close");
	        showEle(rope);
	        hideEle(scissors);
	        timeoutEvent.forEach(function (event) {
	            clearTimeout(event);
	        });
	    };
	    self.setDisable = function () {
	        counter100.disable();
	        counter50.disable();
	        counter10.disable();
	        self.car1.setCountersDisable();
	        self.car2.setCountersDisable();
	    };
	    self.setEnable = function () {
	        counter100.enable();
	        counter50.enable();
	        counter10.enable();
	        self.car1.setCountersEnable();
	        self.car2.setCountersEnable();
	    };
	    self.getAnimationDistance = function () {
	        return self.car1.getOffsetLeft() - inner_play_area.offset().left;
	    };
	    self.isWidderScreen = function () {
	        return parseInt(mclaw_main.css("padding-left")) == 0;
	    };
	    self.destroy = function () {
	        self.spring.destroy();
	    };
	    var findView = function findView() {
	        car1_dom = self.view.find(".mclaw_left_car");
	        car1_speed = self.view.find(".mclaw_left_car .speed_info");
	        car2_dom = self.view.find(".mclaw_right_car");
	        car2_speed = self.view.find(".mclaw_right_car .speed_info");
	        spring_dom = self.view.find(".mclaw_spring");
	        weight_100 = self.view.find(".weight_100g");
	        weight_50 = self.view.find(".weight_50g");
	        weight_10 = self.view.find(".weight_10g");
	        rope = self.view.find(".mclaw_rope");
	        scissors = self.view.find(".mclaw_scissors");
	        left_railings = self.view.find(".left_car_railings");
	        right_railings = self.view.find(".right_car_railings");
	        left_obstacle = self.view.find(".mclaw_left_obstacle");
	        play_area = self.view.find(".mclaw_play_area");
	        inner_play_area = self.view.find(".mclaw_inner_player_area");
	        main_area = self.view.find(".mclaw_main_area");
	        mclaw_main = self.view.find(".mclaw_main");
	        self.button_cutLine = self.view.find(".line_break_btn");
	        self.button_resetState = self.view.find(".state_reset_btn");
	        self.button_resetAll = self.view.find(".reset_btn");
	    };
	    var setArrayView = function setArrayView(n) {
	        var data = array[n - 1];
	        var table = 'left';
	        if (n == 2) table = 'right';
	        setTdText(n, self.view.find("." + table + "_data_table").find(".row_2 .cell span"), data[0]);
	        setTdText(n, self.view.find("." + table + "_data_table").find(".row_3 .cell span"), data[1]);
	        setTdText(n, self.view.find("." + table + "_data_table").find(".row_4 .cell span"), data[2]);
	    };
	    var setTdText = function setTdText(n, tds, data) {
	        var speed, sum;
	        if (n == 1 && data) {
	            speed = (-data.speed).toFixed(3);
	            sum = (-data.sum).toFixed(2);
	        } else if (n == 2 && data) {
	            speed = parseFloat(data.speed).toFixed(3);
	            sum = parseFloat(data.sum).toFixed(2);
	        }
	        $(tds[0]).text(data ? data.weight : "");
	        $(tds[1]).text(data ? speed : "");
	        $(tds[2]).text(data ? sum : "");
	    };
	}

	var Controller = {
	    ratio: 1,
	    isReset: true,
	    create: function create($view, basePath, model) {
	        ViewController.call(this, $view, basePath, model);
	        var ins = Object.create(this);
	        ins.init();
	        ins.bindEvent();
	        return ins;
	    },
	    forbideFull: function forbideFull(full) {
	        var self = this;
	        player.controller.getEventBus().sendEvent("PLAYER.TOOL.FORBIDE_FULL", { id: self.model.$.unqiueId, isForbide: full });
	    },
	    render: function render() {},
	    bindEvent: function bindEvent() {
	        var self = this;
	        $(this.button_cutLine).on("click", function () {
	            if (self.button_cutLine.hasClass("click_disabled")) return;
	            self.cutLine();
	        });
	        $(this.button_resetState).on("click", function () {
	            if (self.button_resetState.hasClass("click_disabled")) return;
	            self.resetState();
	        });
	        $(this.button_resetAll).on("click", function () {
	            if (self.button_resetAll.hasClass("click_disabled")) return;
	            self.resetAll();
	        });
	    },
	    zoom: function zoom(data) {
	        console.log(data);
	        var self = this;
	        if (eval(data.ratio) == 3 / 4 || eval(data.ratio) == 0.9375) {
	            self.ratio = 1;
	        } else {
	            self.ratio = eval(data.ratio);
	        }
	        self.resetState(true, false);
	    },
	    cutLine: function cutLine() {
	        this.isReset = false;
	        this.setDisable();
	        this.button_cutLine.addClass("click_disabled");
	        this.scissorsMove();
	        var self = this;
	        self.forbideFull(true);
	        var car_animation_time = this.car1.getDuration() > this.car2.getDuration() ? this.car1.getDuration() : this.car2.getDuration();
	        spring_animation = car_animation_time * 0.06;
	        var distance = this.getAnimationDistance();
	        var e1 = setTimeout(function () {
	            self.car1.animate(distance);
	            self.car2.animate(distance);
	            self.spring.animate(SPRING_INTERVAL, spring_animation);
	            self.springDown(spring_animation);
	        }, SCISSORS_ANIMATION);
	        this.buttonEvent.push(e1);
	        var t = car_animation_time + SCISSORS_ANIMATION + SPEED_INTERVAL;
	        var e2 = setTimeout(function () {
	            self.button_resetState.removeClass("click_disabled");
	            self.setEnable();
	            self.buttonEvent = [];
	            self.forbideFull(false);
	        }, t);
	        this.buttonEvent.push(e2);
	        var e3 = setTimeout(function () {
	            self.car1.hideSpeed();
	            self.car2.hideSpeed();
	        }, t);
	        this.buttonEvent.push(e3);
	    },
	    resetState: function resetState(isResetAll, resetCounters) {
	        this.forbideFull(false);
	        this.isReset = true;
	        this.buttonEvent.forEach(function (event) {
	            clearTimeout(event);
	        });
	        this.buttonEvent = [];
	        this.button_cutLine.removeClass("click_disabled");
	        this.button_resetState.addClass("click_disabled");
	        this.setEnable();
	        this.resetSpring(this.ratio);
	        this.resetScissors();
	        this.car1.reset(isResetAll, resetCounters);
	        this.car2.reset(isResetAll, resetCounters);
	    },
	    resetAll: function resetAll() {
	        this.resetState(true);
	        this.resetArrayView();
	    },
	    destroy: function destroy() {
	        $(document.body).off('mouseup.sd mouseleave.sd touchend.sd touchcancel.sd mousemove.sd touchmove.sd');
	        $(document.body).off('click.sp touchend.sp');
	        this.destroy();
	    }
	    // return Controller;


	};exports.Mom_ViewController = Controller;

	// });

/***/ }),
/* 3 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	function SpringGeometry(options) {

	    //继承Geometry
	    THREE.Geometry.call(this);

	    this.radius = options.radius * options.gradient || 10; //弹簧半径
	    this.tube = options.tube * options.gradient || 1; //管道的半径
	    this.length = options.min_length * options.gradient || 80; //弹簧的长度
	    this.offset = options.offset * options.gradient || 0;
	    this.windingNumber = options.windingNumber || 10; //弹簧的圈数
	    this.radialSegments = options.radialSegments || 20; //外部周长的分割数-精度
	    this.tubularSegments = options.tubularSegments || 20; //管道周长的分割数-精度

	    this.setSpringVertices(this.radius, this.tube, this.length, this.windingNumber, this.radialSegments, this.tubularSegments, this.offset);
	    this.setSpringFaces(this.radius, this.tube, this.length, this.windingNumber, this.radialSegments, this.tubularSegments);

	    //面的法向量计算，这个函数用来计算每一个面归一化后的法向量，法向量垂直于面。计算之后的法向量被存放在了face.normal中。
	    this.computeFaceNormals();
	    //计算每一个顶点的法向量
	    this.computeVertexNormals();
	}
	SpringGeometry.prototype = Object.create(THREE.Geometry.prototype);
	SpringGeometry.prototype.constructor = SpringGeometry;
	//设置顶点坐标
	SpringGeometry.prototype.setSpringVertices = function (radius, tube, length, windingNumber, radialSegments, tubularSegments, offset) {

	    var geometry = this;

	    // 必要参数
	    radius = radius || 1; //弹簧半径
	    tube = tube || 0.15; //管道半径
	    length = length || 8; //弹簧长度
	    offset = offset || 0;

	    var Nw = windingNumber || 7; //弹簧的圈数
	    var Nr = radialSegments || 10; //外部周长的分割数
	    var Nt = tubularSegments || 10; //管道周长的分割数

	    //计算每段管道截面的增量
	    var deltaH = length / Nw / Nr;

	    var n = 0;
	    var v = new THREE.Vector3();

	    // 取得顶点坐标
	    for (var w = 0; w < Nw; w++) {
	        //圈数

	        for (var r = 0; r < Nr; r++) {
	            //外部周长的分割数

	            var phi = 2.0 * Math.PI * r / Nr; //外部周长的分割数

	            //管道横截面的中心z坐标
	            var h = deltaH * (Nr * w + r);

	            for (var t = 0; t < Nt; t++) {

	                var theta = 2.0 * Math.PI * t / Nt; //管道的分割角度

	                v.set(-(radius + tube * Math.cos(theta)) * Math.cos(phi), //x坐标
	                (radius + tube * Math.cos(theta)) * Math.sin(phi), //y坐标
	                -(tube * Math.sin(theta) + h - length / 2) + offset //z坐标
	                );

	                if (geometry.vertices[n]) geometry.vertices[n].copy(v);else geometry.vertices[n] = v.clone();
	                n++;
	            }
	        }
	    }

	    //两端封闭的横截面坐标
	    var w = Nw;
	    var r = 0;
	    //管道横截面的中心z坐标
	    var h = deltaH * (Nr * w + r);
	    for (var t = 0; t < Nt; t++) {
	        var phi = 0.0;
	        var theta = 2.0 * Math.PI * t / Nt;

	        v.set(-(radius + tube * Math.cos(theta)) * Math.cos(phi), (radius + tube * Math.cos(theta)) * Math.sin(phi), -(tube * Math.sin(theta) + h - length / 2));
	        if (geometry.vertices[n]) geometry.vertices[n].copy(v);else geometry.vertices[n] = v.clone();
	        n++;
	    }
	    //开始端管道横截面的中心坐标
	    v.set(radius, 0, -length / 2);
	    if (geometry.vertices[n]) geometry.vertices[n].copy(v);else geometry.vertices[n] = v.clone();
	    n++;

	    //结尾端管道横截面的中心坐标
	    v.set(radius, 0, length / 2);
	    if (geometry.vertices[n]) geometry.vertices[n].copy(v);else geometry.vertices[n] = v.clone();
	    n++;
	};
	//多边形面的生成
	SpringGeometry.prototype.setSpringFaces = function (radius, tube, length, windingNumber, radialSegments, tubularSegments) {

	    var geometry = this;

	    var Nw = windingNumber || 10;
	    var Nr = radialSegments || 10;
	    var Nt = tubularSegments || 10;

	    //弹簧表面
	    for (var w = 0; w < Nw; w++) {

	        for (var r = 0; r < Nr; r++) {

	            var w1 = w;
	            var w2 = r !== Nr - 1 ? w : w + 1;

	            var r1 = r;
	            var r2 = r !== Nr - 1 ? r + 1 : 0;

	            for (var t = 0; t < Nt; t++) {
	                var t1 = t;
	                var t2 = t !== Nt - 1 ? t + 1 : 0;

	                //顶点计算
	                var v1 = Nr * Nt * w1 + Nt * r1 + t1;
	                var v2 = Nr * Nt * w1 + Nt * r1 + t2;
	                var v3 = Nr * Nt * w2 + Nt * r2 + t1;
	                var v4 = Nr * Nt * w2 + Nt * r2 + t2;

	                //v1,v3,v4形成一个三角形面
	                geometry.faces.push(new THREE.Face3(v1, v3, v4));
	                //v4,v2,v1形成一个三角形面
	                geometry.faces.push(new THREE.Face3(v4, v2, v1));
	            }
	        }
	    }

	    //开始端管道横截面
	    var w = 0;
	    var r = 0;
	    for (var t = 0; t < Nt; t++) {
	        var t1 = t;
	        var t2 = t !== Nt - 1 ? t + 1 : 0;

	        //横截面的中心坐标和其他两点
	        var v1 = Nr * Nt * Nw + Nt;
	        var v2 = Nr * Nt * w + Nt * r + t1;
	        var v3 = Nr * Nt * w + Nt * r + t2;

	        geometry.faces.push(new THREE.Face3(v1, v2, v3));
	    }

	    //结尾端管道横截面
	    var w = Nw;
	    var r = 0;
	    for (var t = 0; t < Nt; t++) {

	        var t1 = t;
	        var t2 = t !== Nt - 1 ? t + 1 : 0;

	        var v1 = Nw * Nr * Nt + Nt + 1;
	        var v2 = Nr * Nt * w + Nt * r + t1;
	        var v3 = Nr * Nt * w + Nt * r + t2;

	        geometry.faces.push(new THREE.Face3(v1, v3, v2));
	    }
	};
	//重新计算顶点坐标
	SpringGeometry.prototype.updateSpringGeometry = function (radius, tube, length, gradient, offset) {

	    this.radius = radius * gradient || this.radius;
	    this.tube = tube * gradient || this.tube;
	    this.length = length * gradient || this.length;
	    this.offset = offset * gradient || this.offset;

	    this.setSpringVertices(this.radius, this.tube, this.length, this.windingNumber, this.radialSegments, this.tubularSegments, this.offset);

	    this.computeFaceNormals();
	    this.computeVertexNormals();

	    this.verticesNeedUpdate = true;
	    this.normalsNeedUpdate = true;
	};

	//全局变量容器
	var SPRING_DATA = {
	    radius: 4.5,
	    tube: 0.8,
	    min_length: 16,
	    length: 27,
	    windingNumber: 7,
	    radialSegments: 10,
	    tubularSegments: 10,
	    basePath: "",
	    gradient: 104,
	    offset: 0.45
	};

	var View = {
	    _scene: null,
	    _renderer: null,
	    _camera: null,

	    _domHeight: null,
	    _domWidth: null,
	    _springMinLength: SPRING_DATA.min_length,
	    _springLength: SPRING_DATA.length,
	    _springMesh: null,
	    _movement: null,
	    _springModel: null,
	    _option: {},

	    /**
	     * 初始化three环境
	     * @param $domBox dom的jq对象
	     */
	    _initThree: function _initThree($domBox) {
	        this._domWidth = $domBox.width();
	        this._domHeight = $domBox.height();
	        $.extend(this._option, SPRING_DATA);
	        this._option.gradient = this._domWidth / this._option.gradient;
	        this._renderer = new THREE.WebGLRenderer({
	            antialias: true,
	            alpha: true
	        });
	        this._renderer.setSize(this._domWidth, this._domHeight);
	        this._renderer.setPixelRatio(window.devicePixelRatio);
	        this._renderer.setClearColor(0x000000, 0);
	        this._renderer.shadowMap.enabled = true;
	        $domBox.append(this._renderer.domElement);
	        this._initScene();
	        this._initCamera();
	        this._initLight();
	        this._cubeMaterial = this._createCubeMap();

	        this._createSpring(this._springLength);
	    },

	    /**
	     * 初始化场景
	     */
	    _initScene: function _initScene() {
	        this._scene = new THREE.Scene();
	    },

	    /**
	     * 初始化相机
	     */
	    _initCamera: function _initCamera() {
	        var halfWidth = this._domWidth / 2;
	        var halfHeight = this._domHeight / 2;
	        var cameraFactor = halfWidth / halfHeight;
	        var cameraSize = {
	            left: -halfWidth / cameraFactor,
	            right: halfWidth / cameraFactor,
	            top: halfHeight / cameraFactor,
	            bottom: -halfHeight / cameraFactor
	        };
	        this._camera = new THREE.OrthographicCamera(0, 2 * cameraSize.right, cameraSize.top, cameraSize.bottom, -1000, 15000);
	        this._camera.position.x = 50;
	        this._camera.position.y = 0;
	        this._camera.position.z = 0;
	        this._camera.lookAt(this._scene.position);
	    },

	    /**
	     * 初始化基础光源
	     */
	    _initLight: function _initLight() {
	        var halfWidth = this._domWidth / 2;
	        var halfHeight = this._domHeight / 2;
	        var ambiLight = new THREE.AmbientLight(0x000000);
	        this._scene.add(ambiLight);
	        var spotLight = new THREE.PointLight(0xffffff);
	        spotLight.position.set(-200, 0, 0);
	        var target = new THREE.Object3D();
	        target.position.set(0, 0, -800);
	        spotLight.target = target;
	        spotLight.intensity = 1;
	        // this._scene.add(spotLight);

	        var spotLight1 = new THREE.SpotLight(0xffffff);
	        spotLight1.position.set(500, 300, -200);
	        var target1 = new THREE.Object3D();
	        target1.position.set(0, 0, 0);
	        spotLight1.target1 = target1;
	        spotLight1.intensity = 0.7;
	        this._scene.add(spotLight1);

	        var spotLight2 = new THREE.SpotLight(0xffffff);
	        spotLight2.position.set(500, 300, -100);
	        var target2 = new THREE.Object3D();
	        target2.position.set(0, 0, 0);
	        spotLight2.target = target2;
	        spotLight2.intensity = 1;
	        this._scene.add(spotLight2);
	    },

	    _createCubeMap: function _createCubeMap() {
	        // var $defer = $.Defer();
	        var path = this._option.basePath + 'resources/img_3d/';
	        var format = '.png';
	        var urls = [path + 'posx' + format, path + 'negx' + format, path + 'posy' + format, path + 'negy' + format, path + 'posy' + format, path + 'negx2' + format];
	        var textureCube = new THREE.CubeTextureLoader().load(urls);

	        textureCube.format = THREE.RGBFormat;

	        var cubeMaterial = new THREE.MeshPhongMaterial({
	            envMap: textureCube,
	            color: 0xffffff,
	            specular: 0xffffff,
	            emissive: 0x000000,
	            // wireframe: true,
	            shininess: 1000
	        });
	        cubeMaterial.reflectivity = 1.2;
	        // var cubeMaterial = new THREE.MeshBasicMaterial({
	        //   envMap: textureCube,
	        //   color: 0xffffff
	        // })
	        // cubeMaterial.reflectivity = 1.4;
	        return cubeMaterial;
	    },

	    /**
	     * 创建弹簧mesh
	     * @param length 弹簧的长度
	     */
	    _createSpring: function _createSpring(length) {
	        //弹簧和球衔接的地方单位为10
	        var springGeo = new SpringGeometry(this._option);
	        this._springMesh = new THREE.Mesh(springGeo, this._cubeMaterial);
	        this._springMesh.position.z = -this._domHeight / 2 - 0.3;
	        this._scene.add(this._springMesh);
	    },

	    create: function create(basePath) {
	        var ins = Object.create(this);
	        SPRING_DATA.basePath = basePath;
	        return ins;
	    },

	    /**
	     *
	     * @param dom 容器
	     */
	    draw: function draw(dom) {
	        var self = this;
	        self.$dom = $(dom);
	        self._initThree(self.$dom);

	        //  开启requestAnimationFrame
	        self.threeRender = function renderScene() {
	            requestAnimationFrame(renderScene.bind(self));
	            self._renderer.render(self._scene, self._camera);
	        };
	        self.threeRender();
	    },

	    /**
	     * 弹簧弹开运动动画
	     */
	    animate: function animate(period, duration) {
	        var self = this;
	        if (self._movement) clearInterval(self._movement);
	        var frameTime = 0;
	        self._movement = setInterval(function () {
	            if (frameTime > duration) {
	                self.stop();
	                return;
	            }
	            var angle = frameTime * (Math.PI / 2) / duration;
	            var length = (self._springLength - self._springMinLength) * Math.sin(angle) + self._springLength;
	            self._springMesh.geometry.updateSpringGeometry(self._option.radius, self._option.tube, length, self._option.gradient, self._option.offset);
	            frameTime = frameTime + period;
	        }, period);
	    },

	    stop: function stop() {
	        if (this._movement) clearInterval(this._movement);
	    },

	    reset: function reset(ratio) {
	        this.stop();
	        // this._springMesh.geometry.updateSpringGeometry(this._option.radius, this._option.tube, this._option.min_length, this._option.gradient, this._option.offset);
	        this._springMesh.geometry.updateSpringGeometry(this._option.radius, this._option.tube * ratio, this._option.min_length * ratio, this._option.gradient, this._option.offset * ratio);
	    },
	    destroy: function destroy() {
	        $(document.body).off('touchmove mousemove');
	        $(document.body).off('touchend mouseup');
	    }
	};

	exports.Mom_Spring3DView = View;

/***/ }),
/* 4 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Utils = function () {
	  function Utils() {
	    _classCallCheck(this, Utils);
	  }

	  _createClass(Utils, null, [{
	    key: 'isWebGLSupported',
	    value: function isWebGLSupported() {
	      var contextOptions = {
	        stencil: true
	      };
	      try {
	        if (!window.WebGLRenderingContext) {
	          return false;
	        }

	        var canvas = document.createElement('canvas'),
	            gl = canvas.getContext('webgl', contextOptions) || canvas.getContext('experimental-webgl', contextOptions);

	        return !!(gl && gl.getContextAttributes().stencil);
	      } catch (e) {
	        return false;
	      }
	    }
	  }]);

	  return Utils;
	}();

	exports.default = Utils;

/***/ }),
/* 5 */
/***/ (function(module, exports) {

	"use strict";

	/**
	 * Created by Administrator on 2017/2/10.
	 */
	$.fn.extend({
	    /**
	     *
	     * 扩展jQuery原型，实现鼠标事件模拟元素拖动
	     * drag中的回调函数this指向被拖动元素
	     * @ method: drag
	     * @ use: $( selector ).drag( dragStart, dragMove, dragEnd )
	     * @ param { function } 第一个参数，准备拖动处理函数
	     * @ param { function } 第二个参数，拖动中处理函数
	     * @ param { function } 第三个参数，拖动结束处理函数
	     * @ reutrn { jQuery( selector ) }
	     *
	     */
	    drag: function drag(container, obj, car1, car2, duration, dragStart, dragMove, dragEnd) {
	        var that = this;
	        var containment = $(container);
	        var RESTORE_DURATION = duration;
	        var disabled = false;
	        function computeXY(dragElem, x, y, clientX, clientY, differ) {
	            if (containment) {
	                var flag = false;
	                var width = $(dragElem).width();
	                var height = $(dragElem).find(".weight_icon").height();
	                var container_top = containment.offset().top + parseFloat(containment.css("padding-top"));
	                var container_bottom = container_top + containment.height();
	                var container_left = containment.offset().left + parseFloat(containment.css("padding-left"));
	                var container_right = container_left + containment.width();
	                if (clientX < container_left || clientX > container_right || clientY < container_top || clientY > container_bottom - differ) {
	                    flag = true;
	                }
	                if (x < container_left) x = container_left;else if (x + width > container_right) x = container_right - width;
	                if (y < container_top) y = container_top;else if (y + height > container_bottom) y = container_bottom - height;
	            }
	            return {
	                x: x,
	                y: y,
	                flag: flag
	            };
	        }
	        function drag(dragElem, event) {
	            var offsetX, offsetY, beforePageX, beforePageY;

	            if ($.isFunction(dragStart)) {
	                dragStart.apply(obj, [car1, car2]);
	            }

	            // 移动前或移动中的元素位置
	            offsetX = $(dragElem).offset().left;
	            offsetY = $(dragElem).offset().top;

	            // 移动前或移动中的鼠标位置
	            beforePageX = event.clientX;
	            beforePageY = event.clientY;

	            if (document.addEventListener) {
	                document.addEventListener('mousemove', moveHandle, false);
	                document.addEventListener('mouseup', upHandle, false);
	            } else if (document.attachEvent) {
	                dragElem.setCapture(); // 将dragElem鼠标事件继承到文档进行捕获
	                dragElem.attachEvent('onmousemove', moveHandle);
	                dragElem.attachEvent('onmouseup', upHandle);
	                dragElem.attachEvent('onlosecapture', upHandle);
	            }

	            // 鼠标移动事件处理
	            function moveHandle(event) {
	                var event = event || window.event;
	                // 更新移动中或移动终止后的元素位置
	                var nowPageX = event.clientX;
	                var nowPageY = event.clientY;
	                var x = offsetX + nowPageX - beforePageX;
	                var y = offsetY + nowPageY - beforePageY;
	                var position = computeXY(dragElem, x, y, nowPageX, nowPageY, 0);
	                $(dragElem).offset({
	                    left: position.x,
	                    top: position.y
	                });

	                // 阻止事件传播
	                if (event.stopPropagation) {
	                    event.stopPropagation();
	                } else if (event.cancleBubble) {
	                    event.cancleBubble = true;
	                }
	                if ($.isFunction(dragMove)) {
	                    dragMove.apply(obj);
	                }
	                if (position.flag) {
	                    upHandle(event);
	                }
	            }

	            // 鼠标弹起事件处理
	            function upHandle(event) {
	                if (document.addEventListener) {
	                    document.removeEventListener('mousemove', moveHandle, false);
	                    document.removeEventListener('mouseup', upHandle, false);
	                } else if (document.detachEvent) {
	                    dragElem.detachEvent('onlosecapture', upHandle);
	                    dragElem.detachEvent('onmouseup', upHandle);
	                    dragElem.detachEvent('onmousemove', moveHandle);
	                    dragElem.releaseCapture();
	                }
	                if (event.stopPropagation) {
	                    event.stopPropagation();
	                } else if (event.cancleBubble) {
	                    event.cancleBubble = true;
	                }

	                if ($.isFunction(dragEnd)) {
	                    dragEnd.apply(obj, [car1, car2]);
	                }
	            }
	        }
	        function touchdrag(dragElem, event) {
	            event.preventDefault();
	            var offsetX, offsetY, beforePageX, beforePageY;

	            if ($.isFunction(dragStart)) {
	                dragStart.apply(obj, [car1, car2]);
	            }

	            // 移动前或移动中的元素位置
	            offsetX = $(dragElem).offset().left;
	            offsetY = $(dragElem).offset().top;

	            // 移动前或移动中的鼠标位置
	            var touch = event.originalEvent.touches[0];
	            beforePageX = touch.clientX;
	            beforePageY = touch.clientY;

	            if (document.addEventListener) {
	                document.addEventListener('touchmove', moveHandle, false);
	                document.addEventListener('touchend', upHandle, false);
	            } else if (document.attachEvent) {
	                dragElem.setCapture(); // 将dragElem鼠标事件继承到文档进行捕获
	                dragElem.attachEvent('ontouchmove', moveHandle);
	                dragElem.attachEvent('ontouchend', upHandle);
	                dragElem.attachEvent('onlosecapture', upHandle);
	                dragElem.attachEvent('ontouchcancel', upHandle);
	            }

	            // 鼠标移动事件处理
	            function moveHandle(event) {
	                var event = event || window.event;
	                var touch = event.touches[0];
	                var nowPageX = touch.clientX;
	                var nowPageY = touch.clientY;
	                // 更新移动中或移动终止后的元素位置
	                var x = offsetX + touch.clientX - beforePageX;
	                var y = offsetY + touch.clientY - beforePageY;
	                var position = computeXY(dragElem, x, y, nowPageX, nowPageY, obj.getDiffer());
	                $(dragElem).offset({
	                    left: position.x,
	                    top: position.y
	                });

	                // 阻止事件传播
	                if (event.stopPropagation) {
	                    event.stopPropagation();
	                } else if (event.cancleBubble) {
	                    event.cancleBubble = true;
	                }

	                if ($.isFunction(dragMove)) {
	                    dragMove.apply(obj);
	                }
	                if (position.flag) {
	                    upHandle(event);
	                }
	            }
	            // 鼠标弹起事件处理
	            function upHandle(event) {
	                event.preventDefault();
	                if (document.addEventListener) {
	                    document.removeEventListener('touchmove', moveHandle, false);
	                    document.removeEventListener('touchend', upHandle, false);
	                } else if (document.detachEvent) {
	                    dragElem.detachEvent('onlosecapture', upHandle);
	                    dragElem.detachEvent('ontouchend', upHandle);
	                    dragElem.detachEvent('ontouchmove', moveHandle);
	                    dragElem.releaseCapture();
	                }
	                if (event.stopPropagation) {
	                    event.stopPropagation();
	                } else if (event.cancleBubble) {
	                    event.cancleBubble = true;
	                }

	                if ($.isFunction(dragEnd)) {
	                    dragEnd.apply(obj, [car1, car2]);
	                }
	            }
	        }
	        $(that).each(function () {
	            $(that).bind('mousedown', function (e) {
	                if (disabled) return;
	                var dragElem = that,
	                    event = e;
	                drag(dragElem, event);
	            });
	            $(that).bind('touchstart', function (e) {
	                if (disabled) return;
	                var dragElem = that,
	                    event = e;
	                touchdrag(dragElem, event);
	            });
	        });
	        that.disable = function () {
	            disabled = true;
	        };
	        that.enable = function () {
	            disabled = false;
	        };
	        return that;
	    }
	});

/***/ })
/******/ ]);]]></presenter><resources><file src="./resources/img_3d/negx.png"/><file src="./resources/img_3d/negx2.png"/><file src="./resources/img_3d/negy.png"/><file src="./resources/img_3d/negz.png"/><file src="./resources/img_3d/posx.png"/><file src="./resources/img_3d/posy.png"/><file src="./resources/img_3d/posz.png"/><file src="./resources/wood/icons/icon_246x143.png"/><file src="./resources/wood/icons/icon_56x50.png"/><file src="./resources/wood/icons/icon.png"/><file src="./resources/wood/icons/smallicon.png"/><file src="./resources/wood/images/bg_road.png"/><file src="./resources/wood/images/break_rope.png"/><file src="./resources/wood/images/car_body.png"/><file src="./resources/wood/images/car_body2.png"/><file src="./resources/wood/images/car_wheel.png"/><file src="./resources/wood/images/left_obstacle.png"/><file src="./resources/wood/images/m_g.png"/><file src="./resources/wood/images/mv_gms.png"/><file src="./resources/wood/images/railings.png"/><file src="./resources/wood/images/reset_btns.png"/><file src="./resources/wood/images/right_obstacle.png"/><file src="./resources/wood/images/rope.png"/><file src="./resources/wood/images/scissor_behind.png"/><file src="./resources/wood/images/scissor_front.png"/><file src="./resources/wood/images/scissor_head.png"/><file src="./resources/wood/images/scissor_head2.png"/><file src="./resources/wood/images/spring_shadow.png"/><file src="./resources/wood/images/v_ms.png"/><file src="./resources/wood/images/weight_100g_big.png"/><file src="./resources/wood/images/weight_100g_shadow.png"/><file src="./resources/wood/images/weight_100g.png"/><file src="./resources/wood/images/weight_10g_big.png"/><file src="./resources/wood/images/weight_10g_shadow.png"/><file src="./resources/wood/images/weight_10g.png"/><file src="./resources/wood/images/weight_50g_big.png"/><file src="./resources/wood/images/weight_50g_shadow.png"/><file src="./resources/wood/images/weight_50g.png"/><file src="./resources/wood/images/wheel_shadow.png"/></resources></addon>