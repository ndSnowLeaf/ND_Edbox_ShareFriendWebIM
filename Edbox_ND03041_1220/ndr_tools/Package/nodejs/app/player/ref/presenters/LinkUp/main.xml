<?xml version='1.0' encoding='UTF-8' ?>
<addon id='LinkUp'>
<properties>

                <property name="question_id" displayName="题目ID" type="string" isLocalized="false" />
                <property name="question_url" displayName="题目内容" type="string" isLocalized="false" />
                <property name="timer_type" displayName="计时类型" type="string" isLocalized="false" />
                <property name="time_limit" displayName="时间" type="string" isLocalized="false" />
                <property name="spirit_root" displayName="动画精灵文件的跟目录(不同皮肤用)" type="string" isLocalized="false" />

</properties>

<dependencies>

<jsDependency>
    <javaScript  name="qtiSupport" version="5.0.0" />
    <javaScript  name="pixi" version="4.5.2" />
    <javaScript  name="messagebox" version="1.0.1" />
</jsDependency>


</dependencies>

<css>



</css>


<view>


</view>


<presenter>

<![CDATA[(function () {
    var Presenter = BasicPresenter.extend({
        /**
         * Presenter的初始化方法
         * @private
         */
        $init: function () {
            this._super();
            this.model = [];
            this.componentSetting = {};
        },
        /****以下开始为icPlayer的生命周期方法*****/
        run: function (view, model) {
            view.style['width'] = 0;
            view.style['height'] = 0;
            var self = this;
            self._getCompareContent(model).then(function () {
                //适配颗粒中定义的数据
                self._adaptedOriginData(model);
                //构建组件配置
                self._configComponents();
                //加载启动器
                self.model.push({
                    name: "Components",
                    type: "json",
                    text: JSON.stringify(self.componentSetting)
                });
            }).then(function () {
                return self.$requireComponent('ComponentLoader', self.model, $(view));
            });
        },
        destroy: function () {},
        /****以下开始为Presenter的私有方法*****/
        _adaptedOriginData: function (model) {
            // 添加题型所需要的数据            this.model.push({                "name": "questionType",                "type": "string",
            // "value": "LinkupRemake"            });
            this.model.push({
                name: 'ClassroomStatusController',
                type: 'string',
                value: JSON.stringify([
                    {
                        name: 'questionId',
                        type: 'string',
                        value: model.question_id
                    }
                ])
            });
            this.model.push({
                name: "TimerController",
                type: "string",
                value: JSON.stringify([
                    {
                        name: "timer_type",
                        type: "string",
                        value: model.question_url.timer.timer_type
                    }, {
                        name: "time_limit",
                        type: "string",
                        value: model.question_url.timer.time_limit
                    }
                ])
            });
            this.model.push({
                name: "InteractionSubmitButton",
                type: "string",
                value: JSON.stringify([
                    {
                        name: "can_modify",
                        type: "string",
                        value: false
                    }, {
                        name: "linkQuestionType",
                        type: "string",
                        value: "linkup"
                    }, {
                        name: "linkQuestionId",
                        type: "string",
                        value: model.question_id
                    }, {
                        name: "view_type",
                        type: "string",
                        value: "new_em_button"
                    }
                ])
            });
            this.model.push({
                name: "LinkupRemake",
                type: "string",
                value: JSON.stringify([
                    {
                        "name": "question_id",
                        "type": "string",
                        "value": model.question_id
                    }, {
                        name: "question_url",
                        type: "json",
                        text: JSON.stringify(model.question_url)
                    }
                ])
            });
            this.model.push({
                name: "ObjectiveInteractionLayout",
                type: "string",
                value: JSON.stringify([
                    {
                        name: "questionType",
                        type: "string",
                        value: "LinkUp"
                    }
                ])
            });
            this.model.push({
                name: "AnswerFlowController",
                type: "string",
                value: JSON.stringify([
                    {
                        name: "showResultOnSubmit",
                        type: "string",
                        value: "true"
                    }
                ])
            });
            this.model.push({name: "ObjectiveStatisticsRemake", type: "string", value: JSON.stringify([])});
            this.model.push({
                name: "InteractionTimer",
                type: "string",
                value: JSON.stringify([
                    {
                        "name": "view_type",
                        "type": "string",
                        "value": "new_timer"
                    }
                ])
            });
        },
        _configComponents: function () {
            //根据不同的运行场景定义需要加载的组件
            if (this.isPPTShell || this.currentRuntime == icCreatePlayer.RUNTIME.WEB) {
                //如果是PPTShell的场景
                this.componentSetting = {
                    controllers: [
                        {
                            presenter: "InteractionStateRecoverFilter"
                        }, {
                            presenter: "I18nFilter"
                        }, {
                            presenter: "AnswerFlowController",
                            depends: [
                                {
                                    property: "TimerService",
                                    presenter: "TimerController"
                                }
                            ]
                        }, {
                            presenter: "ObjectiveStatController"
                        }, {
                            presenter: 'ClassroomStatusController'
                        }
                    ],
                    layout: "ObjectiveInteractionLayout",
                    components: [
                        {
                            presenter: "InteractionTimer",
                            renderTo: "TopLeftPanel"
                        }, {
                            presenter: "InteractionSubmitButton",
                            renderTo: "BottomPanel"
                        }, {
                            presenter: "LinkupRemake",
                            renderTo: "CenterPanel"
                        }, {
                            presenter: "ObjectiveStatisticsRemake",
                            renderTo: "StatisticsPanel"
                        }
                    ]
                };
            } else if (this.isApp) {
                //如果是学生端Pad或Web的场景
                this.componentSetting = {
                    controllers: [
                        {
                            presenter: "InteractionStateRecoverFilter"
                        }, {
                            presenter: "I18nFilter"
                        }, {
                            presenter: "AnswerFlowController",
                            depends: [
                                {
                                    property: "TimerService",
                                    presenter: "TimerController"
                                }
                            ]
                        }, {
                            presenter: "AnswerProgressController"
                        }
                    ],
                    layout: "ObjectiveInteractionLayout",
                    components: [
                        {
                            presenter: "InteractionTimer",
                            renderTo: "TopLeftPanel"
                        }, {
                            presenter: "InteractionSubmitButton",
                            renderTo: "TopRightPanel"
                        }, {
                            presenter: "LinkupRemake",
                            renderTo: "CenterPanel"
                        }
                    ]
                };
            }
        },
        _getCompareContent: function (model) {
            var deffer = $.Deferred();
            if (typeof model.question_url === 'string') {
                //旧版数据，使用xml描述题型数据,在课件中存储皮肤和精灵文件数据
                var newQuestionUrl = {
                    skin: {
                        code: 'wood'
                    },
                    timer: {
                        timer_type: 'sequence',
                        time_limit: 300
                    },
                    title: '',
                    items: []
                };
                //读取时间信息
                newQuestionUrl.timer.timer_type = model.timer_type;
                newQuestionUrl.timer.time_limit = model.time_limit;
                //读取qti数据
                var refPath = icCreatePlayer.ref_path;
                var xmlUrl = model.question_url;
                var qtiDtd = $.Deferred();
                QtiPlayerOldStyle.load(xmlUrl, {
                    refPath: refPath
                }, function (modelInfo) {
                    //异步获取xml数据
                    var itemModel = modelInfo.model[0];
                    //解析题目标题
                    var prompt = itemModel.prompt;
                    newQuestionUrl.title = $(prompt).html().replace(/&nbsp;/ig, '');
                    //解析选项
                    var simpleMatchSet = itemModel.simpleMatchSet;
                    var sourceList = simpleMatchSet[0];
                    var targetList = simpleMatchSet[1];
                    //解析qti模型中选项的数据
                    var _parseHtml = function (text) {
                        var result = {
                            id: 'test1',
                            item_type: 'text',
                            text: ''
                        };
                        if (text.indexOf('<img') === 0) {
                            var tmp = /src="(.*?)"/gi.exec(text);
                            var src = tmp[1];
                            result = {
                                item_type: 'image',
                                href: src
                            };
                        } else {
                            var html = $(text).html();
                            html = html.replace(/\&nbsp\;/ig, '');
                            html = html.replace(/\&lt\;/ig, '<');
                            html = html.replace(/\&gt\;/ig, '>');
                            html = html.replace(/\&amp\;/ig, '&');
                            html = html.replace(/\&quot\;/ig, '"');
                            html = html.replace(/\&apos\;/ig, "'");
                            result = {
                                item_type: 'text',
                                text: html
                            };
                        }
                        return result;
                    };
                    var source,
                        target;
                    for (var index = 0; index < sourceList.length; index++) {
                        source = _parseHtml(sourceList[index].content);
                        source.id = sourceList[index].identifier;
                        target = _parseHtml(targetList[index].content);
                        target.id = targetList[index].identifier;
                        newQuestionUrl.items.push({source: source, target: target});
                    }
                    qtiDtd.resolve();
                });
                //读取pixi精灵配置数据
                var resourcesPath = model.spirit_root;
                if (resourcesPath[resourcesPath.length - 1] != '/') {
                    resourcesPath += '/';
                }
                var skinDtd = $.Deferred();
                $.ajax({
                    url: resourcesPath + 'skin.json',
                    type: 'GET',
                    dataType: 'json',
                    success: function (skinInfo) {
                        //判断皮肤类型
                        switch (skinInfo.key) {
                            case 'linkup_wood':
                                newQuestionUrl.skin.code = 'wood';
                                break;
                            case 'linkup_sky':
                                newQuestionUrl.skin.code = 'sky';
                                break;
                        }
                        skinDtd.resolve();
                    },
                    error: function () {
                        newQuestionUrl.skin.code = 'wood'; //默认木纹皮肤
                        skinDtd.resolve();
                    }
                });

                $.when(qtiDtd, skinDtd).done(function () {
                    //旧数据转换完成
                    model.question_url = newQuestionUrl;
                    deffer.resolve();
                });
            } else {
                //新数据结构，不需要转换
                deffer.resolve();
            }
            return deffer.promise();
        }
    });

    window.AddonLinkUp_create = function () {
        return new Presenter();
    };
})();

]]>

</presenter>


<resources>


</resources>

</addon>