<?xml version='1.0' encoding='UTF-8'?>
<addon id="templateid"><properties/><dependencies><jsDependency><javaScript name="basicPresenter" version="1.0.5"/><javaScript name="AlamedaRequire" version="0.3.2"/><javaScript name="knockout" version="3.3.0"/><javaScript name="tools_common" version="1.0.0"/><javaScript name="snap_svg" version="0.4.1"/></jsDependency></dependencies><css><![CDATA[.exam_skin_wood .parallel-lines .visi_hide{visibility:hidden}.exam_skin_wood .parallel-lines{width:100%;height:100%;background:#bfd3e2;position:relative}.exam_skin_wood .parallel-lines .parallel-lines_content_wrapper{width:80em;height:100%;position:absolute;left:50%;top:0;margin:0 0 0 -40em;padding:2.66667em 4.16667em 5.83333em;overflow:hidden}.exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_svg_content{display:inline-block;width:47.08333em;height:100%;position:absolute;top:2.66667em;left:0}.exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_svg_content .parallel-lines_svg{width:100%;height:100%}.exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_svg_content text{font-family:Times New Roman,Times,serif;font-weight:700}.exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box{display:inline-block;width:32.91667em;padding-right:4.16667em;height:100%;background-color:#afc7d8;position:absolute;top:2.66667em;right:0;font-weight:700}.exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box span{display:inline-block;vertical-align:top}.exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .font-size_48{font-size:2em}.exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .font-size_60{font-size:2.5em;font-family:Times New Roman,Times,serif}.exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .change_angle_01,.exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .change_angle_02{font-family:Times New Roman,Times,serif}.exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .show-deg_text-box{width:100%;height:100%;text-align:left;padding:6.25em 0 0 2.08333em}.exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .show-deg_text-box .text-item{height:6.25em;line-height:6.25em}.exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .show-deg_text-box .text-item .item,.exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .text-item .item{display:inline-block;width:50%}.exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .text_angle-relation .text-item,.exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .text_derivational-process .text-item{height:4.16667em;line-height:4.16667em}.exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .text-title{text-align:center;height:5.20833em;line-height:5.20833em}.exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .text_angle-relation,.exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .text_conclusion,.exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .text_derivational-process{padding-left:1.25em}.exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .text_conclusion .text-item{text-align:left;line-height:2.29167em;margin-top:1.66667em}.exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .exterior-interior-angle_text-box .text_derivational-process{text-align:center}.exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .exterior-interior-angle_text-box .text_derivational-process .text-item{display:inline-block;text-align:left;width:70%}.exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .alternate-angle_text-box .text_derivational-process{padding-top:.83333em}.exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .padding_93{padding-left:3.875em}.exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .padding_60{padding-left:2.5em}.exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .padding_70{padding-left:2.91667em}.exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .same-side-interior-angle_text-box .text_derivational-process{padding-top:.83333em;text-align:left}.exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .same-side-interior-angle_text-box .text_derivational-process .text-item{display:inline-block;text-align:left;height:2.91667em;line-height:2.91667em}.exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .same-side-interior-angle_text-box .text_angle-relation .text-item{height:2.91667em;line-height:2.91667em}.exam_skin_wood .parallel-lines .parallel-lines_tool_btns{position:absolute;left:0;bottom:0;width:100%;height:5.83333em;padding:0 4.16667em;background:#cfdee9;z-index:9}.exam_skin_wood .parallel-lines .tool_btns_main{height:100%;position:relative;text-align:center}.exam_skin_wood .parallel-lines .parallel-lines_tool_btns .com_btns{min-width:7.83333em;height:3.08333em;line-height:3.08333em;margin:0 .41667em;padding:0 .83333em}.exam_skin_wood .parallel-lines .parallel-lines_tool_btns .btns-primary-txt{font-size:1.5em}.exam_skin_wood .parallel-lines .tool_btns_main_box{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.exam_skin_wood .parallel-lines .tool_btns_main_box_left,.exam_skin_wood .parallel-lines .tool_btns_main_box_right{height:5.83333em;padding-top:1.25em}.exam_skin_wood .parallel-lines .tool_btns_main_box_left{width:42.91667em;border-right:1px solid #e1eef7}.exam_skin_wood .parallel-lines .tool_btns_main_box_right{width:28.75em;border-left:1px solid #bac8d2}.typefaces_long .exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .text-title{margin-top:.83333em;padding-left:1.25em;line-height:1.83333em;text-align:left}.typefaces_long .exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .text_conclusion .text-item{line-height:1.33333em}.typefaces_long .exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .text_conclusion .text-item .font-size_48{font-size:1.41667em}.typefaces_long .exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .text_conclusion .padding_93{padding-left:0}.typefaces_long .exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .alternate-angle_text-box .font-size_48,.typefaces_long .exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .alternate-angle_text-box .font-size_60{font-size:1.75em}.typefaces_long .exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .alternate-angle_text-box .text_angle-relation .text-item,.typefaces_long .exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .alternate-angle_text-box .text_derivational-process .text-item{height:2.5em;line-height:2.5em}.typefaces_long .exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .alternate-angle_text-box .text_angle-relation{overflow:hidden;margin-top:.83333em;text-align:left}.typefaces_long .exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .alternate-angle_text-box .text_angle-relation .text-item{float:left;width:45%}.typefaces_long .exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .alternate-angle_text-box .text_angle-relation .text-item:first-child{padding-left:1.75em;width:55%}.typefaces_long .exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .alternate-angle_text-box .text_derivational-process{padding-top:0}.typefaces_long .exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .alternate-angle_text-box .text_derivational-process .text-item{text-align:left}.typefaces_long .exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .alternate-angle_text-box .text_derivational-process .text-item:first-child .item{width:45%}.typefaces_long .exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .alternate-angle_text-box .text_derivational-process .text-item:first-child .item:nth-child(1){width:55%}.typefaces_long .exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .alternate-angle_text-box .text_derivational-process .text-item:nth-child(2){height:auto}.typefaces_long .exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .alternate-angle_text-box .text_derivational-process .text-item:nth-child(2) .item{display:block}.typefaces_long .exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .alternate-angle_text-box .text_derivational-process .text-item:nth-child(2) .item:nth-child(2){width:auto}.typefaces_long .exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .alternate-angle_text-box .text_derivational-process .text-item:nth-child(2) .item:nth-child(2) .font-size_48{display:inline-block;width:55%}.typefaces_long .exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .alternate-angle_text-box .text_conclusion{margin-top:3.33333em}.typefaces_long .exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .alternate-angle_text-box .text_conclusion .text-item{margin-top:1.66667em}.typefaces_long .exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .exterior-interior-angle_text-box .font-size_48{font-size:1.75em}.typefaces_long .exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .exterior-interior-angle_text-box .font-size_60{font-size:2.08333em}.typefaces_long .exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .exterior-interior-angle_text-box .text_angle-relation .text-item,.typefaces_long .exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .exterior-interior-angle_text-box .text_derivational-process .text-item{height:2.91667em;line-height:2.91667em}.typefaces_long .exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .exterior-interior-angle_text-box .text_derivational-process{margin-top:.83333em}.typefaces_long .exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .same-side-interior-angle_text-box{text-align:left}.typefaces_long .exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .same-side-interior-angle_text-box .font-size_48,.typefaces_long .exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .same-side-interior-angle_text-box .font-size_60{font-size:1.75em}.typefaces_long .exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .same-side-interior-angle_text-box .text_angle-relation .text-item,.typefaces_long .exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .same-side-interior-angle_text-box .text_derivational-process .text-item{height:2.5em;line-height:2.5em}.typefaces_long .exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .same-side-interior-angle_text-box .text_angle-relation{margin-top:.41667em;padding-left:3.33333em}.typefaces_long .exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .same-side-interior-angle_text-box .text_derivational-process .padding_70{padding-left:1.875em}.typefaces_long .exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .same-side-interior-angle_text-box .text_derivational-process .padding_70 .font-size_48{padding-right:.83333em}.typefaces_long .exam_skin_wood .parallel-lines .parallel-lines_tool_btns .com_btns:after{content:"";display:inline-block;width:0;height:100%;vertical-align:middle}.typefaces_long .exam_skin_wood .parallel-lines .parallel-lines_tool_btns .btns-primary-txt{display:inline-block;overflow:hidden;width:96%;max-height:100%;font-size:1.16667em;letter-spacing:-.8px;vertical-align:middle}.typefaces_long .exam_skin_wood .parallel-lines .tool_btns_main_box_left{overflow:hidden;width:50.83333em}.typefaces_long .exam_skin_wood .parallel-lines .tool_btns_main_box_left .com_btns{margin:0 0 0 .41667em;float:left;padding:.2em .1em .3em;line-height:1.25em}.typefaces_long .exam_skin_wood .parallel-lines .tool_btns_main_box_left .com_btns:first-child{max-width:8.20833em}.typefaces_long .exam_skin_wood .parallel-lines .tool_btns_main_box_left .com_btns:nth-child(2),.typefaces_long .exam_skin_wood .parallel-lines .tool_btns_main_box_left .com_btns:nth-child(3){max-width:12.91667em}.typefaces_long .exam_skin_wood .parallel-lines .tool_btns_main_box_left .com_btns:nth-child(4){max-width:13.95833em}.typefaces_long .exam_skin_wood .parallel-lines .tool_btns_main_box_right{overflow:hidden;width:21.875em}.typefaces_long .exam_skin_wood .parallel-lines .tool_btns_main_box_right .com_btns{float:left;overflow:hidden;margin:0 0 0 .625em;width:7.66667em;padding:.2em .1em .3em;line-height:1.25em}.typefaces_long .exam_skin_wood .parallel-lines .tool_btns_main_box_right .com_btns:nth-child(3){padding:0;width:3.08333em;min-width:0;border:none;background:0 0}.typefaces_long .exam_skin_wood .parallel-lines .tool_btns_main_box_right .com_btns:nth-child(3) .btns-primary-txt{width:100%;height:100%;text-indent:-999em;background:url(resources/wood/images/tool_reset_nor.png) no-repeat 50%;background-size:2.5em auto}.typefaces_long .exam_skin_wood .parallel-lines .tool_btns_main_box_right .com_btns:nth-child(3).ui_btn_active .btns-primary-txt,.typefaces_long .exam_skin_wood .parallel-lines .tool_btns_main_box_right .com_btns:nth-child(3):active .btns-primary-txt{background-image:url(resources/wood/images/tool_reset_act.png)}.typefaces_long .exam_skin_wood .parallel-lines .tool_btns_main_box_right .com_btns:nth-child(3).click_disabled .btns-primary-txt{background-image:url(resources/wood/images/tool_reset_dis.png)}.typefaces_ru_RU .exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .text-title{margin-top:.83333em;padding-left:1.25em;line-height:1.83333em;text-align:left}.typefaces_ru_RU .exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .text_conclusion .text-item{line-height:1.33333em}.typefaces_ru_RU .exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .text_conclusion .text-item .font-size_48{font-size:1.41667em}.typefaces_ru_RU .exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .text_conclusion .padding_93{padding-left:0}.typefaces_ru_RU .exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .alternate-angle_text-box .font-size_48,.typefaces_ru_RU .exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .alternate-angle_text-box .font-size_60{font-size:1.75em}.typefaces_ru_RU .exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .alternate-angle_text-box .text_angle-relation .text-item,.typefaces_ru_RU .exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .alternate-angle_text-box .text_derivational-process .text-item{height:2.5em;line-height:2.5em}.typefaces_ru_RU .exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .alternate-angle_text-box .text_angle-relation{overflow:hidden;margin-top:.83333em;text-align:left}.typefaces_ru_RU .exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .alternate-angle_text-box .text_angle-relation .text-item{float:left;width:45%}.typefaces_ru_RU .exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .alternate-angle_text-box .text_angle-relation .text-item:first-child{padding-left:1.75em;width:55%}.typefaces_ru_RU .exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .alternate-angle_text-box .text_derivational-process{padding-top:0}.typefaces_ru_RU .exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .alternate-angle_text-box .text_derivational-process .text-item{text-align:left}.typefaces_ru_RU .exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .alternate-angle_text-box .text_derivational-process .text-item:first-child .item{width:45%}.typefaces_ru_RU .exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .alternate-angle_text-box .text_derivational-process .text-item:first-child .item:nth-child(1){width:55%}.typefaces_ru_RU .exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .alternate-angle_text-box .text_derivational-process .text-item:nth-child(2){height:auto}.typefaces_ru_RU .exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .alternate-angle_text-box .text_derivational-process .text-item:nth-child(2) .item{display:block}.typefaces_ru_RU .exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .alternate-angle_text-box .text_derivational-process .text-item:nth-child(2) .item:nth-child(2){width:auto}.typefaces_ru_RU .exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .alternate-angle_text-box .text_derivational-process .text-item:nth-child(2) .item:nth-child(2) .font-size_48{display:inline-block;width:55%}.typefaces_ru_RU .exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .alternate-angle_text-box .text_conclusion{margin-top:3.33333em}.typefaces_ru_RU .exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .alternate-angle_text-box .text_conclusion .text-item{margin-top:1.66667em}.typefaces_ru_RU .exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .exterior-interior-angle_text-box .font-size_48{font-size:1.75em}.typefaces_ru_RU .exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .exterior-interior-angle_text-box .font-size_60{font-size:2.08333em}.typefaces_ru_RU .exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .exterior-interior-angle_text-box .text_angle-relation .text-item,.typefaces_ru_RU .exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .exterior-interior-angle_text-box .text_derivational-process .text-item{height:2.91667em;line-height:2.91667em}.typefaces_ru_RU .exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .exterior-interior-angle_text-box .text_derivational-process{margin-top:.83333em}.typefaces_ru_RU .exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .same-side-interior-angle_text-box{text-align:left}.typefaces_ru_RU .exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .same-side-interior-angle_text-box .font-size_48,.typefaces_ru_RU .exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .same-side-interior-angle_text-box .font-size_60{font-size:1.75em}.typefaces_ru_RU .exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .same-side-interior-angle_text-box .text_angle-relation .text-item,.typefaces_ru_RU .exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .same-side-interior-angle_text-box .text_derivational-process .text-item{height:2.5em;line-height:2.5em}.typefaces_ru_RU .exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .same-side-interior-angle_text-box .text_angle-relation{margin-top:.41667em;padding-left:3.33333em}.typefaces_ru_RU .exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .same-side-interior-angle_text-box .text_derivational-process .padding_70{padding-left:1.875em}.typefaces_ru_RU .exam_skin_wood .parallel-lines .parallel-lines_content_wrapper .parallel-lines_describe_box .same-side-interior-angle_text-box .text_derivational-process .padding_70 .font-size_48{padding-right:.83333em}.typefaces_ru_RU .exam_skin_wood .parallel-lines .parallel-lines_tool_btns .com_btns:after{content:"";display:inline-block;width:0;height:100%;vertical-align:middle}.typefaces_ru_RU .exam_skin_wood .parallel-lines .parallel-lines_tool_btns .btns-primary-txt{display:inline-block;overflow:hidden;width:96%;max-height:100%;font-size:1.16667em;letter-spacing:-.8px;vertical-align:middle}.typefaces_ru_RU .exam_skin_wood .parallel-lines .tool_btns_main_box_left{overflow:hidden;width:50.83333em}.typefaces_ru_RU .exam_skin_wood .parallel-lines .tool_btns_main_box_left .com_btns{margin:0 0 0 .41667em;float:left;padding:.2em .1em .3em;line-height:1.25em}.typefaces_ru_RU .exam_skin_wood .parallel-lines .tool_btns_main_box_left .com_btns:first-child{max-width:8.20833em}.typefaces_ru_RU .exam_skin_wood .parallel-lines .tool_btns_main_box_left .com_btns:nth-child(2),.typefaces_ru_RU .exam_skin_wood .parallel-lines .tool_btns_main_box_left .com_btns:nth-child(3){max-width:12.91667em}.typefaces_ru_RU .exam_skin_wood .parallel-lines .tool_btns_main_box_left .com_btns:nth-child(4){max-width:13.95833em}.typefaces_ru_RU .exam_skin_wood .parallel-lines .tool_btns_main_box_right{overflow:hidden;width:21.875em}.typefaces_ru_RU .exam_skin_wood .parallel-lines .tool_btns_main_box_right .com_btns{float:left;overflow:hidden;margin:0 0 0 .625em;width:7.66667em;padding:.2em .1em .3em;line-height:1.25em}.typefaces_ru_RU .exam_skin_wood .parallel-lines .tool_btns_main_box_right .com_btns:nth-child(3){padding:0;width:3.08333em;min-width:0;border:none;background:0 0}.typefaces_ru_RU .exam_skin_wood .parallel-lines .tool_btns_main_box_right .com_btns:nth-child(3) .btns-primary-txt{width:100%;height:100%;text-indent:-999em;background:url(resources/wood/images/tool_reset_nor.png) no-repeat 50%;background-size:2.5em auto}.typefaces_ru_RU .exam_skin_wood .parallel-lines .tool_btns_main_box_right .com_btns:nth-child(3).ui_btn_active .btns-primary-txt,.typefaces_ru_RU .exam_skin_wood .parallel-lines .tool_btns_main_box_right .com_btns:nth-child(3):active .btns-primary-txt{background-image:url(resources/wood/images/tool_reset_act.png)}.typefaces_ru_RU .exam_skin_wood .parallel-lines .tool_btns_main_box_right .com_btns:nth-child(3).click_disabled .btns-primary-txt{background-image:url(resources/wood/images/tool_reset_dis.png)}]]></css><view><![CDATA[<div class="exam_skin_wood"><div class="parallel-lines"><div class="parallel-lines_content_wrapper"><div class="parallel-lines_svg_content"><svg id="PropertiesOfParallelLines2D_svg" class="parallel-lines_svg" viewBox="0 0 1000 1000"></svg></div><div class="parallel-lines_describe_box"><div class="show-deg_text-box hide_dom"><p class="text-item"><span class="font-size_60 item">∠1 = <span class="change_angle_01">45°</span></span><span class="font-size_60 item"> ∠2 = <span class="change_angle_02">135°</span></span></p><p class="text-item"><span class="font-size_60 item">∠3 = <span class="change_angle_02">135°</span></span><span class="font-size_60 item">∠4 = <span class="change_angle_01">45°</span></span></p><p class="text-item"><span class="font-size_60 item">∠5 = <span class="change_angle_01">45°</span></span><span class="font-size_60 item">∠6 = <span class="change_angle_02">135°</span></span></p><p class="text-item"><span class="font-size_60 item">∠7 = <span class="change_angle_02">135°</span></span><span class="font-size_60 item"> ∠8 = <span class="change_angle_01">45°</span></span></p></div><div class="exterior-interior-angle_text-box hide_dom"><div class="text-title"><span class="font-size_48" data-bind="text:exteriorTitle"></span></div><div class="text_derivational-process"><p class="text-item"><span class="font-size_60">∠1 =∠5 = <span class="change_angle_01">45°</span></span></p><p class="text-item"><span class="font-size_60">∠2 =∠6 = <span class="change_angle_02">135°</span></span></p><p class="text-item"><span class="font-size_60">∠3 =∠7 = <span class="change_angle_02">135°</span></span></p><p class="text-item"><span class="font-size_60">∠4 =∠8 = <span class="change_angle_01">45°</span></span></p></div><div class="text_conclusion"><p class="text-item"><span class="font-size_48" data-bind="text:exteriorConclusion_1"></span></p><p class="text-item"><span class="font-size_48"><span data-bind="text:conclusion_2"></span><br><span class="padding_93" data-bind="text:exteriorConclusion_3"></span></span></p></div></div><div class="alternate-angle_text-box hide_dom"><div class="text-title"><span class="font-size_48" data-bind="text:alternateTitle"></span></div><div class="text_angle-relation"><p class="text-item"><span class="font-size_60">∠3 =∠6 = <span class="change_angle_02">135°</span></span></p><p class="text-item"><span class="font-size_60">∠4 =∠5 = <span class="change_angle_01">45°</span></span></p></div><div class="text_derivational-process"><p class="text-item"><span class="font-size_60 item">∵∠1 =∠5</span><span class="font-size_60 item">∠1 =∠4</span></p><p class="text-item"><span class="font-size_60 item">∴∠4 =∠5</span><span class="item"><span class="font-size_48" data-bind="text:derivationalText"></span><span class="font-size_60">∠3 =∠6</span></span></p></div><div class="text_conclusion"><p class="text-item"><span class="font-size_48" data-bind="text:alternateConclusion_1"></span></p><p class="text-item"><span class="font-size_48"><span data-bind="text:conclusion_2"></span><br><span class="padding_93" data-bind="text:alternateConclusion_3"></span></span></p></div></div><div class="same-side-interior-angle_text-box hide_dom"><div class="text-title"><span class="font-size_48" data-bind="text:interiorTitle"></span></div><div class="text_angle-relation"><p class="text-item"><span class="font-size_60">∠3+∠5=<span class="change_angle_02">135°</span>+<span class="change_angle_01">45°</span>=180°</span></p><p class="text-item"><span class="font-size_60">∠4+∠6=<span class="change_angle_01">45°</span>+<span class="change_angle_02">135°</span>=180°</span></p></div><div class="text_derivational-process"><p class="text-item"><span class="font-size_60">∵∠1 =∠5</span></p><p class="text-item padding_60"><span class="font-size_60">∠1 +∠3 = 180°</span></p><p class="text-item"><span class="font-size_60">∴∠3 +∠5 = 180°</span></p><p class="text-item padding_70"><span class="font-size_48" data-bind="text:derivationalText"></span><span class="font-size_60">∠4 +∠6 = 180°</span></p></div><div class="text_conclusion"><p class="text-item"><span class="font-size_48" data-bind="text:interiorConclusion_1"></span></p><p class="text-item"><span class="font-size_48"><span data-bind="text:conclusion_2"></span><br><span class="padding_93" data-bind="text:interiorConclusion_3"></span></span></p></div></div></div></div><div class="parallel-lines_tool_btns"><div class="tool_btns_main clearfix tool_btns_main_box"><div class="tool_btns_main_box_left"><a class="com_btns btns-primary" href="javascript:;"><span class="btns-primary-txt" data-bind="text:angleNames"></span> </a><a class="com_btns btns-primary" href="javascript:;"><span class="btns-primary-txt" data-bind="text:exterior"></span> </a><a class="com_btns btns-primary" href="javascript:;"><span class="btns-primary-txt" data-bind="text:alternate"></span> </a><a class="com_btns btns-primary" href="javascript:;"><span class="btns-primary-txt" data-bind="text:interior"></span></a></div><div class="tool_btns_main_box_right"><a class="com_btns btns-primary click_disabled" href="javascript:;"><span class="btns-primary-txt" data-bind="text:derivational"></span> </a><a class="com_btns btns-primary click_disabled" href="javascript:;"><span class="btns-primary-txt" data-bind="text:conclusion"></span> </a><a class="com_btns btns-primary click_disabled" href="javascript:;"><span class="btns-primary-txt" data-bind="text:reset"></span></a></div></div></div></div></div>]]></view><presenter><![CDATA[/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(1);
	module.exports = __webpack_require__(2);


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _PropertiesOfParallelLines2D = __webpack_require__(2);

	(function () {
	    var i18nModel = null;
	    var Presenter = BasicPresenter.extend({
	        metaInfo: {
	            name: "PropertiesOfParallelLines2D",
	            type: PresenterType.PRESENTER_COMPONENT
	        },
	        /**
	         * Presenter的初始化方法
	         * @private
	         */
	        $init: function $init() {
	            this._super();
	        },
	        /**
	         * Presenter对外暴露的方法
	         */
	        _service_: {
	            constructor: function constructor(parent) {
	                this.parent = parent;
	            },
	            setLocationProperties: function setLocationProperties(data) {
	                i18nModel = data || {};
	            },
	            getExtendData: function getExtendData() {
	                var options = this.parent.controller.getData();
	                return options;
	            },
	            getQuestionInfo: function getQuestionInfo() {
	                return {
	                    id: '',
	                    type_code: 'PropertiesOfParallelLines2D',
	                    type_name: i18nModel['PropertiesOfParallelLinesTitle'],
	                    url: '',
	                    noExistStatistics: true,
	                    noNeedQuizProgress: true
	                };
	            }
	        },
	        getService: function getService() {
	            this._service_.constructor(this);
	            return this._service_;
	        },
	        /****以下开始为icPlayer的生命周期方法*****/
	        run: function run(view, model) {
	            var $deferred = $.Deferred();
	            var _self = this;
	            ko.applyBindings(i18nModel, view);
	            _self.$view = $(view);
	            _self.model = model;
	            _self.controller = null;
	            _self.lang = null;
	            var data = model.__ExtendModel;
	            var runTime = this.currentRuntime;
	            if (this.currentRuntime === icCreatePlayer.RUNTIME.WEB) {
	                runTime = 'web';
	            } else if (this.currentRuntime === icCreatePlayer.RUNTIME.TEACHER_PC) {
	                runTime = 'pc';
	            } else if (this.currentRuntime === icCreatePlayer.RUNTIME.STUDENT_MOBILE) {
	                runTime = 'mobile';
	            }
	            /*this.$addEventListener('PLAYER.TOOL.MAXIMIZE', PresenterEventType.IC_PLAYER_EVENT, function () {
	                if (self.render) {
	                    self.render.restore();
	                }
	            });
	              this.$addEventListener('PLAYER.TOOL.MINIMIZE', PresenterEventType.IC_PLAYER_EVENT, function () {
	                if (self.render) {
	                    self.render.save();
	                }
	            });*/

	            _self.controller = _PropertiesOfParallelLines2D.Controller.create(_self.$view);
	            _self.controller.render(data);
	        },
	        __interface: {
	            resizeScreen: function resizeScreen(data) {
	                console.log(data);
	                //data {ratio:4/3||3/4}
	            }
	        },
	        destroy: function destroy() {},
	        setState: function setState(state) {},
	        getState: function getState() {}
	    }, "SubjectToolLauncher");

	    window.AddonPropertiesOfParallelLines2D_create = function () {
	        return new Presenter();
	    };
	})();

/***/ }),
/* 2 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	// /**
	//  * Created by Administrator on 2016/12/23.
	//  */
	// define("PropertiesOfParallelLines", [], function() {
	//     //第一个参数是被克隆的对象，第二个参数是需要克隆的属性列表
	function cloneOwn() {
	    var obj = arguments[0];
	    if (typeof obj === 'undefined' || obj === null) return {};
	    if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== 'object') return obj;
	    //第二个参数是属性名称列表，就采用该列表进行刷选
	    //否则就克隆所有属性
	    var attrs = arguments[1];
	    var enable_spec_attr = true;
	    if (!(attrs instanceof Array)) {
	        //console.log(attrs);
	        attrs = obj;
	        enable_spec_attr = false;
	    }

	    var result = {};
	    var i;
	    for (i in attrs) {
	        var attr = enable_spec_attr ? attrs[i] : i;
	        //console.log(attr);
	        if (obj.hasOwnProperty(attr)) {
	            if (obj[attr] instanceof Array) {
	                result[attr] = cloneArray(obj[attr]);
	            } else if (_typeof(obj[attr]) === 'object') {
	                result[attr] = cloneOwn(obj[attr]);
	            } else {
	                result[attr] = obj[attr];
	            }
	        }
	    }

	    return result;
	}
	//克隆数组
	function cloneArray(array) {
	    if (typeof array === 'undefined' || array === null) return [];

	    if (!(array instanceof Array)) return [];

	    var result = [];

	    var i;
	    for (i in array) {
	        if (_typeof(array[i]) !== 'object') {
	            result[i] = array[i];
	            continue;
	        }

	        //clone object
	        result[i] = cloneOwn(array[i]);
	    }

	    return result;
	}
	//根据Class获取Dom节点
	function getByClass(parent, className) {
	    return $(parent).find(className);
	}
	//显示DOM
	function showElement(ele) {
	    $(ele).removeClass("hide_dom");
	}
	//隐藏DOM(设置当前dom)
	function hideElement(ele) {
	    $(ele).addClass("hide_dom");
	}
	//显示DOM
	function showText(ele) {
	    $(ele).removeClass("visi_hide");
	}
	//隐藏DOM(设置当前dom)
	function hideText(ele) {
	    $(ele).addClass("visi_hide");
	}

	function showElementByIndex(parent, index) {
	    $(parent[index]).removeClass("visi_hide");
	}

	function hideElementByIndex(parent, index) {
	    $(parent[index]).addClass("visi_hide");
	}
	//全局变量
	var isReset = false;

	var draggable = true;
	//svg
	var Svg = {
	    //strokeWidth
	    lineStrokeWidth: 8,
	    circleStrokeWidth: 5,
	    //填充区域点集
	    regionPoints: [Point(0, -50), Point(1100, -50), Point(1100, 850), Point(0, 850)],
	    regionPath: "M65,0L1025,0L1025,810L65,810z",
	    //角度颜色
	    colors: ["#0099ff", "#DE3B72", "#85A05D", '#DC742B', "#000000", "#DE3B72", "#85A05D", '#DC742B', "#000000"],
	    //角度的Group Id
	    gId: "angle",
	    //字体类别
	    // fontFamily: "微软雅黑",
	    //字体大小
	    fontSize: 95,
	    //根据Id获取Svg Group
	    getGroup: function getGroup(id) {
	        var g = Svg.getPager().select("#" + id);
	        if (g != null) return g;else {
	            g = Svg.getPager().g();
	            g.attr({ id: id });
	            return g;
	        }
	    },
	    //获取约束条件和目录孙函数的Svg Group
	    group: function group() {
	        return this.getGroup(this.gId);
	    },
	    //获取Svg
	    get: function get() {
	        return Snap("#PropertiesOfParallelLines2D_svg");
	    },
	    //获取Svg Pager
	    getPager: function getPager() {
	        return this.get().paper;
	    },
	    //画线
	    line: function line(points, stroke) {
	        if (points != null && points.length > 1) {
	            return this.getPager().line(points[0].x, points[0].y, points[1].x, points[1].y).attr({ stroke: stroke, strokeWidth: this.lineStrokeWidth });
	        }
	    },
	    //画文本
	    text: function text(point, _text, color) {
	        return this.getPager().text(point.x, point.y, _text).attr({ fontSize: this.fontSize, fill: color });
	    },
	    //画曲线
	    path: function path(pathString, color) {
	        return this.getPager().path(pathString).attr({ fill: "transparent", stroke: color, strokeWidth: this.circleStrokeWidth });
	    },
	    //画多边形
	    polygon: function polygon(points) {
	        if (points != null && points.length > 0) {
	            var length = points.length;
	            var result = new Array();
	            for (var i = 0; i < length; i++) {
	                var point = points[i];
	                result.push(point.x);
	                result.push(point.y);
	            }
	            return this.getPager().polygon(result);
	        }
	        return null;
	    },
	    getAttr: function getAttr(obj, attr) {
	        return obj.attr(attr);
	    },
	    //点是否在路径内部
	    isPointInside: function isPointInside(point, path) {
	        return Snap.path.isPointInside(path, point.x, point.y);
	    },
	    isPointInsideRegionPath: function isPointInsideRegionPath(point) {
	        return this.isPointInside(point, this.regionPath);
	    },
	    //两个路径的交点
	    intersection: function intersection(path1, path2) {
	        return Snap.path.intersection(path1, path2);
	    },
	    coordinateTransform: function coordinateTransform(point) {
	        var svgObj = document.getElementById("PropertiesOfParallelLines2D_svg");
	        var screenPoint = svgObj.createSVGPoint();
	        screenPoint.x = point.x;
	        screenPoint.y = point.y;
	        var CTM = svgObj.getScreenCTM();
	        return screenPoint.matrixTransform(CTM.inverse());
	    }

	    //坐标
	};function Point(x, y) {
	    var obj = {};
	    obj.x = x;
	    obj.y = y;
	    obj.toString = function () {
	        var str = "X:" + x + ",Y:" + y;
	        return str;
	    };
	    return obj;
	}

	//区域
	function Region(points, color) {
	    var obj = {};
	    obj.points = points;
	    obj.color = color;
	    obj.polygon = null;
	    obj.render = function () {
	        if (obj.polygon != null) obj.polygon.remove();
	        var polygon = Svg.polygon(this.points);
	        polygon.attr({ fill: obj.color, opacity: 0 });
	        obj.polygon = polygon;
	        obj.polygon.unclick();
	        // obj.mouserOver();
	    };
	    obj.mouserOver = function () {
	        this.polygon.hover(function () {
	            this.attr({ opacity: 0.3 });
	        }, function () {
	            this.attr({ opacity: 0 });
	        });
	    };
	    obj.getPath = function () {
	        return obj.path.attr("d");
	    };
	    obj.show = function () {
	        obj.path.attr({ display: "display" });
	    };
	    obj.hide = function () {
	        obj.path.attr({ display: "none" });
	    };
	    obj.click = function (angle, angles, clickType) {
	        obj.polygon.click(function () {
	            if (clickType == "correspondingAngles") angle.correspondingAnglesClick(angles);else if (clickType == "alternateAngles") angle.alternateAnglesClick(angles);else if (clickType == "interiorAnglesOnSameSide") angle.interiorAnglesOnSameSideClick(angles);
	        });
	    };
	    obj.unclick = function () {
	        obj.polygon.unclick();
	    };
	    obj.checkPoint = function (point) {
	        for (var c = false, i = -1, l = obj.points.length, j = l - 1; ++i < l; j = i) {
	            obj.points[i].y > point.y != obj.points[i].y > point.y && point.x < (obj.points[j].x - obj.points[i].x) * (point.y - obj.points[i].y) / (obj.points[j].y - obj.points[i].y) + obj.points[i].x && (c = !c);
	        }return c;
	    };
	    return obj;
	}

	//线
	function Line(points, color, name) {
	    var obj = {};
	    obj.points = points;
	    obj.color = color;
	    obj.path = "";
	    obj.pathregion = "";
	    obj.name = name;
	    obj.text = "";
	    obj.getLength = function (p1, p2) {
	        return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));
	    };
	    obj.render = function () {
	        if (obj.pathregion != "") obj.pathregion.remove();
	        obj.pathregion = Svg.line(this.points, color);
	        if (obj.path != "") obj.path.remove();
	        obj.path = Svg.line(this.points, color);
	        obj.path.attr({ strokeWidth: 30, opacity: 0 });
	        var point = obj.getNameLocation();
	        if (obj.text != "") obj.text.remove();
	        obj.text = Svg.text(point, obj.name, obj.color);
	        obj.path.mousedown(function () {
	            draggable = true;
	        });
	    };
	    obj.getK = function () {
	        var k = 0;
	        var x1, x2, y1, y2;
	        if (obj.path == "") {
	            x1 = obj.points[0].x;
	            x2 = obj.points[1].x;
	            y1 = obj.points[0].y;
	            y2 = obj.points[1].y;
	        } else {
	            x1 = obj.path.attr("x1");
	            x2 = obj.path.attr("x2");
	            y1 = obj.path.attr("y1");
	            y2 = obj.path.attr("y2");
	        }
	        if (x1 != x2) k = (y1 - y2) / (x1 - x2);else k = NaN;
	        return k;
	    };
	    obj.resetPoints = function (points) {
	        var point1 = Point(points[0] < 0 ? obj.path.attr("x1") : points[0], points[1] < 0 ? obj.path.attr("y1") : points[1]);
	        var point2 = Point(points[2] < 0 ? obj.path.attr("x2") : points[2], points[3] < 0 ? obj.path.attr("y2") : points[3]);
	        obj.points = [point1, point2];
	    };
	    obj.getPointFromLine = function (point, distance, k, direction) {
	        if (!isNaN(k) && Math.abs(k) != 0) {
	            var x = distance / Math.sqrt(1 + Math.pow(k, 2));
	            var y = Math.abs(k) * x;
	            if (k < 0) return Point(point.x + direction * x, point.y - direction * y);else return Point(point.x - direction * x, point.y - direction * y);
	        } else if (isNaN(k)) {
	            return Point(point.x, point.y - direction * distance);
	        } else {
	            return Point(point.x - direction * distance, point.y);
	        }
	    };
	    obj.getNameLocation_old = function () {
	        var k = obj.getK();
	        var x = Number(obj.path.attr("x1"));
	        var y = Number(obj.path.attr("y1"));
	        var b = y - k * x;
	        var lineDistance = 190;
	        if (k == 0) lineDistance = 100;
	        var point = obj.getPointFromLine(Point(x, y), lineDistance, k, -1);
	        var k1;
	        var direction = 1;
	        var distance = 20;
	        if (!isNaN(k) && Math.abs(k) != 0) {
	            k1 = -1 / k;
	            if (k < 0) distance = 60;
	        } else if (isNaN(k)) {
	            k1 = 0;
	            direction = -1;
	        } else {
	            k1 = NaN;
	        }
	        point = obj.getPointFromLine(point, distance, k1, direction);
	        return point;
	    };
	    obj.getRealLocation = function (k, point) {
	        if (!point.x) return;
	        var points = [];
	        var distance = 20;
	        if (k == 0) points.push(Point(point.x, point.y - distance));else if (isNaN(k)) points.push(Point(point.x - distance, point.y));else if (k < 0) {
	            distance = 50;
	            var b = distance * Math.sqrt(1 + Math.pow(1 / k, 2));
	            points.push(Point(point.x - b, point.y));
	            b = distance * Math.sqrt(1 + Math.pow(k, 2));
	            points.push(Point(point.x, point.y - b));
	        } else {
	            var b = distance * Math.sqrt(1 + Math.pow(1 / k, 2));
	            points.push(Point(point.x + b, point.y));
	            b = distance * Math.sqrt(1 + Math.pow(k, 2));
	            points.push(Point(point.x, point.y - b));
	        }
	        return points;
	    };
	    obj.getNameLocation = function () {
	        var k = obj.getK();
	        var regionLine1 = Line([Point(0, 70), Point(1100, 70)]);
	        var regionLine2 = Line([Point(100, -50), Point(100, 850)]);
	        var regionLine3 = Line([Point(900, -50), Point(900, 850)]);
	        var point1 = obj.getCrossPointOfLine(regionLine1);
	        var point2 = obj.getCrossPointOfLine(regionLine2);
	        var point3 = obj.getCrossPointOfLine(regionLine3);
	        var point;
	        if (k > 0) {
	            point1 = obj.getRealLocation(k, point1)[0];
	            point2 = obj.getRealLocation(k, point2)[1];
	            point = point1;
	            if (point1.x < point2.x) point = point2;
	        } else if (k < 0) {
	            point1 = obj.getRealLocation(k, point1)[0];
	            point3 = obj.getRealLocation(k, point3)[1];
	            point = point1;
	            if (point1.x > point3.x) point = point3;
	        } else if (k == 0) {
	            point = obj.getRealLocation(k, point2)[0];
	        } else {
	            point = obj.getRealLocation(k, point1)[0];
	        }
	        return point;
	    };
	    obj.resetNameLocation = function () {
	        var point = obj.getNameLocation();
	        obj.text.attr({ x: point.x, y: point.y });
	    };
	    obj.getPoint1 = function () {
	        if (obj.path == "") {
	            return obj.points[0];
	        } else {
	            return Point(obj.path.attr("x1"), obj.path.attr("y1"));
	        }
	    };
	    obj.getPoint2 = function () {
	        if (obj.path == "") {
	            return obj.points[1];
	        } else {
	            return Point(obj.path.attr("x2"), obj.path.attr("y2"));
	        }
	    };
	    obj.show = function () {
	        obj.path.attr({ display: "display", stroke: obj.color });
	    };
	    obj.hide = function () {
	        obj.path.attr({ display: "none" });
	    };
	    obj.checkPoint = function (point) {
	        var d1 = obj.getLength(point, Point(obj.path.attr("x1"), obj.path.attr("y1")));
	        var d2 = obj.getLength(point, Point(obj.path.attr("x2"), obj.path.attr("y2")));
	        var d = obj.getLength(Point(obj.path.attr("x1"), obj.path.attr("y1")), Point(obj.path.attr("x2"), obj.path.attr("y2")));
	        return d == d1 + d2 && d1 > 320 && d2 > 250;
	    };
	    obj.getCrossPointOfLine = function (line) {
	        var point = {};
	        var k1 = obj.getK();
	        var k2 = line.getK();
	        var y1, x1, y2, x2;
	        if (obj.path == "") {
	            y1 = obj.points[0].y;
	            x1 = obj.points[0].x;
	        } else {
	            y1 = obj.path.attr("y1");
	            x1 = obj.path.attr("x1");
	        }
	        if (line.path == "") {
	            y2 = line.points[0].y;
	            x2 = line.points[0].x;
	        } else {
	            y2 = line.path.attr("y1");
	            x2 = line.path.attr("x1");
	        }
	        var b1 = y1 - k1 * x1;
	        var b2 = y2 - k2 * x2;
	        if (k1 != k2) {
	            if (!isNaN(k1) && !isNaN(k2)) {
	                point.x = (b1 - b2) / (k2 - k1);
	                point.y = (b1 * k2 - b2 * k1) / (k2 - k1);
	            } else if (isNaN(k1)) {
	                point.x = x1;
	                point.y = k2 * x1 + b2;
	            } else {
	                point.x = x2;
	                point.y = k1 * x2 + b1;
	            }
	        }
	        return point;
	    };
	    obj.getCrossPointOfCircle = function (a, b, r) {
	        var inters = [];
	        var k = obj.getK();
	        if (!isNaN(k)) {
	            var dx = r / Math.sqrt(Math.pow(k, 2) + 1);
	            var dy = k * r / Math.sqrt(Math.pow(k, 2) + 1);
	            if (k >= 0) inters.push(Point(a - dx, b - dy), Point(a + dx, b + dy));else inters.push(Point(a + dx, b + dy), Point(a - dx, b - dy));
	        } else {
	            inters.push(Point(a, b - r), Point(a, b + r));
	        }
	        return inters;
	    };
	    obj.setPathPoints = function (points) {
	        if (points && points.length > 0) {
	            obj.path.attr({ x1: points[0].x, x2: points[1].x, y1: points[0].y, y2: points[1].y });
	            obj.pathregion.attr({ x1: points[0].x, x2: points[1].x, y1: points[0].y, y2: points[1].y });
	        }
	    };
	    obj.clone = function (line) {
	        var points = [];
	        points.push(Point(line.path.attr.x1, line.path.attr.y1));
	        points.push(Point(line.path.attr.x2, line.path.attr.y2));
	        obj.setPathPoints(points);
	        obj.resetNameLocation();
	    };
	    obj.reset = function () {
	        obj.render();
	    };
	    return obj;
	}

	//平行线
	function ParallelLines(points, color) {
	    var obj = {};
	    obj.color = color;
	    obj.mindistace = 200;
	    obj.lines = [Line(points.slice(0, 2), color, "a"), Line(points.slice(2), color, "b")];
	    obj.setRegion = function () {
	        var points1 = cloneArray(Svg.regionPoints);
	        points1[0].y = points1[0].y + obj.mindistace + 30;
	        points1[1].y = points1[0].y;
	        points1[2].y = Number(obj.lines[1].path.attr("y1")) - obj.mindistace;
	        points1[3].y = points1[2].y;
	        if (!obj.lines[0].region) obj.lines[0].region = Region(points1, "#FFF");else obj.lines[0].region.points = points1;
	        var points2 = cloneArray(Svg.regionPoints);
	        points2[0].y = Number(obj.lines[0].path.attr("y1")) + obj.mindistace;
	        points2[1].y = points2[0].y;
	        points2[2].y = points2[2].y - obj.mindistace + 50;
	        points2[3].y = points2[2].y;
	        if (!obj.lines[1].region) obj.lines[1].region = Region(points2, "#FFF");else obj.lines[1].region.points = points2;
	    };
	    obj.render = function () {
	        obj.lines[0].render();
	        obj.lines[1].render();
	        obj.setRegion();
	    };
	    obj.show = function () {
	        obj.lines[0].show();
	        obj.lines[1].show();
	    };
	    obj.hide = function () {
	        obj.lines[0].hide();
	        obj.lines[1].hide();
	    };
	    obj.move = function (slash, angles, button) {
	        obj.lines.forEach(function (line) {
	            line.path.drag(function (dx, dy, x, y, event) {
	                if (!draggable) return;
	                var point = Svg.coordinateTransform({ "x": x, "y": y });
	                y = point.y;
	                if (y < line.region.points[0].y || y > line.region.points[2].y) {
	                    if (!Svg.isPointInsideRegionPath(point)) draggable = false;
	                    return;
	                }
	                var originalY = this.attr("y1");
	                line.setPathPoints([Point(this.attr("x1"), y), Point(this.attr("x2"), y)]);
	                var flag = slash.resetInters(obj);
	                if (!flag) {
	                    line.setPathPoints([Point(this.attr("x1"), originalY), Point(this.attr("x2"), originalY)]);
	                }
	                line.resetNameLocation();
	                angles.forEach(function (angle) {
	                    angle.render();
	                });
	                $(button).removeClass("click_disabled");
	                isReset = true;
	            }, null, obj.setRegion);
	        });
	    };
	    obj.unmove = function () {
	        obj.lines.forEach(function (line) {
	            line.path.undrag();
	        });
	    };
	    obj.clone = function (parallelLines) {
	        obj.lines[0].clone(parallelLines.lines[0]);
	        obj.lines[1].clone(parallelLines.lines[1]);
	        obj.setRegion();
	    };
	    obj.reset = function () {
	        obj.lines[0].reset();
	        obj.lines[1].reset();
	        obj.setRegion();
	    };
	    return obj;
	}

	//交点
	function Inter(point) {
	    var obj = {};
	    obj.point = point;
	    obj.circle = 13;
	    obj.backcircle = 21;
	    obj.clickregion = 30;
	    obj.render = function () {
	        obj.circle = Svg.getPager().circle(point.x, point.y, this.circle);
	        obj.circle.attr({ stroke: "#fff", fill: "#e06313", strokeWidth: 3 });
	        obj.backcircle = Svg.getPager().circle(point.x, point.y, this.backcircle);
	        obj.backcircle.attr({ stroke: "none", fill: "#e06313", opacity: 0 });
	        obj.clickregion = Svg.getPager().circle(point.x, point.y, this.clickregion);
	        obj.clickregion.attr({ stroke: "none", fill: "#e06313", opacity: 0 });
	        obj.click();
	    };
	    obj.click = function () {
	        obj.clickregion.mousedown(function () {
	            draggable = true;
	            obj.backcircle.attr({ opacity: 0.3 });
	        });
	        obj.clickregion.mouseup(function () {
	            obj.backcircle.attr({ opacity: 0 });
	        });
	    };
	    obj.move = function (p) {
	        if (p) {
	            obj.circle.attr({ cx: p.x, cy: p.y });
	            obj.backcircle.attr({ cx: p.x, cy: p.y });
	            obj.clickregion.attr({ cx: p.x, cy: p.y });
	        }
	    };
	    obj.remove = function () {
	        obj.circle.remove();
	        obj.backcircle.remove();
	        obj.clickregion.remove();
	    };
	    obj.unrotate = function () {
	        obj.clickregion.undrag();
	        obj.clickregion.unmousedown();
	    };
	    return obj;
	}

	//斜线
	function Slash(points, color) {
	    var obj = Line(points, color, "c");
	    obj.inters = [];
	    obj.getNewPoints = function (x, y, region, k) {
	        var xmin = region[0].x,
	            xmax = region[1].x,
	            ymin = region[1].y,
	            ymax = region[2].y;
	        var xstart, ystart, xend, yend;
	        if (!isNaN(k) && Math.abs(k) != 0) {
	            xstart = (ymin - y + k * x) / k;
	            ystart = xmin * k + y - k * x;
	            xend = (ymax - y + k * x) / k;
	            yend = xmax * k + y - x * k;
	        } else if (isNaN(k)) {
	            xstart = x < xmin ? xmin : x > xmax ? xmax : x;
	            ystart = -1;
	            xend = x < xmin ? xmin : x > xmax ? xmax : x;
	            yend = -1;
	        } else {
	            xstart = -1;
	            ystart = y < ymin ? ymin : y > ymax ? ymax : y;
	            xend = -1;
	            yend = y < ymin ? ymin : y > ymax ? ymax : y;
	        }
	        var points = [];
	        if (xstart >= xmin && xstart <= xmax) points.push(Point(xstart, ymin));
	        if (ystart >= ymin && ystart <= ymax) points.push(Point(xmin, ystart));
	        if (yend <= ymax && yend >= ymin) points.push(Point(xmax, yend));
	        if (xend <= xmax && xend >= xmin) points.push(Point(xend, ymax));
	        if (points[0].y > points[1].y) {
	            var point1 = points[0];
	            var point2 = points[1];
	            points = [point2, point1];
	        }
	        return points;
	    };
	    obj.getKOnmove = function (x, y, point) {
	        if (x == point.x) return NaN;
	        return (y - point.y) / (x - point.x);
	    };
	    obj.resetLine = function (points, parallelLines) {
	        var flag = false;
	        if (points.length != 2) return flag;
	        var newLine = Line(points, obj.color, '');
	        var point1 = newLine.getCrossPointOfLine(parallelLines.lines[0]);
	        var point2 = newLine.getCrossPointOfLine(parallelLines.lines[1]);
	        if (parallelLines.lines[0].checkPoint(point1) && parallelLines.lines[1].checkPoint(point2)) {
	            obj.setPathPoints(points);
	            obj.inters[0].point = point1;
	            obj.inters[1].point = point2;
	            flag = true;
	        }
	        return flag;
	    };
	    obj.resetInters = function (parallelLines) {
	        var flag = false;
	        var point1 = obj.getCrossPointOfLine(parallelLines.lines[0]);
	        var point2 = obj.getCrossPointOfLine(parallelLines.lines[1]);
	        if (parallelLines.lines[0].checkPoint(point1) && parallelLines.lines[1].checkPoint(point2)) {
	            obj.inters[0].point = point1;
	            obj.inters[1].point = point2;
	            flag = true;
	        }
	        obj.inters.forEach(function (inter) {
	            inter.move(inter.point);
	        });
	        return flag;
	    };
	    obj.move = function (parallelLines, angles, button) {
	        obj.path.drag(function (dx, dy, x, y, event) {
	            if (!draggable) return;
	            var point = Svg.coordinateTransform({ "x": x, "y": y });
	            if (!Svg.isPointInsideRegionPath(point)) draggable = false;
	            x = point.x;
	            y = point.y;
	            var points = obj.getNewPoints(x, y, Svg.regionPoints, obj.getK());
	            var flag = obj.resetLine(points, parallelLines, 0);
	            obj.resetNameLocation();
	            var point1 = obj.getCrossPointOfLine(parallelLines.lines[0]);
	            var point2 = obj.getCrossPointOfLine(parallelLines.lines[1]);
	            obj.inters[0].points = point1;
	            obj.inters[1].points = point2;
	            obj.inters[0].move(point1);
	            obj.inters[1].move(point2);
	            angles.forEach(function (angle) {
	                angle.render();
	            });
	            $(button).removeClass("click_disabled");
	            isReset = true;
	        }, null, null);
	    };
	    obj.setInters = function (parallelLines) {
	        var point1 = obj.getCrossPointOfLine(parallelLines.lines[0]);
	        var point2 = obj.getCrossPointOfLine(parallelLines.lines[1]);
	        obj.inters = [Inter(point1), Inter(point2)];
	        obj.inters.forEach(function (inter) {
	            inter.render();
	        });
	    };
	    obj.rotate = function (parallelLines, angles, button) {
	        obj.inters.forEach(function (inter) {
	            inter.clickregion.drag(function (dx, dy, x, y, event) {
	                if (!draggable) {
	                    inter.backcircle.attr({ opacity: 0 });
	                    return;
	                }
	                var point1 = Svg.coordinateTransform({ "x": x, "y": y });
	                if (!Svg.isPointInsideRegionPath(point1)) draggable = false;
	                x = point1.x;
	                y = point1.y;
	                var index = obj.inters.indexOf(inter);
	                var k = obj.getKOnmove(x, y, obj.inters[index ^ 1].point);
	                var points = obj.getNewPoints(x, y, Svg.regionPoints, k);
	                var flag = obj.resetLine(points, parallelLines);
	                obj.resetNameLocation();
	                inter.move(inter.point);
	                angles.forEach(function (angle) {
	                    angle.render();
	                });
	                $(button).removeClass("click_disabled");
	                isReset = true;
	            }, null, function () {
	                inter.backcircle.attr({ opacity: 0 });
	            });
	        });
	    };
	    obj.removeInters = function () {
	        obj.inters.forEach(function (inter) {
	            inter.remove();
	        });
	        obj.inters = [];
	    };
	    obj.unmove = function () {
	        obj.path.undrag();
	        obj.inters.forEach(function (inter) {
	            inter.unrotate();
	        });
	    };
	    return obj;
	}

	//角
	function Angle(line1, line2, quadrant, color, view) {
	    var obj = {};
	    obj.lines = [line1, line2]; //line1斜线，line2平行线
	    obj.inter = line1.inters[quadrant < 4 ? 0 : 1].point;
	    obj.quadrant = quadrant;
	    obj.r = 50; //70
	    obj.path = "";
	    obj.color = color;
	    obj.text = "";
	    obj.isShow = false;
	    obj.angle = 0;
	    obj.region = "";
	    obj.view = view;
	    obj.getAngle = function (p) {
	        var angle = Snap.angle(obj.inter.x, obj.inter.y, p.x, p.y);
	        if (obj.quadrant % 4 == 1) angle = 180 - angle;else if (obj.quadrant % 4 == 2) angle = 360 - angle;else if (obj.quadrant % 4 == 3) angle = angle - 180;
	        return angle;
	    };
	    obj.getTextLocation = function () {
	        var a = obj.quadrant % 4;
	        var l = obj.angle / 180;
	        var angle1 = obj.angle * (l > 0.5 ? 0.5 : l);
	        if (a == 3 || a == 2) angle1 = obj.angle - angle1;
	        var k = Math.tan(angle1 * Math.PI / 180);
	        if (a & 1 ^ a >> 1) k = -k;
	        var direction = 1;
	        if (a >> 1) direction = -1;
	        var distance = obj.r + 45;
	        if (Math.round(obj.angle) == 90) distance = 80;
	        var point = obj.lines[0].getPointFromLine(obj.inter, distance, k, direction);
	        if (Math.round(obj.angle) == 90) {
	            if (a == 0) {
	                point.x = point.x - 30;
	            } else if (a == 2) {
	                point.x = point.x - 30;
	                point.y = point.y + 30;
	            } else if (a == 3) {
	                point.y = point.y + 30;
	            }
	        } else {
	            if (a == 0) {
	                point.x = point.x - 5;
	            } else if (a == 1) {
	                point.x = point.x - 15;
	                if (Math.round(obj.angle) > 90) point.y = point.y + 30;
	            } else if (a == 2) {
	                point.x = point.x - 25;
	            } else if (a == 3) {
	                point.x = point.x - 15;
	            }
	        }
	        return point;
	    };
	    obj.drawAngle = function (point1, point2) {
	        var direction = [0, 1, 1, 0, 0, 1, 1, 0];
	        var pathString = 'M ' + point1.x + ' ' + point1.y + ' A ' + obj.r + ' ' + obj.r + ' 0 0 ' + direction[obj.quadrant] + ' ' + point2.x + ' ' + point2.y;
	        if (obj.path != "") obj.path.remove();
	        obj.path = Svg.path(pathString, obj.color);
	        obj.lines[0].pathregion.before(obj.path);
	        obj.lines[1].pathregion.before(obj.path);
	    };
	    obj.drawRightAngle = function () {
	        var x = obj.inter.x + ((obj.quadrant & 1) == 0 ? -50 : 50);
	        var y = obj.inter.y + ((obj.quadrant >> 1 & 1) == 0 ? -50 : 50);
	        var pathString = 'M ' + x + ' ' + obj.inter.y + ' L ' + x + ' ' + y + ' L ' + obj.inter.x + ' ' + y;
	        if (obj.path != "") obj.path.remove();
	        obj.path = Svg.path(pathString, obj.color);
	        obj.lines[0].pathregion.before(obj.path);
	        obj.lines[1].pathregion.before(obj.path);
	    };
	    obj.getCirclePoint = function () {
	        var points1 = obj.lines[0].getCrossPointOfCircle(obj.inter.x, obj.inter.y, obj.r);
	        var points2 = obj.lines[1].getCrossPointOfCircle(obj.inter.x, obj.inter.y, obj.r);
	        var point1 = points1[(obj.quadrant & 3) >> 1];
	        var point2 = points2[obj.quadrant & 1];
	        return [point1, point2];
	    };
	    obj.setText = function () {
	        var textLocation = obj.getTextLocation();
	        if (obj.text != "") obj.text.remove();
	        obj.text = Svg.text(textLocation, Number(obj.quadrant) + 1, obj.color);
	        obj.text.attr({ fontSize: 48 });
	    };
	    obj.render = function () {
	        obj.inter = obj.lines[0].inters[obj.quadrant < 4 ? 0 : 1].point;
	        var points = obj.getCirclePoint();
	        var angle = obj.getAngle(points[0]);
	        obj.angle = angle;
	        if (angle < 90) obj.r = 70;else obj.r = 50;
	        if (Math.round(angle) == 90) obj.drawRightAngle();else {
	            points = obj.getCirclePoint();
	            obj.drawAngle(points[0], points[1]);
	        }
	        obj.setText();
	        obj.setRegion();
	        if (obj.isShow) obj.show();else obj.hide();
	        if ((obj.quadrant & 2) >> 1 ^ (obj.quadrant & 1) == 0) view.deg1.text(Math.round(obj.angle) + "°");else view.deg2.text(Math.round(obj.angle) + "°");
	    };
	    obj.setColor = function (color) {
	        obj.color = color;
	        if (obj.path != "") obj.path.attr({ stroke: obj.color });
	        if (obj.text != "") obj.text.attr({ fill: obj.color });
	    };
	    obj.setRegion = function () {
	        var points = [];
	        var inters = obj.lines[0].inters;
	        var x = inters[1].point.x - (inters[1].point.x - inters[0].point.x) / 2;
	        var y = inters[1].point.y - (inters[1].point.y - inters[0].point.y) / 2;
	        switch (obj.quadrant) {
	            case 0:
	                {
	                    points.push(Svg.regionPoints[0]);
	                    if (obj.lines[0].getPoint1().y > Svg.regionPoints[1].y && obj.lines[0].getPoint1().x == Svg.regionPoints[1].x) points.push(Svg.regionPoints[1]);
	                    points.push(obj.lines[0].getPoint1());
	                    points.push(obj.inter);
	                    points.push(obj.lines[1].getPoint1());
	                    break;
	                }
	            case 1:
	                {
	                    points.push(obj.lines[0].getPoint1());
	                    if (obj.lines[0].getPoint1().y > Svg.regionPoints[0].y && obj.lines[0].getPoint1().x == Svg.regionPoints[0].x) points.push(Svg.regionPoints[0]);
	                    points.push(Svg.regionPoints[1]);
	                    points.push(obj.lines[1].getPoint2());
	                    points.push(obj.inter);
	                    break;
	                }
	            case 2:
	                {
	                    points.push(obj.lines[1].getPoint1());
	                    points.push(obj.inter);
	                    points.push(Point(x, y));
	                    points.push(Point(obj.lines[1].path.attr("x1"), y));
	                    break;
	                }
	            case 3:
	                {
	                    points.push(obj.inter);
	                    points.push(obj.lines[1].getPoint2());
	                    points.push(Point(obj.lines[1].path.attr("x2"), y));
	                    points.push(Point(x, y));
	                    break;
	                }
	            case 4:
	                {
	                    points.push(Point(obj.lines[1].path.attr("x1"), y));
	                    points.push(Point(x, y));
	                    points.push(obj.inter);
	                    points.push(obj.lines[1].getPoint1());
	                    break;
	                }
	            case 5:
	                {
	                    points.push(Point(x, y));
	                    points.push(Point(obj.lines[1].path.attr("x2"), y));
	                    points.push(obj.lines[1].getPoint2());
	                    points.push(obj.inter);
	                    break;
	                }
	            case 6:
	                {
	                    points.push(obj.lines[1].getPoint1());
	                    points.push(obj.inter);
	                    points.push(obj.lines[0].getPoint2());
	                    if (obj.lines[0].getPoint2().y < Svg.regionPoints[2].y && obj.lines[0].getPoint2().x == Svg.regionPoints[2].x) points.push(Svg.regionPoints[2]);
	                    points.push(Svg.regionPoints[3]);
	                    break;
	                }
	            case 7:
	                {
	                    points.push(obj.inter);
	                    points.push(obj.lines[1].getPoint2());
	                    points.push(Svg.regionPoints[2]);
	                    if (obj.lines[0].getPoint2().y < Svg.regionPoints[3].y && obj.lines[0].getPoint2().x == Svg.regionPoints[3].x) points.push(Svg.regionPoints[3]);
	                    points.push(obj.lines[0].getPoint2());
	                    break;
	                }
	            default:
	                break;
	        }
	        if (obj.region == "") obj.region = Region(points, obj.color);else {
	            obj.region.points = points;
	        }
	        obj.region.render();
	        obj.lines[0].path.before(obj.region.polygon);
	        obj.lines[1].path.before(obj.region.polygon);
	        obj.region.polygon.before(obj.text);
	    };
	    obj.click = function (angles, clickType) {
	        obj.region.click(obj, angles, clickType);
	        obj.lines[0].path.after(obj.region.polygon);
	        obj.lines[1].path.after(obj.region.polygon);
	    };
	    obj.unclick = function () {
	        obj.region.unclick();
	    };
	    obj.correspondingAnglesClick = function (angles) {
	        obj.isShow = !obj.isShow;
	        var display = "none";
	        if (obj.isShow) display = "block";
	        angles[obj.quadrant % 4].display(display);
	        angles[obj.quadrant % 4 + 4].display(display);
	        angles[obj.quadrant % 4].isShow = obj.isShow;
	        angles[obj.quadrant % 4 + 4].isShow = obj.isShow;
	        if (obj.isShow) {
	            showElementByIndex(obj.view.exterior.angles, obj.quadrant % 4);
	        } else {
	            hideElementByIndex(obj.view.exterior.angles, obj.quadrant % 4);
	        }
	    };
	    obj.alternateAnglesClick = function (angles) {
	        if (obj.quadrant >= 2 && obj.quadrant <= 5) obj.isShow = !obj.isShow;
	        var display = "none";
	        var displayText = 0;
	        if (obj.isShow) display = "block";
	        if (obj.quadrant == 2 || obj.quadrant == 5) {
	            angles[2].display(display);
	            angles[5].display(display);
	            angles[2].isShow = obj.isShow;
	            angles[5].isShow = obj.isShow;
	            obj.displayText(obj.view.alternate.angles, displayText);
	        }
	        if (obj.quadrant == 3 || obj.quadrant == 4) {
	            angles[3].display(display);
	            angles[4].display(display);
	            angles[3].isShow = obj.isShow;
	            angles[4].isShow = obj.isShow;
	            displayText = 1;
	            obj.displayText(obj.view.alternate.angles, displayText);
	        }
	    };
	    obj.interiorAnglesOnSameSideClick = function (angles) {
	        if (obj.quadrant >= 2 && obj.quadrant <= 5) obj.isShow = !obj.isShow;
	        var display = "none";
	        var displayText = 0;
	        if (obj.isShow) display = "block";
	        if (obj.quadrant == 2 || obj.quadrant == 4) {
	            angles[2].display(display);
	            angles[4].display(display);
	            angles[2].isShow = obj.isShow;
	            angles[4].isShow = obj.isShow;
	            obj.displayText(obj.view.interior.angles, displayText);
	        }
	        if (obj.quadrant == 3 || obj.quadrant == 5) {
	            angles[3].display(display);
	            angles[5].display(display);
	            angles[3].isShow = obj.isShow;
	            angles[5].isShow = obj.isShow;
	            displayText = 1;
	            obj.displayText(obj.view.interior.angles, displayText);
	        }
	    };
	    obj.displayText = function (view, index) {
	        if (obj.isShow) {
	            showElementByIndex(view, index);
	        } else {
	            hideElementByIndex(view, index);
	        }
	    };
	    obj.display = function (display) {
	        obj.path.attr({ display: display });
	        obj.text.attr({ display: display });
	    };
	    obj.show = function () {
	        obj.display("block");
	        obj.isShow = true;
	    };
	    obj.hide = function () {
	        obj.display("none");
	        obj.isShow = false;
	    };
	    obj.clone = function (angle) {
	        obj.isShow = angle.isShow;
	        if (obj.isShow) {
	            obj.show();
	        } else {
	            obj.hide();
	        }
	        obj.setColor(angle.color);
	    };
	    return obj;
	}

	//场景
	var Scene = {
	    //平行线点
	    parallelPoints: [Point(0, 300), Point(1100, 300), Point(0, 600), Point(1100, 600)],
	    //平行线颜色
	    parallelColor: "#005798",
	    //斜线初始点
	    slashPoints: [Point(150, -50), Point(1050, 850)],
	    //斜线颜色
	    slashColor: "#cb1f1f",
	    //平行线
	    parallelLines: "",
	    //斜线
	    slash: "",
	    //角度
	    angles: "",
	    //角度颜色
	    exteriorAngleColors: ["#8300de", "#ffe013", "#11b1b7", "#e828c1", "#8300de", "#ffe013", "#11b1b7", "#e828c1"],
	    alternateAngleColors: ["#8300de", "#ffe013", "#ffe013", "#8300de", "#8300de", "#ffe013", "#ffe013", "#8300de"],
	    alternateAnglePropertyColors: ["#000", "#000", "#ffe013", "#8300de", "#8300de", "#ffe013", "#000", "#000"],
	    interiorAngleColors: ["#000", "#000", "#8300de", "#ffe013", "#8300de", "#ffe013", "#000", "#000"],
	    button: "",
	    //平行线
	    renderParallelLines: function renderParallelLines(parallelLines) {
	        if (this.parallelLines == "") {
	            this.parallelLines = ParallelLines(this.parallelPoints, this.parallelColor);
	        }
	        this.parallelLines.render();
	        if (parallelLines) this.parallelLines.clone(parallelLines);
	    },
	    //斜线
	    renderSlash: function renderSlash(slash) {
	        if (this.slash == "") {
	            this.slash = Slash(this.slashPoints, this.slashColor);
	        }
	        this.slash.render();
	        if (slash) this.slash.clone(slash);
	    },
	    //交点
	    renderInters: function renderInters() {
	        this.slash.setInters(this.parallelLines);
	    },
	    //角度+角度点击区域
	    renderAngles: function renderAngles(text, angles) {
	        if (this.angles == "") {
	            this.angles = [Angle(this.slash, this.parallelLines.lines[0], 0, "#000", text), Angle(this.slash, this.parallelLines.lines[0], 1, "#000", text), Angle(this.slash, this.parallelLines.lines[0], 2, "#000", text), Angle(this.slash, this.parallelLines.lines[0], 3, "#000", text), Angle(this.slash, this.parallelLines.lines[1], 4, "#000", text), Angle(this.slash, this.parallelLines.lines[1], 5, "#000", text), Angle(this.slash, this.parallelLines.lines[1], 6, "#000", text), Angle(this.slash, this.parallelLines.lines[1], 7, "#000", text)];
	        }
	        this.angles.forEach(function (angle) {
	            angle.render(text);
	        });
	        if (angles != "") {
	            for (var i = 0; i < this.angles.length; i++) {
	                this.angles[i].clone(angles[i]);
	            }
	        }
	    },
	    move: function move(button) {
	        this.slash.move(this.parallelLines, this.angles, button);
	        this.slash.rotate(this.parallelLines, this.angles, button);
	        this.parallelLines.move(this.slash, this.angles, button);
	    },
	    clickInters: function clickInters() {
	        this.slash.inters.forEach(function (inter) {
	            inter.click();
	        });
	    },
	    unmove: function unmove() {
	        this.slash.unmove();
	        this.parallelLines.unmove();
	    },
	    //渲染
	    render: function render(text, data, button) {
	        this.renderParallelLines(data.parallelLines);
	        var flag = this.renderSlash(data.slash);
	        this.renderInters();
	        this.renderAngles(text, data.angles);
	        this.move(button);
	        this.button = button;
	    },
	    //重置
	    reset: function reset() {
	        this.parallelLines.reset();
	        this.slash.reset();
	        this.slash.removeInters();
	        this.renderInters();
	        this.angles.forEach(function (angle) {
	            angle.render();
	        });
	        this.move(this.button);
	    }

	    //按钮功能实现
	};function MyFunction() {
	    var obj = {};
	    obj.view = null;
	    obj.text = { angleNames: {}, exterior: {}, alternate: {}, interior: {} };
	    obj.relation = "";
	    obj.process = false;
	    obj.property = false;
	    obj.showAllAngles = function () {
	        Scene.angles.forEach(function (angle) {
	            angle.display("block");
	            angle.unclick();
	        });
	    };
	    obj.hideAllAngles = function (clickType) {
	        Scene.angles.forEach(function (angle) {
	            angle.render();
	            angle.click(Scene.angles, clickType);
	        });
	    };
	    //角度名称
	    obj.angleNames = function (clickType) {
	        if (obj.relation == "") {
	            showElement(obj.text.angleNames.view);
	            obj.relation = "angleNames";
	        } else {
	            hideElement(obj.text.angleNames.view);
	            obj.relation = "";
	        }
	        Scene.angles.forEach(function (angle) {
	            if (obj.relation) {
	                angle.show();
	                angle.setColor("#000");
	            } else angle.hide();
	        });
	        if (obj.relation == "") return false;
	        return true;
	    };
	    obj.resetAllView = function () {
	        obj.resetView();
	        obj.relation = "";
	        Scene.angles.forEach(function (angle) {
	            angle.hide();
	            angle.unclick();
	        });
	    };
	    obj.getView = function () {
	        if (obj.relation == "") return "";else if (obj.relation == "angleNames") return obj.text.angleNames;else if (obj.relation == "correspondingAngles") return obj.text.exterior;else if (obj.relation == "alternateAngles") return obj.text.alternate;else if (obj.relation == "interiorAnglesOnSameSide") return obj.text.interior;
	    };
	    obj.setAngleColor = function (property) {
	        if (obj.relation == "") return;
	        var colors;
	        if (obj.relation == "correspondingAngles") colors = Scene.exteriorAngleColors;else if (obj.relation == "alternateAngles") {
	            colors = Scene.alternateAngleColors;
	            if (property) colors = Scene.alternateAnglePropertyColors;
	        } else if (obj.relation == "interiorAnglesOnSameSide") colors = Scene.interiorAngleColors;
	        for (var i = 0; i < Scene.angles.length; i++) {
	            Scene.angles[i].setColor(colors[i]);
	        }
	    };
	    obj.clickAngles = function (clickType) {
	        if (obj.relation == "angleNames") obj.resetAllView();
	        if (obj.relation == clickType) {
	            obj.resetAllView();
	            Scene.move(obj.buttons[6]);
	            Scene.clickInters();
	            obj.process = false;
	            obj.property = false;
	            return false;
	        }
	        Scene.angles.forEach(function (angle) {
	            angle.click(Scene.angles, clickType);
	        });
	        if (obj.relation == "") {
	            obj.relation = clickType;
	            showElement(obj.getView().view);
	            obj.setAngleColor();
	        }
	        return true;
	    };
	    //推导过程
	    obj.derivationProcess = function () {
	        if (obj.relation == "" || obj.relation == "correspondingAngles") return;
	        obj.process = !obj.process;
	        var view = obj.getView();
	        if (obj.process) {
	            showText(view.derivational);
	            obj.showAllAngles();
	        } else {
	            hideText(view.derivational);
	            if (!obj.process && !obj.property) obj.hideAllAngles(obj.relation);
	        }
	    };
	    //显示性质
	    obj.displayProperties = function () {
	        if (obj.relation == "") return;
	        obj.property = !obj.property;
	        var view = obj.getView();
	        if (obj.property) {
	            showText(view.conclusion);
	            obj.showAllAngles();
	            if (obj.relation == "correspondingAngles") {
	                showText(obj.text.exterior.angles);
	            }
	        } else {
	            hideText(view.conclusion);
	            if (!obj.process && !obj.property) obj.hideAllAngles(obj.relation);
	            if (obj.relation == "correspondingAngles") {
	                hideText(obj.text.exterior.angles);
	                for (var i = 0; i < 4; i++) {
	                    if (Scene.angles[i].isShow) showText(obj.text.exterior.angles[i]);
	                }
	            }
	        }
	    };
	    //重置
	    obj.resetView = function () {
	        hideElement(obj.text.angleNames.view);
	        hideElement(obj.text.exterior.view);
	        hideText(obj.text.exterior.angles);
	        hideText(obj.text.exterior.derivational);
	        hideText(obj.text.exterior.conclusion);
	        hideElement(obj.text.alternate.view);
	        hideText(obj.text.alternate.angles);
	        hideText(obj.text.alternate.derivational);
	        hideText(obj.text.alternate.conclusion);
	        hideElement(obj.text.interior.view);
	        hideText(obj.text.interior.angles);
	        hideText(obj.text.interior.derivational);
	        hideText(obj.text.interior.conclusion);
	    };
	    obj.reset = function () {
	        obj.resetView();
	        obj.relation = "";
	        obj.process = false;
	        obj.property = false;
	        isReset = false;
	        Scene.angles.forEach(function (angle) {
	            angle.hide();
	            angle.unclick();
	        });
	        Scene.reset();
	    };
	    return obj;
	}

	function setDisabled(button) {
	    $(button).addClass("click_disabled");
	}

	function setEnabled(button, callback) {
	    $(button).removeClass("click_disabled");
	}

	//Controller
	var ParallelLines2DController = function ParallelLines2DController() {
	    var obj = new MyFunction();
	    obj.buttons = null;
	    obj.create = function ($view) {
	        var ins = Object.create(this);
	        ins.view = $view;
	        ins.findView($view);
	        ins.bindEvent();
	        return ins;
	    };
	    obj.findView = function ($view) {
	        obj.text.angleNames.view = $view.find(".show-deg_text-box");
	        obj.text.angleNames.angles = $view.find(".show-deg_text-box").find(".font-size_60.item");
	        obj.text.exterior.view = $view.find(".exterior-interior-angle_text-box");
	        obj.text.exterior.angles = $view.find(".exterior-interior-angle_text-box").find(".text_derivational-process").find(".text-item");
	        obj.text.deg1 = $view.find(".change_angle_01");
	        obj.text.deg2 = $view.find(".change_angle_02");
	        obj.text.exterior.conclusion = $view.find(".exterior-interior-angle_text-box").find(".text_conclusion");
	        obj.text.alternate.view = $view.find(".alternate-angle_text-box");
	        obj.text.alternate.angles = $view.find(".alternate-angle_text-box").find(".text_angle-relation").find(".text-item");
	        obj.text.alternate.derivational = $view.find(".alternate-angle_text-box").find(".text_derivational-process");
	        obj.text.alternate.conclusion = $view.find(".alternate-angle_text-box").find(".text_conclusion");
	        obj.text.interior.view = $view.find(".same-side-interior-angle_text-box");
	        obj.text.interior.angles = $view.find(".same-side-interior-angle_text-box").find(".text_angle-relation").find(".text-item");
	        obj.text.interior.derivational = $view.find(".same-side-interior-angle_text-box").find(".text_derivational-process");
	        obj.text.interior.conclusion = $view.find(".same-side-interior-angle_text-box").find(".text_conclusion");
	        obj.text.padding93Text = $view.find(".padding_93");
	        obj.text.padding70Text = $view.find(".padding_70");
	        obj.buttons = $view.find(".com_btns.btns-primary");
	    };
	    obj.setButtons = function () {
	        for (var i = 0; i < obj.buttons.length; i++) {
	            $(obj.buttons[i]).removeClass("ui_btn_active");
	            setEnabled(obj.buttons[i]);
	        }
	        setDisabled(obj.buttons[4]);
	        setDisabled(obj.buttons[5]);
	        setDisabled(obj.buttons[6]);
	    };
	    obj.bindEvent = function () {
	        var self = this;
	        var flag = false;
	        $(obj.buttons[0]).on("click", function () {
	            if ($(obj.buttons[0]).hasClass("click_disabled")) return;
	            flag = obj.angleNames("angleNames");
	            obj.setButtons();
	            if (isReset) {
	                setEnabled(obj.buttons[6]);
	            }
	            if (flag) {
	                $(obj.buttons[0]).addClass("ui_btn_active");
	                setEnabled(obj.buttons[6]);
	            }
	        });
	        $(obj.buttons[1]).on("click", function () {
	            if ($(obj.buttons[1]).hasClass("click_disabled")) return;
	            flag = obj.clickAngles("correspondingAngles");
	            obj.setButtons();
	            if (isReset) {
	                setEnabled(obj.buttons[6]);
	            }
	            if (flag) {
	                Scene.unmove();
	                $(obj.buttons[1]).addClass("ui_btn_active");
	                setDisabled(obj.buttons[0]);
	                setDisabled(obj.buttons[2]);
	                setDisabled(obj.buttons[3]);
	                setEnabled(obj.buttons[5], obj.displayProperties);
	                setEnabled(obj.buttons[6]);
	            }
	        });
	        $(obj.buttons[2]).on("click", function () {
	            if ($(obj.buttons[2]).hasClass("click_disabled")) return;
	            flag = obj.clickAngles("alternateAngles");
	            obj.setButtons();
	            if (isReset) {
	                setEnabled(obj.buttons[6]);
	            }
	            if (flag) {
	                Scene.unmove();
	                $(obj.buttons[2]).addClass("ui_btn_active");
	                setDisabled(obj.buttons[0]);
	                setDisabled(obj.buttons[1]);
	                setDisabled(obj.buttons[3]);
	                setEnabled(obj.buttons[4]);
	                setEnabled(obj.buttons[5]);
	                setEnabled(obj.buttons[6]);
	            }
	        });
	        $(obj.buttons[3]).on("click", function () {
	            if ($(obj.buttons[3]).hasClass("click_disabled")) return;
	            flag = obj.clickAngles("interiorAnglesOnSameSide");
	            obj.setButtons();
	            if (isReset) {
	                setEnabled(obj.buttons[6]);
	            }
	            if (flag) {
	                Scene.unmove();
	                $(obj.buttons[3]).addClass("ui_btn_active");
	                setDisabled(obj.buttons[0]);
	                setDisabled(obj.buttons[1]);
	                setDisabled(obj.buttons[2]);
	                setEnabled(obj.buttons[4]);
	                setEnabled(obj.buttons[5]);
	                setEnabled(obj.buttons[6]);
	            }
	        });
	        $(obj.buttons[4]).on("click", function () {
	            if ($(obj.buttons[4]).hasClass("click_disabled")) return;
	            obj.derivationProcess();
	            if (obj.process) $(obj.buttons[4]).addClass("ui_btn_active");else $(obj.buttons[4]).removeClass("ui_btn_active");
	            if (obj.relation == "alternateAngles") {
	                if (obj.process) obj.setAngleColor();else if (obj.property) obj.setAngleColor(true);
	            }
	        });
	        $(obj.buttons[5]).on("click", function () {
	            if ($(obj.buttons[5]).hasClass("click_disabled")) return;
	            obj.displayProperties();
	            if (obj.property) {
	                $(obj.buttons[5]).addClass("ui_btn_active");
	            } else {
	                $(obj.buttons[5]).removeClass("ui_btn_active");
	            }
	            if (obj.relation == "alternateAngles") {
	                if (obj.property) obj.setAngleColor(true);else obj.setAngleColor();
	            }
	        });
	        $(obj.buttons[6]).on("click", function () {
	            if ($(obj.buttons[6]).hasClass("click_disabled")) return;
	            obj.reset();
	            obj.setButtons();
	        });
	    };
	    obj.setTextView = function () {
	        if (obj.relation != "angleNames" && obj.relation != "") {
	            Scene.unmove();
	            setDisabled(obj.buttons[0]);
	            setDisabled(obj.buttons[1]);
	            setDisabled(obj.buttons[2]);
	            setDisabled(obj.buttons[3]);
	            setEnabled(obj.buttons[5]);
	            if (obj.relation != "correspondingAngles") setEnabled(obj.buttons[4]);
	        }
	        if (obj.process || obj.property) obj.showAllAngles();
	        if (obj.process) {
	            setEnabled(obj.buttons[4]);
	            $(obj.buttons[4]).addClass("ui_btn_active");
	        }
	        if (obj.property) {
	            setEnabled(obj.buttons[5]);
	            $(obj.buttons[5]).addClass("ui_btn_active");
	        }
	        if (obj.relation == "angleNames") {
	            showElement(obj.text.angleNames.view);
	            $(obj.buttons[0]).addClass("ui_btn_active");
	        } else if (obj.relation == "correspondingAngles") {
	            setEnabled(obj.buttons[1]);
	            $(obj.buttons[1]).addClass("ui_btn_active");
	            showElement(obj.text.exterior.view);
	            if (obj.property) {
	                showText(obj.text.exterior.conclusion);
	                showText(obj.text.exterior.angles);
	            }
	            if (Scene.angles[0].isShow) showText(obj.text.exterior.angles[0]);
	            if (Scene.angles[1].isShow) showText(obj.text.exterior.angles[1]);
	            if (Scene.angles[2].isShow) showText(obj.text.exterior.angles[2]);
	            if (Scene.angles[3].isShow) showText(obj.text.exterior.angles[3]);
	        } else if (obj.relation == "alternateAngles") {
	            setEnabled(obj.buttons[2]);
	            $(obj.buttons[2]).addClass("ui_btn_active");
	            showElement(obj.text.alternate.view);
	            if (obj.process) {
	                showText(obj.text.alternate.derivational);
	            }
	            if (obj.property) {
	                showText(obj.text.alternate.conclusion);
	            }
	            if (Scene.angles[2].isShow) showText(obj.text.alternate.angles[0]);
	            if (Scene.angles[3].isShow) showText(obj.text.alternate.angles[1]);
	        } else if (obj.relation == "interiorAnglesOnSameSide") {
	            setEnabled(obj.buttons[3]);
	            $(obj.buttons[3]).addClass("ui_btn_active");
	            showElement(obj.text.interior.view);
	            if (obj.process) {
	                showText(obj.text.interior.derivational);
	            }
	            if (obj.property) {
	                showText(obj.text.interior.conclusion);
	            }
	            if (Scene.angles[2].isShow) showText(obj.text.interior.angles[0]);
	            if (Scene.angles[3].isShow) showText(obj.text.interior.angles[1]);
	        }
	    };
	    obj.bindAngleEvent = function () {
	        if ($(obj.buttons[6]).hasClass(".click_disabled")) return;else {
	            if (obj.process || obj.property) Scene.unmove();
	            if (obj.relation) {
	                Scene.angles.forEach(function (angle) {
	                    angle.click(Scene.angles, obj.relation);
	                });
	            }
	        }
	    };
	    //初始状态
	    obj.render = function (data) {
	        // if(data) {
	        //     obj.text.alternate.derivational.css({"width":"110%","text-align":"left"});
	        //     obj.text.interior.angles.css({"width":"110%"});
	        //     obj.text.padding93Text .css({"padding-left":"3.75em"});
	        //     obj.text.padding70Text .css({"padding-left":"2.65em"});
	        // }
	        if (!data) {
	            data = {
	                parallelLines: "",
	                slash: "",
	                angles: "",
	                text: { angleNames: {}, exterior: {}, alternate: {}, interior: {} },
	                buttons: null,
	                relation: "",
	                process: false,
	                property: false,
	                reset: false
	            };
	        }
	        obj.resetView();
	        Scene.render(obj.text, data, obj.buttons[6]);
	        obj.relation = data.relation;
	        obj.process = data.process;
	        obj.property = data.property;
	        obj.setTextView();
	        isReset = data.reset;
	        if (data.reset) {
	            setEnabled(obj.buttons[6]);
	        }
	        obj.bindAngleEvent();
	    };
	    obj.getData = function () {
	        return {
	            parallelLines: Scene.parallelLines,
	            slash: Scene.slash,
	            angles: Scene.angles,
	            text: obj.text,
	            buttons: obj.buttons,
	            relation: obj.relation,
	            process: obj.process,
	            property: obj.property,
	            reset: $(obj.buttons[6]).hasClass("click_disabled") ? false : true
	        };
	    };
	    obj.destroy = function () {
	        $(document.body).off('mouseup.sd mouseleave.sd touchend.sd touchcancel.sd mousemove.sd touchmove.sd');
	        $(document.body).off('click.sp touchend.sp');
	    };

	    return obj;
	};

	// return new ParallelLines2DController();

	var Controller = new ParallelLines2DController();

	exports.Controller = Controller;
	// });

/***/ })
/******/ ]);]]></presenter><resources><file src="./resources/index.html"/><file src="./resources/wood/icons/icon_246x143.png"/><file src="./resources/wood/icons/icon_56x50.png"/><file src="./resources/wood/icons/icon.png"/><file src="./resources/wood/icons/smallicon.png"/></resources></addon>