<?xml version='1.0' encoding='UTF-8' ?>
<addon id='MessageBox'> 
<properties>



</properties>

<dependencies>



</dependencies>

<css>

<![CDATA[.addon_MessageBox .compop {
  position: fixed;
  left: 0;
  top: 0;
  z-index: 3000;
  font: 100%/1.5 "Helvetica Neue', Helvetica, Arial, sans-serif"; }
.addon_MessageBox .pop-mask {
  position: fixed;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.7); }
.addon_MessageBox p {
  text-align: center;
  font-size: 24px;
  line-height: 40px; }
.addon_MessageBox .dialog1 {
  position: fixed;
  width: 380px;
  height: 202px;
  padding-top: 80px;
  text-align: center;
  border-radius: 10px;
  background: url('resources/compop_dec2.png') repeat-x left top #ffffff;
  background-size: auto 38px; }
  .addon_MessageBox .dialog1 p {
    color: #333; }
  .addon_MessageBox .dialog1 .buttons {
    margin-top: 20px;
    text-align: center; }
  .addon_MessageBox .dialog1:before {
    content: "";
    position: absolute;
    left: 0;
    top: -14px;
    width: 100%;
    height: 38px;
    background: url('resources/compop_dec1.png'), url('resources/compop_dec1.png');
    background-repeat: no-repeat, no-repeat;
    background-size: auto 100%, auto 100%;
    background-position: 32px top, 295px top; }
.addon_MessageBox .dialog2 {
  position: fixed;
  color: #fff;
  height: 120px;
  font-size: 18px;
  width: 380px;
  text-align: center;
  border-radius: 10px;
  background-color: rgba(0, 0, 0, 0.75); }
  .addon_MessageBox .dialog2 p {
    color: #fff; }
  .addon_MessageBox .dialog2 .buttons {
    margin-top: 10px;
    text-align: center; }
.addon_MessageBox a {
  text-decoration: none; }
.addon_MessageBox .primary, .addon_MessageBox .default {
  display: inline-block;
  width: 134px;
  height: 48px;
  line-height: 48px;
  color: #333;
  margin: 0 14px;
  box-shadow: 0px 3px 3px 0px rgba(4, 0, 0, 0.2), 0px -1px 3px 0px rgba(4, 0, 0, 0.1);
  border-radius: 24px;
  background-image: -webkit-linear-gradient(to bottom, #fcfcfc, #e6e5e5);
  background-image: linear-gradient(to bottom, #fcfcfc, #e6e5e5);
  text-decoration: none;
  -webkit-tap-highlight-color: transparent; }
.addon_MessageBox .primary {
  color: #ff9000; }
]]>

</css>


<view>

<![CDATA[<div class="compop">
  <div class="pop-mask"></div>
  <div class="dialog1">
    <p class="message"></p>
    <p class="buttons"></p>
  </div>
  <div class="dialog2">
    <p class="message"></p>
    <p class="buttons"></p>
  </div>
</div>
]]>
</view>


<preview>

<![CDATA[<div class="message_box_container">
    <div class="dialog">
        <p class="message"></p>
        <p class="buttons"></p>
    </div>
</div>
]]>

</preview>


<presenter>

<![CDATA[/**
 * 弹出框插件
 * @author {linyq, linning}
 * @version 0.2
 * @create 2015-4-1
 */
function AddonMessageBox_create() {
    var bridgeListener;
    var isApp = (typeof AndroidInterface != "undefined");
    var isString = function(obj) {
        return Object.prototype.toString.call(obj) === '[object String]';
    };

    var helper = {
        buttons: {},
        renderBoxData: function(data) {
            if (isString(data)) {
                data = JSON.parse(data);
            }
            var layout = data.layout || [];
            var length = layout.length;
            var temp = [];
            var swap = '';
            helper.extradata = data.extradata;
            switch (length) {
                case 0:
                    temp.push('center');
                    temp.push('center');
                    break;
                case 1:
                    temp.push('center');
                    temp.push(layout[0]);
                    break;
                default:
                    temp = layout.slice(0, 2);
            }
            if (temp[0] === 'top' || temp[0] === 'bottom') {
                swap = temp[0];
                temp[0] = temp[1];
                if (temp[0] === 'top' || temp[0] === 'bottom') {
                    temp[0] = 'center';
                }
            }
            if (temp[1] === 'left' || temp[1] === 'right') {
                temp[1] = swap || temp[0];
                if (temp[1] === 'left' || temp[1] === 'right') {
                    temp[1] = 'center';
                }
            }
            if (temp[0] !== 'left' && temp[0] !== 'right' && temp[0] !== 'center') {
                temp[0] = 'center';
            }
            if (temp[1] !== 'top' && temp[1] !== 'bottom' && temp[1] !== 'center') {
                temp[1] = 'center';
            }

            layout = temp;

            var dialog = {
                type: data.type || 'common',
                isMask: !(data.isMask == false),
                html: data.html,
                text: data.text,
                buttons: data.buttons,
                width: data.width || 380,
                height: data.height || (data.type === 'gray' ? 120 : 142),
                layout: layout,
                timeout: data.timeout || 0,
                closeable: !(data.closeable == false)
            };
            return dialog;
        },
        clearTime: 0,
        currentDialog: undefined,
        offset: {}
    };

    var unbindEvent = function(event) {
        var $view = presenter.$view;
        var $shade = $view.find('.pop-mask');
        if (event === 'closeable') {
            $shade.off();
        }
    };

    var bindEvent = function() {

        var $view = presenter.$view;
        var $shade = $view.find('.pop-mask');

        $shade.on('click', function(e) {
            $view.hide();
        });

        $view.find(".buttons").on('click', function(e, isSimulate) {

            var btn = e.target;
            if (!btn) {
                return;
            }
            var $btn = $(btn);
            var index = $btn.data("index");
            if (index === undefined) {
                return;
            }
            if (!isSimulate) {
                userInput('MessageBoxButton', {
                    "index": index,
                    "event": 'click'
                });
            }
            buttonHandler(e, index);
        });

        presenter.eventBus.addEventListener("MessageBox", presenter);
        presenter.eventBus.addEventListener("TriggerUserInput", presenter);
        if (isApp && Bridge && Bridge.registerListener) {
            bridgeListener = Bridge.registerListener('TriggerUserInput', triggerUserInput);
        }
    };

    var getButton = function(index) {
        return $(helper.buttons[index]);
    };

    var choiceStyle = function(options) {
        var $view = presenter.$view;
        var dialogType = options.dialogType;
        var isMask = options.isMask;
        var width = options.width;
        var height = options.height;
        var layout = options.layout;
        var hasButton = options.hasButton;
        var isGray = dialogType === 'gray';
        var currentDialog = isGray ? $view.find('.dialog2') : $view.find('.dialog1');
        var otherDialog = isGray ? $view.find('.dialog1') : $view.find('.dialog2');
        var maskStyle = (dialogType === 'gray') ? 'rgba(0, 0, 0, 0)' : 'rgba(0, 0, 0, 0.7)';
        var outerHeight, outerWidth;

        helper.currentDialog = currentDialog;

        currentDialog.attr('style', '');
        if (isGray && !hasButton) {
            var message = currentDialog.find('.message');
            var p = message.find('p').length;
            if (p) {
                message.css('line-height', height / p + 'px');
            } else {
                message.css('line-height', height + 'px');
            }
            message.height(height);
        }
        currentDialog.width(width);
        currentDialog.height(height);
        outerHeight = currentDialog.height() + 80;
        outerWidth = currentDialog.width();
        if (layout[0] === 'left') {
            currentDialog.css({
                'left': '0',
                'margin-left': '0'
            });
            isGray && currentDialog.css('border-radius', '0 ' + outerHeight / 2 + 'px ' + outerHeight / 2 + 'px 0');
        } else if (layout[0] === 'right') {
            currentDialog.css({
                'right': '0',
                'margin-left': '0'
            });
            isGray && currentDialog.css('border-radius', outerHeight / 2 + 'px 0 0 ' + outerHeight / 2 + 'px');
        } else {
            currentDialog.css({
                'left': '50%',
                'margin-left': outerWidth / 2 * -1 + 'px'
            });
        }
        if (layout[1] === 'top') {
            currentDialog.css({
                'top': '2px',
                'margin-top': '0'
            });
        } else if (layout[1] === 'bottom') {
            currentDialog.css({
                'bottom': '10px',
                'margin-top': '0'
            });
        } else {
            currentDialog.css({
                'top': '50%',
                'margin-top': outerHeight / 2 * -1 + 'px'
            });
        }
        otherDialog.hide();
        currentDialog.show();
        presenter.$view.find('.pop-mask').css('background', maskStyle);

        if (isMask === true) {
            presenter.$view.find('.pop-mask').show();
        } else {
            presenter.$view.find('.pop-mask').hide();
        }
    };

    var presenter = function() {};

    /**
     * 播放事件
     * @public
     */
    presenter.run = function(view, model) {
        presenter.view = view;
        presenter.$view = $(view);
        presenter.moduleId = model.ID;

        presenter.$view.hide();
        bindEvent();
    };

    /**
     * 接收事件
     *
     * @public
     * @param {string} eventName 事件名称
     * @param {Object} eventData 事件参数
     */
    presenter.onEventReceived = function(eventName, eventData) {
        var data = eventData;
        if (eventName === 'MessageBox') {
            var type = data.item;
            if (type === 'open') {
                clearTimeout(helper.clearTime);
                helper.extradata = undefined;
                presenter.openMessageBox(helper.renderBoxData(eventData.value));
            } else if (type === 'close') {
                presenter.closeMessageBox();
            }
        }
        if (eventName === 'TriggerUserInput') {
            if (data.source === presenter.moduleId) {
                triggerUserInput(eventData);
            }
        }
    };

    /**
     * 打开对话框
     *
     * @public
     * @param {Object} data 事件参数
     */
    presenter.openMessageBox = function(data) {
        var $view = presenter.$view;
        $view.hide();

        //弹窗类型
        choiceStyle({
            dialogType: data.type,
            isMask: data.isMask,
            width: data.width,
            height: data.height,
            layout: data.layout,
            hasButton: !!(data.buttons && data.buttons.length)
        });

        presenter.data = data;

        //点击非dialog区域是否关闭dialog
        if (!data.closeable) {
            unbindEvent('closeable');
        }

        // 处理标题
        if (data.html) {
            $view.find('.message').html(data.html);
        } else {
            $view.find('.message').text(data.text);
        }

        var $btns = $view.find(".buttons");
        $btns.empty();
        if (data.buttons) {
            var btnData;
            var $btn;
            for (var i = 0; i < data.buttons.length; ++i) {
                btnData = data.buttons[i];
                $btn = $('<a href="####"></a>');
                $btn.data("index", i);

                // 按钮样式
                switch (btnData.style) {
                    case 'primary':
                        $btn.addClass('primary');
                        break;
                    default:
                        $btn.addClass('default');
                }

                if (btnData.html) {
                    $btn.html(btnData.html);
                } else {
                    $btn.text(btnData.text);
                }
                helper.buttons[i] = $btn;
                $btns.append($btn);
            }
        }

        $view.show();
        openCallback();

        //自动关闭
        if (!!data.timeout && !!parseInt(data.timeout, 10)) {
            helper.clearTime = setTimeout(function() {
                presenter.closeMessageBox();
            }, parseInt(data.timeout, 10));
        }
    };

    var triggerUserInput = function(data) {
        if (data.item === 'MessageBoxButton') {
            getButton(data.value.index).trigger(data.value.event, true);
        }
    };

    var userInput = function(item, value) {
        presenter.eventBus.sendEvent('UserInput', {
            "source": presenter.moduleId,
            "item": item,
            "value": value
        });

        if (typeof AndroidInterface != "undefined") {
            if (Bridge && Bridge.callNative) {
                Bridge.callNative("com.nd.pad.icr.ui.IcrJsBridge", "sendEvent", {
                    "eventName": "UserInput",
                    "eventData": {
                        "source": presenter.moduleId,
                        "item": item,
                        "value": value
                    }
                });
            }
        }
    };


    var openCallback = function() {
        var _left, _top, _width, _height, offset;
        var dialog = helper.currentDialog;
        if (!dialog) {
            return false;
        }
        offset = dialog.offset();
        _left = offset.left;
        _top = offset.top;
        _width = dialog.get(0).offsetWidth;
        _height = dialog.get(0).offsetHeight;
        helper.offset.left = _left;
        helper.offset.top = _top;
        helper.offset.width = _width;
        helper.offset.height = _height;
        presenter.eventBus.sendEvent('MessageBoxCallback', {
            "source": presenter.moduleId,
            "item": "open",
            "extradata": helper.extradata,
            "value": {
                "left": _left,
                "top": _top,
                "width": _width,
                "height": _height
            }
        });
    };

    /**
     * 按键处理
     */
    var buttonHandler = function(event, index) {
        if (!presenter.data) {
            return;
        }

        //getButton(index).trigger(event.type);

        var data = presenter.data.buttons[index];
        if (data && data.callback && presenter.eventBus) {
            var eventName = data.callback.eventName || "ValueChanged";
            var eventData = data.callback.eventData || {};
            presenter.eventBus.sendEvent(eventName, eventData);
            if (typeof AndroidInterface != "undefined") {
                if (Bridge && Bridge.callNative) {
                    Bridge.callNative("com.nd.pad.icr.ui.IcrJsBridge", "sendEvent", {
                        "eventName": eventName,
                        "eventData": eventData
                    });
                }
            }
        }
        presenter.closeMessageBox();
    };

    var closeCallback = function() {
        //暂时没处理window.resize事件造成的位置变化，待具体需求在动
        presenter.eventBus.sendEvent('MessageBoxCallback', {
            "source": presenter.moduleId,
            "item": "close",
            "value": {
                left: helper.offset.left || 0,
                top: helper.offset.top || 0,
                width: helper.offset.width || 0,
                height: helper.offset.height || 0
            }
        });
    };

    /**
     * 关闭对话框
     * @public
     */
    presenter.closeMessageBox = function() {
        presenter.$view.hide();
        closeCallback();
    };

    /**
     * 设置PlayerController
     */
    presenter.setPlayerController = function(controller) {
        presenter.playerController = controller;
        presenter.eventBus = controller.getEventBus();
    };

    /**
     * 获取dialog相对屏幕的位置, 需要在对话框show的时候才能使用
     */
    presenter.getPosition = function() {
        var _left, _top, _width, _height, offset;
        var dialog = helper.currentDialog;
        if (!dialog) {
            return false;
        }
        offset = dialog.offset();
        _left = offset.left;
        _top = offset.top;
        _width = dialog.width();
        _height = dialog.height();
        return {
            left: _left,
            top: _top,
            width: _width,
            height: _height
        };
    };

    presenter.destroy = function() {

        if (isApp && Bridge && Bridge.unRegisterListener) {
            Bridge.unRegisterListener('TriggerUserInput', bridgeListener);
        }
    };

    return presenter;
}
]]>

</presenter>


<resources>

<file src='./resources/compop_dec1.png' />
<file src='./resources/compop_dec2.png' />


</resources>

</addon>