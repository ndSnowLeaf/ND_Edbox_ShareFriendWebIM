<?xml version='1.0' encoding='UTF-8'?>
<addon id="templateid"><properties><property name="question_id" displayName="题目ID" type="string" isLocalized="false"/><property name="question_url" displayName="题目内容" type="jsonFile" isLocalized="false"/></properties><dependencies><jsDependency><javaScript name="AlamedaRequire" version="0.3.2"/><javaScript name="knockout" version="3.3.0"/><javaScript name="tools_common" version="1.0.0"/><javaScript name="Svg2DCalculate" version="1.0.0"/><javaScript name="snap_svg" version="1.0.0"/></jsDependency></dependencies><css><![CDATA[.exam_skin_wood .linearProgramming_wrapper{width:100%;height:100%;background-color:#b1c6d7}.exam_skin_wood .linearProgramming_wrapper .linearProgramming_main{width:80em;height:45em;position:absolute;left:50%;top:50%;margin:-22.5em 0 0 -40em;padding:4.41667em 4.16667em 2.08333em 4.58333em}.exam_skin_wood .linearProgramming_wrapper .lp_axis_left{float:left;width:38.33333em;height:38.33333em;background-color:#bfd3e2}.exam_skin_wood .linearProgramming_wrapper .lp_axis_left .lp_axis_box{width:37.75em;height:37.75em;margin:.29167em auto}.exam_skin_wood .linearProgramming_wrapper .lp_data_right{float:right;width:32em;height:38.33333em}.exam_skin_wood .linearProgramming_wrapper .lp_fenshu_item{display:inline-block;position:relative;text-align:center;vertical-align:middle;padding:0 .20833em;margin-right:-.33333em;height:auto}.exam_skin_wood .linearProgramming_wrapper .lp_fenshu_item:after{display:inline-block;width:0;height:100%;content:"";vertical-align:middle;overflow:hidden}.exam_skin_wood .linearProgramming_wrapper .lp_fenshu_item .fuhao{display:inline-block;vertical-align:middle;font-weight:700}.exam_skin_wood .linearProgramming_wrapper .lp_fenshu_item .lp_fenshu_item_wrapper{position:relative;display:inline-block;vertical-align:middle}.exam_skin_wood .linearProgramming_wrapper .lp_fenshu_item .lp_fenzi{display:block;height:50%;position:relative}.exam_skin_wood .linearProgramming_wrapper .lp_fenshu_item .num{display:inline-block}.exam_skin_wood .linearProgramming_wrapper .lp_fenshu_item .num_text{display:inline-block;vertical-align:middle;font-family:Microsoft yahei;font-weight:700;color:#3e3e3e}.exam_skin_wood .linearProgramming_wrapper .lp_fenshu_item .lp_fenmu{display:block;height:50%;position:relative;margin-top:.20833em}.exam_skin_wood .linearProgramming_wrapper .lp_fenshu_item .lp_line_mid{display:inline-block;position:absolute;top:50%;left:0;width:100%;height:.16667em;margin-top:-.04167em;background-color:#3e3e3e}.exam_skin_wood .linearProgramming_wrapper .lp_drop_num.font_change_45 .change_font_size,.exam_skin_wood .linearProgramming_wrapper .lp_drop_num.font_change_45 .lp_bracket_box:after,.exam_skin_wood .linearProgramming_wrapper .lp_drop_num.font_change_45 .lp_bracket_box:before,.exam_skin_wood .linearProgramming_wrapper .lp_intersection_point.font_change_45 .change_font_size,.exam_skin_wood .linearProgramming_wrapper .lp_intersection_point.font_change_45 .lp_bracket_box:after,.exam_skin_wood .linearProgramming_wrapper .lp_intersection_point.font_change_45 .lp_bracket_box:before{font-size:1.875em!important}.exam_skin_wood .linearProgramming_wrapper .lp_drop_num.font_change_36 .change_font_size,.exam_skin_wood .linearProgramming_wrapper .lp_drop_num.font_change_36 .lp_bracket_box:after,.exam_skin_wood .linearProgramming_wrapper .lp_drop_num.font_change_36 .lp_bracket_box:before,.exam_skin_wood .linearProgramming_wrapper .lp_intersection_point.font_change_36 .change_font_size,.exam_skin_wood .linearProgramming_wrapper .lp_intersection_point.font_change_36 .lp_bracket_box:after,.exam_skin_wood .linearProgramming_wrapper .lp_intersection_point.font_change_36 .lp_bracket_box:before{font-size:1.5em!important}.exam_skin_wood .linearProgramming_wrapper .lp_drop_num.font_change_32 .change_font_size,.exam_skin_wood .linearProgramming_wrapper .lp_drop_num.font_change_32 .lp_bracket_box:after,.exam_skin_wood .linearProgramming_wrapper .lp_drop_num.font_change_32 .lp_bracket_box:before,.exam_skin_wood .linearProgramming_wrapper .lp_intersection_point.font_change_32 .change_font_size,.exam_skin_wood .linearProgramming_wrapper .lp_intersection_point.font_change_32 .lp_bracket_box:after,.exam_skin_wood .linearProgramming_wrapper .lp_intersection_point.font_change_32 .lp_bracket_box:before{font-size:1.33333em!important}.exam_skin_wood .linearProgramming_wrapper .lp_drop_num.font_change_28 .change_font_size,.exam_skin_wood .linearProgramming_wrapper .lp_drop_num.font_change_28 .lp_bracket_box:after,.exam_skin_wood .linearProgramming_wrapper .lp_drop_num.font_change_28 .lp_bracket_box:before,.exam_skin_wood .linearProgramming_wrapper .lp_intersection_point.font_change_28 .change_font_size,.exam_skin_wood .linearProgramming_wrapper .lp_intersection_point.font_change_28 .lp_bracket_box:after,.exam_skin_wood .linearProgramming_wrapper .lp_intersection_point.font_change_28 .lp_bracket_box:before{font-size:1.16667em!important}.exam_skin_wood .linearProgramming_wrapper .lp_drop_num.font_change_24 .change_font_size,.exam_skin_wood .linearProgramming_wrapper .lp_drop_num.font_change_24 .lp_bracket_box:after,.exam_skin_wood .linearProgramming_wrapper .lp_drop_num.font_change_24 .lp_bracket_box:before,.exam_skin_wood .linearProgramming_wrapper .lp_intersection_point.font_change_24 .change_font_size,.exam_skin_wood .linearProgramming_wrapper .lp_intersection_point.font_change_24 .lp_bracket_box:after,.exam_skin_wood .linearProgramming_wrapper .lp_intersection_point.font_change_24 .lp_bracket_box:before{font-size:1em!important}.exam_skin_wood .linearProgramming_wrapper .lp_drop_num.font_change_24 .lp_line_mid,.exam_skin_wood .linearProgramming_wrapper .lp_intersection_point.font_change_24 .lp_line_mid{height:.125em!important}.exam_skin_wood .linearProgramming_wrapper .lp_drop_num.font_change_22 .change_font_size,.exam_skin_wood .linearProgramming_wrapper .lp_drop_num.font_change_22 .lp_bracket_box:after,.exam_skin_wood .linearProgramming_wrapper .lp_drop_num.font_change_22 .lp_bracket_box:before,.exam_skin_wood .linearProgramming_wrapper .lp_intersection_point.font_change_22 .change_font_size,.exam_skin_wood .linearProgramming_wrapper .lp_intersection_point.font_change_22 .lp_bracket_box:after,.exam_skin_wood .linearProgramming_wrapper .lp_intersection_point.font_change_22 .lp_bracket_box:before{font-size:.91667em!important}.exam_skin_wood .linearProgramming_wrapper .lp_drop_num.font_change_22 .lp_line_mid,.exam_skin_wood .linearProgramming_wrapper .lp_intersection_point.font_change_22 .lp_line_mid{height:.125em!important}.exam_skin_wood .lp_data_right{text-align:center;position:relative}.exam_skin_wood .lp_data_right .lp_constraint_box{position:relative;height:20.25em;width:100%}.exam_skin_wood .lp_data_right .lp_constraint_box .lp_btn_delete{position:absolute;top:-.33333em;left:12.95833em;height:2.83333em;width:4.08333em;padding:0;text-align:center}.exam_skin_wood .lp_data_right .lp_constraint_box .lp_btn_delete.ui_btn_active .icon_delete,.exam_skin_wood .lp_data_right .lp_constraint_box .lp_btn_delete:active .icon_delete{background-position:left -4em}.exam_skin_wood .lp_data_right .lp_constraint_box .lp_btn_delete.click_disabled{pointer-events:none!important}.exam_skin_wood .lp_data_right .lp_constraint_box .lp_btn_delete.click_disabled .icon_delete{background-position:0 100%}.exam_skin_wood .lp_data_right .lp_constraint_box .lp_btn_delete .icon_delete{margin-top:.625em;margin-left:.45833em;width:1.41667em;height:1.58333em;background:url(resources/wood/images/icon_delete.png) no-repeat 50%;background-size:100% auto;background-position:0 0}.exam_skin_wood .lp_data_right .lp_objectfun_wrap{position:absolute;width:100%;bottom:-.41667em;left:0}.exam_skin_wood .lp_data_right .lp_objectfun_box{margin-top:.41667em;height:18.33333em;width:100%}.exam_skin_wood .lp_data_right .lp_input_c,.exam_skin_wood .lp_data_right .lp_input_x,.exam_skin_wood .lp_data_right .lp_input_y{float:left}.exam_skin_wood .lp_data_right .lp_input_c .lp_drop_num,.exam_skin_wood .lp_data_right .lp_input_x .lp_drop_num,.exam_skin_wood .lp_data_right .lp_input_y .lp_drop_num{position:relative;display:inline-block;width:5em;height:2.83333em;overflow:hidden;text-align:center;vertical-align:middle;border:1px solid #8b8b8b;border-radius:.58333em;box-shadow:inset .08333em 0 .41667em #e3e5e6,inset 0 -.125em .41667em #e3e5e6;background-color:#fff}.exam_skin_wood .lp_data_right .lp_input_c .lp_drop_num:after,.exam_skin_wood .lp_data_right .lp_input_x .lp_drop_num:after,.exam_skin_wood .lp_data_right .lp_input_y .lp_drop_num:after{display:inline-block;width:0;height:100%;content:"center";vertical-align:middle;overflow:hidden}.exam_skin_wood .lp_data_right .lp_input_c .lp_drop_num .num_input,.exam_skin_wood .lp_data_right .lp_input_x .lp_drop_num .num_input,.exam_skin_wood .lp_data_right .lp_input_y .lp_drop_num .num_input{display:inline-block;vertical-align:middle}.exam_skin_wood .lp_data_right .lp_input_c .lp_drop_num .num_input .num_input_text,.exam_skin_wood .lp_data_right .lp_input_x .lp_drop_num .num_input .num_input_text,.exam_skin_wood .lp_data_right .lp_input_y .lp_drop_num .num_input .num_input_text{font-size:1.33333em;font-family:Microsoft yahei;color:#4d4d4d;font-weight:700}.exam_skin_wood .lp_data_right .lp_icon_add,.exam_skin_wood .lp_data_right .lp_icon_equal,.exam_skin_wood .lp_data_right .lp_icon_x,.exam_skin_wood .lp_data_right .lp_icon_y,.exam_skin_wood .lp_data_right .lp_icon_z,.exam_skin_wood .lp_data_right .lp_icon_zero{float:left;width:1.58333em;height:1.91667em;margin:.45833em .125em}.exam_skin_wood .lp_data_right .lp_icon_x{background:url(resources/wood/images/icon_x.png) no-repeat 50%;background-size:100% auto}.exam_skin_wood .lp_data_right .lp_icon_y{background:url(resources/wood/images/icon_y.png) no-repeat 50%;background-size:100% auto}.exam_skin_wood .lp_data_right .lp_icon_zero{background:url(resources/wood/images/icon_0.png) no-repeat 50%;background-size:100% auto}.exam_skin_wood .lp_data_right .lp_icon_add{background:url(resources/wood/images/icon_add.png) no-repeat 50%;background-size:100% auto}.exam_skin_wood .lp_data_right .lp_icon_equal{background:url(resources/wood/images/icon_equal2.png) no-repeat 50%;background-size:100% auto}.exam_skin_wood .lp_data_right .lp_icon_z{background:url(resources/wood/images/icon_z.png) no-repeat 50%;background-size:100% auto}.exam_skin_wood .lp_data_right .lp_icon_zmax,.exam_skin_wood .lp_data_right .lp_icon_zmin{float:left;width:3.41667em;height:1.58333em;margin:.45833em 0;background:url(resources/wood/images/z.png) no-repeat 50%;background-size:100% auto}.exam_skin_wood .lp_data_right .lp_constraint_text{position:absolute;left:.41667em;top:0}.exam_skin_wood .lp_data_right .lp_constraint_text .txt{color:#333;font-family:Microsoft yahei;font-size:2em;font-weight:700}.exam_skin_wood .lp_data_right .lp_drop_select{white-space:normal;z-index:100;position:absolute;pointer-events:none}.exam_skin_wood .lp_data_right .lp_drop_select .lp_numselect_wrap{border:1px solid #686868;padding:.41667em;background-color:#ebebeb;text-align:center;display:inline-block;pointer-events:auto}.exam_skin_wood .lp_data_right .lp_drop_select.hide_dom{display:none}.exam_skin_wood .lp_data_right .lp_drop_select a{display:inline-block;width:3.66667em;height:2.25em;line-height:2.25em;color:#4d4d4d;background:#fff;text-align:center;border-radius:.16667em;border:1px solid #9c9c9c;margin:.20833em}.exam_skin_wood .lp_data_right .lp_drop_select a.ui_btn_active,.exam_skin_wood .lp_data_right .lp_drop_select a:active{background:#31b0ee;color:#fff;border-color:#007ab6}.exam_skin_wood .lp_data_right .lp_drop_select a.ui_btn_active .icon_d,.exam_skin_wood .lp_data_right .lp_drop_select a.ui_btn_active .icon_dd,.exam_skin_wood .lp_data_right .lp_drop_select a.ui_btn_active .icon_x,.exam_skin_wood .lp_data_right .lp_drop_select a.ui_btn_active .icon_xd,.exam_skin_wood .lp_data_right .lp_drop_select a:active .icon_d,.exam_skin_wood .lp_data_right .lp_drop_select a:active .icon_dd,.exam_skin_wood .lp_data_right .lp_drop_select a:active .icon_x,.exam_skin_wood .lp_data_right .lp_drop_select a:active .icon_xd{background-position:0 100%;font-size:1em}.exam_skin_wood .lp_data_right .lp_drop_select a.ui_btn_active .icon_back,.exam_skin_wood .lp_data_right .lp_drop_select a.ui_btn_active .icon_cancel,.exam_skin_wood .lp_data_right .lp_drop_select a.ui_btn_active .icon_ensure,.exam_skin_wood .lp_data_right .lp_drop_select a.ui_btn_active .icon_line,.exam_skin_wood .lp_data_right .lp_drop_select a:active .icon_back,.exam_skin_wood .lp_data_right .lp_drop_select a:active .icon_cancel,.exam_skin_wood .lp_data_right .lp_drop_select a:active .icon_ensure,.exam_skin_wood .lp_data_right .lp_drop_select a:active .icon_line{background-position:0 100%}.exam_skin_wood .lp_data_right .lp_drop_select a.click_disabled{pointer-events:none;background:#a9b6c0;color:#899299;border-color:#9c9c9c}.exam_skin_wood .lp_data_right .lp_drop_select a .icon_enter{font-size:1.25em;font-family:Microsoft yahei}.exam_skin_wood .lp_data_right .lp_drop_select a span{display:inline-block;font-size:1.5em;font-family:Microsoft yahei;vertical-align:top}.exam_skin_wood .lp_data_right .lp_drop_select_sign a:after{display:inline-block;width:0;height:100%;content:"center";vertical-align:middle;overflow:hidden}.exam_skin_wood .lp_data_right .lp_drop_select_sign a span{display:inline-block;margin-top:-.20833em;font-size:1em;vertical-align:middle;width:1em;height:1.08333em}.exam_skin_wood .lp_data_right .lp_drop_select_sign a .icon_dd{background:url(resources/wood/images/icon_sign_dd.png) no-repeat;background-position:0 0;background-size:100% auto}.exam_skin_wood .lp_data_right .lp_drop_select_sign a .icon_d{background:url(resources/wood/images/icon_sign_d.png) no-repeat;background-position:0 0;background-size:100% auto}.exam_skin_wood .lp_data_right .lp_drop_select_sign a .icon_xd{background:url(resources/wood/images/icon_sign_xd.png) no-repeat;background-position:0 0;background-size:100% auto}.exam_skin_wood .lp_data_right .lp_drop_select_sign a .icon_x{background:url(resources/wood/images/icon_sign_x.png) no-repeat;background-position:0 0;background-size:100% auto}.exam_skin_wood .lp_data_right .lp_drop_select_num .icon_back{margin-top:.5em;font-size:1em;width:1.58333em;height:1.25em;background:url(resources/wood/images/icon_back.png) no-repeat;background-size:100% auto;background-position:0 0}.exam_skin_wood .lp_data_right .lp_drop_select_num .icon_line{margin-top:.41667em;font-size:1em;width:.75em;height:1.41667em;background:url(resources/wood/images/icon_line.png) no-repeat;background-size:100% auto;background-position:0 0}.exam_skin_wood .lp_data_right .lp_constraint_table{display:-webkit-box;display:-ms-flexbox;display:flex;position:absolute;z-index:22;top:2.91667em;left:50%;margin-left:-15.58333em;width:31.04167em;height:13.33333em;background-color:#bfd3e2;overflow:hidden}.exam_skin_wood .lp_data_right .lp_constraint_table .lp_constraint_main{-webkit-box-flex:1;-ms-flex:1;flex:1;position:relative}.exam_skin_wood .lp_data_right .lp_constraint_table .lp_constraint_main.lp_show_scrollbar .lp_constraint_bd{overflow-y:scroll}.exam_skin_wood .lp_data_right .lp_constraint_bd{overflow-y:normal;position:absolute;left:0;right:.41667em;top:.41667em;bottom:.41667em}.exam_skin_wood .lp_data_right .lp_condition_list .lp_li_item{position:relative;padding-left:1.79167em;height:4.25em;width:29.375em;border-bottom:.16667em solid #b0c7d8}.exam_skin_wood .lp_data_right .lp_condition_list .lp_li_item:after{display:inline-block;width:0;height:100%;content:"center";vertical-align:middle;overflow:hidden}.exam_skin_wood .lp_data_right .lp_condition_list .lp_li_item.ui_btn_highlight .lp_drop_num{border:1px solid #e76414!important;box-shadow:inset 0 0 6px #e76414!important}.exam_skin_wood .lp_data_right .lp_condition_list .lp_li_item.ui_btn_highlight .lp_drop_num .lp_fenmu .num_text,.exam_skin_wood .lp_data_right .lp_condition_list .lp_li_item.ui_btn_highlight .lp_drop_num .lp_fenzi .num_text,.exam_skin_wood .lp_data_right .lp_condition_list .lp_li_item.ui_btn_highlight .lp_drop_num .num_input .num_input_text{color:#e76414!important}.exam_skin_wood .lp_data_right .lp_condition_list .lp_li_item.ui_btn_highlight .lp_drop_num .lp_line_mid{background-color:#e76414!important}.exam_skin_wood .lp_data_right .lp_condition_list .lp_li_item .lp_li_item_wrap{display:inline-block;vertical-align:middle;height:2.91667em}.exam_skin_wood .lp_data_right .lp_condition_list .lp_li_item .lp_icon_arrow{cursor:pointer;position:absolute;left:0;top:50%;margin-top:-1.29167em;width:1.33333em;height:2.58333em;background:url(resources/wood/images/icon_arrow.png) no-repeat 50%;background-size:100% auto;background-position:0 0}.exam_skin_wood .lp_data_right .lp_condition_list .lp_li_item .lp_icon_box{position:absolute;z-index:5;left:0;top:50%;margin-top:-1.66667em;height:3.33333em;background-color:#b0c7d8}.exam_skin_wood .lp_data_right .lp_condition_list .lp_li_item .lp_icon_box .lp_icon_delete_box,.exam_skin_wood .lp_data_right .lp_condition_list .lp_li_item .lp_icon_box .lp_icon_eye_box{float:left;display:inline-block;height:100%;background-color:#fff;text-align:center;cursor:pointer}.exam_skin_wood .lp_data_right .lp_condition_list .lp_li_item .lp_icon_box .lp_icon_delete_box:after,.exam_skin_wood .lp_data_right .lp_condition_list .lp_li_item .lp_icon_box .lp_icon_eye_box:after{display:inline-block;width:0;height:100%;content:"center";vertical-align:middle;overflow:hidden}.exam_skin_wood .lp_data_right .lp_condition_list .lp_li_item .lp_icon_box .lp_icon_delete_box .icon,.exam_skin_wood .lp_data_right .lp_condition_list .lp_li_item .lp_icon_box .lp_icon_eye_box .icon{display:inline-block;vertical-align:middle}.exam_skin_wood .lp_data_right .lp_condition_list .lp_li_item .lp_icon_box .lp_icon_eye_box{margin-right:.08333em;width:4.25em}.exam_skin_wood .lp_data_right .lp_condition_list .lp_li_item .lp_icon_box .lp_icon_eye_box.eye_yellow .icon{background-position:left -5.25em}.exam_skin_wood .lp_data_right .lp_condition_list .lp_li_item .lp_icon_box .lp_icon_eye_box.eye_yellow.change_hide .icon{background:url(resources/wood/images/icon_eye_hide.png) no-repeat 50%;background-size:100% auto;background-position:left -5.25em}.exam_skin_wood .lp_data_right .lp_condition_list .lp_li_item .lp_icon_box .lp_icon_eye_box.eye_red .icon{background-position:left -1.75em}.exam_skin_wood .lp_data_right .lp_condition_list .lp_li_item .lp_icon_box .lp_icon_eye_box.eye_red.change_hide .icon{background:url(resources/wood/images/icon_eye_hide.png) no-repeat 50%;background-size:100% auto;background-position:left -1.75em}.exam_skin_wood .lp_data_right .lp_condition_list .lp_li_item .lp_icon_box .lp_icon_eye_box.eye_purple .icon{background-position:0 100%}.exam_skin_wood .lp_data_right .lp_condition_list .lp_li_item .lp_icon_box .lp_icon_eye_box.eye_purple.change_hide .icon{background:url(resources/wood/images/icon_eye_hide.png) no-repeat 50%;background-size:100% auto;background-position:0 100%}.exam_skin_wood .lp_data_right .lp_condition_list .lp_li_item .lp_icon_box .lp_icon_eye_box.eye_skyblue .icon{background-position:left -3.5em}.exam_skin_wood .lp_data_right .lp_condition_list .lp_li_item .lp_icon_box .lp_icon_eye_box.eye_skyblue.change_hide .icon{background:url(resources/wood/images/icon_eye_hide.png) no-repeat 50%;background-size:100% auto;background-position:left -3.5em}.exam_skin_wood .lp_data_right .lp_condition_list .lp_li_item .lp_icon_box .lp_icon_eye_box.eye_darkblue .icon{background-position:left -7em}.exam_skin_wood .lp_data_right .lp_condition_list .lp_li_item .lp_icon_box .lp_icon_eye_box.eye_darkblue.change_hide .icon{background:url(resources/wood/images/icon_eye_hide.png) no-repeat 50%;background-size:100% auto;background-position:left -7em}.exam_skin_wood .lp_data_right .lp_condition_list .lp_li_item .lp_icon_box .lp_icon_eye_box.eye_green .icon{background-position:0 0}.exam_skin_wood .lp_data_right .lp_condition_list .lp_li_item .lp_icon_box .lp_icon_eye_box.eye_green.change_hide .icon{background:url(resources/wood/images/icon_eye_hide.png) no-repeat 50%;background-size:100% auto;background-position:0 0}.exam_skin_wood .lp_data_right .lp_condition_list .lp_li_item .lp_icon_box .lp_icon_eye_box.click_disabled{pointer-events:none}.exam_skin_wood .lp_data_right .lp_condition_list .lp_li_item .lp_icon_box .lp_icon_eye_box.click_disabled .icon{background:url(resources/wood/images/icon_eye_dis.png) no-repeat 50%;background-size:100% auto}.exam_skin_wood .lp_data_right .lp_condition_list .lp_li_item .lp_icon_box .lp_icon_eye_box .icon{width:1.83333em;height:1.33333em;background:url(resources/wood/images/icon_eye.png) no-repeat 50%;background-size:100% auto;background-position:0 0}.exam_skin_wood .lp_data_right .lp_condition_list .lp_li_item .lp_icon_box .lp_icon_delete_box{width:3.83333em}.exam_skin_wood .lp_data_right .lp_condition_list .lp_li_item .lp_icon_box .lp_icon_delete_box.click_disabled{pointer-events:none;cursor:default}.exam_skin_wood .lp_data_right .lp_condition_list .lp_li_item .lp_icon_box .lp_icon_delete_box.click_disabled .icon{background-position:left -2em}.exam_skin_wood .lp_data_right .lp_condition_list .lp_li_item .lp_icon_box .lp_icon_delete_box .icon{width:1.41667em;height:1.58333em;background:url(resources/wood/images/icon_delete.png) no-repeat 50%;background-size:100% auto;background-position:0 0}.exam_skin_wood .lp_data_right .lp_condition_list .lp_li_item .lp_icon_box .lp_icon_arrow{background-position:0 100%;left:100%;margin-left:-.04167em}.exam_skin_wood .lp_data_right .lp_condition_list .lp_li_item .lp_input_sign{float:left;margin-left:.41667em}.exam_skin_wood .lp_data_right .lp_condition_list .lp_li_item .lp_input_sign .lp_drop_num{position:relative;display:inline-block;width:2.58333em;height:2.83333em;overflow:hidden;text-align:center;vertical-align:middle;border:1px solid #8b8b8b;border-radius:.58333em;box-shadow:inset .125em 0 .41667em #e3e5e6,inset 0 -.20833em .625em #e3e5e6;background-color:#fff}.exam_skin_wood .lp_data_right .lp_condition_list .lp_li_item .lp_input_sign .lp_drop_num:after{display:inline-block;width:0;height:100%;content:"center";vertical-align:middle;overflow:hidden}.exam_skin_wood .lp_data_right .lp_condition_list .lp_li_item .lp_input_sign .lp_drop_num .num_input{display:inline-block;vertical-align:middle}.exam_skin_wood .lp_data_right .lp_condition_list .lp_li_item .lp_input_sign .lp_drop_num .num_input .num_input_text{font-size:1.66667em;font-family:Microsoft yahei;color:#4d4d4d;font-weight:700}.exam_skin_wood .lp_data_right .lp_show_space{position:absolute;left:50%;bottom:.33333em;margin-left:-5.16667em;min-width:10.33333em}.exam_skin_wood .lp_data_right .lp_show_space.click_disabled{pointer-events:none}.exam_skin_wood .lp_data_right .lp_objectfun_box{position:relative;padding-top:2.5em}.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_function_main{position:absolute;left:50%;margin-left:-15.58333em;height:4.08333em;width:31.04167em;background-color:#bfd3e2}.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_function_main:after{display:inline-block;width:0;height:100%;content:"center";vertical-align:middle;overflow:hidden}.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_function_main .lp_function_wrap{display:inline-block;vertical-align:middle}.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_function_wrap .lp_btn_delete{height:2.83333em;width:4.08333em;padding:0;text-align:center}.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_function_wrap .lp_btn_delete.ui_btn_active .icon_delete,.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_function_wrap .lp_btn_delete:active .icon_delete{background-position:left -4em}.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_function_wrap .lp_btn_delete.click_disabled{pointer-events:none!important}.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_function_wrap .lp_btn_delete.click_disabled .icon_delete{background-position:0 100%}.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_function_wrap .icon_delete{margin-top:.625em;margin-left:.45833em;width:1.41667em;height:1.58333em;background:url(resources/wood/images/icon_delete.png) no-repeat 50%;background-size:100% auto;background-position:0 0}.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_group{width:31.04167em;position:absolute;left:50%;margin-left:-15.58333em}.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_group .lp_item{height:100%;float:left;background-color:#bfd3e2}.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_group .lp_item:after{display:inline-block;width:0;height:100%;content:"center";vertical-align:middle;overflow:hidden}.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_group .lp_item .text_box{display:inline-block;vertical-align:middle;text-align:center}.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_group .lp_item .text_box .txt{font-family:Microsoft yahei;color:#333}.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_group .lp_item_1{width:11.16667em}.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_group .lp_item_1.font_change_45 .change_font_size{font-size:1.875em!important}.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_group .lp_item_1.font_change_36 .change_font_size{font-size:1.5em!important}.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_group .lp_item_1.font_change_32 .change_font_size{font-size:1.33333em!important}.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_group .lp_item_1.font_change_32 .change_linehight{line-height:1.25!important}.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_group .lp_item_1.font_change_28 .change_font_size{font-size:1.16667em!important}.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_group .lp_item_1.font_change_28 .change_linehight{line-height:1.4!important}.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_group .lp_item_1.font_change_24 .change_font_size{font-size:1em!important}.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_group .lp_item_1.font_change_24 .change_linehight{line-height:1.8!important}.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_group .lp_item_1.font_change_24 .lp_line_mid{height:.125em!important}.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_group .lp_item_2{width:14.16667em;margin-left:.16667em}.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_group .lp_item_2.font_change_45 .change_bracket_box:after,.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_group .lp_item_2.font_change_45 .change_bracket_box:before,.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_group .lp_item_2.font_change_45 .change_font_size{font-size:1.875em!important}.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_group .lp_item_2.font_change_36 .change_bracket_box:after,.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_group .lp_item_2.font_change_36 .change_bracket_box:before,.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_group .lp_item_2.font_change_36 .change_font_size{font-size:1.5em!important}.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_group .lp_item_2.font_change_32 .change_bracket_box:after,.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_group .lp_item_2.font_change_32 .change_bracket_box:before,.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_group .lp_item_2.font_change_32 .change_font_size{font-size:1.33333em!important}.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_group .lp_item_2.font_change_32 .change_linehight{line-height:1.25!important}.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_group .lp_item_2.font_change_28 .change_bracket_box:after,.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_group .lp_item_2.font_change_28 .change_bracket_box:before,.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_group .lp_item_2.font_change_28 .change_font_size{font-size:1.16667em!important}.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_group .lp_item_2.font_change_28 .change_linehight{line-height:1.4!important}.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_group .lp_item_2.font_change_24 .change_bracket_box:after,.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_group .lp_item_2.font_change_24 .change_bracket_box:before,.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_group .lp_item_2.font_change_24 .change_font_size{font-size:1em!important}.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_group .lp_item_2.font_change_24 .change_linehight{line-height:1.8!important}.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_group .lp_item_2.font_change_24 .lp_line_mid{height:.125em!important}.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_group .lp_item_3{width:5.33333em;margin-left:.16667em}.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_group .lp_item_3 .com_applicationset_switch.click_disabled{background:#c5cdd2;border:1px solid #99a0a4;pointer-events:none}.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_group .lp_item_3 .com_applicationset_switch.click_disabled:before{background:#c5cdd2;border:1px solid #99a0a4}.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_title{top:6.79167em;height:2.75em}.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_title .txt{font-size:1.5em;font-weight:400}.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_1{top:9.70833em}.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_2{top:13.875em}.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_1,.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_2{height:4em}.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_1 .lp_bracket_box,.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_2 .lp_bracket_box{position:relative;display:-webkit-box;display:-ms-flexbox;display:flex}.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_1 .lp_bracket_box:before,.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_2 .lp_bracket_box:before{content:"(";left:0;font-size:1.875em;font-family:Microsoft yahei;color:#4d4d4d}.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_1 .lp_bracket_box:after,.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_2 .lp_bracket_box:after{content:")";height:1.83333em;margin-top:-.91667em;right:0;font-size:1.875em;font-family:Microsoft yahei;color:#4d4d4d}.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_1 .text_box,.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_2 .text_box{display:inline-block;line-height:.95;max-width:90%;height:auto}.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_1 .text_box .num_text,.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_1 .text_box .txt,.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_2 .text_box .num_text,.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_2 .text_box .txt{font-size:1.875em;font-weight:700}.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_1 .lp_item_1,.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_2 .lp_item_1{position:relative;padding-left:4.16667em}.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_1 .lp_item_1 .text_box,.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_2 .lp_item_1 .text_box{width:90%}.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_1 .lp_item_2,.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_2 .lp_item_2{position:relative}.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_1 .lp_item_2 .lp_item_2_wrap,.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_2 .lp_item_2 .lp_item_2_wrap{width:100%;height:100%}.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_1 .lp_item_2 .lp_item_2_wrap:after,.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_2 .lp_item_2 .lp_item_2_wrap:after{content:"";display:inline-block;width:0;height:100%;vertical-align:middle}.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_1 .lp_item_2 .lp_mul_solution,.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_2 .lp_item_2 .lp_mul_solution{position:absolute;width:100%;height:11.25em;bottom:4.29167em;background-color:#d1e1ed;box-shadow:-.125em -.08333em .41667em .08333em #9fb4c4;overflow:hidden}.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_1 .lp_item_2 .lp_mul_solution .lp_mul_solution_wrap,.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_2 .lp_item_2 .lp_mul_solution .lp_mul_solution_wrap{overflow-y:scroll;position:absolute;top:.66667em;left:0;bottom:1.25em;right:.41667em}.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_1 .lp_item_2 .lp_mul_solution .lp_mul_solution_wrap .lp_bracket_box,.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_2 .lp_item_2 .lp_mul_solution .lp_mul_solution_wrap .lp_bracket_box{height:3.33333em}.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_1 .lp_item_2 .lp_mul_solution .lp_triangle_fold,.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_2 .lp_item_2 .lp_mul_solution .lp_triangle_fold{bottom:.33333em;right:.41667em;display:inline-block;width:.83333em;height:.83333em;position:absolute;background:url(resources/wood/images/icon_triangle.png) no-repeat;background-size:100% auto;background-position:0 0}.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_1 .lp_item_2 .lp_mul_solution .lp_triangle_fold.ui_btn_active,.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_1 .lp_item_2 .lp_mul_solution .lp_triangle_fold:active,.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_2 .lp_item_2 .lp_mul_solution .lp_triangle_fold.ui_btn_active,.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_2 .lp_item_2 .lp_mul_solution .lp_triangle_fold:active{background-size:100% auto;background-position:left -1.25em}.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_1 .lp_item_2 .lp_mul_solution .lp_bracket_box,.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_2 .lp_item_2 .lp_mul_solution .lp_bracket_box{width:100%;height:4em;line-height:1.8}.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_1 .lp_item_2 .lp_triangle_expand,.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_2 .lp_item_2 .lp_triangle_expand{top:.33333em;right:.33333em;display:inline-block;width:.83333em;height:.83333em;position:absolute;background:url(resources/wood/images/icon_triangle.png) no-repeat;background-size:100% auto;background-position:left -2.5em}.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_1 .lp_item_2 .lp_triangle_expand.ui_btn_active,.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_1 .lp_item_2 .lp_triangle_expand:active,.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_2 .lp_item_2 .lp_triangle_expand.ui_btn_active,.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_2 .lp_item_2 .lp_triangle_expand:active{background-size:100% auto;background-position:0 100%}.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_1 .lp_icon_zmax,.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_2 .lp_icon_zmax{display:inline-block;margin-top:.20833em;background-position:0 0}.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_1 .lp_icon_zmin,.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_2 .lp_icon_zmin{display:inline-block;margin-top:.20833em;background-position:0 100%}.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_1 .lp_icon_zmax,.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_1 .lp_icon_zmin,.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_2 .lp_icon_zmax,.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_2 .lp_icon_zmin{position:absolute;left:.20833em;top:50%;margin-top:-.79167em}.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_1 .lp_icon_equal,.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_2 .lp_icon_equal{position:absolute;left:3.54167em;top:50%;margin-top:-.375em;width:1.16667em;height:.75em;background:url(resources/wood/images/icon_equal.png) no-repeat 50%;background-size:100% auto;background-position:0 0}.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_1 .lp_int_solution,.exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_2 .lp_int_solution{display:inline-block;vertical-align:middle}.exam_skin_wood .lp_popTips_wrapper{position:absolute;left:0;top:50%;right:0;text-align:center;z-index:1009;margin-top:-10.04167em}.exam_skin_wood .lp_popTips_wrapper .lp_popTips_content{max-width:64em;min-width:33.5em;height:20.08333em;display:inline-block;vertical-align:middle;background:rgba(47,47,47,.81);border-radius:.41667em;padding:3em}.exam_skin_wood .lp_popTips_wrapper .lp_popTips_content_bd{min-height:8.33333em;height:1px;text-align:center}.exam_skin_wood .lp_popTips_wrapper .lp_popTips_content_bd:after{content:"";display:inline-block;width:0;height:100%;vertical-align:middle}.exam_skin_wood .lp_popTips_wrapper .lp_popTips_content_bd .lp_popTips_content_text{display:inline-block;vertical-align:middle}.exam_skin_wood .lp_popTips_wrapper .lp_popTips_content_bd .cptc_txt{font-family:microsoft yahei;font-size:2em;color:#fff}.exam_skin_wood .lp_popTips_wrapper .lp_popTips_content_bd .red{color:#ff0101}.exam_skin_wood .lp_popTips_wrapper .lp_popTips_content_ft{margin-top:2.5em}.exam_skin_wood .lp_popTips_wrapper .com_btns{min-width:8.08333em;height:3.08333em;margin:0 1.25em}.exam_skin_wood .lp_toast_wrapper{position:absolute;left:0;top:50%;right:0;text-align:center;z-index:1009;margin-top:-4.16667em}.exam_skin_wood .lp_toast_wrapper .lp_popTips_content_text{min-width:18.79167em;display:inline-block;vertical-align:middle;background:rgba(47,47,47,.81);border-radius:.41667em;height:4.75em;text-align:center;padding:0 3.33333em}.exam_skin_wood .lp_toast_wrapper .lp_popTips_content_text:after{content:"";display:inline-block;width:0;height:100%;vertical-align:middle}.exam_skin_wood .lp_toast_wrapper .lp_popTips_content_text .cptc_txt{display:inline-block;vertical-align:middle;font-family:microsoft yahei;font-size:2em;color:#fff}.exam_skin_wood .lp_light_scrollbar::-webkit-scrollbar{width:.66667em;height:.5em;background:#b0c7d8;border-radius:.25em}.exam_skin_wood .lp_light_scrollbar::-webkit-scrollbar-thumb{background:#a0bbcf;border-radius:.25em}.exam_skin_wood .lp_light_scrollbar_2::-webkit-scrollbar{width:.66667em;height:.5em;background:#c0d3e2;border-radius:.25em}.exam_skin_wood .lp_light_scrollbar_2::-webkit-scrollbar-thumb{background:#abc4d6;border-radius:.25em}.exam_skin_wood .lp_intersection_point{height:auto;line-height:.95}.exam_skin_wood .lp_intersection_point:after{content:"";display:inline-block;width:0;height:100%;vertical-align:middle}.exam_skin_wood .lp_intersection_point .lp_intersection{display:inline-block;vertical-align:middle;line-height:2.2;font-size:1.875em;margin-top:.20833em;font-family:Microsoft yahei;font-weight:700;color:#4d4d4d}.exam_skin_wood .lp_intersection_point .lp_bracket_box{position:relative;display:inline-block;vertical-align:middle}.exam_skin_wood .lp_intersection_point .lp_bracket_box:before{content:"(";left:0;font-size:1.875em;font-family:Microsoft yahei;font-weight:700;color:#4d4d4d;line-height:2.2}.exam_skin_wood .lp_intersection_point .lp_bracket_box:after{content:")";right:0;font-size:1.875em;font-family:Microsoft yahei;font-weight:700;color:#4d4d4d;line-height:2.2}.exam_skin_wood .lp_intersection_point .lp_bracket_box .num_text{font-size:1.875em}.exam_skin_wood .lp_intersection_point .lp_bracket_box .douhao{height:.83333em;line-height:2.6;font-size:1.875em}.exam_skin_wood .linear_equation{height:auto}.exam_skin_wood .linear_equation span{margin-left:-.16667em}.exam_skin_wood .linear_equation .nd_NewRoman_italic{font-size:1.5em}.exam_skin_wood .linear_equation .microsoftYahei{font-size:1.25em}.typefaces_long .exam_skin_wood .lp_data_right .lp_constraint_text .txt{font-size:1.5em}.typefaces_long .exam_skin_wood .lp_data_right .lp_constraint_box .lp_btn_delete{left:26.65833em}.typefaces_long .exam_skin_wood .lp_data_right .lp_constraint_text{top:.4em}.typefaces_long .exam_skin_wood .lp_data_right .lp_show_space{bottom:.1em;max-width:25em;margin-left:-13.16667em;line-height:1.3em;padding-top:.1em;height:3.36667em}.typefaces_long .exam_skin_wood .lp_data_right .lp_show_space .btns-primary-txt{width:auto;display:-webkit-box;overflow:hidden;text-overflow:ellipsis;-webkit-line-clamp:2;-webkit-box-orient:vertical;margin:.1em auto}.typefaces_long .exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_group .lp_item_1{width:9.33333em}.typefaces_long .exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_group .lp_item_2{width:14em}.typefaces_long .exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_group .lp_item_3{width:7.33333em}.typefaces_long .exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_title .txt{font-size:1em}.typefaces_long .exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_title .lp_item{padding-top:.1em}.typefaces_long .exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_title .lp_item .txt{line-height:1.2;width:auto;display:-webkit-box;overflow:hidden;text-overflow:ellipsis;-webkit-line-clamp:2;-webkit-box-orient:vertical}.typefaces_long .exam_skin_wood .com_applicationset_switch{margin-bottom:0}.typefaces_long .exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_1 .text_box,.typefaces_long .exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_2 .text_box{max-width:94%}.typefaces_ru_RU .exam_skin_wood .lp_data_right .lp_constraint_text .txt{font-size:1.5em}.typefaces_ru_RU .exam_skin_wood .lp_data_right .lp_constraint_box .lp_btn_delete{left:26.65833em}.typefaces_ru_RU .exam_skin_wood .lp_data_right .lp_constraint_text{top:.4em}.typefaces_ru_RU .exam_skin_wood .lp_data_right .lp_show_space{bottom:.1em;max-width:25em;margin-left:-13.16667em;line-height:1.3em;padding-top:.1em;height:3.36667em}.typefaces_ru_RU .exam_skin_wood .lp_data_right .lp_show_space .btns-primary-txt{width:auto;display:-webkit-box;overflow:hidden;text-overflow:ellipsis;-webkit-line-clamp:2;-webkit-box-orient:vertical;margin:.1em auto}.typefaces_ru_RU .exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_group .lp_item_1{width:9.33333em}.typefaces_ru_RU .exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_group .lp_item_2{width:14em}.typefaces_ru_RU .exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_group .lp_item_3{width:7.33333em}.typefaces_ru_RU .exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_title .txt{font-size:1em}.typefaces_ru_RU .exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_title .lp_item{padding-top:.1em}.typefaces_ru_RU .exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_title .lp_item .txt{line-height:1.2;width:auto;display:-webkit-box;overflow:hidden;text-overflow:ellipsis;-webkit-line-clamp:2;-webkit-box-orient:vertical}.typefaces_ru_RU .exam_skin_wood .com_applicationset_switch{margin-bottom:0}.typefaces_ru_RU .exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_1 .text_box,.typefaces_ru_RU .exam_skin_wood .lp_data_right .lp_objectfun_box .lp_solution_2 .text_box{max-width:94%}]]></css><view><![CDATA[<div class="exam_skin_wood"><div class="linearProgramming_wrapper"><div class="linearProgramming_main"><div class="lp_axis_left"><div class="lp_axis_box"></div></div><div class="lp_data_right"><div class="lp_constraint_box"><span class="lp_constraint_text"><p class="txt">线性约束条件</p></span><a class="com_btns btns-primary lp_btn_delete click_disabled" href="javascript:;"><b class="btns-primary-icon icon_delete"></b></a><div class="lp_drop_select lp_drop_select_num hide_dom" id="dialogNumber"><div class="lp_numselect_wrap"><a href="javascript:;"><span>7</span></a> <a href="javascript:;"><span>8</span></a> <a href="javascript:;"><span>9</span></a><br><a href="javascript:;"><span>4</span></a> <a href="javascript:;"><span>5</span></a> <a href="javascript:;"><span>6</span></a><br><a href="javascript:;"><span>1</span></a> <a href="javascript:;"><span>2</span></a> <a href="javascript:;"><span>3</span></a><br><a href="javascript:;"><span style="margin-top:-3px">-</span></a> <a href="javascript:;"><span>0</span></a> <a href="javascript:;"><span>.</span></a><br><a href="javascript:;"><span class="icon_line"></span></a> <a href="javascript:;"><span class="icon_back"></span></a> <a href="javascript:;"><p class="icon_enter">Enter</p></a></div></div><div class="lp_drop_select lp_drop_select_sign hide_dom" id="dialogInequality"><div class="lp_numselect_wrap"><a href="javascript:;"><span class="icon_dd"></span></a><br><a href="javascript:;"><span class="icon_d"></span></a><br><a href="javascript:;"><span class="icon_xd"></span></a><br><a href="javascript:;"><span class="icon_x"></span></a></div></div><div class="lp_constraint_table"><div class="lp_constraint_main lp_show_scrollbar"><div class="lp_constraint_bd lp_light_scrollbar"><ul class="lp_condition_list"><li class="lp_li_item lp_li_item1"><div class="lp_li_item_wrap"><a class="lp_icon_arrow"></a><div class="lp_icon_box hide_dom"><span class="lp_icon_eye_box eye_green click_disabled"><span class="icon"></span> </span><span class="lp_icon_delete_box click_disabled"><span class="icon"></span> </span><a class="lp_icon_arrow"></a></div><div class="lp_input_x"><a href="javascript:void(0)" class="lp_drop_num"><span class="num_input"><span class="num_input_text change_font_size">a</span></span><div class="lp_fenshu_item hide_dom"><span class="num_input fuhao"><span class="num_input_text change_font_size">-&nbsp;</span></span><div class="lp_fenshu_item_wrapper"><div class="lp_fenzi"><p class="num"><span class="num_text change_font_size">a1</span></p></div><div class="lp_fenmu"><p class="num"><span class="num_text change_font_size">a2</span></p></div><span class="lp_line_mid"></span></div></div></a></div><span class="lp_icon_x"></span> <span class="lp_icon_add"></span><div class="lp_input_y"><a href="javascript:void(0)" class="lp_drop_num"><span class="num_input"><span class="num_input_text change_font_size">b</span></span><div class="lp_fenshu_item hide_dom"><span class="num_input fuhao"><span class="num_input_text change_font_size">-&nbsp;</span></span><div class="lp_fenshu_item_wrapper"><div class="lp_fenzi"><p class="num"><span class="num_text change_font_size">b1</span></p></div><div class="lp_fenmu"><p class="num"><span class="num_text change_font_size">b2</span></p></div><span class="lp_line_mid"></span></div></div></a></div><span class="lp_icon_y"></span> <span class="lp_icon_add"></span><div class="lp_input_c"><a href="javascript:void(0)" class="lp_drop_num"><span class="num_input"><span class="num_input_text change_font_size">c</span></span><div class="lp_fenshu_item hide_dom"><span class="num_input fuhao"><span class="num_input_text change_font_size">-&nbsp;</span></span><div class="lp_fenshu_item_wrapper"><div class="lp_fenzi"><p class="num"><span class="num_text change_font_size">c1</span></p></div><div class="lp_fenmu"><p class="num"><span class="num_text change_font_size">c2</span></p></div><span class="lp_line_mid"></span></div></div></a></div><div class="lp_input_sign"><a href="javascript:void(0)" class="lp_drop_num"><span class="num_input"><p class="num_input_text"></p></span></a><div class="lp_drop_numselect clearfix"><div class="lp_numselect_wrap hide_dom"><a href="javascript:;"><span>1</span></a> <a href="javascript:;"><span>2</span></a> <a href="javascript:;"><span>3</span></a> <a href="javascript:;"><span>4</span></a></div></div></div><span class="lp_icon_zero"></span></div></li><li class="lp_li_item lp_li_item2"><div class="lp_li_item_wrap"><a class="lp_icon_arrow"></a><div class="lp_icon_box hide_dom"><span class="lp_icon_eye_box eye_red click_disabled"><span class="icon"></span> </span><span class="lp_icon_delete_box click_disabled"><span class="icon"></span> </span><a class="lp_icon_arrow"></a></div><div class="lp_input_x"><a href="javascript:void(0)" class="lp_drop_num"><span class="num_input"><span class="num_input_text change_font_size">a</span></span><div class="lp_fenshu_item hide_dom"><span class="num_input fuhao"><span class="num_input_text change_font_size">-&nbsp;</span></span><div class="lp_fenshu_item_wrapper"><div class="lp_fenzi"><p class="num"><span class="num_text change_font_size">a1</span></p></div><div class="lp_fenmu"><p class="num"><span class="num_text change_font_size">a2</span></p></div><span class="lp_line_mid"></span></div></div></a></div><span class="lp_icon_x"></span> <span class="lp_icon_add"></span><div class="lp_input_y"><a href="javascript:void(0)" class="lp_drop_num"><span class="num_input"><span class="num_input_text change_font_size">b</span></span><div class="lp_fenshu_item hide_dom"><span class="num_input fuhao"><span class="num_input_text change_font_size">-&nbsp;</span></span><div class="lp_fenshu_item_wrapper"><div class="lp_fenzi"><p class="num"><span class="num_text change_font_size">b1</span></p></div><div class="lp_fenmu"><p class="num"><span class="num_text change_font_size">b2</span></p></div><span class="lp_line_mid"></span></div></div></a></div><span class="lp_icon_y"></span> <span class="lp_icon_add"></span><div class="lp_input_c"><a href="javascript:void(0)" class="lp_drop_num"><span class="num_input"><span class="num_input_text change_font_size">c</span></span><div class="lp_fenshu_item hide_dom"><span class="num_input fuhao"><span class="num_input_text change_font_size">-&nbsp;</span></span><div class="lp_fenshu_item_wrapper"><div class="lp_fenzi"><p class="num"><span class="num_text change_font_size">c1</span></p></div><div class="lp_fenmu"><p class="num"><span class="num_text change_font_size">c2</span></p></div><span class="lp_line_mid"></span></div></div></a></div><div class="lp_input_sign"><a href="javascript:void(0)" class="lp_drop_num"><span class="num_input"><p class="num_input_text"></p></span></a></div><span class="lp_icon_zero"></span></div></li><li class="lp_li_item lp_li_item3"><div class="lp_li_item_wrap"><a class="lp_icon_arrow"></a><div class="lp_icon_box hide_dom"><span class="lp_icon_eye_box eye_skyblue click_disabled"><span class="icon"></span> </span><span class="lp_icon_delete_box click_disabled"><span class="icon"></span> </span><a class="lp_icon_arrow"></a></div><div class="lp_input_x"><a href="javascript:void(0)" class="lp_drop_num"><span class="num_input"><span class="num_input_text change_font_size">a</span></span><div class="lp_fenshu_item hide_dom"><span class="num_input fuhao"><span class="num_input_text change_font_size">-&nbsp;</span></span><div class="lp_fenshu_item_wrapper"><div class="lp_fenzi"><p class="num"><span class="num_text change_font_size">a1</span></p></div><div class="lp_fenmu"><p class="num"><span class="num_text change_font_size">a2</span></p></div><span class="lp_line_mid"></span></div></div></a></div><span class="lp_icon_x"></span> <span class="lp_icon_add"></span><div class="lp_input_y"><a href="javascript:void(0)" class="lp_drop_num"><span class="num_input"><span class="num_input_text change_font_size">b</span></span><div class="lp_fenshu_item hide_dom"><span class="num_input fuhao"><span class="num_input_text change_font_size">-&nbsp;</span></span><div class="lp_fenshu_item_wrapper"><div class="lp_fenzi"><p class="num"><span class="num_text change_font_size">b1</span></p></div><div class="lp_fenmu"><p class="num"><span class="num_text change_font_size">b2</span></p></div><span class="lp_line_mid"></span></div></div></a></div><span class="lp_icon_y"></span> <span class="lp_icon_add"></span><div class="lp_input_c"><a href="javascript:void(0)" class="lp_drop_num"><span class="num_input"><span class="num_input_text change_font_size">c</span></span><div class="lp_fenshu_item hide_dom"><span class="num_input fuhao"><span class="num_input_text change_font_size">-&nbsp;</span></span><div class="lp_fenshu_item_wrapper"><div class="lp_fenzi"><p class="num"><span class="num_text change_font_size">c1</span></p></div><div class="lp_fenmu"><p class="num"><span class="num_text change_font_size">c2</span></p></div><span class="lp_line_mid"></span></div></div></a></div><div class="lp_input_sign"><a href="javascript:void(0)" class="lp_drop_num"><span class="num_input"><p class="num_input_text"></p></span></a></div><span class="lp_icon_zero"></span></div></li><li class="lp_li_item lp_li_item4"><div class="lp_li_item_wrap"><a class="lp_icon_arrow"></a><div class="lp_icon_box hide_dom"><span class="lp_icon_eye_box eye_yellow click_disabled"><span class="icon"></span> </span><span class="lp_icon_delete_box click_disabled"><span class="icon"></span> </span><a class="lp_icon_arrow"></a></div><div class="lp_input_x"><a href="javascript:void(0)" class="lp_drop_num"><span class="num_input"><span class="num_input_text change_font_size">a</span></span><div class="lp_fenshu_item hide_dom"><span class="num_input fuhao"><span class="num_input_text change_font_size">-&nbsp;</span></span><div class="lp_fenshu_item_wrapper"><div class="lp_fenzi"><p class="num"><span class="num_text change_font_size">a1</span></p></div><div class="lp_fenmu"><p class="num"><span class="num_text change_font_size">a2</span></p></div><span class="lp_line_mid"></span></div></div></a></div><span class="lp_icon_x"></span> <span class="lp_icon_add"></span><div class="lp_input_y"><a href="javascript:void(0)" class="lp_drop_num"><span class="num_input"><span class="num_input_text change_font_size">b</span></span><div class="lp_fenshu_item hide_dom"><span class="num_input fuhao"><span class="num_input_text change_font_size">-&nbsp;</span></span><div class="lp_fenshu_item_wrapper"><div class="lp_fenzi"><p class="num"><span class="num_text change_font_size">b1</span></p></div><div class="lp_fenmu"><p class="num"><span class="num_text change_font_size">b2</span></p></div><span class="lp_line_mid"></span></div></div></a></div><span class="lp_icon_y"></span> <span class="lp_icon_add"></span><div class="lp_input_c"><a href="javascript:void(0)" class="lp_drop_num"><span class="num_input"><span class="num_input_text change_font_size">c</span></span><div class="lp_fenshu_item hide_dom"><span class="num_input fuhao"><span class="num_input_text change_font_size">-&nbsp;</span></span><div class="lp_fenshu_item_wrapper"><div class="lp_fenzi"><p class="num"><span class="num_text change_font_size">c1</span></p></div><div class="lp_fenmu"><p class="num"><span class="num_text change_font_size">c2</span></p></div><span class="lp_line_mid"></span></div></div></a></div><div class="lp_input_sign"><a href="javascript:void(0)" class="lp_drop_num"><span class="num_input"><p class="num_input_text"></p></span></a></div><span class="lp_icon_zero"></span></div></li><li class="lp_li_item lp_li_item5"><div class="lp_li_item_wrap"><a class="lp_icon_arrow"></a><div class="lp_icon_box hide_dom"><span class="lp_icon_eye_box eye_darkblue click_disabled"><span class="icon"></span> </span><span class="lp_icon_delete_box click_disabled"><span class="icon"></span> </span><a class="lp_icon_arrow"></a></div><div class="lp_input_x"><a href="javascript:void(0)" class="lp_drop_num"><span class="num_input"><span class="num_input_text change_font_size">a</span></span><div class="lp_fenshu_item hide_dom"><span class="num_input fuhao"><span class="num_input_text change_font_size">-&nbsp;</span></span><div class="lp_fenshu_item_wrapper"><div class="lp_fenzi"><p class="num"><span class="num_text change_font_size">a1</span></p></div><div class="lp_fenmu"><p class="num"><span class="num_text change_font_size">a2</span></p></div><span class="lp_line_mid"></span></div></div></a></div><span class="lp_icon_x"></span> <span class="lp_icon_add"></span><div class="lp_input_y"><a href="javascript:void(0)" class="lp_drop_num"><span class="num_input"><span class="num_input_text change_font_size">b</span></span><div class="lp_fenshu_item hide_dom"><span class="num_input fuhao"><span class="num_input_text change_font_size">-&nbsp;</span></span><div class="lp_fenshu_item_wrapper"><div class="lp_fenzi"><p class="num"><span class="num_text change_font_size">b1</span></p></div><div class="lp_fenmu"><p class="num"><span class="num_text change_font_size">b2</span></p></div><span class="lp_line_mid"></span></div></div></a></div><span class="lp_icon_y"></span> <span class="lp_icon_add"></span><div class="lp_input_c"><a href="javascript:void(0)" class="lp_drop_num"><span class="num_input"><span class="num_input_text change_font_size">c</span></span><div class="lp_fenshu_item hide_dom"><span class="num_input fuhao"><span class="num_input_text change_font_size">-&nbsp;</span></span><div class="lp_fenshu_item_wrapper"><div class="lp_fenzi"><p class="num"><span class="num_text change_font_size">c1</span></p></div><div class="lp_fenmu"><p class="num"><span class="num_text change_font_size">c2</span></p></div><span class="lp_line_mid"></span></div></div></a></div><div class="lp_input_sign"><a href="javascript:void(0)" class="lp_drop_num"><span class="num_input"><p class="num_input_text"></p></span></a></div><span class="lp_icon_zero"></span></div></li><li class="lp_li_item lp_li_item6" style="border: none"><div class="lp_li_item_wrap"><a class="lp_icon_arrow"></a><div class="lp_icon_box hide_dom"><span class="lp_icon_eye_box eye_purple click_disabled"><span class="icon"></span> </span><span class="lp_icon_delete_box click_disabled"><span class="icon"></span> </span><a class="lp_icon_arrow"></a></div><div class="lp_input_x"><a href="javascript:void(0)" class="lp_drop_num"><span class="num_input"><span class="num_input_text change_font_size">a</span></span><div class="lp_fenshu_item hide_dom"><span class="num_input fuhao"><span class="num_input_text change_font_size">-&nbsp;</span></span><div class="lp_fenshu_item_wrapper"><div class="lp_fenzi"><p class="num"><span class="num_text change_font_size">a1</span></p></div><div class="lp_fenmu"><p class="num"><span class="num_text change_font_size">a2</span></p></div><span class="lp_line_mid"></span></div></div></a></div><span class="lp_icon_x"></span> <span class="lp_icon_add"></span><div class="lp_input_y"><a href="javascript:void(0)" class="lp_drop_num"><span class="num_input"><span class="num_input_text change_font_size">b</span></span><div class="lp_fenshu_item hide_dom"><span class="num_input fuhao"><span class="num_input_text change_font_size">-&nbsp;</span></span><div class="lp_fenshu_item_wrapper"><div class="lp_fenzi"><p class="num"><span class="num_text change_font_size">b1</span></p></div><div class="lp_fenmu"><p class="num"><span class="num_text change_font_size">b2</span></p></div><span class="lp_line_mid"></span></div></div></a></div><span class="lp_icon_y"></span> <span class="lp_icon_add"></span><div class="lp_input_c"><a href="javascript:void(0)" class="lp_drop_num"><span class="num_input"><span class="num_input_text change_font_size">c</span></span><div class="lp_fenshu_item hide_dom"><span class="num_input fuhao"><span class="num_input_text change_font_size">-&nbsp;</span></span><div class="lp_fenshu_item_wrapper"><div class="lp_fenzi"><p class="num"><span class="num_text change_font_size">c1</span></p></div><div class="lp_fenmu"><p class="num"><span class="num_text change_font_size">c2</span></p></div><span class="lp_line_mid"></span></div></div></a></div><div class="lp_input_sign"><a href="javascript:void(0)" class="lp_drop_num"><span class="num_input"><p class="num_input_text"></p></span></a></div><span class="lp_icon_zero"></span></div></li></ul></div></div></div><a class="com_btns btns-primary lp_show_space" href="javascript:;"><span class="btns-primary-txt">显示可行域</span></a></div><div class="lp_objectfun_wrap"><div class="lp_objectfun_box"><span class="lp_constraint_text"><p class="txt">目标函数</p></span><div class="lp_function_main"><div class="lp_function_wrap"><span class="lp_icon_z"></span> <span class="lp_icon_equal"></span><div class="lp_input_x"><a href="javascript:void(0)" class="lp_drop_num"><span class="num_input"><span class="num_input_text change_font_size">a</span></span><div class="lp_fenshu_item hide_dom"><span class="num_input fuhao"><span class="num_input_text change_font_size">-&nbsp;</span></span><div class="lp_fenshu_item_wrapper"><div class="lp_fenzi"><p class="num"><span class="num_text change_font_size">a1</span></p></div><div class="lp_fenmu"><p class="num"><span class="num_text change_font_size">a2</span></p></div><span class="lp_line_mid"></span></div></div></a></div><span class="lp_icon_x"></span> <span class="lp_icon_add"></span><div class="lp_input_y"><a href="javascript:void(0)" class="lp_drop_num"><span class="num_input"><span class="num_input_text change_font_size">b</span></span><div class="lp_fenshu_item hide_dom"><span class="num_input fuhao"><span class="num_input_text change_font_size">-&nbsp;</span></span><div class="lp_fenshu_item_wrapper"><div class="lp_fenzi"><p class="num"><span class="num_text change_font_size">b1</span></p></div><div class="lp_fenmu"><p class="num"><span class="num_text change_font_size">b2</span></p></div><span class="lp_line_mid"></span></div></div></a></div><span class="lp_icon_y"></span> <a class="com_btns btns-primary lp_btn_delete click_disabled" href="javascript:;"><b class="btns-primary-icon icon_delete"></b></a></div></div><div class="lp_solution_group lp_solution_title"><div class="lp_item lp_item_1"><span class="text_box"><span class="txt">目标函数最值</span></span></div><div class="lp_item lp_item_2"><span class="text_box"><span class="txt">最优解</span></span></div><div class="lp_item lp_item_3"><span class="text_box"><span class="txt">整数解</span></span></div></div><div class="lp_solution_group lp_solution_1"><div class="lp_item lp_item_1"><span class="lp_icon_zmax"></span> <span class="lp_icon_equal"></span> <span class="text_box"><span class="txt change_font_size"></span><div class="lp_fenshu_item hide_dom"><span class="num_input fuhao"><span class="num_input_text change_font_size">-&nbsp;</span></span><div class="lp_fenshu_item_wrapper"><div class="lp_fenzi"><p class="num"><span class="num_text change_font_size">4</span></p></div><div class="lp_fenmu"><p class="num"><span class="num_text change_font_size">6</span></p></div><span class="lp_line_mid"></span></div></div></span></div><div class="lp_item lp_item_2"><div class="lp_item_2_wrap"><span class="lp_wushujie_text text_box hide_dom"><span class="txt">无数个解</span></span><div class="lp_bracket_box text_box change_bracket_box"><span class="txt change_font_size">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><div class="lp_fenshu_item hide_dom"><span class="num_input fuhao"><span class="num_input_text change_font_size">-&nbsp;</span></span><div class="lp_fenshu_item_wrapper"><div class="lp_fenzi"><p class="num"><span class="num_text change_font_size">4</span></p></div><div class="lp_fenmu"><p class="num"><span class="num_text change_font_size">6</span></p></div><span class="lp_line_mid"></span></div></div><span class="txt change_font_size" style="font-weight:normal">&nbsp;,</span> <span class="txt change_font_size">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><div class="lp_fenshu_item hide_dom"><span class="num_input fuhao"><span class="num_input_text change_font_size">-&nbsp;</span></span><div class="lp_fenshu_item_wrapper"><div class="lp_fenzi"><p class="num"><span class="num_text change_font_size">4</span></p></div><div class="lp_fenmu"><p class="num"><span class="num_text change_font_size">6</span></p></div><span class="lp_line_mid"></span></div></div></div><span class="lp_triangle_expand hide_dom"></span></div><div class="lp_mul_solution hide_dom"><div class="lp_mul_solution_wrap lp_light_scrollbar_2"></div><span class="lp_triangle_fold"></span></div></div><div class="lp_item lp_item_3"><label id="max_int_solution_checkbox" class="com_applicationset_switch lp_int_solution click_disabled"></label></div></div><div class="lp_solution_group lp_solution_2"><div class="lp_item lp_item_1"><span class="lp_icon_zmin"></span> <span class="lp_icon_equal"></span> <span class="text_box"><span class="txt change_font_size"></span><div class="lp_fenshu_item hide_dom"><span class="num_input fuhao"><span class="num_input_text change_font_size">-&nbsp;</span></span><div class="lp_fenshu_item_wrapper"><div class="lp_fenzi"><p class="num"><span class="num_text change_font_size">4</span></p></div><div class="lp_fenmu"><p class="num"><span class="num_text change_font_size">6</span></p></div><span class="lp_line_mid"></span></div></div></span></div><div class="lp_item lp_item_2"><div class="lp_item_2_wrap"><span class="lp_wushujie_text text_box hide_dom"><span class="txt">无数个解</span></span><div class="lp_bracket_box text_box change_bracket_box"><span class="txt change_font_size">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><div class="lp_fenshu_item hide_dom"><span class="num_input fuhao"><span class="num_input_text change_font_size">-&nbsp;</span></span><div class="lp_fenshu_item_wrapper"><div class="lp_fenzi"><p class="num"><span class="num_text change_font_size">4</span></p></div><div class="lp_fenmu"><p class="num"><span class="num_text change_font_size">6</span></p></div><span class="lp_line_mid"></span></div></div><span class="txt change_font_size" style="font-weight:normal">&nbsp;,</span> <span class="txt change_font_size">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><div class="lp_fenshu_item hide_dom"><span class="num_input fuhao"><span class="num_input_text change_font_size">-&nbsp;</span></span><div class="lp_fenshu_item_wrapper"><div class="lp_fenzi"><p class="num"><span class="num_text change_font_size">4</span></p></div><div class="lp_fenmu"><p class="num"><span class="num_text change_font_size">6</span></p></div><span class="lp_line_mid"></span></div></div></div><span class="lp_triangle_expand hide_dom"></span></div><div class="lp_mul_solution hide_dom"><div class="lp_mul_solution_wrap lp_light_scrollbar_2"></div><span class="lp_triangle_fold"></span></div></div><div class="lp_item lp_item_3"><label id="min_int_solution_checkbox" class="com_applicationset_switch lp_int_solution click_disabled"></label></div></div></div></div></div></div></div></div>]]></view><presenter><![CDATA['use strict';

(function () {
    var i18nModel = null;
    var Presenter = BasicPresenter.extend({
        metaInfo: {
            name: "LinearProgramming",
            type: PresenterType.PRESENTER_COMPONENT
        },
        /**
         * Presenter的初始化方法
         * @private
         */
        $init: function $init() {
            this._super();
        },
        /**
         * Presenter对外暴露的方法
         */
        _service_: {
            constructor: function constructor(parent) {
                this.parent = parent;
            },
            setLocationProperties: function setLocationProperties(data) {
                i18nModel = data || {};
            },
            getExtendData: function getExtendData() {
                var options = this.parent.viewManager.getData();
                return options;
            },
            getQuestionInfo: function getQuestionInfo() {
                return {
                    id: '',
                    type_code: 'LinearProgramming',
                    type_name: this.parent.lang.get('linearprogramming_title'),
                    url: '',
                    noExistStatistics: true,
                    noNeedQuizProgress: true
                };
            }
        },
        getService: function getService() {
            this._service_.constructor(this);
            return this._service_;
        },
        setBasePath: function setBasePath(path) {
            this.basePath = path;
        },
        /****以下开始为icPlayer的生命周期方法*****/
        run: function run(view, model) {
            var $deferred = $.Deferred();
            var _self = this;
            _self.$view = $(view);
            _self.model = model;
            _self.viewManager = null;
            _self.lang = null;
            var data = model.__ExtendModel;
            var runTime = this.currentRuntime;
            if (this.currentRuntime === icCreatePlayer.RUNTIME.WEB) {
                runTime = 'web';
            } else if (this.currentRuntime === icCreatePlayer.RUNTIME.TEACHER_PC) {
                runTime = 'pc';
            } else if (this.currentRuntime === icCreatePlayer.RUNTIME.STUDENT_MOBILE) {
                runTime = 'mobile';
            }
            //this.$addEventListener('PLAYER.TOOL.MAXIMIZE', PresenterEventType.IC_PLAYER_EVENT, function () {
            //    if (self.render) {
            //        self.render.restore();
            //    }
            //});
            //
            //this.$addEventListener('PLAYER.TOOL.MINIMIZE', PresenterEventType.IC_PLAYER_EVENT, function () {
            //    if (self.render) {
            //        self.render.save();
            //    }
            //});

            require(['LinearProgrammingLang', 'LinearProgrammingViewManager'], function (lang, viewManager) {
                _self.lang = lang;
                //初始化语言包
                lang.extend(i18nModel);
                //初始化语言
                lang.initI18N(_self.$view);

                _self.viewManager = viewManager.create(_self.$view, runTime);
                _self.viewManager.basePath = _self.basePath;
                _self.viewManager.render(data);
            }).then(function () {
                $deferred.resolve();
            });
            return $deferred.promise();
        },
        __interface: {
            resizeScreen: function resizeScreen(data) {
                var _self = this;
                _self.viewManager.zoom(data);
            }
        },
        destroy: function destroy() {},
        setState: function setState(state) {},
        getState: function getState() {}
    }, "SubjectToolLauncher");

    window.AddonLinearProgramming_create = function () {
        return new Presenter();
    };
})();
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

!function (e) {
    "use strict";

    function n(e) {
        function a(e, n) {
            var t,
                r,
                i,
                o,
                u,
                s,
                f = this;
            if (!(f instanceof a)) return j && L(26, "constructor call without new", e), new a(e, n);
            if (null != n && H(n, 2, 64, M, "base")) {
                if (n = 0 | n, s = e + "", 10 == n) return f = new a(e instanceof a ? e : s), U(f, P + f.e + 1, k);
                if ((o = "number" == typeof e) && 0 * e != 0 || !new RegExp("^-?" + (t = "[" + b.slice(0, n) + "]+") + "(?:\\." + t + ")?$", 37 > n ? "i" : "").test(s)) return g(f, s, o, n);
                o ? (f.s = 0 > 1 / e ? (s = s.slice(1), -1) : 1, j && s.replace(/^0\.0*|\./, "").length > 15 && L(M, N, e), o = !1) : f.s = 45 === s.charCodeAt(0) ? (s = s.slice(1), -1) : 1, s = D(s, 10, n, f.s);
            } else {
                if (e instanceof a) return f.s = e.s, f.e = e.e, f.c = (e = e.c) ? e.slice() : e, void (M = 0);
                if ((o = "number" == typeof e) && 0 * e == 0) {
                    if (f.s = 0 > 1 / e ? (e = -e, -1) : 1, e === ~~e) {
                        for (r = 0, i = e; i >= 10; i /= 10, r++) {}
                        return f.e = r, f.c = [e], void (M = 0);
                    }
                    s = e + "";
                } else {
                    if (!p.test(s = e + "")) return g(f, s, o);
                    f.s = 45 === s.charCodeAt(0) ? (s = s.slice(1), -1) : 1;
                }
            }
            for ((r = s.indexOf(".")) > -1 && (s = s.replace(".", "")), (i = s.search(/e/i)) > 0 ? (0 > r && (r = i), r += +s.slice(i + 1), s = s.substring(0, i)) : 0 > r && (r = s.length), i = 0; 48 === s.charCodeAt(i); i++) {}
            for (u = s.length; 48 === s.charCodeAt(--u);) {}
            if (s = s.slice(i, u + 1)) {
                if (u = s.length, o && j && u > 15 && L(M, N, f.s * e), r = r - i - 1, r > z) f.c = f.e = null;else if (G > r) f.c = [f.e = 0];else {
                    if (f.e = r, f.c = [], i = (r + 1) % y, 0 > r && (i += y), u > i) {
                        for (i && f.c.push(+s.slice(0, i)), u -= y; u > i;) {
                            f.c.push(+s.slice(i, i += y));
                        }s = s.slice(i), i = y - s.length;
                    } else i -= u;
                    for (; i--; s += "0") {}
                    f.c.push(+s);
                }
            } else f.c = [f.e = 0];
            M = 0;
        }
        function D(e, n, t, i) {
            var o,
                u,
                f,
                c,
                h,
                g,
                p,
                d = e.indexOf("."),
                m = P,
                w = k;
            for (37 > t && (e = e.toLowerCase()), d >= 0 && (f = J, J = 0, e = e.replace(".", ""), p = new a(t), h = p.pow(e.length - d), J = f, p.c = s(l(r(h.c), h.e), 10, n), p.e = p.c.length), g = s(e, t, n), u = f = g.length; 0 == g[--f]; g.pop()) {}
            if (!g[0]) return "0";
            if (0 > d ? --u : (h.c = g, h.e = u, h.s = i, h = C(h, p, m, w, n), g = h.c, c = h.r, u = h.e), o = u + m + 1, d = g[o], f = n / 2, c = c || 0 > o || null != g[o + 1], c = 4 > w ? (null != d || c) && (0 == w || w == (h.s < 0 ? 3 : 2)) : d > f || d == f && (4 == w || c || 6 == w && 1 & g[o - 1] || w == (h.s < 0 ? 8 : 7)), 1 > o || !g[0]) e = c ? l("1", -m) : "0";else {
                if (g.length = o, c) for (--n; ++g[--o] > n;) {
                    g[o] = 0, o || (++u, g.unshift(1));
                }for (f = g.length; !g[--f];) {}
                for (d = 0, e = ""; f >= d; e += b.charAt(g[d++])) {}
                e = l(e, u);
            }
            return e;
        }
        function _(e, n, t, i) {
            var o, u, s, c, h;
            if (t = null != t && H(t, 0, 8, i, v) ? 0 | t : k, !e.c) return e.toString();
            if (o = e.c[0], s = e.e, null == n) h = r(e.c), h = 19 == i || 24 == i && B >= s ? f(h, s) : l(h, s);else if (e = U(new a(e), n, t), u = e.e, h = r(e.c), c = h.length, 19 == i || 24 == i && (u >= n || B >= u)) {
                for (; n > c; h += "0", c++) {}
                h = f(h, u);
            } else if (n -= s, h = l(h, u), u + 1 > c) {
                if (--n > 0) for (h += "."; n--; h += "0") {}
            } else if (n += u - c, n > 0) for (u + 1 == c && (h += "."); n--; h += "0") {}
            return e.s < 0 && o ? "-" + h : h;
        }
        function x(e, n) {
            var t,
                r,
                i = 0;
            for (u(e[0]) && (e = e[0]), t = new a(e[0]); ++i < e.length;) {
                if (r = new a(e[i]), !r.s) {
                    t = r;
                    break;
                }
                n.call(t, r) && (t = r);
            }
            return t;
        }
        function F(e, n, t, r, i) {
            return (n > e || e > t || e != c(e)) && L(r, (i || "decimal places") + (n > e || e > t ? " out of range" : " not an integer"), e), !0;
        }
        function I(e, n, t) {
            for (var r = 1, i = n.length; !n[--i]; n.pop()) {}
            for (i = n[0]; i >= 10; i /= 10, r++) {}
            return (t = r + t * y - 1) > z ? e.c = e.e = null : G > t ? e.c = [e.e = 0] : (e.e = t, e.c = n), e;
        }
        function L(e, n, t) {
            var r = new Error(["new BigNumber", "cmp", "config", "div", "divToInt", "eq", "gt", "gte", "lt", "lte", "minus", "mod", "plus", "precision", "random", "round", "shift", "times", "toDigits", "toExponential", "toFixed", "toFormat", "toFraction", "pow", "toPrecision", "toString", "BigNumber"][e] + "() " + n + ": " + t);
            throw r.name = "BigNumber Error", M = 0, r;
        }
        function U(e, n, t, r) {
            var i,
                o,
                u,
                s,
                f,
                l,
                c,
                a = e.c,
                h = R;
            if (a) {
                e: {
                    for (i = 1, s = a[0]; s >= 10; s /= 10, i++) {}
                    if (o = n - i, 0 > o) o += y, u = n, f = a[l = 0], c = f / h[i - u - 1] % 10 | 0;else if (l = d((o + 1) / y), l >= a.length) {
                        if (!r) break e;
                        for (; a.length <= l; a.push(0)) {}
                        f = c = 0, i = 1, o %= y, u = o - y + 1;
                    } else {
                        for (f = s = a[l], i = 1; s >= 10; s /= 10, i++) {}
                        o %= y, u = o - y + i, c = 0 > u ? 0 : f / h[i - u - 1] % 10 | 0;
                    }
                    if (r = r || 0 > n || null != a[l + 1] || (0 > u ? f : f % h[i - u - 1]), r = 4 > t ? (c || r) && (0 == t || t == (e.s < 0 ? 3 : 2)) : c > 5 || 5 == c && (4 == t || r || 6 == t && (o > 0 ? u > 0 ? f / h[i - u] : 0 : a[l - 1]) % 10 & 1 || t == (e.s < 0 ? 8 : 7)), 1 > n || !a[0]) return a.length = 0, r ? (n -= e.e + 1, a[0] = h[(y - n % y) % y], e.e = -n || 0) : a[0] = e.e = 0, e;
                    if (0 == o ? (a.length = l, s = 1, l--) : (a.length = l + 1, s = h[y - o], a[l] = u > 0 ? m(f / h[i - u] % h[u]) * s : 0), r) for (;;) {
                        if (0 == l) {
                            for (o = 1, u = a[0]; u >= 10; u /= 10, o++) {}
                            for (u = a[0] += s, s = 1; u >= 10; u /= 10, s++) {}
                            o != s && (e.e++, a[0] == O && (a[0] = 1));
                            break;
                        }
                        if (a[l] += s, a[l] != O) break;
                        a[l--] = 0, s = 1;
                    }
                    for (o = a.length; 0 === a[--o]; a.pop()) {}
                }
                e.e > z ? e.c = e.e = null : e.e < G && (e.c = [e.e = 0]);
            }
            return e;
        }
        var C,
            M = 0,
            T = a.prototype,
            q = new a(1),
            P = 20,
            k = 4,
            B = -7,
            $ = 21,
            G = -1e7,
            z = 1e7,
            j = !0,
            H = F,
            V = !1,
            W = 1,
            J = 100,
            X = {
            decimalSeparator: ".",
            groupSeparator: ",",
            groupSize: 3,
            secondaryGroupSize: 0,
            fractionGroupSeparator: " ",
            fractionGroupSize: 0
        };
        return a.another = n, a.ROUND_UP = 0, a.ROUND_DOWN = 1, a.ROUND_CEIL = 2, a.ROUND_FLOOR = 3, a.ROUND_HALF_UP = 4, a.ROUND_HALF_DOWN = 5, a.ROUND_HALF_EVEN = 6, a.ROUND_HALF_CEIL = 7, a.ROUND_HALF_FLOOR = 8, a.EUCLID = 9, a.config = function () {
            var e,
                n,
                t = 0,
                r = {},
                i = arguments,
                s = i[0],
                f = s && "object" == (typeof s === "undefined" ? "undefined" : _typeof(s)) ? function () {
                return s.hasOwnProperty(n) ? null != (e = s[n]) : void 0;
            } : function () {
                return i.length > t ? null != (e = i[t++]) : void 0;
            };
            return f(n = "DECIMAL_PLACES") && H(e, 0, E, 2, n) && (P = 0 | e), r[n] = P, f(n = "ROUNDING_MODE") && H(e, 0, 8, 2, n) && (k = 0 | e), r[n] = k, f(n = "EXPONENTIAL_AT") && (u(e) ? H(e[0], -E, 0, 2, n) && H(e[1], 0, E, 2, n) && (B = 0 | e[0], $ = 0 | e[1]) : H(e, -E, E, 2, n) && (B = -($ = 0 | (0 > e ? -e : e)))), r[n] = [B, $], f(n = "RANGE") && (u(e) ? H(e[0], -E, -1, 2, n) && H(e[1], 1, E, 2, n) && (G = 0 | e[0], z = 0 | e[1]) : H(e, -E, E, 2, n) && (0 | e ? G = -(z = 0 | (0 > e ? -e : e)) : j && L(2, n + " cannot be zero", e))), r[n] = [G, z], f(n = "ERRORS") && (e === !!e || 1 === e || 0 === e ? (M = 0, H = (j = !!e) ? F : o) : j && L(2, n + w, e)), r[n] = j, f(n = "CRYPTO") && (e === !!e || 1 === e || 0 === e ? (V = !(!e || !h || "object" != (typeof h === "undefined" ? "undefined" : _typeof(h))), e && !V && j && L(2, "crypto unavailable", h)) : j && L(2, n + w, e)), r[n] = V, f(n = "MODULO_MODE") && H(e, 0, 9, 2, n) && (W = 0 | e), r[n] = W, f(n = "POW_PRECISION") && H(e, 0, E, 2, n) && (J = 0 | e), r[n] = J, f(n = "FORMAT") && ("object" == (typeof e === "undefined" ? "undefined" : _typeof(e)) ? X = e : j && L(2, n + " not an object", e)), r[n] = X, r;
        }, a.max = function () {
            return x(arguments, T.lt);
        }, a.min = function () {
            return x(arguments, T.gt);
        }, a.random = function () {
            var e = 9007199254740992,
                n = Math.random() * e & 2097151 ? function () {
                return m(Math.random() * e);
            } : function () {
                return 8388608 * (1073741824 * Math.random() | 0) + (8388608 * Math.random() | 0);
            };
            return function (e) {
                var t,
                    r,
                    i,
                    o,
                    u,
                    s = 0,
                    f = [],
                    l = new a(q);
                if (e = null != e && H(e, 0, E, 14) ? 0 | e : P, o = d(e / y), V) if (h && h.getRandomValues) {
                    for (t = h.getRandomValues(new Uint32Array(o *= 2)); o > s;) {
                        u = 131072 * t[s] + (t[s + 1] >>> 11), u >= 9e15 ? (r = h.getRandomValues(new Uint32Array(2)), t[s] = r[0], t[s + 1] = r[1]) : (f.push(u % 1e14), s += 2);
                    }s = o / 2;
                } else if (h && h.randomBytes) {
                    for (t = h.randomBytes(o *= 7); o > s;) {
                        u = 281474976710656 * (31 & t[s]) + 1099511627776 * t[s + 1] + 4294967296 * t[s + 2] + 16777216 * t[s + 3] + (t[s + 4] << 16) + (t[s + 5] << 8) + t[s + 6], u >= 9e15 ? h.randomBytes(7).copy(t, s) : (f.push(u % 1e14), s += 7);
                    }s = o / 7;
                } else j && L(14, "crypto unavailable", h);
                if (!s) for (; o > s;) {
                    u = n(), 9e15 > u && (f[s++] = u % 1e14);
                }for (o = f[--s], e %= y, o && e && (u = R[y - e], f[s] = m(o / u) * u); 0 === f[s]; f.pop(), s--) {}
                if (0 > s) f = [i = 0];else {
                    for (i = -1; 0 === f[0]; f.shift(), i -= y) {}
                    for (s = 1, u = f[0]; u >= 10; u /= 10, s++) {}
                    y > s && (i -= y - s);
                }
                return l.e = i, l.c = f, l;
            };
        }(), C = function () {
            function e(e, n, t) {
                var r,
                    i,
                    o,
                    u,
                    s = 0,
                    f = e.length,
                    l = n % A,
                    c = n / A | 0;
                for (e = e.slice(); f--;) {
                    o = e[f] % A, u = e[f] / A | 0, r = c * o + u * l, i = l * o + r % A * A + s, s = (i / t | 0) + (r / A | 0) + c * u, e[f] = i % t;
                }return s && e.unshift(s), e;
            }
            function n(e, n, t, r) {
                var i, o;
                if (t != r) o = t > r ? 1 : -1;else for (i = o = 0; t > i; i++) {
                    if (e[i] != n[i]) {
                        o = e[i] > n[i] ? 1 : -1;
                        break;
                    }
                }return o;
            }
            function r(e, n, t, r) {
                for (var i = 0; t--;) {
                    e[t] -= i, i = e[t] < n[t] ? 1 : 0, e[t] = i * r + e[t] - n[t];
                }for (; !e[0] && e.length > 1; e.shift()) {}
            }
            return function (i, o, u, s, f) {
                var l,
                    c,
                    h,
                    g,
                    p,
                    d,
                    w,
                    v,
                    N,
                    b,
                    S,
                    R,
                    A,
                    E,
                    D,
                    _,
                    x,
                    F = i.s == o.s ? 1 : -1,
                    I = i.c,
                    L = o.c;
                if (!(I && I[0] && L && L[0])) return new a(i.s && o.s && (I ? !L || I[0] != L[0] : L) ? I && 0 == I[0] || !L ? 0 * F : F / 0 : NaN);
                for (v = new a(F), N = v.c = [], c = i.e - o.e, F = u + c + 1, f || (f = O, c = t(i.e / y) - t(o.e / y), F = F / y | 0), h = 0; L[h] == (I[h] || 0); h++) {}
                if (L[h] > (I[h] || 0) && c--, 0 > F) N.push(1), g = !0;else {
                    for (E = I.length, _ = L.length, h = 0, F += 2, p = m(f / (L[0] + 1)), p > 1 && (L = e(L, p, f), I = e(I, p, f), _ = L.length, E = I.length), A = _, b = I.slice(0, _), S = b.length; _ > S; b[S++] = 0) {}
                    x = L.slice(), x.unshift(0), D = L[0], L[1] >= f / 2 && D++;
                    do {
                        if (p = 0, l = n(L, b, _, S), 0 > l) {
                            if (R = b[0], _ != S && (R = R * f + (b[1] || 0)), p = m(R / D), p > 1) for (p >= f && (p = f - 1), d = e(L, p, f), w = d.length, S = b.length; 1 == n(d, b, w, S);) {
                                p--, r(d, w > _ ? x : L, w, f), w = d.length, l = 1;
                            } else 0 == p && (l = p = 1), d = L.slice(), w = d.length;
                            if (S > w && d.unshift(0), r(b, d, S, f), S = b.length, -1 == l) for (; n(L, b, _, S) < 1;) {
                                p++, r(b, S > _ ? x : L, S, f), S = b.length;
                            }
                        } else 0 === l && (p++, b = [0]);
                        N[h++] = p, b[0] ? b[S++] = I[A] || 0 : (b = [I[A]], S = 1);
                    } while ((A++ < E || null != b[0]) && F--);
                    g = null != b[0], N[0] || N.shift();
                }
                if (f == O) {
                    for (h = 1, F = N[0]; F >= 10; F /= 10, h++) {}
                    U(v, u + (v.e = h + c * y - 1) + 1, s, g);
                } else v.e = c, v.r = +g;
                return v;
            };
        }(), g = function () {
            var e = /^(-?)0([xbo])(?=\w[\w.]*$)/i,
                n = /^([^.]+)\.$/,
                t = /^\.([^.]+)$/,
                r = /^-?(Infinity|NaN)$/,
                i = /^\s*\+(?=[\w.])|^\s+|\s+$/g;
            return function (o, u, s, f) {
                var l,
                    c = s ? u : u.replace(i, "");
                if (r.test(c)) o.s = isNaN(c) ? null : 0 > c ? -1 : 1;else {
                    if (!s && (c = c.replace(e, function (e, n, t) {
                        return l = "x" == (t = t.toLowerCase()) ? 16 : "b" == t ? 2 : 8, f && f != l ? e : n;
                    }), f && (l = f, c = c.replace(n, "$1").replace(t, "0.$1")), u != c)) return new a(c, l);
                    j && L(M, "not a" + (f ? " base " + f : "") + " number", u), o.s = null;
                }
                o.c = o.e = null, M = 0;
            };
        }(), T.absoluteValue = T.abs = function () {
            var e = new a(this);
            return e.s < 0 && (e.s = 1), e;
        }, T.ceil = function () {
            return U(new a(this), this.e + 1, 2);
        }, T.comparedTo = T.cmp = function (e, n) {
            return M = 1, i(this, new a(e, n));
        }, T.decimalPlaces = T.dp = function () {
            var e,
                n,
                r = this.c;
            if (!r) return null;
            if (e = ((n = r.length - 1) - t(this.e / y)) * y, n = r[n]) for (; n % 10 == 0; n /= 10, e--) {}
            return 0 > e && (e = 0), e;
        }, T.dividedBy = T.div = function (e, n) {
            return M = 3, C(this, new a(e, n), P, k);
        }, T.dividedToIntegerBy = T.divToInt = function (e, n) {
            return M = 4, C(this, new a(e, n), 0, 1);
        }, T.equals = T.eq = function (e, n) {
            return M = 5, 0 === i(this, new a(e, n));
        }, T.floor = function () {
            return U(new a(this), this.e + 1, 3);
        }, T.greaterThan = T.gt = function (e, n) {
            return M = 6, i(this, new a(e, n)) > 0;
        }, T.greaterThanOrEqualTo = T.gte = function (e, n) {
            return M = 7, 1 === (n = i(this, new a(e, n))) || 0 === n;
        }, T.isFinite = function () {
            return !!this.c;
        }, T.isInteger = T.isInt = function () {
            return !!this.c && t(this.e / y) > this.c.length - 2;
        }, T.isNaN = function () {
            return !this.s;
        }, T.isNegative = T.isNeg = function () {
            return this.s < 0;
        }, T.isZero = function () {
            return !!this.c && 0 == this.c[0];
        }, T.lessThan = T.lt = function (e, n) {
            return M = 8, i(this, new a(e, n)) < 0;
        }, T.lessThanOrEqualTo = T.lte = function (e, n) {
            return M = 9, -1 === (n = i(this, new a(e, n))) || 0 === n;
        }, T.minus = T.sub = function (e, n) {
            var r,
                i,
                o,
                u,
                s = this,
                f = s.s;
            if (M = 10, e = new a(e, n), n = e.s, !f || !n) return new a(NaN);
            if (f != n) return e.s = -n, s.plus(e);
            var l = s.e / y,
                c = e.e / y,
                h = s.c,
                g = e.c;
            if (!l || !c) {
                if (!h || !g) return h ? (e.s = -n, e) : new a(g ? s : NaN);
                if (!h[0] || !g[0]) return g[0] ? (e.s = -n, e) : new a(h[0] ? s : 3 == k ? -0 : 0);
            }
            if (l = t(l), c = t(c), h = h.slice(), f = l - c) {
                for ((u = 0 > f) ? (f = -f, o = h) : (c = l, o = g), o.reverse(), n = f; n--; o.push(0)) {}
                o.reverse();
            } else for (i = (u = (f = h.length) < (n = g.length)) ? f : n, f = n = 0; i > n; n++) {
                if (h[n] != g[n]) {
                    u = h[n] < g[n];
                    break;
                }
            }if (u && (o = h, h = g, g = o, e.s = -e.s), n = (i = g.length) - (r = h.length), n > 0) for (; n--; h[r++] = 0) {}
            for (n = O - 1; i > f;) {
                if (h[--i] < g[i]) {
                    for (r = i; r && !h[--r]; h[r] = n) {}
                    --h[r], h[i] += O;
                }
                h[i] -= g[i];
            }
            for (; 0 == h[0]; h.shift(), --c) {}
            return h[0] ? I(e, h, c) : (e.s = 3 == k ? -1 : 1, e.c = [e.e = 0], e);
        }, T.modulo = T.mod = function (e, n) {
            var t,
                r,
                i = this;
            return M = 11, e = new a(e, n), !i.c || !e.s || e.c && !e.c[0] ? new a(NaN) : !e.c || i.c && !i.c[0] ? new a(i) : (9 == W ? (r = e.s, e.s = 1, t = C(i, e, 0, 3), e.s = r, t.s *= r) : t = C(i, e, 0, W), i.minus(t.times(e)));
        }, T.negated = T.neg = function () {
            var e = new a(this);
            return e.s = -e.s || null, e;
        }, T.plus = T.add = function (e, n) {
            var r,
                i = this,
                o = i.s;
            if (M = 12, e = new a(e, n), n = e.s, !o || !n) return new a(NaN);
            if (o != n) return e.s = -n, i.minus(e);
            var u = i.e / y,
                s = e.e / y,
                f = i.c,
                l = e.c;
            if (!u || !s) {
                if (!f || !l) return new a(o / 0);
                if (!f[0] || !l[0]) return l[0] ? e : new a(f[0] ? i : 0 * o);
            }
            if (u = t(u), s = t(s), f = f.slice(), o = u - s) {
                for (o > 0 ? (s = u, r = l) : (o = -o, r = f), r.reverse(); o--; r.push(0)) {}
                r.reverse();
            }
            for (o = f.length, n = l.length, 0 > o - n && (r = l, l = f, f = r, n = o), o = 0; n;) {
                o = (f[--n] = f[n] + l[n] + o) / O | 0, f[n] %= O;
            }return o && (f.unshift(o), ++s), I(e, f, s);
        }, T.precision = T.sd = function (e) {
            var n,
                t,
                r = this,
                i = r.c;
            if (null != e && e !== !!e && 1 !== e && 0 !== e && (j && L(13, "argument" + w, e), e != !!e && (e = null)), !i) return null;
            if (t = i.length - 1, n = t * y + 1, t = i[t]) {
                for (; t % 10 == 0; t /= 10, n--) {}
                for (t = i[0]; t >= 10; t /= 10, n++) {}
            }
            return e && r.e + 1 > n && (n = r.e + 1), n;
        }, T.round = function (e, n) {
            var t = new a(this);
            return (null == e || H(e, 0, E, 15)) && U(t, ~~e + this.e + 1, null != n && H(n, 0, 8, 15, v) ? 0 | n : k), t;
        }, T.shift = function (e) {
            var n = this;
            return H(e, -S, S, 16, "argument") ? n.times("1e" + c(e)) : new a(n.c && n.c[0] && (-S > e || e > S) ? n.s * (0 > e ? 0 : 1 / 0) : n);
        }, T.squareRoot = T.sqrt = function () {
            var e,
                n,
                i,
                o,
                u,
                s = this,
                f = s.c,
                l = s.s,
                c = s.e,
                h = P + 4,
                g = new a("0.5");
            if (1 !== l || !f || !f[0]) return new a(!l || 0 > l && (!f || f[0]) ? NaN : f ? s : 1 / 0);
            if (l = Math.sqrt(+s), 0 == l || l == 1 / 0 ? (n = r(f), (n.length + c) % 2 == 0 && (n += "0"), l = Math.sqrt(n), c = t((c + 1) / 2) - (0 > c || c % 2), l == 1 / 0 ? n = "1e" + c : (n = l.toExponential(), n = n.slice(0, n.indexOf("e") + 1) + c), i = new a(n)) : i = new a(l + ""), i.c[0]) for (c = i.e, l = c + h, 3 > l && (l = 0);;) {
                if (u = i, i = g.times(u.plus(C(s, u, h, 1))), r(u.c).slice(0, l) === (n = r(i.c)).slice(0, l)) {
                    if (i.e < c && --l, n = n.slice(l - 3, l + 1), "9999" != n && (o || "4999" != n)) {
                        (!+n || !+n.slice(1) && "5" == n.charAt(0)) && (U(i, i.e + P + 2, 1), e = !i.times(i).eq(s));
                        break;
                    }
                    if (!o && (U(u, u.e + P + 2, 0), u.times(u).eq(s))) {
                        i = u;
                        break;
                    }
                    h += 4, l += 4, o = 1;
                }
            }return U(i, i.e + P + 1, k, e);
        }, T.times = T.mul = function (e, n) {
            var r,
                i,
                o,
                u,
                s,
                f,
                l,
                c,
                h,
                g,
                p,
                d,
                m,
                w,
                v,
                N = this,
                b = N.c,
                S = (M = 17, e = new a(e, n)).c;
            if (!(b && S && b[0] && S[0])) return !N.s || !e.s || b && !b[0] && !S || S && !S[0] && !b ? e.c = e.e = e.s = null : (e.s *= N.s, b && S ? (e.c = [0], e.e = 0) : e.c = e.e = null), e;
            for (i = t(N.e / y) + t(e.e / y), e.s *= N.s, l = b.length, g = S.length, g > l && (m = b, b = S, S = m, o = l, l = g, g = o), o = l + g, m = []; o--; m.push(0)) {}
            for (w = O, v = A, o = g; --o >= 0;) {
                for (r = 0, p = S[o] % v, d = S[o] / v | 0, s = l, u = o + s; u > o;) {
                    c = b[--s] % v, h = b[s] / v | 0, f = d * c + h * p, c = p * c + f % v * v + m[u] + r, r = (c / w | 0) + (f / v | 0) + d * h, m[u--] = c % w;
                }m[u] = r;
            }
            return r ? ++i : m.shift(), I(e, m, i);
        }, T.toDigits = function (e, n) {
            var t = new a(this);
            return e = null != e && H(e, 1, E, 18, "precision") ? 0 | e : null, n = null != n && H(n, 0, 8, 18, v) ? 0 | n : k, e ? U(t, e, n) : t;
        }, T.toExponential = function (e, n) {
            return _(this, null != e && H(e, 0, E, 19) ? ~~e + 1 : null, n, 19);
        }, T.toFixed = function (e, n) {
            return _(this, null != e && H(e, 0, E, 20) ? ~~e + this.e + 1 : null, n, 20);
        }, T.toFormat = function (e, n) {
            var t = _(this, null != e && H(e, 0, E, 21) ? ~~e + this.e + 1 : null, n, 21);
            if (this.c) {
                var r,
                    i = t.split("."),
                    o = +X.groupSize,
                    u = +X.secondaryGroupSize,
                    s = X.groupSeparator,
                    f = i[0],
                    l = i[1],
                    c = this.s < 0,
                    a = c ? f.slice(1) : f,
                    h = a.length;
                if (u && (r = o, o = u, u = r, h -= r), o > 0 && h > 0) {
                    for (r = h % o || o, f = a.substr(0, r); h > r; r += o) {
                        f += s + a.substr(r, o);
                    }u > 0 && (f += s + a.slice(r)), c && (f = "-" + f);
                }
                t = l ? f + X.decimalSeparator + ((u = +X.fractionGroupSize) ? l.replace(new RegExp("\\d{" + u + "}\\B", "g"), "$&" + X.fractionGroupSeparator) : l) : f;
            }
            return t;
        }, T.toFraction = function (e) {
            var n,
                t,
                i,
                o,
                u,
                s,
                f,
                l,
                c,
                h = j,
                g = this,
                p = g.c,
                d = new a(q),
                m = t = new a(q),
                w = f = new a(q);
            if (null != e && (j = !1, s = new a(e), j = h, (!(h = s.isInt()) || s.lt(q)) && (j && L(22, "max denominator " + (h ? "out of range" : "not an integer"), e), e = !h && s.c && U(s, s.e + 1, 1).gte(q) ? s : null)), !p) return g.toString();
            for (c = r(p), o = d.e = c.length - g.e - 1, d.c[0] = R[(u = o % y) < 0 ? y + u : u], e = !e || s.cmp(d) > 0 ? o > 0 ? d : m : s, u = z, z = 1 / 0, s = new a(c), f.c[0] = 0; l = C(s, d, 0, 1), i = t.plus(l.times(w)), 1 != i.cmp(e);) {
                t = w, w = i, m = f.plus(l.times(i = m)), f = i, d = s.minus(l.times(i = d)), s = i;
            }return i = C(e.minus(t), w, 0, 1), f = f.plus(i.times(m)), t = t.plus(i.times(w)), f.s = m.s = g.s, o *= 2, n = C(m, w, o, k).minus(g).abs().cmp(C(f, t, o, k).minus(g).abs()) < 1 ? [m.toString(), w.toString()] : [f.toString(), t.toString()], z = u, n;
        }, T.toNumber = function () {
            var e = this;
            return +e || (e.s ? 0 * e.s : NaN);
        }, T.toPower = T.pow = function (e) {
            var n,
                t,
                r = m(0 > e ? -e : +e),
                i = this;
            if (!H(e, -S, S, 23, "exponent") && (!isFinite(e) || r > S && (e /= 0) || parseFloat(e) != e && !(e = NaN))) return new a(Math.pow(+i, e));
            for (n = J ? d(J / y + 2) : 0, t = new a(q);;) {
                if (r % 2) {
                    if (t = t.times(i), !t.c) break;
                    n && t.c.length > n && (t.c.length = n);
                }
                if (r = m(r / 2), !r) break;
                i = i.times(i), n && i.c && i.c.length > n && (i.c.length = n);
            }
            return 0 > e && (t = q.div(t)), n ? U(t, J, k) : t;
        }, T.toPrecision = function (e, n) {
            return _(this, null != e && H(e, 1, E, 24, "precision") ? 0 | e : null, n, 24);
        }, T.toString = function (e) {
            var n,
                t = this,
                i = t.s,
                o = t.e;
            return null === o ? i ? (n = "Infinity", 0 > i && (n = "-" + n)) : n = "NaN" : (n = r(t.c), n = null != e && H(e, 2, 64, 25, "base") ? D(l(n, o), 0 | e, 10, i) : B >= o || o >= $ ? f(n, o) : l(n, o), 0 > i && t.c[0] && (n = "-" + n)), n;
        }, T.truncated = T.trunc = function () {
            return U(new a(this), this.e + 1, 1);
        }, T.valueOf = T.toJSON = function () {
            return this.toString();
        }, null != e && a.config(e), a;
    }
    function t(e) {
        var n = 0 | e;
        return e > 0 || e === n ? n : n - 1;
    }
    function r(e) {
        for (var n, t, r = 1, i = e.length, o = e[0] + ""; i > r;) {
            for (n = e[r++] + "", t = y - n.length; t--; n = "0" + n) {}
            o += n;
        }
        for (i = o.length; 48 === o.charCodeAt(--i);) {}
        return o.slice(0, i + 1 || 1);
    }
    function i(e, n) {
        var t,
            r,
            i = e.c,
            o = n.c,
            u = e.s,
            s = n.s,
            f = e.e,
            l = n.e;
        if (!u || !s) return null;
        if (t = i && !i[0], r = o && !o[0], t || r) return t ? r ? 0 : -s : u;
        if (u != s) return u;
        if (t = 0 > u, r = f == l, !i || !o) return r ? 0 : !i ^ t ? 1 : -1;
        if (!r) return f > l ^ t ? 1 : -1;
        for (s = (f = i.length) < (l = o.length) ? f : l, u = 0; s > u; u++) {
            if (i[u] != o[u]) return i[u] > o[u] ^ t ? 1 : -1;
        }return f == l ? 0 : f > l ^ t ? 1 : -1;
    }
    function o(e, n, t) {
        return (e = c(e)) >= n && t >= e;
    }
    function u(e) {
        return "[object Array]" == Object.prototype.toString.call(e);
    }
    function s(e, n, t) {
        for (var r, i, o = [0], u = 0, s = e.length; s > u;) {
            for (i = o.length; i--; o[i] *= n) {}
            for (o[r = 0] += b.indexOf(e.charAt(u++)); r < o.length; r++) {
                o[r] > t - 1 && (null == o[r + 1] && (o[r + 1] = 0), o[r + 1] += o[r] / t | 0, o[r] %= t);
            }
        }
        return o.reverse();
    }
    function f(e, n) {
        return (e.length > 1 ? e.charAt(0) + "." + e.slice(1) : e) + (0 > n ? "e" : "e+") + n;
    }
    function l(e, n) {
        var t, r;
        if (0 > n) {
            for (r = "0."; ++n; r += "0") {}
            e = r + e;
        } else if (t = e.length, ++n > t) {
            for (r = "0", n -= t; --n; r += "0") {}
            e += r;
        } else t > n && (e = e.slice(0, n) + "." + e.slice(n));
        return e;
    }
    function c(e) {
        return e = parseFloat(e), 0 > e ? d(e) : m(e);
    }
    var a,
        h,
        g,
        p = /^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,
        d = Math.ceil,
        m = Math.floor,
        w = " not a boolean or binary digit",
        v = "rounding mode",
        N = "number type has more than 15 significant digits",
        b = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_",
        O = 1e14,
        y = 14,
        S = 9007199254740991,
        R = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],
        A = 1e7,
        E = 1e9;
    if (a = n(), "function" == typeof define && define.amd) define("BigNumber", [], function () {
        return a;
    });else if ("undefined" != typeof module && module.exports) {
        if (module.exports = a, !h) try {
            h = require("crypto");
        } catch (D) {}
    } else e.BigNumber = a;
}(window);
"use strict";

define("LinearProgrammingClient", ["LinearProgrammingController"], function (Controller) {

    //客户
    var Client = {
        _eventBus: null,
        _$view: null,
        _option: null,
        runTime: null,
        controller: null,
        view: null,
        lang: null,
        data: null,
        basePath: null,
        _findView: function _findView() {
            //this._$mainBd = this._$view.find('.springOscillator_main_bd');
        },
        zoom: function zoom(data) {
            this.controller.zoom(data);
        },
        create: function create($view, eventBus, option, runTime, lang) {
            var ins = Object.create(this);
            ins._option = option;
            ins._$view = $view;
            ins._eventBus = eventBus;
            ins.runTime = runTime;
            ins.lang = lang;
            ins.controller = Controller.create(eventBus, $view, option, runTime, lang);
            return ins;
        },
        initView: function initView() {
            this.controller.initView();
        },
        render: function render(data) {
            this.data = data;
            this.controller.basePath = this.basePath;
            this.controller.render(data);
        },
        getData: function getData() {
            return this.controller.getData();
        },
        //添加约束条件
        addConstraintCondition: function addConstraintCondition(a, b, c, s, index) {
            this.controller.addConstraintCondition(a, b, c, s, index);
        },
        checkObjectiveFunction: function checkObjectiveFunction(a, b) {
            return this.controller.checkObjectiveFunction(a, b);
        },
        //添加目标函数
        addObjectiveFunction: function addObjectiveFunction(a, b) {
            this.controller.addObjectiveFunction(a, b);
        },
        //清除目标函数
        clearObjectiveFunction: function clearObjectiveFunction() {
            this.controller.clearObjectiveFunction();
        },
        //相交点
        inters: function inters() {
            this.controller.inters();
        },
        //隐藏约束条件
        showOrHideCondition: function showOrHideCondition(i) {
            this.controller.showOrHideCondition(i);
        },

        //最大整数解
        maxIntSolution: function maxIntSolution() {
            this.controller.maxIntSolution();
        },
        //最大整数解
        minIntSolution: function minIntSolution() {
            this.controller.minIntSolution();
        },
        cancelMinIntSolution: function cancelMinIntSolution() {
            this.controller.cancelMinIntSolution();
        },
        cancelMaxIntSolution: function cancelMaxIntSolution() {
            this.controller.cancelMaxIntSolution();
        },
        //删除约束条件
        removeCondition: function removeCondition(i) {
            this.controller.removeCondition(i);
        },
        //清除约束条件
        clearCondition: function clearCondition() {
            this.controller.clearCondition(i);
        },
        //清除
        clearAll: function clearAll() {
            this.controller.clearAll();
        },
        on: function on(type, callback, domain) {
            this._eventBus.on(type, callback, domain);
        },
        off: function off(type, callback, domain) {
            this._eventBus.off(type, callback, domain);
        },
        destroy: function destroy() {
            this.controller.destroy();
        }
    };

    return Client;
});
"use strict";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

define("LinearProgrammingController", ["SoftKeyboard", "FractionMathJs", "JSON2", "LinearProgrammingLang", "Prompter"], function (SoftKeyboard, fractionMathJs, JSON, Lang, Prompter) {

    /*
     *  删除数组元素:Array.remove(index)
     */
    Array.prototype.remove = function (index) {
        if (isNaN(index) || index >= this.length) {
            return false;
        }
        this.splice(index, 1);
    };
    /*
     *  删除所有数组元素:Array.clear
     */
    Array.prototype.clear = function () {
        this.splice(0, this.length);
    };
    /*
     *  插入数组元素:Array.insert(dx)
     */
    Array.prototype.insert = function (index, item) {
        this.splice(index, 0, item);
    };
    /*
     *  更新数组元素:Array.insert(dx)
     */
    Array.prototype.update = function (index, item) {
        this[index] = item;
    };
    /*
     *  数组元素去重:Array.unique(dx)
     */
    Array.prototype.unique = function () {
        var n = {},
            r = [];
        for (var i = 0; i < this.length; i++) {
            if (!n[this[i]]) {
                //存入hash表
                n[this[i]] = true;
                r.push(this[i]);
            }
        }
        return r;
    };
    /*
     * Snap 插件
     */
    Snap.plugin(function (Snap, Element, Paper, global) {
        //是否显示
        Element.prototype.isShow = function () {
            if (this.attr("display") == "block" || this.attr("display") == "inline") {
                return true;
            } else {
                return false;
            }
        };
        //显示
        Element.prototype.show = function () {
            this.attr({ display: "block" });
        };
        //隐藏
        Element.prototype.hide = function () {
            this.attr({ display: "none" });
        };
        //把Path转化成分数的点集合
        Snap.parseFractionPathString = function (path) {
            var character = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
            var length = path.length;
            var points = [];
            var result = "";
            for (var i = 0; i < length; i++) {
                var point;
                if (character.indexOf(path[i].toUpperCase()) > -1) {
                    //if (path[i].toUpperCase() != "Z"){continue;}
                    if (result.length > 0) {
                        point[2] = result;
                        result = "";
                    }
                    point = new Array();
                    point[0] = path[i].toUpperCase();

                    points.push(point);
                } else if (path[i] === ",") {
                    point[1] = result;
                    result = "";
                } else {
                    result += path[i];
                    if (i == length - 1) {
                        point[2] = result;
                    }
                }
            }
            return points;
        };
        //点是否在线段上
        Snap.isPointInSegment = function (p, p1, p2) {
            var cross1 = F("((" + p.y + ")-(" + p1.y + ")) * ((" + p2.x + ")-(" + p1.x + "))").toString();
            var cross2 = F("((" + p.x + ")-(" + p1.x + ")) * ((" + p2.y + ")-(" + p1.y + "))").toString();
            var cross3 = F("(" + cross1 + ")-(" + cross2 + ")").toString();

            var crossproduct = Math.abs(F(cross3).toBigNumber().toNumber());
            if (crossproduct !== 0) {
                return false;
            }

            var dotproduct = F("((" + p.x + ")-(" + p1.x + ")) * ((" + p2.x + ")-(" + p1.x + ")) + ((" + p.y + ")-(" + p1.y + "))*((" + p2.y + ")-(" + p1.y + "))").toString();
            if (F(dotproduct).toBigNumber().toNumber() < 0) {
                return false;
            }

            var squaredlengthba = F("((" + p2.x + ")-(" + p1.x + "))*((" + p2.x + ")-(" + p1.x + ")) + ((" + p2.y + ")-(" + p1.y + "))*((" + p2.y + ")-(" + p1.y + "))").toString();
            if (F(dotproduct).toBigNumber().toNumber() > F(squaredlengthba).toBigNumber().toNumber()) {
                return false;
            }
            return true;
        };
        // 中心点
        Snap.getCenter = function (points) {
            if (points != null && points.length > 0) {
                var length = points.length;
                var p1X = 0.0;
                var p1Y = 0.0;
                var area = 0.0;
                var inv3 = 1.0 / 3.0;
                var c = new Point(0, 0);
                for (var i = 0; i < length; i++) {
                    var p2 = points[i];
                    var p3 = i + 1 < length ? points[i + 1] : points[0];
                    var e1X = p2.fx - p1X;
                    var e1Y = p2.fy - p1Y;
                    var e2X = p3.fx - p1X;
                    var e2Y = p3.fy - p1Y;
                    var D = e1X * e2Y - e1Y * e2X;
                    var triangleArea = 0.5 * D;
                    area += triangleArea;
                    c.x += triangleArea * inv3 * (p1X + p2.fx + p3.fx);
                    c.y += triangleArea * inv3 * (p1Y + p2.fy + p3.fy);
                }
                c.x *= 1.0 / area;
                c.y *= 1.0 / area;
                return c;
            }
        };
        // 把Path转化点集合
        Snap.getPath = function (points) {
            var path = "";
            if (points != null && points.length > 1) {
                var length = points.length;
                path = Snap.format("M{x},{y}", { x: points[0].fx, y: points[0].fy });
                for (var i = 1; i < length; i++) {
                    var point = points[i];
                    path = Snap.format("{path}L{x},{y}", { path: path, x: point.fx, y: point.fy });
                }
            }
            return path;
        };
        //把点集合转化成Path
        Snap.getFractionPath = function (points) {
            var path = "";
            if (points != null && points.length > 1) {
                var length = points.length;
                path = Snap.format("M{x},{y}", { x: points[0].x, y: points[0].y });
                for (var i = 1; i < length; i++) {
                    var point = points[i];
                    path = Snap.format("{path}L{x},{y}", { path: path, x: point.x, y: point.y });
                }
            }
            return path;
        };
        //把点集合转化成闭合Path
        Snap.getClosePath = function (points) {
            var path = Snap.getPath(points);
            if (path.length > 0) return path + "z";else return "";
        };
        //把分数点集合转化成闭合的Path
        Snap.getFractionClosePath = function (points) {
            var path = Snap.getFractionPath(points);
            if (path.length > 0) return path + "z";else return "";
        };
        //计算多边形的面积
        Snap.calcPolyonArea = function (points) {
            var points_num = points.length;
            if (points_num < 3) return 0;
            var s = points[0].fy * (points[points_num - 1].fx - points[1].fx);
            for (var i = 1; i < points_num; ++i) {
                s += points[i].fy * (points[i - 1].fx - points[(i + 1) % points_num].fx);
            }
            return Math.abs(s / 2);
        };
        //角度
        Snap.angle = function (start, end) {
            var diff_x = end.fx - start.fx,
                diff_y = end.fy - start.fy;
            //返回角度,不是弧度
            return 360 * Math.atan(diff_y / diff_x) / (2 * Math.PI);
        };
    });

    /*
     * 分数
     */
    var F = fractionMathJs.builder;

    /*
     * 工具类
     */
    var Utils = {
        //业务
        business: {
            checkCondition: function checkCondition(condition) {
                var numA = F(condition.a).toBigNumber().toNumber();
                if (!Snap.is(numA, "number") || isNaN(numA)) {
                    return false;
                }
                var numB = F(condition.b).toBigNumber().toNumber();
                if (!Snap.is(numB, "number") || isNaN(numB)) {
                    return false;
                }
                var numC = F(condition.c).toBigNumber().toNumber();
                if (!Snap.is(numC, "number") || isNaN(numC)) {
                    return false;
                }
                if (condition.symbol.length == 0) {
                    return false;
                }

                return true;
            },
            checkObjectiveFunction: function checkObjectiveFunction(a, b) {
                var numA = F(a).toBigNumber().toNumber();
                if (!Snap.is(numA, "number") || isNaN(numA)) {
                    return false;
                }
                var numB = F(b).toBigNumber().toNumber();
                if (!Snap.is(numB, "number") || isNaN(numB)) {
                    return false;
                }
                return true;
            },
            updateConditionTagPosition: function updateConditionTagPosition(conditions) {
                if (conditions != null) {
                    //for (var i = 0; i < conditions.length; i++ ) {
                    //    var condition = conditions[i];
                    //    if (condition.isRender) {
                    //        var gTag = G.getGroup("text_" + i);
                    //        var bbox1 = gTag.getBBox();
                    //        var bbox2 = G.remarkGroup().getBBox();
                    //        if (Snap.path.isBBoxIntersect(bbox1, bbox2)) {
                    //            gTag.attr({"transform":"translate(" + gTag.transform().localMatrix.e + "," +  (gTag.transform().localMatrix.f - bbox2.height).toString() + ")"});
                    //        }
                    //    }
                    //}
                    var renders = [];

                    for (var i = 0; i < conditions.length; i++) {
                        var condition1 = conditions[i];
                        for (var j = 0; j < conditions.length; j++) {
                            var condition2 = conditions[j];
                            if (condition1.a == condition2.a && condition1.b == condition2.b && condition1.c == condition2.c && condition1.symbol == condition2.symbol) {
                                continue;
                            }
                            if (condition1.isRender && condition2.isRender) {
                                var item = { c1: condition1.index, c2: condition2.index };
                                if (this.isExists(renders, item)) {
                                    continue;
                                }

                                var gbox1 = G.getGroup("text_" + condition1.index);
                                var gbox2 = G.getGroup("text_" + condition2.index);

                                var bbox1 = gbox1.getBBox();
                                var bbox2 = gbox2.getBBox();
                                if (Snap.path.isBBoxIntersect(bbox1, bbox2) && Math.abs(bbox1.y + bbox1.height - bbox2.y) > 5) {
                                    gbox2.attr({ "transform": "translate(" + gbox2.transform().localMatrix.e + "," + (gbox2.transform().localMatrix.f - bbox2.height).toString() + ")" });
                                    this.updateConditionTagPosition1(conditions);
                                }

                                renders.push(item);
                            }
                        }
                    }
                }
            },
            updateConditionTagPosition1: function updateConditionTagPosition1(conditions) {
                if (conditions != null) {
                    var renders = [];
                    for (var i = 0; i < conditions.length; i++) {
                        var condition1 = conditions[i];
                        for (var j = 0; j < conditions.length; j++) {
                            var condition2 = conditions[j];
                            if (condition1.a == condition2.a && condition1.b == condition2.b && condition1.c == condition2.c && condition1.symbol == condition2.symbol) {
                                continue;
                            }
                            if (condition1.isRender && condition2.isRender) {
                                var item = { c1: condition1.index, c2: condition2.index };
                                if (this.isExists(renders, item)) {
                                    continue;
                                }

                                var gbox1 = G.getGroup("text_" + condition1.index);
                                var gbox2 = G.getGroup("text_" + condition2.index);

                                var bbox1 = gbox1.getBBox();
                                var bbox2 = gbox2.getBBox();
                                if (Snap.path.isBBoxIntersect(bbox1, bbox2) && Math.abs(bbox1.y + bbox1.height - bbox2.y) > 5) {
                                    gbox2.attr({ "transform": "translate(" + gbox2.transform().localMatrix.e + "," + (gbox2.transform().localMatrix.f - bbox2.height).toString() + ")" });
                                }
                                renders.push(item);
                            }
                        }
                    }
                }
            },
            updateConditionTagPositionOverlay: function updateConditionTagPositionOverlay(conditions) {
                if (conditions != null) {
                    for (var i = 0; i < conditions.length; i++) {
                        var condition = conditions[i];
                        if (condition.isRender) {
                            var gTag = G.getGroup("text_" + i);
                            var bbox1 = gTag.getBBox();
                            var bbox2 = G.remarkGroup().getBBox();
                            if (Snap.path.isBBoxIntersect(bbox1, bbox2)) {
                                G.remarkGroup().attr({ "transform": "translate(" + G.remarkGroup().transform().localMatrix.e + "," + (G.remarkGroup().transform().localMatrix.f - bbox1.height).toString() + ")" });
                            }
                        }
                    }
                }
            },
            isExists: function isExists(renders, obj) {
                var isExists = false;
                for (var i = 0; i < renders.length; i++) {
                    var item = renders[i];
                    if (obj.c1 == item.c1 && obj.c2 == item.c2 || obj.c1 == item.c2 && obj.c2 == item.c1) {
                        isExists = true;
                    }
                }
                return isExists;
            },
            //旋转文本
            getRotateText: function getRotateText(angle, point) {
                var text = "rotate(" + angle + " " + F(point.x).toBigNumber().toNumber().toString() + "," + F(point.y).toBigNumber().toNumber().toString() + ")";
                return text;
            },
            //位置文本
            getTranslateText: function getTranslateText(angle, width, height) {
                var text = "";
                if (angle == 0) {
                    text = Snap.format(" translate({x},0)", { x: 0 });
                } else if (angle == 90) {
                    text = Snap.format(" translate({x},0)", { x: -width / Const.scaleX });
                } else if (angle > 0) {
                    text = Snap.format(" translate({x},0)", { x: -width / Const.scaleX - height / Const.scaleY });
                } else {
                    text = Snap.format(" translate({x},0)", { x: height / Const.scaleX });
                }
                return text;
            },
            isFenShu: function isFenShu(text) {
                if (text != null) {
                    if (text.length == 0) {
                        return false;
                    }
                    if (text.indexOf("/") > -1) {
                        return true;
                    }
                }
                return false;
            },
            getFenZi: function getFenZi(text) {
                if (text != null) {
                    if (this.isFenShu(text)) {
                        var fz = text.split("/")[0];
                        return fz;
                    }
                }
            },
            getFenMu: function getFenMu(text) {
                if (text != null) {
                    if (this.isFenShu(text)) {
                        var fm = text.split("/")[1];
                        return fm;
                    }
                }
            },
            getMaxPoint: function getMaxPoint(inters) {
                var tmpPoint;
                if (inters != null && inters.length > 1) {
                    tmpPoint = inters[1].fy >= inters[0].fy ? inters[1] : inters[0];
                }
                return tmpPoint;
            }
        },
        //公式
        express: {
            isDotted: function isDotted(symbol) {
                if (symbol == "＞") return true;else if (symbol == "＜") return true;else return false;
            },
            parseExpression: function parseExpression(funcText) {
                var expression = { a: "", b: "" };
                var tmp = funcText.split("x");
                if (funcText.indexOf("x") > -1) {
                    expression.a = funcText.split("x")[0].replace("y=", "").replace("·", "");
                    expression.b = funcText.split("x")[1];
                } else {
                    expression.a = "";
                    expression.b = funcText.split("x")[0].replace("y=", "");
                }
                return expression;
            },
            parseObjectiveFunctionExpression: function parseObjectiveFunctionExpression(funcText) {
                var expression = { a: "", b: "" };
                var tmp = funcText.split("x");
                if (funcText.indexOf("x") > -1) {
                    expression.a = funcText.split("x")[0].replace("y=", "").replace("·", "").replace("z", "");
                    if (expression.a == "") {
                        expression.a = "1";
                    }
                    expression.b = funcText.split("x")[1].replace("x", "").replace("·", "").replace("z", "");
                } else {
                    expression.a = "";
                    expression.b = funcText.split("x")[0].replace("y=", "").replace("·", "");
                }
                return expression;
            },
            // 公式文本1
            getText: function getText(a, b, c) {
                var text = "";
                var text1 = b == "0" ? "0" : F("-1*(" + c + ")/ (" + b + ")").toString();
                var text2 = b == "0" ? "0" : F("-1*(" + a + ")/ (" + b + ")").toString();
                var text3 = F("-1 *(" + c + ")/(" + a + ")").toString();
                if (a == "0") {
                    text = "y=" + text1;
                } else if (b == "0") {
                    text = "x=" + text3;
                } else {
                    text = "y=" + text2 + "·x+" + text1;
                }
                text = text.replace("-1·", "-").replace("+1·", "+").replace("+-", "-").replace("-+", "-").replace("+0", "").replace("-0", "").replace("+·", "+").replace("-·", "-");
                return text;
            },
            // 目标函数公式文本
            getObjectiveFunctionText: function getObjectiveFunctionText(a, b) {
                var text = "";
                var text1 = F("1/(" + b + ")").toString();
                var text2 = F("-1*(" + a + ")/(" + b + ")").toString();
                text = "y=" + text2 + "·x+" + text1 + "·z";
                text = text.replace("-1·", "-").replace("+1·", "+").replace("+-", "-").replace("-+", "-").replace("+0", "").replace("-0", "").replace("+·", "+").replace("-·", "-");
                return text;
            },
            // 约束条件
            condition: function condition(x, y, a, b, c) {
                return F("(" + a + ")*(" + x + ")+(" + b + ")*(" + y + ")+(" + c + ")");
            },
            // 目标函数
            objectiveFunction: function objectiveFunction(a, b, x, y) {
                return F("(" + a + ")*(" + x + ")+(" + b + ")*(" + y + ")");
            },
            //目标函数
            getZ: function getZ(a, b, x, y) {
                return F("(" + a + ")*(" + x + ")+(" + b + ")*(" + y + ")").toString();
            },
            //已有点和圆心，旋转指定角度
            rotate: function rotate(source, angle, r) {
                var A;
                A = Math.atan2(source.y, source.x); //atan2自带坐标系识别, 注意X,Y的顺序
                A += angle; //旋转
                return {
                    x: Math.cos(A) * r,
                    y: Math.sin(A) * r
                };
            }
        },
        //坐标
        coordinate: {
            getPointXY: function getPointXY(box, ofBox) {
                var height = 0;
                if (ofBox != null) {
                    height = ofBox.height;
                }
                var gX = 0,
                    gY = 0;
                if (box.x < 0) {
                    gX = -box.x;
                } else if (box.x + box.width + 5 >= Scene.width) {
                    gX = Scene.width - (box.x + box.width) - 5;
                } else {
                    gX = 0;
                }

                if (box.y < 0) {
                    gY = -box.y;
                } else if (box.y + box.height > Scene.height) {
                    gY = Scene.height - (box.y + box.height);
                } else {
                    gY = box.height / 2 - 5;
                }
                if (box.y + gY + box.height > Scene.height / 2 + 3 && box.y + gY + box.height < Scene.height / 2 + box.height + 3) {
                    gY = gY + box.height;
                }

                return { x: gX, y: gY };
            },
            getObjFuncPointXY: function getObjFuncPointXY(box) {
                var height = 0;

                var gX = 0,
                    gY = 0;
                if (box.x < 0) {
                    gX = -box.x;
                } else if (box.x + box.width >= Scene.width) {
                    gX = Scene.width - (box.x + box.width);
                } else {
                    gX = 0;
                }

                if (box.y < 0) {
                    gY = -box.y;
                } else if (box.y + box.height > Scene.height) {
                    gY = Scene.height - (box.y + box.height);
                } else {
                    gY = box.height / 2 + 3;
                }
                if (box.y + gY + box.height > Scene.height / 2 + 3 && box.y + gY + box.height < Scene.height / 2 + box.height + 3) {
                    gY = gY + box.height;
                }

                return { x: gX, y: gY };
            },
            updatePosition: function updatePosition(count) {
                for (var i = 0; i < count; i++) {}

                //svg
            },
            isOnLine: function isOnLine(a, b, c, tolerance) {
                //test if the point c is inside a pre-defined distance (tolerance) from the line
                var distance = Math.abs((c.y - b.y) * a.x - (c.x - b.x) * a.y + c.x * b.y - c.y * b.x) / Math.sqrt(Math.pow(c.y - b.y, 2) + Math.pow(c.x - b.x, 2));
                if (distance > tolerance) {
                    return false;
                }

                //test if the point c is between a and b
                var dotproduct = (c.x - a.x) * (b.x - a.x) + (c.y - a.y) * (b.y - a.y);
                if (dotproduct < 0) {
                    return false;
                }

                var squaredlengthba = (b.x - a.x) * (b.x - a.x) + (b.y - a.y) * (b.y - a.y);
                if (dotproduct > squaredlengthba) {
                    return false;
                }
                return true;
            },
            getMovedPath: function getMovedPath(path, dx) {
                var result = "";
                var arr = Snap.parsePathString(path);
                for (var i = 0; i < arr.length; i++) {
                    arr[i][1] = arr[i][1] + dx;
                    result += arr[i][0] + arr[i][1] + "," + arr[i][2];
                }
                return result;
            },
            // 斜率 0：横，1：竖 2：\ 3:/
            getKstate: function getKstate(point1, point2) {
                // 横线
                if (point1.y === point2.y) {
                    return 0;
                }
                // 竖线
                if (point1.x === point2.x) {
                    return 0;
                }
                var k = F("((" + point2.y + ")-(" + point1.y + ")) / ((" + point2.x + ")-(" + point1.x + "))").toBigNumber().toNumber();
                return k;
            },
            getK: function getK(a, b) {
                if (a == "0") {
                    return 0;
                }
                if (b == "0") {
                    return 0;
                }

                var k = F("-1*(" + a + ")/(" + b + ")").toBigNumber().toNumber();
                return k;
            },
            //分开的两个区域
            getSplitRegions: function getSplitRegions(linePath, boxPath) {
                var regions = { regionA: [], regionB: [] };

                regions.regionA = this.getAscRegion(linePath, boxPath);
                regions.regionB = this.getDescRegion(linePath, boxPath);

                regions.regionA = regions.regionA.unique();
                regions.regionB = regions.regionB.unique();

                return regions;
            },
            //path1 line
            //path2 closePath
            getAscRegion: function getAscRegion(path1, path2) {
                var resultPoints = [];
                var inters = Svg.intersection(path1, path2);
                inters = inters.unique();
                if (inters != null) {
                    var pointArray = Snap.parseFractionPathString(path2);
                    if (pointArray != null) {
                        var length = pointArray.length;
                        var interIndex = 0;
                        for (var i = 0; i < length - 1; i++) {
                            var startPoint = new Point(F(pointArray[i][1]).toString(), F(pointArray[i][2]).toString());
                            if (i == 0) {}
                            var endPoint;
                            if (pointArray[i + 1][0].toUpperCase() == "Z") {
                                endPoint = new Point(F(pointArray[0][1]).toString(), F(pointArray[0][2]).toString());
                            } else {
                                endPoint = new Point(F(pointArray[i + 1][1]).toString(), F(pointArray[i + 1][2]).toString());
                            }
                            for (var k = 0; k < inters.length; k++) {
                                var inter = inters[k];
                                if (inter.x !== startPoint.x || inter.y !== startPoint.y) {
                                    var isPointInSegment = Snap.isPointInSegment(inter, startPoint, endPoint);
                                    if (isPointInSegment) {
                                        resultPoints.push(inter);
                                        interIndex++;
                                        break;
                                    }
                                }
                            }
                            if (interIndex == 0 || interIndex >= 2) {
                                resultPoints.push(endPoint);
                                continue;
                            }
                        }
                    }
                }
                return resultPoints;
            },
            //path1 line
            //path2 closePath
            getDescRegion: function getDescRegion(path1, path2) {
                var resultPoints = [];
                var inters = Svg.intersection(path1, path2);
                inters = inters.unique();
                if (inters != null) {
                    var pointArray = Snap.parseFractionPathString(path2);

                    var length = pointArray.length;
                    var interIndex = 0;
                    for (var i = 0; i < length - 1; i++) {
                        var startPoint = new Point(F(pointArray[i][1]).toString(), F(pointArray[i][2]).toString());
                        var endPoint;
                        if (pointArray[i + 1][0].toUpperCase() == "Z") {
                            endPoint = new Point(F(pointArray[0][1]).toString(), F(pointArray[0][2]).toString());
                        } else {
                            endPoint = new Point(F(pointArray[i + 1][1]).toString(), F(pointArray[i + 1][2]).toString());
                        }
                        for (var k = 0; k < inters.length; k++) {
                            var inter = inters[k];
                            if (inter.x !== startPoint.x || inter.y !== startPoint.y) {
                                var isPointInSegment = Snap.isPointInSegment(inter, startPoint, endPoint);
                                if (isPointInSegment) {
                                    resultPoints.push(inter);
                                    interIndex++;
                                    break;
                                }
                            }
                        }
                        if (interIndex == 1) {
                            resultPoints.push(endPoint);
                        }
                    }
                }
                return resultPoints;
            },
            // 获取点
            getPoint: function getPoint(x, y, text, fontsize) {
                if (text.indexOf(".") > -1) {
                    if (text.split(".")[1].length == 1) {
                        text = text.replace(".0", "");
                    }
                }
                var textLength = text.length;
                var textWidth = textLength * fontsize;
                x = x - textWidth / 2 + 2;
                return new Point(F(x).toString(), F(y).toString());
            },
            // 获取两个相交点
            getInters: function getInters(path) {
                var inters = [];
                var topInter = Svg.intersection(path, Svg.tPath);
                if (topInter !== null && topInter.length > 0) {
                    inters.push(topInter);
                }
                var rightInter = Svg.intersection(path, Svg.rPath);
                if (rightInter !== null && rightInter.length > 0) {
                    inters.push(rightInter);
                }
                var bottomInter = Svg.intersection(path, Svg.bPath);
                if (bottomInter !== null && bottomInter.length > 0) {
                    inters.push(bottomInter);
                }
                var leftInter = Svg.intersection(path, Svg.lPath);
                if (leftInter !== null && leftInter.length > 0) {
                    inters.push(leftInter);
                }
                return inters;
            },
            //实际的坐标
            convertRealCoordinate: function convertRealCoordinate(x, y) {
                var tmpX = F(Scene.columns + "/ 2 +(" + x + ")/(" + Scene.unit + ")").toString();
                var currX = F("(" + tmpX + ")*" + Scene.segment).toString();

                var tmpY = F(Scene.rows + "/ 2 - (" + y + ")/(" + Scene.unit + ")").toString();
                var currY = F("(" + tmpY + ")*" + Scene.segment).toString();
                var point = new Point(currX, currY);
                return point;
            },
            //当前坐标
            convertCoordinate: function convertCoordinate(x, y) {

                var temp = "( " + Scene.rows + "/ 2 -(" + y + ")/(" + Scene.segment + ")) *" + Scene.unit;
                var svgX = F("((" + x + ")/" + Scene.segment + "-" + Scene.columns + "/ 2 ) *" + Scene.unit).toString();
                var svgY = F(temp).toString();
                var point = new Point(svgX, svgY);
                return point;
            },
            //开始和结束点
            getStartEndPoint: function getStartEndPoint(a, b, c) {
                var x, y, x0, y0, x1, y1;
                if (F(a).toBigNumber().toNumber() === 0) {
                    var tmp = F("-1*(" + c + ")/(" + b + ")").toString();
                    y = F(tmp).toString();
                    var x0_0 = F("(-1*(" + Scene.columns + ")/ 2 - 1) *" + Scene.unit).toString();
                    x0 = x0_0;
                    y0 = y;
                    var x1_0 = F("( " + Scene.columns + "/ 2 + 1) *" + Scene.unit).toString();
                    x1 = x1_0;
                    y1 = y;
                } else {
                    if (F(b).toBigNumber().toNumber() === 0) {
                        var tmp = F("-1*(" + c + ")/(" + a + ")").toString();
                        x = F(tmp).toString();
                        x0 = F(x).toString();
                        var y0_0 = F("( " + Scene.rows + "/ 2 +1 ) *" + Scene.unit).toString();
                        y0 = y0_0;
                        x1 = x;
                        var y1_0 = F("(-1*" + Scene.rows + "/ 2 - 1) *" + Scene.unit).toString();
                        y1 = y1_0;
                    } else {
                        var y0_0 = F("(" + Scene.rows + "/ 2 + 1) * " + Scene.unit).toString();
                        y0 = y0_0;
                        var tmp1_0 = F("-1*(" + b + ")*" + y0).toString();
                        var tmp1_2 = F("(" + tmp1_0 + ")-(" + c + ")").toString();
                        x0 = F(tmp1_2 + "/(" + a + ")").toString();
                        var y1_0 = F("(-1*(" + Scene.rows + ")/ 2 - 1) * " + Scene.unit).toString();
                        y1 = y1_0;
                        var tmp2_0 = F("-1*(" + b + ")*(" + y1 + ")").toString();
                        var tmp2_1 = F("(" + tmp2_0 + ")-(" + c + ")").toString();
                        x1 = F("(" + tmp2_1 + ")/(" + a + ")").toString();
                    }
                }
                return { start: new Point(x0, y0), end: new Point(x1, y1) };
            }
        },
        //符号
        symbol: function () {
            var symbolStrategy = {
                getName: function getName(symbol) {
                    if (symbol == "＞") return "greaterThan";else if (symbol == "≥") return "greaterThanOrEqual";else if (symbol == "＜") return "lessThan";else return "lessThanOrEqual";
                },
                //大于
                greaterThan: function greaterThan(number) {
                    if (number > 0) {
                        return "＞";
                    } else {
                        return "";
                    }
                },
                //大于等于
                greaterThanOrEqual: function greaterThanOrEqual(number) {
                    if (number >= 0) {
                        return "≥";
                    } else {
                        return "";
                    }
                },
                //小于
                lessThan: function lessThan(number) {
                    if (number < 0) {
                        return "＜";
                    } else {
                        return "";
                    }
                },
                //小于等于
                lessThanOrEqual: function lessThanOrEqual(number) {
                    if (number <= 0) {
                        return "≤";
                    } else {
                        return "";
                    }
                }
            };
            return function (symbol, number) {
                var symbolName = symbolStrategy.getName(symbol);
                return symbolStrategy[symbolName] && symbolStrategy[symbolName](number);
            };
        }()

        /*
         * SVG
         */
    };var Svg = {
        id: "LinearProgramming_svg",
        //Top Path
        tPath: "M0,0L572,0",
        //Bottom Path
        bPath: "M0,572L572,572",
        //Left Path
        lPath: "M0,0L0,572",
        //Right Path
        rPath: "M572,0L572,572",
        //Box Path
        boxPath: "M0,0L572,0L572,572L0,572Z",
        //约束条件线和区域的颜色
        colors: ["#76B941", "#EF4074", "#0499CD", "#FBBA32", "#045891", "#7F2D8D", "", "#000000"],
        //获取Svg
        get: function get() {
            return Snap("#" + this.id);
        },
        jq: function jq() {
            return $("#" + this.id);
        },
        //画线
        line: function line(points) {
            if (points != null && points.length > 1) {
                var length = points.length;
                var path = Snap.format("M{x},{y}", { x: F(points[0].x).toBigNumber().toNumber(), y: F(points[0].y).toBigNumber().toNumber() });
                for (var i = 1; i < length; i++) {
                    path = Snap.format("{path}L{x},{y}", { path: path, x: F(points[i].x).toBigNumber().toNumber(), y: F(points[i].y).toBigNumber().toNumber() });
                }
                return this.get().paper.path(path);
            }
        },
        //画圆
        circle: function circle(point, r) {
            return this.get().paper.circle(F(point.x).toBigNumber().toNumber(), F(point.y).toBigNumber().toNumber(), r);
        },
        //画矩形
        rect: function rect(point, width, height, r) {
            return this.get().paper.rect(F(point.x).toBigNumber().toNumber(), F(point.y).toBigNumber().toNumber(), width, height, r);
        },
        //画文本
        text: function text(point, _text) {
            return this.get().paper.text(F(point.x).toBigNumber().toNumber(), F(point.y).toBigNumber().toNumber(), _text);
        },
        //画多边形
        polygon: function polygon(points) {
            if (points != null && points.length > 0) {
                var length = points.length;
                var result = new Array();
                for (var i = 0; i < length; i++) {
                    var point = points[i];
                    result.push(F(point.x).toBigNumber().toNumber());
                    result.push(F(point.y).toBigNumber().toNumber());
                }
                return this.get().paper.polygon(result);
            }
            return null;
        },
        //获取path
        getPath: function getPath(points) {
            return Snap.getPath(points);
        },
        //两个路径的交点
        intersection: function intersection(path1, path2) {
            var inters = [];
            var points1 = Snap.parseFractionPathString(path1);
            var points2 = Snap.parseFractionPathString(path2);
            for (var i = 0; i < points1.length - 1; i++) {
                var point1_1 = new Point(F(points1[i][1]).toString(), F(points1[i][2]).toString());
                var point1_2;
                if (points1[i + 1][0].toUpperCase() == "Z") {
                    point1_2 = new Point(F(points1[0][1]).toString(), F(points1[0][2]).toString());
                } else {
                    point1_2 = new Point(F(points1[i + 1][1]).toString(), F(points1[i + 1][2]).toString());
                }
                for (var j = 0; j < points2.length - 1; j++) {
                    var point2_1 = new Point(F(points2[j][1]).toString(), F(points2[j][2]).toString());
                    var point2_2;

                    if (points2[j + 1][0].toUpperCase() == "Z") {
                        point2_2 = new Point(F(points2[0][1]).toString(), F(points2[0][2]).toString());
                    } else {
                        point2_2 = new Point(F(points2[j + 1][1]).toString(), F(points2[j + 1][2]).toString());
                    }
                    var point = this.getTwoLineIntersection(point1_1, point1_2, point2_1, point2_2);
                    if (point != null) {
                        inters.push(point);
                    }
                }
            }

            return inters;
        },
        //两条线的交点
        getTwoLineIntersection: function getTwoLineIntersection(a, b, c, d) {

            if (Snap.isPointInSegment(c, a, b)) {
                return c;
            }

            if (Snap.isPointInSegment(d, a, b)) {
                return d;
            }

            // 三角形abc 面积的2倍
            var area_abc = F("( (" + a.x + ")-(" + c.x + ")) * ((" + b.y + ")-(" + c.y + ")) - ((" + a.y + ")-(" + c.y + ")) * ((" + b.x + ")-(" + c.x + "))").toString();
            // 三角形abd 面积的2倍
            var area_abd = F("( (" + a.x + ")-(" + d.x + ")) * ((" + b.y + ")-(" + d.y + ")) - ((" + a.y + ")-(" + d.y + ")) * ((" + b.x + ")-(" + d.x + "))").toString();

            // 面积符号相同则两点在线段同侧,不相交 (对点在线段上的情况,本例当作不相交处理);
            if (F("(" + area_abc + ")*(" + area_abd + ")").toBigNumber().toNumber() >= 0) {
                return null;
            }

            // 三角形cda 面积的2倍
            var area_cda = F("((" + c.x + ")-(" + a.x + ")) * ((" + d.y + ")-(" + a.y + ")) - ((" + c.y + ")-(" + a.y + ")) * ((" + d.x + ")-(" + a.x + "))").toString();
            // 三角形cdb 面积的2倍
            // 注意: 这里有一个小优化.不需要再用公式计算面积,而是通过已知的三个面积加减得出.
            var area_cdb = F("(" + area_cda + ")+(" + area_abc + ")-(" + area_abd + ")").toString();
            if (F("(" + area_cda + ")*(" + area_cdb + ")").toBigNumber().toNumber() >= 0) {
                return null;
            }

            //计算交点坐标
            var t = F(area_cda + "/((" + area_abd + ")-(" + area_abc + "))").toString();
            var dx = F(t + "*((" + b.x + ")-(" + a.x + "))").toString();
            var dy = F(t + "*((" + b.y + ")-(" + a.y + "))").toString();
            return new Point(F("(" + a.x + ")+(" + dx + ")").toString(), F("(" + a.y + ")+(" + dy + ")").toString());
        },
        // 顺序排序
        before: function before() {

            if (G.tagGroup() != null && G.remarkGroup() != null) G.tagGroup().before(G.remarkGroup());

            if (G.remarkGroup() != null && G.conditionTagGroup() != null) G.remarkGroup().before(G.conditionTagGroup());

            if (G.conditionTagGroup() != null && G.objectiveFunctionGroup() != null) G.conditionTagGroup().before(G.objectiveFunctionGroup());

            if (G.objectiveFunctionGroup() != null && G.interGroup() != null) G.objectiveFunctionGroup().before(G.interGroup());

            if (G.interGroup() != null && G.frGroup() != null) G.interGroup().before(G.frGroup());

            if (G.frGroup() != null && G.conditionGroup() != null) G.frGroup().before(G.conditionGroup());

            if (G.conditionGroup() != null && G.axisGroup() != null) G.conditionGroup().before(G.axisGroup());
        }

        //常量
    };var Const = {
        basePath: "",
        scaleY: 1,
        scaleX: 1,
        width: 572,
        fontFamily: "Times New Roman",
        fontStyle: "italic",
        top: 102,
        number: ["7", "8", "9", "4", "5", "6", "1", "2", "3", "-", "0", ".", "/", "del", "enter"],
        op: ["number", "number", "number", "number", "number", "number", "number", "number", "number", "minus", "number", "dot", "divided", "del", "ok"],
        sign: ["≥", "＞", "≤", "＜"],
        signOp: ["greaterThanOrEqual", "greaterThan", "lessThanOrEqual", "lessThan"],
        localStorage_warning_tip: "linearprogramming_localStorage_warning_tip",
        localStorage_conditon_warning_tip: "linearprogramming_localStorage_conditon_warning_tip",
        letter: ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N"],
        units: [0.0001, 0.005, 0.01, 0.05, 0.1, 0.5, 1, 5, 10, 50, 100, 500, 1000, 5000, 10000, 50000, 100000]

        /*
         * Group 管理类
         */
    };var G = {
        //坐标轴的Group Id
        axisGId: "gAxis",
        //约束条件和目标函数的Group Id
        gId: "g",
        //坐标标签
        tagGId: "gTag",
        //相交点
        interGId: "gInter",
        //可行域
        frGId: "gFr",
        //约束条件
        conditionGId: "gCondition",
        //目标函数
        ofGId: "gObjectiveFunction",
        //备注
        remarkGId: "gRemarkGId",
        //约束条件标签
        conditionTagGId: "gConditionTag",
        //文本
        textGId: "textGId",
        //根据Id获取Svg Group
        getGroup: function getGroup(id) {
            var g = Svg.get().paper.select("#" + id);
            if (g != null) return g;else {
                g = Svg.get().paper.g();
                g.attr({ id: id });
                return g;
            }
        },
        objectiveFunctionGroup: function objectiveFunctionGroup() {
            return this.getGroup(this.ofGId);
        },
        //获取 约束条件 Group
        conditionGroup: function conditionGroup() {
            return this.getGroup(this.conditionGId);
        },
        //获取 可行域 Group
        frGroup: function frGroup() {
            return this.getGroup(this.frGId);
        },
        //获取 inter Group
        interGroup: function interGroup() {
            return this.getGroup(this.interGId);
        },
        //获取tag Group
        tagGroup: function tagGroup() {
            return this.getGroup(this.tagGId);
        },
        //获取坐标轴的Svg Group
        axisGroup: function axisGroup() {
            return this.getGroup(this.axisGId);
        },
        //获取remark Group
        remarkGroup: function remarkGroup() {
            return this.getGroup(this.remarkGId);
        },
        //获取remark Group
        conditionTagGroup: function conditionTagGroup() {
            return this.getGroup(this.conditionTagGId);
        },
        //获取约束条件和目录孙函数的Svg Group
        group: function group() {
            return this.getGroup(this.gId);
        }

        /*
         * 场景类
         */
    };var Scene = {
        //当前宽度
        width: 572,
        //当前高度
        height: 572,
        //段
        segment: 26,
        //间隔
        space: 0,
        //单位
        unit: 1,
        //文本间隔
        textSpace: 10,
        //行
        rows: 22,
        //列
        columns: 22,
        //箭头的大小
        arrawSize: 15,
        //字体大小
        fontSize: 18,
        //颜色
        lineColor: "#ccc",
        //轴线的颜色
        axisLineColor: "#000000",
        //刻度线的颜色
        lineWidth: 1,
        //轴线的宽度
        axisLineWidth: 3,
        //轴线的字体大小
        axisTextFontSize: 30,
        // 字体
        fontFamily: "Times New Roman",
        //x轴 小刻度线
        addxAxisPegLine: function addxAxisPegLine(i) {
            var halfRows = parseInt(this.rows / 2);
            var points = [];
            points.push(new Point(F(i + "*" + this.segment).toString(), F(halfRows + "*" + this.segment + "-" + 7).toString()));
            points.push(new Point(F(i + "*" + this.segment).toString(), F(halfRows + "*" + this.segment).toString()));

            var line = new Line(points, "#000");
            line.render();
            line.path.attr({ strokeWidth: this.lineWidth });
            G.axisGroup().add(line.path);
        },
        //y轴 小刻度线
        addyAxisPegLine: function addyAxisPegLine(i) {
            var halfColumn = parseInt(this.columns / 2);
            var points = [];
            points.push(new Point(F(halfColumn + "*" + this.segment).toString(), F(i + "*" + this.segment).toString()));
            points.push(new Point(F(halfColumn + "*" + this.segment + "+" + 7).toString(), F(i + "*" + this.segment).toString()));

            var line = new Line(points, "#000");
            line.render();
            line.path.attr({ strokeWidth: this.lineWidth });
            G.axisGroup().add(line.path);
        },
        //渲染X轴
        renderXAxis: function renderXAxis() {
            var halfRows = parseInt(this.rows / 2);
            var xAxisY = halfRows * this.segment + this.space;

            var points = [];
            points.push(new Point("0", xAxisY.toString()));
            points.push(new Point(this.width.toString(), xAxisY.toString()));

            // X轴
            var axisLine = new Line(points, this.axisLineColor);
            axisLine.render();
            axisLine.path.attr({ strokeWidth: this.axisLineWidth });
            G.axisGroup().add(axisLine.path);

            var arrowPoints = [];
            arrowPoints.push(new Point((this.width - this.arrawSize).toString(), (xAxisY - this.arrawSize).toString()));
            arrowPoints.push(new Point((this.width - 1).toString(), xAxisY.toString()));
            arrowPoints.push(new Point((this.width - this.arrawSize).toString(), (xAxisY + this.arrawSize).toString()));

            var arrowLine = new Line(arrowPoints, this.axisLineColor);
            arrowLine.render();
            arrowLine.path.attr({ strokeWidth: this.axisLineWidth, fill: "transparent", "stroke-lineJoin": "round", "stroke-linecap": "round" });
            G.axisGroup().add(arrowLine.path);

            // X轴 x文字
            var xText = Svg.text(new Point((this.width - 20).toString(), (xAxisY + 36).toString()), "x");
            xText.attr({
                fontSize: this.axisTextFontSize,
                fontWeight: "bold",
                fontFamily: this.fontFamily,
                fontStyle: "italic"
            });
            G.axisGroup().add(xText);

            //x轴 小刻度
            var halfColumn = parseInt(this.rows / 2);
            for (var i = 1; i < this.columns; i++) {
                this.addxAxisPegLine(i);
            }

            //x轴 刻度
            for (var i = 0; i < this.columns; i++) {
                if (i == 0 || i == this.columns) continue;
                var unitStr = this.unit.toString();
                var dotLength = 0;
                if (unitStr.indexOf(".") > -1) dotLength = unitStr.length - (unitStr.indexOf(".") + 1);

                var text = ((i - halfColumn) * this.unit).toFixed(dotLength);
                var y = (halfColumn + 1) * this.segment;
                var x = i * this.segment;
                var svgText = "";
                var point;
                if (i - halfColumn == 0) {
                    point = new Point((x - 14).toString(), (y - 9).toString());
                    svgText = Svg.text(point, "0");
                } else {
                    if (this.unit.toString().length > 1) {
                        if (this.unit < 1) {
                            if (this.unit.toString().length === 3) {
                                text = text.replace(".0", "");
                            }
                        }
                    }
                    point = Utils.coordinate.getPoint(x + text.length * 4, y - 5, text, this.fontSize);
                    if (this.unit.toString().length > 1) {

                        if (this.unit < 1) {
                            if (this.unit.toString().length > 3) {
                                if ((i - 1) % 5 !== 0) continue;
                            }
                            if (this.unit.toString().length === 3) {
                                if ((i - 1) % 2 !== 0) continue;
                            }
                        } else {
                            if ((i - 1) % 5 !== 0) continue;
                        }

                        svgText = Svg.text(point, text);
                    } else {
                        svgText = Svg.text(point, text);
                    }
                }
                svgText.attr({ fontSize: this.fontSize, fontWeight: "bold", fontFamily: this.fontFamily });
                G.axisGroup().add(svgText);
            }
        },
        //渲染Y轴
        renderYAxis: function renderYAxis() {
            var halfColumn = parseInt(this.columns / 2);
            var yAxisX = halfColumn * this.segment;

            var points = [];
            points.push(new Point(yAxisX.toString(), 0 .toString()));
            points.push(new Point(yAxisX.toString(), this.height.toString()));

            // Y轴
            var axisLine = new Line(points, this.axisLineColor);
            axisLine.render();
            axisLine.path.attr({ strokeWidth: this.axisLineWidth });
            G.axisGroup().add(axisLine.path);

            var arrowPoints = [];
            arrowPoints.push(new Point((halfColumn + "*" + this.segment + "-" + this.arrawSize).toString(), this.arrawSize.toString()));
            arrowPoints.push(new Point(yAxisX.toString(), 1 .toString()));
            arrowPoints.push(new Point((yAxisX + "+" + this.arrawSize).toString(), this.arrawSize.toString()));

            // Y轴 箭头
            var arrowLine = new Line(arrowPoints, this.axisLineColor);
            arrowLine.render();
            arrowLine.path.attr({ strokeWidth: this.axisLineWidth, fill: "transparent", "stroke-lineJoin": "round", "stroke-linecap": "round" });
            G.axisGroup().add(arrowLine.path);

            // Y轴 y文字
            var yText = Svg.text(new Point((yAxisX + 20).toString(), 18 .toString()), "y");
            yText.attr({ fontSize: this.axisTextFontSize, fontWeight: "bold", fontFamily: this.fontFamily, fontStyle: "italic" });
            G.axisGroup().add(yText);

            //y轴 刻度
            for (var i = 1; i < this.rows; i++) {
                this.addyAxisPegLine(i);
            }

            //整数
            var halfRows = parseInt(this.columns / 2);
            for (var i = 1; i < this.rows; i++) {
                if (i == 0 || i == this.rows || i == halfRows) continue;
                var unitStr = this.unit.toString();
                var dotLength = 0;
                if (unitStr.indexOf(".") > -1) dotLength = unitStr.length - (unitStr.indexOf(".") + 1);
                var text = (-(i - halfRows) * this.unit).toFixed(dotLength);
                var x = halfRows * this.segment;
                var y = this.segment * i + this.space;
                var point = Utils.coordinate.getPoint(x - 9, y + 7, text, this.fontSize);
                var svgText;
                if (this.unit.toString().length > 1) {
                    if (this.unit < 1) {
                        if (this.unit.toString().length > 3) {
                            if ((i - 1) % 5 !== 0) continue;
                        }
                        if (this.unit.toString().length === 3) {
                            if ((i - 1) % 2 !== 0) continue;
                            text = text.replace(".0", "");
                        }
                    } else {
                        if ((i - 1) % 5 !== 0) continue;
                    }

                    svgText = Svg.text(point, text);
                } else {
                    svgText = Svg.text(point, text);
                }
                svgText.attr({ fontSize: this.fontSize, fontWeight: "bold", fontFamily: this.fontFamily });
                G.axisGroup().add(svgText);
            }
        },
        //渲染坐标
        renderCoordinate: function renderCoordinate() {
            var rowCount = this.rows + 1;
            var columnCount = this.columns + 1;
            // x坐标
            for (var i = 0; i < rowCount; i++) {
                var points = [];
                points.push(new Point("0", (this.space + this.segment * i).toString()));
                points.push(new Point(this.width.toString(), (this.space + this.segment * i).toString()));

                var line = new Line(points, this.lineColor);
                line.render();
                line.path.attr({ strokeWidth: this.lineWidth });

                G.axisGroup().add(line.path);
            }
            // y坐标
            for (var i = 0; i < columnCount; i++) {
                var points = [];
                points.push(new Point((i * this.segment).toString(), this.space.toString()));
                points.push(new Point((this.segment * i).toString(), (this.height + this.space).toString()));

                var line = new Line(points, this.lineColor);
                line.render();
                line.path.attr({ strokeWidth: this.lineWidth });

                G.axisGroup().add(line.path);
            }
        },
        //设置单位
        setUnit: function setUnit(unit) {
            this.unit = unit;
            this.render();
        },
        //顺序
        after: function after() {
            if (G.axisGroup() != null && G.conditionGroup() != null) G.axisGroup().after(G.conditionGroup());

            if (G.axisGroup() != null && G.objectiveFunctionGroup() != null) G.axisGroup().after(G.objectiveFunctionGroup());

            if (G.axisGroup() != null && G.interGroup() != null) G.axisGroup().after(G.interGroup());

            if (G.axisGroup() != null && G.tagGroup() != null) G.axisGroup().after(G.tagGroup());
        },
        //渲染
        render: function render() {
            this.clear();
            this.renderCoordinate();
            this.renderXAxis();
            this.renderYAxis();
            this.after();
        },
        //清除
        clear: function clear() {
            if (G.axisGroup() != null) G.axisGroup().remove();
        }

        /*
         * 坐标类
         */
    };function Point(x, y) {
        var obj = {};
        obj.x = x;
        obj.y = y;
        obj.fx = F(x).toBigNumber().toNumber();
        obj.fy = F(y).toBigNumber().toNumber();
        obj.toString = function () {
            var str = "X:" + x + ",Y:" + y;
            return str;
        };
        return obj;
    }

    /*
     * Z 类
     */
    function Z(points, value, numerousSolution) {
        var obj = {};
        obj.value = value;
        obj.points = points;
        // 无数解
        obj.numerousSolution = numerousSolution;
        obj.isCheck = false;
        obj.isHighlight = false;
        obj.toString = function () {
            var str = "Z:" + obj.value + "X:" + obj.point.x + ",Y:" + obj.point.y;
            return str;
        };
        return obj;
    }

    /*
     * 区域
     */
    function Region(points, color) {
        var obj = {};
        obj.points = points;
        obj.polygon = null;
        obj.color = color;
        //渲染
        obj.render = function () {
            if (this.points != null && this.points.length > 0) {
                var polygon = Svg.polygon(this.points);
                polygon.attr({ fill: this.color, opacity: 0.2 });
                obj.polygon = polygon;
            }
        };
        // 路径path
        obj.getPath = function () {
            return Snap.getPath(this.points);
        };
        // 含分数路径path
        obj.getFractionPath = function () {
            return Snap.getFractionClosePath(this.points);
        };
        // 显示
        obj.show = function () {
            //obj.path.attr({display: "display"});
            if (this.polygon != null) {
                this.polygon.show();
            }
        };
        // 隐藏
        obj.hide = function () {
            //obj.path.attr({display: "none"});
            if (this.polygon != null) {
                this.polygon.hide();
            }
        };
        // 清除
        obj.clear = function () {
            if (obj.polygon != null) obj.polygon.remove();
        };
        return obj;
    }

    /*
     * 可行域
     */
    function FeasibleRegion(point, color) {
        var obj = Region.apply(this, [point, color]);
        obj.color = "#e06313";
        obj.isShow = true;
        //顺序
        obj.before = function () {
            Svg.before();
        };
        //设置数据
        obj.setData = function (item) {
            this.points = item.points;
            this.color = item.color;
        };
        //渲染
        obj.render = function () {
            if (this.points != null && this.points.length > 0) {
                var polygon = Svg.polygon(this.points);
                polygon.attr({ fill: obj.color, opacity: 0.8 });
                this.polygon = polygon;
                G.frGroup().add(polygon);
            }
            obj.before();
        };
        //显示
        obj.show = function () {
            this.isShow = true;
            if (this.polygon != null) {
                this.polygon.show();
            }
        };
        //隐藏
        obj.hide = function () {
            this.isShow = false;
            if (this.polygon != null) {
                this.polygon.hide();
            }
        };
        return obj;
    }

    /*
     * 线
     */
    function Line(points, color) {
        var obj = {};
        obj.points = points;
        obj.color = color;
        obj.strokeDasharray = "5, 5";
        obj.symbol = "";
        obj.path = "";
        //渲染
        obj.render = function () {
            var line = Svg.line(this.points);
            if (this.symbol === "＞" || this.symbol === "＜") {
                line.attr({ stroke: this.color, strokeWidth: 4, strokeDasharray: this.strokeDasharray });
            } else {
                line.attr({ stroke: this.color, strokeWidth: 4 });
            }
            obj.path = line;
        };
        //路径path
        obj.getPath = function () {
            return obj.path.attr("d");
        };
        //含分数路径path
        obj.getFractionPath = function () {
            return Snap.getFractionPath(this.points);
        };
        //显示
        obj.show = function () {
            obj.path.attr({ display: "display" });
        };
        //隐藏
        obj.hide = function () {
            obj.path.attr({ display: "none" });
        };
        //清除
        obj.clear = function () {
            if (this.path != null) {
                this.path.remove();
            }
        };
        return obj;
    }

    /*
     * 标志文本
     */
    function Tag(index, point) {
        var obj = {};
        obj.id = "gTag_";
        obj.letter = Const.letter;
        obj.index = index;
        obj.point = point;
        obj.g = null;
        obj.fontSize = 25;
        obj.fontFamily = "Microsoft yahei";
        obj.x0 = 0;
        obj.y0 = 0;
        obj.bg = null;
        obj.highlightColor = "#f8aa78";
        obj.bgColor = "#ffffff";
        obj.strokeColor = "#686868";
        obj.textColor = "#000";
        obj.isHighlight = false;
        // 可行区域
        obj.feasibleRegion = null;
        obj.r = 6;
        obj.height = 43;
        obj.width = 40;
        obj.positions = ["br", "bl", "tr", "tl"];
        obj.positionIndex = 0;
        //设置数据
        obj.setData = function (item) {
            this.point = item.point;
            this.index = item.index;
            this.isHighlight = item.isHighlight;
            this.feasibleRegion = item.feasibleRegion;
        };
        obj.setFeasibleRegion = function (feasibleRegion) {
            this.feasibleRegion = feasibleRegion;
        };
        //获取位置点
        obj.getPositionPoint = function (point, position) {
            var tmpPoint = [];
            if (position == "tr") {
                var x = point.fx + 20 + this.width > Scene.width ? Scene.width - this.width : point.fx + 20;
                var y = point.fy - this.height;
                tmpPoint = new Point(x, y);
            } else if (position == "tl") {
                var x = point.fx - this.width - 20 < 0 ? 0 : point.fx - this.width - 20;
                var y = point.fy - this.height;
                tmpPoint = new Point(x, y);
            } else if (position == "bl") {
                var x = point.fx - this.width - 20 < 0 ? 0 : point.fx - this.width - 20;
                var y = point.fy + this.height > Scene.height ? Scene.height - this.height : point.fy;
                tmpPoint = new Point(x, y);
            } else {
                var x = point.fx + 20 + this.width > Scene.width ? Scene.width - this.width : point.fx + 20;
                var y = point.fy + this.height > Scene.height ? Scene.height - this.height : point.fy;
                tmpPoint = new Point(x, y);
            }
            return tmpPoint;
        };
        //获取标签位置
        obj.getTagPosition = function () {
            var centerPoint = Snap.getCenter(obj.feasibleRegion.points);
            if (centerPoint != null) {
                if (centerPoint.x >= this.point.fx && centerPoint.y >= this.point.fy) {
                    return this.getPositionPoint(this.point, "tl");
                } else if (centerPoint.x <= this.point.fx && centerPoint.y >= this.point.fy) {
                    return this.getPositionPoint(this.point, "tr");
                } else if (centerPoint.x >= this.point.fx && centerPoint.y <= this.point.fy) {
                    return this.getPositionPoint(this.point, "bl");
                } else if (centerPoint.x <= this.point.fx && centerPoint.y <= this.point.fy) {
                    return this.getPositionPoint(this.point, "br");
                } else {
                    return this.point;
                }
            } else {
                return this.point;
            }
        };
        //顺序
        obj.before = function () {
            Svg.before();
        };
        //渲染
        obj.render = function () {
            var g = G.getGroup(this.id + this.letter[index]);
            this.g = g;
            this.before();

            var tTranslate = Snap.format("translate({x},{y})", { x: F(this.point.x).toBigNumber().toNumber() + this.r, y: F(this.point.y).toBigNumber().toNumber() + this.r });
            g.attr({ "transform": tTranslate });

            var coordinatePoint = Utils.coordinate.convertCoordinate(point.x, point.y);

            var rect = Svg.rect(new Point(F(0), F(0)), 80, obj.height, this.r);
            rect.attr({ fill: this.bgColor, strokeWidth: 1, stroke: this.strokeColor });
            this.bg = rect;
            g.add(rect);

            this.addPointTag(coordinatePoint);
            this.width = this.getTagWidth();
            this.height = this.getTagHeight(coordinatePoint);
            rect.attr({ width: this.width, height: this.height });

            var move = function move(dx, dy, x, y, event) {
                dx = dx / Const.scaleX;
                dy = dy / Const.scaleY;
                this.attr({ transform: this.data('origTransform') + (this.data('origTransform') ? "T" : "t") + [dx, dy] });
                obj.translate(this.transform().localMatrix, obj.width, obj.height - 11);
            };
            var start = function start(dx, dy, event) {
                this.data('origTransform', this.transform().local);
            };
            var stop = function stop() {
                console.log(this.transform().local);
                obj.point = new Point(this.transform().localMatrix.e, this.transform().localMatrix.f);
            };
            this.g.drag(move, start, stop);

            G.tagGroup().add(this.g);
        };
        obj.addPointTag = function (point) {
            var split = 5;
            var x = 10;
            var y = 30;
            var y2 = 45;

            if (Utils.business.isFenShu(point.x) || Utils.business.isFenShu(point.y)) {
                y = y2;
            }

            var letter_text = Svg.text(new Point(F(x.toString()), F(y.toString())), this.letter[index] + " (");
            letter_text.attr({ fill: this.textColor, fontFamily: this.fontFamily, fontSize: this.fontSize, fontWeight: "bold", cursor: "pointer" });
            this.g.add(letter_text);

            x = x + letter_text.node.clientWidth;

            var tmpx = this.addPointTagStr(point.x, x, y);
            x = tmpx.x;
            y = tmpx.y;

            if (Utils.business.isFenShu(point.x) || Utils.business.isFenShu(point.y)) {
                y = y2;
            }

            var x_text = Svg.text(new Point(F(x.toString()), F(y.toString())), ",");
            x_text.attr({ fill: this.textColor, fontFamily: this.fontFamily, fontSize: this.fontSize, fontWeight: "bold", cursor: "pointer" });
            this.g.add(x_text);

            x = x + x_text.node.clientWidth;

            var tmpy = this.addPointTagStr(point.y, x, y);
            x = tmpy.x;
            y = tmpy.y;

            if (Utils.business.isFenShu(point.x) || Utils.business.isFenShu(point.y)) {
                y = y2;
            }

            var end_text = Svg.text(new Point(F(x.toString()), F(y.toString())), ")");
            end_text.attr({ fill: this.textColor, fontFamily: this.fontFamily, fontSize: this.fontSize, fontWeight: "bold", cursor: "pointer" });
            this.g.add(end_text);

            this.width = x + end_text.node.clientWidth + 10;
        };
        obj.addPointTagStr = function (str, x0, y0) {
            var x = x0;
            var y = y0;
            var split = 5;
            var y1 = 30;
            var y2 = 45;
            var y3 = 65;
            var y4 = 38;

            if (Utils.business.isFenShu(str)) {
                x = x + split;
                if (str.indexOf("-") > -1) {
                    var fuhao_text = Svg.text(new Point(F(x.toString()), F(y.toString())), "-");
                    fuhao_text.attr({ fill: this.textColor, fontFamily: this.fontFamily, fontSize: this.fontSize, fontWeight: "bold", cursor: "pointer" });
                    this.g.add(fuhao_text);

                    x = x + fuhao_text.node.clientWidth + split;
                }

                var fenzi = Utils.business.getFenZi(str).replace("-", "");
                var fenmu = Utils.business.getFenMu(str);

                var fenzi_text = Svg.text(new Point(F(x.toString()), F(y1.toString())), fenzi);
                fenzi_text.attr({ fill: this.textColor, fontFamily: this.fontFamily, fontSize: this.fontSize, fontWeight: "bold", cursor: "pointer" });
                this.g.add(fenzi_text);

                y = y + fenzi_text.node.clientHeight;

                var fenmu_text = Svg.text(new Point(F(x.toString()), F(y3.toString())), fenmu);
                fenmu_text.attr({ fill: this.textColor, fontFamily: this.fontFamily, fontSize: this.fontSize, fontWeight: "bold", cursor: "pointer" });
                this.g.add(fenmu_text);

                var fenziLength = fenzi_text.node.clientWidth;
                var fenmuLength = fenmu_text.node.clientWidth;
                var maxLength = fenziLength > fenmuLength ? fenziLength : fenmuLength;
                var lineLength = Const.scaleX > 1 ? maxLength * 1.2 : maxLength / 0.8;

                if (fenziLength < lineLength) {
                    var x1 = x + (lineLength - fenziLength) / 2;
                    fenzi_text.attr({ x: x1 });
                }

                if (fenmuLength < lineLength) {
                    var x1 = x + (lineLength - fenmuLength) / 2;
                    fenmu_text.attr({ x: x1 });
                }

                var points = [];
                points.push(new Point(F(x.toString()), F(y4.toString())));
                var toX = parseInt(F(x.toString()).toBigNumber().toNumber() + lineLength);
                points.push(new Point(F(toX.toString()), F(y4.toString())));
                var fenhao_line = Svg.line(points);
                fenhao_line.attr({ stroke: this.textColor, strokeWidth: 2 });
                this.g.add(fenhao_line);

                x = x + lineLength + split;
            } else {
                x = x + split;
                var x_text = Svg.text(new Point(F(x.toString()), F(y.toString())), str);
                x_text.attr({ fill: this.textColor, fontFamily: this.fontFamily, fontSize: this.fontSize, fontWeight: "bold", cursor: "pointer" });
                this.g.add(x_text);

                x = x + x_text.node.clientWidth + split;
            }

            return { x: x, y: y };
        };
        obj.getTagWidth = function () {
            return this.width;
        };
        obj.getTagHeight = function (point) {
            var height = 0;
            if (Utils.business.isFenShu(point.x) || Utils.business.isFenShu(point.y)) {
                height = 70;
            } else {
                height = 40;
            }
            return height;
        };
        obj.getFenhaoStr = function (length) {
            var result = "";
            for (var i = 0; i < length; i++) {
                result += "_";
            }
            var j = parseInt(result.length / 3) + 1;
            for (var i = 0; i < j; i++) {
                result += "_";
            }
            return result;
        };
        //移动
        obj.translate = function (localMatrix, width, height) {
            var text = "";
            var e = localMatrix.e;
            var f = localMatrix.f;
            if (e < 0) {
                e = 0;
                text = Snap.format(" translate({x},{y})", { x: e, y: f });
                this.g.attr({ "transform": text });
            }
            if (f < 0) {
                f = 0;
                text = Snap.format(" translate({x},{y})", { x: e, y: f });
                this.g.attr({ "transform": text });
            }
            if (e > Scene.width - width) {
                e = Scene.width - width;
                text = Snap.format(" translate({x},{y})", { x: e, y: f });
                this.g.attr({ "transform": text });
            }
            if (f > Scene.height - height) {
                f = Scene.height - height - 12;
                text = Snap.format(" translate({x},{y})", { x: e, y: f });
                this.g.attr({ "transform": text });
            }
        };
        //更新位置
        obj.updatePosition = function (point) {
            this.point = point;
            var translate = Snap.format("translate({x},{y})", { x: point.x, y: point.y });
            this.g.attr({ "transform": translate });
        };
        //路径
        obj.path = function () {
            return obj.rect.attr({ display: "display" });
        };
        //显示
        obj.show = function () {
            if (this.g != null) {
                this.g.show();
            }
        };
        //隐藏
        obj.hide = function () {
            if (this.g != null) {
                this.g.hide();
            }
        };
        //高亮
        obj.highlight = function () {
            this.isHighlight = true;
            this.bg.attr({ fill: this.highlightColor });
        };
        //正常状态
        obj.normal = function () {
            this.isHighlight = false;
            this.bg.attr({ fill: obj.bgColor });
        };
        //消除
        obj.clear = function () {
            if (this.g != null) {
                this.g.remove();
                this.g = null;
            }
        };
        return obj;
    }

    /*
     * 交点
     */
    function Inter(point, index, isDotted) {
        var obj = {};
        obj.id = "gInter_";
        obj.index = index;
        obj.point = point;
        obj.circle = null;
        obj.bigCircle = null;
        obj.r = 6;
        obj.m_r = 8;
        obj.b_r = 10;
        obj.highlightColor = "#e06313";
        obj.color = "#ff0000";
        obj.isHighlight = false;
        obj.g = null;
        obj.isDotted = isDotted;
        //顺序
        obj.before = function () {
            Svg.before();
        };
        //设置数据
        obj.setData = function (item) {
            this.point = item.point;
            this.circle = item.circle;
            this.bigCircle = item.bigCircle;
            this.isHighlight = item.isHighlight;
        };
        //渲染
        obj.render = function () {
            var g = G.getGroup(this.id + index);
            this.g = g;
            this.before();

            var bigCircle = Svg.circle(point, this.b_r);
            this.bigCircle = bigCircle;
            bigCircle.attr({ stroke: "#fff", fill: this.highlightColor, opacity: 0 });
            this.g.add(bigCircle);

            var circle = Svg.circle(point, this.r);
            this.circle = circle;
            circle.attr({ stroke: "#fff", fill: "#ff0000", strokeWidth: 3 });
            this.g.add(circle);

            G.interGroup().add(g);
        };
        //显示
        obj.show = function () {
            if (obj.g != null) {
                obj.g.show();
            }
        };
        //隐藏
        obj.hide = function () {
            if (obj.g != null) {
                obj.g.hide();
            }
        };
        //高亮
        obj.highlight = function () {
            obj.isHighlight = true;
            obj.circle.attr({ stroke: "#fff", fill: this.highlightColor, strokeWidth: 4, r: obj.b_r, opacity: 0.8 });
            obj.bigCircle.attr({ stroke: this.highlightColor, strokeWidth: 4, r: obj.b_r + 5, opacity: 0.8 });
        };
        //正常
        obj.normal = function () {
            obj.isHighlight = false;
            obj.circle.attr({ stroke: "#fff", fill: this.color, strokeWidth: 4, r: obj.r, opacity: 1 });
            obj.bigCircle.attr(_defineProperty({ stroke: this.highlightColor, strokeWidth: 4, opacity: 0, r: obj.b_r }, "opacity", 0));
        };
        //清除
        obj.clear = function () {
            if (this.g != null) {
                this.g.remove();
                this.g = null;
            }
        };
        return obj;
    }

    /*
     * 目标函数
     */
    function ObjectiveFunction(a, b) {
        var obj = {};
        obj.line = null;
        obj.g = null;
        obj.a = a;
        obj.b = b;
        obj.color = "#000000";
        obj.highlightColor = "#e06313";
        obj.lineWidth = 3;
        obj.inters = null;
        obj.tags = null;
        obj.conditions = null;
        obj.feasibleRegion = null;
        obj.fontFamily = "Times New Roman";
        obj.fontStyle = "italic";
        obj.zMax = null;
        obj.zMin = null;
        obj.zMaxInt = null;
        obj.zMinInt = null;
        obj.callbackCrossZmin = null;
        obj.callbackCrossZmax = null;
        obj.callbackClear = null;
        obj.isHighlight = false;
        obj.intersZ = [];
        obj.runTime = null;
        obj.zCenter = null;
        obj.isShowText = false;
        obj.textId = "text_of__0";
        obj.setData = function (item) {
            this.a = item.a;
            this.b = item.b;
            this.inters = item.inters;
            this.tags = item.tags;
            this.conditions = item.conditions;
            this.zMax = item.zMax;
            this.zMin = item.zMin;
            this.isHighlight = item.isHighlight;
        };
        obj.setInters = function (inters) {
            obj.inters = inters;
        };
        obj.setConditions = function (conditions) {
            obj.conditions = conditions;
        };
        obj.setFeasibleRegion = function (feasibleRegion) {
            obj.feasibleRegion = feasibleRegion;
        };
        obj.setTags = function (tags) {
            obj.tags = tags;
        };
        obj.before = function () {
            Svg.before();
        };
        obj.getIntersZ = function () {
            var length = obj.inters.length;
            var points = [];
            for (var i = 0; i < length; i++) {
                var inter = obj.inters[i];
                var point = Utils.coordinate.convertCoordinate(inter.point.x, inter.point.y);
                if (point != null) {
                    var z = Utils.express.getZ(this.a, this.b, point.x, point.y);
                }
                points.push(z);
            }
            return points;
        };
        obj.hasNumerousSolution = function (solutions, point) {
            var length = solutions.length;
            for (var i = 0; i < length; i++) {
                var item = solutions[i];
                if (point.x == item.x && point.y == item.y) {
                    return true;
                }
            }
            return false;
        };
        obj.getNumerousSolutionPoints = function (k1) {
            var numerousSolution = [];
            if (this.feasibleRegion != null) {
                var length = this.feasibleRegion.points.length;
                for (var i = 0; i < length; i++) {
                    var inter1 = this.feasibleRegion.points[i];
                    var inter2;
                    if (i + 1 == length) {
                        inter2 = this.feasibleRegion.points[0];
                    } else {
                        inter2 = this.feasibleRegion.points[i + 1];
                    }
                    var inter1_1 = Utils.coordinate.convertCoordinate(inter1.x, inter1.y);
                    var inter2_1 = Utils.coordinate.convertCoordinate(inter2.x, inter2.y);
                    var interK = Utils.coordinate.getKstate(inter1_1, inter2_1);
                    var interDotted1_1 = this.isPointInDottedSegment(inter1_1);
                    var interDotted2_1 = this.isPointInDottedSegment(inter2_1);
                    if (k1 == interK && (!interDotted1_1 || !interDotted2_1)) {
                        numerousSolution.push(inter1);
                        numerousSolution.push(inter2);
                    }
                }
                return numerousSolution;
            }
        };
        obj.render = function () {
            G.remarkGroup().clear();

            var startY = F("((" + Scene.rows + ")/2 + 1) *" + Scene.unit).toString();
            var startX = F("-1*(" + this.b + ")*(" + startY + ")/(" + this.a + ")").toString();
            var endY = F("(-1*(" + Scene.columns + ")/ 2 - 1) *" + Scene.unit).toString();
            var endX = F("-1*(" + this.b + ")*(" + endY + ")/(" + this.a + ")").toString();

            var startPoint = Utils.coordinate.convertRealCoordinate(startX, startY);
            var endPoint = Utils.coordinate.convertRealCoordinate(endX, endY);

            var g = G.objectiveFunctionGroup();
            this.g = g;
            obj.before();

            var points = [];
            points.push(startPoint);
            points.push(endPoint);

            var adsorbent = 20;
            var tpoints = [];
            tpoints.push(startPoint);
            tpoints.push(new Point(F(startPoint.x).toBigNumber().toNumber() + adsorbent, F(startPoint.y).toBigNumber().toNumber()));
            tpoints.push(new Point(F(endPoint.x).toBigNumber().toNumber() + adsorbent, F(endPoint.y).toBigNumber().toNumber()));
            tpoints.push(endPoint);
            tpoints.push(new Point(F(endPoint.x).toBigNumber().toNumber() - adsorbent, F(endPoint.y).toBigNumber().toNumber()));
            tpoints.push(new Point(F(startPoint.x).toBigNumber().toNumber() - adsorbent, F(startPoint.y).toBigNumber().toNumber()));
            var transparentLine = Svg.polygon(tpoints);
            transparentLine.attr({ fill: "transparent", opacity: 0.3, cursor: "pointer" });
            g.add(transparentLine);

            var line = new Line(points, this.color);
            line.render();
            line.path.attr({ cursor: "pointer" });
            g.add(line.path);
            this.line = line;

            this.intersZ = this.getIntersZ();

            if (this.inters != null && this.feasibleRegion != null) {
                this.zMax = this.getZMax();
                this.zMin = this.getZMin();
                this.zCenter = this.getZCenter();
            }

            var svg = Svg.jq().offset();
            var minLeft = svg.left;
            var maxLeft = svg.left + Scene.width * Const.scaleX;
            var minTop = svg.top;
            var maxTop = svg.top + Scene.height * Const.scaleX;
            var x0,
                x1,
                dx0,
                isDrag = false,
                localMatrixE = 0;

            var funcText = Utils.express.getObjectiveFunctionText(this.a, this.b);
            var inters = Svg.intersection(line.getFractionPath(), Svg.boxPath);
            inters = inters.unique();
            var point2 = Utils.business.getMaxPoint(inters);
            var textG = G.getGroup(this.textId);
            G.remarkGroup().add(textG);
            //this.g.add(textG);

            if (funcText.indexOf("/") > -1) {
                this.addFenShuText(point2, funcText);
            } else {
                this.addNoFenShuText(point2, funcText);
            }

            var path = this.getPath();
            this.objFuncPath = path;
            var box = textG.getBBox();
            var moveXY = Utils.coordinate.getObjFuncPointXY(box, funcText);
            textG.attr({ "transform": "translate(" + moveXY.x + "," + moveXY.y + ")" });

            // 无数解
            var k = Utils.coordinate.getK(this.a, this.b);
            var k1 = F("-1*(" + this.b + ")/(" + this.a + ")").toBigNumber().toNumber();
            var numerousSolutionPoints = this.getNumerousSolutionPoints(k);
            var move = function move(dx, dy, x, y, event) {
                if (isDrag == true) {
                    if (x < minLeft || x > maxLeft || y < minTop || y > maxTop) {
                        return;
                    }
                    dx = (dx + dy * k1) / Const.scaleX;
                    x1 = event.clientX;
                    dx0 = x1 - x0;
                    dx0 = (dx0 + dy * k1) / Const.scaleX;
                    dy = 0;
                    if (obj.inters != null && obj.feasibleRegion != null) {
                        var length = obj.inters.length;
                        var isHighligh = false;
                        for (var i = 0; i < length; i++) {
                            var inter = obj.inters[i];
                            var tag = obj.tags[i];
                            var z = obj.intersZ[i];
                            var interPoint = Utils.coordinate.convertCoordinate(inter.point.x, inter.point.y);
                            var interPoint2 = F("(-1* (" + obj.b + ")*(" + interPoint.fy + "))/(" + obj.a + ")").toString();
                            var realPoint = Utils.coordinate.convertRealCoordinate(interPoint2, interPoint.y);
                            var dx2 = inter.point.fx - F(realPoint.x).toBigNumber().toNumber() - localMatrixE;

                            // 是否是最大值
                            if (obj.isZmax(z)) {
                                if (Math.abs(dx2 - dx0) < 10 && inter.isDotted == false && obj.feasibleRegion.isShow == true) {
                                    dx = dx2;
                                    dx0 = dx2;
                                }
                                if (Math.abs(dx2 - dx0) == 0 && inter.isDotted == false && obj.feasibleRegion.isShow == true) {
                                    isHighligh = true;
                                    if (obj.getIsMax(F(obj.zCenter).toBigNumber().toNumber(), F(z).toBigNumber().toNumber())) {
                                        var hasMaxNumerousSolution = obj.hasNumerousSolution(numerousSolutionPoints, inter.point);
                                        obj.zMax.isHighlight = true;
                                        obj.setHighlight(inter, tag);
                                        obj.excuteCallbackCrossZmax(hasMaxNumerousSolution, numerousSolutionPoints);
                                    }
                                } else {
                                    obj.cancelHighlight(inter, tag);
                                }
                            }

                            // 是否是最小值
                            if (obj.isZmin(z)) {
                                if (Math.abs(dx2 - dx0) < 10 && inter.isDotted == false && obj.feasibleRegion.isShow == true) {
                                    dx = dx2;
                                    dx0 = dx2;
                                }
                                if (Math.abs(dx2 - dx0) == 0 && inter.isDotted == false && obj.feasibleRegion.isShow == true) {
                                    isHighligh = true;
                                    if (obj.getIsMin(F(obj.zCenter).toBigNumber().toNumber(), F(z).toBigNumber().toNumber())) {
                                        var hasMinNumerousSolution = obj.hasNumerousSolution(numerousSolutionPoints, inter.point);
                                        obj.zMin.isHighlight = true;
                                        obj.setHighlight(inter, tag);
                                        obj.excuteCallbackCrossZmin(hasMinNumerousSolution, numerousSolutionPoints);
                                    }
                                } else {
                                    obj.cancelHighlight(inter, tag);
                                }
                            }

                            if (!isHighligh) {
                                obj.normal();
                                isHighligh = false;
                            }
                        }
                    }
                    this.attr({ transform: this.data('origTransform') + (this.data('origTransform') ? "T" : "t") + [dx, dy] });

                    obj.objFuncPath = Utils.coordinate.getMovedPath(path, dx);
                    var inters1 = Svg.intersection(obj.objFuncPath, Svg.boxPath);
                    var point3 = Utils.business.getMaxPoint(inters1);
                    obj.updateTextGroupPosition(textG, point3, point2, moveXY, funcText);

                    //Utils.business.updateConditionTagPositionOverlay(obj.conditions);
                }
            };
            var start = function start(x, y, event) {
                if (isDrag == false) {
                    isDrag = true;
                    x0 = event.clientX;
                    localMatrixE = this.transform().localMatrix.e;
                    this.data('origTransform', this.transform().local);
                }
            };
            var stop = function stop(event) {
                if (isDrag == true) {
                    isDrag = false;
                    localMatrixE = this.transform().localMatrix.e;
                    path = obj.objFuncPath;
                }
            };
            this.g.drag(move, start, stop);

            Utils.business.updateConditionTagPosition(this.conditions);
            this.updateTextGroupPosition(textG, point2, point2, moveXY, funcText);
        };
        obj.updateTextGroupPosition = function (textGroup, point, point2, moveXY, funcText) {
            var split = 0;
            var box = textGroup.getBBox();
            var isFenshu = Utils.business.isFenShu(funcText);
            if (isFenshu) {
                split = 15;
            }

            var gX = 0,
                gY = 0;
            var e = point.fx - point2.fx + moveXY.x;
            var f = point.fy - point2.fy + moveXY.y;
            gX = e;
            gY = f;

            if (point.fx <= 0) {
                gX = -point2.fx;
            }
            if (point.fx + box.width + 5 >= Scene.width) {
                gX = Scene.width - point2.fx - box.width - 5;
            }
            if (point.fx + moveXY.x <= 0) {
                gX = -point2.fx;
            }
            if (point.fy <= 0) {
                gY = point2.fy;
            }

            if (point.fy + box.height >= Scene.height) {
                if (point2.fy > 530 && point2.fy < 568) {
                    gY = Scene.height - point2.fy - box.height / 2;
                } else {
                    gY = parseFloat(moveXY.y) > 0 ? Scene.height - parseFloat(textGroup.select("text").attr("y")) + split - parseFloat(moveXY.y) : Scene.height - parseFloat(textGroup.select("text").attr("y")) + split + parseFloat(moveXY.y);
                }
            }
            if (point.fy + box.height < Scene.height) {
                if (isFenshu) {
                    //gY = gY - moveXY.y + split;
                } else {
                    gY = gY + box.height;
                }
            }

            textGroup.attr({ "transform": "translate(" + gX + "," + gY + ")" });
        };
        //添加分数的文本
        obj.addFenShuText = function (point2, funcText) {
            var textG = G.getGroup(this.textId);

            var x = F(point2.x).toBigNumber().toNumber();
            var y = F(point2.y).toBigNumber().toNumber();

            var expression = Utils.express.parseObjectiveFunctionExpression(funcText);

            y = y + 15;

            var yText = Svg.text(new Point(F(x.toString()), F(y.toString())), "y=");
            yText.attr({ fontSize: 25, fontFamily: Const.fontFamily, fontStyle: Const.fontStyle });
            textG.add(yText);

            x = x + yText.node.clientWidth;
            y = y - 15;

            if (expression.a.length > 0) {
                var tmpx = this.addPointTagStr(expression.a, x, y, true);
                x = tmpx.x;
            }

            y = F(point2.y).toBigNumber().toNumber();
            if (expression.b.length > 0) {
                this.addPointTagStr(expression.b, x, y, false);
            }
        };

        obj.addPointTagStr = function (str, x, y, isX) {
            var split = 2;
            var textG = G.getGroup(this.textId);
            if (str.length > 0) {
                //分数
                if (str.indexOf("/") > -1) {
                    var fz = str.split("/")[0].replace("-", "").replace("+", "");
                    var fm = str.split("/")[1];
                    //负数
                    if (str.indexOf("-") > -1 || str.indexOf("+") > -1) {
                        var symbol = "-";
                        if (str.indexOf("-") > -1) {
                            symbol = "-";
                        }
                        if (str.indexOf("+") > -1) {
                            symbol = "+";
                        }

                        y = F(y.toString()).toBigNumber().toNumber() + 8;
                        var afText = Svg.text(new Point(F(x.toString()), F(y.toString())), symbol);
                        afText.attr({ fontSize: 25, fontFamily: Const.fontFamily, fontStyle: Const.fontStyle });
                        textG.add(afText);
                        x = x + afText.node.clientWidth + split;
                        y = F(y.toString()).toBigNumber().toNumber() - 8;
                    }

                    if (str !== "-") {
                        var afzText = Svg.text(new Point(F(x.toString()), F(y.toString())), fz);
                        afzText.attr({ fontSize: 25, fontFamily: Const.fontFamily, fontStyle: Const.fontStyle });
                        textG.add(afzText);

                        y = F(y.toString()).toBigNumber().toNumber() + afzText.node.clientHeight;

                        var afmText = Svg.text(new Point(F(x.toString()), F(y.toString())), fm);
                        afmText.attr({ fontSize: 25, fontFamily: Const.fontFamily, fontStyle: Const.fontStyle });
                        textG.add(afmText);

                        var fenziLength = afzText.node.clientWidth;
                        var fenmuLength = afmText.node.clientWidth;
                        var maxLength = fenziLength > fenmuLength ? fenziLength : fenmuLength;
                        var lineLength = Const.scaleX > 1 ? maxLength * 1.2 : maxLength / 0.8;
                        if (fenziLength < lineLength) {
                            var x1 = x + (lineLength - fenziLength) / 2;
                            afzText.attr({ x: x1 });
                        }

                        if (fenmuLength < lineLength) {
                            var x1 = x + (lineLength - fenmuLength) / 2;
                            afmText.attr({ x: x1 });
                        }

                        var y4 = F(y.toString()).toBigNumber().toNumber() - afzText.node.clientHeight + 4;
                        var points = [];
                        points.push(new Point(F(x.toString()), F(y4.toString())));
                        var toX = parseInt(F(x.toString()).toBigNumber().toNumber() + lineLength);
                        points.push(new Point(F(toX.toString()), F(y4.toString())));
                        var fhLine = Svg.line(points);
                        fhLine.attr({ stroke: this.color, strokeWidth: 2 });
                        textG.add(fhLine);

                        x = x + lineLength + split;
                        var xTextStr = "·z";
                        if (isX) {
                            xTextStr = "·x";
                        }
                        y = F(y4.toString()).toBigNumber().toNumber() + 8;

                        var xText = Svg.text(new Point(F(x.toString()), F(y.toString())), xTextStr);
                        xText.attr({ fontSize: 25, fontFamily: Const.fontFamily, fontStyle: Const.fontStyle });
                        textG.add(xText);

                        x = x + xText.node.clientWidth;
                    } else {
                        var xText = Svg.text(new Point(F(x.toString()), F(y.toString())), "x");
                        xText.attr({ fontSize: 25, fontFamily: Const.fontFamily, fontStyle: Const.fontStyle });
                        textG.add(xText);

                        x = x + xText.node.clientWidth;
                    }
                } else {
                    var xTextStr = "·z";
                    if (isX) {
                        xTextStr = "·x";
                    }

                    if (Utils.business.isFenShu(str)) {
                        y = F(y.toString()).toBigNumber().toNumber();
                    } else {
                        y = F(y.toString()).toBigNumber().toNumber() + 12;;
                    }

                    var sText = (str + xTextStr).replace("-1·", "-").replace("1·", "").replace("+-", "-").replace("-+", "-").replace("+0", "").replace("-0", "").replace("+·", "+").replace("-·", "-");

                    var aText = Svg.text(new Point(F(x.toString()), F(y.toString())), sText);
                    aText.attr({ fontSize: 25, fontFamily: Const.fontFamily, fontStyle: Const.fontStyle });
                    textG.add(aText);

                    x = x + aText.node.clientWidth;
                }

                return { x: x, y: y };
            }
        };
        //添加非分数的文本
        obj.addNoFenShuText = function (point2, funcText) {
            var text = Svg.text(new Point(point2.x, point2.y), funcText);
            text.attr({ fontSize: 25, fontFamily: Const.fontFamily, fontStyle: Const.fontStyle });
            G.getGroup(this.textId).add(text);
        };
        obj.excuteCallbackCrossZmax = function (hasMaxNumerousSolution, numerousSolution) {
            if (this.callbackCrossZmax != null) {
                if (this.zMax.isCheck) {
                    this.zMaxInt.numerousSolution = "";
                    this.zMaxInt.isCheck = this.zMax.isCheck;
                    this.callbackCrossZmax(this.zMaxInt);
                } else {
                    var solution = "";
                    if (hasMaxNumerousSolution) {
                        solution = Lang.get("objectivefunction_numeroussolution");
                    }
                    this.zMax.numerousSolution = solution;
                    this.callbackCrossZmax(this.zMax);
                }
            }
        };
        obj.excuteCallbackCrossZmin = function (hasMinNumerousSolution, numerousSolution) {
            if (this.callbackCrossZmin != null) {
                if (this.zMin.isCheck) {
                    this.zMinInt.numerousSolution = "";
                    this.zMinInt.isCheck = this.zMin.isCheck;
                    this.callbackCrossZmin(this.zMinInt);
                } else {
                    var solution = "";
                    if (hasMinNumerousSolution) {
                        solution = Lang.get("objectivefunction_numeroussolution");
                    }
                    this.zMin.numerousSolution = solution;
                    this.callbackCrossZmin(this.zMin);
                }
            }
        };
        //角度
        obj.getAngle = function (point1, point2) {
            var angle = Snap.angle(point1, point2);
            return angle;
        };

        //隐藏文本
        obj.hideText = function (svgText) {
            svgText.hide();
            this.isShowText = false;
        };
        //显示文本
        obj.showText = function (svgText) {
            svgText.show();
            this.isShowText = true;
        };
        //隐藏文本
        obj.hideTextBg = function (svgTextBg) {
            svgTextBg.hide();
        };

        //显示文本
        obj.showTextBg = function (svgTextBg) {
            svgTextBg.show();
        };
        obj.transformDx = function (x, y, dx, dy, event) {};
        // 获取线的路径
        obj.getPath = function () {
            return obj.line.getPath();
        };
        // 获取带分数的路径
        obj.getFractionPath = function () {
            return obj.line.getFractionPath();
        };
        // 高亮
        obj.highlight = function () {
            this.isHighlight = true;
            this.line.path.attr({ stroke: obj.highlightColor, strokeWidth: obj.lineWidth + 2 });
        };
        // 设置正常状态
        obj.normal = function () {
            this.isHighlight = false;
            this.line.path.attr({ stroke: obj.color, strokeWidth: obj.lineWidth });
        };
        // 设置高亮状态
        obj.setHighlight = function (inter, tag) {
            if (inter != null) inter.highlight();
            if (tag != null) tag.highlight();
            this.highlight();
        };
        // 取消高亮
        obj.cancelHighlight = function (inter, tag) {
            if (inter != null) inter.normal();
            if (tag != null) tag.normal();
            if (!this.isHighlight) this.normal();
        };
        // 取消所有交点的高亮
        obj.cancelAllHighlight = function () {
            if (obj.inters != null && obj.inters.length > 0) {
                for (var i = 0; i < obj.inters.length; i++) {
                    var inter = obj.inters[i];
                    var tag = obj.tags[i];
                    this.cancelHighlight(inter, tag);
                }
            }
        };
        // 是否最大值
        obj.isZmax = function (value) {
            // 选择最优整数最大解
            if (this.zMax.isCheck) {
                if (this.zMaxInt.value == value) {
                    return true;
                }
                return false;
            } else {
                if (this.zMax.value == value) {
                    return true;
                }
                return false;
            }
        };
        // 是否最小值
        obj.isZmin = function (value) {
            // 选择最优整数最小解
            if (this.zMin.isCheck) {
                if (this.zMinInt.value == value) {
                    return true;
                }
                return false;
            } else {
                if (this.zMin.value == value) {
                    return true;
                }
                return false;
            }
        };
        // Ｚ的最大值
        obj.getZMax = function () {
            var maxZ,
                points = [];
            for (var i = 0; i < obj.inters.length; i++) {
                var inter = obj.inters[i];
                var coordinatePoint = Utils.coordinate.convertCoordinate(inter.point.x, inter.point.y);
                var z = Utils.express.getZ(this.a, this.b, coordinatePoint.x, coordinatePoint.y);
                if (maxZ === undefined || z === null) {
                    maxZ = z;
                } else {
                    maxZ = F(z).toBigNumber().toNumber() > F(maxZ).toBigNumber().toNumber() ? z : maxZ;
                }
            }
            for (var i = 0; i < obj.inters.length; i++) {
                var inter = obj.inters[i];
                var coordinatePoint = Utils.coordinate.convertCoordinate(inter.point.x, inter.point.y);
                var z = Utils.express.getZ(this.a, this.b, coordinatePoint.x, coordinatePoint.y);
                if (z == maxZ) {
                    points.push(coordinatePoint);
                }
            }
            return new Z(points, maxZ);
        };
        // 中心点的Z
        obj.getZCenter = function () {
            var centerPoint1 = Snap.getCenter(obj.feasibleRegion.points);
            var point = Utils.coordinate.convertCoordinate(centerPoint1.x, centerPoint1.y);
            //var coordinatePoint = Utils.coordinate.convertCoordinate(point.x, point.y);
            var z = Utils.express.getZ(this.a, this.b, point.x, point.y);
            return z;
        };
        // 获取最大值
        obj.getIsMax = function (zCenter, zMaxMin) {
            if (zCenter > zMaxMin) {
                return false;
            } else {
                return true;
            }
        };
        // 获取最小值
        obj.getIsMin = function (zCenter, zMaxMin) {
            if (zCenter < zMaxMin) {
                return false;
            } else {
                return true;
            }
        };
        // Ｚ的最小值
        obj.getZMin = function () {
            var minZ,
                points = [];
            for (var i = 0; i < obj.inters.length; i++) {
                var inter = obj.inters[i];
                var coordinatePoint = Utils.coordinate.convertCoordinate(inter.point.x, inter.point.y);
                var z = Utils.express.getZ(this.a, this.b, coordinatePoint.x, coordinatePoint.y);
                if (minZ === undefined || z === null) {
                    minZ = z;
                } else {
                    minZ = F(z).toBigNumber().toNumber() < F(minZ).toBigNumber().toNumber() ? z : minZ;
                }
            }

            for (var i = 0; i < obj.inters.length; i++) {
                var inter = obj.inters[i];
                var coordinatePoint = Utils.coordinate.convertCoordinate(inter.point.x, inter.point.y);
                var z = Utils.express.getZ(this.a, this.b, coordinatePoint.x, coordinatePoint.y);
                if (z == minZ) {
                    points.push(coordinatePoint);
                }
            }

            return new Z(points, minZ);
        };
        // X最小值
        obj.getMinX = function () {
            var minX;
            if (this.feasibleRegion.points != null && this.feasibleRegion.points.length > 0) {
                for (var i = 0; i < this.feasibleRegion.points.length; i++) {
                    var inter = this.feasibleRegion.points[i];
                    var point = Utils.coordinate.convertCoordinate(inter.x, inter.y);
                    if (minX === undefined || minX === null) {
                        minX = F(point.x).toBigNumber().toNumber();
                    }
                    minX = F(minX).toBigNumber().toNumber() < F(point.x).toBigNumber().toNumber() ? minX : point.x;
                }
            }
            return minX;
        };
        // X最大值
        obj.getMaxX = function () {
            var maxX;
            if (this.feasibleRegion.points != null && this.feasibleRegion.points.length > 0) {
                for (var i = 0; i < this.feasibleRegion.points.length; i++) {
                    var inter = this.feasibleRegion.points[i];
                    var point = Utils.coordinate.convertCoordinate(inter.x, inter.y);
                    if (maxX === undefined || maxX === null) {
                        maxX = F(point.x).toBigNumber().toNumber();
                    }
                    maxX = F(maxX).toBigNumber().toNumber() > F(point.x).toBigNumber().toNumber() ? maxX : point.x;
                }
            }
            return maxX;
        };
        // Y最小值
        obj.getMinY = function () {
            var minY;
            if (this.feasibleRegion.points != null && this.feasibleRegion.points.length > 0) {
                for (var i = 0; i < this.feasibleRegion.points.length; i++) {
                    var inter = this.feasibleRegion.points[i];
                    var point = Utils.coordinate.convertCoordinate(inter.x, inter.y);
                    if (minY === undefined || minY === null) {
                        minY = F(point.y).toBigNumber().toNumber();
                    }

                    minY = F(minY).toBigNumber().toNumber() < F(point.y).toBigNumber().toNumber() ? minY : point.y;
                }
            }
            return minY;
        };
        // Y最大值
        obj.getMaxY = function () {
            var maxY;
            if (this.feasibleRegion.points != null && this.feasibleRegion.points.length > 0) {
                for (var i = 0; i < this.feasibleRegion.points.length; i++) {
                    var inter = this.feasibleRegion.points[i];
                    var point = Utils.coordinate.convertCoordinate(inter.x, inter.y);
                    if (maxY === undefined || maxY === null) {
                        maxY = F(point.y).toBigNumber().toNumber();
                    }
                    maxY = F(maxY).toBigNumber().toNumber() > F(point.y).toBigNumber().toNumber() ? maxY : point.y;
                }
            }
            return maxY;
        };
        obj.getIntSolutionData = function () {
            var minX = this.getMinX();
            var maxX = this.getMaxX();
            var intMinX = parseInt(F(minX).toBigNumber().toNumber());
            var intMaxX = parseInt(F(maxX).toBigNumber().toNumber());
            var lengthX = Math.abs(intMaxX - intMinX);

            var minY = this.getMinY();
            var maxY = this.getMaxY();
            var intMinY = parseInt(F(minY).toBigNumber().toNumber());
            var intMaxY = parseInt(F(maxY).toBigNumber().toNumber());
            var lengthY = Math.abs(intMaxY - intMinY);
            var simpleConditions = [];
            for (var i = 0; i < this.conditions.length; i++) {
                var condition = this.conditions[i];
                if (!Utils.business.checkCondition(condition)) {
                    continue;
                }
                var item = {};
                item.a = F(condition.a).toBigNumber().toNumber();
                item.b = F(condition.b).toBigNumber().toNumber();
                item.c = F(condition.c).toBigNumber().toNumber();
                item.symbol = condition.symbol;
                var points = [];
                if (condition.points != null && condition.points.length > 0) {
                    for (var j = 0; j < condition.points.length; j++) {
                        var point = condition.points[j];
                        if (point != null) {
                            points.push({ x: point.fx, y: point.fy });
                        }
                    }
                }
                item.points = points;
                simpleConditions.push(item);
            }
            var data = { lengthX: lengthX, lengthY: lengthY, intMinX: intMinX, intMinY: intMinY, intMaxX: intMaxX, intMaxY: intMaxY, conditions: simpleConditions };
            return data;
        };
        // 获取整数点
        obj.getMaxIntPoints = function () {
            Prompter.wait(Lang.get("objectivefunction_calcing"));
            var data = obj.getIntSolutionData();
            var myWorker = new Worker(Const.basePath + "resources/LP_Workers.js");
            myWorker.onmessage = function (event) {
                myWorker.terminate();

                var answers = event.data;
                var maxZ = obj.getMaxIntSolutionZ(answers);
                var maxIntPoints = obj.getMaxIntSolutionPoints(answers, maxZ);
                // if (obj.getIsMax(F(obj.zCenter).toBigNumber().toNumber(), F(maxZ).toBigNumber().toNumber())) {
                if (maxIntPoints != null && maxIntPoints.length > 0) {
                    obj.zMaxInt = new Z(maxIntPoints, maxZ);
                    if (obj.callbackCrossZmax != null) {
                        obj.zMaxInt.numerousSolution = "";
                        obj.zMaxInt.isCheck = obj.zMax.isCheck;
                        obj.callbackCrossZmax(obj.zMaxInt);
                    }
                }
                // }
                Prompter.close();
            };
            myWorker.postMessage(data);
        };
        // 获取整数点
        obj.getMinIntPoints = function () {
            Prompter.wait(Lang.get("objectivefunction_calcing"));
            var data = obj.getIntSolutionData();
            var myWorker = new Worker(Const.basePath + "resources/LP_Workers.js");
            myWorker.onmessage = function (event) {
                myWorker.terminate();

                var answers = event.data;
                var minZ = obj.getMinIntSolutionZ(answers);
                var minIntPoints = obj.getMinIntSolutionPoints(answers, minZ);

                // if (obj.getIsMin(F(obj.zCenter).toBigNumber().toNumber(), F(minZ).toBigNumber().toNumber())) {
                if (minIntPoints != null && minIntPoints.length > 0) {
                    obj.zMinInt = new Z(minIntPoints, minZ);
                    if (obj.callbackCrossZmin != null) {
                        obj.zMinInt.numerousSolution = "";
                        obj.zMinInt.isCheck = obj.zMin.isCheck;
                        obj.callbackCrossZmin(obj.zMinInt);
                    }
                }

                // }
                Prompter.close();
            };
            myWorker.postMessage(data);
        };
        // 最大整数解 的 Z
        obj.getMaxIntSolutionZ = function (answers) {
            var maxZ;
            for (var i = 0; i < answers.length; i++) {
                var answer = answers[i];
                var tmpZ = Utils.express.getZ(this.a, this.b, answer.x.toString(), answer.y.toString());
                if (maxZ === undefined || maxZ === null) {
                    maxZ = tmpZ;
                }
                maxZ = F(maxZ).toBigNumber().toNumber() > F(tmpZ).toBigNumber().toNumber() ? maxZ : tmpZ;
            }
            return maxZ;
        };
        // 最大整数解
        obj.getMaxIntSolutionPoints = function (answers, maxZ) {
            var maxIntPoints = [];
            for (var i = 0; i < answers.length; i++) {
                var answer = answers[i];
                var tmpZ = Utils.express.getZ(this.a, this.b, answer.x.toString(), answer.y.toString());
                if (maxZ === tmpZ) {
                    if (maxIntPoints.length < 51) {
                        maxIntPoints.push(answer);
                    }
                }
            }
            return maxIntPoints;
        };
        // 点在虚线上
        obj.isPointInDottedSegment = function (point) {
            for (var i = 0; i < this.conditions.length; i++) {
                var condition = this.conditions[i];
                if (condition.isRender) {
                    var isPointInSegment = Snap.isPointInSegment(point, condition.points[0], condition.points[1]);
                    if (isPointInSegment && condition.isDotted) {
                        return true;
                    }
                }
            }
            return false;
        };
        // 排除点在虚线上
        obj.excludePointInSegment = function (answers) {
            var points = [];
            if (answers != null && answers.length > 0) {
                for (var i = 0; i < answers.length; i++) {
                    var answer = answers[i];
                    var isPointInDottedSegment = this.isPointInDottedSegment(answer);
                    if (isPointInDottedSegment) {
                        continue;
                    } else {
                        points.push(answer);
                    }
                }
            }
            return points;
        };
        // 最大值的最优整数解
        obj.maxIntSolution = function () {
            if (!Utils.business.checkObjectiveFunction(this.a, this.b)) {
                return;
            }
            if (this.zMax != null) {
                this.zMax.isCheck = true;
                this.zMax.isHighlight = false;
                this.getMaxIntPoints();
            }
        };
        // 取消最大整数解
        obj.cancelMaxIntSolution = function () {
            if (!Utils.business.checkObjectiveFunction(this.a, this.b)) {
                return;
            }
            this.zMax.isCheck = false;
            this.zMax.isHighlight = false;
            if (this.zMax != null) {
                if (this.callbackCrossZmax != null) {
                    this.callbackCrossZmax(this.zMax);
                }
            }
        };
        // 获取最大整数解的Z
        obj.getMinIntSolutionZ = function (answers) {
            var minZ;
            for (var i = 0; i < answers.length; i++) {
                var answer = answers[i];
                var tmpZ = Utils.express.getZ(this.a, this.b, answer.x.toString(), answer.y.toString());
                if (minZ === undefined || minZ === null) {
                    minZ = tmpZ;
                }
                minZ = F(minZ).toBigNumber().toNumber() < F(tmpZ).toBigNumber().toNumber() ? minZ : tmpZ;
            }
            return minZ;
        };
        // 获取最大整数解的Points
        obj.getMinIntSolutionPoints = function (answers, minZ) {
            var minIntPoints = [];
            for (var i = 0; i < answers.length; i++) {
                var answer = answers[i];
                var tmpZ = Utils.express.getZ(this.a, this.b, answer.x.toString(), answer.y.toString());
                if (minZ === tmpZ) {
                    minIntPoints.push(answer);
                }
            }
            return minIntPoints;
        };
        // 最小值的最优整数解
        obj.minIntSolution = function () {
            if (!Utils.business.checkObjectiveFunction(this.a, this.b)) {
                return;
            }
            if (this.zMin != null) {
                this.zMin.isCheck = true;
                this.zMin.isHighlight = false;
                this.getMinIntPoints();
            }
        };
        // 取消最小整数解
        obj.cancelMinIntSolution = function () {
            if (!Utils.business.checkObjectiveFunction(this.a, this.b)) {
                return;
            }
            this.zMin.isCheck = false;
            this.zMin.isHighlight = false;
            //this.zMinInt.isCheck = false;
            //this.zMinInt.isHighlight = true;
            if (this.zMin != null) {
                if (this.callbackCrossZmin != null) {
                    this.callbackCrossZmin(this.zMin);
                }
            }
        };
        //显示
        obj.show = function () {
            if (this.g != null) {
                this.g.show();
            }
        };
        //隐藏
        obj.hide = function () {
            if (this.g != null) {
                this.g.hide();
            }
        };
        // 清除
        obj.clear = function () {
            if (this.g != null) {
                this.g.remove();
                this.g = null;
            }
            if (G.remarkGroup() != null) {
                G.remarkGroup().remove();
            }
            if (this.callbackClear != null) this.callbackClear();
        };
        // 清除
        obj.clearData = function () {
            if (this.g != null) {
                this.g.remove();
            }
            if (G.remarkGroup() != null) {
                G.remarkGroup().remove();
            }
            this.g = null;
            this.a = "a";
            this.b = "b";
            this.inters = null;
            this.tags = null;
            this.conditions = null;
            this.feasibleRegion = null;
            this.zMax = null;
            this.zMaxInt = null;
            this.zMin = null;
            this.zMinInt = null;

            if (this.callbackClear != null) this.callbackClear();
        };
        return obj;
    }

    /*
     * 约束条件
     */
    function ConstraintCondition(a, b, c, symbol) {
        var obj = {};
        obj.id = "gCondition_";
        obj.textId = "text_";
        obj.index = 1;
        obj.a = a;
        obj.b = b;
        obj.c = c;
        obj.symbol = symbol;
        obj.line = null;
        obj.region = null;
        obj.g = null;
        obj.isShow = true;
        obj.isRender = false;
        obj.isDotted = false;
        obj.isShowText = false;
        obj.points = null;
        obj.color = "black";
        obj.textGroup = null;
        obj.textColor = "#000000";
        obj.textWidth = 0;
        obj.before = function () {
            Svg.before();
        };
        obj.setData = function (item) {
            obj.a = item.a;
            obj.b = item.b;
            obj.c = item.c;
            obj.symbol = item.symbol;
        };
        //获取开始结束点
        obj.getStartEndPoint = function () {
            var x, y, x0, y0, x1, y1;
            if (F(this.a).toBigNumber().toNumber() === 0) {
                var tmp = F("-1*(" + this.c + ")/(" + this.b + ")").toString();
                y = F(tmp).toString();
                var x0_0 = F("(-1*(" + Scene.columns + ")/ 2 - 1) *" + Scene.unit).toString();
                x0 = x0_0;
                y0 = y;
                var x1_0 = F("( " + Scene.columns + "/ 2 + 1) *" + Scene.unit).toString();
                x1 = x1_0;
                y1 = y;
            } else {
                if (F(this.b).toBigNumber().toNumber() === 0) {
                    var tmp = F("-1*(" + this.c + ")/(" + this.a + ")").toString();
                    x = F(tmp).toString();
                    x0 = F(x).toString();
                    var y0_0 = F("( " + Scene.rows + "/ 2 +1 ) *" + Scene.unit).toString();
                    y0 = y0_0;
                    x1 = x;
                    var y1_0 = F("(-1*(" + Scene.rows + ")/ 2 - 1) *" + Scene.unit).toString();
                    y1 = y1_0;
                } else {
                    var y0_0 = F("(" + Scene.rows + "/ 2 + 1) * " + Scene.unit).toString();
                    y0 = y0_0;
                    var tmp1_0 = F("-1* (" + this.b + ")*(" + y0 + ")").toString();
                    var tmp1_2 = F("(" + tmp1_0 + ")-(" + this.c + ")").toString();
                    x0 = F("(" + tmp1_2 + ")/(" + this.a + ")").toString();
                    var y1_0 = F("(-1*" + Scene.rows + "/ 2 - 1) * " + Scene.unit).toString();
                    y1 = y1_0;
                    var tmp2_0 = F("-1*(" + this.b + ")*(" + y1 + ")").toString();
                    var tmp2_1 = F("(" + tmp2_0 + ")-(" + this.c + ")").toString();
                    x1 = F("(" + tmp2_1 + ")/(" + this.a + ")").toString();
                }
            }
            return { start: new Point(x0, y0), end: new Point(x1, y1) };
        };
        //是否虚线
        obj.setIsDotted = function (symbol) {
            var isDotted = Utils.express.isDotted(symbol);
            obj.isDotted = isDotted;
        };
        //渲染
        obj.render = function () {
            this.setIsDotted(this.symbol);
            var startEndPoint = this.getStartEndPoint();
            var start = Utils.coordinate.convertRealCoordinate(startEndPoint.start.x, startEndPoint.start.y);
            var end = Utils.coordinate.convertRealCoordinate(startEndPoint.end.x, startEndPoint.end.y);

            var g = G.getGroup(this.id + this.index);
            this.g = g;
            this.before();

            var points = [];
            points.push(start);
            points.push(end);

            var line = this.getLine(points, Svg.colors[this.index]);
            this.line = line;
            G.getGroup(this.id + this.index).add(line.path);
            obj.points = points;

            var funcText = Utils.express.getText(this.a, this.b, this.c);
            var inters = Svg.intersection(line.getFractionPath(), Svg.boxPath);
            inters = inters.unique();
            var point2 = Utils.business.getMaxPoint(inters);
            //var angle = this.getAngle(start, point2);

            var regions = Utils.coordinate.getSplitRegions(line.getFractionPath(), Svg.boxPath);
            this.renderRegionByCenterPoint(regions);
            G.conditionGroup().add(this.g);

            var textG = G.getGroup(this.textId + this.index);

            //var rect = Svg.rect(point2, 10, 10, 0);
            //rect.attr({fill: "#FFFFFF",opacity: 0.7});
            //textG.add(rect);

            if (point2 != null) {
                if (funcText.indexOf("/") > -1) {
                    this.addFenShuText(point2, funcText);
                } else {
                    this.addNoFenShuText(point2, funcText);
                }
            }

            var box = textG.getBBox();
            var ofBox = G.remarkGroup().getBBox();
            var moveXY = Utils.coordinate.getPointXY(box, ofBox);
            textG.attr({ "transform": "translate(" + moveXY.x + "," + moveXY.y + ")" });
            this.textGroup = textG;

            //var rotateText = Utils.business.getRotateText(angle, point2);
            //var translateText = Utils.business.getTranslateText(angle, text.node.clientWidth, text.node.clientHeight);
            //text.attr({"transform":rotateText + translateText});
            G.conditionTagGroup().add(textG);

            //this.hideText(textG);
            //this.region.polygon.unclick();
            //this.region.polygon.click(function(){
            //    if (obj.textGroup.isShow()){
            //        obj.hideText(obj.textGroup);
            //    } else {
            //        obj.showText(obj.textGroup);
            //    }
            //});

            this.isRender = true;
        };

        //添加分数的文本
        obj.addFenShuText = function (point2, funcText) {
            var textG = G.getGroup(this.textId + this.index);

            var x = F(point2.x).toBigNumber().toNumber();
            var y = F(point2.y).toBigNumber().toNumber();

            var expression = Utils.express.parseExpression(funcText);

            y = y + 15;

            var yText = Svg.text(new Point(F(x.toString()), F(y.toString())), "y=");
            yText.attr({ fontSize: 25, fontFamily: Const.fontFamily, fontStyle: Const.fontStyle });
            textG.add(yText);

            x = x + yText.node.clientWidth;
            y = y - 15;

            if (expression.a.length > 0) {
                var tmpx = this.addPointTagStr(expression.a, x, y, true);
                x = tmpx.x;
            }

            y = F(point2.y).toBigNumber().toNumber();
            if (expression.b.length > 0) {
                this.addPointTagStr(expression.b, x, y, false);
            }
        };

        obj.addPointTagStr = function (str, x, y, isX) {
            var split = 2;
            var textG = G.getGroup(this.textId + this.index);
            if (str.length > 0) {
                //分数
                if (str.indexOf("/") > -1) {
                    var fz = str.split("/")[0].replace("-", "").replace("+", "").replace("·", "").replace("x", "");
                    var fm = str.split("/")[1].replace("·", "").replace("x", "");
                    //负数
                    if (str.indexOf("-") > -1 || str.indexOf("+") > -1) {
                        var s = "-";
                        if (str.indexOf("-") > -1) {
                            s = "-";
                            y = F(y.toString()).toBigNumber().toNumber() + 8;
                        }
                        if (str.indexOf("+") > -1) {
                            s = "+";
                            y = F(y.toString()).toBigNumber().toNumber() + 12;
                        }

                        var afText = Svg.text(new Point(F(x.toString()), F(y.toString())), s);
                        afText.attr({ fontSize: 25, fontFamily: Const.fontFamily, fontStyle: Const.fontStyle });
                        textG.add(afText);
                        x = x + afText.node.clientWidth + split;

                        if (str.indexOf("-") > -1) {
                            y = F(y.toString()).toBigNumber().toNumber() - 8;
                        }
                        if (str.indexOf("+") > -1) {
                            y = F(y.toString()).toBigNumber().toNumber() - 12;
                        }
                    }

                    if (str !== "-") {
                        var afzText = Svg.text(new Point(F(x.toString()), F(y.toString())), fz);
                        afzText.attr({ fontSize: 25, fontFamily: Const.fontFamily, fontStyle: Const.fontStyle });
                        textG.add(afzText);

                        y = F(y.toString()).toBigNumber().toNumber() + afzText.node.clientHeight;

                        var afmText = Svg.text(new Point(F(x.toString()), F(y.toString())), fm);
                        afmText.attr({ fontSize: 25, fontFamily: Const.fontFamily, fontStyle: Const.fontStyle });
                        textG.add(afmText);

                        var fenziLength = afzText.node.clientWidth;
                        var fenmuLength = afmText.node.clientWidth;
                        var maxLength = fenziLength > fenmuLength ? fenziLength : fenmuLength;
                        var lineLength = Const.scaleX > 1 ? maxLength * 1.2 : maxLength / 0.8;
                        if (fenziLength < lineLength) {
                            var x1 = x + (lineLength - fenziLength) / 2;
                            afzText.attr({ x: x1 });
                        }

                        if (fenmuLength < lineLength) {
                            var x1 = x + (lineLength - fenmuLength) / 2;
                            afmText.attr({ x: x1 });
                        }

                        var y4 = F(y.toString()).toBigNumber().toNumber() - afzText.node.clientHeight + 4;
                        var points = [];
                        points.push(new Point(F(x.toString()), F(y4.toString())));
                        var toX = parseInt(F(x.toString()).toBigNumber().toNumber() + lineLength);
                        points.push(new Point(F(toX.toString()), F(y4.toString())));
                        var fhLine = Svg.line(points);
                        fhLine.attr({ stroke: this.textColor, strokeWidth: 2 });
                        textG.add(fhLine);

                        x = x + lineLength + split;
                        if (isX) {
                            y = F(y4.toString()).toBigNumber().toNumber() + 8;

                            var xText = Svg.text(new Point(F(x.toString()), F(y.toString())), "·x");
                            xText.attr({ fontSize: 25, fontFamily: Const.fontFamily, fontStyle: Const.fontStyle });
                            textG.add(xText);

                            x = x + xText.node.clientWidth;
                        }
                    } else {
                        var xText = Svg.text(new Point(F(x.toString()), F(y.toString())), "x");
                        xText.attr({ fontSize: 25, fontFamily: Const.fontFamily, fontStyle: Const.fontStyle });
                        textG.add(xText);

                        x = x + xText.node.clientWidth;
                    }
                } else {
                    if (isX) {
                        if (str == "-") {
                            str = "-x";
                        } else {
                            str = str + "·x";
                        }
                    }
                    if (!Utils.business.isFenShu(str)) {
                        y = y + 13;
                    }
                    var aText = Svg.text(new Point(F(x.toString()), F(y.toString())), str);
                    aText.attr({ fontSize: 25, fontFamily: Const.fontFamily, fontStyle: Const.fontStyle });
                    textG.add(aText);

                    x = x + aText.node.clientWidth;
                }

                return { x: x, y: y };
            }
        };
        //添加非分数的文本
        obj.addNoFenShuText = function (point2, funcText) {
            var text = Svg.text(new Point(point2.x, point2.y), funcText);
            text.attr({ fontSize: 25, fontFamily: Const.fontFamily, fontStyle: Const.fontStyle });
            G.getGroup(this.textId + this.index).add(text);
        };

        //隐藏文本
        obj.hideText = function (svgText) {
            svgText.hide();
            this.isShowText = false;
        };
        //显示文本
        obj.showText = function (svgText) {
            svgText.show();
            this.isShowText = true;
        };
        //隐藏文本
        obj.hideTextBg = function (svgTextBg) {
            svgTextBg.hide();
        };

        //显示文本
        obj.showTextBg = function (svgTextBg) {
            svgTextBg.show();
        };
        //角度
        obj.getAngle = function (point1, point2) {
            var angle = Snap.angle(point1, point2);
            return angle;
        };

        obj.renderRegionByCenterPoint = function (regions) {
            var centerPoint1 = Snap.getCenter(regions.regionA);
            if (isNaN(centerPoint1.x) != true && isNaN(centerPoint1.y) != true) {
                var point1 = Utils.coordinate.convertCoordinate(centerPoint1.x.toFixed(2), centerPoint1.y.toFixed(2));
                var number1 = Utils.express.condition(point1.x, point1.y, this.a, this.b, this.c);
                var symbol1 = Utils.symbol(this.symbol, number1.toBigNumber().toNumber());
                if (symbol1 === this.symbol) {
                    this.renderRegion(regions.regionA, Svg.colors[this.index]);
                    return;
                }
            }
            var centerPoint2 = Snap.getCenter(regions.regionB);
            if (isNaN(centerPoint2.x) != true && isNaN(centerPoint2.y) != true) {
                var point2 = Utils.coordinate.convertCoordinate(centerPoint2.x.toFixed(2), centerPoint2.y.toFixed(2));
                var number2 = Utils.express.condition(point2.x, point2.y, this.a, this.b, this.c);
                var symbol2 = Utils.symbol(this.symbol, number2.toBigNumber().toNumber());
                if (symbol2 === this.symbol) {
                    this.renderRegion(regions.regionB, Svg.colors[this.index]);
                    return;
                }
            }
        };
        // 渲染线
        obj.getLine = function (points, color) {
            var line = new Line(points, color);
            line.symbol = this.symbol;
            line.render();
            return line;
        };
        // 渲染区域
        obj.renderRegion = function (points, color) {
            var region = new Region(points);
            region.color = color;
            region.render();
            G.getGroup(this.id + this.index).add(region.polygon);
            this.region = region;
        };
        // 获取线的路径
        obj.getPath = function () {
            return this.line.getPath();
        };
        //获取分数 的线的路径
        obj.getFractionPath = function () {
            return this.line.getFractionPath();
        };
        // 显示区域和线
        obj.show = function () {
            if (this.g != null) {
                this.g.show();
            }
        };
        // 隐藏区域和线
        obj.hide = function () {
            if (this.g != null) {
                this.g.hide();
            }
        };
        // 显示区域
        obj.showRegion = function () {
            if (this.region != null) {
                this.region.show();
            }
        };
        // 隐藏区域
        obj.hideRegion = function () {
            if (this.region != null) {
                this.region.hide();
            }
        };
        // 显示和隐藏区域和线
        obj.showOrHide = function () {
            if (this.g != null) {
                if (this.g.isShow()) {
                    this.isShow = false;
                    this.textGroup.hide();
                    this.hide();
                } else {
                    this.isShow = true;
                    this.textGroup.show();
                    this.show();
                }
            }
        };
        obj.showGraph = function () {
            if (this.g != null) {
                this.isShow = true;
                this.show();
            }
        };
        obj.hideGraph = function () {
            if (this.g != null) {
                this.isShow = false;
                this.hide();
            }
        };
        // 显示和隐藏区域
        this.showOrHideRegion = function () {
            if (this.g != null) {
                if (this.g.isShow()) {
                    this.showRegion();
                } else {
                    this.hideRegion();
                }
            }
        };
        // 清除线和区域
        obj.clear = function () {
            if (this.textGroup) {
                this.textGroup.remove();
            }
            if (this.g != null) {
                this.g.remove();
            }
            this.g = null;
            this.line = null;
            this.region = null;
            this.a = "a";
            this.b = "b";
            this.c = "c";
            this.s = "";
            this.isRender = false;
        };

        // 清除线和区域
        obj.remove = function () {
            if (this.textGroup) {
                this.textGroup.remove();
            }
            if (this.g != null) {
                this.g.remove();
            }
            this.g = null;
            this.line = null;
            this.region = null;
            this.isRender = false;
        };

        return obj;
    }

    /*
     * 约线性规划
     */
    function LinearPogrammingVM(runTime) {
        var obj = {};
        obj.runTime = runTime;
        //约束条件
        obj.conditions = [];
        //可行域
        obj.feasibleRegion = null;
        //交点
        obj.inters = [];
        //整数交点
        obj.int_inters = [];
        //标签
        obj.tags = [];
        //目标函数
        obj.objectiveFunction = null;
        //获取Data
        obj.getData = function () {
            var model = {};
            model.conditions = obj.conditions;
            model.inters = obj.inters;
            model.tags = obj.tags;
            model.feasibleRegion = obj.feasibleRegion;
            model.objectiveFunction = obj.objectiveFunction;
            if (obj.objectiveFunction != null) {
                model.Zmax = obj.objectiveFunction.zMax;
                model.Zmin = obj.objectiveFunction.zMin;
                model.ZmaxInt = obj.objectiveFunction.zMaxInt;
                model.ZminInt = obj.objectiveFunction.zMinInt;
            }
            var json = JSON.stringify(model);
            return JSON.parse(json);
        };
        //初始化
        obj.init = function (data) {
            this.allocConditions();
            if (data != null) {
                this.initConditions(data);
                this.renderInters();
                this.resetTagPostion();
            }
        };
        //给6条约束条件申请空间
        obj.allocConditions = function () {
            for (var i = 0; i < 6; i++) {
                var condition = new ConstraintCondition("a", "b", "c", "");
                condition.index = i;
                this.conditions.push(condition);
            }
        };
        obj.initConditions = function (data) {
            if (data.conditions != null && data.conditions.length > 0) {
                for (var i = 0; i < data.conditions.length; i++) {
                    var condition = data.conditions[i];
                    obj.setSceneUnit(condition);
                    this.conditions[condition.index].setData(condition);
                }
            }
            this.resetCondition();
        };
        obj.initInters = function (data) {
            this.renderInters();
        };
        obj.initObjectiveFunction = function (data) {
            if (data.objectiveFunction != null) {
                var item = data.objectiveFunction;
                var objectiveFunction = new ObjectiveFunction(item.a, item.b);
                objectiveFunction.inters = obj.inters;
                objectiveFunction.tags = obj.tags;
                objectiveFunction.runTime = obj.runTime;
                //                obj.objectiveFunction.setData(data.objectiveFunction);
                objectiveFunction.render();
            }
        };
        // 获取最大的值
        obj.getMax = function (points, condition) {
            var max;
            if (points != null && points.length > 0) {
                for (var i = 0; i < points.length; i++) {
                    var point = points[i];
                    var tmp = Math.abs(point.fx) > Math.abs(point.fy) ? Math.abs(point.fx) : Math.abs(point.fy);
                    if (max === undefined || max === null) {
                        max = tmp;
                    }
                    max = max > tmp ? max : tmp;
                }
            } else {
                max = obj.getPreMax(condition.a, condition.b, condition.c);
            }
            return max;
        };
        // 计算区域
        obj.isIntersectionRegions = function () {
            if (this.conditions != null && this.conditions.length > 0) {
                var feasibleRegion = this.conditions[0].region;
                var points = obj.getInterPoints();

                var newRegion = new FeasibleRegion(points, "#e06313");
                this.feasibleRegion = newRegion;
                if (this.feasibleRegion != null && this.feasibleRegion.points != null) {
                    var points = this.feasibleRegion.points.unique();
                    for (var i = 0; i < points.length; i++) {
                        var point = points[i];
                        if (point.x === "0" || point.y === "0" || F(point.x).toBigNumber().toNumber() === Scene.width || F(point.y).toBigNumber().toNumber() === Scene.height) {
                            continue;
                        }
                        var isDotted = obj.getIsDoottedInter(point);
                        var inter = new Inter(point, i, isDotted);
                        inter.render();
                        this.inters.push(inter);
                    }
                }
            }
        };
        // 获取所有相交点
        obj.calcInters = function () {
            Scene.unit = Const.units[16];
            var inters = [];
            var length = this.conditions.length;
            if (length > 1) {
                for (var i = 0; i < length - 1; i++) {
                    for (var j = length - 1; j > 0; j--) {
                        var condition1 = this.conditions[i];
                        if (!Utils.business.checkCondition(condition1)) {
                            continue;
                        }
                        var condition2 = this.conditions[j];
                        if (!Utils.business.checkCondition(condition2)) {
                            continue;
                        }
                        if (condition1 == condition2) {
                            continue;
                        }

                        var startEndPoint1 = Utils.coordinate.getStartEndPoint(condition1.a, condition1.b, condition1.c);
                        var start1 = Utils.coordinate.convertRealCoordinate(startEndPoint1.start.x, startEndPoint1.start.y);
                        var end1 = Utils.coordinate.convertRealCoordinate(startEndPoint1.end.x, startEndPoint1.end.y);

                        var startEndPoint2 = Utils.coordinate.getStartEndPoint(condition2.a, condition2.b, condition2.c);
                        var start2 = Utils.coordinate.convertRealCoordinate(startEndPoint2.start.x, startEndPoint2.start.y);
                        var end2 = Utils.coordinate.convertRealCoordinate(startEndPoint2.end.x, startEndPoint2.end.y);
                        var point = Svg.getTwoLineIntersection(start1, end1, start2, end2);

                        if (point != null) {
                            var coordinatePoint = Utils.coordinate.convertCoordinate(point.x, point.y);
                            if (coordinatePoint != null) {
                                inters.push(coordinatePoint);
                            }
                        }
                    }
                }
            }
            return inters;
        };
        // 单位
        obj.getUnit = function (max) {
            var unit = max;
            if (unit > 0 && unit < 0.001) {
                unit = Const.units[0];
            } else if (unit > 0 && unit < 0.05) {
                unit = Const.units[1];
            } else if (unit > 0 && unit < 0.1) {
                unit = Const.units[2];
            } else if (unit > 0 && unit < 0.5) {
                unit = Const.units[3];
            } else if (unit > 0 && unit < 1) {
                unit = Const.units[4];
            } else if (unit > 0 && unit < 5) {
                unit = Const.units[5];
            } else if (unit > 0 && unit < 10) {
                unit = Const.units[6];
            } else if (unit > 0 && unit < 50) {
                unit = Const.units[7];
            } else if (unit > 0 && unit < 100) {
                unit = Const.units[8];
            } else if (unit > 0 && unit < 500) {
                unit = Const.units[9];
            } else if (unit > 0 && unit < 1000) {
                unit = Const.units[10];
            } else if (unit > 0 && unit < 5000) {
                unit = Const.units[11];
            } else if (unit > 0 && unit < 10000) {
                unit = Const.units[12];
            } else if (unit > 0 && unit < 50000) {
                unit = Const.units[13];
            } else if (unit > 0 && unit < 100000) {
                unit = Const.units[14];
            } else if (unit > 0 && unit < 500000) {
                unit = Const.units[15];
            } else if (unit > 0 && unit < 1000000) {
                unit = Const.units[16];
            } else {
                if (unit > 1000000) {
                    unit = Const.units[16];
                } else {
                    unit = Const.units[0];
                }
            }
            return unit;
        };
        obj.getConditionsMax = function () {
            var max = 1;
            var index = 0;
            for (var i = 0; i < this.conditions.length; i++) {
                var condition = this.conditions[i];
                if (Utils.business.checkCondition(condition)) {
                    var preMax = this.getPreMax(condition.a, condition.b, condition.c);
                    if (index == 0) {
                        max = preMax;
                    } else {
                        max = preMax > max ? preMax : max;
                    }
                    index++;
                }
            }
            return max;
        };
        obj.getPreMax = function (a, b, c) {
            var max = 1;
            if (b == "0") {
                if (c == "0") {
                    max = Math.abs(F(a).toBigNumber().toNumber());
                } else {
                    max = Math.abs(F(c).toBigNumber().toNumber());
                }
            } else {
                if (c == "0") {
                    max = Math.abs(F(b).toBigNumber().toNumber());
                } else {
                    max = Math.abs(F("(" + c + ")/(" + b + ")").toBigNumber().toNumber());
                }
            }
            return max;
        };
        // 设置单位
        obj.setSceneUnit = function (condition) {
            var points = this.calcInters();
            //this.linearPogramming.getInterPoints();
            points = points.unique();
            var max = 1;
            if (points != null && points.length > 0) {
                max = this.getMax(points, condition);
            } else {
                max = this.getConditionsMax();
            }
            var maxUnit = this.getUnit(max);
            Scene.setUnit(maxUnit);
        };

        obj.setSceneUnit2 = function (condition) {
            var points = this.getInterPoints();
            points = this.getConvertInterPoints(points);
            points = points.unique();
            var max = 1;
            if (points != null && points.length > 0) {
                max = this.getMax(points, condition);
            } else {
                max = this.getConditionsMax();
            }
            var maxUnit = this.getUnit(max);
            Scene.setUnit(maxUnit);
        };

        // 添加目标函数
        obj.addObjectiveFunction = function (objectiveFunction) {
            if (!Utils.business.checkObjectiveFunction(objectiveFunction.a, objectiveFunction.b)) {
                return;
            }
            this.objectiveFunction = objectiveFunction;
            this.objectiveFunction.setTags(this.tags);
            this.objectiveFunction.setInters(this.inters);
            this.objectiveFunction.setConditions(this.conditions);
            this.objectiveFunction.setFeasibleRegion(this.feasibleRegion);
            objectiveFunction.render();
        };
        // 清除目标函数
        obj.clearObjectiveFunctionData = function () {
            if (this.objectiveFunction != null) {
                this.objectiveFunction.cancelAllHighlight();
                this.objectiveFunction.clearData();
            }
        };
        // 渲染约束条件
        obj.renderConditions = function () {
            var list = this.conditions;
            var length = list.length;
            if (list != null && length > 0) {
                for (var i = 0; i < length; i++) {
                    list[i].render();
                }
            }
        };
        // 添加约束条件
        obj.addCondition = function (index, condition) {
            this.clearNotCondition();
            this.conditions.insert(index, condition);
            condition.render();
        };
        // 约束条件是否相同
        obj.getEqualCondition = function (condition) {
            for (var i = 0; i < this.conditions.length; i++) {
                var item = this.conditions[i];
                if (condition.a == item.a && condition.b == item.b && condition.c == item.c && condition.symbol == item.symbol && item.isRender && condition.index != item.index) {
                    return item;
                }
            }
            return null;
        };
        // 获取几个渲染的约束条件
        obj.getRenderConditionCount = function () {
            var count = 0;
            for (var i = 0; i < this.conditions.length; i++) {
                var item = this.conditions[i];
                if (item.isRender) {
                    count++;
                }
            }
            return count;
        };
        // 是否有隐藏的约束条件
        obj.isHideCondition = function () {
            var result = false;
            for (var i = 0; i < this.conditions.length; i++) {
                var item = this.conditions[i];
                if (!item.isShow) {
                    result = true;
                    break;
                }
            }
            return result;
        };
        // 添加更新约束条件
        obj.updateCondition = function (condition) {
            var index = condition.index;
            this.conditions.update(index, condition);
        };
        // 重置约束条件
        obj.resetCondition = function () {
            for (var i = 0; i < this.conditions.length; i++) {
                var condition = this.conditions[i];
                if (!Utils.business.checkCondition(condition)) {
                    continue;
                }
                obj.conditions[condition.index].setData(condition);
                obj.conditions[condition.index].render();
            }
        };
        // 删除约束条件
        obj.removeCondition = function (index) {
            if (this.conditions != null && this.conditions.length > 0) {
                for (var i = 0; i < this.conditions.length; i++) {
                    var condition = this.conditions[i];
                    if (condition != null) {
                        if (parseInt(condition.index) === parseInt(index)) {
                            condition.clear();
                            this.conditions[condition.index].setData(condition);
                        }
                    }
                }
            }
        };
        // 清除约束条件的图形
        obj.removeGCondition = function () {
            var list = this.conditions;
            var length = list.length;
            if (list != null && length > 0) {
                for (var i = 0; i < length; i++) {
                    if (list[i].remove != null) list[i].remove();
                }
            }
        };
        //是否显示区域
        obj.isFeasibleRegionDisplay = function () {
            if (this.conditions != null && this.conditions.length > 0) {
                for (var i = 0; i < this.conditions.length; i++) {
                    var condition = this.conditions[i];
                    if (!condition.isShow) {
                        return false;
                    }
                }
            }
            return true;
        };
        // 显示和隐藏约束条件
        obj.show = function (i) {
            var condition = this.conditions[i];
            if (condition != null) {
                condition.showOrHide();
            }
        };
        obj.showSingleCondition = function (i) {
            var condition = this.conditions[i];
            if (condition != null) {
                condition.showGraph();
            }
        };
        obj.hideSingleCondition = function (i) {
            var condition = this.conditions[i];
            if (condition != null) {
                condition.hideGraph();
            }
        };
        // 显示和隐藏约束条件
        obj.showOrHideCondition = function (i) {
            var condition = this.conditions[i];
            if (condition != null) {
                condition.showOrHide();
            }
            //this.clearObjectiveFunction();
        };
        obj.showAllCondition = function () {
            var condition = this.conditions;
            for (var i = 0; i < this.conditions.length; i++) {
                var condition = this.conditions[i];
                if (!Utils.business.checkCondition(condition)) {
                    continue;
                }
                condition.showGraph();
            }
        };
        // 是否显示的约束条件
        obj.isShowCondition = function (i) {
            var condition = this.conditions[i];
            if (condition != null) {
                return condition.isShow;
            }
            return false;
        };
        // 隐藏约束条件
        obj.hideCondition = function () {
            for (var i = 0; i < this.conditions.length; i++) {
                var condition = this.conditions[i];
                if (!Utils.business.checkCondition(condition)) {
                    continue;
                }
                condition.hideRegion();
            }
        };
        // 隐藏约束条件
        obj.showCondition = function () {
            for (var i = 0; i < this.conditions.length; i++) {
                var condition = this.conditions[i];
                if (!Utils.business.checkCondition(condition)) {
                    continue;
                }
                condition.showRegion();
            }
        };
        // 是否重复的交点
        obj.isExistRepeatPoint = function (point) {
            for (var i = 0; i < this.inters.length; i++) {
                var inter = this.inters[i];
                if (inter.point.x === point.x && inter.point.y === point.y) {
                    return true;
                }
            }
            return false;
        };
        // 渲染交点
        obj.renderInters = function () {
            var count = this.getRenderConditionCount();
            if (count <= 1) return;

            var isHideCondition = this.isHideCondition();
            if (isHideCondition) return;

            if (this.inters != null && this.feasibleRegion != null && this.tags != null) {
                if (this.feasibleRegion.isShow) {
                    this.hideIntersAction();
                } else {
                    this.showIntersAction();
                }
            } else {
                this.addIntersAction();
            }
        };
        obj.addIntersAction = function () {
            this.addInters();
            this.addTags();
            this.addFeasibleRegion();
            this.showCondition();
        };
        obj.showIntersAction = function () {
            this.showInters();
            this.showTags();
            this.showFeasibleRegion();
            this.showCondition();
        };

        obj.hideIntersAction = function () {
            this.hideInters();
            this.hideTags();
            this.hideFeasibleRegion();
            this.showCondition();
        };
        obj.clearIntersAction = function () {
            this.clearInters();
            this.clearTags();
            this.clearFeasibleRegion();
        };
        // 隐藏目标函数
        obj.hideObjectiveFunction = function () {
            if (this.objectiveFunction != null) {
                this.objectiveFunction.hide();
            }
        };
        // 显示目标函数
        obj.showObjectiveFunction = function () {
            if (this.objectiveFunction != null) {
                this.objectiveFunction.show();
            }
        };
        // 显示交点
        obj.showInters = function () {
            if (this.inters != null && this.inters.length > 0) {
                for (var i = 0; i < this.inters.length; i++) {
                    this.inters[i].show();
                }
            }
        };
        // 显示交点标签
        obj.showTags = function () {
            if (this.tags != null && this.tags.length > 0) {
                for (var i = 0; i < this.tags.length; i++) {
                    this.tags[i].show();
                }
            }
        };
        // 隐藏交点
        obj.hideInters = function () {
            if (this.inters != null && this.inters.length > 0) {
                for (var i = 0; i < this.inters.length; i++) {
                    this.inters[i].hide();
                }
            }
        };
        // 隐藏交点标签
        obj.hideTags = function () {
            if (this.tags != null && this.tags.length > 0) {
                for (var i = 0; i < this.tags.length; i++) {
                    this.tags[i].hide();
                }
            }
        };
        // 排序
        obj.sortInters = function (pointA, pointB, pointCenter) {
            if (pointA.x >= 0 && pointB.x < 0) return true;
            if (pointA.x == 0 && pointB.x == 0) return pointA.y > pointB.y;

            var det = (pointA.x - pointCenter.x) * (pointB.y - pointCenter.y) - (pointB.x - pointCenter.x) * (pointA.y - pointCenter.y);
            if (det < 0) return true;

            if (det > 0) return false;
            var d1 = (pointA.x - pointCenter.x) * (pointA.x - pointCenter.x) + (pointA.y - pointCenter.y) * (pointA.y - pointCenter.y);
            var d2 = (pointB.x - pointCenter.x) * (pointB.x - pointCenter.x) + (pointB.y - pointCenter.y) * (pointB.y - pointCenter.y);
            return d1 > d2;
        };
        obj.sorts = function (inters) {
            for (var i = 0; i < inters.length - 1; i++) {
                for (var j = 1; j < inters.length - i - 1; j++) {
                    if (obj.sortInters(inters[j], inters[j + 1], new Point(0, 0))) {
                        var tmp = inters[j];
                        inters[j] = inters[j + 1];
                        inters[j + 1] = tmp;
                    }
                }
            }
        };
        // 交点的Point
        obj.getInterPoints = function () {
            var points = [];
            if (this.conditions != null && this.conditions.length > 0) {
                var index = 0;
                var boxPath = "";
                for (var i = 0; i < this.conditions.length; i++) {
                    var condition1 = this.conditions[i];
                    if (!Utils.business.checkCondition(condition1)) {
                        continue;
                    }
                    if (index == 0) {
                        boxPath = condition1.region.getFractionPath();
                        index++;
                        continue;
                    }

                    var linePath = condition1.getFractionPath();
                    var regions = Utils.coordinate.getSplitRegions(linePath, boxPath);

                    if (regions.regionA != null && regions.regionA.length > 0) {
                        var centerPoint1 = Snap.getCenter(regions.regionA);
                        if (isNaN(centerPoint1.x) || isNaN(centerPoint1.y)) {
                            continue;
                        };
                        var point1 = Utils.coordinate.convertCoordinate(centerPoint1.x, centerPoint1.y);
                        var number1 = Utils.express.condition(point1.x, point1.y, condition1.a, condition1.b, condition1.c);
                        var symbol1 = Utils.symbol(condition1.symbol, number1.toBigNumber().toNumber());
                        if (symbol1 === condition1.symbol) {
                            points = regions.regionA;
                        } else {
                            points = null;
                        }
                        if (points == null || points.length == 0) {
                            if (regions.regionB != null && regions.regionB.length > 0) {
                                var centerPoint2 = Snap.getCenter(regions.regionB);
                                if (isNaN(centerPoint2.x) || isNaN(centerPoint2.y)) {
                                    continue;
                                };
                                var point2 = Utils.coordinate.convertCoordinate(centerPoint2.x, centerPoint2.y);
                                var number2 = Utils.express.condition(point2.x, point2.y, condition1.a, condition1.b, condition1.c);
                                var symbol2 = Utils.symbol(condition1.symbol, number2.toBigNumber().toNumber());
                                if (symbol2 === condition1.symbol) {
                                    points = regions.regionB;
                                }
                            }
                        }
                        boxPath = Snap.getFractionClosePath(points);
                    }

                    index++;
                }
            }
            return points;
        };
        obj.getConvertInterPoints = function (points) {
            var results = [];
            if (points != null && points.length > 0) {
                for (var i = 0; i < points.length; i++) {
                    var point = points[i];
                    if (point.x === "0" || point.y === "0" || F(point.x).toBigNumber().toNumber() === Scene.width || F(point.y).toBigNumber().toNumber() === Scene.height) {
                        continue;
                    }
                    var coordinatePoint = Utils.coordinate.convertCoordinate(point.x, point.y);
                    results.push(coordinatePoint);
                }
            }
            return results;
        };
        // 添加交点
        obj.addInters = function () {
            if (this.conditions != null && this.conditions.length > 0) {
                this.feasibleRegion = this.conditions[0].region;
                var points = obj.getInterPoints();

                var newRegion = new FeasibleRegion(points, "#e06313");
                this.feasibleRegion = newRegion;
                if (this.feasibleRegion != null && this.feasibleRegion.points != null) {
                    var points = this.feasibleRegion.points.unique();
                    for (var i = 0; i < points.length; i++) {
                        var point = points[i];
                        if (point.x === "0" || point.y === "0" || F(point.x).toBigNumber().toNumber() === Scene.width || F(point.y).toBigNumber().toNumber() === Scene.height) {
                            continue;
                        }
                        var isDotted = obj.getIsDoottedInter(point);
                        var inter = new Inter(point, i, isDotted);
                        inter.render();
                        this.inters.push(inter);
                    }
                }
            }
        };
        obj.getIsDoottedInter = function (point) {
            for (var i = 0; i < this.conditions.length; i++) {
                var condition = this.conditions[i];
                if (Utils.business.checkCondition(condition)) {
                    var isPointInSegment = Snap.isPointInSegment(point, condition.points[0], condition.points[1]);
                    if (isPointInSegment) {
                        if (condition.isDotted) {
                            return true;
                        }
                    }
                }
            }
            return false;
        };
        //最大整数解
        obj.maxIntSolution = function () {
            if (this.objectiveFunction != null) {
                this.objectiveFunction.maxIntSolution();
            }
        };
        //最大整数解
        obj.minIntSolution = function () {
            if (this.objectiveFunction != null) {
                this.objectiveFunction.minIntSolution();
            }
        };
        // 取消最小整数解
        obj.cancelMinIntSolution = function () {
            if (this.objectiveFunction != null) {
                this.objectiveFunction.cancelMinIntSolution();
            }
        };
        // 取消最大整数解
        obj.cancelMaxIntSolution = function () {
            if (obj.objectiveFunction != null) {
                this.objectiveFunction.cancelMaxIntSolution();
            }
        };
        // 删除交点
        obj.clearInters = function () {
            if (this.inters != null && this.inters.length > 0) {
                for (var i = 0; i < this.inters.length; i++) {
                    this.inters[i].clear();
                }
            }
            this.inters = [];
        };
        //渲染标签
        obj.renderTags = function () {
            this.clearTags();
            this.addTags();
        };
        //添加标签
        obj.addTags = function () {
            if (this.conditions != null && this.conditions.length > 0) {
                for (var i = 0; i < this.inters.length; i++) {
                    var inter = this.inters[i];
                    var tag = new Tag(i, inter.point);
                    tag.setFeasibleRegion(this.feasibleRegion);
                    tag.render();
                    this.tags.push(tag);
                }
            }
            this.resetTagPostion();
        };
        //重置标签位置
        obj.resetTagPostion = function () {
            for (var i = 0; i < this.tags.length; i++) {
                var tag = this.tags[i];
                var point = tag.getTagPosition();
                tag.updatePosition(point);
            }
        };
        obj.updateTagPosition = function (data) {
            for (var i = 0; i < data.tags.length; i++) {
                var tag = this.tags[i];
                tag.updatePosition(data.tags[i].point);
            }
        };
        obj.updateConditionTagPosition = function () {
            Utils.business.updateConditionTagPosition(this.conditions);
        };
        // 渲染可行域
        obj.renderFeasibleRegion = function () {
            this.clearFeasibleRegion();
            this.addFeasibleRegion();
        };
        // 添加可行域
        obj.addFeasibleRegion = function () {
            if (this.feasibleRegion != null) {
                this.feasibleRegion.render();
            }
        };
        // 显示可行域
        obj.showFeasibleRegion = function () {
            if (this.feasibleRegion != null) {
                this.feasibleRegion.show();
            }
        };
        // 隐藏可行域
        obj.hideFeasibleRegion = function () {
            if (this.feasibleRegion != null) {
                this.feasibleRegion.hide();
            }
        };
        // 清除svg所有元素
        obj.clear = function () {
            this.clearCondition();
            this.clearObjectiveFunction();
            this.clearFeasibleRegion();
            this.clearInters();
            this.clearTags();
        };
        // 清除约束条件
        obj.clearCondition = function () {
            var list = this.conditions;
            var length = list.length;
            if (list != null && length > 0) {
                for (var i = 0; i < length; i++) {
                    list[i].clear();
                }
            }
        };
        // 清除目标函数
        obj.clearObjectiveFunction = function () {
            if (this.objectiveFunction != null) {
                this.objectiveFunction.cancelAllHighlight();
                this.objectiveFunction.clear();
            }
        };
        //清除Tags
        obj.clearTags = function () {
            if (this.tags != null && this.tags.length > 0) {
                for (var i = 0; i < this.tags.length; i++) {
                    this.tags[i].clear();
                }
            }
            this.tags = [];
        };
        // 只清除区域
        obj.clearFeasibleRegion = function () {
            if (this.feasibleRegion != null) {
                this.feasibleRegion.clear();
                this.feasibleRegion = null;
            }
        };
        // 清除（除约束条件）
        obj.clearNotCondition = function () {
            this.clearObjectiveFunction();
            this.clearFeasibleRegion();
            this.clearTags();
            this.clearInters();
        };
        return obj;
    }

    //Controller 控制器
    var LinearProgrammingController = {
        view: {},
        scaleY: 1,
        scaleX: 1,
        data: null,
        runTime: null,
        lang: null,
        linearPogramming: {},
        basePath: null,
        ratio: 1,
        create: function create(view, runTime) {
            var ins = Object.create(this);
            ins.runTime = runTime;
            ins.view = view;
            return ins;
        },
        zoom: function zoom(data) {
            var self = this;
            self.ratio = data.ratio;
            self.clickLinearProgrammingMain();
        },
        //获取数据
        getData: function getData() {
            return this.linearPogramming.getData();
        },
        //渲染
        render: function render(data) {
            Const.basePath = this.basePath;
            this.data = data;
            Scene.render();
            this.bindEvent();
            this.linearPogramming = new LinearPogrammingVM(this.runTime);
            this.linearPogramming.basePath = Const.basePath;
            //this.linearPogramming.init(data);
            this.linearPogramming.allocConditions();
            if (data != null) {
                this.renderView(data);
                if (data.conditions != null && data.conditions.length > 0) {
                    for (var i = 0; i < data.conditions.length; i++) {
                        this.renderConstraintConditionAction(i);
                    }
                }
                if (data.conditions != null && data.conditions.length > 0) {
                    for (var i = 0; i < data.conditions.length; i++) {
                        var item = data.conditions[i];
                        if (!Utils.business.checkCondition(item)) {
                            continue;
                        }
                        if (item.isShow) {
                            this.showConditionAction(i);
                        } else {
                            this.hideConditionAction(i);
                        }
                    }
                }
                if (data.feasibleRegion != null) {
                    this.linearPogramming.addIntersAction();
                    this.linearPogramming.resetTagPostion();
                    this.linearPogramming.updateTagPosition(data);
                    if (data.feasibleRegion.isShow) {
                        this.linearPogramming.showIntersAction();
                    } else {
                        this.linearPogramming.hideIntersAction();
                    }
                }
                this.linearPogramming.clearObjectiveFunction();
                this.setDeleteAllConditionButtonDisabled();
                this.setFeasibleRegionDisabled();
                if (data.feasibleRegion != null) {
                    this.view.condition.$feasibleRegionText.text(Lang.get("feasibleregion_hide_text"));
                } else {
                    this.view.condition.$feasibleRegionText.text(Lang.get("feasibleregion_text"));
                }
                if (data.objectiveFunction != null) {
                    this.renderObjectiveFunctionAction();
                }
                if (data.Zmax != null) {
                    if (data.Zmax.points != null && data.Zmax.points.length > 0) {
                        if (data.Zmax.points[0].x.toString().indexOf("/") > -1 || data.Zmax.points[0].y.toString().indexOf("/") > -1 || data.Zmax.points[0].x.toString().indexOf(".") > -1 || data.Zmax.points[0].y.toString().indexOf(".") > -1 || data.Zmax.numerousSolution != null && data.Zmax.numerousSolution.length > 0) {
                            this.setMaxIntSolutionCheckBoxAbled();
                        }
                    }

                    if (data.Zmax.isHighlight && data.feasibleRegion.isShow && data.Zmax.isCheck) {
                        if (data.ZmaxInt != null) {
                            this.objectiveFunctionCallbackCrossZmax(data.ZmaxInt);
                        }
                    } else if (data.Zmax.isHighlight && data.feasibleRegion.isShow && !data.Zmax.isCheck) {
                        this.objectiveFunctionCallbackCrossZmax(data.Zmax);
                    } else if (!data.Zmax.isHighlight && data.feasibleRegion.isShow && data.Zmax.isCheck) {
                        if (data.ZmaxInt != null) {
                            this.objectiveFunctionCallbackCrossZmax(data.ZmaxInt);
                        }
                    }

                    this.linearPogramming.objectiveFunction.zMax = data.Zmax;
                    this.linearPogramming.objectiveFunction.zMaxInt = data.ZmaxInt;
                }
                if (data.Zmin != null) {
                    if (data.Zmin.points != null && data.Zmin.points.length > 0) {
                        if (data.Zmin.points[0].x.toString().indexOf("/") > -1 || data.Zmin.points[0].y.toString().indexOf("/") > -1 || data.Zmin.points[0].x.toString().indexOf(".") > -1 || data.Zmin.points[0].y.toString().indexOf(".") > -1 || data.Zmin.numerousSolution != null && data.Zmin.numerousSolution.length > 0) {
                            this.setMinIntSolutionCheckBoxAbled();
                        }
                    }

                    if (data.Zmin.isHighlight && data.feasibleRegion.isShow && data.Zmin.isCheck) {
                        this.view.objectiveFunction.$minIntCheck.addClass("checked");
                        if (data.ZminInt != null) {
                            this.objectiveFunctionCallbackCrossZmin(data.ZminInt);
                        }
                    } else if (data.Zmin.isHighlight && data.feasibleRegion.isShow && !data.Zmin.isCheck) {
                        this.view.objectiveFunction.$minIntCheck.removeClass("checked");
                        this.objectiveFunctionCallbackCrossZmin(data.Zmin);
                    } else if (!data.Zmin.isHighlight && data.feasibleRegion.isShow && data.Zmin.isCheck) {
                        this.view.objectiveFunction.$minIntCheck.addClass("checked");
                        if (data.ZminInt != null) {
                            this.objectiveFunctionCallbackCrossZmin(data.ZminInt);
                        }
                    }

                    this.linearPogramming.objectiveFunction.zMin = data.Zmin;
                    this.linearPogramming.objectiveFunction.zMinInt = data.ZminInt;
                }
                if (data.conditions != null && data.conditions.length > 0) {
                    for (var i = 0; i < data.conditions.length; i++) {
                        var item = data.conditions[i];
                        if (!Utils.business.checkCondition(item)) {
                            continue;
                        }
                        if (!item.isShow) {
                            this.hideConditionAction(i);
                        }
                    }
                }
            }
        },
        //渲染视图
        renderView: function renderView(data) {
            if (data != null) {
                if (data.conditions != null) {
                    for (var i = 0; i < data.conditions.length; i++) {
                        var condition = data.conditions[i];

                        this.renderConditionView(condition.a, i, 0, "x");
                        this.renderConditionView(condition.b, i, 2, "y");
                        this.renderConditionView(condition.c, i, 4, "c");
                        this.view.condition.$condition_list.find(".lp_li_item.lp_li_item" + (i + 1).toString() + " .num_input .num_input_text:eq(6)").text(condition.symbol);
                    }
                }

                if (data.objectiveFunction != null) {
                    var objectiveFunction = this.data.objectiveFunction;
                    this.view.objectiveFunction.$a.find(".num_input .num_input_text:eq(0)").text(objectiveFunction.a);
                    this.view.objectiveFunction.$b.find(".num_input .num_input_text:eq(0)").text(objectiveFunction.b);
                }
            }
        },
        renderConditionView: function renderConditionView(str, index, conditionIndex, domstr) {
            var $condition_list_item = $(this.view.condition.$condition_list.find(" .lp_li_item .lp_input_" + domstr + " .lp_drop_num ")[index]);
            this.removeFontSizeClass($condition_list_item);
            if (str.indexOf("/") > -1) {
                $condition_list_item.addClass("font_change_24");
                //负数
                if (str.indexOf("-") > -1) {
                    this.view.condition.$condition_list.find(".lp_li_item.lp_li_item" + (index + 1).toString() + this.getInputView(conditionIndex) + " .lp_fenshu_item .num_input.fuhao").removeClass("hide_dom");
                } else {
                    this.view.condition.$condition_list.find(".lp_li_item.lp_li_item" + (index + 1).toString() + this.getInputView(conditionIndex) + " .lp_fenshu_item .num_input.fuhao").addClass("hide_dom");
                }
                this.view.condition.$condition_list.find(".lp_li_item.lp_li_item" + (index + 1).toString() + this.getInputView(conditionIndex) + " .num_input .num_input_text:eq(0)").addClass("hide_dom");
                this.view.condition.$condition_list.find(".lp_li_item.lp_li_item" + (index + 1).toString() + this.getInputView(conditionIndex) + " .lp_fenshu_item").removeClass("hide_dom");
                var fenzi = str.split("/")[0].replace("-", "");
                var fenmu = str.split("/")[1];
                this.view.condition.$condition_list.find(".lp_li_item.lp_li_item" + (index + 1).toString() + this.getInputView(conditionIndex) + " .lp_fenshu_item .lp_fenshu_item_wrapper .lp_fenzi .num .num_text").text(fenzi);
                this.view.condition.$condition_list.find(".lp_li_item.lp_li_item" + (index + 1).toString() + this.getInputView(conditionIndex) + " .lp_fenshu_item .lp_fenshu_item_wrapper .lp_fenmu .num .num_text").text(fenmu);
            } else {
                var fontSizeClass = this.getFontSizeClass(str);
                $condition_list_item.addClass(fontSizeClass);

                this.view.condition.$condition_list.find(".lp_li_item.lp_li_item" + (index + 1).toString() + this.getInputView(conditionIndex) + " .lp_fenshu_item").addClass("hide_dom");
                this.view.condition.$condition_list.find(".lp_li_item.lp_li_item" + (index + 1).toString() + this.getInputView(conditionIndex) + " .num_input .num_input_text:eq(0)").removeClass("hide_dom");
                this.view.condition.$condition_list.find(".lp_li_item.lp_li_item" + (index + 1).toString() + this.getInputView(conditionIndex) + " .num_input .num_input_text:eq(0)").text(str);
            }
            this.view.condition.$condition_list.find(".lp_li_item.lp_li_item" + (index + 1).toString() + " .num_input .num_input_text:eq(" + conditionIndex + ")").text(str);
        },
        getInputView: function getInputView(conditionIndex) {
            if (conditionIndex === 0) {
                return " .lp_input_x";
            } else if (conditionIndex === 2) {
                return " .lp_input_y";
            } else if (conditionIndex === 4) {
                return " .lp_input_c";
            }
        },
        //初始化
        initView: function initView() {
            var width = this.view.$axisView.width();
            var height = this.view.$axisView.height();
            Const.scaleY = height / Const.width;
            Const.scaleX = height / Const.width;

            var svgHtml = "<svg id= 'LinearProgramming_svg' width='100%' height='100%' viewBox = '0 0 572 572' style='background-color:white'></svg>";
            this.view.$axisView.append(svgHtml);

            this.view.condition.$feasibleRegion.addClass("click_disabled");

            //var width = this.view.$svg.width();
            //var height = this.view.$svg.height();
            //LinearProgrammingController.scaleX = width/Scene.width;
            //LinearProgrammingController.scaleY = height/Scene.height;
        },
        //绑定事件
        bindEvent: function bindEvent() {
            var self = this;
            this.view.$linearProgramming_main.on("click scroll", function () {
                self.clickLinearProgrammingMain();
            });

            this.view.$scrollbar.on("click scroll", function () {
                self.clickScrollbar();
            });

            // 删除所有约束条件
            this.view.condition.$del.on("click", function () {
                self.clickDeleteAllConditions();
            });

            // A
            this.view.condition.$a.each(function (index, dom) {
                $(dom).off("click ");
                $(dom).on("click ", function () {
                    var r = 1;
                    if (self.ratio != "3/4") {
                        r = eval(self.ratio);
                    }
                    var scrollTop = self.view.$scrollbar[0].scrollTop;
                    var top = Const.top * Const.scaleY * r + index % 6 * 64 * Const.scaleY * r - scrollTop;
                    self.showSoftKeyboardNumber("a", index, top, 0);
                    self.closeSoftKeyboardInequality();
                    self.closeEyeDeleteboard();
                    self.clearConditionXYCView();
                    event.stopPropagation();
                });
            });

            // B
            this.view.condition.$b.each(function (index, dom) {
                $(dom).off("click ");
                $(dom).on("click ", function () {
                    var r = 1;
                    if (self.ratio != "3/4") {
                        r = eval(self.ratio);
                    }
                    var scrollTop = self.view.$scrollbar[0].scrollTop;
                    var top = Const.top * Const.scaleY * r + index % 6 * 64 * Const.scaleY * r - scrollTop;
                    var left = 100 * Const.scaleX * r;
                    self.showSoftKeyboardNumber("b", index, top, left);
                    self.closeSoftKeyboardInequality();
                    self.closeEyeDeleteboard();
                    self.clearConditionXYCView();
                    event.stopPropagation();
                });
            });

            // C
            this.view.condition.$c.each(function (index, dom) {
                $(dom).off("click ");
                $(dom).on("click ", function () {
                    var r = 1;
                    if (self.ratio != "3/4") {
                        r = eval(self.ratio);
                    }
                    var scrollTop = self.view.$scrollbar[0].scrollTop;
                    var top = Const.top * Const.scaleY * r + index % 6 * 64 * Const.scaleY * r - scrollTop;
                    var left = 230 * Const.scaleX * r;
                    self.showSoftKeyboardNumber("c", index, top, left);
                    self.closeSoftKeyboardInequality();
                    self.clearConditionXYCView();
                    event.stopPropagation();
                });
            });

            // S
            this.view.condition.$s.each(function (index, dom) {
                $(dom).off("click ");
                $(dom).on("click ", function () {
                    var r = 1;
                    if (self.ratio != "3/4") {
                        r = eval(self.ratio);
                    }
                    var scrollTop = self.view.$scrollbar[0].scrollTop;
                    var top = Const.top * Const.scaleY * r + index % 6 * 64 * Const.scaleY * r - scrollTop;
                    var left = 358 * Const.scaleX * r;
                    self.showSoftKeyboardInequality(index, top, left);
                    self.closeSoftKeyboardNumber();
                    self.closeEyeDeleteboard();
                    event.stopPropagation();
                });
            });

            // 显示箭头
            this.view.condition.$arrow_even.each(function (index, dom) {
                $(dom).off("click ");
                $(dom).on("click ", function () {
                    $(dom).find("+").removeClass("hide_dom");
                    self.closeSoftKeyboardInequality();
                    self.closeSoftKeyboardNumber();
                    event.stopPropagation();
                });
            });

            // 隐藏箭头
            this.view.condition.$arrow_odd.each(function (index, dom) {
                $(dom).off("click ");
                $(dom).on("click ", function () {
                    $(dom).parent().addClass("hide_dom");
                    event.stopPropagation();
                });
            });

            // 鹰眼
            this.view.condition.$arrow_eye.each(function (index, dom) {
                $(dom).off("click ");
                $(dom).on("click ", function () {
                    self.clickConditionEye(index);
                });
            });

            // 删除
            this.view.condition.$arrow_del.each(function (index, dom) {
                $(dom).off("click ");
                $(dom).on("click ", function () {
                    self.clickConditionDelete(index);
                });
            });

            //显示可行域
            this.view.condition.$feasibleRegion.off("click");
            this.view.condition.$feasibleRegion.on("click", function () {
                self.clickFeasibleRegion();
                event.stopPropagation();
            });

            // A 目标函数
            this.view.objectiveFunction.$a.off("click");
            this.view.objectiveFunction.$a.on("click", function () {
                var r = 1;
                if (self.ratio != "3/4") {
                    r = eval(self.ratio);
                }
                var top = 400 * Const.scaleY * r;
                var left = 40 * Const.scaleX * r;
                self.showSoftKeyboardNumber("a", 6, top, left);
                self.closeSoftKeyboardInequality();
                self.clearConditionXYCView();
                event.stopPropagation();
            });

            // B 目标函数
            this.view.objectiveFunction.$b.off("click");
            this.view.objectiveFunction.$b.on("click", function () {
                var r = 1;
                if (self.ratio != "3/4") {
                    r = eval(self.ratio);
                }
                var top = 400 * Const.scaleY * r;
                var left = 175 * Const.scaleX * r;
                self.showSoftKeyboardNumber("b", 6, top, left);
                self.closeSoftKeyboardInequality();
                self.clearConditionXYCView();
                event.stopPropagation();
            });

            // 删除目标函数
            this.view.objectiveFunction.$del.off("click");
            this.view.objectiveFunction.$del.on("click", function () {
                self.clickObjectiveFunctionDelete();
                event.stopPropagation();
            });

            // 软键盘 数字
            this.view.$softKeyboardNumber.find(".lp_numselect_wrap >a").each(function (index, dom) {
                $(dom).off("click");
                $(dom).on('click', function () {
                    self.clickSoftKeyboardNumber(index);
                    event.stopPropagation();
                });
            });

            // 软键盘 符号
            this.view.$softKeyboardInequality.find(".lp_numselect_wrap >a").each(function (index, dom) {
                $(dom).off("click");
                $(dom).on('click', function () {
                    self.clickSoftKeyboardInequality(index);
                    event.stopPropagation();
                });
            });

            // 整数解 最大值
            this.view.objectiveFunction.$maxIntCheck.off("click");
            this.view.objectiveFunction.$maxIntCheck.on("click", function () {
                self.clickMaxIntSolutionButton();
                event.stopPropagation();
                event.preventDefault();
            });

            // 整数解 最小值
            this.view.objectiveFunction.$minIntCheck.off("click");
            this.view.objectiveFunction.$minIntCheck.on("click", function () {
                self.clickMinIntSolutionButton();
                event.stopPropagation();
                event.preventDefault();
            });

            // 展开更多最大整数值
            this.view.objectiveFunction.$maxTriangleExpand.off("click");
            this.view.objectiveFunction.$maxTriangleExpand.on("click", function () {
                self.clickExpandMaxMulSolution();
                event.stopPropagation();
            });

            this.view.objectiveFunction.$maxMulSolution_2.off("click");
            this.view.objectiveFunction.$maxMulSolution_2.on("click", function () {
                if (!self.view.objectiveFunction.$maxTriangleExpand.hasClass("hide_dom")) {
                    self.clickExpandMaxMulSolution();
                    event.stopPropagation();
                }
            });

            // 收缩更多最大整数值
            this.view.objectiveFunction.$maxTriangleFold.off("click");
            this.view.objectiveFunction.$maxTriangleFold.on("click", function () {
                self.clickFoldMaxMulSolution();
                event.stopPropagation();
            });

            //展开更最小整数值
            this.view.objectiveFunction.$minTriangleExpand.off("click");
            this.view.objectiveFunction.$minTriangleExpand.on("click", function () {
                self.clickExpandMinMulSolution();
                event.stopPropagation();
            });

            this.view.objectiveFunction.$minMulSolution_2.off("click");
            this.view.objectiveFunction.$minMulSolution_2.on("click", function () {
                if (!self.view.objectiveFunction.$minTriangleExpand.hasClass("hide_dom")) {
                    self.clickExpandMinMulSolution();
                    event.stopPropagation();
                }
            });

            // 收缩更多最小整数值
            this.view.objectiveFunction.$minTriangleFold.off("click");
            this.view.objectiveFunction.$minTriangleFold.on("click", function () {
                self.clickFoldMinMulSolution();
                event.stopPropagation();
            });

            this.view.objectiveFunction.$maxMulSolutionItem.off("click");
            this.view.objectiveFunction.$maxMulSolutionItem.on("click", function () {
                if (!self.view.objectiveFunction.$maxTriangleExpand.hasClass("hide_dom")) {
                    self.clickExpandMaxMulSolution();
                    event.stopPropagation();
                }
            });

            this.view.objectiveFunction.$minMulSolutionItem.off("click");
            this.view.objectiveFunction.$minMulSolutionItem.on("click", function () {
                if (!self.view.objectiveFunction.$minTriangleExpand.hasClass("hide_dom")) {
                    self.clickExpandMinMulSolution();
                    event.stopPropagation();
                }
            });
        },
        //点击 滚动Main区域事件
        clickLinearProgrammingMain: function clickLinearProgrammingMain() {
            this.closeSoftKeyboardNumber();
            this.closeSoftKeyboardInequality();
            this.closeEyeDeleteboard();
            this.clickFoldMaxMulSolution();
            this.clickFoldMinMulSolution();
        },
        //点击 滚动
        clickScrollbar: function clickScrollbar() {
            this.closeSoftKeyboardNumber();
            this.closeSoftKeyboardInequality();
        },
        //点击删除所有约束条件
        clickDeleteAllConditions: function clickDeleteAllConditions() {
            this.clearAllCondition();
        },
        //点击一条约束条件的鹰眼按钮
        clickConditionEye: function clickConditionEye(index) {
            this.showOrHideCondition(index);
        },
        //点击一条约束条件的删除按钮
        clickConditionDelete: function clickConditionDelete(index) {
            this.removeConditionAction(index);
        },
        //点击可行域
        clickFeasibleRegion: function clickFeasibleRegion() {
            this.linearPogramming.renderInters();
            this.linearPogramming.clearObjectiveFunction();
            if (this.linearPogramming.objectiveFunction != null) {
                this.renderObjectiveFunctionAction();
            }
            this.setNumerousSolutionView();
            this.setFeasibleRegionText();
        },
        //点击目标函数的删除按钮
        clickObjectiveFunctionDelete: function clickObjectiveFunctionDelete() {
            if (!this.view.objectiveFunction.$del.hasClass("click_disabled")) {
                this.clearObjectiveFunctionView();
                this.clearObjectiveFunction();
                this.setIntSolutionCheckBoxDisabled();
            }
        },
        clearConditionXYCView: function clearConditionXYCView() {
            var self = this;
            this.view.condition.$a.each(function (index, dom) {
                var text = $(dom).find(".num_input .num_input_text:eq(0)").text();
                if (text == "") {
                    $(dom).find(".num_input .num_input_text:eq(0)").text("a");
                }
                var fontSizeClass = self.getFontSizeClass(text);
                $(dom).addClass(fontSizeClass);
            });
            this.view.condition.$b.each(function (index, dom) {
                var text = $(dom).find(".num_input .num_input_text:eq(0)").text();
                if (text == "") {
                    $(dom).find(".num_input .num_input_text:eq(0)").text("b");
                }
                var fontSizeClass = self.getFontSizeClass(text);
                $(dom).addClass(fontSizeClass);
            });

            this.view.condition.$c.each(function (index, dom) {
                var text = $(dom).find(".num_input .num_input_text:eq(0)").text();
                if (text == "") {
                    $(dom).find(".num_input .num_input_text:eq(0)").text("c");
                }
                var fontSizeClass = self.getFontSizeClass(text);
                $(dom).addClass(fontSizeClass);
            });

            var textA = this.view.objectiveFunction.$a.find(".num_input .num_input_text:eq(0)").text();
            if (textA == "") {
                this.view.objectiveFunction.$a.find(".num_input .num_input_text:eq(0)").text("a");
                textA = this.view.objectiveFunction.$a.find(".num_input .num_input_text:eq(0)").text();
                var fontSizeClass = self.getFontSizeClass(textA);
                this.view.objectiveFunction.$a.addClass(fontSizeClass);
            }

            var textB = this.view.objectiveFunction.$b.find(".num_input .num_input_text:eq(0)").text();
            if (textB == "") {
                this.view.objectiveFunction.$b.find(".num_input .num_input_text:eq(0)").text("b");
                textB = this.view.objectiveFunction.$b.find(".num_input .num_input_text:eq(0)").text();
                var fontSizeClass = self.getFontSizeClass(textB);
                this.view.objectiveFunction.$b.addClass(fontSizeClass);
            }
        },
        eachClickSoftKeyboardNumber: function eachClickSoftKeyboardNumber(index) {
            for (var i = 0; i < 6; i++) {
                this.clickSoftKeyboardNumber(index);
            }
        },
        //点击软键盘数字
        clickSoftKeyboardNumber: function clickSoftKeyboardNumber(index) {
            var domIndexArray = SoftKeyboard.domIndex.split("_");
            var domName = domIndexArray[0];
            var conditionIndex = domIndexArray[1];
            var conditionDom = this.getConditionDom(domName, conditionIndex);
            this.inputSoftKeyboardNumber(conditionDom, index);
            this.renderGraphicsAction(domName, conditionIndex);
            //this.renderConstraintConditionAllAction();
            this.changeTextFontSize(conditionDom);
        },
        //点击软键盘符号
        clickSoftKeyboardInequality: function clickSoftKeyboardInequality(index) {
            var domIndexArray = SoftKeyboard.domIndex.split("_");
            var domName = domIndexArray[0];
            var conditionIndex = domIndexArray[1];
            var conditionDom = this.view.condition.$s[conditionIndex];
            this.inputSoftKeyboardInequality(conditionDom, index);
            //this.renderConstraintConditionAction(conditionIndex);
            this.renderGraphicsAction(domName, conditionIndex);
            //this.renderConstraintConditionAllAction();
            this.changeTextFontSize(conditionDom);
        },
        //点击最大整数解
        clickMaxIntSolutionButton: function clickMaxIntSolutionButton() {
            this.view.objectiveFunction.$max.text("");
            this.view.objectiveFunction.$maxPointX.html("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;");
            this.view.objectiveFunction.$maxPointComma.html("&nbsp;,");
            this.view.objectiveFunction.$maxPointY.html("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;");
            this.view.objectiveFunction.$maxTriangleExpand.addClass("hide_dom");
            this.view.objectiveFunction.$maxMulSolution.addClass("hide_dom");
            this.view.objectiveFunction.$maxTriangleFold.before("");
            this.view.objectiveFunction.$maxNumerousSolution.addClass("hide_dom");

            if (this.view.objectiveFunction.$maxIntCheck.hasClass("checked")) {
                this.view.objectiveFunction.$maxIntCheck.removeClass("checked");
                this.clickCancelMaxIntSolution();
            } else {
                this.view.objectiveFunction.$maxIntCheck.addClass("checked");
                this.clickMaxIntSolution();
            }
        },
        clickCancelMaxIntSolution: function clickCancelMaxIntSolution() {
            this.linearPogramming.cancelMaxIntSolution();
        },
        clickMaxIntSolution: function clickMaxIntSolution() {
            this.linearPogramming.maxIntSolution();
        },
        //点击最小整数解
        clickMinIntSolutionButton: function clickMinIntSolutionButton() {
            this.view.objectiveFunction.$min.text("");
            this.view.objectiveFunction.$minPointX.html("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;");
            this.view.objectiveFunction.$minPointComma.html("&nbsp;,");
            this.view.objectiveFunction.$minPointY.html("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;");

            this.view.objectiveFunction.$minTriangleFold.before("");
            this.view.objectiveFunction.$minTriangleExpand.addClass("hide_dom");
            this.view.objectiveFunction.$minMulSolution.addClass("hide_dom");
            this.view.objectiveFunction.$minNumerousSolution.addClass("hide_dom");

            if (this.view.objectiveFunction.$minIntCheck.hasClass("checked")) {
                this.view.objectiveFunction.$minIntCheck.removeClass("checked");
                this.clickCancelMinIntSolution();
            } else {
                this.view.objectiveFunction.$minIntCheck.addClass("checked");
                this.clickMinIntSolution();
            }
        },
        clickCancelMinIntSolution: function clickCancelMinIntSolution() {
            this.linearPogramming.cancelMinIntSolution();
        },
        clickMinIntSolution: function clickMinIntSolution() {
            this.linearPogramming.minIntSolution();
        },
        // 展开更多最大整数值
        clickExpandMaxMulSolution: function clickExpandMaxMulSolution() {
            this.view.objectiveFunction.$maxMulSolution.removeClass("hide_dom");
        },
        // 收缩更多最大整数值
        clickFoldMaxMulSolution: function clickFoldMaxMulSolution() {
            this.view.objectiveFunction.$maxMulSolution.addClass("hide_dom");
        },
        //展开更最小整数值
        clickExpandMinMulSolution: function clickExpandMinMulSolution() {
            this.view.objectiveFunction.$minMulSolution.removeClass("hide_dom");
        },
        // 收缩更多最小整数值
        clickFoldMinMulSolution: function clickFoldMinMulSolution() {
            this.view.objectiveFunction.$minMulSolution.addClass("hide_dom");
        },
        //输入软键盘的数字
        inputSoftKeyboardNumber: function inputSoftKeyboardNumber(conditionDom, index) {
            var self = this;
            SoftKeyboard.value = Const.number[index];
            SoftKeyboard.op = Const.op[index];
            SoftKeyboard.callback = function () {
                self.closeSoftKeyboard();
            };
            SoftKeyboard.view = conditionDom;
            SoftKeyboard.number();
        },
        //输入软键盘的符号
        inputSoftKeyboardInequality: function inputSoftKeyboardInequality(conditionDom, index) {
            var self = this;
            SoftKeyboard.value = Const.sign[index];
            SoftKeyboard.op = Const.signOp[index];
            SoftKeyboard.callback = function () {
                self.closeSoftKeyboard();
            };
            SoftKeyboard.view = conditionDom;
            SoftKeyboard.inequality();
        },
        //显示数字键盘
        showSoftKeyboardNumber: function showSoftKeyboardNumber(letter, index, top, left) {
            var domIndex = letter + "_" + index;
            this.view.$softKeyboardInequality.addClass("hide_dom");
            this.view.$softKeyboardNumber.removeClass("hide_dom");
            this.view.$softKeyboardNumber.css({ top: top + "px", left: left + "px", position: "absolute" });
            this.view.$softKeyboardNumber.attr({ "domIndex": domIndex });
            SoftKeyboard.domIndex = domIndex;
            SoftKeyboard.isStart = true;
        },
        //显示符号键盘
        showSoftKeyboardInequality: function showSoftKeyboardInequality(index, top, left) {
            var domIndex = "s_" + index;
            this.view.$softKeyboardNumber.addClass("hide_dom");
            this.view.$softKeyboardInequality.removeClass("hide_dom");
            this.view.$softKeyboardInequality.css({ top: top + "px", left: left + "px", position: "absolute" });
            this.view.$softKeyboardInequality.attr({ "domIndex": domIndex });
            SoftKeyboard.domIndex = domIndex;
            SoftKeyboard.isStart = true;
        },
        // 关闭数字软键盘
        closeSoftKeyboardNumber: function closeSoftKeyboardNumber() {
            this.clearConditionXYCView();
            this.view.$softKeyboardNumber.addClass("hide_dom");
        },
        // 关闭操作符软键盘
        closeSoftKeyboardInequality: function closeSoftKeyboardInequality() {
            this.clearConditionXYCView();
            this.view.$softKeyboardInequality.addClass("hide_dom");
        },
        // 关闭鹰眼，删除面板
        closeEyeDeleteboard: function closeEyeDeleteboard() {
            this.view.condition.$arrow_box.each(function (index, dom) {
                $(dom).addClass("hide_dom");
            });
        },
        // 关闭软键盘
        closeSoftKeyboard: function closeSoftKeyboard() {
            this.closeSoftKeyboardNumber();
            this.closeSoftKeyboardInequality();
        },
        //获取约束条件的Dom对象
        getConditionDom: function getConditionDom(domName, conditionIndex) {
            var conditionDom;
            if (domName === "a") {
                conditionDom = this.view.condition.$a[conditionIndex];
                if (conditionIndex == 6) {
                    conditionDom = this.view.objectiveFunction.$a;
                }
            } else if (domName === "b") {
                conditionDom = this.view.condition.$b[conditionIndex];
                if (conditionIndex == 6) {
                    conditionDom = this.view.objectiveFunction.$b;
                }
            } else {
                conditionDom = this.view.condition.$c[conditionIndex];
            }
            return conditionDom;
        },
        //渲染图形
        renderGraphicsAction: function renderGraphicsAction(domName, conditionIndex) {
            if (domName === "a") {
                if (conditionIndex == 6) {
                    this.renderObjectiveFunctionAction();
                    return;
                }
            } else if (domName === "b") {
                if (conditionIndex == 6) {
                    this.renderObjectiveFunctionAction();
                    return;
                }
            }
            this.renderConstraintConditionAction(conditionIndex);
        },
        changeTextFontSize: function changeTextFontSize(conditionDom) {
            var text = $(conditionDom).find(".num_input .num_input_text:eq(0)").text();
            var fontSizeClass = this.getFontSizeClass(text);
            this.removeFontSizeClass(conditionDom);
            $(conditionDom).addClass(fontSizeClass);
        },
        //清空目标函数View
        clearObjectiveFunctionView: function clearObjectiveFunctionView() {

            this.view.objectiveFunction.$a.find(".lp_fenshu_item .lp_fenzi .num .num_text").text("");
            this.view.objectiveFunction.$a.find(".lp_fenshu_item .lp_fenmu .num .num_text").text("");
            this.view.objectiveFunction.$a.find(".lp_fenshu_item").addClass("hide_dom");
            this.view.objectiveFunction.$a.find(".num_input .num_input_text:eq(0)").text("a");
            this.view.objectiveFunction.$a.find(".num_input .num_input_text:eq(0)").removeClass("hide_dom");
            this.view.objectiveFunction.$a.removeClass("font_change_48");
            this.view.objectiveFunction.$a.removeClass("font_change_40");
            this.view.objectiveFunction.$a.removeClass("font_change_34");
            this.view.objectiveFunction.$a.removeClass("font_change_24");

            this.view.objectiveFunction.$b.find(".lp_fenshu_item .lp_fenzi .num .num_text").text("");
            this.view.objectiveFunction.$b.find(".lp_fenshu_item .lp_fenmu .num .num_text").text("");
            this.view.objectiveFunction.$b.find(".lp_fenshu_item").addClass("hide_dom");
            this.view.objectiveFunction.$b.find(".num_input .num_input_text:eq(0)").text("b");
            this.view.objectiveFunction.$b.find(".num_input .num_input_text:eq(0)").removeClass("hide_dom");
            this.view.objectiveFunction.$b.removeClass("font_change_48");
            this.view.objectiveFunction.$b.removeClass("font_change_40");
            this.view.objectiveFunction.$b.removeClass("font_change_34");
            this.view.objectiveFunction.$b.removeClass("font_change_24");

            this.view.objectiveFunction.$del.addClass("click_disabled");
            this.clearMaxObjectiveFunctionView();
            this.clearMinObjectiveFunctionView();
        },
        // 设置可行域的disabled
        setDeleteAllConditionButtonDisabled: function setDeleteAllConditionButtonDisabled() {
            var renderCount = this.linearPogramming.getRenderConditionCount();
            if (renderCount <= 0) {
                this.view.condition.$del.addClass("click_disabled");
            } else {
                this.view.condition.$del.removeClass("click_disabled");
            }
        },
        // 设置可行域的disabled
        setEyeAllConditionButtonDisabled: function setEyeAllConditionButtonDisabled() {
            this.linearPogramming.showAllCondition();
            this.view.condition.$condition_list.find(".lp_li_item .lp_icon_eye_box ").removeClass("change_hide");
        },
        // 设置可行域的disabled
        setFeasibleRegionDisabled: function setFeasibleRegionDisabled() {
            var points = this.linearPogramming.getInterPoints();
            var isHideCondition = this.linearPogramming.isHideCondition();
            if (points != null && points.length > 0 && isHideCondition == false) {
                this.view.condition.$feasibleRegion.removeClass("click_disabled");
            } else {
                this.view.condition.$feasibleRegion.addClass("click_disabled");
            }
        },
        // 重置可行域文本内容
        setFeasibleRegionTextInitState: function setFeasibleRegionTextInitState() {

            this.view.condition.$feasibleRegionText.text(Lang.get("feasibleregion_text"));
        },
        // 设置可行域文本内容
        setFeasibleRegionText: function setFeasibleRegionText() {
            if (!this.view.condition.$feasibleRegion.hasClass("click_disabled")) {
                if (this.view.condition.$feasibleRegionText.text() == Lang.get("feasibleregion_text")) {
                    this.view.condition.$feasibleRegionText.text(Lang.get("feasibleregion_hide_text"));
                } else {
                    this.view.condition.$feasibleRegionText.text(Lang.get("feasibleregion_text"));
                }
            }
        },
        // 设置鹰眼
        setEyeView: function setEyeView(index, isShow) {
            if (isShow) {
                this.view.condition.$condition_list.find(".lp_li_item.lp_li_item" + (parseInt(index) + 1) + " .lp_icon_eye_box ").removeClass("change_hide");
            } else {
                this.view.condition.$condition_list.find(".lp_li_item.lp_li_item" + (parseInt(index) + 1) + " .lp_icon_eye_box ").addClass("change_hide");
            }
        },
        // 重置最优解
        setNumerousSolutionView: function setNumerousSolutionView() {
            this.view.objectiveFunction.$maxNumerousSolution.addClass("hide_dom");
            this.view.objectiveFunction.$minNumerousSolution.addClass("hide_dom");
            this.view.objectiveFunction.$maxBracket.removeClass("hide_dom");
            this.view.objectiveFunction.$minBracket.removeClass("hide_dom");
        },
        //重置整数解checkBox
        setIntSolutionCheckBoxDisabled: function setIntSolutionCheckBoxDisabled() {
            this.setMaxIntSolutionCheckBoxDisabled();
            this.setMinIntSolutionCheckBoxDisabled();
        },
        //重置整数解checkBox
        setMaxIntSolutionCheckBoxDisabled: function setMaxIntSolutionCheckBoxDisabled() {
            this.view.objectiveFunction.$maxIntCheck.addClass("click_disabled");
        },
        //重置整数解checkBox
        setMinIntSolutionCheckBoxDisabled: function setMinIntSolutionCheckBoxDisabled() {
            this.view.objectiveFunction.$minIntCheck.addClass("click_disabled");
        },
        setIntSolutionCheckBoxAbled: function setIntSolutionCheckBoxAbled() {
            this.setMaxIntSolutionCheckBoxAbled();
            this.setMinIntSolutionCheckBoxAbled();
        },
        setMaxIntSolutionCheckBoxAbled: function setMaxIntSolutionCheckBoxAbled() {
            this.view.objectiveFunction.$maxIntCheck.removeClass("click_disabled");
        },
        setMinIntSolutionCheckBoxAbled: function setMinIntSolutionCheckBoxAbled() {
            this.view.objectiveFunction.$minIntCheck.removeClass("click_disabled");
        },
        setObjectiveFunctionDeleteDisabled: function setObjectiveFunctionDeleteDisabled() {
            this.view.objectiveFunction.$del.removeClass("click_disabled");
        },
        //获取文本使用的字体
        getFontSizeClass: function getFontSizeClass(text) {
            if (text != null) {
                if (text.indexOf("/") > -1) {
                    return "font_change_24";
                } else {
                    if (text.length == 4) {
                        return "font_change_40";
                    } else if (text.length > 4) {
                        return "font_change_34";
                    } else {
                        if (text == "a" || text == "b" || text == "c") {
                            return "font_change_40";
                        } else {
                            return "font_change_48";
                        }
                    }
                }
            } else {
                return "font_change_48";
            }
        },
        removeFontSizeClass: function removeFontSizeClass(dom) {
            $(dom).removeClass("font_change_24");
            $(dom).removeClass("font_change_48");
            $(dom).removeClass("font_change_40");
            $(dom).removeClass("font_change_34");
        },
        //清除目标函数的最大值视图
        clearMaxObjectiveFunctionView: function clearMaxObjectiveFunctionView() {
            this.view.objectiveFunction.$max.removeClass("hide_dom");
            this.view.objectiveFunction.$max.text("");
            this.view.objectiveFunction.$max_fenshu.addClass("hide_dom");
            this.view.objectiveFunction.$max_fz.text("");
            this.view.objectiveFunction.$max_fm.text("");

            this.view.objectiveFunction.$maxPointX.removeClass("hide_dom");
            this.view.objectiveFunction.$maxPointX.html("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;");
            this.view.objectiveFunction.$maxPointX_fenshu.addClass("hide_dom");
            this.view.objectiveFunction.$maxPointX_fz.text("");
            this.view.objectiveFunction.$maxPointX_fm.text("");

            this.view.objectiveFunction.$maxPointY.removeClass("hide_dom");
            this.view.objectiveFunction.$maxPointY.html("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;");
            this.view.objectiveFunction.$maxPointY_fenshu.addClass("hide_dom");
            this.view.objectiveFunction.$maxPointY_fz.text("");
            this.view.objectiveFunction.$maxPointY_fm.text("");

            var html = "";
            html += '<div class="lp_bracket_box text_box"><span class="txt"></span>';
            html += '<span class="txt" style="font-weight:normal">,</span>';
            html += '<span class="txt"></span></div>';
            this.view.objectiveFunction.$maxTriangleExpand.addClass("hide_dom");
            this.view.objectiveFunction.$maxMulSolution_1.html(html);
            this.view.objectiveFunction.$maxMulSolution.addClass("hide_dom");
            this.view.objectiveFunction.$maxIntCheck.removeClass("checked");
            this.view.objectiveFunction.$max_solution1.removeClass("font_change_24");
            this.view.objectiveFunction.$max_solution1.removeClass("font_change_32");
            this.view.objectiveFunction.$max_solution1.addClass("font_change_45");
            this.view.objectiveFunction.$max_solution2.removeClass("font_change_24");
            this.view.objectiveFunction.$max_solution2.removeClass("font_change_32");
            this.view.objectiveFunction.$max_solution2.addClass("font_change_45");
            this.view.objectiveFunction.$maxNumerousSolution.addClass("hide_dom");
            this.view.objectiveFunction.$maxBracket.removeClass("hide_dom");
        },
        //清除目标函数的最小值视图
        clearMinObjectiveFunctionView: function clearMinObjectiveFunctionView() {
            this.view.objectiveFunction.$min.removeClass("hide_dom");
            this.view.objectiveFunction.$min.text("");
            this.view.objectiveFunction.$min_fenshu.addClass("hide_dom");
            this.view.objectiveFunction.$min_fz.text("");
            this.view.objectiveFunction.$min_fm.text("");

            this.view.objectiveFunction.$minPointX.removeClass("hide_dom");
            this.view.objectiveFunction.$minPointX.html("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;");
            this.view.objectiveFunction.$minPointX_fenshu.addClass("hide_dom");
            this.view.objectiveFunction.$minPointX_fz.text("");
            this.view.objectiveFunction.$minPointX_fm.text("");

            this.view.objectiveFunction.$minPointY.removeClass("hide_dom");
            this.view.objectiveFunction.$minPointY.html("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;");
            this.view.objectiveFunction.$minPointY_fenshu.addClass("hide_dom");
            this.view.objectiveFunction.$minPointY_fz.text("");
            this.view.objectiveFunction.$minPointY_fm.text("");

            var html = "";
            html += '<div class="lp_bracket_box text_box"><span class="txt"></span>';
            html += '<span class="txt" style="font-weight:normal">,</span>';
            html += '<span class="txt"></span></div>';
            this.view.objectiveFunction.$minTriangleExpand.addClass("hide_dom");
            this.view.objectiveFunction.$minMulSolution_1.html(html);
            this.view.objectiveFunction.$minMulSolution.addClass("hide_dom");
            this.view.objectiveFunction.$minIntCheck.removeClass("checked");
            this.view.objectiveFunction.$min_solution1.removeClass("font_change_24");
            this.view.objectiveFunction.$min_solution1.removeClass("font_change_32");
            this.view.objectiveFunction.$min_solution1.addClass("font_change_45");
            this.view.objectiveFunction.$min_solution2.removeClass("font_change_24");
            this.view.objectiveFunction.$min_solution2.removeClass("font_change_32");
            this.view.objectiveFunction.$min_solution2.addClass("font_change_45");
            this.view.objectiveFunction.$minNumerousSolution.addClass("hide_dom");
            this.view.objectiveFunction.$minBracket.removeClass("hide_dom");
        },
        // 取消最小整数解
        cancelMinIntSolution: function cancelMinIntSolution() {
            this.linearPogramming.cancelMinIntSolution();
        },
        // 取消最大整数解
        cancelMaxIntSolution: function cancelMaxIntSolution() {
            this.linearPogramming.cancelMaxIntSolution();
        },
        //清除目标函数
        clearObjectiveFunction: function clearObjectiveFunction() {
            this.linearPogramming.clearObjectiveFunctionData();
        },
        //相交点
        renderFeasibleRegion: function renderFeasibleRegion() {
            this.linearPogramming.renderInters();
            this.linearPogramming.clearObjectiveFunction();
            if (this.linearPogramming.objectiveFunction != null) {
                this.renderObjectiveFunctionAction();
            }
            this.setNumerousSolutionView();
        },
        //闪烁约束条件
        flashCondition: function flashCondition(equalIndex, index) {
            var self = this;
            var i = 0,
                t = false,
                times = 2;
            if (t) return;

            var lineHeight = 64 * Const.scaleY;
            var scrollTop = lineHeight * equalIndex;
            self.view.condition.$condition_scrollbar.scrollTop(scrollTop);
            t = setInterval(function () {
                self.setHighligthCondition(i, equalIndex);
                if (i == 2 * times - 1) {
                    clearInterval(t);
                    self.clearInputConditionView(index);
                }
                i++;
            }, 500);
        },
        //高亮约束条件
        setHighligthCondition: function setHighligthCondition(i, equalIndex) {
            if (i % 2 == 0) {
                this.view.condition.$condition_list.find(".lp_li_item.lp_li_item" + (parseInt(equalIndex) + 1)).addClass("ui_btn_highlight");
            } else {
                this.view.condition.$condition_list.find(".lp_li_item.lp_li_item" + (parseInt(equalIndex) + 1)).removeClass("ui_btn_highlight");
            }
        },

        clickObjectiveFunctionDelete1: function clickObjectiveFunctionDelete1() {
            this.view.objectiveFunction.$del.addClass("click_disabled");
            this.clearMaxObjectiveFunctionView();
            this.clearMinObjectiveFunctionView();

            this.clearObjectiveFunction();
            this.setIntSolutionCheckBoxDisabled();
        },
        //渲染目标函数
        renderObjectiveFunctionAction: function renderObjectiveFunctionAction() {
            var a = this.view.objectiveFunction.$a.find(".num_input .num_input_text:eq(0)").text();
            var b = this.view.objectiveFunction.$b.find(".num_input .num_input_text:eq(0)").text();
            if (a === "0" || b === "0") {
                this.clickObjectiveFunctionDelete1();
                Prompter.toast(Lang.get("objectivefunction_warning_iszero"), 1000);
                return;
            }
            if (!Utils.business.checkObjectiveFunction(a, b)) {
                this.clickObjectiveFunctionDelete1();
                return;
            }

            this.saveLocalStorageWarningTip(Const.localStorage_warning_tip, Lang.get("objectivefunction_info_drag"));

            var self = this;
            var objectiveFunction = new ObjectiveFunction(a, b);
            objectiveFunction.callbackCrossZmax = function (zmax) {
                self.objectiveFunctionCallbackCrossZmax(zmax);
                if (zmax.points != null && zmax.points.length > 0) {
                    if (zmax.points[0].x.toString().indexOf("/") > -1 || zmax.points[0].y.toString().indexOf("/") > -1 || zmax.points[0].x.toString().indexOf(".") > -1 || zmax.points[0].y.toString().indexOf(".") > -1 || zmax.numerousSolution != null && zmax.numerousSolution.length > 0) {
                        self.setMaxIntSolutionCheckBoxAbled();
                    }
                }
            };
            objectiveFunction.callbackCrossZmin = function (zmin) {
                self.objectiveFunctionCallbackCrossZmin(zmin);
                if (zmin.points != null && zmin.points.length > 0) {
                    if (zmin.points[0].x.toString().indexOf("/") > -1 || zmin.points[0].y.toString().indexOf("/") > -1 || zmin.points[0].x.toString().indexOf(".") > -1 || zmin.points[0].y.toString().indexOf(".") > -1 || zmin.numerousSolution != null && zmin.numerousSolution.length > 0) {
                        self.setMinIntSolutionCheckBoxAbled();
                    }
                }
            };

            objectiveFunction.callbackClear = function () {
                self.objectiveFunctionCallbackClear();
            };

            this.linearPogramming.clearObjectiveFunction();
            this.linearPogramming.addObjectiveFunction(objectiveFunction);
            this.setObjectiveFunctionDeleteDisabled();
            this.setIntSolutionCheckBoxDisabled();
        },
        getTagCount: function getTagCount() {
            var number = 0;
            if (this.linearPogramming.tags != null) {
                number = this.linearPogramming.tags.length;
            }
            return number;
        },
        getIntIntersCount: function getIntIntersCount() {
            var number = 0;
            if (this.linearPogramming.int_inters != null) {
                number = this.linearPogramming.int_inters.length;
            }
            return number;
        },
        //保存目标函数
        saveLocalStorageWarningTip: function saveLocalStorageWarningTip(key, message) {
            var localStorage_warning_tip = localStorage.getItem(key);
            if (localStorage_warning_tip !== "1") {
                Prompter.toast(message, 3000);
            }
            localStorage.setItem(key, "1");
        },
        clearIntInters: function clearIntInters() {
            var index = this.getTagCount();
            var count = index + this.getIntIntersCount();
            for (var i = index; i < count; i++) {
                if (Snap.select("#gInter_" + i) != null) {
                    Snap.select("#gInter_" + i).remove();
                }
            }
        },
        addIntInters: function addIntInters(point) {
            var index = this.getTagCount();
            var inter = new Inter(point, index, true);
            inter.render();
            this.linearPogramming.int_inters.push(inter);
        },
        //回调最大值
        objectiveFunctionCallbackCrossZmax: function objectiveFunctionCallbackCrossZmax(zmax) {
            this.linearPogramming.zMax = zmax;
            this.view.objectiveFunction.$max.text(zmax.value);
            this.dealObjectiveFunctionNumberView(zmax.value, this.view.objectiveFunction.$max, this.view.objectiveFunction.$max_fenshu, this.view.objectiveFunction.$max_fz, this.view.objectiveFunction.$max_fm, this.view.objectiveFunction.$max_fenhao, this.view.objectiveFunction.$max_solution1, this.view.objectiveFunction.$max_solution2);
            this.view.objectiveFunction.$maxTriangleExpand.addClass("hide_dom");
            this.view.objectiveFunction.$maxMulSolution.addClass("hide_dom");
            this.view.objectiveFunction.$maxNumerousSolution.addClass("hide_dom");
            this.view.objectiveFunction.$maxBracket.removeClass("hide_dom");
            if (zmax.numerousSolution == null || zmax.numerousSolution.length === 0) {
                if (zmax.points != null && zmax.points.length > 0) {
                    this.dealObjectiveFunctionNumberView(zmax.points[0].x, this.view.objectiveFunction.$maxPointX, this.view.objectiveFunction.$maxPointX_fenshu, this.view.objectiveFunction.$maxPointX_fz, this.view.objectiveFunction.$maxPointX_fm, this.view.objectiveFunction.$maxPointX_fenhao, this.view.objectiveFunction.$max_solution1, this.view.objectiveFunction.$max_solution2);
                    this.dealObjectiveFunctionNumberView(zmax.points[0].y, this.view.objectiveFunction.$maxPointY, this.view.objectiveFunction.$maxPointY_fenshu, this.view.objectiveFunction.$maxPointY_fz, this.view.objectiveFunction.$maxPointY_fm, this.view.objectiveFunction.$maxPointY_fenhao, this.view.objectiveFunction.$max_solution1, this.view.objectiveFunction.$max_solution2);
                    this.clearIntInters();
                    if (zmax.points.length > 1) {
                        this.dealMaxMultObjectiveFunctionNumberView(zmax);
                    } else {
                        if (zmax.isCheck == true) {
                            //var index = this.getTagCount();
                            //var point = Utils.coordinate.convertRealCoordinate(zmax.points[0].x.toString(), zmax.points[0].y.toString());
                            //var inter = new Inter(point, index, true);
                            //inter.render();
                            //this.linearPogramming.int_inters.push(inter);
                        }
                    }
                }
            } else {
                this.view.objectiveFunction.$maxNumerousSolution.removeClass("hide_dom");
                this.view.objectiveFunction.$maxBracket.addClass("hide_dom");
            }
        },
        //回调最小值
        objectiveFunctionCallbackCrossZmin: function objectiveFunctionCallbackCrossZmin(zmin) {
            this.linearPogramming.zMin = zmin;
            this.view.objectiveFunction.$min.text(zmin.value);
            this.dealObjectiveFunctionNumberView(zmin.value, this.view.objectiveFunction.$min, this.view.objectiveFunction.$min_fenshu, this.view.objectiveFunction.$min_fz, this.view.objectiveFunction.$min_fm, this.view.objectiveFunction.$min_fenhao, this.view.objectiveFunction.$min_solution1, this.view.objectiveFunction.$min_solution2);
            this.view.objectiveFunction.$minTriangleExpand.addClass("hide_dom");
            this.view.objectiveFunction.$minMulSolution.addClass("hide_dom");
            this.view.objectiveFunction.$minNumerousSolution.addClass("hide_dom");
            this.view.objectiveFunction.$minBracket.removeClass("hide_dom");
            if (zmin.numerousSolution == null || zmin.numerousSolution.length === 0) {
                if (zmin.points != null && zmin.points.length > 0) {
                    this.dealObjectiveFunctionNumberView(zmin.points[0].x, this.view.objectiveFunction.$minPointX, this.view.objectiveFunction.$minPointX_fenshu, this.view.objectiveFunction.$minPointX_fz, this.view.objectiveFunction.$minPointX_fm, this.view.objectiveFunction.$minPointX_fenhao, this.view.objectiveFunction.$min_solution1, this.view.objectiveFunction.$min_solution2);
                    this.dealObjectiveFunctionNumberView(zmin.points[0].y, this.view.objectiveFunction.$minPointY, this.view.objectiveFunction.$minPointY_fenshu, this.view.objectiveFunction.$minPointY_fz, this.view.objectiveFunction.$minPointY_fm, this.view.objectiveFunction.$minPointY_fenhao, this.view.objectiveFunction.$min_solution1, this.view.objectiveFunction.$min_solution2);
                    this.clearIntInters();
                    if (zmin.points.length > 1) {
                        this.dealMinMultObjectiveFunctionNumberView(zmin);
                    } else {
                        if (zmin.isCheck == true) {
                            //var index = this.getTagCount();
                            //var point = Utils.coordinate.convertRealCoordinate(zmin.points[0].x.toString(), zmin.points[0].y.toString());
                            //var inter = new Inter(point, index, true);
                            //inter.render();
                            //this.linearPogramming.int_inters.push(inter);
                        }
                    }
                }
            } else {
                this.view.objectiveFunction.$minNumerousSolution.removeClass("hide_dom");
                this.view.objectiveFunction.$minBracket.addClass("hide_dom");
            }
        },
        //回调清除
        objectiveFunctionCallbackClear: function objectiveFunctionCallbackClear() {
            this.clearMaxObjectiveFunctionView();
            this.clearMinObjectiveFunctionView();
        },
        //处理
        dealObjectiveFunctionNumberView: function dealObjectiveFunctionNumberView(number, $dom, $fenshu, $fz, $fm, $fh, $solution1, $solution2) {
            var maxLength = 0;
            if (Utils.business.isFenShu(number.toString())) {
                var fz = Utils.business.getFenZi(number.toString());
                var fm = Utils.business.getFenMu(number.toString());
                $dom.addClass("hide_dom");
                if (fz.indexOf("-") > -1) {
                    $fh.removeClass("hide_dom");
                } else {
                    $fh.addClass("hide_dom");
                }
                $fenshu.removeClass("hide_dom");
                $fz.text(fz.replace("-", ""));
                $fm.text(fm);
                maxLength = fz.replace("-", "").length > fm.length ? fz.replace("-", "").length : fm.length;
            } else {
                $dom.text(number.toString());
                $dom.removeClass("hide_dom");
                $fenshu.addClass("hide_dom");
                maxLength = number.toString().length;
            }

            if (maxLength > 5) {
                $solution1.addClass("font_change_24");
                $solution2.addClass("font_change_24");
            } else if (maxLength > 3) {
                $solution1.addClass("font_change_32");
                $solution2.addClass("font_change_32");
            } else {
                $solution1.removeClass("font_change_24");
                $solution1.removeClass("font_change_32");
                $solution1.addClass("font_change_45");

                $solution2.removeClass("font_change_24");
                $solution2.removeClass("font_change_32");
                $solution2.addClass("font_change_45");
            }
        },
        dealMinMultObjectiveFunctionNumberView: function dealMinMultObjectiveFunctionNumberView(zmin) {
            this.view.objectiveFunction.$minMulSolution.find(".lp_bracket_box").remove();
            var html = "";
            var maxLength = 51;
            if (zmin.points.length < maxLength) {
                maxLength = zmin.points.length;
            }
            for (var i = 0; i < zmin.points.length; i++) {
                if (i == 50) {
                    html += '<div class="lp_bracket_box text_box"><span class="txt">...</span></div>';
                } else {
                    html += '<div class="lp_bracket_box text_box"><span class="txt">' + zmin.points[i].x + '</span>';
                    html += '<span class="txt change_font_size" style="font-weight:normal">&nbsp;,</span>';
                    html += '<span class="txt change_font_size">' + zmin.points[i].y + '</span></div>';
                }
                if (zmin.isCheck == true) {
                    //var index = this.getTagCount();
                    //var point = Utils.coordinate.convertRealCoordinate(zmin.points[i].x.toString(), zmin.points[i].x.toString());
                    //var inter = new Inter(point, index, true);
                    //inter.render();
                    //this.linearPogramming.int_inters.push(inter);
                }
            }
            this.view.objectiveFunction.$minMulSolution_1.html(html);
            this.view.objectiveFunction.$minTriangleExpand.removeClass("hide_dom");
        },
        dealMaxMultObjectiveFunctionNumberView: function dealMaxMultObjectiveFunctionNumberView(zmax) {
            this.view.objectiveFunction.$maxMulSolution.find(".lp_bracket_box").remove();
            var html = "";
            var maxLength = 51;
            if (zmax.points.length < maxLength) {
                maxLength = zmax.points.length;
            }
            for (var i = 0; i < maxLength; i++) {
                if (i == 50) {
                    html += '<div class="lp_bracket_box text_box"><span class="txt">...</span></div>';
                } else {
                    html += '<div class="lp_bracket_box text_box"><span class="txt">' + zmax.points[i].x + '</span>';
                    html += '<span class="txt change_font_size" style="font-weight:normal">&nbsp;,</span>';
                    html += '<span class="txt change_font_size">' + zmax.points[i].y + '</span></div>';
                }
                if (zmax.isCheck == true) {
                    //var index = this.getTagCount();
                    //var point = Utils.coordinate.convertRealCoordinate(zmax.points[i].x.toString(), zmax.points[i].x.toString());
                    //var inter = new Inter(point, index, true);
                    //inter.render();
                    //this.linearPogramming.int_inters.push(inter);
                }
            }
            this.view.objectiveFunction.$maxMulSolution_1.html(html);
            this.view.objectiveFunction.$maxTriangleExpand.removeClass("hide_dom");
        },
        renderConstraintConditionAllAction: function renderConstraintConditionAllAction() {
            if (this.linearPogramming.conditions != null && this.linearPogramming.conditions.length > 0) {
                for (var i = 0; i < this.linearPogramming.conditions.length; i++) {
                    var condition = this.linearPogramming.conditions[i];
                    this.renderConstraintCondition(condition);
                }
            }
        },
        //添加约束条件
        renderConstraintConditionAction: function renderConstraintConditionAction(index) {
            var a = $(this.view.condition.$a[index]).find(".num_input .num_input_text:eq(0)").text();
            var b = $(this.view.condition.$b[index]).find(".num_input .num_input_text:eq(0)").text();
            var c = $(this.view.condition.$c[index]).find(".num_input .num_input_text:eq(0)").text();
            var s = $(this.view.condition.$s[index]).find(".num_input .num_input_text:eq(0)").text();
            var condition = new ConstraintCondition(a, b, c, s);
            condition.index = index;
            if (s.length === 0) {
                this.removeConditionAction1(index);
                return;
            }
            if (a === "0" && b === "0") {
                this.removeConditionAction1(index);
                Prompter.toast(Lang.get("constraintcondition_warning_iszero"), 1000);
                return;
            }
            if (!Utils.business.checkCondition(condition)) {
                this.removeConditionAction1(index);
                return;
            }
            var equalCondition = this.linearPogramming.getEqualCondition(condition);
            if (equalCondition != null) {
                this.removeConditionAction1(index);
                var equalIndex = equalCondition.index;
                this.flashCondition(equalIndex, index);
                return;
            }

            this.saveLocalStorageWarningTip(Const.localStorage_conditon_warning_tip, Lang.get("constraintcondition_show_hide_info"));

            this.renderConstraintCondition(condition);
        },
        renderConstraintCondition: function renderConstraintCondition(condition) {
            this.linearPogramming.clearObjectiveFunction();
            this.linearPogramming.removeGCondition();
            this.linearPogramming.clearNotCondition();
            this.linearPogramming.updateCondition(condition);
            this.linearPogramming.setSceneUnit(condition);
            this.linearPogramming.resetCondition();
            this.linearPogramming.setSceneUnit2(condition);
            this.linearPogramming.removeGCondition();
            this.linearPogramming.clearNotCondition();
            this.linearPogramming.resetCondition();

            this.setEyeAllConditionButtonDisabled();
            this.setFeasibleRegionDisabled();
            this.setFeasibleRegionTextInitState();
            this.setIntSolutionCheckBoxDisabled();
            this.setDeleteAndEyeDisabled(condition.index);
            this.setDeleteAllConditionButtonDisabled();
            if (this.linearPogramming.objectiveFunction != null) {
                this.renderObjectiveFunctionAction();
            }
            this.linearPogramming.updateConditionTagPosition();
        },

        //设置约束条件的删除和鹰眼
        setDeleteAndEyeDisabled: function setDeleteAndEyeDisabled(index) {
            this.view.condition.$condition_list.find(".lp_li_item.lp_li_item" + (parseInt(index) + 1).toString() + " .lp_icon_delete_box").removeClass("click_disabled");
            if (this.view.condition.$condition_list.find(".lp_li_item.lp_li_item" + (parseInt(index) + 1).toString() + " .lp_icon_delete_box").hasClass("change_hide")) {
                this.view.condition.$condition_list.find(".lp_li_item.lp_li_item" + (parseInt(index) + 1).toString() + " .lp_icon_delete_box").removeClass("change_hide");
            } else {
                this.view.condition.$condition_list.find(".lp_li_item.lp_li_item" + (parseInt(index) + 1).toString() + " .lp_icon_delete_box").addClass("change_hide");
            }
            this.view.condition.$condition_list.find(".lp_li_item.lp_li_item" + (parseInt(index) + 1).toString() + " .lp_icon_eye_box ").removeClass("click_disabled");
        },
        //隐藏约束条件
        showOrHideCondition: function showOrHideCondition(i) {
            var condition = this.linearPogramming.conditions[i];
            if (!Utils.business.checkCondition(condition)) {
                return;
            }
            this.linearPogramming.showOrHideCondition(i);
            this.linearPogramming.clearInters();
            this.linearPogramming.clearTags();
            this.linearPogramming.clearFeasibleRegion();
            this.linearPogramming.clearObjectiveFunction();
            var isShow = this.linearPogramming.isShowCondition(i);
            this.setEyeView(i, isShow);
            this.setFeasibleRegionDisabled();
            this.setFeasibleRegionTextInitState();
            this.setIntSolutionCheckBoxDisabled();
            if (this.linearPogramming.objectiveFunction != null) {
                this.renderObjectiveFunctionAction();
            }
        },
        //设置显示约束条件
        showConditionAction: function showConditionAction(i) {
            var condition = this.linearPogramming.conditions[i];
            if (!Utils.business.checkCondition(condition)) {
                return;
            }
            this.linearPogramming.showSingleCondition(i);
            this.linearPogramming.clearInters();
            this.linearPogramming.clearTags();
            this.linearPogramming.clearFeasibleRegion();
            this.linearPogramming.clearObjectiveFunction();
            var isShow = this.linearPogramming.isShowCondition(i);
            this.setEyeView(i, isShow);
            this.setFeasibleRegionDisabled();
            this.setFeasibleRegionTextInitState();
            this.setIntSolutionCheckBoxDisabled();
            if (this.linearPogramming.objectiveFunction != null) {
                this.renderObjectiveFunctionAction();
            }
        },
        //设置隐藏约束条件
        hideConditionAction: function hideConditionAction(i) {
            var condition = this.linearPogramming.conditions[i];
            if (!Utils.business.checkCondition(condition)) {
                return;
            }
            this.linearPogramming.hideSingleCondition(i);
            this.linearPogramming.clearInters();
            this.linearPogramming.clearTags();
            this.linearPogramming.clearFeasibleRegion();
            this.linearPogramming.clearObjectiveFunction();
            var isShow = this.linearPogramming.isShowCondition(i);
            this.setEyeView(i, isShow);
            this.setFeasibleRegionDisabled();
            this.setFeasibleRegionTextInitState();
            this.setIntSolutionCheckBoxDisabled();
            if (this.linearPogramming.objectiveFunction != null) {
                this.renderObjectiveFunctionAction();
            }
        },
        //删除约束条件
        removeConditionAction: function removeConditionAction(index) {
            var self = this;
            Prompter.confirm(Lang.get("constraintcondition_graph"), Lang.get("constraintcondition_delete"), function () {

                self.clearInputConditionView(index);
                self.linearPogramming.removeCondition(index);
                self.linearPogramming.removeGCondition();
                self.linearPogramming.clearInters();
                self.linearPogramming.clearTags();
                self.linearPogramming.clearFeasibleRegion();
                self.linearPogramming.clearObjectiveFunction();
                self.clearMaxObjectiveFunctionView();
                self.clearMinObjectiveFunctionView();

                self.linearPogramming.resetCondition();
                self.setFeasibleRegionDisabled();

                self.setEyeAllConditionButtonDisabled();
                self.setFeasibleRegionTextInitState();
                self.setIntSolutionCheckBoxDisabled();
                self.setDeleteAllConditionButtonDisabled();
                if (self.linearPogramming.objectiveFunction != null) {
                    self.linearPogramming.addObjectiveFunction(self.linearPogramming.objectiveFunction);
                }
            });
        },
        //删除约束条件
        removeConditionAction1: function removeConditionAction1(index) {
            var self = this;
            this.view.condition.$condition_list.find(".lp_li_item.lp_li_item" + (parseInt(index) + 1).toString() + " .lp_icon_eye_box").removeClass("change_hide");
            this.view.condition.$condition_list.find(".lp_li_item.lp_li_item" + (parseInt(index) + 1).toString() + " .lp_icon_eye_box ").addClass("click_disabled");
            this.view.condition.$condition_list.find(".lp_li_item.lp_li_item" + (parseInt(index) + 1).toString() + " .lp_icon_delete_box").addClass("click_disabled");
            self.linearPogramming.removeCondition(index);
            self.linearPogramming.removeGCondition();
            self.linearPogramming.clearInters();
            self.linearPogramming.clearTags();
            self.linearPogramming.clearFeasibleRegion();
            self.linearPogramming.clearObjectiveFunction();
            self.clearMaxObjectiveFunctionView();
            self.clearMinObjectiveFunctionView();

            self.linearPogramming.resetCondition();
            self.setFeasibleRegionDisabled();

            this.setEyeAllConditionButtonDisabled();
            self.setFeasibleRegionTextInitState();
            self.setIntSolutionCheckBoxDisabled();
            self.setDeleteAllConditionButtonDisabled();
            if (self.linearPogramming.objectiveFunction != null) {
                self.linearPogramming.addObjectiveFunction(self.linearPogramming.objectiveFunction);
            }
        },
        //清除单个输入约束条件视图
        clearInputConditionView: function clearInputConditionView(index) {

            this.view.condition.$condition_list.find(".lp_li_item.lp_li_item" + (parseInt(index) + 1).toString() + " .lp_drop_num").removeClass("font_change_24");
            this.view.condition.$condition_list.find(".lp_li_item.lp_li_item" + (parseInt(index) + 1).toString() + " .lp_drop_num").removeClass("font_change_34");
            this.view.condition.$condition_list.find(".lp_li_item.lp_li_item" + (parseInt(index) + 1).toString() + " .lp_drop_num").removeClass("font_change_40");
            this.view.condition.$condition_list.find(".lp_li_item.lp_li_item" + (parseInt(index) + 1).toString() + " .lp_drop_num").removeClass("font_change_48");

            this.view.condition.$condition_list.find(".lp_li_item.lp_li_item" + (parseInt(index) + 1).toString() + " .num_input .num_input_text:eq(0)").removeClass("hide_dom");
            this.view.condition.$condition_list.find(".lp_li_item.lp_li_item" + (parseInt(index) + 1).toString() + " .num_input .num_input_text:eq(0)").text("a");

            this.view.condition.$condition_list.find(".lp_li_item.lp_li_item" + (parseInt(index) + 1).toString() + " .num_input .num_input_text:eq(2)").removeClass("hide_dom");
            this.view.condition.$condition_list.find(".lp_li_item.lp_li_item" + (parseInt(index) + 1).toString() + " .num_input .num_input_text:eq(2)").text("b");

            this.view.condition.$condition_list.find(".lp_li_item.lp_li_item" + (parseInt(index) + 1).toString() + " .num_input .num_input_text:eq(4)").removeClass("hide_dom");
            this.view.condition.$condition_list.find(".lp_li_item.lp_li_item" + (parseInt(index) + 1).toString() + " .num_input .num_input_text:eq(4)").text("c");

            this.view.condition.$condition_list.find(".lp_li_item.lp_li_item" + (parseInt(index) + 1).toString() + " .lp_fenshu_item").addClass("hide_dom");
            this.view.condition.$condition_list.find(".lp_li_item.lp_li_item" + (parseInt(index) + 1).toString() + " .lp_fenshu_item .lp_fenzi .num .num_text").text("");
            this.view.condition.$condition_list.find(".lp_li_item.lp_li_item" + (parseInt(index) + 1).toString() + " .lp_fenshu_item .lp_fenmu .num .num_text").text("");

            this.view.condition.$condition_list.find(".lp_li_item.lp_li_item" + (parseInt(index) + 1).toString() + " .num_input .num_input_text:eq(6)").text("");
            this.view.condition.$condition_list.find(".lp_li_item.lp_li_item" + (parseInt(index) + 1).toString() + " .lp_icon_eye_box").removeClass("change_hide");
            this.view.condition.$condition_list.find(".lp_li_item.lp_li_item" + (parseInt(index) + 1).toString() + " .lp_icon_eye_box ").addClass("click_disabled");
            this.view.condition.$condition_list.find(".lp_li_item.lp_li_item" + (parseInt(index) + 1).toString() + " .lp_icon_delete_box").addClass("click_disabled");
        },
        //清除所有输入约束条件视图
        clearAllInputConditionView: function clearAllInputConditionView() {
            for (var index = 0; index < 6; index++) {
                this.clearInputConditionView(index);
            }
        },
        //清除所有约束条件
        clearAllCondition: function clearAllCondition() {
            var self = this;
            Prompter.confirm(Lang.get("constraintcondition_graph"), Lang.get("constraintcondition_clear"), function () {
                self.clearAllInputConditionView();

                self.linearPogramming.clearCondition();
                self.linearPogramming.clearInters();
                self.linearPogramming.clearTags();
                self.linearPogramming.clearFeasibleRegion();
                self.linearPogramming.clearObjectiveFunction();
                self.setFeasibleRegionDisabled();
                self.setFeasibleRegionTextInitState();
                self.clearMaxObjectiveFunctionView();
                self.clearMinObjectiveFunctionView();
                self.setIntSolutionCheckBoxDisabled();
                self.setDeleteAllConditionButtonDisabled();
                if (self.linearPogramming.objectiveFunction != null) {
                    self.renderObjectiveFunctionAction();
                }

                Scene.setUnit(1);
            });
        }
    };

    return LinearProgrammingController;
});
'use strict';

/**
 * Created by ylf on 2016/7/22.
 * 事件管理对象
 */
define('LinearProgrammingEventBus', ['LinearProgrammingLogger'], function (Logger) {

    var EventBus = {
        _eventHandler: null,
        create: function create() {
            var instance = Object.create(this);
            instance._eventHandler = {};
            return instance;
        },
        trigger: function trigger() {
            //将参数转换为数组
            var arg = Array.prototype.slice.apply(arguments, [0]);
            //取第一个，并从数组中删除，事件key
            var type = arg.shift();
            if (!this._eventHandler || !this._eventHandler[type]) {
                return false;
            }
            var handlers = this._eventHandler[type];
            handlers.forEach(function (handler) {
                handler.cb.apply(handler.domain || this, arg);
                Logger.debug('event-trigger', type, arg.toString());
            });
            return true;
        },
        on: function on(type, callback, domain) {
            if (!this._eventHandler[type]) {
                this._eventHandler[type] = [];
            }
            this._eventHandler[type].push({ cb: callback, domain: domain });
            return true;
        },
        off: function off(type, callback, domain) {
            var handlers = this._eventHandler[type];
            if (handlers && handlers.length > 0) {
                var len = handlers.length;
                var handler;
                for (var i = 0; i < len; i++) {
                    handler = handlers[i];
                    if (handler && callback === handler.cb) {
                        if (domain && domain !== handler.domain) {
                            continue;
                        }
                        handlers.splice(i, 1);
                        i--;
                        len--;
                    }
                }
            }
            if (handlers && handlers.length === 0) {
                delete this._eventHandler[type];
            }
        }
    };
    return EventBus;
});
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

if (!Array.prototype.includes) {
    Array.prototype.includes = function (searchElement /*, fromIndex*/) {
        'use strict';

        if (this == null) {
            throw new TypeError('Array.prototype.includes called on null or undefined');
        }

        var O = Object(this);
        var len = parseInt(O.length, 10) || 0;
        if (len === 0) {
            return false;
        }
        var n = parseInt(arguments[1], 10) || 0;
        var k;
        if (n >= 0) {
            k = n;
        } else {
            k = len + n;
            if (k < 0) {
                k = 0;
            }
        }
        var currentElement;
        while (k < len) {
            currentElement = O[k];
            if (searchElement === currentElement || searchElement !== searchElement && currentElement !== currentElement) {
                return true;
            }
            k++;
        }
        return false;
    };
}

function _toConsumableArray(n) {
    if (Array.isArray(n)) {
        for (var t = 0, e = Array(n.length); t < n.length; t++) {
            e[t] = n[t];
        }return e;
    }
    return Array.from(n);
}
function _classCallCheck(n, t) {
    if (!(n instanceof t)) throw new TypeError("Cannot call a class as a function");
}
var _bind = Function.prototype.bind,
    _createClass = function () {
    function n(n, t) {
        for (var e = 0; e < t.length; e++) {
            var r = t[e];
            r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(n, r.key, r);
        }
    }
    return function (t, e, r) {
        return e && n(t.prototype, e), r && n(t, r), t;
    };
}(),
    window,
    global;
!function (n) {
    var t = function t(n, _t) {
        var e = function e(n, t) {
            for (var e = !0; e;) {
                var r = n,
                    i = t;
                if (e = !1, r.isZero()) return i;
                n = i.mod(r), t = r, e = !0;
            }
        };
        return e(n.abs(), _t.abs());
    },
        e = function e(n, _e) {
        var r = t(n, _e);
        return [n.dividedBy(r), _e.dividedBy(r)];
    },
        r = function r(n, t) {
        return t.isNegative() ? [n.times(-1), t.abs()] : [n, t];
    },
        i = function () {
        function n(t) {
            _classCallCheck(this, n), this.opt = t;
            var e = function e(n) {

                return ["+", "-"].includes(n) ? 1 : ["*", "/"].includes(n) ? 2 : 0;
            };
            this.priority = e(t);
        }

        return _createClass(n, [{
            key: "toString",
            value: function value() {
                return this.opt;
            }
        }]), n;
    }(),
        u = function () {
        function n() {
            _classCallCheck(this, n);
            var t = function t(n) {
                return n instanceof i;
            },
                u = function u(n) {
                return !t(n);
            },
                c = function c(n) {
                return !(u(n) || 0 === n.priority);
            },
                f = function f(n) {
                return {
                    "+": "plus",
                    "-": "minus",
                    "*": "times",
                    "/": "dividedBy"
                }[n];
            },
                d = function d(n, t) {
                return n.match(/\S+/g).reduce(function (n, e, r) {
                    return n.concat(t && 0 == r || n.length > 0 && /[^0-9\.]$/.test(n[n.length - 1]) ? e.match(/((^|[^0-9\.])-|)[0-9\.]+|[^0-9\.]/g) : e.match(/([^0-9\.]-|)[0-9\.]+|[^0-9\.]/g));
                }, []).reduce(function (n, t) {
                    return n.concat(t.match(/(-|)[0-9\.]+|[^0-9\.]/g));
                }, []).map(function (n) {
                    return (/^(-|)[0-9\.]+$/.test(n) ? n : new i(n)
                    );
                });
            },
                l = function l(n) {
                var t = [],
                    e = [],
                    r = function r() {
                    return t[t.length - 1];
                },
                    i = function i(n) {
                    for (; r() && n.priority <= r().priority;) {
                        e.push(t.pop());
                    }
                },
                    o = function o() {
                    if (r()) {
                        for (; "(" !== r().opt;) {
                            e.push(t.pop());
                        }t.pop();
                    }
                };
                return n.forEach(function (n) {
                    return u(n) ? e.push(n) : "(" == n.opt ? t.push(n) : ")" == n.opt ? o() : (i(n), t.push(n));
                }), e = e.concat(t.reverse());
            },
                v = function v(t, i) {
                if (t instanceof n) return t.value;
                var u = function u(n) {
                    return n instanceof o ? n : ["string", "number"].includes(typeof n === 'undefined' ? 'undefined' : _typeof(n)) ? new o(n) : s;
                },
                    c = function c(n) {
                    return n.toFraction().map(function (n) {
                        return new o(n);
                    });
                };
                if (!i) {
                    var f = u(t);
                    return f.isInt() ? [f, a] : c(f);
                }
                if (t = u(t), i = u(i), t.isInt() && i.isInt()) return e.apply(void 0, _toConsumableArray(r(t, i)));
                var d = function d(t) {
                    return new (_bind.apply(n, [null].concat(_toConsumableArray(c(t)))))();
                };
                return d(t).dividedBy(d(i));
            },
                h = function h(e) {
                var r = [];
                return e.reverse().forEach(function (e) {
                    return t(e) ? r.push(new n(r.pop())[f(e.opt)](new n(r.pop()))) : r.push(e);
                }), new n(r[0]).value;
            },
                p = function p(e) {
                var r = [],
                    i = function i(t, e, r) {
                    return new n(r)[f(t)](new n(e));
                };
                return e.forEach(function (n) {
                    return t(n) ? r.push(i(n.opt, r.pop(), r.pop())) : r.push(n);
                }), new n(r[0]).value;
            },
                y = function y(n) {
                return 0 === n.length ? [s, s] : 1 === n.length ? v(n[0]) : 2 === n.length ? v(n[0], n[1]) : c(n[0]) ? h(n) : p(c(n[n.length - 1]) ? n : l(n));
            },
                g = void 0;
            try {
                for (var m = arguments.length, b = Array(m), w = 0; m > w; w++) {
                    b[w] = arguments[w];
                }g = y(b.reduce(function (n, e, r) {
                    return "string" == typeof e ? n.concat(d(e, 0 == r || n.length > 0 && t(n[n.length - 1]))) : n.concat(e);
                }, []));
            } catch (k) {
                g = [s, s];
            }
            Object.defineProperties(this, {
                n: {
                    value: g[0],
                    writable: !1
                },
                d: {
                    value: g[1],
                    writable: !1
                }
            });
        }
        return _createClass(n, [{
            key: "toString",
            value: function value() {
                return this.isNaN() ? s.toString() : this.isInt() ? this.n.toFixed() : [this.n.toFixed(), this.d.toFixed()].join("/");
            }
        }, {
            key: "toJSON",
            value: function value() {
                return this.toString();
            }
        }, {
            key: "valueOf",
            value: function value() {
                return this.toString();
            }
        }, {
            key: "toBigNumber",
            value: function value() {
                return this.n.dividedBy(this.d);
            }
        }, {
            key: "plus",
            value: function value(n) {
                var i = this,
                    u = t(i.d, n.d),
                    o = n.d.dividedBy(u),
                    a = i.d.dividedBy(u),
                    s = o.times(i.d),
                    c = o.times(i.n),
                    f = a.times(n.n),
                    d = c.plus(f),
                    l = e.apply(void 0, _toConsumableArray(r(d, s)));
                return l;
            }
        }, {
            key: "minus",
            value: function value(t) {
                var e = this;
                return e.plus(new n(t.n.times(-1), t.d));
            }
        }, {
            key: "times",
            value: function value(n) {
                var e = this;
                if (e.d.isZero() || n.d.isZero()) return [s, s];
                var i = t(e.d, n.n),
                    u = t(e.n, n.d),
                    o = e.d.dividedBy(i).times(n.d.dividedBy(u)),
                    a = e.n.dividedBy(u).times(n.n.dividedBy(i)),
                    c = r(a, o);
                return c;
            }
        }, {
            key: "dividedBy",
            value: function value(t) {
                var e = this;
                return e.times(new n(t.d, t.n));
            }
        }, {
            key: "isNaN",
            value: function value() {
                return this.n.isNaN() || this.d.isNaN();
            }
        }, {
            key: "isInt",
            value: function value() {
                return this.d.eq(1);
            }
        }, {
            key: "isNegative",
            value: function value() {
                return this.n.isNegative();
            }
        }, {
            key: "value",
            get: function get() {
                return [this.n, this.d];
            }
        }], [{
            key: "builder",
            value: function value() {
                for (var t = arguments.length, e = Array(t), r = 0; t > r; r++) {
                    e[r] = arguments[r];
                }return new (_bind.apply(n, [null].concat(e)))();
            }
        }]), n;
    }(),
        o = void 0,
        a = void 0,
        s = void 0,
        c = function c(n) {
        return o = n, a = new n(1), s = new n(NaN);
    };
    "function" == typeof define && define.amd ? define("FractionMathJs", ["BigNumber"], function (n) {
        return c(n), u;
    }) : "undefined" != typeof module && module.exports ? (c(require("BigNumber")), module.exports = u) : (c(n.BigNumber), n.FractionMathJs = u);
}(window || global);
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

if ((typeof JSON === "undefined" ? "undefined" : _typeof(JSON)) !== "object") {
    JSON = {};
}
(function () {
    "use strict";

    var rx_one = /^[\],:{}\s]*$/;
    var rx_two = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g;
    var rx_three = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
    var rx_four = /(?:^|:|,)(?:\s*\[)+/g;
    var rx_escapable = /[\\"\u0000-\u001f\u007f-\u009f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
    var rx_dangerous = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;

    function f(n) {
        // Format integers to have at least two digits.
        return n < 10 ? "0" + n : n;
    }
    function this_value() {
        return this.valueOf();
    }
    if (typeof Date.prototype.toJSON !== "function") {
        Date.prototype.toJSON = function () {
            return isFinite(this.valueOf()) ? this.getUTCFullYear() + "-" + f(this.getUTCMonth() + 1) + "-" + f(this.getUTCDate()) + "T" + f(this.getUTCHours()) + ":" + f(this.getUTCMinutes()) + ":" + f(this.getUTCSeconds()) + "Z" : null;
        };

        Boolean.prototype.toJSON = this_value;
        Number.prototype.toJSON = this_value;
        String.prototype.toJSON = this_value;
    }
    var gap;
    var indent;
    var meta;
    var rep;
    function quote(string) {
        rx_escapable.lastIndex = 0;
        return rx_escapable.test(string) ? "\"" + string.replace(rx_escapable, function (a) {
            var c = meta[a];
            return typeof c === "string" ? c : "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4);
        }) + "\"" : "\"" + string + "\"";
    }
    function str(key, holder) {
        var i; // The loop counter.
        var k; // The member key.
        var v; // The member value.
        var length;
        var mind = gap;
        var partial;
        var value = holder[key];
        if (value && (typeof value === "undefined" ? "undefined" : _typeof(value)) === "object" && typeof value.toJSON === "function") {
            value = value.toJSON(key);
        }
        if (typeof rep === "function") {
            value = rep.call(holder, key, value);
        }
        switch (typeof value === "undefined" ? "undefined" : _typeof(value)) {
            case "string":
                return quote(value);

            case "number":
                return isFinite(value) ? String(value) : "null";

            case "boolean":
            case "null":
                return String(value);
            case "object":
                if (!value) {
                    return "null";
                }
                gap += indent;
                partial = [];
                if (Object.prototype.toString.apply(value) === "[object Array]") {
                    length = value.length;
                    for (i = 0; i < length; i += 1) {
                        partial[i] = str(i, value) || "null";
                    }
                    v = partial.length === 0 ? "[]" : gap ? "[\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "]" : "[" + partial.join(",") + "]";
                    gap = mind;
                    return v;
                }
                if (rep && (typeof rep === "undefined" ? "undefined" : _typeof(rep)) === "object") {
                    length = rep.length;
                    for (i = 0; i < length; i += 1) {
                        if (typeof rep[i] === "string") {
                            k = rep[i];
                            v = str(k, value);
                            if (v) {
                                partial.push(quote(k) + (gap ? ": " : ":") + v);
                            }
                        }
                    }
                } else {
                    for (k in value) {
                        if (Object.prototype.hasOwnProperty.call(value, k)) {
                            v = str(k, value);
                            if (v) {
                                partial.push(quote(k) + (gap ? ": " : ":") + v);
                            }
                        }
                    }
                }
                v = partial.length === 0 ? "{}" : gap ? "{\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "}" : "{" + partial.join(",") + "}";
                gap = mind;
                return v;
        }
    }
    if (typeof JSON.stringify !== "function") {
        meta = { // table of character substitutions
            "\b": "\\b",
            "\t": "\\t",
            "\n": "\\n",
            "\f": "\\f",
            "\r": "\\r",
            "\"": "\\\"",
            "\\": "\\\\"
        };
        JSON.stringify = function (value, replacer, space) {
            var i;
            gap = "";
            indent = "";
            if (typeof space === "number") {
                for (i = 0; i < space; i += 1) {
                    indent += " ";
                }
            } else if (typeof space === "string") {
                indent = space;
            }
            rep = replacer;
            if (replacer && typeof replacer !== "function" && ((typeof replacer === "undefined" ? "undefined" : _typeof(replacer)) !== "object" || typeof replacer.length !== "number")) {
                throw new Error("JSON.stringify");
            }
            return str("", { "": value });
        };
    }
    if (typeof JSON.parse !== "function") {
        JSON.parse = function (text, reviver) {
            var j;
            function walk(holder, key) {
                var k;
                var v;
                var value = holder[key];
                if (value && (typeof value === "undefined" ? "undefined" : _typeof(value)) === "object") {
                    for (k in value) {
                        if (Object.prototype.hasOwnProperty.call(value, k)) {
                            v = walk(value, k);
                            if (v !== undefined) {
                                value[k] = v;
                            } else {
                                delete value[k];
                            }
                        }
                    }
                }
                return reviver.call(holder, key, value);
            }
            text = String(text);
            rx_dangerous.lastIndex = 0;
            if (rx_dangerous.test(text)) {
                text = text.replace(rx_dangerous, function (a) {
                    return "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4);
                });
            }
            if (rx_one.test(text.replace(rx_two, "@").replace(rx_three, "]").replace(rx_four, ""))) {
                j = eval("(" + text + ")");
                return typeof reviver === "function" ? walk({ "": j }, "") : j;
            }
            throw new SyntaxError("JSON.parse");
        };
    }

    define("JSON2", [], function () {
        return JSON;
    });
})();
"use strict";

/**
 * Created by zph on 2016/12/12 0012.
 */

define('LinearProgrammingLang', [], function () {

    var lang = {
        "linearprogramming_title": "简单的线性规划",
        "constraintcondition_text": "线性约束条件",
        "constraintcondition_clear": "清空",
        "constraintcondition_delete": "删除",
        "constraintcondition_graph": "约束条件及其图像",
        "constraintcondition_warning_iszero": "a、b不可同时为0",
        "feasibleregion_text": "显示可行域",
        "feasibleregion_hide_text": "隐藏可行域",
        "objectivefunction_text": "目标函数",
        "objectivefunction_clear": "清除",
        "objectivefunction_info_drag": "拖拽平移目标函数",
        "objectivefunction_maximum": "目标函数最值",
        "objectivefunction_warning_iszero": "a、b不可为0",
        "objectivefunction_numeroussolution": "无数个解",
        "objectivefunction_numeroussolution1": "无",
        "objectivefunction_numeroussolution2": "数",
        "objectivefunction_numeroussolution3": "解",
        "objectivefunction_optimumsolution": "最优解",
        "objectivefunction_integersolution": "整数解",
        "objectivefunction_calcing": "正在计算...",
        "constraintcondition_show_hide_info": "点击约束条件图像查看/隐藏解析式",

        get: function get(key) {
            return this[key];
        },
        extend: function extend(lang) {
            $.extend(this, lang);
        },
        initI18N: function initI18N($view) {
            this._linearProgramming($view);
        },
        _linearProgramming: function _linearProgramming($view) {
            $view.find('.lp_constraint_text .txt').text(this.get('constraintcondition_text'));
            $view.find('.btns-primary-txt').text(this.get('feasibleregion_text'));
            $view.find('.lp_objectfun_box .lp_constraint_text .txt').text(this.get('objectivefunction_text'));

            $view.find('.lp_solution_group.lp_solution_title .lp_item.lp_item_1 .text_box .txt').text(this.get('objectivefunction_maximum'));
            $view.find('.lp_solution_group.lp_solution_title .lp_item.lp_item_2 .text_box .txt').text(this.get('objectivefunction_optimumsolution'));
            $view.find('.lp_solution_group.lp_solution_title .lp_item.lp_item_3 .text_box .txt').text(this.get('objectivefunction_integersolution'));

            $view.find('.lp_solution_group.lp_solution_1 .lp_item.lp_item_2 .lp_item_2_wrap .lp_wushujie_text .txt').text(this.get('objectivefunction_numeroussolution'));
            $view.find('.lp_solution_group.lp_solution_2 .lp_item.lp_item_2 .lp_item_2_wrap .lp_wushujie_text .txt').text(this.get('objectivefunction_numeroussolution'));
        }
    };
    return lang;
});
'use strict';

/**
 * Created by ylf on 2015/12/13.
 */

define('LinearProgrammingLogger', [], function () {
    'use strict';

    var methods = ['assert', 'clear', 'count', 'debug', 'dir', 'dirxml', 'error', 'exception', 'group', 'groupCollapsed', 'groupEnd', 'info', 'log', 'markTimeline', 'profile', 'profileEnd', 'table', 'time', 'timeEnd', 'timeline', 'timelineEnd', 'timeStamp', 'trace', 'warn'];
    var length = methods.length;
    var _console = window.console = window.console || {};
    var method = null;

    var emptyFuc = function emptyFuc() {};

    while (length--) {
        method = methods[length];
        // Only stub undefined methods.
        if (!_console[method]) {
            _console[method] = emptyFuc;
        }
    }

    //logger level值(debug:3, info:2, warn:1, error: 0, close: -1)
    var _logger = {
        _level: 3,
        _console: _console,
        setLevel: function setLevel(level) {
            switch (level) {
                case 'debug':
                    this._level = 3;
                    break;
                case 'info':
                    this._level = 2;
                    break;
                case 'warn':
                    this._level = 1;
                    break;
                case 'error':
                    this._level = 0;
                    break;
                default:
                    this._level = -1;
            }
        },
        debug: function debug() {
            if (this._level >= 3) {
                this._console.log.apply(this._console, arguments);
            }
        },
        info: function info(msg) {
            if (this._level >= 2) {
                this._console.info.apply(this._console, arguments);
            }
        },
        warn: function warn(msg) {
            if (this._level >= 1) {
                this._console.warn.apply(this._console, arguments);
            }
        },
        error: function error(msg) {
            if (this._level >= 0) {
                this._console.error.apply(this._console, arguments);
            }
        }
    };

    return _logger;
});
'use strict';

/**
 * Created by Administrator on 2016/12/21 0021.
 */
define('Num2Fraction', [], function () {
    'use strict';

    var abs = Math.abs;
    var round = Math.round;

    function almostEq(a, b) {
        return abs(a - b) <= 9.5367432e-7;
    }

    //最大公约数 Greatest Common Divisor
    function GCD(a, b) {
        if (almostEq(b, 0)) return a;
        return GCD(b, a % b);
    }

    function findPrecision(n) {
        var e = 1;

        while (!almostEq(round(n * e) / e, n)) {
            e *= 10;
        }
        return e;
    }

    function num2fraction(num) {
        if (num === 0 || num === '0') return '0';

        if (typeof num === 'string') {
            num = parseFloat(num);
        }
        var precision = findPrecision(num); //精确度
        var number = num * precision;
        var gcd = abs(GCD(number, precision));

        //分子
        var numerator = number / gcd;
        //分母
        var denominator = precision / gcd;

        //分数
        return round(numerator) + '/' + round(denominator);
    }

    return num2fraction;
});
"use strict";

/**
 * Created by Administrator on 2017/1/6 0006.
 */

define("Prompter", ["LinearProgrammingLang"], function (Lang) {

    function Prompter() {
        var prompter = {};

        prompter.$content = $(".linearProgramming_main");

        prompter.isExist = function () {
            if ($(".lp_toast_wrapper").length > 0 || $(".lp_popTips_wrapper").length > 0) {
                return true;
            }
            return false;
        };

        prompter.toast = function (message, timeOut) {
            var html = '<div class="lp_toast_wrapper"><div class="lp_popTips_content_text"><span class="cptc_txt">' + message + '</span></div></div>';

            if (!this.isExist()) {
                prompter.$content.append(html);
                setTimeout(function () {
                    $(".lp_toast_wrapper").remove();
                }, timeOut);
            }
        };

        prompter.wait = function (message) {
            var html = '<div class="lp_toast_wrapper"><div class="lp_popTips_content_text"><span class="cptc_txt">' + message + '</span></div></div>';
            if (!this.isExist()) {
                prompter.$content.append(html);
            }
        };

        prompter.close = function (message) {
            $(".lp_toast_wrapper").remove();
        };

        prompter.alert = function (message, keyWord, onClose) {
            var okText = Lang.get("linearprogramming_ok");
            var whether = Lang.get("linearprogramming_whether");
            var html = '<div class="lp_popTips_wrapper lp_ensure_delete"><div class="lp_popTips_content"><div class="lp_popTips_content_bd"><div class="lp_popTips_content_text"><span class="cptc_txt before">' + whether + ' </span>';
            html += '<span class="cptc_txt red">' + keyWord + '</span>';
            html += '<span class="cptc_txt after">' + message + '</span></div></div><div class="lp_popTips_content_ft">';
            html += '<a class="com_btns btns-primary click_disabled" href="javascript:;"><span class="btns-primary-txt" >' + okText + '</span></a></div></div></div>';

            if (!this.isExist()) {
                prompter.$content.append(html);
                $(".lp_popTips_wrapper").find(".com_btns.btns-primary").off("click");
                $(".lp_popTips_wrapper").find(".com_btns.btns-primary").on("click", function () {
                    $("#alertDialog").remove();
                    if (onClose != null) {
                        onClose();
                    }
                });
            }
        };

        prompter.confirm = function (message, keyWord, onOk, onCancel) {
            var okText = Lang.get("linearprogramming_ok");
            var cancelText = Lang.get("linearprogramming_cancel");
            var whether = Lang.get("linearprogramming_whether");
            var html = '<div id="confirmDialog" class="lp_popTips_wrapper lp_ensure_delete"><div class="lp_popTips_content"><div class="lp_popTips_content_bd"><div class="lp_popTips_content_text"><span class="cptc_txt before">' + whether + ' </span>';
            html += '<span class="cptc_txt red">' + keyWord + '</span>';
            html += '<span class="cptc_txt after">' + message + '</span></div></div><div class="lp_popTips_content_ft">';
            html += '<a class="com_btns btns-primary " href="javascript:;"><span class="btns-primary-txt">' + okText + '</span></a><a class="com_btns btns-primary" href="javascript:;"><span class="btns-primary-txt">' + cancelText + '</span></a></div></div></div>';

            if (!this.isExist()) {
                prompter.$content.append(html);
                $(".lp_popTips_wrapper").find(".com_btns.btns-primary:eq(0)").off("click");
                $(".lp_popTips_wrapper").find(".com_btns.btns-primary:eq(0)").on("click", function () {
                    $(".lp_popTips_wrapper").remove();
                    if (onOk != null) {
                        onOk();
                    }
                });

                $(".lp_popTips_wrapper").find(".com_btns.btns-primary:eq(1)").off("click");
                $(".lp_popTips_wrapper").find(".com_btns.btns-primary:eq(1)").on("click", function () {
                    $(".lp_popTips_wrapper").remove();
                    if (onCancel != null) {
                        onCancel();
                    }
                });
            }
        };

        return prompter;
    }

    return new Prompter();
});
"use strict";

/**
 * Created by Administrator on 2016/12/7 0007.
 */
define("SoftKeyboard", [], function () {

    var InputCommand = function InputCommand() {
        var obj = {};
        obj.symbols = ["7", "8", "9", "4", "5", "6", "1", "2", "3", "0", ".", "del", "/", "cancel", "ok"];
        obj.text = "";
        obj.Input = {
            append: function append(c) {
                if (!this.checkNumber(obj.text, c)) {
                    return;
                }
                //if (obj.text.length > 4) {
                //    return;
                //}
                if ("0" === obj.text || "  " === obj.text || "a" === obj.text || "b" === obj.text || "c" === obj.text || "" === obj.text || undefined === obj.text) {
                    if ("0" === obj.text && c == ".") {} else {
                        obj.text = "";
                    }
                }
                return obj.text += c.toString();
            },
            checkNumber: function checkNumber(text, inputText) {
                if (text == null || text == undefined) {
                    return true;
                } else {
                    if ("a" === text || "b" === text || "c" === text || "" === text) {
                        if ("" === text && (inputText === "/" || inputText === ".")) {
                            return false;
                        }
                        return true;
                    } else if (text.split("-").length > 2 || text.split(".").length > 2 || text.split("/").length > 2) {
                        return false;
                    } else {
                        if (inputText === "-") {
                            if (text.length > 0) {
                                return false;
                            }
                            if (text.indexOf("-") > 0 || text.indexOf(".") > 0 || text.indexOf("/") > 0) {
                                return false;
                            }
                            return true;
                        } else if (inputText === ".") {
                            if (text.indexOf(".") > 0 || text.indexOf("/") > 0) {
                                return false;
                            }
                            if (text.indexOf("-") > 0 && text.length === 1) {
                                return false;
                            }
                            if (this.isFenShu(text)) {
                                return false;
                            }
                            if (text.length > 4) {
                                return false;
                            }
                            return true;
                        } else if (inputText === "/") {
                            if (text.indexOf(".") > 0 || text.indexOf("/") > 0) {
                                return false;
                            }
                            if (text.indexOf("-") > 0 && text.length === 1) {
                                return false;
                            };
                            if (this.isFenShu(text)) {
                                return false;
                            }
                            if (text.length > 5) {
                                return false;
                            }
                            return true;
                        } else {
                            if (text.substring(text.length - 1, text.length) === "/" && inputText === "0") {
                                return false;
                            }
                            if (text.substring(text.length - 1, text.length) === "/" && inputText === "0") {
                                return false;
                            }
                            if (this.isFenShu(text)) {
                                if (this.getFenZi(text).length > 5 || this.getFenMu(text).length > 4) {
                                    return false;
                                }
                            } else {
                                if (text.length > 4) {
                                    return false;
                                }
                            }

                            return true;
                        }
                        return true;
                    }
                }
            },
            isFenShu: function isFenShu(text) {
                if (text != null) {
                    if (text.length == 0) {
                        return false;
                    }
                    if (text.indexOf("/") > -1) {
                        return true;
                    }
                }
                return false;
            },
            getFenZi: function getFenZi(text) {
                if (text != null) {
                    if (this.isFenShu(text)) {
                        var fz = text.split("/")[0];
                        return fz;
                    }
                }
            },
            getFenMu: function getFenMu(text) {
                if (text != null) {
                    if (this.isFenShu(text)) {
                        var fm = text.split("/")[1];
                        return fm;
                    }
                }
            },
            number: function number(c) {
                return this.append(c);
            },
            dot: function dot() {
                return this.append(".");
            },
            del: function del() {
                if (obj.text != null && obj.text.length > 0) return obj.text.substring(0, obj.text.length - 1);else return "";
            },
            divided: function divided() {
                return this.append("/");
            },
            minus: function minus() {
                return this.append("-");
            },
            //大于
            greaterThan: function greaterThan(number) {
                var result = "";
                if (number.length > 0) {
                    result = "＞";
                }
                obj.text = result;
                return result;
            },
            //大于等于
            greaterThanOrEqual: function greaterThanOrEqual(number) {
                var result = "";
                if (number.length > 0) {
                    result = "≥";
                }
                obj.text = result;
                return result;
            },
            //小于
            lessThan: function lessThan(number) {
                var result = "";
                if (number.length > 0) {
                    result = "＜";
                }
                obj.text = result;
                return result;
            },
            //小于等于
            lessThanOrEqual: function lessThanOrEqual(number) {
                var result = "";
                if (number.length > 0) {
                    result = "≤";
                }
                obj.text = result;
                return result;
            },
            cancel: function cancel() {
                return obj.text = "";
            },
            ok: function ok() {
                return obj.text;
            }
        };
        obj.excute = function (msg) {
            if (msg != null) {
                msg.param = Object.prototype.toString.call(msg.param) === "[object Array]" ? msg.param : [msg.param];
                return obj.Input[msg.command].apply(obj.Input, msg.param);
            }
        };
        return obj;
    };

    var NumberKeyboard = function NumberKeyboard() {
        var obj = {};
        obj.text = "";
        obj.input = function (command, param) {
            var inputCommand = new InputCommand();
            inputCommand.text = obj.text;
            var text = inputCommand.excute({ "command": command, "param": param });
            return text;
        };
        return obj;
    };

    var SymbolKeyboard = function SymbolKeyboard() {
        var obj = {};
        obj.text = "";
        obj.input = function (command, param) {
            var inputCommand = new InputCommand();
            inputCommand.text = obj.text;
            var text = inputCommand.excute({ "command": command, "param": param });
            return text;
        };
        return obj;
    };

    var SoftKeyboard = function SoftKeyboard() {
        var softKeyboard = {};
        softKeyboard.value = "";
        softKeyboard.op = "";
        softKeyboard.view = {};
        softKeyboard.callback = null;
        softKeyboard.isStart = true;
        softKeyboard.number = function () {
            var text = $(softKeyboard.view).find(".num_input .num_input_text:eq(0)").text();
            if (softKeyboard.isStart && softKeyboard.op != "ok") {
                text = "";
            }
            var numberKeyboard = new NumberKeyboard();
            numberKeyboard.text = text;
            var inputText = numberKeyboard.input(softKeyboard.op, softKeyboard.value);
            //if ("  "=== text ||"a" === text || "b" === text || "c" === text || "" === text || "0" === text) {
            //    text = "";
            //}

            $(softKeyboard.view).find(".num_input .num_input_text:eq(0)").text(inputText);
            if (inputText != null) {
                if (inputText.indexOf("/") > -1) {

                    //负数
                    if (inputText.indexOf("-") > -1) {
                        $(softKeyboard.view).find(".lp_fenshu_item .num_input.fuhao").removeClass("hide_dom");
                    } else {
                        $(softKeyboard.view).find(".lp_fenshu_item .num_input.fuhao").addClass("hide_dom");
                    }
                    $(softKeyboard.view).find(".num_input .num_input_text:eq(0)").addClass("hide_dom");
                    $(softKeyboard.view).find(".lp_fenshu_item").removeClass("hide_dom");
                    var fenzi = inputText.split("/")[0].replace("-", "");
                    var fenmu = inputText.split("/")[1];
                    $(softKeyboard.view).find(".lp_fenshu_item .lp_fenshu_item_wrapper .lp_fenzi .num .num_text").text(fenzi);
                    $(softKeyboard.view).find(".lp_fenshu_item .lp_fenshu_item_wrapper .lp_fenmu .num .num_text").text(fenmu);
                } else {
                    $(softKeyboard.view).find(".lp_fenshu_item").addClass("hide_dom");
                    $(softKeyboard.view).find(".num_input .num_input_text:eq(0)").removeClass("hide_dom");
                    $(softKeyboard.view).find(".num_input .num_input_text:eq(0)").text(inputText);
                }
            }
            if (softKeyboard.op === "ok") {
                softKeyboard.callback();
            }
            softKeyboard.isStart = false;
        };
        softKeyboard.inequality = function () {
            var symbolKeyboard = new SymbolKeyboard();
            var inputText = symbolKeyboard.input(softKeyboard.op, softKeyboard.value);
            $(softKeyboard.view).find(".num_input .num_input_text:eq(0)").text(inputText);
            softKeyboard.callback();
        };
        return softKeyboard;
    };

    return new SoftKeyboard();
});
"use strict";

/**
 * Created by Administrator on 2016/12/12 0012.
 */
define('LinearProgrammingUtils', function () {
    var Utils = {
        getUuid: function getUuid() {
            var s = [];
            var hexDigits = "0123456789abcdef";
            for (var i = 0; i < 36; i++) {
                s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1);
            }
            s[14] = "4"; // bits 12-15 of the time_hi_and_version field to 0010
            s[19] = hexDigits.substr(s[19] & 0x3 | 0x8, 1); // bits 6-7 of the clock_seq_hi_and_reserved to 01
            s[8] = s[13] = s[18] = s[23] = "-";

            var uuid = s.join("");
            return uuid;
        },
        template: function template(tpl, attrs) {
            var templateRegExp = /\$\{(.+?)(?:\:(.+?))?\}/g;
            return tpl.replace(templateRegExp, function ($0, $1, $2) {
                if (attrs[$1] !== undefined) {
                    return attrs[$1];
                }
                return $0;
            });
        },
        getPagePos: function getPagePos(ev, scale) {
            var ev = ev.originalEvent ? ev.originalEvent : ev;
            var point = {};
            scale = scale || 1;
            switch (ev.type) {
                case 'touchstart':
                case 'touchmove':
                case 'touchend':
                case 'touchcancel':
                    point.x = ev.changedTouches[0].pageX / scale;
                    point.y = ev.changedTouches[0].pageY / scale;
                    return point;
                default:
                    point.x = ev.pageX / scale;
                    point.y = ev.pageY / scale;
                    return point;
            }
            return point;
        },
        getScale: function getScale(dom) {
            //This works because getBoundingClientRect returns the actual dimension while offsetWidth/Height is the unscaled size.
            var scaleX = dom.getBoundingClientRect().width / dom.offsetWidth || 1;
            return scaleX;
        }
    };
    return Utils;
});
'use strict';

/**
 * Created by Administrator on 2016/12/12 0012.
 */

define('LinearProgrammingViewManager', ['LinearProgrammingController'], function (Controller) {

        //视图
        var View = function View($view) {
                var obj = {};
                obj.$axisView = $view.find(".lp_axis_left .lp_axis_box");
                obj.$softKeyboardNumber = $view.find(".lp_drop_select.lp_drop_select_num");
                obj.$softKeyboardInequality = $view.find(".lp_drop_select.lp_drop_select_sign");

                obj.$scrollbar = $view.find(".lp_constraint_table .lp_constraint_bd.lp_light_scrollbar");
                obj.$linearProgramming_main = $view.find(".linearProgramming_main");

                obj.condition = {};
                obj.condition.$condition_scrollbar = $view.find(".lp_constraint_bd.lp_light_scrollbar");
                obj.condition.$condition_list = $view.find(".lp_condition_list");
                obj.condition.$a = $view.find(".lp_condition_list .lp_li_item .lp_input_x .lp_drop_num ");
                obj.condition.$b = $view.find(".lp_condition_list .lp_li_item .lp_input_y .lp_drop_num ");
                obj.condition.$c = $view.find(".lp_condition_list .lp_li_item .lp_input_c .lp_drop_num ");
                obj.condition.$s = $view.find(".lp_condition_list .lp_li_item .lp_input_sign .lp_drop_num ");
                obj.condition.$del = $view.find(".lp_constraint_box .com_btns.btns-primary.lp_btn_delete");

                obj.condition.$arrow_odd = $view.find(".lp_condition_list .lp_li_item_wrap .lp_icon_arrow:odd");
                obj.condition.$arrow_even = $view.find(".lp_condition_list .lp_li_item_wrap .lp_icon_arrow:even");
                obj.condition.$arrow_box = $view.find(".lp_condition_list .lp_li_item_wrap .lp_icon_box");
                obj.condition.$arrow_del = $view.find(".lp_condition_list .lp_icon_delete_box");
                obj.condition.$arrow_del_icon = $view.find(".lp_condition_list .lp_icon_delete_box>.icon");
                obj.condition.$arrow_eye = $view.find(".lp_condition_list .lp_icon_eye_box ");
                obj.condition.$arrow_eye_icon = $view.find(".lp_condition_list .lp_icon_eye_box>.icon ");

                obj.condition.$feasibleRegion = $view.find(".com_btns.btns-primary.lp_show_space");

                obj.condition.$feasibleRegionText = $view.find(".com_btns.btns-primary.lp_show_space .btns-primary-txt");

                obj.objectiveFunction = {};
                obj.objectiveFunction.$a = $view.find(".lp_function_wrap .lp_input_x .lp_drop_num ");
                obj.objectiveFunction.$b = $view.find(".lp_function_wrap .lp_input_y .lp_drop_num ");
                obj.objectiveFunction.$del = $view.find(".lp_function_main .com_btns.btns-primary.lp_btn_delete");

                obj.objectiveFunction.$max_solution = $view.find(".lp_solution_group.lp_solution_1");
                obj.objectiveFunction.$max_solution1 = $view.find(".lp_solution_group.lp_solution_1 .lp_item.lp_item_1");
                obj.objectiveFunction.$max_solution2 = $view.find(".lp_solution_group.lp_solution_1 .lp_item.lp_item_2");
                obj.objectiveFunction.$max = $view.find(".lp_solution_group.lp_solution_1 .lp_item.lp_item_1 .text_box .txt");
                obj.objectiveFunction.$max_fenshu = $view.find(".lp_solution_group.lp_solution_1 .lp_item.lp_item_1 .text_box .lp_fenshu_item");
                obj.objectiveFunction.$max_fenhao = $view.find(".lp_solution_group.lp_solution_1 .lp_item.lp_item_1 .text_box .lp_fenshu_item .num_input.fuhao");
                obj.objectiveFunction.$max_fz = $view.find(".lp_solution_group.lp_solution_1 .lp_item.lp_item_1 .text_box .lp_fenshu_item .lp_fenzi .num .num_text");
                obj.objectiveFunction.$max_fm = $view.find(".lp_solution_group.lp_solution_1 .lp_item.lp_item_1 .text_box .lp_fenshu_item .lp_fenshu_item_wrapper .lp_fenmu .num .num_text");
                obj.objectiveFunction.$maxPointX = $view.find(".lp_solution_group.lp_solution_1 .lp_item.lp_item_2 .lp_bracket_box.text_box .txt:eq(0)");
                obj.objectiveFunction.$maxPointX_fenshu = $view.find(".lp_solution_group.lp_solution_1 .lp_item.lp_item_2 .lp_bracket_box.text_box .lp_fenshu_item:eq(0)");
                obj.objectiveFunction.$maxPointX_fenhao = $view.find(".lp_solution_group.lp_solution_1 .lp_item.lp_item_2 .lp_bracket_box.text_box .lp_fenshu_item:eq(0) .num_input.fuhao");
                obj.objectiveFunction.$maxPointX_fz = $view.find(".lp_solution_group.lp_solution_1 .lp_item.lp_item_2 .lp_bracket_box.text_box .lp_fenshu_item:eq(0) .lp_fenshu_item_wrapper .lp_fenzi .num .num_text");
                obj.objectiveFunction.$maxPointX_fm = $view.find(".lp_solution_group.lp_solution_1 .lp_item.lp_item_2 .lp_bracket_box.text_box .lp_fenshu_item:eq(0) .lp_fenshu_item_wrapper .lp_fenmu .num .num_text");

                obj.objectiveFunction.$maxPointComma = $view.find(".lp_solution_group.lp_solution_1 .lp_item.lp_item_2 .lp_bracket_box.text_box .txt:eq(1)");
                obj.objectiveFunction.$maxPointY = $view.find(".lp_solution_group.lp_solution_1 .lp_item.lp_item_2 .lp_bracket_box.text_box .txt:eq(2)");
                obj.objectiveFunction.$maxPointY_fenshu = $view.find(".lp_solution_group.lp_solution_1 .lp_item.lp_item_2 .lp_bracket_box.text_box .lp_fenshu_item:eq(1)");
                obj.objectiveFunction.$maxPointY_fenhao = $view.find(".lp_solution_group.lp_solution_1 .lp_item.lp_item_2 .lp_bracket_box.text_box .lp_fenshu_item:eq(1) .num_input.fuhao");
                obj.objectiveFunction.$maxPointY_fz = $view.find(".lp_solution_group.lp_solution_1 .lp_item.lp_item_2 .lp_bracket_box.text_box .lp_fenshu_item:eq(1) .lp_fenzi .num .num_text");
                obj.objectiveFunction.$maxPointY_fm = $view.find(".lp_solution_group.lp_solution_1 .lp_item.lp_item_2 .lp_bracket_box.text_box .lp_fenshu_item:eq(1) .lp_fenmu .num .num_text");

                obj.objectiveFunction.$maxTriangleExpand = $view.find(".lp_solution_group.lp_solution_1 .lp_item.lp_item_2 .lp_triangle_expand");

                obj.objectiveFunction.$maxMulSolutionItem = $view.find(".lp_solution_group.lp_solution_1 .lp_item.lp_item_2 .lp_bracket_box.text_box.change_bracket_box");
                obj.objectiveFunction.$maxMulSolution = $view.find(".lp_solution_group.lp_solution_1 .lp_item.lp_item_2 .lp_mul_solution ");
                obj.objectiveFunction.$maxMulSolution_1 = $view.find(".lp_solution_group.lp_solution_1 .lp_item.lp_item_2 .lp_mul_solution .lp_mul_solution_wrap.lp_light_scrollbar_2");
                obj.objectiveFunction.$maxMulSolution_2 = $view.find(".lp_solution_group.lp_solution_1 .lp_item.lp_item_2 .lp_item_2_wrap ");
                obj.objectiveFunction.$maxMulSolutionFontSize = $view.find(".lp_solution_group.lp_solution_1");
                // obj.objectiveFunction.$maxIntCheck = $view.find(".lp_solution_group.lp_solution_1 .lp_item.lp_item_3 .com_applicationset_switch.lp_int_solution");
                obj.objectiveFunction.$maxIntCheck = $view.find("#max_int_solution_checkbox");
                obj.objectiveFunction.$maxNumerousSolution = $view.find(".lp_solution_group.lp_solution_1 .lp_item.lp_item_2 .lp_wushujie_text.text_box");
                obj.objectiveFunction.$maxBracket = $view.find(".lp_solution_group.lp_solution_1 .lp_item.lp_item_2 .lp_bracket_box.text_box");

                obj.objectiveFunction.$min_solution = $view.find(".lp_solution_group.lp_solution_2");
                obj.objectiveFunction.$min_solution1 = $view.find(".lp_solution_group.lp_solution_2 .lp_item.lp_item_1");
                obj.objectiveFunction.$min_solution2 = $view.find(".lp_solution_group.lp_solution_2 .lp_item.lp_item_2");
                obj.objectiveFunction.$min = $view.find(".lp_solution_group.lp_solution_2 .lp_item.lp_item_1 .text_box .txt");
                obj.objectiveFunction.$min_fenshu = $view.find(".lp_solution_group.lp_solution_2 .lp_item.lp_item_1 .text_box .lp_fenshu_item:eq(0)");
                obj.objectiveFunction.$min_fenhao = $view.find(".lp_solution_group.lp_solution_2 .lp_item.lp_item_1 .text_box .lp_fenshu_item:eq(0) .num_input.fuhao");
                obj.objectiveFunction.$min_fz = $view.find(".lp_solution_group.lp_solution_2 .lp_item.lp_item_1 .text_box .lp_fenshu_item:eq(0) .lp_fenshu_item_wrapper .lp_fenzi .num .num_text");
                obj.objectiveFunction.$min_fm = $view.find(".lp_solution_group.lp_solution_2 .lp_item.lp_item_1 .text_box .lp_fenshu_item:eq(0) .lp_fenshu_item_wrapper .lp_fenmu .num .num_text");

                obj.objectiveFunction.$minPointX = $view.find(".lp_solution_group.lp_solution_2 .lp_item.lp_item_2 .lp_bracket_box.text_box .txt:eq(0)");
                obj.objectiveFunction.$minPointX_fenshu = $view.find(".lp_solution_group.lp_solution_2 .lp_item.lp_item_2 .lp_bracket_box.text_box .lp_fenshu_item:eq(0)");
                obj.objectiveFunction.$minPointX_fenhao = $view.find(".lp_solution_group.lp_solution_2 .lp_item.lp_item_2 .lp_bracket_box.text_box .lp_fenshu_item:eq(0) .num_input.fuhao");
                obj.objectiveFunction.$minPointX_fz = $view.find(".lp_solution_group.lp_solution_2 .lp_item.lp_item_2 .lp_bracket_box.text_box .lp_fenshu_item:eq(0) .lp_fenshu_item_wrapper .lp_fenzi .num .num_text");
                obj.objectiveFunction.$minPointX_fm = $view.find(".lp_solution_group.lp_solution_2 .lp_item.lp_item_2 .lp_bracket_box.text_box .lp_fenshu_item:eq(0) .lp_fenshu_item_wrapper .lp_fenmu .num .num_text");

                obj.objectiveFunction.$minPointComma = $view.find(".lp_solution_group.lp_solution_2 .lp_item.lp_item_2 .lp_bracket_box.text_box .txt:eq(1)");
                obj.objectiveFunction.$minPointY = $view.find(".lp_solution_group.lp_solution_2 .lp_item.lp_item_2 .lp_bracket_box.text_box .txt:eq(2)");
                obj.objectiveFunction.$minPointY_fenshu = $view.find(".lp_solution_group.lp_solution_2 .lp_item.lp_item_2 .lp_bracket_box.text_box .lp_fenshu_item:eq(1)");
                obj.objectiveFunction.$minPointY_fenhao = $view.find(".lp_solution_group.lp_solution_2 .lp_item.lp_item_2 .lp_bracket_box.text_box .lp_fenshu_item:eq(1) .num_input.fuhao");
                obj.objectiveFunction.$minPointY_fz = $view.find(".lp_solution_group.lp_solution_2 .lp_item.lp_item_2 .lp_bracket_box.text_box .lp_fenshu_item:eq(1) .lp_fenshu_item_wrapper .lp_fenzi .num .num_text");
                obj.objectiveFunction.$minPointY_fm = $view.find(".lp_solution_group.lp_solution_2 .lp_item.lp_item_2 .lp_bracket_box.text_box .lp_fenshu_item:eq(1) .lp_fenshu_item_wrapper .lp_fenmu .num .num_text");

                obj.objectiveFunction.$minTriangleExpand = $view.find(".lp_solution_group.lp_solution_2 .lp_item.lp_item_2 .lp_triangle_expand");

                obj.objectiveFunction.$minMulSolutionItem = $view.find(".lp_solution_group.lp_solution_2 .lp_item.lp_item_2 .lp_bracket_box.text_box.change_bracket_box");
                obj.objectiveFunction.$minMulSolution = $view.find(".lp_solution_group.lp_solution_2 .lp_item.lp_item_2 .lp_mul_solution ");
                obj.objectiveFunction.$minMulSolution_1 = $view.find(".lp_solution_group.lp_solution_2 .lp_item.lp_item_2 .lp_mul_solution .lp_mul_solution_wrap.lp_light_scrollbar_2");
                obj.objectiveFunction.$minMulSolution_2 = $view.find(".lp_solution_group.lp_solution_2 .lp_item.lp_item_2 .lp_item_2_wrap ");
                obj.objectiveFunction.$minMulSolutionFontSize = $view.find(".lp_solution_group.lp_solution_2");
                // obj.objectiveFunction.$minIntCheck = $view.find(".lp_solution_group.lp_solution_2 .lp_item.lp_item_3 .com_applicationset_switch.lp_int_solution");
                obj.objectiveFunction.$minIntCheck = $view.find("#min_int_solution_checkbox");
                obj.objectiveFunction.$minNumerousSolution = $view.find(".lp_solution_group.lp_solution_2 .lp_item.lp_item_2 .lp_wushujie_text.text_box");
                obj.objectiveFunction.$minBracket = $view.find(".lp_solution_group.lp_solution_2 .lp_item.lp_item_2 .lp_bracket_box.text_box");

                obj.objectiveFunction.$maxTriangleExpand = $view.find(".lp_solution_group.lp_solution_1 .lp_item.lp_item_2 .lp_triangle_expand");
                obj.objectiveFunction.$maxTriangleFold = $view.find(".lp_solution_group.lp_solution_1 .lp_item.lp_item_2 .lp_triangle_fold");

                obj.objectiveFunction.$minTriangleExpand = $view.find(".lp_solution_group.lp_solution_2 .lp_item.lp_item_2 .lp_triangle_expand");
                obj.objectiveFunction.$minTriangleFold = $view.find(".lp_solution_group.lp_solution_2 .lp_item.lp_item_2 .lp_triangle_fold");

                return obj;
        };

        //视图管理
        var ViewManager = function ViewManager() {
                var obj = {};
                obj.client = null;
                obj.option = null;
                obj.basePath = null;
                obj.view = null;
                obj.data = null;
                obj.runTime = null;
                obj.create = function ($view, runTime) {
                        var view1 = new View($view);
                        obj.view = view1;

                        var ins = Object.create(this);
                        ins.client = Controller.create(view1, runTime);
                        ins.runTime = runTime;
                        ins.initView();
                        ins.bindEvent();
                        return ins;
                };
                obj.getData = function () {
                        return this.client.getData();
                };
                obj.render = function (data) {
                        obj.data = data;
                        this.client.basePath = this.basePath;
                        this.client.render(data);
                };
                obj.initView = function () {
                        this.client.initView();
                };
                obj.bindEvent = function () {
                        this.client.bindEvent();
                };
                obj.zoom = function (data) {
                        this.client.zoom(data);
                };
                obj.destroy = function () {
                        this.client.destroy();
                        $(document.body).off('mouseup.sd mouseleave.sd touchend.sd touchcancel.sd mousemove.sd touchmove.sd');
                        $(document.body).off('click.sp touchend.sp');
                };

                return obj;
        };
        return new ViewManager();
});]]></presenter><resources><file src="./resources/index.html"/><file src="./resources/LP_Workers.js"/><file src="./resources/wood/_style_wood.scss"/><file src="./resources/wood/images/bg.png"/><file src="./resources/wood/images/icon_0.png"/><file src="./resources/wood/images/icon_add.png"/><file src="./resources/wood/images/icon_arrow.png"/><file src="./resources/wood/images/icon_back.png"/><file src="./resources/wood/images/icon_delete.png"/><file src="./resources/wood/images/icon_equal.png"/><file src="./resources/wood/images/icon_equal2.png"/><file src="./resources/wood/images/icon_eye_dis.png"/><file src="./resources/wood/images/icon_eye_hide.png"/><file src="./resources/wood/images/icon_eye.png"/><file src="./resources/wood/images/icon_line.png"/><file src="./resources/wood/images/icon_sign_d.png"/><file src="./resources/wood/images/icon_sign_dd.png"/><file src="./resources/wood/images/icon_sign_x.png"/><file src="./resources/wood/images/icon_sign_xd.png"/><file src="./resources/wood/images/icon_sign.png"/><file src="./resources/wood/images/icon_triangle.png"/><file src="./resources/wood/images/icon_x.png"/><file src="./resources/wood/images/icon_xy.png"/><file src="./resources/wood/images/icon_y.png"/><file src="./resources/wood/images/icon_z.png"/><file src="./resources/wood/images/z.png"/><file src="./resources/wood/images/z1.png"/></resources></addon>