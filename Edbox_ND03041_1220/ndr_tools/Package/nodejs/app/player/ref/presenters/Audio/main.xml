<?xml version='1.0' encoding='UTF-8' ?>
<addon id='Audio'> 
<properties>

                <property name="id" displayName="" type="string" isLocalized="false" />
                <property name="mp3" displayName="" type="file" isLocalized="false" />

</properties>

<dependencies>



</dependencies>

<css>



</css>


<view>

<![CDATA[<div style="width: 100%;height: 100%;">
  <audio controls="controls" preload="none">
    Your browser does not support the audio element.
  </audio>
</div>]]>
</view>


<preview>



</preview>


<presenter>

<![CDATA[function AddonAudio_create(){
    function MediaEventController(){

       var presenter = null,
           mediaPlayer = null,
           mediaId = null,
           userInfo = null;

       this.init = function(_presenter,_mediaPlayer,_mediaId){

           if(checkEnvironment()){

              presenter = _presenter;
              mediaPlayer = _mediaPlayer;
              mediaId = _mediaId;
              userInfo = getCurrentUserInfo();

              if(userInfo.isProjectionMobile){
     initProjectionMobile();
              }

           }

           return this;

       };

       function getCurrentUserInfo(){

           var userInfo = Bridge.callNative("com.nd.pad.icr.ui.IcrJsBridge", "getCurrentUserInfo", {});

           console.log("userInfo - ",userInfo);

           return {
              isTeacherMobile:userInfo.userType === 'TEACHER',
              isProjectionMobile:userInfo.isProjector
           };

       }

       function initProjectionMobile(){

    var bridgeListener = Bridge.registerListener('TriggerUserInput', function(eventData){

        console.log("eventController["+mediaId+"] receive event - ",eventData);

        if(!supportEvent(eventData)){
      return;
        }

        switch(eventData.name){
      case 'start':
          mediaPlayer.mediaPlay(eventData.data.mediaType, eventData.data.index);
          break;
      case 'pause':
                            if(!eventData.data.ended){
             mediaPlayer.mediaPause(eventData.data.mediaType, eventData.data.index);
                            }
          break;
      case 'seeked':
          mediaPlayer.mediaSkip(eventData.data.mediaType, eventData.data.index, eventData.data.seeked);
          break;
      case 'volumeChange':
          mediaPlayer.mediaVolumeChange(eventData.data.mediaType, eventData.data.index, eventData.data.volume, eventData.data.display);
          break;
        }

    });

                presenter.destroy = function() {
                 Bridge.unRegisterListener('TriggerUserInput', bridgeListener);
          };

       }

       this.getMediaEventListener = function(eventName){

           if(!userInfo || userInfo.isProjectionMobile){
              return;
           }

           return function(event){
               sendEvent(eventName,event);
           };

       };

       function sendEvent(eventName, eventData){

              console.log("eventController["+mediaId+"] send event - ",eventName,eventData);

        Bridge.callNative("com.nd.pad.icr.ui.IcrJsBridge", "sendEvent", {
    "eventName": "UserInput",
    "eventData": {
      "mediaId": mediaId,
      "name": eventName,
      "data": eventData
    }
        });

       }

       function supportEvent(eventData){
          return mediaId === eventData.mediaId;
       }

       function checkEnvironment(){
          return (typeof AndroidInterface != "undefined");
       }

    }

    var presenter = {};

     presenter.setPlayerController = function (controller) {
        presenter.controller = controller;
        presenter.eventBus = presenter.controller.getEventBus();
        presenter.eventBus.addEventListener('AnswerSubmitterEvent', presenter);

    };

   presenter.onEventReceived = function(eventName, eventData) {
          switch (eventName) {
            case 'AnswerSubmitterEvent':
                if (eventData.event == 'finished') {
                 presenter.close();
                }
                break;
         }

    };


    presenter.getModel = function() {
      return presenterModel;
    };

    presenter.close = function() {
    for(var key in mediaPlayer) {
    mediaPlayer[key].mediaPlay();
    mediaPlayer[key].mediaPause();
    }
    };

    var presenterModel;

    presenter.run = function(view, model) {
       console.log(model);
       presenter.render(view, model);
    };

    presenter.render = function(view, model){

        var audio = $(view).find("audio"),
            mediaId = model.id,
            mediaEventController = new MediaEventController().init(presenter,NDMediaPlayer,mediaId);

        audio.attr("src",model.mp3);

        mediaPlayer = NDMediaPlayer.render(view, {
            containerId: mediaId,
            onlyRender: false,
            mediaMargin:"0px",
            autoAdaptSize: true,
            returnInstances:true,
            audioWidth:model.Width,
            onPlay: mediaEventController.getMediaEventListener("start"),
            onPause: mediaEventController.getMediaEventListener("pause"),
            onSeek: mediaEventController.getMediaEventListener("seeked"),
            onVolumeChange: mediaEventController.getMediaEventListener("volumeChange")
        });

    };

    return presenter;
}]]>

</presenter>


<resources>



</resources>

</addon>