<?xml version='1.0' encoding='UTF-8'?>
<addon id="templateid"><properties/><dependencies><jsDependency><javaScript name="snap_svg" version="1.0.0"/><javaScript name="tools_common" version="1.3.0"/></jsDependency></dependencies><css><![CDATA[.exam_skin_wood .ShortestPath_wrapper{width:100%;height:100%;position:relative;background:#bfd3e2;overflow:hidden}.exam_skin_wood .ShortestPath_wrapper .ShortestPath_main{position:absolute;left:0;right:0;height:36.66667em;top:50%;margin-top:-19.83333em;text-align:left}.exam_skin_wood .ShortestPath_wrapper .ShortestPath_bottom{position:absolute;bottom:0;left:0;background:#cfdee9}.exam_skin_wood .ShortestPath_wrapper .ShortestPath_Demonstration_area{position:relative;display:inline-block;width:68.83333em;height:100%;vertical-align:middle;float:right;margin-right:11.125em}.exam_skin_wood .ShortestPath_wrapper .ShortestPath_green_bg{position:absolute;left:0;display:inline-block;right:11.125em;height:100%;background:#71b031}.exam_skin_wood .ShortestPath_wrapper .ShortestPath_defaultone_bg_area{position:relative;display:inline-block;width:100%;height:100%;vertical-align:middle}.exam_skin_wood .ShortestPath_wrapper .ShortestPath_defaultone_bg_area.bg{background-image:url(resources/wood/images/1.png);background-size:100% 100%}.exam_skin_wood .ShortestPath_wrapper .ShortestPath_defaultone_bg_area.bg:before{content:"";position:absolute;width:100%;height:100%;background-image:url(resources/wood/images/1before.png);background-size:100% 100%;display:inline-block;right:100%}.exam_skin_wood .ShortestPath_wrapper .ShortestPath_defaulttwo_bg_area{position:relative;display:inline-block;width:100%;height:100%;vertical-align:middle}.exam_skin_wood .ShortestPath_wrapper .ShortestPath_defaulttwo_bg_area.bg{background-image:url(resources/wood/images/2.png);background-size:100% 100%}.exam_skin_wood .ShortestPath_wrapper .ShortestPath_defaulttwo_bg_area.bg:before{content:"";position:absolute;width:100%;height:100%;background-image:url(resources/wood/images/2before.png);background-size:100% 100%;display:inline-block;right:100%}.exam_skin_wood .ShortestPath_wrapper .ShortestPath_defaulttwo_bg_area.bg:after{content:"";position:absolute;width:100%;height:100%;background-image:url(resources/wood/images/2after.png);background-size:100% 100%;display:inline-block;top:100%;left:0}.exam_skin_wood .ShortestPath_wrapper .ShortestPath_defaultone_area,.exam_skin_wood .ShortestPath_wrapper .ShortestPath_defaulttwo_area{position:relative;display:inline-block;width:64.66667em;height:100%;margin-left:4.16667em;vertical-align:middle}.exam_skin_wood .ShortestPath_wrapper .ShortestPath_compare{position:absolute;left:.41667em;top:.41667em;display:inline-block;min-height:3.125em;margin-left:4.16667em;text-align:left;padding:.5em;border-radius:.41667em;background:rgba(210,224,235,.5)}.exam_skin_wood .ShortestPath_wrapper .ShortestPath_showPath_wrapper{position:absolute;display:inline-block;bottom:.20833em;min-width:18.75em;min-height:6.25em;left:4.16667em;text-align:left;padding:.5em}.exam_skin_wood .ShortestPath_wrapper .ShortestPath_side{position:absolute;display:inline-block;vertical-align:middle;width:5.83333em;overflow:hidden;border-radius:.5em;right:4.66667em;margin-left:.66667em;top:50%;margin-top:-4.83333em;z-index:9999}.exam_skin_wood .ShortestPath_wrapper .ShortestPath_mode_list{background:#b0c9dc;cursor:pointer}.exam_skin_wood .ShortestPath_wrapper .ShortestPath_mode_list .mode_pic{height:6.5em;margin:0 1.16667em;border-bottom:1px solid #7f9cb2;background-position:50%;background-repeat:no-repeat}.exam_skin_wood .ShortestPath_wrapper .ShortestPath_mode_list .mode_pic.mode_item1{background-image:url(resources/wood/images/icon_tool_m1.png);background-size:5.83333em auto}.exam_skin_wood .ShortestPath_wrapper .ShortestPath_mode_list .mode_pic.mode_item2{background-image:url(resources/wood/images/icon_tool_m2.png);background-size:5.83333em auto}.exam_skin_wood .ShortestPath_wrapper .ShortestPath_mode_list.on{background:#95b7d1}.exam_skin_wood .ShortestPath_wrapper .ShortestPath_mode_list:last-child .mode_pic{border:none}.exam_skin_wood .ShortestPath_wrapper .ShortestPath_bottom{width:100%;padding:0 4.16667em;height:5.70833em!important;vertical-align:middle;text-align:center}.exam_skin_wood .ShortestPath_wrapper .ShortestPath_bottom .spolar_com_btns{position:relative;display:inline-block;vertical-align:middle;padding:1.29167em 0 1.25em;z-index:9999}.exam_skin_wood .ShortestPath_wrapper .ShortestPath_bottom .btns-primary{min-width:11.41667em}.exam_skin_wood .ShortestPath_wrapper .ShortestPath_bottom .reset_btn{min-width:8.66667em}.exam_skin_wood .ShortestPath_wrapper .ShortestPath_pop_mask{position:absolute;left:0;top:0;right:0;bottom:0;background:0 0;z-index:1001}.exam_skin_wood .ShortestPath_wrapper .higher_mask{z-index:99999}.exam_skin_wood .ShortestPath_wrapper .ShortestPath_pop{min-height:7.5em;min-width:33.58333em;margin-top:-1.33333em}.exam_skin_wood .ShortestPath_wrapper .ShortestPath_pop_main{line-height:3.66667em;font-size:1em}.exam_skin_wood .ShortestPath_wrapper .ShortestPath_pop_txt{font-size:2em;padding-top:.20833em}.exam_skin_wood .ShortestPath_wrapper .compare_txt{font-size:2.5em;font-weight:700;color:#cb1f1f;padding-left:.25em}.exam_skin_wood .ShortestPath_wrapper .show_path_txt{font-size:2.5em;font-weight:700}.exam_skin_wood .ShortestPath_wrapper .show_path_btn{margin-top:.83333em;margin-left:-.20833em}.exam_skin_wood .ShortestPath_wrapper .target_path_txt{font-size:2em;color:#8300de;margin:0 .20833em;font-weight:700}.exam_skin_wood .ShortestPath_wrapper .operate_path_txt{font-size:2em;color:#cb1f1f;margin:0 .20833em;font-weight:700}.exam_skin_wood .ShortestPath_wrapper .pop_character{padding:0 .20833em;font-size:1.25em}.exam_skin_wood .ShortestPath_wrapper .svg_character_fontsize{font-size:3.54167em;font-weight:700}.exam_skin_wood .ShortestPath_wrapper .svg_linecharacter_fontsize{font-size:5.20833em;font-weight:700}.typefaces_long .exam_skin_wood .ShortestPath_wrapper .ShortestPath_bottom .com_btns{overflow:hidden;max-width:20%;line-height:2.8em}.typefaces_long .exam_skin_wood .ShortestPath_wrapper .ShortestPath_bottom .com_btns.reset_btn{width:9em}.typefaces_long .exam_skin_wood .ShortestPath_wrapper .ShortestPath_bottom .com_btns:after{content:"";display:inline-block;width:0;height:100%;vertical-align:middle}.typefaces_long .exam_skin_wood .ShortestPath_wrapper .ShortestPath_bottom .com_btns .btns-primary-txt{display:inline-block;overflow:hidden;width:96%;max-height:100%;line-height:1.2;font-size:1.16667em;vertical-align:middle}.typefaces_ru_RU .exam_skin_wood .ShortestPath_wrapper .ShortestPath_bottom .com_btns{overflow:hidden;max-width:20%;line-height:2.8em}.typefaces_ru_RU .exam_skin_wood .ShortestPath_wrapper .ShortestPath_bottom .com_btns.reset_btn{width:9em}.typefaces_ru_RU .exam_skin_wood .ShortestPath_wrapper .ShortestPath_bottom .com_btns:after{content:"";display:inline-block;width:0;height:100%;vertical-align:middle}.typefaces_ru_RU .exam_skin_wood .ShortestPath_wrapper .ShortestPath_bottom .com_btns .btns-primary-txt{display:inline-block;overflow:hidden;width:96%;max-height:100%;line-height:1.2;font-size:1.16667em;vertical-align:middle}]]></css><view><![CDATA[<div class="exam_skin_wood" id="layout"><div class="ShortestPath_wrapper js_ShortestPath_wrapper"><span class="ShortestPath_green_bg js_ShortestPath_green_bg"></span><div class="ShortestPath_main"><div class="ShortestPath_Demonstration_area"><div class="ShortestPath_defaultone_bg_area bg js_ShortestPath_defaultone_bg_area"><div class="ShortestPath_compare js_sceneA_AtoB hide_dom"><div class="nd_NewRoman_italic compare_txt hide_dom js_compare_type1">AC'+C'B=347m</div><div class="nd_NewRoman_italic compare_txt hide_dom js_compare_type2">AC+CB=328m</div></div><div class="ShortestPath_defaultone_area"><svg id="js_ShortestPath_svg_horse" width="100%" height="100%"></svg></div><div class="ShortestPath_showPath_wrapper hide_dom js_ShortestPath_sceneA_showPath"><a class="com_btns btns-primary show_path_btn" href="javascript:;" type="1"><span class="btns-primary-txt nd_NewRoman_italic show_path_txt">CB=CB'</span></a><br><a class="com_btns btns-primary show_path_btn" href="javascript:;" type="2"><span class="btns-primary-txt nd_NewRoman_italic show_path_txt">C'B=C'B'</span></a><br><a class="com_btns btns-primary show_path_btn" href="javascript:;" type="3"><span class="btns-primary-txt nd_NewRoman_italic show_path_txt">AC+CB=AC+CB'</span></a><br><span class="target_path_txt js_c_path">C点的路径</span><br><a class="com_btns btns-primary show_path_btn" href="javascript:;" type="4"><span class="btns-primary-txt nd_NewRoman_italic show_path_txt">AC'+C'B=AC'+C'B'</span></a><br><span class="operate_path_txt js_c1_path">C'点的路径</span></div></div><div class="ShortestPath_defaulttwo_bg_area bg js_ShortestPath_defaulttwo_bg_area hide_dom"><div class="ShortestPath_compare js_sceneB_AtoB hide_dom"><div class="nd_NewRoman_italic compare_txt hide_dom js_compare_type1">AM'+M'N'+N'B=317m</div><div class="nd_NewRoman_italic compare_txt hide_dom js_compare_type2">AM+MN+NB=297m</div></div><div class="ShortestPath_defaulttwo_area"><svg id="js_ShortestPath_svg_house" width="100%" height="100%"></svg></div><div class="ShortestPath_showPath_wrapper hide_dom js_ShortestPath_sceneB_showPath"><a class="com_btns btns-primary show_path_btn" href="javascript:;" type="1"><span class="btns-primary-txt nd_NewRoman_italic show_path_txt">AM=A'N</span></a><br><a class="com_btns btns-primary show_path_btn" href="javascript:;" type="2"><span class="btns-primary-txt nd_NewRoman_italic show_path_txt">AM'=A'N'</span></a><br><a class="com_btns btns-primary show_path_btn" href="javascript:;" type="3"><span class="btns-primary-txt nd_NewRoman_italic show_path_txt">AA'=MN=M'N'</span></a><br><a class="com_btns btns-primary show_path_btn" href="javascript:;" type="4"><span class="btns-primary-txt nd_NewRoman_italic show_path_txt">AM+MN+NB=AA'+A'N+NB</span></a><br><span class="target_path_txt js_n_path">N点的路径</span><br><a class="com_btns btns-primary show_path_btn" href="javascript:;" type="5"><span class="btns-primary-txt nd_NewRoman_italic show_path_txt">AM'+M'N'+N'B=AA'+A'N'+N'B</span></a><br><span class="operate_path_txt js_n1_path">N'点的路径</span></div></div></div><div class="ShortestPath_side"><ul class="ShortestPath_mode_ul js_ShortestPath_mode_ul"><li class="ShortestPath_mode_list on js_ShortestPath_mode_list1"><div class="mode_pic mode_item1"></div></li><li class="ShortestPath_mode_list js_ShortestPath_mode_list2"><div class="mode_pic mode_item2"></div></li></ul></div></div><div class="ShortestPath_bottom switch_drop_module"><div class="spolar_com_btns experiment_pattern"><a class="com_btns btns-primary js_btn_menu" href="javascript:;"><span class="btns-primary-txt js_show_shortest_path">作出最短路径</span> </a><a class="com_btns btns-primary click_disabled js_btn_menu" href="javascript:;"><span class="btns-primary-txt js_show_equally_line">显示相等线段</span> </a><a class="com_btns btns-primary click_disabled js_btn_menu" href="javascript:;"><span class="btns-primary-txt js_show_triangle">显示三角形</span> </a><a class="com_btns btns-primary reset_btn js_btn_menu" href="javascript:;"><span class="btns-primary-txt js_reset">重置</span></a></div></div><div class="ShortestPath_pop_mask js_ShortestPath_pop_mask hide_dom"><div class="com_dialog_wrapper ShortestPath_pop"><div class="com_dialog_content ShortestPath_pop_main"><div class="txt ShortestPath_pop_txt js_ShortestPath_pop_txt js_l_pop">点击直线<span class="nd_NewRoman_italic pop_character">l</span>任意选点，查看路径</div><div class="txt ShortestPath_pop_txt js_ShortestPath_pop_txt hide_dom js_b_pop">点击直线<span class="nd_NewRoman_italic pop_character">b</span>任意选点，查看路径</div></div></div></div><div class="ShortestPath_pop_mask js_ShortestPath_pop_toast hide_dom higher_mask"><div class="com_dialog_wrapper ShortestPath_pop"><div class="com_dialog_content ShortestPath_pop_main"><div class="txt ShortestPath_pop_txt js_ShortestPath_pop_txt hide_dom js_c1_pop">请把<span class="nd_NewRoman_italic pop_character">C'</span>点移开</div><div class="txt ShortestPath_pop_txt js_ShortestPath_pop_txt hide_dom js_n1_pop">请把<span class="nd_NewRoman_italic pop_character">N'</span>点移开</div><div class="txt ShortestPath_pop_txt js_ShortestPath_pop_txt hide_dom js_l_pop1">请在直线<span class="nd_NewRoman_italic pop_character">l</span>上任意选一个点</div><div class="txt ShortestPath_pop_txt js_ShortestPath_pop_txt hide_dom js_b_pop2">请在直线<span class="nd_NewRoman_italic pop_character">b</span>上任意选一个点</div></div></div></div></div></div>]]></view><presenter><![CDATA['use strict';

(function () {
    var $model = { //数据模型
        model: null,
        currentScene: 'sceneA',
        ratio: null,
        lastRatio: null,
        sceneA: {
            hasInit: false,
            l1: null, l2: null, b1: null, c1: null, lb: null, lb1: null,
            a: null, b: null, c: null, r: null,
            textA: null, textB: null, textC: null, textB1: null, textC1: null, textL: null,
            rightAngle: null,
            shortestPath: 1, showSamePath: 0, showTriangle: 0, showReset: 0, isAnimate: false,
            isFlash: false, isShowC: false, type: -1, flashTogether: false
        },
        sceneB: {
            hasInit: false,
            la1: null, la2: null, lb1: null, lb2: null,
            a: null, b: null, a1: null, a2: null,
            n: null, n1: null, m: null, m1: null, r: null,
            textA: null, textA1: null, textB: null, textN: null, textN1: null,
            textM: null, textM1: null, textLa: null, textLb: null,
            rightAngleA: null, rightAngleM: null, rightAngleM1: null,
            shortestPath: 1, showSamePath: 0, showTriangle: 0, showReset: 0, isAnimate: false,
            isFlash: false, isShowN: false, isShowM: false, type: -1, flashTogether: false
        }
    };

    var CONST_VALUE = {
        BLACK: '#333333',
        RED: '#cb1f1f',
        YELLOW: '#ffe013',
        PURPLE: '#8300de',
        WHITE: '#ffffff',
        TOAST0: 0, //点击直线l任意选点，查看路径
        TOAST1: 1, //点击直线b任意选点，查看路径
        TOAST2: 2, //请把C'点移开
        TOAST3: 3, //请把N'点移开
        TOAST4: 4, //请在直线l任意选一点
        TOAST5: 5, //请在直线b任意选一点
        WIDTH7: 7, //7px 线宽
        WIDTH6: 6.1, //6px 线宽   NOTE：加0.1防止path 边沿线出现
        WIDTH4: 4,
        WIDTH3: 3,
        LINE20: 20,
        CIRCLE_STROKE_WIDTH3: 4 };

    var $view = { //视图模型
        view: null,
        btns: null,
        maskDom: null,
        toastsDom: null,
        menuDom: null,
        sceneWidth: 0,
        sceneHeight: 0,
        sceneA: {
            svgDom: null,
            dashDom: null,
            svgCanvasHorse: null,
            horseScene: null,
            samePathDom: null,
            l: null, AC: null, CB: null, CB1: null, BB1: null, AC1: null, C1B: null, C1B1: null, rightAnglePath: null,
            A: null, B: null, C: null, B1: null, C1: null,
            textA: null, textB: null, textB1: null, textC: null, textC1: null, textL: null,
            a: null, b: null, acd: null
        },
        sceneB: {
            svgDom: null,
            dashDom: null,
            svgCanvasHouse: null,
            houseScene: null,
            samePathDom: null,
            a: null, b: null,
            A: null, B: null, M: null, N: null,
            A1: null, M1: null, N1: null,
            AM: null, MN: null, NB: null,
            A1N: null, AM1: null, M1N1: null, N1B: null, A1N1: null, AA1: null, A1A2: null,
            textA: null, textB: null, textA1: null, textM: null, textN: null,
            textM1: null, textN1: null, textla: null, textlb: null,
            rightAngleAPath: null, rightAngleMPath: null, rightAngleM1Path: null,
            pa: null, pb: null, amnb: null
        },
        pressDown: false
    };

    var utilsModule = function () {
        var o = {};

        /**
         * 坐标包装
         * @param x 横坐标
         * @param y 纵坐标
         * @returns {{x: *, y: *}}
         */
        o.wrapPoint = function (x, y) {
            return {
                x: x,
                y: y
            };
        };

        /**
         * 通过四个坐标点 获取相交点
         * @param p1 p2  线上两点
         * @param p3 p4  线上两点
         * @returns {{x, y}|{x: *, y: *}}
         */
        o.getCrossPoint = function (p1, p2, p3, p4) {
            var x0 = p1.x,
                y0 = p1.y,
                x1 = p2.x,
                y1 = p2.y,
                x2 = p3.x,
                y2 = p3.y,
                x3 = p4.x,
                y3 = p4.y;
            var x, y;
            y = ((y0 - y1) * (y3 - y2) * x0 + (y3 - y2) * (x1 - x0) * y0 + (y1 - y0) * (y3 - y2) * x2 + (x2 - x3) * (y1 - y0) * y2) / ((x1 - x0) * (y3 - y2) + (y0 - y1) * (x3 - x2));
            x = x2 + (x3 - x2) * (y - y2) / (y3 - y2);
            return o.wrapPoint(x, y);
        };

        /**
         * 通过垂点 获取直角标志的坐标
         * @param p1
         * @param l 直角显示的长度
         * @param deg  当前直线的弧度角度
         * @param dir 属于那个象限
         * @returns {{0: {from: ({x, y}|{x: *, y: *}), to: ({x, y}|{x: *, y: *})}, 1: {from: ({x, y}|{x: *, y: *}), to: ({x, y}|{x: *, y: *})}}|*}
         */
        o.getRightAnglePath = function (p1, l, deg, dir) {
            dir = dir || 1;
            var x0, y0, x1, y1, x2, y2;
            var points;
            if (dir === 1) {
                x0 = p1.x + l * Math.cos(deg); //x0垂线方向
                y0 = p1.y + l * Math.sin(deg);
                x1 = p1.x - l * Math.cos(deg + Math.PI / 2);
                y1 = p1.y - l * Math.sin(deg + Math.PI / 2);
            } else if (dir === 2) {
                x0 = p1.x - l * Math.cos(deg);
                y0 = p1.y - l * Math.sin(deg);
                x1 = p1.x + l * Math.cos(deg - Math.PI / 2);
                y1 = p1.y + l * Math.sin(deg - Math.PI / 2);
            } else if (dir === 3) {
                x0 = p1.x - l * Math.cos(deg);
                y0 = p1.y - l * Math.sin(deg);
                x1 = p1.x - l * Math.cos(deg - Math.PI / 2);
                y1 = p1.y - l * Math.sin(deg - Math.PI / 2);
            } else {
                x0 = p1.x + l * Math.cos(deg);
                y0 = p1.y + l * Math.sin(deg);
                x1 = p1.x + l * Math.cos(deg + Math.PI / 2);
                y1 = p1.y + l * Math.sin(deg + Math.PI / 2);
            }
            x2 = x0 - p1.x + x1;
            y2 = y0 - p1.y + y1;
            points = {
                p1: o.wrapPoint(x0, y0),
                p2: o.wrapPoint(x2, y2),
                p3: o.wrapPoint(x1, y1)
            };
            return points;
        };

        /**
         * 两点获取 斜率 和 截距
         * @param p1  直线1
         * @param p2  直线2
         * @returns {{k: (number|*), b: (number|*)}}
         */
        o.getLineExp = function (p1, p2) {
            var x0 = p1.x,
                y0 = p1.y,
                x1 = p2.x,
                y1 = p2.y,
                k,
                b;
            if (x1 == x0) {
                k = null;
            } else {
                k = (y1 - y0) / (x1 - x0);
            }
            b = y0 - x0 * (y1 - y0) / (x1 - x0);
            return {
                k: k,
                b: b
            };
        };

        /**
         * 通过直线获取对称点
         * @param p  线外一点
         * @param l  直线
         * @returns {{x, y}|{x: *, y: *}}
         */
        o.getMirrorPoint = function (p, l) {
            var x0 = p.x,
                y0 = p.y,
                x,
                y,
                k = l.k,
                b = l.b;
            //代表x = b  k 为无穷大
            if (k === null) {
                x = x0;
                y = 2 * b - y0;
                return o.wrapPoint(x, y);
            }
            x = x0 + 2 * k * (-k * x0 + y0 - b) / (k * k + 1);
            y = y0 - 2 * (-k * x0 + y0 - b) / (k * k + 1);
            return o.wrapPoint(x, y);
        };

        /**
         * 获取垂点
         * @param p  线外一点
         * @param l  直线
         * @returns {{x, y}|{x: *, y: *}}
         */
        o.getVerticalPoint = function (p, l) {
            var x0 = p.x,
                y0 = p.y,
                k = l.k,
                b = l.b;
            var x, y;
            x = (x0 + k * y0 - k * b) / (k * k + 1);
            y = (k * k * y0 + k * x0 + b) / (k * k + 1);
            return o.wrapPoint(x, y);
        };
        /**
         * 获取两点及以上之间的距离
         * @param a   点
         * @param b   点
         * @returns length
         */
        o.getTwoPointLength = function () {
            var arg = arguments;
            if (arg && arg.length < 1) {
                return 0;
            }
            var length = 0,
                temp = arg[0];
            for (var i = 1, len = arg.length; i < len; i++) {
                length += Math.sqrt((temp.x - arg[i].x) * (temp.x - arg[i].x) + (temp.y - arg[i].y) * (temp.y - arg[i].y));
                temp = arg[i];
            }
            return length;
        };
        /**
         * 获取平移点 （pb点垂直于l0,l1做垂点得到 n1 ,m1,然后根据向量算出A1点）
         * @param pb  点
         * @param p2  点
         * @param l0  线
         * @param l1  线
         * @returns {{x, y}|{x: *, y: *}}
         */
        o.getTranslatePoint = function (pb, p2, l0, l1) {
            var x3,
                y3,
                p0 = o.getVerticalPoint(pb, l0),
                p1 = o.getVerticalPoint(pb, l1),
                x0 = p0.x,
                y0 = p0.y,
                x1 = p1.x,
                y1 = p1.y,
                x2 = p2.x,
                y2 = p2.y;
            x3 = x1 - x0 + x2;
            y3 = y1 - y0 + y2;
            return o.wrapPoint(x3, y3);
        };

        /**
         * 包装动画
         * @param elem
         * @param attr
         * @param time
         * @param mina
         * @param callback
         * @returns {{elem: *, attr: *, time: *, mina: *, callback: *}}
         */
        o.wrapAnimateObject = function (elem, attr, time, mina, callback) {
            return {
                elem: elem,
                attr: attr,
                time: time,
                mina: mina,
                callback: callback
            };
        };

        /**
         * 包装 path d 属性
         * @param p1 点
         * @param p2 点
         * @param p3 点
         * @returns {*[]}
         */
        o.wrapPathAttr = function (p1, p2, p3) {
            var _t = ['m', p1.x, p1.y, 'L', p2.x, p2.y];
            if (p3) {
                _t = _t.concat(['L', p3.x, p3.y]);
            }
            _t = _t.join(' ');
            return { d: _t };
        };

        /**
         *  包装attr属性（多个attr 时可以直接用{}来传入，可以多个，最后会合并）
         * @returns {{}}
         */
        o.getAttr = function () {
            var arg = arguments,
                result = {};
            for (var i = 0, len = arg.length; i < len; i++) {
                $.extend(result, arg[i]);
            }
            return result;
        };
        o.isEqual = function (a, b) {
            if (Math.abs(a.x - b.x) < 1 && Math.abs(a.y - b.y) < 1) {
                return true;
            }
            return false;
        };

        return o;
    }();

    var viewModule = function () {
        var v = {};

        /**
         * 画线
         * @param ele
         * @param from
         * @param to
         * @param attr
         */
        v.drawLine = function (ele, from, to, attr) {
            attr = attr || {};
            var path = ['m', from.x, from.y, 'L', to.x, to.y].join(' ');
            attr['d'] = path;
            ele.attr(attr);
        };

        /**
         *  移动点
         * @param ele
         * @param to
         * @param attr
         */
        v.drawPoint = function (ele, to, r, attr) {
            attr = attr || {};
            attr['cx'] = to.x;
            attr['cy'] = to.y;
            attr['r'] = r;
            ele.attr(attr);
        };

        /**
         * 并行动画
         * @param elem
         * @param args
         * @param callback
         */
        v.parallelAnimate = function (args, callback) {
            var len = args.length,
                ds = [];
            for (var i = 0; i < len; i++) {
                ds.push($.Deferred());
            }
            for (i = 0; i < len; i++) {
                var arg = args[i];
                (function (arg, i) {
                    arg.elem.animate(arg.attr, arg.time, arg.mina, function () {
                        arg.callback && arg.callback();
                        ds[i].resolve();
                    });
                })(arg, i);
            }
            //并行动画全部执行完后再进行回调
            $.when.apply(null, ds).done(function () {
                callback();
            });
        };

        /**
         * 串行动画
         * @param elem
         * @param args  eg. [ {一个动画}，[并行动画] ]
         */
        v.serialAnimate = function (args, cb) {
            if (!Array.isArray(args)) return;
            if (args.length > 0) {
                var arg = args.shift();
                if (Array.isArray(arg)) {
                    //并行动画
                    v.parallelAnimate(arg, function () {
                        console.log("end parallelAnimate");
                        v.serialAnimate(args, cb);
                    });
                } else {
                    //串行动画
                    arg.elem.animate(arg.attr, arg.time, arg.mina, function () {
                        arg.callback && arg.callback();
                        v.serialAnimate(args, cb);
                    });
                }
            } else {
                cb && cb();
            }
        };
        /**
         * 停止动画
         * @param elems
         */
        v.stopAnimate = function (elems) {
            for (var i = 0, len = elems.length; i < len; i++) {
                elems[i].stop();
                elems[i].attr({ opacity: 1 });
            }
        };

        /**
         * 包装闪烁动画
         * @param num次数
         * @param cb 回调
         * @param elems
         * @Fixed 闪烁时间因为本动画不需要特别处理所以没有提出来
         */
        v.flashAnimate = function (elems, cb, num) {
            num = num || 4;
            if (!Array.isArray(elems)) return;
            var animate = [];
            for (var i = 0, len = elems.length; i < len; i++) {
                var elem = elems[i],
                    temp = [],
                    temp1 = null;
                if (Array.isArray(elem)) {
                    for (var k = 0, kLen = num; k < kLen; k++) {
                        temp.length = 0;
                        for (var j = 0, len1 = elem.length; j < len1; j++) {
                            temp.push(utilsModule.wrapAnimateObject(elem[j], { opacity: k % 2 }, 250, null, null));
                        }
                        animate.push($.extend([], temp));
                    }
                } else {
                    for (var k = 0, kLen = num; k < kLen; k++) {
                        temp1 = utilsModule.wrapAnimateObject(elem, { opacity: k % 2 }, 250, null, null);
                        animate.push($.extend({}, temp1));
                    }
                }
            }
            viewModule.serialAnimate(animate, cb);
        };

        /**
         * 计算总长度
         * @unused 本工具使用 比例计算 此处用不到
         * @param args 传入需要计算的path 元素
         * @returns {number}
         */
        v.getTotalLength = function (args) {
            args = args || [];
            if (!Array.isArray(args)) return;
            var sum = 0;
            for (var i = 0, len = args.length; i < len; i++) {
                if (args[i].getTotalLength) {
                    sum += args[i].getTotalLength();
                }
            }
            return sum;
        };

        //显示toast
        v.initMask = function (type) {
            if (type > 5 || type < 0) {
                return;
            }
            $view.maskDom.find('.js_ShortestPath_pop_txt').eq(type).siblings().addClass('hide_dom');
            $view.maskDom.find('.js_ShortestPath_pop_txt').eq(type).removeClass('hide_dom');
            $view.maskDom.removeClass('hide_dom');
            getDom('.js_ShortestPath_wrapper').on('click', function () {
                v.closeMask();
                $(this).off('click');
            });
        };

        //显示toast
        v.showToast = function (type, delay) {
            if (type > 5 || type < 0) {
                return;
            }
            $view.toastsDom.find('.js_ShortestPath_pop_txt').eq(type).siblings().addClass('hide_dom');
            $view.toastsDom.find('.js_ShortestPath_pop_txt').eq(type).removeClass('hide_dom');
            $view.toastsDom.removeClass('hide_dom');
            if (delay != null && delay != 0) {
                var temp = setTimeout(function () {
                    v.closeToast();
                    clearTimeout(temp);
                }, delay);
            } else {
                v.closeToast();
            }
        };

        /**
         * 关闭吐司
         */
        v.closeToast = function () {
            $view.toastsDom && $view.toastsDom.addClass('hide_dom');
        };

        /**
         * 关闭mask
         */
        v.closeMask = function () {
            $view.maskDom && $view.maskDom.addClass('hide_dom');
        };
        /**
         * 按钮设置
         * @param index
         */
        v.setMenu = function (index, type) {
            if (index == null || $view.menuDom == null) {
                return;
            }
            if (type == 1) {
                $view.menuDom.eq(index).removeClass('click_disabled').removeClass('ui_btn_active');
            } else if (type == 2) {
                $view.menuDom.eq(index).removeClass('click_disabled').addClass('ui_btn_active');
            } else {
                $view.menuDom && $view.menuDom.eq(index).addClass('click_disabled');
            }
        };

        //显示路径长度
        v.showTotalPath = function (view, type, content1, content2) {
            if (!view) {
                return;
            }
            if (type == 1) {
                view.find('.js_compare_type1').html(content1).removeClass('hide_dom');
            } else if (type == 2) {
                view.find('.js_compare_type2').html(content2).removeClass('hide_dom');
            } else if (type == 3) {
                view.find('.js_compare_type1').html(content1).removeClass('hide_dom');
                view.find('.js_compare_type2').html(content2).removeClass('hide_dom');
            } else {
                return;
            }
            view.removeClass('hide_dom');
        };
        //隐藏路径长度
        v.hideTotalPath = function (view, type) {
            if (type == 1) {
                view.find('.js_compare_type1').addClass('hide_dom');
            } else if (type == 2) {
                view.find('.js_compare_type2').addClass('hide_dom');
            } else {
                view && view.addClass('hide_dom');
                view.find('.js_compare_type1').addClass('hide_dom');
                view.find('.js_compare_type2').addClass('hide_dom');
            }
        };
        //设置字体
        v.setText = function (elem, content) {
            $(elem.node).html(content);
        };
        //获取比例值
        v.getScalePoint = function (o) {
            return utilsModule.wrapPoint(+(o.x / $view.sceneWidth), +(o.y / $view.sceneHeight));
        };

        return v;
    }();
    //从dom缓存中查找元素
    function getDom(id) {
        if ($view.view) {
            return $view.view.find(id);
        }
        return null;
    }

    var begin1,
        startTime1 = null,
        begin2,
        startTime2 = null; //节流
    var self = null;
    var Presenter = BasicPresenter.extend({
        metaInfo: {
            name: "ShortestPath",
            type: "",
            subtype: ""
        },
        /**
         * Presenter的初始化方法
         * @private
         */
        $init: function $init() {
            this._super();
            this.i18n = {};
            self = this;
        },
        /**
         * Presenter对外暴露的方法
         */
        _service_: {
            constructor: function constructor(parent) {
                this.parent = parent;
            },
            getQuestionInfo: function getQuestionInfo() {
                //推送学生端必须接口
                return {
                    'id': $model.model.question_id || '',
                    'type_code': 'ShortestPath',
                    'type_name': '最短路径',
                    'url': JSON.stringify($model.model.question_url),
                    'notExistStatistics': true,
                    'noNeedQuizProgress': true
                };
            },
            getExtendData: function getExtendData() {
                //推送学生端必须接口
                var options = {
                    width: '100%',
                    shortestPathState: {
                        currentScene: $model.currentScene,
                        sceneA: {
                            c1: $model.sceneA.c1 && viewModule.getScalePoint($model.sceneA.c1),
                            shortestPath: $model.sceneA.shortestPath,
                            showSamePath: $model.sceneA.showSamePath,
                            showTriangle: $model.sceneA.showTriangle,
                            showReset: $model.sceneA.showReset,
                            isAnimate: $model.sceneA.isAnimate,
                            isFlash: $model.sceneA.isFlash,
                            isShowC: $model.sceneA.isShowC,
                            type: $model.sceneA.type,
                            hasInit: $model.sceneA.hasInit
                        },
                        sceneB: {
                            n1: $model.sceneB.n1 && viewModule.getScalePoint($model.sceneB.n1),
                            shortestPath: $model.sceneB.shortestPath,
                            showSamePath: $model.sceneB.showSamePath,
                            showTriangle: $model.sceneB.showTriangle,
                            showReset: $model.sceneB.showReset,
                            isAnimate: $model.sceneB.isAnimate,
                            isFlash: $model.sceneB.isFlash,
                            isShowN: $model.sceneB.isShowN,
                            isShowM: $model.sceneB.isShowM,
                            type: $model.sceneB.type,
                            hasInit: $model.sceneB.hasInit
                        }
                    }
                };
                console.log(options);
                return options;
            },
            setLocationProperties: function setLocationProperties(properties) {
                this.parent.i18n = properties;
            }
        },

        getService: function getService() {
            this._service_.constructor(this);
            return this._service_;
        },
        /****以下开始为icPlayer的生命周期方法*****/
        run: function run(view, model) {
            $view.view = $(view);
            $model.model = model;
            $model.currentScene = "sceneA"; //初始化第一个场景
            this._forbideScale = function (isForbideScale) {
                player.controller.getEventBus().sendEvent("PLAYER.TOOL.FORBIDE_FULL", { id: model.$.unqiueId, isForbide: isForbideScale });
            };
            this.__interface = {
                resizeScreen: function resizeScreen(data) {
                    //data {ratio:4/3||3/4}
                    console.log('data resize', data);
                    $model.ratio = eval(data.ratio);
                    if ($model.currentScene == 'sceneA') {
                        this._calculationA();
                    } else if ($model.currentScene == 'sceneB') {
                        this._calculationB();
                    }
                }
            };
        },
        //根据比例初始化样式
        _initStyle: function _initStyle() {
            CONST_VALUE.WIDTH7 = 0.006 * $view.sceneWidth; //7
            CONST_VALUE.WIDTH6 = 0.0053 * $view.sceneWidth; //6.1;
            CONST_VALUE.WIDTH3 = 0.0026 * $view.sceneWidth; //3;
            CONST_VALUE.LINE20 = 0.017 * $view.sceneWidth; //20;
            CONST_VALUE.CIRCLE_STROKE_WIDTH3 = 0.0034 * $view.sceneWidth; //4;0.01 *$view.sceneWidth;
            $view.style = {
                lineStyleBlack: {
                    stroke: CONST_VALUE.BLACK,
                    strokeWidth: CONST_VALUE.WIDTH7,
                    fill: 'none'
                },
                lineStyleBlackDash: {
                    stroke: CONST_VALUE.BLACK,
                    strokeWidth: CONST_VALUE.WIDTH6,
                    strokeDasharray: 0.017 * $view.sceneWidth + "," + 0.014 * $view.sceneWidth, //20 15
                    fill: 'none'
                },
                lineStylePurpleDash: {
                    stroke: CONST_VALUE.PURPLE,
                    strokeWidth: CONST_VALUE.WIDTH6,
                    strokeDasharray: 0.017 * $view.sceneWidth + "," + 0.014 * $view.sceneWidth,
                    fill: 'none'
                },
                lineStyleRedDash: {
                    stroke: CONST_VALUE.RED,
                    strokeWidth: CONST_VALUE.WIDTH6,
                    strokeDasharray: 0.017 * $view.sceneWidth + "," + 0.014 * $view.sceneWidth,
                    fill: 'none'
                },
                lineStyleRed: {
                    stroke: CONST_VALUE.RED,
                    strokeWidth: CONST_VALUE.WIDTH6,
                    fill: 'none'
                },
                lineStyleYellow: {
                    stroke: CONST_VALUE.YELLOW,
                    strokeWidth: CONST_VALUE.WIDTH6,
                    fill: 'none'
                },
                lineStylePurple: {
                    stroke: CONST_VALUE.PURPLE,
                    strokeWidth: CONST_VALUE.WIDTH6,
                    fill: 'none'
                },
                lineStyleWhite: {
                    fill: 'none',
                    stroke: CONST_VALUE.WHITE,
                    strokeWidth: CONST_VALUE.WIDTH3
                },
                textStylePurple: {
                    class: 'nd_NewRoman_italic svg_character_fontsize',
                    fill: CONST_VALUE.PURPLE,
                    stroke: null,
                    strokeWidth: 0
                },
                textStyleBlack: {
                    class: 'nd_NewRoman_italic svg_linecharacter_fontsize',
                    fill: CONST_VALUE.BLACK,
                    stroke: null,
                    strokeWidth: 0
                },
                textStyleRed: {
                    class: 'nd_NewRoman_italic svg_character_fontsize',
                    fill: CONST_VALUE.RED,
                    stroke: null,
                    strokeWidth: 0
                },
                circleStylePurple: {
                    fill: CONST_VALUE.PURPLE,
                    stroke: null,
                    strokeWidth: 0
                },
                circleStyleRedStroke: {
                    fill: CONST_VALUE.RED,
                    stroke: CONST_VALUE.WHITE,
                    strokeWidth: CONST_VALUE.CIRCLE_STROKE_WIDTH3
                },
                circleStyleRed: {
                    fill: CONST_VALUE.RED,
                    stroke: null,
                    strokeWidth: 0
                }
            };
        },
        /**
         * 初始化 view
         * @param $view
         * @private
         */
        _initView: function _initView($view) {
            $model.sceneA.hasInit = false;
            $model.sceneB.hasInit = false;
            $model.sceneA.showRest = 0;
            $model.sceneB.showRest = 0;
            $view.sceneA.svgCanvasHorse = Snap('#js_ShortestPath_svg_horse');
            $view.sceneB.svgCanvasHouse = Snap('#js_ShortestPath_svg_house');
            $view.sceneA.horseScene = getDom('.js_ShortestPath_defaultone_bg_area');
            $view.sceneB.houseScene = getDom('.js_ShortestPath_defaulttwo_bg_area');
            $view.menuDom = getDom('a.js_btn_menu');
            $view.btns = getDom('.js_ShortestPath_mode_ul li');
            $view.maskDom = getDom('.js_ShortestPath_pop_mask');
            $view.toastsDom = getDom('.js_ShortestPath_pop_toast');
            this._initSceneHorse();
            this._initSceneHouse();
            //初始化学生端
            this._initStudentEnd();
            //初始化开始的toast，如果已经切换场景或动画已经执行及之后不显示
            if ($model.currentScene === 'sceneA') {
                $model.sceneA.hasInit = !$model.sceneA.isAnimate && $model.sceneA.shortestPath == 1 && !$model.sceneA.hasInit;
                $model.sceneA.hasInit && viewModule.initMask(CONST_VALUE.TOAST0);
                $model.sceneA.hasInit = true;
            } else {
                $model.sceneB.hasInit = !$model.sceneB.isAnimate && $model.sceneB.shortestPath == 1 && !$model.sceneB.hasInit;
                $model.sceneB.hasInit && viewModule.initMask(CONST_VALUE.TOAST1);
                $model.sceneB.hasInit = true;
            }
            this._i18nRender();
        },
        _initStudentEnd: function _initStudentEnd() {
            var v = $model.model.__ExtendModel;
            if (v && !$.isEmptyObject(v) && v.shortestPathState) {
                v = v.shortestPathState;
                //给学生端加学生端的样式
                getDom('.js_ShortestPath_wrapper').addClass("ShortestPath_wrapper_student");
                //初始化数据
                $model.sceneA.c1 = v.sceneA.c1;
                $model.sceneB.n1 = v.sceneB.n1;
                $model.currentScene = v.currentScene;
                $model.sceneA.shortestPath = v.sceneA.shortestPath;
                $model.sceneA.showSamePath = v.sceneA.showSamePath;
                $model.sceneA.showTriangle = v.sceneA.showTriangle;
                $model.sceneB.shortestPath = v.sceneB.shortestPath;
                $model.sceneB.showSamePath = v.sceneB.showSamePath;
                $model.sceneB.showTriangle = v.sceneB.showTriangle;
                $model.sceneA.showReset = v.sceneA.showReset;
                $model.sceneB.showReset = v.sceneB.showReset;
                $model.sceneA.isAnimate = v.sceneA.isAnimate;
                $model.sceneB.isAnimate = v.sceneB.isAnimate;
                $model.sceneA.isFlash = v.sceneA.isFlash;
                $model.sceneB.isFlash = v.sceneB.isFlash;
                $model.sceneA.isShowC = v.sceneA.isShowC;
                $model.sceneB.isShowN = v.sceneB.isShowN;
                $model.sceneB.isShowM = v.sceneB.isShowM;
                $model.sceneA.type = v.sceneA.type;
                $model.sceneB.type = v.sceneB.type;
                //去掉纯绿色背景
                getDom('.js_ShortestPath_green_bg').addClass('hide_dom');
                if ($model.currentScene == 'sceneA') {
                    $view.sceneB.houseScene.addClass('hide_dom');
                    $view.sceneA.horseScene.removeClass('hide_dom');
                    getDom('.js_ShortestPath_mode_list1').addClass('on');
                    getDom('.js_ShortestPath_mode_list2').removeClass('on');
                } else if ($model.currentScene == 'sceneB') {
                    $view.sceneA.horseScene.addClass('hide_dom');
                    $view.sceneB.houseScene.removeClass('hide_dom');
                    getDom('.js_ShortestPath_mode_list1').removeClass('on');
                    getDom('.js_ShortestPath_mode_list2').addClass('on');
                }
                //渲染学生端
                this._renderStudentEndSceneHorse();
                this._renderStudentEndSceneHouse();
            }
        },
        _renderStudentEndSceneHorse: function _renderStudentEndSceneHorse() {
            if ($model.currentScene == 'sceneA') {
                //初始化按钮
                this._resetMenu($model.sceneA.shortestPath, $model.sceneA.showSamePath, $model.sceneA.showTriangle, $model.sceneA.showReset);
            }
            var isFlash = $model.sceneA.isFlash;
            $model.sceneA.isFlash = false;
            //初始化AC'、C'B
            if ($model.sceneA.c1) {
                //出现了C'点
                var x = $model.sceneA.c1.x * $view.sceneWidth,
                    y = $model.sceneA.c1.y * $view.sceneHeight;
                self._chooseC1(x, y);
                $view.sceneA.C1.attr(utilsModule.getAttr($view.style.circleStyleRed, { r: $model.sceneA.r }));
            }
            //初始化最短路径
            if ($model.sceneA.isAnimate) {
                this._sceneAShortestPath(true);
            } else if (!$model.sceneA.isAnimate && $model.sceneA.shortestPath === 0) {
                this._sceneAShortestPath(false);
            }
            //初始化显示相等线段
            if (!$model.sceneA.isAnimate && $model.sceneA.showSamePath === 2) {
                $view.sceneA.samePathDom.removeClass('hide_dom');
                $view.sceneA.C1B1.attr(utilsModule.wrapPathAttr($model.sceneA.c1, $model.sceneA.b1));
            }
            //初始化显示三角形
            if (!$model.sceneA.isAnimate && $model.sceneA.showTriangle === 2) {
                $view.sceneA.AC1.attr({ stroke: CONST_VALUE.YELLOW });
                $view.sceneA.C1B1.attr({ stroke: CONST_VALUE.YELLOW });
                $view.sceneA.AC.attr({ stroke: CONST_VALUE.YELLOW });
                $view.sceneA.CB1.attr({ stroke: CONST_VALUE.YELLOW });
            }
            if (isFlash && $model.sceneA.type != -1) {
                self._sceneAFlash($model.sceneA.type);
            }
        },
        _renderStudentEndSceneHouse: function _renderStudentEndSceneHouse() {
            if ($model.currentScene == 'sceneB') {
                //初始化按钮
                this._resetMenu($model.sceneB.shortestPath, $model.sceneB.showSamePath, $model.sceneB.showTriangle, $model.sceneB.showReset);
            }
            var isFlash = $model.sceneB.isFlash;
            $model.sceneB.isFlash = false;
            if ($model.sceneB.n1) {
                var x = $model.sceneB.n1.x * $view.sceneWidth,
                    y = $model.sceneB.n1.y * $view.sceneHeight;
                //鼠标获取的点
                var o = utilsModule.wrapPoint(x, y);
                var lb = utilsModule.getLineExp($model.sceneB.lb1, $model.sceneB.lb2),
                    la = utilsModule.getLineExp($model.sceneB.la1, $model.sceneB.la2);
                //获取直线b的垂点
                var n1 = utilsModule.getVerticalPoint(o, lb);
                //获取直线a的垂点
                var m1 = utilsModule.getVerticalPoint(n1, la);
                $model.sceneB.m1 = m1;
                $model.sceneB.n1 = n1;
                self._chooseN1(m1, n1, lb);
                $view.sceneB.N1.attr(utilsModule.getAttr($view.style.circleStyleRed, { r: $model.sceneB.r }));
            }

            //初始化最短路径
            if ($model.sceneB.isAnimate) {
                this._sceneBShortestPath(true);
            } else if (!$model.sceneB.isAnimate && $model.sceneB.shortestPath === 0) {
                this._sceneBShortestPath(false);
            }
            //初始化显示相等线段
            if (!$model.sceneB.isAnimate && $model.sceneB.showSamePath === 2) {
                $view.sceneB.samePathDom.removeClass('hide_dom');
                $view.sceneB.A1N1.attr(utilsModule.wrapPathAttr($model.sceneB.a1, $model.sceneB.n1));
            }
            //初始化显示三角形
            if (!$model.sceneB.isAnimate && $model.sceneB.showTriangle === 2) {
                $view.sceneB.A1N1.attr({ stroke: CONST_VALUE.YELLOW });
                $view.sceneB.A1N.attr({ stroke: CONST_VALUE.YELLOW });
                $view.sceneB.NB.attr({ stroke: CONST_VALUE.YELLOW });
                $view.sceneB.N1B.attr({ stroke: CONST_VALUE.YELLOW });
            }

            if (isFlash && $model.sceneB.type != -1) {
                $model.sceneB.isFlash = false; //闪烁前要先置为false 才可以进行
                self._sceneBFlash($model.sceneB.type);
            }
        },
        _initSceneHorse: function _initSceneHorse() {
            var svg = $view.sceneA.svgCanvasHorse,
                svgDom = getDom('#js_ShortestPath_svg_horse');
            $view.sceneA.svgDom = svgDom;
            $view.sceneA.dashDom = getDom('.js_sceneA_AtoB');
            $view.sceneA.samePathDom = getDom('.js_ShortestPath_sceneA_showPath');
            $view.sceneHeight = svgDom.height();
            $view.sceneWidth = svgDom.width();

            self._initStyle();
            var l1 = utilsModule.wrapPoint(0.24 * $view.sceneWidth, 0.436 * $view.sceneHeight),
                l2 = utilsModule.wrapPoint($view.sceneWidth, 0.436 * $view.sceneHeight),
                b = utilsModule.wrapPoint(0.68 * $view.sceneWidth, 0.17 * $view.sceneHeight),
                line = utilsModule.getLineExp(l1, l2),
                b1 = utilsModule.getMirrorPoint(b, line),
                lb = utilsModule.wrapPoint(b.x, b.y - 0.06 * $view.sceneWidth),
                lb1 = utilsModule.wrapPoint(b1.x, b1.y + 0.06 * $view.sceneWidth),
                v = utilsModule.getVerticalPoint(b, line),
                rightAngle = utilsModule.getRightAnglePath(v, 3.5, 0, 1),
                rightAngle = utilsModule.getRightAnglePath(rightAngle.p2, 0.017 * $view.sceneWidth - 3.5, 0, 1),
                a = utilsModule.wrapPoint(0.44 * $view.sceneWidth, 0.22 * $view.sceneHeight),
                c = utilsModule.getCrossPoint(l1, l2, a, b1);
            $view.sceneA.a = utilsModule.wrapPoint(0.44, 0.22);
            $view.sceneA.b = utilsModule.wrapPoint(0.68, 0.17);
            $view.sceneA.acb = utilsModule.getTwoPointLength($view.sceneA.a, viewModule.getScalePoint(c), $view.sceneA.b);
            $model.sceneA.a = a;
            $model.sceneA.b1 = b1;
            $model.sceneA.b = b;
            $model.sceneA.lb = lb;
            $model.sceneA.lb1 = lb1;
            $model.sceneA.l1 = l1;
            $model.sceneA.l2 = l2;
            $model.sceneA.c = c;
            $model.sceneA.r = 0.01 * $view.sceneWidth;
            $model.sceneA.rightAngle = rightAngle;
            $model.sceneA.textA = utilsModule.wrapPoint(0.395 * $view.sceneWidth, 0.27 * $view.sceneHeight);
            $model.sceneA.textB = utilsModule.wrapPoint(0.69 * $view.sceneWidth, 0.20 * $view.sceneHeight);
            $model.sceneA.textC = utilsModule.wrapPoint(c.x - 0.052 * $view.sceneWidth, 0.53 * $view.sceneHeight);
            $model.sceneA.textL = utilsModule.wrapPoint(0.947 * $view.sceneWidth, 0.40 * $view.sceneHeight);
            $model.sceneA.textB1 = utilsModule.wrapPoint(0.69 * $view.sceneWidth, b1.y + 32.5);
            //点 > 字母 > 线 ； 最短的属性  > 任意属性
            $view.sceneA.rightAnglePath = svg.paper.path().attr($view.style.lineStyleWhite);
            $view.sceneA.l = svg.paper.path().attr(utilsModule.getAttr($view.style.lineStyleBlack, utilsModule.wrapPathAttr(l1, l2)));
            $view.sceneA.BB1 = svg.paper.path().attr($view.style.lineStyleBlackDash);
            $view.sceneA.AC1 = svg.paper.path();
            $view.sceneA.C1B = svg.paper.path();
            $view.sceneA.B = svg.paper.circle($model.sceneA.b.x, $model.sceneA.b.y, $model.sceneA.r).attr($view.style.circleStylePurple);
            $view.sceneA.textL = svg.paper.text($model.sceneA.textL.x, $model.sceneA.textL.y, "l").attr($view.style.textStyleBlack);
            $view.sceneA.AC = svg.paper.path();
            $view.sceneA.C1B1 = svg.paper.path();
            $view.sceneA.CB1 = svg.paper.path();
            $view.sceneA.CB = svg.paper.path();
            $view.sceneA.A = svg.paper.circle($model.sceneA.a.x, $model.sceneA.a.y, $model.sceneA.r).attr($view.style.circleStylePurple);
            $view.sceneA.C1 = svg.paper.circle();
            $view.sceneA.B1 = svg.paper.circle($model.sceneA.b1.x, $model.sceneA.b1.y, $model.sceneA.r).attr($view.style.circleStylePurple);
            $view.sceneA.C = svg.paper.circle($model.sceneA.c.x, $model.sceneA.c.y, $model.sceneA.r).attr($view.style.circleStylePurple);
            $view.sceneA.textC1 = svg.paper.text(0, 0, "C'").attr(utilsModule.getAttr($view.style.textStyleRed, { opacity: 0 }, { y: $model.sceneA.textC.y }));
            $view.sceneA.textA = svg.paper.text($model.sceneA.textA.x, $model.sceneA.textA.y, 'A').attr($view.style.textStylePurple);
            $view.sceneA.textB = svg.paper.text($model.sceneA.textB.x, $model.sceneA.textB.y, 'B').attr($view.style.textStylePurple);
            $view.sceneA.textB1 = svg.paper.text($model.sceneA.textB1.x, $model.sceneA.textB1.y, "B'").attr(utilsModule.getAttr($view.style.textStylePurple, { opacity: 0 }));
            $view.sceneA.textC = svg.paper.text($model.sceneA.textC.x, $model.sceneA.textC.y, "C").attr(utilsModule.getAttr($view.style.textStylePurple, { opacity: 0 }));
            this._initScenehorseState();
        },
        _calculationA: function _calculationA() {
            var getAttr = utilsModule.getAttr,
                getD = utilsModule.wrapPathAttr;
            var svg = $view.sceneA.svgCanvasHorse,
                svgDom = getDom('#js_ShortestPath_svg_horse');
            $view.sceneA.svgDom = svgDom;
            $view.sceneA.dashDom = getDom('.js_sceneA_AtoB');
            $view.sceneA.samePathDom = getDom('.js_ShortestPath_sceneA_showPath');
            if ($model.currentScene == 'sceneA') {
                $view.sceneHeight = svgDom.height();
                $view.sceneWidth = svgDom.width();
            }
            self._initStyle();
            var l1 = utilsModule.wrapPoint(0.24 * $view.sceneWidth, 0.436 * $view.sceneHeight),
                l2 = utilsModule.wrapPoint($view.sceneWidth, 0.436 * $view.sceneHeight),
                b = utilsModule.wrapPoint(0.68 * $view.sceneWidth, 0.17 * $view.sceneHeight),
                line = utilsModule.getLineExp(l1, l2),
                b1 = utilsModule.getMirrorPoint(b, line),
                lb = utilsModule.wrapPoint(b.x, b.y - 0.06 * $view.sceneWidth),
                lb1 = utilsModule.wrapPoint(b1.x, b1.y + 0.06 * $view.sceneWidth),
                v = utilsModule.getVerticalPoint(b, line),
                rightAngle = utilsModule.getRightAnglePath(v, 3.5, 0, 1),
                rightAngle = utilsModule.getRightAnglePath(rightAngle.p2, 0.017 * $view.sceneWidth - 3.5, 0, 1),
                a = utilsModule.wrapPoint(0.44 * $view.sceneWidth, 0.22 * $view.sceneHeight),
                c = utilsModule.getCrossPoint(l1, l2, a, b1);
            $view.sceneA.a = utilsModule.wrapPoint(0.44, 0.22);
            $view.sceneA.b = utilsModule.wrapPoint(0.68, 0.17);
            $view.sceneA.acb = utilsModule.getTwoPointLength($view.sceneA.a, viewModule.getScalePoint(c), $view.sceneA.b);
            $model.sceneA.a = a;
            $model.sceneA.b1 = b1;
            $model.sceneA.b = b;
            $model.sceneA.lb = lb;
            $model.sceneA.lb1 = lb1;
            $model.sceneA.l1 = l1;
            $model.sceneA.l2 = l2;
            $model.sceneA.c = c;
            $model.sceneA.r = 0.01 * $view.sceneWidth;
            $model.sceneA.rightAngle = rightAngle;
            $model.sceneA.textA = utilsModule.wrapPoint(0.395 * $view.sceneWidth, 0.27 * $view.sceneHeight);
            $model.sceneA.textB = utilsModule.wrapPoint(0.69 * $view.sceneWidth, 0.20 * $view.sceneHeight);
            $model.sceneA.textC = utilsModule.wrapPoint(c.x - 0.052 * $view.sceneWidth, 0.53 * $view.sceneHeight);
            $model.sceneA.textL = utilsModule.wrapPoint(0.947 * $view.sceneWidth, 0.40 * $view.sceneHeight);
            $model.sceneA.textB1 = utilsModule.wrapPoint(0.69 * $view.sceneWidth, b1.y + 32.5);
            //点 > 字母 > 线 ； 最短的属性  > 任意属性
            if ($view.sceneA.rightAnglePath == null) {
                $view.sceneA.rightAnglePath = svg.paper.path().attr($view.style.lineStyleWhite);
            }
            $view.sceneA.l = $view.sceneA.l ? $view.sceneA.l.attr(utilsModule.getAttr($view.style.lineStyleBlack, utilsModule.wrapPathAttr(l1, l2))) : svg.paper.path().attr(utilsModule.getAttr($view.style.lineStyleBlack, utilsModule.wrapPathAttr(l1, l2)));
            if ($view.sceneA.BB1 == null) {
                $view.sceneA.BB1 = svg.paper.path().attr($view.style.lineStyleBlackDash);
            }
            if ($view.sceneA.AC1 == null) {
                $view.sceneA.AC1 = svg.paper.path();
            }
            if ($view.sceneA.C1B == null) {
                $view.sceneA.C1B = svg.paper.path();
            }
            if ($view.sceneA.B == null) {
                $view.sceneA.B = svg.paper.circle($model.sceneA.b.x, $model.sceneA.b.y, $model.sceneA.r).attr($view.style.circleStylePurple);
            } else {
                $view.sceneA.B.attr({ cx: $model.sceneA.b.x, cy: $model.sceneA.b.y, r: $model.sceneA.r });
            }
            $view.sceneA.textL = $view.sceneA.textL ? $view.sceneA.textL.attr(utilsModule.getAttr($model.sceneA.textL)) : svg.paper.text($model.sceneA.textL.x, $model.sceneA.textL.y, "l").attr($view.style.textStyleBlack);
            if ($view.sceneA.AC == null) {
                $view.sceneA.AC = svg.paper.path();
            }
            if ($view.sceneA.C1B1 == null) {
                $view.sceneA.C1B1 = svg.paper.path();
            }
            if ($view.sceneA.CB1 == null) {
                $view.sceneA.CB1 = svg.paper.path();
            }
            if ($view.sceneA.CB == null) {
                $view.sceneA.CB = svg.paper.path();
            }
            if ($view.sceneA.A == null) {
                $view.sceneA.A = svg.paper.circle($model.sceneA.a.x, $model.sceneA.a.y, $model.sceneA.r).attr($view.style.circleStylePurple);
            } else {
                $view.sceneA.A.attr({ cx: $model.sceneA.a.x, cy: $model.sceneA.a.y, r: $model.sceneA.r });
            }
            if ($view.sceneA.C1 == null) {
                $view.sceneA.C1 = svg.paper.circle();
            }
            if ($view.sceneA.B1 == null) {
                $view.sceneA.B1 = svg.paper.circle($model.sceneA.b1.x, $model.sceneA.b1.y, $model.sceneA.r).attr($view.style.circleStylePurple);
            } else {
                $view.sceneA.B1.attr({ cx: $model.sceneA.b1.x, cy: $model.sceneA.b1.y, r: $model.sceneA.r });
            }
            if ($view.sceneA.C == null) {
                $view.sceneA.C = svg.paper.circle($model.sceneA.c.x, $model.sceneA.c.y, $model.sceneA.r).attr($view.style.circleStylePurple);
            } else {
                $view.sceneA.C.attr({ cx: $model.sceneA.c.x, cy: $model.sceneA.c.y, r: $model.sceneA.r });
            }
            if ($view.sceneA.textC1 == null) {
                $view.sceneA.textC1 = svg.paper.text(0, 0, "C'").attr(utilsModule.getAttr($view.style.textStyleRed, { opacity: 0 }, { y: $model.sceneA.textC.y }));
            } else {
                $view.sceneA.textC1.attr({ y: $model.sceneA.textC.y });
            }
            $view.sceneA.textA = $view.sceneA.textA ? $view.sceneA.textA.attr(utilsModule.getAttr($model.sceneA.textA)) : svg.paper.text($model.sceneA.textA.x, $model.sceneA.textA.y, 'A').attr($view.style.textStylePurple);
            $view.sceneA.textB = $view.sceneA.textB ? $view.sceneA.textB.attr(utilsModule.getAttr($model.sceneA.textB)) : svg.paper.text($model.sceneA.textB.x, $model.sceneA.textB.y, 'B').attr($view.style.textStylePurple);
            $view.sceneA.textB1 = $view.sceneA.textB1 ? $view.sceneA.textB1.attr(utilsModule.getAttr($model.sceneA.textB1)) : svg.paper.text($model.sceneA.textB1.x, $model.sceneA.textB1.y, "B'").attr(utilsModule.getAttr($view.style.textStylePurple, { opacity: 0 }));
            $view.sceneA.textC = $view.sceneA.textC ? $view.sceneA.textC.attr(utilsModule.getAttr($model.sceneA.textC)) : svg.paper.text($model.sceneA.textC.x, $model.sceneA.textC.y, "C").attr(utilsModule.getAttr($view.style.textStylePurple, { opacity: 0 }));
            //初始化AC'、C'B
            if ($model.sceneA.c1) {
                //出现了C'点
                var x = $model.sceneA.c1.x * $model.ratio,
                    y = $model.sceneA.c1.y * $model.ratio;
                self._chooseC1(x, y);
                $view.sceneA.C1.attr(utilsModule.getAttr($view.style.circleStyleRed, { r: $model.sceneA.r }));
                $view.sceneA.AC1.attr(getAttr($view.style.lineStyleRed, getD($model.sceneA.a, $model.sceneA.c1)));
                $view.sceneA.C1B.attr(getAttr($view.style.lineStyleRed, getD($model.sceneA.c1, $model.sceneA.b)));
                //$view.sceneA.C1.attr({cx: x, cy:y, r: $model.sceneA.r});
            }
            //初始化最短路径
            if (!$model.sceneA.isAnimate && $model.sceneA.shortestPath === 0) {
                $view.sceneA.AC.attr(getAttr($view.style.lineStylePurple, getD($model.sceneA.a, $model.sceneA.c)));
                $view.sceneA.CB.attr(getAttr($view.style.lineStylePurple, getD($model.sceneA.c, $model.sceneA.b)));
                $view.sceneA.CB1.attr(getAttr($view.style.lineStylePurpleDash, getD($model.sceneA.c, $model.sceneA.b1)));
                $view.sceneA.BB1.attr(getAttr($view.style.lineStyleBlackDash, getD($model.sceneA.b, $model.sceneA.b1)));
                $view.sceneA.rightAnglePath.attr(getAttr($view.style.lineStyleWhite, getD($model.sceneA.rightAngle.p1, $model.sceneA.rightAngle.p2, $model.sceneA.rightAngle.p3)));
            } else {
                $view.sceneA.AC.attr(getAttr($view.style.lineStylePurple, getD($model.sceneA.a, $model.sceneA.a)));
                $view.sceneA.CB1.attr(getAttr($view.style.lineStylePurpleDash, getD($model.sceneA.c, $model.sceneA.c)));
                $view.sceneA.CB.attr(getAttr($view.style.lineStylePurple, getD($model.sceneA.b, $model.sceneA.b)));
                $view.sceneA.C1B1.attr(getAttr($view.style.lineStyleRedDash, getD($model.sceneA.b1, $model.sceneA.b1)));
                $view.sceneA.BB1.attr(getAttr($view.style.lineStyleBlackDash, getD($model.sceneA.lb, $model.sceneA.lb)));
            }
            //初始化显示相等线段
            if (!$model.sceneA.isAnimate && $model.sceneA.showSamePath === 2) {
                $view.sceneA.samePathDom.removeClass('hide_dom');
                $view.sceneA.C1B1.attr(getAttr($view.style.lineStyleRedDash, getD($model.sceneA.c1, $model.sceneA.b1)));
            }
            //初始化显示三角形
            if (!$model.sceneA.isAnimate && $model.sceneA.showTriangle === 2) {
                $view.sceneA.AC1.attr({ stroke: CONST_VALUE.YELLOW });
                $view.sceneA.C1B1.attr({ stroke: CONST_VALUE.YELLOW });
                $view.sceneA.AC.attr({ stroke: CONST_VALUE.YELLOW });
                $view.sceneA.CB1.attr({ stroke: CONST_VALUE.YELLOW });
            }
        },
        _initScenehorseState: function _initScenehorseState() {
            var getAttr = utilsModule.getAttr,
                getD = utilsModule.wrapPathAttr;
            $view.sceneA.AC1.attr(getAttr($view.style.lineStyleRed, getD($model.sceneA.a, $model.sceneA.a)));
            $view.sceneA.C1B.attr(getAttr($view.style.lineStyleRed, getD($model.sceneA.b, $model.sceneA.b)));
            $view.sceneA.textC1.attr({ opacity: 0 });
            this._initSceneHorseAnimate();
            $model.sceneA.c1 = null;
            $model.sceneA.isFlash = false;
            $model.sceneB.flashTogether = false;
            $view.sceneA.samePathDom.find("a").removeClass('click_disabled');
            //加上绿色背景
            getDom('.js_ShortestPath_green_bg').removeClass('hide_dom');
        },
        _initSceneHorseAnimate: function _initSceneHorseAnimate() {
            var getAttr = utilsModule.getAttr,
                getD = utilsModule.wrapPathAttr;
            $view.sceneA.rightAnglePath.attr(getD($model.sceneA.rightAngle.p1, $model.sceneA.rightAngle.p1));
            $view.sceneA.AC.attr(getAttr($view.style.lineStylePurple, getD($model.sceneA.a, $model.sceneA.a)));
            $view.sceneA.CB1.attr(getAttr($view.style.lineStylePurpleDash, getD($model.sceneA.c, $model.sceneA.c)));
            $view.sceneA.CB.attr(getAttr($view.style.lineStylePurple, getD($model.sceneA.b, $model.sceneA.b)));
            $view.sceneA.C1B1.attr(getAttr($view.style.lineStyleRedDash, getD($model.sceneA.b1, $model.sceneA.b1)));
            $view.sceneA.BB1.attr(getD($model.sceneA.lb, $model.sceneA.lb));
            $view.sceneA.C1.attr(getAttr({ opacity: 0 }, $view.style.circleStyleRed));
            $view.sceneA.B1.attr({ opacity: 0 });
            $view.sceneA.C.attr({ opacity: 0 });
            $view.sceneA.textB1.attr({ opacity: 0 });
            $view.sceneA.textC.attr({ opacity: 0 });
            $view.sceneA.samePathDom.addClass('hide_dom');
            viewModule.hideTotalPath($view.sceneA.dashDom);
            $view.sceneA.horseScene.addClass('bg');
            $model.sceneA.shortestPath = 1;
            $model.sceneA.showSamePath = 0;
            $model.sceneA.showTriangle = 0;
            $model.sceneA.showReset = 0;
            self._resetMenu(1, 0, 0, 0);
            $model.sceneA.isShowC = false;
            $model.sceneA.isAnimate = false;
        },
        _initSceneHouse: function _initSceneHouse() {
            var svg = $view.sceneB.svgCanvasHouse,
                svgDom = getDom('#js_ShortestPath_svg_house');
            $view.sceneB.svgDom = svgDom;
            $view.sceneB.dashDom = getDom('.js_sceneB_AtoB');
            $view.sceneB.samePathDom = getDom('.js_ShortestPath_sceneB_showPath');
            self._initStyle();

            var wrapPoint = utilsModule.wrapPoint;
            var la1 = wrapPoint(0.49201 * $view.sceneWidth, 0.62385 * $view.sceneHeight),
                ////wrapPoint(0.45 * $view.sceneWidth, 0.657 * $view.sceneHeight),
            la2 = wrapPoint($view.sceneWidth, 0.223 * $view.sceneHeight),
                lb1 = wrapPoint(0.52295 * $view.sceneWidth, 0.746 * $view.sceneHeight),
                ////wrapPoint(0.48 * $view.sceneWidth, 0.78 * $view.sceneHeight),
            lb2 = wrapPoint($view.sceneWidth, 0.37 * $view.sceneHeight),
                b = wrapPoint(0.84 * $view.sceneWidth, 0.78 * $view.sceneHeight),
                a = wrapPoint(0.45 * $view.sceneWidth, 0.385 * $view.sceneHeight),
                la = utilsModule.getLineExp(la1, la2),
                lb = utilsModule.getLineExp(lb1, lb2),
                a1 = utilsModule.getTranslatePoint(b, a, la, lb),
                n = utilsModule.getCrossPoint(b, a1, lb1, lb2),
                m = utilsModule.getVerticalPoint(n, la),
                r = 0.01 * $view.sceneWidth;
            $view.sceneB.pa = utilsModule.wrapPoint(0.45, 0.385);
            $view.sceneB.pb = utilsModule.wrapPoint(0.84, 0.78);
            $view.sceneB.amnb = utilsModule.getTwoPointLength($view.sceneB.pa, viewModule.getScalePoint(m), viewModule.getScalePoint(n), $view.sceneB.pb);
            $model.sceneB.la1 = la1;
            $model.sceneB.la2 = la2;
            $model.sceneB.lb1 = lb1;
            $model.sceneB.lb2 = lb2;
            $model.sceneB.a = a;
            $model.sceneB.a1 = a1;
            $model.sceneB.a2 = utilsModule.getVerticalPoint(a, lb);
            $model.sceneB.b = b;
            $model.sceneB.n = n;
            $model.sceneB.m = m;
            $model.sceneB.r = r;
            var rightAngleA = utilsModule.getRightAnglePath($model.sceneB.a2, 3.5, Math.atan(la.k), 1);
            $model.sceneB.rightAngleA = utilsModule.getRightAnglePath(rightAngleA.p2, 0.017 * $view.sceneWidth - 3.5, Math.atan(la.k), 1);
            $model.sceneB.rightAngleM = utilsModule.getRightAnglePath(m, 0.017 * $view.sceneWidth, Math.atan(lb.k), 3);
            $model.sceneB.rightAngleM1 = null;
            $model.sceneB.textA = wrapPoint(a.x - 0.06 * $view.sceneWidth, a.y + 0.006 * $view.sceneWidth);
            $model.sceneB.textA1 = wrapPoint(a1.x - 0.07 * $view.sceneWidth, a1.y + 0.006 * $view.sceneWidth);
            $model.sceneB.textB = wrapPoint(0.83 * $view.sceneWidth, 0.88 * $view.sceneHeight);
            $model.sceneB.textM = wrapPoint(m.x, m.y - $view.sceneWidth * 0.03);
            $model.sceneB.textN = wrapPoint(n.x - $view.sceneWidth * 0.02, n.y + $view.sceneWidth * 0.06);
            $model.sceneB.textM1 = wrapPoint(0, 0);
            $model.sceneB.textN1 = wrapPoint(0, 0);
            $model.sceneB.textLa = wrapPoint(0.947 * $view.sceneWidth, 0.2 * $view.sceneHeight);
            $model.sceneB.textLb = wrapPoint(0.947 * $view.sceneWidth, 0.53 * $view.sceneHeight);

            $view.sceneB.rightAngleAPath = svg.path().attr($view.style.lineStyleWhite);
            $view.sceneB.rightAngleMPath = svg.path().attr($view.style.lineStyleWhite);
            $view.sceneB.rightAngleM1Path = svg.path().attr($view.style.lineStyleWhite);
            $view.sceneB.a = svg.path(utilsModule.wrapPathAttr(la1, la2)).attr($view.style.lineStyleBlack);
            $view.sceneB.b = svg.path(utilsModule.wrapPathAttr(lb1, lb2)).attr($view.style.lineStyleBlack);

            $view.sceneB.AM1 = svg.path().attr($view.style.lineStyleRed);
            $view.sceneB.M1N1 = svg.path().attr($view.style.lineStyleRed);
            $view.sceneB.N1B = svg.path();
            $view.sceneB.A1N1 = svg.path();
            $view.sceneB.AM = svg.path().attr($view.style.lineStylePurple);
            $view.sceneB.MN = svg.path().attr($view.style.lineStylePurple);
            $view.sceneB.NB = svg.path();
            $view.sceneB.A1N = svg.path();
            $view.sceneB.AA1 = svg.path().attr($view.style.lineStylePurpleDash);
            $view.sceneB.A1A2 = svg.path().attr($view.style.lineStyleBlackDash);

            $view.sceneB.textla = svg.text($model.sceneB.textLa.x, $model.sceneB.textLa.y, 'a').attr($view.style.textStyleBlack);
            $view.sceneB.textlb = svg.text($model.sceneB.textLb.x, $model.sceneB.textLb.y, 'b').attr($view.style.textStyleBlack);
            $view.sceneB.textA = svg.text($model.sceneB.textA.x, $model.sceneB.textA.y, 'A').attr($view.style.textStylePurple);
            $view.sceneB.textB = svg.text($model.sceneB.textB.x, $model.sceneB.textB.y, 'B').attr($view.style.textStylePurple);
            $view.sceneB.textA1 = svg.text(0, 0, "A'").attr($view.style.textStylePurple);
            $view.sceneB.textM1 = svg.text($model.sceneB.textM1.x, $model.sceneB.textM1.y, "M'").attr($view.style.textStyleRed);
            $view.sceneB.textN1 = svg.text($model.sceneB.textN1.x, $model.sceneB.textN1.y, "N'").attr($view.style.textStyleRed);
            $view.sceneB.textM = svg.text($model.sceneB.textM.x, $model.sceneB.textM.y, "M").attr($view.style.textStylePurple);
            $view.sceneB.textN = svg.text($model.sceneB.textN.x, $model.sceneB.textN.y, "N").attr($view.style.textStylePurple);

            $view.sceneB.A = svg.circle(a.x, a.y, r).attr($view.style.circleStylePurple);
            $view.sceneB.B = svg.circle(b.x, b.y, r).attr($view.style.circleStylePurple);
            $view.sceneB.A1 = svg.circle(a1.x, a1.y, r).attr($view.style.circleStylePurple);
            $view.sceneB.M1 = svg.circle().attr($view.style.circleStyleRed);
            $view.sceneB.N1 = svg.circle().attr($view.style.circleStyleRed);
            $view.sceneB.M = svg.circle(m.x, m.y, r).attr($view.style.circleStylePurple);
            $view.sceneB.N = svg.circle(n.x, n.y, r).attr($view.style.circleStylePurple);
            this._initSceneHouseState();
            viewModule.setMenu(3, 0);
        },
        _calculationB: function _calculationB() {
            var getAttr = utilsModule.getAttr,
                getD = utilsModule.wrapPathAttr;
            var svg = $view.sceneB.svgCanvasHouse,
                svgDom = getDom('#js_ShortestPath_svg_house');
            $view.sceneB.svgDom = svgDom;
            $view.sceneB.dashDom = getDom('.js_sceneB_AtoB');
            $view.sceneB.samePathDom = getDom('.js_ShortestPath_sceneB_showPath');
            if ($model.currentScene == 'sceneB') {
                $view.sceneHeight = svgDom.height();
                $view.sceneWidth = svgDom.width();
            }
            self._initStyle();
            var wrapPoint = utilsModule.wrapPoint;
            var la1 = wrapPoint(0.49201 * $view.sceneWidth, 0.62385 * $view.sceneHeight),
                ////wrapPoint(0.45 * $view.sceneWidth, 0.657 * $view.sceneHeight),
            la2 = wrapPoint($view.sceneWidth, 0.223 * $view.sceneHeight),
                lb1 = wrapPoint(0.52295 * $view.sceneWidth, 0.746 * $view.sceneHeight),
                ////wrapPoint(0.48 * $view.sceneWidth, 0.78 * $view.sceneHeight),
            lb2 = wrapPoint($view.sceneWidth, 0.37 * $view.sceneHeight),
                b = wrapPoint(0.84 * $view.sceneWidth, 0.78 * $view.sceneHeight),
                a = wrapPoint(0.45 * $view.sceneWidth, 0.385 * $view.sceneHeight),
                la = utilsModule.getLineExp(la1, la2),
                lb = utilsModule.getLineExp(lb1, lb2),
                a1 = utilsModule.getTranslatePoint(b, a, la, lb),
                n = utilsModule.getCrossPoint(b, a1, lb1, lb2),
                m = utilsModule.getVerticalPoint(n, la),
                r = 0.01 * $view.sceneWidth;
            $view.sceneB.pa = utilsModule.wrapPoint(0.45, 0.385);
            $view.sceneB.pb = utilsModule.wrapPoint(0.84, 0.78);
            $view.sceneB.amnb = utilsModule.getTwoPointLength($view.sceneB.pa, viewModule.getScalePoint(m), viewModule.getScalePoint(n), $view.sceneB.pb);
            $model.sceneB.la1 = la1;
            $model.sceneB.la2 = la2;
            $model.sceneB.lb1 = lb1;
            $model.sceneB.lb2 = lb2;
            $model.sceneB.a = a;
            $model.sceneB.a1 = a1;
            $model.sceneB.a2 = utilsModule.getVerticalPoint(a, lb);
            $model.sceneB.b = b;
            $model.sceneB.n = n;
            $model.sceneB.m = m;
            $model.sceneB.r = r;
            var rightAngleA = utilsModule.getRightAnglePath($model.sceneB.a2, 3.5, Math.atan(la.k), 1);
            $model.sceneB.rightAngleA = utilsModule.getRightAnglePath(rightAngleA.p2, 0.017 * $view.sceneWidth - 3.5, Math.atan(la.k), 1);
            $model.sceneB.rightAngleM = utilsModule.getRightAnglePath(m, 0.017 * $view.sceneWidth, Math.atan(lb.k), 3);

            $model.sceneB.rightAngleM1 = null;
            $model.sceneB.textA = wrapPoint(a.x - 0.06 * $view.sceneWidth, a.y + 0.006 * $view.sceneWidth);
            $model.sceneB.textA1 = wrapPoint(a1.x - 0.07 * $view.sceneWidth, a1.y + 0.006 * $view.sceneWidth);
            $model.sceneB.textB = wrapPoint(0.83 * $view.sceneWidth, 0.88 * $view.sceneHeight);
            $model.sceneB.textM = wrapPoint(m.x, m.y - $view.sceneWidth * 0.03);
            $model.sceneB.textN = wrapPoint(n.x - $view.sceneWidth * 0.02, n.y + $view.sceneWidth * 0.06);
            $model.sceneB.textM1 = wrapPoint(0, 0);
            $model.sceneB.textN1 = wrapPoint(0, 0);
            $model.sceneB.textLa = wrapPoint(0.947 * $view.sceneWidth, 0.2 * $view.sceneHeight);
            $model.sceneB.textLb = wrapPoint(0.947 * $view.sceneWidth, 0.53 * $view.sceneHeight);

            if ($view.sceneB.rightAngleAPath == null) {
                $view.sceneB.rightAngleAPath = svg.path().attr($view.style.lineStyleWhite);
            }
            if ($view.sceneB.rightAngleMPath == null) {
                $view.sceneB.rightAngleMPath = svg.path().attr($view.style.lineStyleWhite);
            }
            if ($view.sceneB.rightAngleM1Path == null) {
                $view.sceneB.rightAngleM1Path = svg.path().attr($view.style.lineStyleWhite);
            }
            if ($view.sceneB.a == null) {
                $view.sceneB.a = svg.path(utilsModule.wrapPathAttr(la1, la2)).attr($view.style.lineStyleBlack);
            } else {
                $view.sceneB.a.attr(getAttr($view.style.lineStyleBlack, getD($model.sceneB.la1, $model.sceneB.la2)));
            }
            if ($view.sceneB.b == null) {
                $view.sceneB.b = svg.path(utilsModule.wrapPathAttr(lb1, lb2)).attr($view.style.lineStyleBlack);
            } else {
                $view.sceneB.b.attr(getAttr($view.style.lineStyleBlack, getD($model.sceneB.lb1, $model.sceneB.lb2)));
            }

            if ($view.sceneB.AM1 == null) {
                $view.sceneB.AM1 = svg.path().attr($view.style.lineStyleRed);
            }
            if ($view.sceneB.M1N1 == null) {
                $view.sceneB.M1N1 = svg.path().attr($view.style.lineStyleRed);
            }
            if ($view.sceneB.N1B == null) {
                $view.sceneB.N1B = svg.path();
            }
            if ($view.sceneB.A1N1 == null) {
                $view.sceneB.A1N1 = svg.path();
            }
            if ($view.sceneB.AM == null) {
                $view.sceneB.AM = svg.path().attr($view.style.lineStylePurple);
            }
            if ($view.sceneB.MN == null) {
                $view.sceneB.MN = svg.path().attr($view.style.lineStylePurple);
            }
            if ($view.sceneB.NB == null) {
                $view.sceneB.NB = svg.path();
            }
            if ($view.sceneB.A1N == null) {
                $view.sceneB.A1N = svg.path();
            }
            if ($view.sceneB.AA1 == null) {
                $view.sceneB.AA1 = svg.path().attr($view.style.lineStylePurpleDash);
            }
            if ($view.sceneB.A1A2 == null) {
                $view.sceneB.A1A2 = svg.path().attr($view.style.lineStyleBlackDash);
            }

            $view.sceneB.textla = $view.sceneB.textla ? $view.sceneB.textla.attr(utilsModule.getAttr($model.sceneB.textLa)) : svg.text($model.sceneB.textLa.x, $model.sceneB.textLa.y, 'a').attr($view.style.textStyleBlack);
            $view.sceneB.textlb = $view.sceneB.textlb ? $view.sceneB.textlb.attr(utilsModule.getAttr($model.sceneB.textLb)) : svg.text($model.sceneB.textLb.x, $model.sceneB.textLb.y, 'b').attr($view.style.textStyleBlack);
            $view.sceneB.textA = $view.sceneB.textA ? $view.sceneB.textA.attr(utilsModule.getAttr($model.sceneB.textA)) : svg.text($model.sceneB.textA.x, $model.sceneB.textA.y, 'A').attr($view.style.textStylePurple);
            $view.sceneB.textB = $view.sceneB.textB ? $view.sceneB.textB.attr(utilsModule.getAttr($model.sceneB.textB)) : svg.text($model.sceneB.textB.x, $model.sceneB.textB.y, 'B').attr($view.style.textStylePurple);
            $view.sceneB.textA1 = $view.sceneB.textA1 ? $view.sceneB.textA1.attr(utilsModule.getAttr($model.sceneB.textA1)) : svg.text(0, 0, "A").attr($view.style.textStylePurple);
            $view.sceneB.textM1 = $view.sceneB.textM1 ? $view.sceneB.textM1.attr(utilsModule.getAttr($model.sceneB.textM1)) : svg.text($model.sceneB.textM1.x, $model.sceneB.textM1.y, "M'").attr($view.style.textStyleRed);
            $view.sceneB.textN1 = $view.sceneB.textN1 ? $view.sceneB.textN1.attr(utilsModule.getAttr($model.sceneB.textN1)) : svg.text($model.sceneB.textN1.x, $model.sceneB.textN1.y, "N'").attr($view.style.textStyleRed);
            $view.sceneB.textM = $view.sceneB.textM ? $view.sceneB.textM.attr(utilsModule.getAttr($model.sceneB.textM)) : svg.text($model.sceneB.textM.x, $model.sceneB.textM.y, "M").attr($view.style.textStylePurple);
            $view.sceneB.textN = $view.sceneB.textN ? $view.sceneB.textN.attr(utilsModule.getAttr($model.sceneB.textN)) : svg.text($model.sceneB.textN.x, $model.sceneB.textN.y, "N").attr($view.style.textStylePurple);

            if ($view.sceneB.A == null) {
                $view.sceneB.A = svg.circle(a.x, a.y, r).attr($view.style.circleStylePurple);
            } else {
                $view.sceneB.A.attr({ cx: $model.sceneB.a.x, cy: $model.sceneB.a.y, r: r });
            }
            if ($view.sceneB.B == null) {
                $view.sceneB.B = svg.circle(b.x, b.y, r).attr($view.style.circleStylePurple);
            } else {
                $view.sceneB.B.attr({ cx: $model.sceneB.b.x, cy: $model.sceneB.b.y, r: r });
            }
            if ($view.sceneB.A1 == null) {
                $view.sceneB.A1 = svg.circle(a1.x, a1.y, r).attr($view.style.circleStylePurple);
            }
            if ($view.sceneB.M1 == null) {
                $view.sceneB.M1 = svg.circle().attr($view.style.circleStyleRed);
            }
            if ($view.sceneB.N1 == null) {
                $view.sceneB.N1 = svg.circle().attr($view.style.circleStyleRed);
            }
            if ($view.sceneB.M == null) {
                $view.sceneB.M = svg.circle(m.x, m.y, r).attr($view.style.circleStylePurple);
            }
            if ($view.sceneB.N == null) {
                $view.sceneB.N = svg.circle(n.x, n.y, r).attr($view.style.circleStylePurple);
            }
            //当N'点出现时
            if ($model.sceneB.n1) {
                var x = $model.sceneB.n1.x * $model.ratio,
                    y = $model.sceneB.n1.y * $model.ratio;
                //鼠标获取的点
                var o = utilsModule.wrapPoint(x, y);
                var lb = utilsModule.getLineExp($model.sceneB.lb1, $model.sceneB.lb2),
                    la = utilsModule.getLineExp($model.sceneB.la1, $model.sceneB.la2);
                //获取直线b的垂点
                var n1 = utilsModule.getVerticalPoint(o, lb);
                //获取直线a的垂点
                var m1 = utilsModule.getVerticalPoint(n1, la);
                $model.sceneB.m1 = m1;
                $model.sceneB.n1 = n1;
                self._chooseN1(m1, n1, lb);
                $view.sceneB.N1.attr(getAttr($view.style.circleStyleRed, { r: $model.sceneB.r }));
                console.log('N1', $model.sceneB.n1);
                //$view.sceneB.rightAngleM1Path.attr({opacity: 0});
                $view.sceneB.M1.attr(getAttr($view.style.circleStyleRed, { r: $model.sceneB.r }));
                // $view.sceneB.N1.attr(getAttr($view.style.circleStyleRed));
                $view.sceneB.M1N1.attr(getAttr($view.style.lineStyleRed));
                $view.sceneB.AM1.attr(getAttr($view.style.lineStyleRed));
                //$view.sceneB.A1N1.attr(getAttr($view.style.lineStyleRedDash, getD($model.sceneB.a1, $model.sceneB.n1)));
                $view.sceneB.N1B.attr(getAttr($view.style.lineStyleRed));
                //$view.sceneB.textM1.attr();
                //$view.sceneB.textN1.attr();
            }
            //初始化最短路径
            if (!$model.sceneB.isAnimate && $model.sceneB.shortestPath === 0) {
                var _rightAngleA = $model.sceneB.rightAngleA,
                    _rightAngleM = $model.sceneB.rightAngleM;
                $view.sceneB.rightAngleAPath.attr(getAttr(getD(_rightAngleA.p1, _rightAngleA.p2, _rightAngleA.p3)));
                $view.sceneB.rightAngleMPath.attr(getAttr(getD(_rightAngleM.p1, _rightAngleM.p2, _rightAngleM.p3)));
                $view.sceneB.M.attr(getAttr($view.style.circleStylePurple, { cx: m.x, cy: m.y, r: r }));
                $view.sceneB.N.attr(getAttr($view.style.circleStylePurple, { cx: n.x, cy: n.y, r: r }));
                $view.sceneB.A1.attr(getAttr($view.style.circleStylePurple, { cx: $model.sceneB.a1.x, cy: $model.sceneB.a1.y, r: r }));
                $view.sceneB.AM.attr(getAttr($view.style.lineStylePurple, getD($model.sceneB.a, $model.sceneB.m)));
                $view.sceneB.MN.attr(getAttr($view.style.lineStylePurple, getD($model.sceneB.m, $model.sceneB.n)));
                $view.sceneB.NB.attr(getAttr($view.style.lineStylePurple, getD($model.sceneB.n, $model.sceneB.b)));
                $view.sceneB.A1N.attr(getAttr($view.style.lineStylePurpleDash, getD($model.sceneB.a1, $model.sceneB.n)));
                $view.sceneB.AA1.attr(getAttr($view.style.lineStylePurpleDash, getD($model.sceneB.a, $model.sceneB.a1)));
                $view.sceneB.A1A2.attr(getAttr($view.style.lineStyleBlackDash, getD($model.sceneB.a1, $model.sceneB.a2)));
                $view.sceneB.textA1.attr({ x: $model.sceneB.textA1.x, y: $model.sceneB.textA1.y });
                $view.sceneB.textM.attr({ x: $model.sceneB.textM.x, y: $model.sceneB.textM.y });
                $view.sceneB.textN.attr({ x: $model.sceneB.textN.x, y: $model.sceneB.textN.y });
            } else {
                var _rightAngleA = $model.sceneB.rightAngleA,
                    _rightAngleM = $model.sceneB.rightAngleM;
                $view.sceneB.rightAngleAPath.attr(getAttr(getD(_rightAngleA.p1, _rightAngleA.p2, _rightAngleA.p3), { opacity: 0 }));
                $view.sceneB.rightAngleMPath.attr(getAttr(getD(_rightAngleM.p1, _rightAngleM.p2, _rightAngleM.p3), { opacity: 0 }));
                $view.sceneB.M.attr(getAttr($view.style.circleStylePurple, { opacity: 0 }, { r: r }));
                $view.sceneB.N.attr(getAttr($view.style.circleStylePurple, { opacity: 0 }, { r: r }));
                $view.sceneB.A1.attr(getAttr($view.style.circleStylePurple, { opacity: 0 }, { cx: $model.sceneB.a.x, cy: $model.sceneB.a.y, r: r }));
                $view.sceneB.AM.attr(getAttr($view.style.lineStylePurple, getD($model.sceneB.m, $model.sceneB.m)));
                $view.sceneB.MN.attr(getAttr($view.style.lineStylePurple, getD($model.sceneB.n, $model.sceneB.n)));
                $view.sceneB.NB.attr(getAttr($view.style.lineStylePurple, getD($model.sceneB.n, $model.sceneB.n)));
                $view.sceneB.A1N.attr(getAttr($view.style.lineStylePurpleDash, getD($model.sceneB.a1, $model.sceneB.a1)));
                $view.sceneB.AA1.attr(getAttr($view.style.lineStylePurpleDash, getD($model.sceneB.a, $model.sceneB.a)));
                $view.sceneB.A1A2.attr(getAttr($view.style.lineStylePurpleDash, getD($model.sceneB.a1, $model.sceneB.a1)));
                $view.sceneB.textA1.attr({ opacity: 0, x: $model.sceneB.textA.x, y: $model.sceneB.textA.y, r: r });
                $view.sceneB.textM.attr({ opacity: 0 });
                $view.sceneB.textN.attr({ opacity: 0 });
            }
            //初始化显示三角形
            if (!$model.sceneB.isAnimate && $model.sceneB.showTriangle === 2) {
                $view.sceneB.A1N1.attr({ stroke: CONST_VALUE.YELLOW });
                $view.sceneB.A1N.attr({ stroke: CONST_VALUE.YELLOW });
                $view.sceneB.NB.attr({ stroke: CONST_VALUE.YELLOW });
                $view.sceneB.N1B.attr({ stroke: CONST_VALUE.YELLOW });
            }
        },
        _initSceneHouseState: function _initSceneHouseState() {
            var getAttr = utilsModule.getAttr,
                getD = utilsModule.wrapPathAttr;
            $view.sceneB.rightAngleM1Path.attr({ opacity: 0 });
            $view.sceneB.M1.attr(getAttr({ opacity: 0 }, $view.style.circleStyleRed));
            $view.sceneB.N1.attr(getAttr({ opacity: 0 }, $view.style.circleStyleRed));
            $view.sceneB.M1N1.attr(getD($model.sceneB.a1, $model.sceneB.a1));
            $view.sceneB.AM1.attr(getAttr({ opacity: 0 }, getD($model.sceneB.a, $model.sceneB.a)));
            $view.sceneB.A1N1.attr(getAttr($view.style.lineStyleRedDash, getD($model.sceneB.a1, $model.sceneB.a1)));
            $view.sceneB.N1B.attr(getAttr($view.style.lineStyleRed, { opacity: 0 }));
            $view.sceneB.textM1.attr({ opacity: 0 });
            $view.sceneB.textN1.attr({ opacity: 0 });
            this._initSceneHouseAnimate();
            $model.sceneB.rightAngleM1 = null;
            $model.sceneB.n1 = null;
            $model.sceneB.isFlash = false;
            $model.sceneB.flashTogether = false;
            $view.sceneB.samePathDom.find("a").removeClass('click_disabled');
            //加上绿色背景
            getDom('.js_ShortestPath_green_bg').removeClass('hide_dom');
        },
        _initSceneHouseAnimate: function _initSceneHouseAnimate() {
            var getAttr = utilsModule.getAttr,
                getD = utilsModule.wrapPathAttr;
            var _rightAngleA = $model.sceneB.rightAngleA,
                _rightAngleM = $model.sceneB.rightAngleM;
            $view.sceneB.rightAngleAPath.attr(getAttr(getD(_rightAngleA.p1, _rightAngleA.p2, _rightAngleA.p3), { opacity: 0 }));
            $view.sceneB.rightAngleMPath.attr(getAttr(getD(_rightAngleM.p1, _rightAngleM.p2, _rightAngleM.p3), { opacity: 0 }));
            $view.sceneB.M.attr(getAttr($view.style.circleStylePurple, { opacity: 0 }));
            $view.sceneB.N.attr(getAttr($view.style.circleStylePurple, { opacity: 0 }));
            $view.sceneB.A1.attr(getAttr({ opacity: 0 }, { cx: $model.sceneB.a.x, cy: $model.sceneB.a.y }));
            $view.sceneB.AM.attr(getD($model.sceneB.m, $model.sceneB.m));
            $view.sceneB.MN.attr(getD($model.sceneB.n, $model.sceneB.n));
            $view.sceneB.NB.attr(getAttr($view.style.lineStylePurple, getD($model.sceneB.n, $model.sceneB.n)));
            $view.sceneB.A1N.attr(getAttr($view.style.lineStylePurpleDash, getD($model.sceneB.a1, $model.sceneB.a1)));
            $view.sceneB.AA1.attr(getD($model.sceneB.a, $model.sceneB.a));
            $view.sceneB.A1A2.attr(getD($model.sceneB.a1, $model.sceneB.a1));
            $view.sceneB.textA1.attr({ opacity: 0, x: $model.sceneB.textA.x, y: $model.sceneB.textA.y });
            $view.sceneB.textM.attr({ opacity: 0 });
            $view.sceneB.textN.attr({ opacity: 0 });
            $view.sceneB.samePathDom.addClass('hide_dom');
            $view.sceneB.houseScene.addClass('bg');
            $model.sceneB.shortestPath = 1;
            $model.sceneB.showSamePath = 0;
            $model.sceneB.showTriangle = 0;
            $model.sceneB.showReset = 0;
            self._resetMenu(1, 0, 0, 0);
            viewModule.hideTotalPath($view.sceneB.dashDom);
            $model.sceneB.isShowN = false;
            $model.sceneB.isShowM = false;
            $model.sceneB.isAnimate = false;
        },
        _i18nRender: function _i18nRender() {
            //国际化，读取json文件里的key
            getDom('.js_c_path').html(this.i18n.c_path);
            getDom('.js_c1_path').html(this.i18n.c1_path);
            getDom('.js_n_path').html(this.i18n.n_path);
            getDom('.js_n1_path').html(this.i18n.n1_path);
            getDom('.js_show_shortest_path').html(this.i18n.show_shortest_path);
            getDom('.js_show_equally_line').html(this.i18n.show_equally_line);
            getDom('.js_show_triangle').html(this.i18n.show_triangle);
            getDom('.js_reset').html(this.i18n.reset);
            getDom('.js_c1_pop').html(this.i18n.c1_pop);
            getDom('.js_l_pop').html(this.i18n.l_pop);
            getDom('.js_n1_pop').html(this.i18n.n1_pop);
            getDom('.js_b_pop').html(this.i18n.b_pop);
            getDom('.js_l_pop1').html(this.i18n.l_pop1);
            getDom('.js_b_pop2').html(this.i18n.b_pop2);
        },
        pageShow: function pageShow() {
            var self = this;
            setTimeout(function () {
                self._initView($view);
                self._bindEvent();
            }, 12);
        },
        pageLeave: function pageLeave() {
            this._unbindEvent();
        },
        destroy: function destroy() {
            //先停止动画，然后重置状态，关回收监听
            var v = $view.sceneA;
            viewModule.stopAnimate([v.BB1, v.B1, v.CB1, v.C, v.AC, v.CB]);
            self._initScenehorseState();
            $model.sceneA.showReset = 0;
            var v = $view.sceneB;
            viewModule.stopAnimate([v.AA1, v.A1A2, v.A1, v.A1N, v.MN, v.AM, v.NB, v.N, v.textA1]);
            self._initSceneHouseState();
            $model.sceneB.showReset = 0;
            self = null;
            getDom('.js_ShortestPath_wrapper').off('click');
        },
        /****以下开始为Presenter的私有方法*****/
        _chooseScene: function _chooseScene() {
            //var self = this;
            $view.btns && $view.btns.on('click', function (e) {
                var _this = $(this);
                if ($model.ratio == $model.lastRatio) {
                    $model.ratio = 1;
                }
                $model.lastRatio = $model.ratio;
                switch (_this.index()) {
                    case 0:
                        viewModule.closeMask();
                        //如果还在同一个场景不处理
                        if ($view.sceneA.horseScene.hasClass('hide_dom') && !$model.sceneB.isAnimate) {
                            self._calculationA();
                            $view.sceneA.horseScene.removeClass('hide_dom');
                            $view.sceneB.houseScene.addClass('hide_dom');
                            $model.currentScene = "sceneA";
                            _this.siblings().removeClass('on');
                            _this.addClass("on");
                            if (!$model.sceneA.hasInit) {
                                $model.sceneA.hasInit = !$model.sceneA.isAnimate && $model.sceneA.shortestPath == 1 && !$model.sceneA.hasInit;
                                $model.sceneA.hasInit && viewModule.initMask(CONST_VALUE.TOAST0);
                                $model.sceneA.hasInit = true;
                            }
                            self._resetMenu($model.sceneA.shortestPath, $model.sceneA.showSamePath, $model.sceneA.showTriangle, $model.sceneA.showReset);
                            if (!$view.sceneA.horseScene.hasClass('bg')) {
                                //去掉绿色背景
                                getDom('.js_ShortestPath_green_bg').addClass('hide_dom');
                            } else {
                                //加上绿色背景
                                getDom('.js_ShortestPath_green_bg').removeClass('hide_dom');
                            }
                        }

                        console.log("scene horse");
                        break;
                    case 1:
                        viewModule.closeMask();
                        if ($view.sceneB.houseScene.hasClass('hide_dom') && !$model.sceneA.isAnimate) {
                            self._calculationB();
                            $view.sceneB.houseScene.removeClass('hide_dom');
                            $view.sceneA.horseScene.addClass('hide_dom');
                            $model.currentScene = "sceneB";
                            self._resetMenu($model.sceneB.shortestPath, $model.sceneB.showSamePath, $model.sceneB.showTriangle, $model.sceneB.showReset);
                            _this.siblings().removeClass('on');
                            _this.addClass("on");
                            if (!$model.sceneB.hasInit) {
                                $model.sceneB.hasInit = !$model.sceneB.isAnimate && $model.sceneB.shortestPath == 1 && !$model.sceneB.hasInit;
                                $model.sceneB.hasInit && viewModule.initMask(CONST_VALUE.TOAST1);
                                $model.sceneB.hasInit = true;
                            }
                            if (!$view.sceneB.houseScene.hasClass('bg')) {
                                //去掉绿色背景
                                getDom('.js_ShortestPath_green_bg').addClass('hide_dom');
                            } else {
                                //加上绿色背景
                                getDom('.js_ShortestPath_green_bg').removeClass('hide_dom');
                            }
                        }

                        console.log("scene house");
                        break;
                    default:
                        console.log("error btn");
                }
                e.stopPropagation();
            });
        },

        _chooseC1: function _chooseC1(x, y) {
            var a = $model.sceneA.a,
                c1 = utilsModule.wrapPoint(x, y),
                c2 = viewModule.getScalePoint(c1),
                b = $model.sceneA.b,
                c = $model.sceneA.c;
            $view.sceneA.C1.attr({ opacity: 1 });
            var acb = $view.sceneA.acb,
                ac1b = utilsModule.getTwoPointLength($view.sceneA.a, c2, $view.sceneA.b); //根据比例计算路径长度
            acb = Math.round(acb * 1000); //计算完路径长度后放大1000倍
            ac1b = Math.round(ac1b * 1000);
            if (acb === ac1b) {
                c1 = c;
                if ($model.sceneA.isShowC) {
                    //任选点的长度如果和最短相同那么就改变文字显示
                    viewModule.setText($view.sceneA.textC, "C(C')");
                    viewModule.setText($view.sceneA.textC1, "");
                } else {
                    viewModule.setText($view.sceneA.textC1, "C'"); //如果此时还没有显示出c点那么c'还是照样显示
                }
                if ($model.sceneA.isFlash && ($model.sceneA.type === 3 || $model.sceneA.type === 1)) {
                    //闪烁c点相关的停止闪烁（动画进行时，c'移动最短点）
                    var v = [$view.sceneA.AC, $view.sceneA.CB, $view.sceneA.CB1, $view.sceneA.AC1, $view.sceneA.C1B, $view.sceneA.C1B1];
                    viewModule.stopAnimate(v);
                    $model.sceneA.isFlash = false;
                    $model.sceneA.type = -1;
                    $view.sceneA.samePathDom.find("a").removeClass('click_disabled');
                }
            } else {
                viewModule.setText($view.sceneA.textC, "C");
                viewModule.setText($view.sceneA.textC1, "C'");
                if ($model.sceneA.isFlash && ($model.sceneA.type === 4 || $model.sceneA.type === 2)) {
                    //闪烁c'点相关线段时候就停止闪烁
                    var v = [$view.sceneA.AC1, $view.sceneA.C1B, $view.sceneA.C1B1];
                    viewModule.stopAnimate(v);
                    $model.sceneA.isFlash = false;
                    $model.sceneA.type = -1;
                    $view.sceneA.samePathDom.find("a").removeClass('click_disabled');
                }
            }
            viewModule.drawPoint($view.sceneA.C1, c1, $model.sceneA.r - CONST_VALUE.CIRCLE_STROKE_WIDTH3 / 2);
            viewModule.drawLine($view.sceneA.AC1, a, c1);
            viewModule.drawLine($view.sceneA.C1B, c1, b);
            if (!$model.sceneA.c1 && $model.sceneA.showReset === 0) {
                viewModule.setMenu(3, 1);
                $model.sceneA.showReset = 1;
            }
            $model.sceneA.c1 = c1;
            $view.sceneA.textC1.attr({
                'x': c1.x - 0.052 * $view.sceneWidth,
                opacity: 1
            });
            var b1 = $model.sceneA.b1;
            if (b1 && $model.sceneA.showSamePath === 2) {
                $view.sceneA.C1B1.attr(utilsModule.wrapPathAttr(c1, b1));
            }

            var content = 'AC\'+C\'B=' + ac1b + 'm';
            viewModule.showTotalPath($view.sceneA.dashDom, 1, content);
        },
        _bindSceneAEvent: function _bindSceneAEvent() {
            $view.sceneA.horseScene.on('mousedown touchstart', function (event) {
                var tempPosition = self._getRelateLocation(event, $view.sceneA.svgDom);
                var x = tempPosition.x,
                    y = tempPosition.y;
                if (x >= $model.sceneA.l1.x && x <= $model.sceneA.l2.x && y >= $model.sceneA.l1.y - $model.sceneA.r && y <= $model.sceneA.l1.y + $model.sceneA.r) {
                    $view.pressDown = true;
                    if ($model.sceneA.flashTogether) {
                        //如果是最短点和任意点一起闪烁时就全部停止
                        var v = [$view.sceneA.AC, $view.sceneA.CB, $view.sceneA.CB1, $view.sceneA.AC1, $view.sceneA.C1B, $view.sceneA.C1B1];
                        viewModule.stopAnimate(v);
                        $model.sceneA.isFlash = false;
                        $model.sceneA.flashTogether = false;
                        $model.sceneA.type = -1;
                        $view.sceneA.samePathDom.find("a").removeClass('click_disabled');
                    }
                    $view.sceneA.C1.attr($view.style.circleStyleRedStroke);
                    y = $model.sceneA.l1.y;
                    //边界处理
                    if (x < $model.sceneA.l1.x + $model.sceneA.r) {
                        x = $model.sceneA.l1.x + $model.sceneA.r;
                    }
                    if (x > $model.sceneA.l2.x - $model.sceneA.r) {
                        x = $model.sceneA.l2.x - $model.sceneA.r;
                    }
                    self._chooseC1(x, y);
                }
            }).on('mousemove touchmove', function (event) {
                var tempPosition = self._getRelateLocation(event, $view.sceneA.svgDom);
                var x = tempPosition.x,
                    y = tempPosition.y;
                if ($view.pressDown) {
                    begin1 = new Date();
                    if (startTime1 == null) {
                        startTime1 = begin1;
                    }
                    //节流处理，每16ms处理一次
                    if (begin1 - startTime1 <= 16) {
                        return;
                    }
                    startTime1 = null;
                    //边界移动事件释放处理
                    if (navigator.userAgent.search('Mobile') > 0 && (x > $view.sceneWidth || x < 0 || y < 0 || y > $view.sceneHeight)) {
                        $(this).trigger('touchend');
                        return;
                    }
                    if (x < $model.sceneA.l1.x + $model.sceneA.r) {
                        x = $model.sceneA.l1.x + $model.sceneA.r;
                    }
                    if (x > $model.sceneA.l2.x - $model.sceneA.r) {
                        x = $model.sceneA.l2.x - $model.sceneA.r;
                    }
                    y = $model.sceneA.l1.y;
                    self._chooseC1(x, y);
                }
            }).on('touchend mouseup', function () {
                $view.sceneA.C1.attr(utilsModule.getAttr($view.style.circleStyleRed, { r: $model.sceneA.r }));
                $view.pressDown = false;
            }).on('mouseleave', function () {
                $(this).trigger('mouseup');
            });
        },
        _chooseN1: function _chooseN1(m1, n1, lb) {
            var b = $model.sceneB.b,
                a = $model.sceneB.a,
                n = $model.sceneB.n,
                m = $model.sceneB.m;
            var _shortestPath = $view.sceneB.amnb,
                content = utilsModule.getTwoPointLength($view.sceneB.pa, viewModule.getScalePoint(m1), viewModule.getScalePoint(n1), $view.sceneB.pb);
            _shortestPath = Math.round(_shortestPath * 1000);
            content = Math.round(content * 1000);
            if (content === _shortestPath) {
                m1 = m;
                n1 = n;
                if ($model.sceneB.isShowN) {
                    viewModule.setText($view.sceneB.textN, "N(N')");
                    viewModule.setText($view.sceneB.textN1, "");
                } else {
                    viewModule.setText($view.sceneB.textN1, "N'");
                }
                if ($model.sceneB.isShowM) {
                    viewModule.setText($view.sceneB.textM, "M(M')");
                    viewModule.setText($view.sceneB.textM1, "");
                } else {
                    viewModule.setText($view.sceneB.textM1, "M'");
                }
                var type = $model.sceneB.type;
                if ($model.sceneB.isFlash && (type === 1 || type === 4)) {
                    //动画执行时移动最短点停止动画
                    var v = [$view.sceneB.AA1, $view.sceneB.A1N, $view.sceneB.NB, $view.sceneB.MN, $view.sceneB.AM, $view.sceneB.A1N1, $view.sceneB.N1B, $view.sceneB.M1N1, $view.sceneB.AM1];
                    viewModule.stopAnimate(v);
                    $model.sceneB.isFlash = false;
                    $view.sceneB.samePathDom.find("a").removeClass('click_disabled');
                }
            } else {
                //移动N'点相关时停止相关的动画
                viewModule.setText($view.sceneB.textN, "N");
                viewModule.setText($view.sceneB.textN1, "N'");
                viewModule.setText($view.sceneB.textM, "M");
                viewModule.setText($view.sceneB.textM1, "M'");
                var type = $model.sceneB.type;
                if ($model.sceneB.isFlash && (type === 2 || type === 3 || type === 5)) {
                    //2,3,5 是和n1m1相关的线
                    var v = [$view.sceneB.AA1, $view.sceneB.A1N1, $view.sceneB.N1B, $view.sceneB.M1N1, $view.sceneB.AM1];
                    viewModule.stopAnimate(v);
                    $model.sceneB.isFlash = false;
                    $view.sceneB.samePathDom.find("a").removeClass('click_disabled');
                }
            }
            if (!$model.sceneB.n1 && $model.sceneB.showReset === 0) {
                //取点后重置按钮可用
                viewModule.setMenu(3, 1);
                $model.sceneB.showReset = 1;
            }
            $model.sceneB.m1 = m1;
            $model.sceneB.n1 = n1;
            $view.sceneB.rightAngleM1Path.attr({ opacity: 1 });
            var _rightAngleM1 = utilsModule.getRightAnglePath(m1, 0.017 * $view.sceneWidth, Math.atan(lb.k), 4);
            $model.sceneB.rightAngleM1 = _rightAngleM1;
            $view.sceneB.rightAngleM1Path.attr(utilsModule.wrapPathAttr(_rightAngleM1.p1, _rightAngleM1.p2, _rightAngleM1.p3));
            $view.sceneB.M1.attr({ opacity: 1 });
            $view.sceneB.N1.attr(utilsModule.getAttr({ opacity: 1 }, $view.style.circleStyleRedStroke));
            $view.sceneB.AM1.attr({ opacity: 1 });
            $view.sceneB.N1B.attr({ opacity: 1 });
            var n1x = n1.x - $view.sceneWidth * 0.02;
            if (n1x < $view.sceneWidth - 0.056 * $view.sceneWidth) {
                //65
                $view.sceneB.textM1.attr({
                    'x': m1.x,
                    'y': m1.y - $view.sceneWidth * 0.03,
                    'opacity': 1
                });
                $view.sceneB.textN1.attr({
                    'x': n1x,
                    'y': n1.y + $view.sceneWidth * 0.055,
                    'opacity': 1
                });
            } else {
                $view.sceneB.textM1.attr({
                    'x': $view.sceneWidth * 0.93,
                    'y': $view.sceneHeight * 0.225,
                    'opacity': 1
                });
                $view.sceneB.textN1.attr({
                    'x': $view.sceneWidth * 0.94,
                    'y': $view.sceneHeight * 0.5,
                    'opacity': 1
                });
            }
            viewModule.drawPoint($view.sceneB.N1, n1, $model.sceneB.r - CONST_VALUE.CIRCLE_STROKE_WIDTH3 / 2);
            viewModule.drawPoint($view.sceneB.M1, m1, $model.sceneB.r);
            viewModule.drawLine($view.sceneB.AM1, a, m1);
            viewModule.drawLine($view.sceneB.N1B, b, n1);
            viewModule.drawLine($view.sceneB.M1N1, n1, m1);

            var a1 = $model.sceneB.a1;
            if (n1 && $model.sceneB.showSamePath === 2) {
                //显示相同路径后A1N1才有显示
                viewModule.drawLine($view.sceneB.A1N1, a1, n1);
            }
            content = 'AM\'+M\'N\'+N\'B=' + content + 'm';
            viewModule.showTotalPath($view.sceneB.dashDom, 1, content);
        },
        _bindSceneBEvent: function _bindSceneBEvent() {

            //预设二
            $view.sceneB.houseScene.on('touchstart mousedown', function (event) {
                var lb = utilsModule.getLineExp($model.sceneB.lb1, $model.sceneB.lb2),
                    la = utilsModule.getLineExp($model.sceneB.la1, $model.sceneB.la2);
                var tempPosition = self._getRelateLocation(event, $view.sceneB.svgDom);
                var x = tempPosition.x,
                    y = tempPosition.y;

                //鼠标获取的点
                var o = utilsModule.wrapPoint(x, y);
                //获取直线b的垂点
                var n1 = utilsModule.wrapPoint(x, x * lb.k + lb.b);
                //获取直线a的垂点
                var m1 = utilsModule.getVerticalPoint(n1, la);
                //点在b周边的时候触发事件
                if (x > $model.sceneB.lb1.x && x < $model.sceneB.lb2.x && utilsModule.getTwoPointLength(o, n1) < 0.01 * $view.sceneWidth) {
                    $view.pressDown = true;
                    if (x < $model.sceneB.lb1.x + $model.sceneB.r) {
                        x = $model.sceneB.lb1.x + $model.sceneB.r;
                        //获取直线b的垂点
                        n1 = utilsModule.wrapPoint(x, x * lb.k + lb.b);
                        //获取直线a的垂点
                        m1 = utilsModule.getVerticalPoint(n1, la);
                    }
                    if (x > $view.sceneWidth - $model.sceneB.r) {
                        x = $view.sceneWidth - $model.sceneB.r;
                        //获取直线b的垂点
                        n1 = utilsModule.wrapPoint(x, x * lb.k + lb.b);
                        //获取直线a的垂点
                        m1 = utilsModule.getVerticalPoint(n1, la);
                    }

                    if ($model.sceneB.flashTogether) {
                        var v = [$view.sceneB.AA1, $view.sceneB.A1N, $view.sceneB.NB, $view.sceneB.MN, $view.sceneB.AM, $view.sceneB.A1N1, $view.sceneB.N1B, $view.sceneB.M1N1, $view.sceneB.AM1];
                        viewModule.stopAnimate(v);
                        $model.sceneB.isFlash = false;
                        $model.sceneB.flashTogether = false;
                        $view.sceneB.samePathDom.find("a").removeClass('click_disabled');
                    }
                    self._chooseN1(m1, n1, lb);
                }
            }).on('touchmove mousemove', function (event) {
                var lb = utilsModule.getLineExp($model.sceneB.lb1, $model.sceneB.lb2),
                    la = utilsModule.getLineExp($model.sceneB.la1, $model.sceneB.la2);
                var tempPosition = self._getRelateLocation(event, $view.sceneB.svgDom);
                var x = tempPosition.x,
                    y = tempPosition.y;
                if ($view.pressDown) {
                    begin2 = new Date();
                    if (startTime2 == null) {
                        startTime2 = begin2;
                    }
                    if (begin2 - startTime2 <= 16) {
                        //每16ms才执行一次
                        return;
                    }
                    startTime2 = null;
                    if (navigator.userAgent.search('Mobile') > 0 && (x > $view.sceneWidth || x < 0 || y < 0 || y > $view.sceneHeight)) {
                        $(this).trigger('touchend');
                        return;
                    }
                    if (x < $model.sceneB.lb1.x + $model.sceneB.r) {
                        x = $model.sceneB.lb1.x + $model.sceneB.r;
                    }
                    if (x > $view.sceneWidth - $model.sceneB.r) {
                        x = $view.sceneWidth - $model.sceneB.r;
                    }
                    var n1 = utilsModule.wrapPoint(x, x * lb.k + lb.b);
                    //获取直线a的垂点
                    var m1 = utilsModule.getVerticalPoint(n1, la);
                    self._chooseN1(m1, n1, lb);
                }
            }).on('touchend mouseup', function (e) {
                $view.sceneB.N1.attr(utilsModule.getAttr($view.style.circleStyleRed, { r: $model.sceneB.r }));
                $view.pressDown = false;
            }).on('mouseleave', function () {
                $(this).trigger('mouseup');
            });
        },
        _sceneAShortestPath: function _sceneAShortestPath(hasAnimate) {
            var self = this;
            self._forbideScale(true);
            $view.sceneA.horseScene.removeClass('bg');
            getDom('.js_ShortestPath_green_bg').addClass('hide_dom');
            viewModule.setMenu(0, 0);
            $view.sceneA.C.attr({ opacity: 0 });
            $view.sceneA.B1.attr({ opacity: 0 });
            var b = $model.sceneA.b,
                b1 = $model.sceneA.b1,
                a = $model.sceneA.a,
                c = $model.sceneA.c,
                lb = $model.sceneA.lb,
                lb1 = $model.sceneA.lb1,
                rightAngle = $model.sceneA.rightAngle;
            if (hasAnimate) {
                var _ = null,
                    an1 = utilsModule.wrapAnimateObject($view.sceneA.BB1, utilsModule.wrapPathAttr(lb, lb1), 1500, mina.linear, function () {
                    $view.sceneA.rightAnglePath.attr(utilsModule.wrapPathAttr(rightAngle.p1, rightAngle.p2, rightAngle.p3));
                }),
                    an2 = utilsModule.wrapAnimateObject($view.sceneA.B1, {
                    opacity: 1
                }, 1000, mina.linear, function () {
                    $view.sceneA.textB1.attr({
                        opacity: 1
                    });
                }),
                    an3 = utilsModule.wrapAnimateObject($view.sceneA.AC, utilsModule.wrapPathAttr(a, c), 750, mina.linear, null),
                    an4 = utilsModule.wrapAnimateObject($view.sceneA.CB1, utilsModule.wrapPathAttr(c, b1), 750, mina.linear, null),
                    an5 = utilsModule.wrapAnimateObject($view.sceneA.C, {
                    opacity: 1
                }, 1000, mina.linear, function () {
                    $view.sceneA.textC.attr({ opacity: 1 });
                    if ($model.sceneA.c1 && utilsModule.isEqual($model.sceneA.c1, $model.sceneA.c)) {
                        viewModule.setText($view.sceneA.textC, "C(C')");
                        viewModule.setText($view.sceneA.textC1, "");
                    } else {
                        viewModule.setText($view.sceneA.textC, "C");
                    }
                    $model.sceneA.isShowC = true;
                }),
                    an6 = utilsModule.wrapAnimateObject($view.sceneA.CB, utilsModule.wrapPathAttr(b, c), 1500, null, null),
                    an7 = utilsModule.wrapAnimateObject($view.sceneA.CB, {
                    opacity: 0
                }, 500, null, null),
                    an8 = utilsModule.wrapAnimateObject($view.sceneA.CB1, {
                    opacity: 0
                }, 500, null, null),
                    an9 = utilsModule.wrapAnimateObject($view.sceneA.CB, {
                    opacity: 1
                }, 500, null, null),
                    an10 = utilsModule.wrapAnimateObject($view.sceneA.CB1, {
                    opacity: 1
                }, 500, null, null);
                $model.sceneA.isAnimate = true;
                viewModule.serialAnimate([an1, an2, an3, an4, an5, an6, [an7, an8], [an9, an10], [an7, an8], [an9, an10]], function () {
                    var content1 = 'AC+CB=' + Math.round($view.sceneA.acb * 1000) + 'm';
                    viewModule.showTotalPath($view.sceneA.dashDom, 2, null, content1);
                    $model.sceneA.showSamePath = 1;
                    viewModule.setMenu(1, 1);
                    $model.sceneA.isAnimate = false;
                    $model.sceneA.shortestPath = 0;
                    viewModule.setMenu(3, 1);
                    $model.sceneA.showReset = 1;
                    self._forbideScale(false);
                });
            } else {
                $view.sceneA.BB1.attr(utilsModule.wrapPathAttr(lb, lb1));
                $view.sceneA.rightAnglePath.attr(utilsModule.wrapPathAttr(rightAngle.p1, rightAngle.p2, rightAngle.p3));
                $view.sceneA.C.attr({ opacity: 1 });
                $view.sceneA.B1.attr({ opacity: 1 });
                $view.sceneA.textB1.attr({ opacity: 1 });
                $view.sceneA.AC.attr(utilsModule.wrapPathAttr(a, c));
                $view.sceneA.CB1.attr(utilsModule.wrapPathAttr(c, b1));
                $view.sceneA.textC.attr({ opacity: 1 });
                $view.sceneA.CB.attr(utilsModule.wrapPathAttr(b, c));
                if ($model.sceneA.c1 && utilsModule.isEqual($model.sceneA.c1, $model.sceneA.c)) {
                    $($view.sceneA.textC.node).html("C(C')");
                    $($view.sceneA.textC1.node).html("");
                }
                var content1 = 'AC+CB=' + Math.round($view.sceneA.acb * 1000) + 'm';
                viewModule.showTotalPath($view.sceneA.dashDom, 2, null, content1);
            }
        },
        _sceneBShortestPath: function _sceneBShortestPath(hasAnimate) {
            var self = this;
            self._forbideScale(true);
            var getAttr = utilsModule.getAttr,
                getD = utilsModule.wrapPathAttr;
            $view.sceneB.houseScene.removeClass('bg');
            getDom('.js_ShortestPath_green_bg').addClass('hide_dom');
            viewModule.setMenu(0, 0);
            var b = $model.sceneB.b,
                a = $model.sceneB.a,
                a1 = $model.sceneB.a1,
                n = $model.sceneB.n,
                m = $model.sceneB.m,
                a2 = $model.sceneB.a2,
                textA1 = $model.sceneB.textA1;
            if (hasAnimate) {
                var _ = null,
                    an1 = utilsModule.wrapAnimateObject($view.sceneB.AA1, utilsModule.wrapPathAttr(utilsModule.wrapPoint(a.x, a.y), utilsModule.wrapPoint(a1.x, a1.y)), 500, mina.linear, null),
                    an2 = utilsModule.wrapAnimateObject($view.sceneB.A1A2, utilsModule.wrapPathAttr(utilsModule.wrapPoint(a1.x, a1.y), utilsModule.wrapPoint(a2.x, a2.y)), 1000, mina.linear, function () {
                    var _rightAngleA = $model.sceneB.rightAngleA;
                    $view.sceneB.rightAngleAPath.attr(getAttr(getD(_rightAngleA.p1, _rightAngleA.p2, _rightAngleA.p3), { opacity: 1 }));
                    $view.sceneB.textA1.attr({ opacity: 1 });
                    $view.sceneB.A1.attr({ opacity: 1 });
                }),
                    an3 = utilsModule.wrapAnimateObject($view.sceneB.A1, {
                    cx: a1.x,
                    cy: a1.y,
                    r: $model.sceneB.r
                }, 1500, mina.linear, null),
                    an31 = utilsModule.wrapAnimateObject($view.sceneB.textA1, {
                    x: textA1.x,
                    y: textA1.y,
                    r: $model.sceneB.r
                }, 1500, null, function () {
                    viewModule.setText($view.sceneB.textA1, "A'");
                }),
                    an4 = utilsModule.wrapAnimateObject($view.sceneB.A1N, utilsModule.wrapPathAttr(a1, n), 800, mina.linear, null),
                    an5 = utilsModule.wrapAnimateObject($view.sceneB.NB, utilsModule.wrapPathAttr(b, n), 700, mina.linear, null),
                    an51 = utilsModule.wrapAnimateObject($view.sceneB.N, {
                    opacity: 1,
                    cx: $model.sceneB.n.x,
                    cy: $model.sceneB.n.y,
                    r: $model.sceneB.r
                }, 1000, mina.linear, function () {
                    $view.sceneB.textN.attr({ opacity: 1 });
                    $model.sceneB.isShowN = true;
                    if ($model.sceneB.n1 && utilsModule.isEqual($model.sceneB.n1, $model.sceneB.n)) {
                        viewModule.setText($view.sceneB.textN1, "");
                        viewModule.setText($view.sceneB.textN, "N(N')");
                    } else {
                        viewModule.setText($view.sceneB.textN, "N");
                    }
                }),
                    an6 = utilsModule.wrapAnimateObject($view.sceneB.MN, utilsModule.wrapPathAttr(n, m), 1500, mina.linear, function () {
                    var _rightAngleM = $model.sceneB.rightAngleM;
                    $view.sceneB.rightAngleMPath.attr(getAttr(getD(_rightAngleM.p1, _rightAngleM.p2, _rightAngleM.p3), { opacity: 1 }));
                }),
                    an61 = utilsModule.wrapAnimateObject($view.sceneB.M, {
                    opacity: 1,
                    cx: $model.sceneB.m.x,
                    cy: $model.sceneB.m.y,
                    r: $model.sceneB.r
                }, 1000, mina.linear, function () {
                    $view.sceneB.textM.attr({ opacity: 1 });
                    $model.sceneB.isShowM = true;
                    if ($model.sceneB.n1 && utilsModule.isEqual($model.sceneB.n1, $model.sceneB.n)) {
                        viewModule.setText($view.sceneB.textM1, "");
                        viewModule.setText($view.sceneB.textM, "M(M')");
                    } else {
                        viewModule.setText($view.sceneB.textM, "M");
                    }
                }),
                    an7 = utilsModule.wrapAnimateObject($view.sceneB.AM, utilsModule.wrapPathAttr(m, a), 1500, mina.linear, null),
                    an8 = utilsModule.wrapAnimateObject($view.sceneB.AM, {
                    opacity: 0
                }, 500, null, null),
                    an9 = utilsModule.wrapAnimateObject($view.sceneB.A1N, {
                    opacity: 0
                }, 500, null, null),
                    an10 = utilsModule.wrapAnimateObject($view.sceneB.AM, {
                    opacity: 1
                }, 500, null, null),
                    an11 = utilsModule.wrapAnimateObject($view.sceneB.A1N, {
                    opacity: 1
                }, 500, null, null);
                $model.sceneB.isAnimate = true;
                viewModule.serialAnimate([an1, an2, [an3, an31], //an3,
                an4, an5, an51, an6, an61, an7, [an8, an9], [an10, an11], [an8, an9], [an10, an11]], function () {
                    var content1 = 'AM+MN+NB=' + Math.round($view.sceneB.amnb * 1000) + 'm'; //AM+MN+NB
                    viewModule.showTotalPath($view.sceneB.dashDom, 2, null, content1);
                    $model.sceneB.showSamePath = 1;
                    viewModule.setMenu(1, 1);
                    $model.sceneB.isAnimate = false;
                    $model.sceneB.shortestPath = 0;
                    viewModule.setMenu(3, 1);
                    $model.sceneB.showReset = 1;
                    self._forbideScale(false);
                });
            } else {
                $view.sceneB.AA1.attr(utilsModule.wrapPathAttr(utilsModule.wrapPoint(a.x, a.y), utilsModule.wrapPoint(a1.x, a1.y)));
                $view.sceneB.A1A2.attr(utilsModule.wrapPathAttr(utilsModule.wrapPoint(a1.x, a1.y), utilsModule.wrapPoint(a2.x, a2.y)));
                $view.sceneB.rightAngleAPath.attr({ opacity: 1 });
                $view.sceneB.textA1.attr({ opacity: 1 });
                viewModule.setText($view.sceneB.textA1, "A'");
                $view.sceneB.A1.attr({
                    opacity: 1,
                    cx: a1.x,
                    cy: a1.y
                });
                $view.sceneB.textA1.attr({
                    opacity: 1,
                    x: textA1.x,
                    y: textA1.y
                });
                $view.sceneB.A1N.attr(utilsModule.wrapPathAttr(a1, n));
                $view.sceneB.NB.attr(utilsModule.wrapPathAttr(b, n));
                $view.sceneB.MN.attr(utilsModule.wrapPathAttr(n, m));
                $view.sceneB.M.attr({ opacity: 1 });
                $view.sceneB.N.attr({ opacity: 1 });
                $view.sceneB.textM.attr({ opacity: 1 });
                $view.sceneB.textN.attr({ opacity: 1 });
                $view.sceneB.AM.attr(utilsModule.wrapPathAttr(m, a));
                $view.sceneB.rightAngleMPath.attr({ opacity: 1 });
                if ($model.sceneB.n1 && utilsModule.isEqual($model.sceneB.n1, $model.sceneB.n)) {
                    viewModule.setText($view.sceneB.textN1, "");
                    viewModule.setText($view.sceneB.textN, "N(N')");
                    viewModule.setText($view.sceneB.textM1, "");
                    viewModule.setText($view.sceneB.textM, "M(M')");
                }
                var content1 = 'AM+MN+NB=' + Math.round($view.sceneB.amnb * 1000) + 'm'; //AM+MN+NB
                viewModule.showTotalPath($view.sceneB.dashDom, 2, null, content1);
            }
        },
        _showSamePath: function _showSamePath() {
            if ($model.currentScene === 'sceneA') {
                if ($model.sceneA.shortestPath === 1) {
                    return;
                }
                if (!$model.sceneA.c1) {
                    viewModule.showToast(CONST_VALUE.TOAST2, 2000);
                    return;
                }
                if ($model.sceneA.showSamePath === 1) {
                    $view.sceneA.samePathDom.removeClass('hide_dom');
                    $view.sceneA.C1B1.attr(utilsModule.wrapPathAttr($model.sceneA.c1, $model.sceneA.b1));
                    $model.sceneA.showSamePath = 2;
                    $model.sceneA.showTriangle = 1;
                    viewModule.setMenu(1, 2);
                    viewModule.setMenu(2, 1);
                } else {
                    //2
                    var v = [$view.sceneA.AC, $view.sceneA.CB, $view.sceneA.CB1, $view.sceneA.AC1, $view.sceneA.C1B, $view.sceneA.C1B1];
                    viewModule.stopAnimate(v);
                    $model.sceneA.isFlash = false;
                    $model.sceneB.flashTogether = false;
                    $view.sceneA.samePathDom.addClass('hide_dom');
                    $view.sceneA.C1B1.attr(utilsModule.wrapPathAttr($model.sceneA.b1, $model.sceneA.b1));
                    if ($model.sceneA.showTriangle === 2) {
                        $view.sceneA.AC1.attr({ stroke: CONST_VALUE.PURPLE });
                        $view.sceneA.C1B1.attr({ stroke: CONST_VALUE.RED });
                        $view.sceneA.AC.attr({ stroke: CONST_VALUE.PURPLE });
                        $view.sceneA.CB1.attr({ stroke: CONST_VALUE.PURPLE });
                    }
                    $model.sceneA.showSamePath = 1;
                    $model.sceneA.showTriangle = 0;
                    viewModule.setMenu(2, 0);
                    viewModule.setMenu(1, 1);
                    $view.sceneA.samePathDom.find("a").removeClass('click_disabled');
                }
            } else {
                //sceneB
                if ($model.sceneB.shortestPath === 1) {
                    return;
                }
                if (!$model.sceneB.n1) {
                    viewModule.showToast(CONST_VALUE.TOAST3, 2000);
                    return;
                }
                if ($model.sceneB.showSamePath === 1) {
                    $view.sceneB.samePathDom.removeClass('hide_dom');
                    $view.sceneB.A1N1.attr(utilsModule.wrapPathAttr($model.sceneB.a1, $model.sceneB.n1));
                    $model.sceneB.showSamePath = 2;
                    $model.sceneB.showTriangle = 1;
                    viewModule.setMenu(1, 2);
                    viewModule.setMenu(2, 1);
                } else {
                    var v = [$view.sceneB.AA1, $view.sceneB.A1N, $view.sceneB.NB, $view.sceneB.MN, $view.sceneB.AM, $view.sceneB.A1N1, $view.sceneB.N1B, $view.sceneB.M1N1, $view.sceneB.AM1];
                    viewModule.stopAnimate(v);
                    $model.sceneB.isFlash = false;
                    $model.sceneB.flashTogether = false;
                    $view.sceneB.samePathDom.addClass('hide_dom');
                    $view.sceneB.A1N1.attr(utilsModule.wrapPathAttr($model.sceneB.a1, $model.sceneB.a1));
                    if ($model.sceneB.showTriangle === 2) {
                        $view.sceneB.A1N1.attr({ stroke: CONST_VALUE.RED });
                        $view.sceneB.A1N.attr({ stroke: CONST_VALUE.PURPLE });
                        $view.sceneB.NB.attr({ stroke: CONST_VALUE.PURPLE });
                        $view.sceneB.N1B.attr({ stroke: CONST_VALUE.RED });
                    }
                    $model.sceneB.showSamePath = 1;
                    $model.sceneB.showTriangle = 0;
                    viewModule.setMenu(2, 0);
                    viewModule.setMenu(1, 1);
                    $view.sceneB.samePathDom.find("a").removeClass('click_disabled');
                }
            }
        },
        _bindMenuEvent: function _bindMenuEvent() {
            $view.menuDom.on('click', function (event) {
                var _this = $(this),
                    index = _this.index();
                event.preventDefault();
                switch (index) {
                    case 0:
                        if ($model.currentScene === 'sceneA') {
                            if ($model.sceneA.shortestPath === 1) {
                                self._sceneAShortestPath(true);
                            }
                        } else {
                            if ($model.sceneB.shortestPath === 1) {
                                self._sceneBShortestPath(true);
                            }
                        }
                        break;
                    case 1:
                        self._showSamePath();
                        break;
                    case 2:
                        if ($model.currentScene === 'sceneA') {
                            if ($model.sceneA.showSamePath === 2) {
                                if ($model.sceneA.showTriangle === 1) {
                                    if (utilsModule.isEqual($model.sceneA.c1, $model.sceneA.c)) {
                                        viewModule.showToast(0, 2000);
                                        return;
                                    }
                                    $view.sceneA.AC1.attr({ stroke: CONST_VALUE.YELLOW });
                                    $view.sceneA.C1B1.attr({ stroke: CONST_VALUE.YELLOW });
                                    $view.sceneA.AC.attr({ stroke: CONST_VALUE.YELLOW });
                                    $view.sceneA.CB1.attr({ stroke: CONST_VALUE.YELLOW });
                                    $model.sceneA.showTriangle = 2;
                                    viewModule.setMenu(2, 2);
                                } else {
                                    $view.sceneA.AC1.attr({ stroke: CONST_VALUE.RED });
                                    $view.sceneA.C1B1.attr({ stroke: CONST_VALUE.RED });
                                    $view.sceneA.AC.attr({ stroke: CONST_VALUE.PURPLE });
                                    $view.sceneA.CB1.attr({ stroke: CONST_VALUE.PURPLE });
                                    $model.sceneA.showTriangle = 1;
                                    viewModule.setMenu(2, 1);
                                }
                            }
                        } else {
                            if ($model.sceneB.showSamePath === 2) {
                                if ($model.sceneB.showTriangle === 1) {
                                    if (utilsModule.isEqual($model.sceneB.n1, $model.sceneB.n)) {
                                        viewModule.showToast(1, 2000);
                                        return;
                                    }
                                    $view.sceneB.A1N1.attr({ stroke: CONST_VALUE.YELLOW });
                                    $view.sceneB.A1N.attr({ stroke: CONST_VALUE.YELLOW });
                                    $view.sceneB.NB.attr({ stroke: CONST_VALUE.YELLOW });
                                    $view.sceneB.N1B.attr({ stroke: CONST_VALUE.YELLOW });
                                    $model.sceneB.showTriangle = 2;
                                    viewModule.setMenu(2, 2);
                                } else {
                                    $view.sceneB.A1N1.attr({ stroke: CONST_VALUE.RED });
                                    $view.sceneB.A1N.attr({ stroke: CONST_VALUE.PURPLE });
                                    $view.sceneB.NB.attr({ stroke: CONST_VALUE.PURPLE });
                                    $view.sceneB.N1B.attr({ stroke: CONST_VALUE.RED });
                                    $model.sceneB.showTriangle = 1;
                                    viewModule.setMenu(2, 1);
                                }
                            }
                        }
                        break;
                    case 3:
                        if ($model.currentScene === 'sceneA' && $model.sceneA.showReset === 1) {
                            var v = $view.sceneA;
                            viewModule.stopAnimate([v.BB1, v.B1, v.CB1, v.C, v.AC, v.CB, v.AC1, v.C1B, v.C1B1]);
                            self._initScenehorseState();
                            $model.sceneA.showReset = 0;
                        } else if ($model.currentScene === 'sceneB' && $model.sceneB.showReset === 1) {
                            var v = $view.sceneB;
                            viewModule.stopAnimate([v.AA1, v.A1A2, v.A1, v.A1N, v.MN, v.AM, v.NB, v.N, v.M, v.textA1, v.N1B, v.A1N1, v.M1N1, v.AM1]);
                            self._initSceneHouseState();
                            $model.sceneB.showReset = 0;
                        }
                        break;
                    default:
                        console.log("undefined menu");
                }
            });
        },
        _sceneAFlash: function _sceneAFlash(type) {
            switch (type) {
                case 1:
                    if (!$model.sceneA.isFlash) {
                        $model.sceneA.isFlash = true;
                        $view.sceneA.samePathDom.find("a").addClass('click_disabled');
                        //c1 c 重合
                        if (utilsModule.isEqual($model.sceneA.c1, $model.sceneA.c)) {
                            $model.sceneA.flashTogether = true;
                            viewModule.flashAnimate([[$view.sceneA.CB, $view.sceneA.C1B], [$view.sceneA.CB1, $view.sceneA.C1B1]], function () {
                                $model.sceneA.isFlash = false;
                                $model.sceneA.flashTogether = false;
                                $view.sceneA.samePathDom.find("a").removeClass('click_disabled');
                            });
                        } else {
                            viewModule.flashAnimate([$view.sceneA.CB, $view.sceneA.CB1], function () {
                                $model.sceneA.isFlash = false;
                                $view.sceneA.samePathDom.find("a").removeClass('click_disabled');
                            });
                        }
                    }
                    break;
                case 2:
                    if (!$model.sceneA.isFlash) {
                        $model.sceneA.isFlash = true;
                        $view.sceneA.samePathDom.find("a").addClass('click_disabled');
                        //c1 c 重合
                        if (utilsModule.isEqual($model.sceneA.c1, $model.sceneA.c)) {
                            $model.sceneA.flashTogether = true;
                            viewModule.flashAnimate([[$view.sceneA.C1B, $view.sceneA.CB], [$view.sceneA.C1B1, $view.sceneA.CB1]], function () {
                                $model.sceneA.isFlash = false;
                                $model.sceneA.flashTogether = false;
                                $view.sceneA.samePathDom.find("a").removeClass('click_disabled');
                            });
                        } else {
                            viewModule.flashAnimate([$view.sceneA.C1B, $view.sceneA.C1B1], function () {
                                $model.sceneA.isFlash = false;
                                $view.sceneA.samePathDom.find("a").removeClass('click_disabled');
                            });
                        }
                    }
                    break;
                case 3:
                    if (!$model.sceneA.isFlash) {
                        $model.sceneA.isFlash = true;
                        $view.sceneA.samePathDom.find("a").addClass('click_disabled');
                        //c1 c 重合
                        if (utilsModule.isEqual($model.sceneA.c1, $model.sceneA.c)) {
                            $model.sceneA.flashTogether = true;
                            viewModule.flashAnimate([[$view.sceneA.AC, $view.sceneA.CB, $view.sceneA.AC1, $view.sceneA.C1B], [$view.sceneA.C1B1, $view.sceneA.AC1, $view.sceneA.CB1, $view.sceneA.AC]], function () {
                                $model.sceneA.isFlash = false;
                                $model.sceneA.flashTogether = false;
                                $view.sceneA.samePathDom.find("a").removeClass('click_disabled');
                            });
                        } else {
                            viewModule.flashAnimate([[$view.sceneA.AC, $view.sceneA.CB], [$view.sceneA.CB1, $view.sceneA.AC]], function () {
                                $model.sceneA.isFlash = false;
                                $view.sceneA.samePathDom.find("a").removeClass('click_disabled');
                            });
                        }
                    }
                    break;
                case 4:
                    if (!$model.sceneA.isFlash) {
                        $model.sceneA.isFlash = true;
                        $view.sceneA.samePathDom.find("a").addClass('click_disabled');
                        //c1 c 重合
                        if (utilsModule.isEqual($model.sceneA.c1, $model.sceneA.c)) {
                            $model.sceneA.flashTogether = true;
                            viewModule.flashAnimate([[$view.sceneA.AC1, $view.sceneA.C1B, $view.sceneA.AC, $view.sceneA.CB], [$view.sceneA.CB1, $view.sceneA.AC, $view.sceneA.C1B1, $view.sceneA.AC1]], function () {
                                $model.sceneA.isFlash = false;
                                $model.sceneA.flashTogether = false;
                                $view.sceneA.samePathDom.find("a").removeClass('click_disabled');
                            });
                        } else {
                            viewModule.flashAnimate([[$view.sceneA.AC1, $view.sceneA.C1B], [$view.sceneA.C1B1, $view.sceneA.AC1]], function () {
                                $model.sceneA.isFlash = false;
                                $view.sceneA.samePathDom.find("a").removeClass('click_disabled');
                            });
                        }
                    }
                    break;
                default:
                    console.log("error type");
            }
        },
        _sceneBFlash: function _sceneBFlash(type) {
            switch (type) {
                case 1:
                    if (!$model.sceneB.isFlash) {
                        $model.sceneB.isFlash = true;
                        $view.sceneB.samePathDom.find("a").addClass('click_disabled');
                        if (utilsModule.isEqual($model.sceneB.n, $model.sceneB.n1)) {
                            $model.sceneB.flashTogether = true;
                            viewModule.flashAnimate([[$view.sceneB.AM, $view.sceneB.AM1], [$view.sceneB.A1N, $view.sceneB.A1N1]], function () {
                                $model.sceneB.isFlash = false;
                                $model.sceneB.flashTogether = false;
                                $view.sceneB.samePathDom.find("a").removeClass('click_disabled');
                            });
                        } else {
                            viewModule.flashAnimate([$view.sceneB.AM, $view.sceneB.A1N], function () {
                                $model.sceneB.isFlash = false;
                                $view.sceneB.samePathDom.find("a").removeClass('click_disabled');
                            });
                        }
                    }
                    break;
                case 2:
                    if (!$model.sceneB.isFlash) {
                        $model.sceneB.isFlash = true;
                        $view.sceneB.samePathDom.find("a").addClass('click_disabled');
                        if (utilsModule.isEqual($model.sceneB.n, $model.sceneB.n1)) {
                            $model.sceneB.flashTogether = true;
                            viewModule.flashAnimate([[$view.sceneB.AM, $view.sceneB.AM1], [$view.sceneB.A1N, $view.sceneB.A1N1]], function () {
                                $model.sceneB.isFlash = false;
                                $model.sceneB.flashTogether = false;
                                $view.sceneB.samePathDom.find("a").removeClass('click_disabled');
                            });
                        } else {
                            viewModule.flashAnimate([$view.sceneB.AM1, $view.sceneB.A1N1], function () {
                                $model.sceneB.isFlash = false;
                                $view.sceneB.samePathDom.find("a").removeClass('click_disabled');
                            });
                        }
                    }
                    break;
                case 3:
                    if (!$model.sceneB.isFlash) {
                        $model.sceneB.isFlash = true;
                        $model.sceneB.flashTogether = true;
                        $view.sceneB.samePathDom.find("a").addClass('click_disabled');
                        viewModule.flashAnimate([[$view.sceneB.AA1, $view.sceneB.MN, $view.sceneB.M1N1]], function () {
                            $model.sceneB.isFlash = false;
                            $model.sceneB.flashTogether = false;
                            $view.sceneB.samePathDom.find("a").removeClass('click_disabled');
                        }, 6);
                    }
                    break;
                case 4:
                    if (!$model.sceneB.isFlash) {
                        $model.sceneB.isFlash = true;
                        $view.sceneB.samePathDom.find("a").addClass('click_disabled');
                        if (utilsModule.isEqual($model.sceneB.n, $model.sceneB.n1)) {
                            $model.sceneB.flashTogether = true;
                            viewModule.flashAnimate([[$view.sceneB.AM, $view.sceneB.MN, $view.sceneB.NB, $view.sceneB.AM1, $view.sceneB.M1N1, $view.sceneB.N1B], [$view.sceneB.AA1, $view.sceneB.A1N, $view.sceneB.NB, $view.sceneB.AA1, $view.sceneB.A1N1, $view.sceneB.N1B]], function () {
                                $model.sceneB.isFlash = false;
                                $model.sceneB.flashTogether = false;
                                $view.sceneB.samePathDom.find("a").removeClass('click_disabled');
                            });
                        } else {
                            viewModule.flashAnimate([[$view.sceneB.AM, $view.sceneB.MN, $view.sceneB.NB], [$view.sceneB.AA1, $view.sceneB.A1N, $view.sceneB.NB]], function () {
                                $model.sceneB.isFlash = false;
                                $view.sceneB.samePathDom.find("a").removeClass('click_disabled');
                            });
                        }
                    }
                    break;
                case 5:
                    if (!$model.sceneB.isFlash) {
                        $model.sceneB.isFlash = true;
                        $view.sceneB.samePathDom.find("a").addClass('click_disabled');
                        if (utilsModule.isEqual($model.sceneB.n, $model.sceneB.n1)) {
                            $model.sceneB.flashTogether = true;
                            viewModule.flashAnimate([[$view.sceneB.AM, $view.sceneB.MN, $view.sceneB.NB, $view.sceneB.AM1, $view.sceneB.M1N1, $view.sceneB.N1B], [$view.sceneB.AA1, $view.sceneB.A1N, $view.sceneB.NB, $view.sceneB.AA1, $view.sceneB.A1N1, $view.sceneB.N1B]], function () {
                                $model.sceneB.isFlash = false;
                                $model.sceneB.flashTogether = false;
                                $view.sceneB.samePathDom.find("a").removeClass('click_disabled');
                            });
                        } else {
                            viewModule.flashAnimate([[$view.sceneB.AM1, $view.sceneB.M1N1, $view.sceneB.N1B], [$view.sceneB.AA1, $view.sceneB.A1N1, $view.sceneB.N1B]], function () {
                                $model.sceneB.isFlash = false;
                                $view.sceneB.samePathDom.find("a").removeClass('click_disabled');
                            });
                        }
                    }
                    break;
                default:
                    console.log("error type");
            }
        },
        _bindSceneAShowSamePath: function _bindSceneAShowSamePath() {
            $view.sceneA.samePathDom.find("a").on('click', function () {
                var type = +$(this).attr('type');
                console.log($(this));
                $model.sceneA.type = type;
                self._sceneAFlash(type);
            });
        },
        _bindSceneBShowSamePath: function _bindSceneBShowSamePath() {
            $view.sceneB.samePathDom.find("a").on('click', function (e) {
                var type = +$(this).attr('type');
                $model.sceneB.type = type;
                self._sceneBFlash(type);
            });
        },
        _bindEvent: function _bindEvent() {
            this._chooseScene();
            this._bindSceneAEvent();
            this._bindSceneBEvent();
            this._bindMenuEvent();
            this._bindSceneAShowSamePath();
            this._bindSceneBShowSamePath();
        },
        _unbindEvent: function _unbindEvent() {
            $view.btns.off('click');
            $view.sceneA.horseScene.off('touchstart mousedown').off('touchmove mousemove').off('touchend mouseup').off('mouseleave');
            $view.sceneB.houseScene.off('touchstart mousedown').off('touchmove mousemove').off('touchend mouseup').off('mouseleave');
            $view.menuDom.off('click');
            $view.sceneA.samePathDom.off('click');
        },
        _resetMenu: function _resetMenu(a, b, c, d) {
            viewModule.setMenu(0, a);
            viewModule.setMenu(1, b);
            viewModule.setMenu(2, c);
            viewModule.setMenu(3, d);
        },
        _getRelateLocation: function _getRelateLocation(event, view) {
            var tempPosition, x, y;
            if (event.originalEvent.changedTouches) {
                x = event.originalEvent.changedTouches[0].clientX;
                y = event.originalEvent.changedTouches[0].clientY;
            } else {
                x = event.pageX;
                y = event.pageY;
            }
            tempPosition = view.offset();
            return {
                x: x - tempPosition.left,
                y: y - tempPosition.top
            };
        }
    });

    window.AddonShortestPath_create = function () {
        return new Presenter('ShortestPath');
    };
})();]]></presenter><resources><file src="./resources/wood/images/1.png"/><file src="./resources/wood/images/1before.png"/><file src="./resources/wood/images/1e.png"/><file src="./resources/wood/images/1s.png"/><file src="./resources/wood/images/2.png"/><file src="./resources/wood/images/2after.png"/><file src="./resources/wood/images/2before.png"/><file src="./resources/wood/images/2e.png"/><file src="./resources/wood/images/2s.png"/><file src="./resources/wood/images/icon_tool_m1.png"/><file src="./resources/wood/images/icon_tool_m2.png"/></resources></addon>