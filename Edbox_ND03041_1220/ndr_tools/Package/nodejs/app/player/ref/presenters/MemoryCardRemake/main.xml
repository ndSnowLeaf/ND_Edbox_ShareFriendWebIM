<?xml version='1.0' encoding='UTF-8' ?>
<addon id='MemoryCardRemake'>
<properties>

                <property name="question_id" displayName="题目ID" type="string" isLocalized="false" />
                <property name="question_url" displayName="题目内容" type="json" isLocalized="false" />

</properties>

<dependencies>

</dependencies>

<css>

<![CDATA[.exam_skin_wood .memorycard{position:relative;width:100%;height:100%}.exam_skin_wood .memorycard .com_layout_main{left:0;right:0;top:2.83333em;bottom:0}.exam_skin_wood .memorycard .com_m_sideboard_1{padding-bottom:.58333em;padding-top:11em}.exam_skin_wood .memorycard .com_m_sideboard_1 .com_m_sidecon .coursebox{position:relative;height:99%;overflow-y:auto;margin-top:.5%}.exam_skin_wood .memorycard .com_m_sideboard_1.com_grid_2{width:22%}.exam_skin_wood .memorycard .com_m_mainboard_1{position:relative}.exam_skin_wood .memorycard .match_board_bg{left:0;top:1.5em;right:.58333em;bottom:1.5em;position:absolute;border-radius:.75em}.exam_skin_wood .memorycard .com_s_bold{position:absolute;right:.625em;top:.625em}.exam_skin_wood .memorycard .match_counter{height:2.66667em;line-height:2.66667em;font-size:1em;color:#fff;text-align:center}.exam_skin_wood .memorycard .match_counter .moment_num{font-size:1.75em}.exam_skin_wood .memorycard .match_counter .max_num{font-size:1.33333em}.exam_skin_wood .memorycard .match_counter i{margin:0 .16667em;font-size:1.33333em}.exam_skin_wood .memorycard .match_left_result .match_unfinished{padding-bottom:1.25em}.exam_skin_wood .memorycard .match_left_result .match_unfinished.show_line{border-bottom:.08333em solid #b9b0b0}.exam_skin_wood .memorycard .match_left_result .match_user_done{padding-bottom:.41667em}.exam_skin_wood .memorycard .match_left_result .match_right,.exam_skin_wood .memorycard .match_left_result .match_wrong{padding:1.33333em 0 0 2.08333em;position:relative}.exam_skin_wood .memorycard .match_left_result .match_right .match_list,.exam_skin_wood .memorycard .match_left_result .match_wrong .match_list{position:relative;padding-top:5.41667em;height:0}.exam_skin_wood .memorycard .match_left_result .list_m_box{position:absolute;left:0;top:0;width:100%;height:100%}.exam_skin_wood .memorycard .match_left_result .list_m_pic{float:left;width:5.41667em;height:5.41667em;overflow:hidden;border:.08333em solid #885e17;border-radius:.41667em;background:#fff}.exam_skin_wood .memorycard .match_left_result .list_m_pic img{width:100%;height:100%;border-radius:.41667em}.exam_skin_wood .memorycard .match_left_result .list_m_text{float:left;width:5.41667em;height:5.41667em;color:#333;overflow:hidden;text-align:center;border:.08333em solid #885e17;border-radius:.41667em;background:#fff}.exam_skin_wood .memorycard .match_left_result .list_m_text p{display:inline-block;max-width:91%;vertical-align:middle;word-break:break-all;word-wrap:break-word}.exam_skin_wood .memorycard .match_left_result .list_m_text p.text_s{font-size:.83333em;line-height:1.4}.exam_skin_wood .memorycard .match_left_result .list_m_text p.text_m{font-size:1.5em;line-height:1.4}.exam_skin_wood .memorycard .match_left_result .list_m_text p.text_l{font-size:2.08333em;line-height:1.4}.exam_skin_wood .memorycard .match_left_result .list_m_text:after{content:"";display:inline-block;vertical-align:middle;width:0;height:100%}.exam_skin_wood .memorycard .ins_line{float:left;vertical-align:middle;width:1.08333em;margin:2.66667em .125em 0;height:0;border-top:.08333em dashed #885e17}.exam_skin_wood .memorycard .match_icon{position:absolute;left:.25em;top:4.08333em;width:1.5em;height:1.5em;margin-top:-.75em;background-repeat:no-repeat;background-position:center center;background-size:auto 100%}.exam_skin_wood .memorycard .match_right .match_icon{background-image:url(resources/wood/images/icon_s_wood_right.png)}.exam_skin_wood .memorycard .match_wrong .match_icon{background-image:url(resources/wood/images/icon_s_wood_wrong.png)}.exam_skin_wood .memorycard .match_edit_box{position:absolute;left:1em;top:.58333em;right:1em;bottom:.16667em;overflow:auto;z-index:3}.exam_skin_wood .memorycard .com_m_sideboard_1{position:relative;float:left;width:15.41667em;height:100%;padding:4.20833em 0 1.45833em;margin-left:1.45833em;margin-right:1.45833em}.exam_skin_wood .memorycard .com_m_sideboard_1 .com_m_sidehead{position:absolute;left:0;top:1.45833em;right:0;height:2.75em;background:url(resources/wood/images/bg_sidetit1.png) repeat-x;background-size:auto 100%;border-top-left-radius:.75em;border-top-right-radius:.75em}.exam_skin_wood .memorycard .com_m_sideboard_1 .com_m_sidecon{height:100%;border-bottom:.375em solid transparent;background-image:url(resources/wood/images/decl_sidecon.png),url(resources/wood/images/decr_sidecon.png),url(resources/wood/images/decm_sidecon.png),url(resources/wood/images/bg_sidecon1.png);background-repeat:no-repeat,no-repeat,repeat-x,repeat;background-position:left bottom,right bottom,center bottom,left top;background-size:.875em auto,.875em auto,.375em auto,2.70833em auto;background-origin:border-box,border-box,border-box,content-box;box-shadow:.0625em .10825em .79167em 0 rgba(75,40,0,.75);border-bottom-left-radius:.75em;border-bottom-right-radius:.75em;overflow:auto}.exam_skin_wood .memorycard .com_m_mainboard_1{height:100%;overflow:hidden}.exam_skin_wood .com_layout .com_layout_container.inner{width:100%;height:100%;border-radius:1em;overflow:hidden}.exam_skin_wood .com_layout .com_layout_container.inner .com_layout_main{top:.91667em;right:1.33333em;left:1.33333em;bottom:.91667em}.exam_skin_sky .memorycard{position:relative;width:100%;height:100%}.exam_skin_sky .memorycard .com_layout_main{left:-1em;right:0;top:2.83333em;bottom:-.91667em}.exam_skin_sky .memorycard .com_m_sideboard_1{padding-bottom:.58333em;padding-top:11em}.exam_skin_sky .memorycard .com_m_sideboard_1 .com_m_sidecon .coursebox{position:relative;height:95%;overflow-y:auto;margin-top:1.33333em}.exam_skin_sky .memorycard .com_m_sideboard_1.com_grid_2{width:22%}.exam_skin_sky .memorycard .com_m_mainboard_1{position:relative}.exam_skin_sky .memorycard .match_board_bg{left:0;top:1.5em;right:.58333em;bottom:1.5em;position:absolute;border-radius:.75em}.exam_skin_sky .memorycard .com_s_bold{position:absolute;right:.625em;top:.625em}.exam_skin_sky .memorycard .match_counter{height:2.91667em;line-height:2.91667em;color:#fdf097;text-align:center}.exam_skin_sky .memorycard .match_counter span{font-size:1.91667em}.exam_skin_sky .memorycard .match_counter i{font-size:1.83333em}.exam_skin_sky .memorycard .match_counter .moment_num{line-height:1;font-size:2.5em}.exam_skin_sky .memorycard .match_left_result .match_unfinished{border-bottom:.04167em dashed #29a6e6}.exam_skin_sky .memorycard .match_left_result li{padding:.70833em 0 .70833em 2.08333em;position:relative}.exam_skin_sky .memorycard .match_left_result li .match_list{position:relative;padding-top:4.41667em;height:0}.exam_skin_sky .memorycard .match_left_result .list_m_box{position:absolute;left:0;top:0;width:100%;height:100%}.exam_skin_sky .memorycard .match_left_result .list_m_pic{position:relative;float:left;width:4.41667em;height:4.41667em;overflow:hidden;border:.29167em solid #32b5f7;border-radius:.41667em;background:#fff}.exam_skin_sky .memorycard .match_left_result .list_m_pic img{width:100%;height:100%}.exam_skin_sky .memorycard .match_left_result .list_m_text{position:relative;float:left;width:40%;height:4.41667em;color:#0082c4;overflow:hidden;text-align:center;border:.29167em solid #32b5f7;border-radius:.41667em;background:#fff}.exam_skin_sky .memorycard .match_left_result .list_m_text p{display:inline-block;max-width:91%;vertical-align:middle}.exam_skin_sky .memorycard .match_left_result .list_m_text p.text_s{font-size:.66667em;line-height:1.4}.exam_skin_sky .memorycard .match_left_result .list_m_text p.text_m{font-size:.70833em;line-height:1.3}.exam_skin_sky .memorycard .match_left_result .list_m_text p.text_l{font-size:.83333em;line-height:1.4}.exam_skin_sky .memorycard .match_left_result .list_m_text:after{content:"";display:inline-block;vertical-align:middle;width:0;height:100%}.exam_skin_sky .memorycard .ins_line{float:left;vertical-align:middle;width:1.375em;margin:2.16667em .125em 0;height:.16667em;border-radius:2px;background-image:-webkit-linear-gradient(bottom,#f5b601,#ffe600);background-image:linear-gradient(to top,#f5b601,#ffe600);box-shadow:0 2px 2px rgba(4,0,0,.3)}.exam_skin_sky .memorycard .match_icon{position:absolute;left:.25em;top:2.875em;width:1.5em;height:1.5em;margin-top:-.75em;background-repeat:no-repeat;background-position:center center;background-size:auto 100%}.exam_skin_sky .memorycard .match_right .match_icon{background-image:url(resources/sky/images/icon_s_sky_right.png)}.exam_skin_sky .memorycard .match_wrong .match_icon{background-image:url(resources/sky/images/icon_s_sky_wrong.png)}.exam_skin_sky .memorycard .match_edit_box{position:absolute;left:1em;top:.58333em;right:1em;bottom:.16667em;overflow:auto;z-index:3}.exam_skin_sky .memorycard .com_m_sideboard_1{position:relative;z-index:-1;float:left;width:14.16667em;height:100%;padding:4.20833em 0 1.45833em;margin-left:1.75em;margin-right:2.08333em}.exam_skin_sky .memorycard .com_m_sideboard_1 .com_m_sidehead{z-index:9;position:absolute;left:0;top:1.45833em;right:0;height:2.75em;border-top-left-radius:.75em;border-top-right-radius:.75em}.exam_skin_sky .memorycard .com_m_sideboard_1 .com_m_sidehead:before{content:"";z-index:-1;display:block;position:absolute;left:-1.75em;top:0;width:17.58333em;height:4.04167em;background:url(resources/sky/images/bg_sidetit1.png) center center no-repeat;background-size:100% auto}.exam_skin_sky .memorycard .com_m_sideboard_1 .com_m_sidecon{height:100%;margin-top:-.58333em;background:url(resources/sky/images/bg_sidecon1.png) left top;background-size:4.5em auto;box-shadow:.0625em .10825em .79167em 0 rgba(75,40,0,.75);border:.41667em solid #2198d6;border-bottom-left-radius:.75em;border-bottom-right-radius:.75em;overflow:auto}.exam_skin_sky .memorycard .com_m_mainboard_1{height:100%;overflow:hidden}.exam_skin_sky .com_layout .com_layout_container.inner{width:100%;height:100%;overflow:hidden;background:url(resources/sky/images/bg_mainboard.jpg);background-size:auto 100%;border-radius:.75em}.exam_skin_sky .com_layout .com_layout_container.inner:before{position:absolute;left:0;top:0;content:"";display:inline-block;width:2.95833em;height:100%;background:url(resources/sky/images/bg_boardleft.jpg) left top no-repeat;background-size:auto 100%}.exam_skin_sky .com_layout .com_layout_container.inner:after{position:absolute;top:0;right:0;content:"";display:inline-block;width:4.25em;height:100%;background:url(resources/sky/images/bg_boardright.jpg) right top no-repeat;background-size:auto 100%}.exam_skin_sky .com_layout .com_layout_container.inner .com_layout_main{top:2.25em;right:2.08333em;left:2.08333em;bottom:2.75em;background-color:#1c4567;border-radius:.75em}.memorycard .game_canvas{position:relative;left:0;top:0;width:100%}.memorycard .canvas,.memorycard .img_area,.memorycard .img_area .item_img{position:absolute;left:0;top:0}.memorycard .img_area{width:100%;height:100%}.memorycard .com_pop_ans_result{display:none}]]>

</css>


<view>

<![CDATA[<div class="com_layout_exam_content memorycard"><div class="com_layout_main_exam"><div class="com_layout_tit"><h2 class="tit js_linkup_title"></h2></div><div class="com_layout_main"><div class="com_m_sideboard_1"><div class="com_m_sidehead"><div class="match_counter"><span class="moment_num js_moment_num">0</span><i>/</i><span class="max_num js_max_num">0</span></div></div><div class="com_m_sidecon"><div class="coursebox scrollbar_style_gray"><div class="match_left_result"><ul class="match_user_done js_match_user_done"></ul></div></div></div></div><div class="com_m_mainboard_1"><div class="match_board_bg"><div class="com_layout_container inner"><div class="com_layout_main js_match_edit_box"><div class="game_canvas js_game_canvas"><canvas class="canvas js_main_canvas"></canvas><div class="img_area js_img_area"></div><canvas class="canvas js_front_canvas"></canvas><canvas class="canvas js_animation_canvas"></canvas></div></div></div><div class="com_pop_ans_result correct js_pop"><p class="ans_result_tit"></p><p class="ans_result_time"><span class="com_pop_minute"></span><span>分</span> <span class="com_pop_second"></span><span>秒</span></p><p class="ans_result_bottom">左侧可以查看正确答案啦！</p></div></div></div></div></div></div>]]>
</view>


<presenter>

<![CDATA[(function(window, $) {
    var MemoryCard = function() {
        //是否锁定
        this.locked = false;
        //是否执行晃动动画
        this.shaking = false;
        //提示状态
        this.resultHint = {
            show: false,
            option: {}
        };
        this.questionId = null;
        //是否为统计模式
        this.isStatic = false;
        this.presenter = null;
        //渲染区域
        this.$view = null;
        //pxix动画精灵配
        this.skin = null;
        //背景图片
        this.gameBaseImg = null;
        //卡牌遮罩图
        this.gameFrontImg = null;
        //默认图片地址
        this.defaultImgSrc = null;
        //标题
        this.title = '';
        //最大对数
        this.maxPairNum = 0;
        //选项数据
        this.itemMap = {
            //            p1: {                id: 'p1',                item_type: 'image',                href:
            // '${ref-path}/edu/esp/assets/0a009b0f-3bc2-48cf-925a-35b82de312ee.bmp',                form: 's'            },    p2:
            // {                id: 'p2',                item_type: 'text',                text: 'test',                form: 't'
            //         }
        };
        //选项对应图片对象映射
        this.itemImageMap = {
            //            p1: img
        };
        //正确答案
        this.correctAnswer = {
            //            p1: 'p2'
        };
        //记录答题结果
        this.answerArr = [];
        //当前使用的矩阵
        this.currentMatrix = null;
        //右侧绘图区域高宽
        this.boardWidth = 0;
        this.boardHeight = 0;
        //动画区域左侧边距
        this.horEdgeDis = 0;
        //动画区域顶端边距
        this.verEdgeDis = 0;
        //动画格子水平间距
        this.horMiddleDis = 0;
        //动画格子垂直间距
        this.verMiddleDis = 0;
        //选项中图片的边长
        this.imgDis = 0;
        //选项中衬底边长
        this.imgBaseDis = 0;
        //清除半径
        this.imgBaseRadius = 0;
        //选项高宽
        this.boxWidth = 0;
        this.boxHeight = 0;
        //选项间距
        this.middleWidth = 0;
        this.middleHeight = 0;
        //放大系数
        this.animateNum = 1;
        //左侧渲染区域-当前答题对数，答题总对数
        this.$momentNum = null;
        this.$maxNum = null;
        //用户答题结果区域
        this.$userDone = null;
        //右侧渲染区域
        this.$boardView = null;
        //选项canvas
        this.mainCanvas = null;
        this.mainContext = null;
        //图片
        this.$imgArea = null;
        //遮罩canvas
        this.frontCanvas = null;
        this.frontContext = null;
        //动画canvas
        this.animationCanvas = null;
        this.animationContext = null;
        //弹出框
        this.$pop = null;
        //pixi render
        this.pixiRender = null;
        //pixi stage
        this.pixiStage = null;
        //pixi资源文件根路径
        this.effectsPath = '';
        //最近一次选中的选项
        this.lastSelectItem = null;
        //冰冻效果对象和选项映射
        this.bdMap = {};
        //爆炸效果
        this.explosionTextures = null;
        //精灵数据
        this.clearSpiritArr = {
            hor: [],
            ver: [],
            fail_hor: [],
            fail_ver: []
        };
        this.clearMoviesArr = {
            hor: [
                [],
                [],
                [],
                [],
                [],
                []
            ],
            ver: [
                [],
                [],
                [],
                []
            ],
            fail_hor: [
                [],
                [],
                [],
                [],
                [],
                []
            ],
            fail_ver: [
                [],
                [],
                [],
                []
            ]
        };
        //pixi定时器id
        this.globalAnimationId = null;
    };
    MemoryCard.prototype = {
        //选项渲染矩阵4行6列
        row: 4,
        col: 6,
        //渲染矩阵可用位置配置(根据当前题目中选项的实际数量变化）
        matrixUseableConfig: {
            3: [
                7,
                8,
                10,
                13,
                15,
                16
            ],
            4: [
                2,
                3,
                7,
                10,
                13,
                16,
                20,
                21
            ],
            5: [
                2,
                4,
                7,
                9,
                11,
                12,
                14,
                16,
                19,
                21
            ],
            6: [
                1,
                4,
                6,
                8,
                9,
                11,
                12,
                14,
                15,
                17,
                19,
                22
            ],
            7: [
                1,
                2,
                7,
                8,
                13,
                14,
                15,
                16,
                17,
                19,
                20,
                21,
                22,
                23
            ],
            8: [
                0,
                1,
                4,
                5,
                7,
                8,
                9,
                10,
                13,
                14,
                15,
                16,
                18,
                19,
                22,
                23
            ],
            9: [
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                10,
                11,
                12,
                14,
                15,
                17,
                19,
                20,
                21,
                22
            ],
            10: [
                1,
                2,
                3,
                4,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                19,
                20,
                21,
                22
            ],
            11: [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22
            ],
            12: [
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22,
                23
            ]
        },
        //通过索引转成矩阵的坐标
        _getCoord: function(index) {
            var x = Math.floor(index / this.col);
            var y = index % this.col;
            return { x: x, y: y };
        },
        //获取渲染选项的左上角坐标
        _getLeftTopPos: function(x, y) {
            var plusDis = (this.imgBaseDis - this.imgDis) / 2;
            var xPos = this.horEdgeDis + y * (this.horMiddleDis + this.imgBaseDis) + plusDis;
            var yPos = this.verEdgeDis + x * (this.verMiddleDis + this.imgBaseDis) + plusDis;
            return { x: xPos, y: yPos };
        },
        //获取渲染选项的中心
        _getCenterPos: function(x, y) {
            var plusDis = this.imgBaseDis / 2;
            var xPos = this.horEdgeDis + y * (this.horMiddleDis + this.imgBaseDis) + plusDis;
            var yPos = this.verEdgeDis + x * (this.verMiddleDis + this.imgBaseDis) + plusDis;
            return { x: xPos, y: yPos };
        },
        //渲染选项中的图片
        _roundRectWithImgSrc: function(x, y, w, h, r, item) {
            var d = 3 * this.animateNum;
            x = x + d;
            y = y + d;
            w = w - 2 * d;
            h = h - 2 * d;
            var clazz = 'item_img_' + item.id;
            var imgHtml = '<img src="' + item.href + '" class="item_img ' + clazz + '" width="' + w +
                '" height="' + h + '" style="top:' + y + 'px; left:' + x + 'px;border-radius:' + r +
                'px;" />';
            this.$imgArea.append(imgHtml);
            this.itemImageMap[item.id] = this.$imgArea.find('.' + clazz);
        },
        //计算英文开始写字的位置
        _calcEnglishPos: function(rows, rowIndex, fontWidth) {
            var tmpWidth = this.boxWidth / rows;
            var left = this.boxWidth / 2;
            var top;
            if (rows == 1) {
                top = tmpWidth / 2 + fontWidth * 0.5;
            }
            if (rows == 2) {
                if (rowIndex == 0) {
                    top = (tmpWidth - fontWidth) / 2 + fontWidth * 0.7 + (rows - 1) * fontWidth;
                }
                if (rowIndex == 1) {
                    top = (tmpWidth * rowIndex) * 0.8 + (tmpWidth - fontWidth) / 2 + fontWidth;
                }
            }
            if (rows == 3) {
                if (rowIndex == 0) {
                    top = (tmpWidth - fontWidth) / 2 + fontWidth * 0.5 + fontWidth;
                }
                if (rowIndex == 1) {
                    top = (tmpWidth * rowIndex) + (tmpWidth - fontWidth) * 0.5 + fontWidth;
                }
                if (rowIndex == 2) {
                    top = (tmpWidth * rowIndex) * 0.8 + (tmpWidth - fontWidth) * 0.6 + fontWidth;
                }
            }
            return { x: left, y: top };
        },
        //渲染英文文字选项
        _drawEnglishFont: function(x, y, text, isSmall) {
            var len = text.length;
            var fontType = 'Microsoft YaHei';
            var fontLen = 7;
            var fontSize = 15;
            if (len <= 5) {
                fontSize = isSmall ? 17 : 24;
            } else if (len > 5 && len < 8) {
                fontSize = isSmall ? 13 : 16;
            } else {
                fontSize = isSmall ? 13 : 15;
            }
            fontSize = parseInt(fontSize * this.animateNum);
            var times = Math.ceil(len / fontLen);
            var tmpPos;
            this.mainContext.save();
            this.mainContext.textAlign = 'center';
            for (var i = 0; i < times; i++) {
                var needText = text.substr(fontLen * i, fontLen);
                tmpPos = this._calcEnglishPos(times, i, fontSize);
                this.mainContext.font = fontSize + 'px ' + fontType;
                this.mainContext.fillText(needText, x + tmpPos.x, y + tmpPos.y);
            }
            this.mainContext.restore();
        },
        //计算宽英文开始写字的位置
        _calcEnglishPosForBig: function(rows, rowIndex, fontWidth) {
            var left = this.boxWidth / 2,
                top;
            var middle = (this.boxWidth - rows * fontWidth) / (rows + 1);
            var top = (middle + fontWidth) * (rowIndex + 1) * 0.95;
            if (rows == 1 || rows == 2) {
                top = (middle + fontWidth) * (rowIndex + 1) * 0.95;
            }
            return { x: left, y: top };
        },
        //渲染宽英文文字选项
        _drawEnglishFontForBig: function(x, y, text) {
            var len = text.length;
            var fontType = 'Microsoft YaHei';
            var fontLen = 5;
            var fontSize = 15;
            if (len <= 5) {
                fontSize = 24;
            } else if (len > 5 && len < 8) {
                fontSize = 16;
            } else {
                fontSize = 15;
            }
            fontSize = parseInt(fontSize * this.animateNum);
            var times = Math.ceil(len / fontLen);
            var tmpPos;
            this.mainContext.save();
            this.mainContext.textAlign = 'center';
            for (var i = 0; i < times; i++) {
                var needText = text.substr(fontLen * i, fontLen);
                tmpPos = this._calcEnglishPosForBig(times, i, fontSize);

                this.mainContext.font = fontSize + 'px ' + fontType;
                this.mainContext.fillText(needText, x + tmpPos.x, y + tmpPos.y);
            }
            this.mainContext.restore();
        },
        //计算中文开始写字的位置
        _calcChinesePos: function(rows, rowIndex, fontWidth) {
            var left = this.boxWidth / 2,
                top;
            var middle = (this.boxWidth - rows * fontWidth) / (rows + 1);
            var top = (middle + fontWidth) * (rowIndex + 1) * 0.93;
            if (rows == 1 || rows == 2) {
                top = (middle + fontWidth) * (rowIndex + 1) * 0.95;
            }
            return { x: left, y: top };
        },
        //渲染中文文字选项
        _drawChineseFont: function(x, y, text) {
            var len = text.length;
            var fontType = 'Microsoft YaHei';
            var fontLen = 5;
            var fontWidth = 12;
            if (len <= 3) {
                fontWidth = 22;
            } else if (len > 3 && len <= 6) {
                fontWidth = 22;
            } else if (len > 6 && len <= 16) {
                fontWidth = 12;
            } else {
                fontWidth = 12;
            }
            fontWidth = parseInt(fontWidth * this.animateNum);
            if (len <= 6) {
                fontLen = 3;
            } else if (len >= 7 && len <= 16) {
                fontLen = 4;
            } else {
                fontLen = 5;
            }
            var times = Math.ceil(len / fontLen);
            var tmpPos;
            this.mainContext.save();
            this.mainContext.textAlign = 'center';
            for (var i = 0; i < times; i++) {
                tmpPos = this._calcChinesePos(times, i, fontWidth);
                var needText = text.substr(fontLen * i, fontLen);
                this.mainContext.font = fontWidth + 'px ' + fontType;
                this.mainContext.fillText(needText, x + tmpPos.x, y + tmpPos.y);
            }
            this.mainContext.restore();
        },
        //渲染文字选项
        _roundRectWithText: function(x, y, text) {
            //判断是否含有中文字符
            text = text.substr(0, 20);
            var hasChinese = false;
            if (/.*[\u4e00-\u9fa5]+.*$/.test(text) || /.*[\uff00-\uffff]+.*$/.test(text)) {
                //含有中文或是全角字符
                hasChinese = true;
            } else {
                //含有中文标点符号，《》【】都没有算在全角里面
                var chineseCommon =
                    /.*[\u3002|\uff1f|\uff01|\uff0c|\u3001|\uff1b|\uff1a|\u201c|\u201d|\u2018|\u2019|\uff08|\uff09|\u300a|\u300b|\u3008|\u3009|\u3010|\u3011|\u300e|\u300f|\u300c|\u300d|\ufe43|\ufe44|\u3014|\u3015|\u2026|\u2014|\uff5e|\ufe4f|\uffe5]+.*/;
                hasChinese = chineseCommon.test(text);
            }
            if (hasChinese) {
                //有中文
                this._drawChineseFont(x, y, text);
            } else {
                //没有中文
                var fontLength = 0;
                for (var i = 0; i < text.length; i++) {
                    var tmp = text[i];
                    if (/[\~\@\#\%\^\+\=\&]/.test(tmp) || /[A-Z]/.test(tmp)) {
                        fontLength++;
                    }
                }
                if (fontLength >= 9) {
                    //宽英文文字渲染
                    this._drawEnglishFontForBig(x, y, text);
                } else {
                    //普通因为文字渲染
                    var isSmall = false;
                    if (fontLength >= 4) {
                        isSmall = true;
                    }
                    this._drawEnglishFont(x, y, text, isSmall);
                }
            }
        },
        //渲染遮罩
        _drawFrontImg: function(item) {
            var pos = this._getLeftTopPos(item.x, item.y);
            this.frontContext.save();
            this.frontContext.drawImage(this.gameFrontImg, pos.x, pos.y, this.imgBaseDis, this.imgBaseDis);
            this.frontContext.restore();
        },
        //删除遮罩
        _delFrontImg: function(item) {
            var pos = this._getLeftTopPos(item.x, item.y);
            var clearRadius = this.verMiddleDis / 2;
            this.frontContext.save();
            this.frontContext.clearRect(pos.x - clearRadius, pos.y - clearRadius, this.imgBaseDis +
                clearRadius * 2, this.imgBaseDis + clearRadius * 2);
            this.frontContext.restore();
        },
        //移动卡牌
        _moveCard: function(item, newInc) {
            var pos = this._getLeftTopPos(item.x, item.y);
            //清除旧位置背景
            var clearRadius = this.verMiddleDis / 2;
            this.mainContext.clearRect(pos.x - clearRadius, pos.y - clearRadius, this.imgBaseDis +
                clearRadius * 2, this.imgBaseDis + clearRadius * 2);
            this.mainContext.restore();
            //绘制新位置背景
            var x = pos.x + newInc;
            var y = pos.y + newInc;
            this.mainContext.save();
            if (newInc === 0) {
                this.mainContext.shadowBlur = this.imgBaseRadius;
                this.mainContext.shadowColor = "rgb(0,0,0)";
                this.mainContext.shadowOffsetX = 0;
                this.mainContext.shadowOffsetY = 2;
            }
            this.mainContext.drawImage(this.gameBaseImg, x, y, this.imgBaseDis, this.imgBaseDis);
            this.mainContext.restore();
            //渲染选项
            if (item.item_type === 'image') {
                //移动已有图片
                var $img = this.itemImageMap[item.id];
                if ($img) {
                    var d = 3 * this.animateNum;
                    var left = x + d;
                    var top = y + d;
                    $img.css({
                        left: left + 'px',
                        top: top + 'px'
                    });
                }
            } else {
                //重新渲染文本
                this._roundRectWithText(x, y, item.text);
            }
        },
        //晃动卡牌
        _shakeCards: function(lastItem, item, callback) {
            var that = this;
            var pathArr = [-2, -3, -2, -1,
                2,
                3,
                2,
                1, -2, -3, -2, -1,
                2,
                3,
                2,
                0
            ];
            var intervalTimer = setInterval(function() {
                if (pathArr.length > 0) {
                    var newInc = pathArr.shift();
                    that._moveCard(lastItem, newInc);
                    that._moveCard(item, newInc);
                } else {
                    clearInterval(intervalTimer);
                    callback();
                }
            }, 20);
        },
        //渲染某个选项
        _drawItem: function(item) {
            var pos = this._getLeftTopPos(item.x, item.y);
            //渲染选项底图
            this.mainContext.save();
            this.mainContext.shadowBlur = this.imgBaseRadius;
            this.mainContext.shadowColor = "rgb(0,0,0)";
            this.mainContext.shadowOffsetX = 0;
            this.mainContext.shadowOffsetY = 2;
            this.mainContext.drawImage(this.gameBaseImg, pos.x, pos.y, this.imgBaseDis, this.imgBaseDis);
            this.mainContext.restore();
            //渲染选项
            if (item.item_type === 'image') {
                //图片
                this._roundRectWithImgSrc(pos.x, pos.y, this.boxWidth, this.boxHeight, this.imgBaseRadius,
                    item);
            } else {
                //文本
                this._roundRectWithText(pos.x, pos.y, item.text);
            }
            //渲染遮罩
            this._drawFrontImg(item);
        },
        //初始化数据
        init: function(view, model, i18nArr, presenter) {
            var that = this;
            that.$view = $(view);
            that.questionId = model.question_id;
            that.i18nArr = i18nArr;
            that.presenter = presenter;
            //初始化题型数据
            var question_url = model.question_url;
            that.title = question_url.title;
            that.maxPairNum = question_url.items.length;
            var item;
            var imageNum = 0;
            var imageItems = [];
            for (var index = 0; index < question_url.items.length; index++) {
                item = question_url.items[index];
                //解析所有操作项
                item.source.from = 's';
                item.target.from = 't';
                that.itemMap[item.source.id] = item.source;
                if (item.source.item_type === 'image') {
                    imageItems.push(item.source);
                    imageNum++;
                }
                that.itemMap[item.target.id] = item.target;
                if (item.target.item_type === 'image') {
                    imageItems.push(item.target);
                    imageNum++;
                }
                //保存正确答案
                that.correctAnswer[item.source.id] = item.target.id;
            }
            //定义资源路径
            var resourcesPath = that.presenter.basePath + '/resources/skin/' + question_url.skin.code + '/';
            //pixi资源文件路径
            that.effectsPath = resourcesPath + 'effects/';
            //读取默认图片
            that.defaultImgSrc = resourcesPath + 'default_img.jpg';
            var defaultImg = new Image();
            defaultImg.src = that.defaultImgSrc;
            //读取背景图片
            var baseImageDtd = $.Deferred();
            var gameBaseImgSrc = resourcesPath + 'game_canvas_bg.png';
            that.gameBaseImg = new Image();
            that.gameBaseImg.onload = function() {
                baseImageDtd.resolve();
            };
            that.gameBaseImg.onerror = function() {
                that.gameBaseImg.onload = null;
                that.gameBaseImg.src = that.defaultImgSrc;
                baseImageDtd.resolve();
            };
            that.gameBaseImg.src = gameBaseImgSrc;
            //卡牌遮罩图
            var frontImageDtd = $.Deferred();
            var gameFrontImgSrc = resourcesPath + 'game_canvas_ft.png';
            that.gameFrontImg = new Image();
            that.gameFrontImg.onload = function() {
                frontImageDtd.resolve();
            };
            that.gameFrontImg.onerror = function() {
                that.gameFrontImg.onload = null;
                that.gameFrontImg.src = that.defaultImgSrc;
                frontImageDtd.resolve();
            };
            that.gameFrontImg.src = gameFrontImgSrc;
            //读取pixi精灵配置数据
            var skinDtd = $.Deferred();
            $.getJSON(resourcesPath + 'config.json', function(skinInfo) {
                that.skin = skinInfo;
                skinDtd.resolve();
            });
            //初始化完成
            var linkupInitDtd = $.Deferred();
            $.when(baseImageDtd, frontImageDtd, skinDtd).done(function() {
                //计算右侧绘图区域高宽
                var $gameCanvas = that.$view.find('.js_match_edit_box');
                var boardWidth = $gameCanvas.width();
                var boardHeight = $gameCanvas.height();
                //如果皮肤比较慢载入，没有获取到宽高，就直接采用固定的
                if (boardWidth == 0 || boardHeight == 0) {
                    if (boardWidth == 0) {
                        boardWidth = 840;
                    }
                    if (boardHeight == 0) {
                        boardHeight = 587;
                    }
                }
                that.boardWidth = boardWidth;
                that.boardHeight = boardHeight;
                //计算系数是按照boardWidth=840来初始化
                that.animateNum = that.boardWidth / 840;
                //计算左侧、顶端边距
                that.horEdgeDis = that.boardWidth * that.skin.hor_edge_dis;
                that.verEdgeDis = that.boardHeight * that.skin.ver_edge_dis;
                //计算动画格子水平间距和垂直间距
                that.horMiddleDis = that.boardWidth * that.skin.hor_middle_dis;
                that.verMiddleDis = that.boardHeight * that.skin.ver_middle_dis;
                //计算选项中图片、衬底边长
                that.imgDis = that.boardWidth * that.skin.img_dis;
                that.imgBaseDis = that.boardWidth * that.skin.img_base_dis;
                that.imgBaseRadius = that.verMiddleDis * 0.45;
                if (that.imgBaseRadius < 0) {
                    that.imgBaseRadius = 0;
                }
                //冰冻效果
                that.skin.lock_info.scale = that.skin.lock_info.scale * that.animateNum;
                //选中效果
                that.skin.select_info.scale = that.skin.select_info.scale * that.animateNum;
                //计算选项高宽
                that.boxWidth = that.imgDis;
                that.boxHeight = that.imgDis;
                //计算选项间距
                that.middleWidth = (that.boardWidth - that.boxWidth * that.col) / (that.col + 1);
                that.middleHeight = (that.boardHeight - that.boxHeight * that.row) / (that.row + 1);
                //数据初始化结束
                linkupInitDtd.resolve();
            });
            return linkupInitDtd.promise();
        },
        //初始化视图
        initView: function() {
            var that = this;
            //头部标题
            var $title = that.$view.find('.js_linkup_title');
            //左侧题干数据渲染
            that.$momentNum = that.$view.find('.js_moment_num');
            that.$maxNum = that.$view.find('.js_max_num');
            //答题结果区域
            that.$userDone = that.$view.find('.js_match_user_done');
            //右侧绘图区
            that.$boardView = that.$view.find('.js_game_canvas');
            //选项canvas
            var $mainCanvas = that.$boardView.find('.js_main_canvas');
            that.mainCanvas = $mainCanvas[0];
            that.mainContext = that.mainCanvas.getContext('2d');
            //图片渲染区域
            that.$imgArea = that.$boardView.find('.js_img_area');
            //遮罩canvas
            var $frontCanvas = that.$boardView.find('.js_front_canvas');
            that.frontCanvas = $frontCanvas[0];
            that.frontContext = that.frontCanvas.getContext('2d');
            //动画canvas
            var $animationCanvas = that.$boardView.find('.js_animation_canvas');
            that.animationCanvas = $animationCanvas[0];
            that.animationContext = that.animationCanvas.getContext('2d');
            //弹出框
            that.$pop = that.$view.find('.js_pop');
            //初始化各个view
            if (that.title.length > 35) {
                $title.addClass('s_tit');
            } else {
                $title.removeClass('s_tit');
            }
            $title.html(that.title);
            that.$maxNum.html(that.maxPairNum);
            that.$boardView.css({ height: that.boardHeight, width: that.boardWidth });
            $mainCanvas.attr({ 'height': that.boardHeight, 'width': that.boardWidth });
            $frontCanvas.attr({ 'height': that.boardHeight, 'width': that.boardWidth });
        },
        //渲染
        render: function() {
            var linkupRenderDtd = $.Deferred();
            var that = this;
            //初始化题型
            that.resetQuestion();
            //加载pixi资源文件 pixi资源加载完成回调
            var onTilesLoaded = function(loader, resources) {
                //初始化爆炸效果
                that.explosionTextures = [];
                $.each(resources[that.skin.key + 'bomb'].textures, function(k, v) {
                    that.explosionTextures.push(v);
                });
                //初始化连线精灵数据
                var tmp;
                for (var i = 1; i <= 5; i++) {
                    tmp = [];
                    $.each(resources[that.skin.key + 'hor' + i].textures, function(k, v) {
                        tmp.push(v);
                    });
                    that.clearSpiritArr['hor'][i] = tmp;
                }

                for (var i = 1; i <= 3; i++) {
                    tmp = [];
                    $.each(resources[that.skin.key + 'ver' + i].textures, function(k, v) {
                        tmp.push(v);
                    });
                    that.clearSpiritArr['ver'][i] = tmp;
                }
                //初始化pixi动画 pixi渲染对象
                that.pixiRender = PIXI.autoDetectRenderer(that.boardWidth, that.boardHeight, {
                    view: that.animationCanvas,
                    transparent: true
                }, true);
                that.pixiStage = new PIXI.Container();
                var animate = function() {
                    that.pixiRender.render(that.pixiStage);
                    that.globalAnimationId = requestAnimationFrame(animate);
                };
                animate();
                linkupRenderDtd.resolve();
            };
            var skinKey = that.skin.key;
            if (PIXI.loader.resources[skinKey + 'bomb']) {
                onTilesLoaded(PIXI.loader, PIXI.loader.resources);
            } else {
                PIXI.loader.add(skinKey + 'bomb', that.effectsPath + 'cg.json')
                    //                    .add(skinKey + 'bomb2', that.effectsPath + 'cg02.json')
                    .add(skinKey + 'hor1', that.effectsPath + 'l_h_e.json').add(skinKey + 'hor2', that.effectsPath +
                        'l_h_d.json').add(skinKey + 'hor3', that.effectsPath + 'l_h_c.json').add(skinKey +
                        'hor4', that.effectsPath + 'l_h_b.json').add(skinKey + 'hor5', that.effectsPath +
                        'l_h_a.json').add(skinKey + 'ver1', that.effectsPath + 'l_s_c.json').add(skinKey +
                        'ver2', that.effectsPath + 'l_s_b.json').add(skinKey + 'ver3', that.effectsPath +
                        'l_s_a.json').load(onTilesLoaded);
            }
            return linkupRenderDtd.promise();
        },
        //鼠标点击坐标转成选项坐标
        _getImgPos: function(e) {
            var e = e || window.event,
                posX = e.offsetX || e.layerX,
                posY = e.offsetY || e.layerY,
                x,
                y;
            var i,
                pos,
                nextPos;
            x = 0;
            y = 0;
            for (i = 0; i < this.row; i++) {
                if (i < this.row - 1) {
                    pos = this._getLeftTopPos(i, 0);
                    nextPos = this._getLeftTopPos(i + 1, 0);
                    if (posY >= pos.y && posY < nextPos.y) {
                        x = i;
                        break;
                    }
                } else {
                    x = i;
                    break;
                }
            }
            for (i = 0; i < this.col; i++) {
                if (i < this.col - 1) {
                    pos = this._getLeftTopPos(0, i);
                    nextPos = this._getLeftTopPos(0, i + 1);
                    if (posX >= pos.x && posX < nextPos.x) {
                        y = i;
                        break;
                    }
                } else {
                    y = i;
                    break;
                }
            }
            return { x: x, y: y };
        },
        //选中某个选项
        _selectItem: function(item) {
            //记录被选中项
            this.lastSelectItem = item;
        },
        //取消最近一次选中效果
        _unSelectItem: function() {
            if (this.lastSelectItem !== null) {
                this.lastSelectItem = null;
            }
        },
        //判断矩阵中两个位置是否直线连通
        _straightLink: function(start, end) {
            var result = false;
            if (start.y === end.y) {
                //在同一列上
                var x1 = start.x < end.x ? start.x : end.x;
                var x2 = start.x < end.x ? end.x : start.x;
                if (x2 - x1 === 1) {
                    //相邻，可以连通
                    result = true;
                } else {
                    //不相邻，判断中间是否有其他选项
                    var hasOther = false;
                    for (var i = x1 + 1; i < x2; i++) {
                        if (this.currentMatrix[i][start.y].id) {
                            //存在其他选项
                            hasOther = true;
                            break;
                        }
                    }
                    if (hasOther === false) {
                        //没有其他选项
                        result = true;
                    }
                }
            } else if (start.x === end.x) {
                //在同一行上
                var y1 = start.y < end.y ? start.y : end.y;
                var y2 = start.y < end.y ? end.y : start.y;
                if (y2 - y1 === 1) {
                    //相邻，可以连通
                    result = true;
                } else {
                    //不相邻，判断中间是否有其他选项
                    var hasOther = false;
                    for (var i = y1 + 1; i < y2; i++) {
                        if (this.currentMatrix[start.x][i].id) {
                            //存在其他选项
                            hasOther = true;
                            break;
                        }
                    }
                    if (hasOther === false) {
                        //没有其他选项
                        result = true;
                    }
                }
            }
            return result;
        },
        //根据指定方向，获取每个方向的空白位置
        _getBlank: function(x, y, directionArr) {
            var blankPos = [];
            var _x = x,
                __x = x;
            var _y = y,
                __y = y;
            var self = this;
            for (var i = 0; i < directionArr.length; i++) {
                var mark = directionArr[i];
                switch (mark) {
                    case 0:
                        //左侧
                        while (--_y >= 0) {
                            if (this.currentMatrix[x][_y].id === null) {
                                blankPos.push([x, _y]);
                            } else {
                                break;
                            }
                        }
                        break;

                    case 1:
                        //上侧
                        while (--_x >= 0) {
                            if (this.currentMatrix[x][_y].id === null) {
                                blankPos.push([_x, y]);
                            } else {
                                break;
                            }
                        }
                        break;

                    case 2:
                        //右侧
                        while (++__y < self.areaCol) {
                            if (this.currentMatrix[x][_y].id === null) {
                                blankPos.push([x, __y]);
                            } else {
                                break;
                            }
                        }
                        break;

                    case 3:
                        //下侧
                        while (++__x < self.areaRow) {
                            if (this.currentMatrix[x][_y].id === null) {
                                blankPos.push([__x, y]);
                            } else {
                                break;
                            }
                        }
                        break;
                }
            }
            //按顺序返回空白位置
            return blankPos;
        },
        //获取可能的中转点
        _getTransfer: function(start, end) {
            var x1 = start.x;
            var y1 = start.y;
            var x2 = end.x;
            var y2 = end.y;
            //判断两个点的相对位置，根据相对位置确定中转点的先后判断顺序
            var blank1 = [];
            var blank2 = [];
            if (x1 <= x2) {
                if (y1 <= y2) {
                    blank1 = this._getBlank(x1, y1, [3, 2, 1, 0]);
                    blank2 = this._getBlank(x2, y2, [1, 0, 3, 2]);
                } else {
                    blank1 = this._getBlank(x1, y1, [3, 0, 1, 2]);
                    blank2 = this._getBlank(x2, y2, [1, 2, 3, 0]);
                }
            } else {
                if (y1 <= y2) {
                    blank1 = this._getBlank(x1, y1, [1, 2, 3, 0]);
                    blank2 = this._getBlank(x2, y2, [3, 0, 1, 2]);
                } else {
                    blank1 = this._getBlank(x1, y1, [1, 0, 3, 2]);
                    blank2 = this._getBlank(x2, y2, [3, 2, 1, 0]);
                }
            }
            return [blank1, blank2];
        },
        //返回矩阵中两个位置的连通路径
        _getClearPath: function(start, end) {
            var result = [];
            var isLine = this._straightLink(start, end);
            if (isLine) {
                //直线连通
                result = [start, end];
            } else {
                //直线无法连通，判断是否可以通过对角点连通
                var isCorner = false;
                var corner;
                var cornerArr = [{
                    x: start.x,
                    y: end.y
                }, {
                    x: end.x,
                    y: start.y
                }];
                for (var i = 0; i < cornerArr.length; i++) {
                    corner = cornerArr[i];
                    if (this.currentMatrix[corner.x][corner.y].id === null && this._straightLink(start,
                            corner) && this._straightLink(corner, end)) {
                        //可以连通
                        isCorner = true;
                        break;
                    }
                }
                if (isCorner) {
                    //通过拐角点可以连通
                    result = [start, corner, end];
                } else {
                    //通过中转点来获取连通路径
                    var res = this._getTransfer(start, end);
                    var blank1 = res[0];
                    var blank2 = res[1];
                    var blankA;
                    var blankB;
                    var isBlankConnect = false;
                    for (var ii = 0, iLen = blank1.length; ii < iLen; ii++) {
                        for (var jj = 0, jLen = blank2.length; jj < jLen; jj++) {
                            //判断这两个中转点是不是可以直线连通的
                            blankA = {
                                x: blank1[ii][0],
                                y: blank1[ii][1]
                            };
                            blankB = {
                                x: blank2[jj][0],
                                y: blank2[jj][1]
                            };
                            if (this._straightLink(blankA, blankB)) {
                                //可以连通就返回
                                isBlankConnect = true;
                                break;
                            }
                        }
                    }
                    if (isBlankConnect) {
                        result = [start, blankA, blankB, end];
                    }
                }
            }
            if (result.length === 0) {
                //如果不能按照连连看规则消除，则直接消除
                if (start.x === end.x || start.y === end.y) {
                    result = [start, end];
                } else {
                    result = [
                        start, {
                            x: start.x,
                            y: end.y
                        },
                        end
                    ];
                }
            }
            return result;
        },
        //是否用到两条一样的消除线
        _useSameSpirit: function(pathArr) {
            if (pathArr.length == 4) {
                var v1 = Math.abs(pathArr[0]['x'] - pathArr[1]['x']) + Math.abs(pathArr[0]['y'] - pathArr[1]
                    ['y']);
                var v2 = Math.abs(pathArr[2]['x'] - pathArr[3]['x']) + Math.abs(pathArr[2]['y'] - pathArr[3]
                    ['y']);
                if (v1 == v2) {
                    return true;
                }
            }
            return false;
        },
        //获取消除影片
        _getClearMovie: function(type, num, again) {
            if (!this.clearMoviesArr[type][num]) {
                this.clearMoviesArr[type][num] = [];
            }
            if (!again) {
                if (this.clearMoviesArr[type][num][0]) {
                    return this.clearMoviesArr[type][num][0];
                } else {
                    var tmp = new PIXI.extras.MovieClip(this.clearSpiritArr[type][num]);
                    this.clearMoviesArr[type][num][0] = tmp;
                    return tmp;
                }
            } else {
                if (this.clearMoviesArr[type][num][1]) {
                    return this.clearMoviesArr[type][num][1];
                } else {
                    var tmp = new PIXI.extras.MovieClip(this.clearSpiritArr[type][num]);
                    this.clearMoviesArr[type][num][1] = tmp;
                    return tmp;
                }
            }
        },
        //两点之间的消除效果
        _oneClearPath: function(pre, nodeA, nodeB, again) {
            var self = this;
            var scale = self.skin.line_info.scale;
            var incX = self.skin.line_info.x;
            var incY = self.skin.line_info.y;
            var speed = self.skin.line_info.speed;
            if (nodeA.x == nodeB.x) {
                //水平的消除线
                var min = nodeA.y;
                var max = nodeB.y;
                if (nodeB.y < nodeA.y) {
                    min = nodeB.y;
                    max = nodeA.y;
                }
                var lineSpirit = self._getClearMovie(pre + 'hor', max - min, again);
                var x = nodeA.x,
                    y = min;
                var pos = self._getCenterPos(x, y);
                var xPos = pos.x;
                var yPos = pos.y;
                lineSpirit.animationSpeed = speed;
                lineSpirit.anchor = {
                    x: 0,
                    y: 0.5
                };
                lineSpirit.scale.set(scale);
                lineSpirit.loop = true;
                lineSpirit.position.x = xPos + incX;
                lineSpirit.position.y = yPos + incY;
                lineSpirit.play();
                self.pixiStage.addChild(lineSpirit);
            } else {
                //垂直的消除线
                var min = nodeA.x;
                var max = nodeB.x;
                if (nodeB.x < nodeA.x) {
                    min = nodeB.x;
                    max = nodeA.x;
                }
                var lineSpirit = self._getClearMovie(pre + 'ver', max - min, again);
                var x = min,
                    y = nodeA.y;
                var pos = self._getCenterPos(x, y);
                var xPos = pos.x;
                var yPos = pos.y;
                lineSpirit.animationSpeed = speed;
                lineSpirit.scale.set(scale);
                lineSpirit.anchor = {
                    x: 0.5,
                    y: 0
                };
                lineSpirit.loop = true;
                lineSpirit.position.x = xPos + incX;
                lineSpirit.position.y = yPos + incY;
                lineSpirit.play();
                self.pixiStage.addChild(lineSpirit);
            }
        },
        _drawClearPath: function(pathArr, type) {
            var self = this;
            var again = self._useSameSpirit(pathArr);
            var pre = type == 'fail' ? 'fail_' : '';
            for (var i = 0; i < (pathArr.length - 1); i++) {
                this._oneClearPath(pre, pathArr[i], pathArr[i + 1], (again && (i == pathArr.length - 2)));
            }
            //定时清除
            setTimeout(function() {
                for (var i = 0; i < self.clearMoviesArr[pre + 'hor'].length; i++) {
                    for (var j = 0; j < self.clearMoviesArr[pre + 'hor'][i].length; j++) {
                        self.pixiStage.removeChild(self.clearMoviesArr[pre + 'hor'][i][j]);
                    }
                }
                for (var i = 0; i < self.clearMoviesArr[pre + 'ver'].length; i++) {
                    for (var j = 0; j < self.clearMoviesArr[pre + 'ver'][i].length; j++) {
                        self.pixiStage.removeChild(self.clearMoviesArr[pre + 'ver'][i][j]);
                    }
                }
            }, 200);
        },
        //绘制爆炸
        _drawClearBomb: function(item) {
            var scale = this.skin.bomb_info.scale;
            var incX = this.skin.bomb_info.x;
            var incY = this.skin.bomb_info.y;
            var speed = this.skin.bomb_info.speed;
            var pos = this._getCenterPos(item.x, item.y);
            var explosion = new PIXI.extras.MovieClip(this.explosionTextures);
            explosion.animationSpeed = speed;
            explosion.loop = false;
            explosion.anchor = {
                x: 0.5,
                y: 0.5
            };
            explosion.scale.set(scale);
            explosion.position.x = pos.x + incX;
            explosion.position.y = pos.y + incY;
            explosion.play();
            this.pixiStage.addChild(explosion);
        },
        //删除选项
        _delItem: function(item) {
            var pos = this._getLeftTopPos(item.x, item.y);
            this.mainContext.save();
            var clearRadius = this.verMiddleDis / 2;
            this.mainContext.clearRect(pos.x - clearRadius, pos.y - clearRadius, this.imgBaseDis +
                clearRadius * 2, this.imgBaseDis + clearRadius * 2);
            this.mainContext.restore();
            if (item.item_type === 'image') {
                var $img = this.itemImageMap[item.id];
                if ($img) {
                    $img.remove();
                    this.itemImageMap[item.id] = null;
                }
            }
        },
        //根据文本长度返回特定的样式
        _getFontSize: function(text) {
            var result = 'text_s';
            if (text.length <= 2) {
                result = 'text_l';
            } else if (text.length > 2 && text.length <= 6) {
                result = 'text_m';
            } else {
                result = 'text_s';
            }
            return result;
        },
        //显示用户答题结果
        _showResult: function() {
            var that = this;
            //根据答案记录显示答题
            that.$momentNum.html(that.answerArr.length);
            var html = '';
            $.each(that.answerArr, function(k, v) {
                var markInfo = v.result ? 'match_right' : 'match_wrong';
                var tmp = '<li class="' + markInfo +
                    '"><em class="match_icon"></em><div class="match_list"><div class="list_m_box">';
                if (v.source.item_type === 'image') {
                    tmp += '<div class="list_m_pic"><img src="' + v.source.href +
                        '" alt="" /></div>';
                } else {
                    var text = v.source.text;
                    var cls = that._getFontSize(text);
                    tmp += '<div class="list_m_text"><p class="' + cls + '">' + text + '</p></div>';
                }
                tmp += ' <ins class="ins_line"></ins>';
                if (v.target.item_type === 'image') {
                    tmp += '<div class="list_m_pic"><img src="' + v.target.href +
                        '" alt="" /></div>';
                } else {
                    var text = v.target.text;
                    var cls = that._getFontSize(text);
                    tmp += '<div class="list_m_text"><p class="' + cls + '">' + text + '</p></div>';
                }
                tmp += '</div></div></li>';
                html += tmp;
            });
            that.$userDone.html(html);
        },
        //记录用户答题结果
        _recordResult: function(lastSelectItem, item, isError) {
            //删除矩阵中数据
            this.currentMatrix[lastSelectItem.x][lastSelectItem.y] = {
                id: null
            };
            this.currentMatrix[item.x][item.y] = {
                id: null
            };
            //将选项移动到答题结果区域
            var isRight = lastSelectItem.locked || item.locked || isError ? false : true;
            var isStudentClick = isError ? false : true;
            var time = 0;
            var sourceItem = item.from === 's' ? item : lastSelectItem;
            var targetItem = item.from === 't' ? item : lastSelectItem;
            var tmp = {
                result: isRight,
                time: time,
                isStudentClick: isStudentClick,
                source: sourceItem,
                target: targetItem
            };
            this.answerArr.unshift(tmp);
        },
        //绑定交互事件
        bindEvent: function() {
            var that = this;
            var clickHandler = function(pos) {
                if (that.locked === false && that.shaking === false) {
                    //通过矩阵坐标获取被点击的选项信息
                    var item = that.currentMatrix[pos.x][pos.y];
                    if (item && item.id) {
                        //清楚遮罩
                        that._delFrontImg(item);
                        //点击选项有效则进入
                        if (that.lastSelectItem) {
                            //已经有等待匹配的选项
                            if (that.lastSelectItem.x === item.x && that.lastSelectItem.y === item.y) {
                                //连续选中同一个选项，取消选项的选中状态                                that._unSelectItem();
                            } else {
                                //连续选中的两个选项不同,判断是否可消除
                                var isCorrect = true;
                                if (that.lastSelectItem.from === item.from) {
                                    //两个选项来源相同，连接错误
                                    isCorrect = false;
                                } else {
                                    //判断答案是否正确
                                    var sourceItem = item.from === 's' ? item : that.lastSelectItem;
                                    var targetItem = item.from === 't' ? item : that.lastSelectItem;
                                    if (that.correctAnswer[sourceItem.id] != targetItem.id) {
                                        //答案错误，不可消除
                                        isCorrect = false;
                                    }
                                }
                                var lastSelectItem = that.lastSelectItem;
                                //取消选项的选中状态
                                that._unSelectItem();
                                if (isCorrect) {
                                    //可消除 保存答题数据
                                    that._recordResult(lastSelectItem, item);
                                    //通知状态变化
                                    that.presenter.$dispatchEvent($PresenterEvent[
                                            'InteractionStateRecoverFilter'].PRESENTER_STATE_CHANGE,
                                        PresenterEventType.IC_PLAYER_EVENT);
                                    //显示爆炸效果
                                    that._drawClearBomb(lastSelectItem);
                                    that._drawClearBomb(item);
                                    //绘制消除成功效果
                                    var path = that._getClearPath({
                                        x: lastSelectItem.x,
                                        y: lastSelectItem.y
                                    }, {
                                        x: item.x,
                                        y: item.y
                                    });
                                    that._drawClearPath(path, 'success');
                                    //删除选项
                                    that._delItem(lastSelectItem);
                                    that._delItem(item);
                                    //显示结果
                                    that._showResult();
                                    //通知题目答题状态
                                    that.presenter.$dispatchEvent($PresenterEvent[
                                            'AnswerFlowController'].QUESTION_STATE_CHANGE,
                                        PresenterEventType.IC_PLAYER_EVENT, { canSubmit: true });
                                    //判断答题是否结束
                                    if (that.maxPairNum === that.answerArr.length) {
                                        //答题结束,自动提交
                                        that.presenter.$dispatchEvent($PresenterEvent[
                                                'AnswerFlowController'].AUTO_SEND_ANSWER,
                                            PresenterEventType.IC_PLAYER_EVENT, {
                                                question_id: that.questionId,
                                                question_type: 'linkup'
                                            });
                                    }
                                } else {
                                    //不可消除,晃动
                                    that.shaking = true;
                                    that._shakeCards(lastSelectItem, item, function() {
                                        that._drawFrontImg(lastSelectItem);
                                        that._drawFrontImg(item);
                                        that.shaking = false;
                                    });
                                }
                            }
                        } else {
                            //没有等待匹配的选项,记录当前选项
                            that._selectItem(item);
                        }
                    }
                }
            };
            //绑定选项点击事件
            that.$boardView.off('click').on('click', function(event) {
                //通过点击坐标获取矩阵中的坐标
                var pos = that._getImgPos(event);
                clickHandler(pos);
            });
            //绑定触摸屏上面的点击事件
            that.$boardView.off('touchstart').on('touchstart', function(ev) {
                var offsetX = ev['originalEvent']['touches'][0].pageX - that.$boardView.offset().left;
                var offsetY = ev['originalEvent']['touches'][0].pageY - that.$boardView.offset().top;
                var e = {
                    'offsetX': offsetX,
                    'offsetY': offsetY
                };
                var pos = that._getImgPos(e);
                clickHandler(pos);
                that.$boardView.off('touchend').on('touchend', function(event) {
                    event.preventDefault();
                });
            });

        },
        //获取当前用户状态
        getState: function() {
            var state = {
                currentMatrix: this.currentMatrix,
                answerArr: this.answerArr,
                resultHint: this.resultHint
            };
            return state;
        },
        //恢复用户状态
        setState: function(state) {
            this.currentMatrix = state.currentMatrix;
            this.answerArr = state.answerArr;
            this.resultHint = state.resultHint;
            //清空图片
            this.$imgArea.children().remove();
            //清空画布
            this.mainContext.save();
            this.mainContext.clearRect(0, 0, this.boardWidth, this.boardHeight);
            this.mainContext.restore();
            this.frontContext.save();
            this.frontContext.clearRect(0, 0, this.boardWidth, this.boardHeight);
            this.frontContext.restore();
            //
            var item;
            for (var x = 0; x < this.row; x++) {
                for (var y = 0; y < this.col; y++) {
                    if (this.currentMatrix[x] && this.currentMatrix[x][y]) {
                        item = this.currentMatrix[x][y];
                        if (item.id) {
                            this._drawItem(item);
                        }
                    }
                }
            }
            //还原用户作答
            this._showResult();
            //还原提示
            if (this.resultHint.show) {
                this.showResultHint(this.resultHint.option);
            }
        },
        //答题模式，显示正确的答案结果
        _showAnswer: function() {
            var sourceMap = {};
            var targetMap = {};
            var item;
            //判断是否还存在未作答的选项
            var hasUnoperateItem = false;
            for (var x = 0; x < this.row; x++) {
                for (var y = 0; y < this.col; y++) {
                    if (this.currentMatrix[x] && this.currentMatrix[x][y]) {
                        item = this.currentMatrix[x][y];
                        if (item.id) {
                            //存在未作答选项，保存这些未作答的选项
                            hasUnoperateItem = true;
                            if (item.from === 's') {
                                sourceMap[item.id] = item;
                            } else {
                                targetMap[item.id] = item;
                            }
                        }
                    }
                }
            }
            if (hasUnoperateItem) {
                //存在未作答的选项，自动提交,并显示错误
                var sourceItem;
                var targetItem;
                for (var id in sourceMap) {
                    sourceItem = sourceMap[id];
                    var targetId = this.correctAnswer[sourceItem.id];
                    targetItem = targetMap[targetId];
                    //保存答题数据
                    this._recordResult(sourceItem, targetItem, true);
                }
                //通知状态变化
                this.presenter.$dispatchEvent($PresenterEvent['InteractionStateRecoverFilter'].PRESENTER_STATE_CHANGE,
                    PresenterEventType.IC_PLAYER_EVENT);
                //显示答题结果
                this._showResult();
            }
            //清除选中效果
            this._unSelectItem();
            //清空图片
            this.$imgArea.children().remove();
            //清空画布
            this.mainContext.save();
            this.mainContext.clearRect(0, 0, this.boardWidth, this.boardHeight);
            this.mainContext.restore();
            this.frontContext.save();
            this.frontContext.clearRect(0, 0, this.boardWidth, this.boardHeight);
            this.frontContext.restore();
        },
        //统计模式下，返回正确答案的html片段
        _showStaticAnswer: function() {
            var that = this;
            var result = '';
            //将答案选项分成左右两组
            var answerLeft = [];
            var answerRight = [];
            var num = 0;
            for (var itemId in that.correctAnswer) {
                if (num % 2 === 1) {
                    answerRight.push(itemId);
                } else {
                    answerLeft.push(itemId);
                }
                num++;
            }
            var itemToHtml = function(item) {
                var itemHtml = '';
                if (item.item_type === 'image') {
                    itemHtml = '<li><img src="' + item.href + '" /></li>';
                } else {
                    var clazz = '';
                    if (item.text.length > 12) {
                        clazz = 'font_small';
                    } else if (item.text.length > 9) {
                        clazz = 'font_mid';
                    }
                    itemHtml = '<li><span class="' + clazz + '">' + item.text + '</span></li>';
                }
                return itemHtml;
            };
            var answerArrToHtml = function(answerArr) {
                var html = '';
                var itemLeftHtml = '';
                var itemRightHtml = '';
                var sourceItem;
                var sourceId;
                var targetItem;
                var targetId;
                for (var index = 0; index < answerArr.length; index++) {
                    sourceId = answerArr[index];
                    sourceItem = that.itemMap[sourceId];
                    itemLeftHtml += itemToHtml(sourceItem);
                    //
                    targetId = that.correctAnswer[sourceId];
                    targetItem = that.itemMap[targetId];
                    itemRightHtml += itemToHtml(targetItem);
                }
                html += '<ul class="com_answer_cosspan_l">' + itemLeftHtml +
                    '</ul><ul class="com_answer_cosspan_r">' + itemRightHtml + '</ul>';
                return html;
            };
            var answerArrLeftHtml = answerArrToHtml(answerLeft);
            var answerArrRightHtml = answerArrToHtml(answerRight);
            result += '<div class="com_answer_l">' + answerArrLeftHtml +
                '</div><ans class="com_answer_m"></ans><div class="com_answer_r">' + answerArrRightHtml +
                '</div>';
            return result;
        },
        //答题结束后显示作答结果
        showAnswer: function() {
            var result = '';
            if (this.isStatic) {
                //统计模式
                result = this._showStaticAnswer();
            } else {
                //答题模式
                this._showAnswer();
            }
            return result;
        },
        //显示作答完成提示
        showResultHint: function(option) {
            this.resultHint.show = true;
            this.resultHint.option = {
                trigger: option.trigger,
                spendTime: option.spendTime
            };
            //通知状态变化
            this.presenter.$dispatchEvent($PresenterEvent['InteractionStateRecoverFilter'].PRESENTER_STATE_CHANGE,
                PresenterEventType.IC_PLAYER_EVENT);
            var title = this.i18nArr['come_on'];
            var clazz = 'correct';
            var result = true;
            if (this.answerArr.length === this.maxPairNum) {
                //已全部作答，判断作答是否正确
                var answer;
                for (var index = 0; index < this.answerArr.length; index++) {
                    answer = this.answerArr[index];
                    if (answer.result === false) {
                        //当前选项答题错误
                        result = false;
                        break;
                    }
                }
            } else {
                //未全部作答，答题错误
                result = false;
            }
            if (result) {
                title = this.i18nArr['you_are_good'];
            }
            if (option.trigger === 'timer') {
                //时间倒计时结束
                clazz = 'wrong';
                title = this.i18nArr['next_time_come_on'];
            }
            var second = option.spendTime;
            var hour = Math.floor(second / 3600);
            second = second - hour * 3600;

            var minute = Math.floor(second / 60);
            second = second - minute * 60;
            var text = this.i18nArr['look_left'];
            var html = '<p class="ans_result_tit">' + title +
                '</p><p class="ans_result_time">    <span class="com_pop_minute">' + minute +
                '</span><span>' + this.i18nArr['minutes'] + '</span>    <span class="com_pop_second">' +
                second + '</span><span>' + this.i18nArr['seconds'] +
                '</span></p><p class="ans_result_bottom">' + text + '</p>';
            this.$pop.html(html);
            this.$pop.addClass(clazz);
            this.$pop.show();
        },
        resetQuestion: function() {
            var that = this;
            //    that.locked = false;
            that.shaking = false;
            that.isStatic = false;
            that.resultHint = {
                show: false,
                option: {}
            };
            //初始化用户答案
            that.$momentNum.html(0);
            that.answerArr = [];
            that.$userDone.html('');
            //隐藏提示框
            that.$pop.html('');
            that.$pop.removeClass('correct').removeClass('wrong');
            that.$pop.hide();
            //初始化当前矩阵,每个选项初始值为无效值
            that.currentMatrix = [];
            for (var i = 0; i < that.row; i++) {
                that.currentMatrix[i] = [];
                for (var j = 0; j < that.col; j++) {
                    that.currentMatrix[i][j] = {
                        id: null
                    };
                }
            }
            //获取可用矩阵的配置
            var matrixUseable = that.matrixUseableConfig[that.maxPairNum];
            var tempMatrixUseable = matrixUseable.concat();
            //将选项随机放入可用的矩阵
            var item;
            var randomIndex;
            var randomCoord;
            for (var itemId in that.itemMap) {
                item = $.extend({}, that.itemMap[itemId]);
                randomIndex = Math.floor(Math.random() * tempMatrixUseable.length);
                randomCoord = that._getCoord(tempMatrixUseable[randomIndex]);
                item.x = randomCoord.x;
                item.y = randomCoord.y;
                that.currentMatrix[randomCoord.x][randomCoord.y] = item;
                //将使用过的位置删除
                tempMatrixUseable.splice(randomIndex, 1);
            }
            //初始化矩阵canvas
            that.mainContext.save();
            that.mainContext.clearRect(0, 0, that.boardWidth, that.boardHeight);
            that.mainContext.restore();
            //初始化图片
            that.itemImageMap = {};
            this.$imgArea.children().remove();
            //初始化动画
            that.animationContext.save();
            that.animationContext.clearRect(0, 0, that.boardWidth, that.boardHeight);
            that.animationContext.restore();
            for (var x = 0; x < that.row; x++) {
                for (var y = 0; y < that.col; y++) {
                    if (that.currentMatrix[x] && that.currentMatrix[x][y]) {
                        item = that.currentMatrix[x][y];
                        if (item.id) {
                            that._drawItem(item);
                        }
                    }
                }
            }
            //通知状态变化
            this.presenter.$dispatchEvent($PresenterEvent['InteractionStateRecoverFilter'].PRESENTER_STATE_CHANGE,
                PresenterEventType.IC_PLAYER_EVENT);
        },
        lockQuestion: function() {
            this.locked = true;
        },
        unlockQuestion: function() {
            this.locked = false;
        },
        finishQuestion: function() {},
        startStatistics: function() {
            this.isStatic = true;
        },
        getResult: function() {
            var answerState = false;
            var answer = {
                correct_response: this.correctAnswer,
                user_response: this.answerArr,
                answer_result: true
            };
            var oldAnswer = {
                //记录当前的答题状态 1:还没有提交 2:已经提交，都正确 3:已经提交，有错误 4：被强制提交,5:未完成提交
                answerStatus: 1,
                state: 'FAILED',
                value: []
            };
            var isStudentClick = false;
            if (this.answerArr.length === 0) {
                //没有作答，答题错误,返回正确答案
                for (var id in this.correctAnswer) {
                    oldAnswer.value.push(id + ' ' + this.correctAnswer[id]);
                }
                answer.answer_result = false;
            } else {
                //有作答
                if (this.answerArr.length === this.maxPairNum) {
                    //已全部作答，判断作答是否正确
                    isStudentClick = true;
                    var aa;
                    for (var index = 0; index < this.answerArr.length; index++) {
                        aa = this.answerArr[index];
                        oldAnswer.value.push(aa.source.id + ' ' + aa.target.id);
                        if (aa.result === false) {
                            //当前选项答题错误
                            answer.answer_result = false;
                            oldAnswer.value.push(aa.source.id + ' unknown');
                        }
                        if (aa.isStudentClick) {
                            //该选项作答由用户点击引起，可提交
                            answerState = true;
                        } else {
                            //该选项作答不是由用户点击引起
                            isStudentClick = false;
                        }
                    }
                } else {
                    //未全部作答，答题错误,返回正确答案
                    isStudentClick = false;
                    answer.answer_result = false;
                    var correctAnswerTmp = $.extend({}, this.correctAnswer);
                    var aa;
                    for (var index = 0; index < this.answerArr.length; index++) {
                        aa = this.answerArr[index];
                        oldAnswer.value.push(aa.source.id + ' ' + aa.target.id);
                        if (aa.result === false) {
                            //当前选项答题错误
                            oldAnswer.value.push(aa.source.id + ' unknown');
                        }
                        if (aa.isStudentClick) {
                            //该选项作答由用户点击引起，可提交
                            answerState = true;
                        }
                        delete correctAnswerTmp[aa.source.id];
                    }
                    for (var id in correctAnswerTmp) {
                        //当前选项答题错误
                        oldAnswer.value.push(id + ' unknown');
                    }
                }
            }
            if (answer.answer_result) {
                //已提交，答题正确
                oldAnswer.answerStatus = 2;
                oldAnswer.state = 'PASSED';
            } else {
                oldAnswer.state = 'FAILED';
                if (isStudentClick) {
                    //全部由用户手动作答
                    oldAnswer.answerStatus = 3;
                }
            }
            answer['RESPONSE_1-1'] = oldAnswer;
            var result = {
                answer: answer,
                answerState: answerState,
                questionId: this.questionId
            };
            return result;
        },
        destroy: function() {
            //清除题型数据
            this.bdMap = {};
            this.itemImageMap = {};
            //解除事件
            this.$boardView.off('click').off('touchstart').off('touchend');
            //清楚dom对象引用
            this.pixiStage.destroy();
            this.pixiStage = null;
            this.pixiRender.destroy();
            this.pixiRender = null;
            cancelAnimationFrame(this.globalAnimationId);
            this.globalAnimationId = null;
            this.gameBaseImg = null;
            this.$maxNum = null;
            this.$momentNum = null;
            this.$userDone = null;
            this.mainContext = null;
            this.mainCanvas = null;
            this.frontContext = null;
            this.frontCanvas = null;
            this.animationContext = null;
            this.animationCanvas = null;
            this.$pop = null;
            this.$boardView = null;
            this.$view = null;
        }
    };

    //对外提供服务
    var Service = function(parent) {
        this.questionId = null;
        this._memoryCard = null;
        this.parent = parent;
        this.status = {};
    };
    Service.prototype = {
        init: function(model, memoryCard) {
            this.questionId = model.question_id;
            this._memoryCard = memoryCard;
        },
        getQuestionInfo: function() {
            return {
                id: this.questionId,
                type_code: 'memorycard',
                type_name: '记忆卡牌',
                url: this.questionId,
                dispatchOnly: true
            };
        },
        setLocationProperties: function(data) {
            console.log(data);
            this.parent.i18nArr = data;
        },
        getResult: function() {
            return this._memoryCard.getResult();
        },
        _getState: function() {
            var state = this._memoryCard.getState();
            var result = JSON.stringify(state);
            return result;
        },
        getState: function() {
            this.parent.playerController.startFlow('css_classroom_status_changed', {
                presenterCode: this.parent
                    .metaInfo.name
            });

            return this._getState();
        },
        setState: function(state) {
            var stateObj = JSON.parse(state);
            if (stateObj) {
                this._memoryCard.setState(stateObj);
            }
        },
        getClassroomStatus: function() {
            return this._getState();
        },
        setClassroomStatus: function(status) {
            this.status = status;
            !!this.status && this.setState(status);
            this.parent.$dispatchEvent('css_recover_complete', PresenterEventType.IC_PLAYER_EVENT, {
                presenterCode: this.parent.metaInfo.name
            });
        },
        clearClassroomStatus: function() {
            this.setClassroomStatus(null);
        },
        showAnswer: function() {
            return this._memoryCard.showAnswer();
        },
        showResultHint: function(option) {
            this._memoryCard.showResultHint(option);
        },
        resetQuestion: function() {
            this._memoryCard.resetQuestion();
        },
        lockQuestion: function() {
            this._memoryCard.lockQuestion();
        },
        unlockQuestion: function() {
            this._memoryCard.unlockQuestion();
        },
        finishQuestion: function() {
            //            this._linkUp.finishQuestion();
        },
        startStatistics: function() {
            this._memoryCard.startStatistics();
        },
        //获取全部学生人数
        _getAllStudents: function() {
            var options = {
                order: [{
                    orderProperty: 'seatNumberValue',
                    orderType: 'asc'
                }, {
                    orderProperty: 'studentNo',
                    orderType: 'asc'
                }]
            };
            var studentList = ClassroomUtils.getCurrentStudents(options);
            return studentList;
        },
        //获取学生的信息
        _getStudentByUserId: function(userId, studentList) {
            var options = {
                order: [{
                    orderProperty: 'seatNumberValue',
                    orderType: 'asc'
                }, {
                    orderProperty: 'studentNo',
                    orderType: 'asc'
                }]
            };
            if (!studentList) {
                studentList = ClassroomUtils.getCurrentStudents(options);
            }

            if (userId) {
                for (var i = 0; i < studentList.length; i++) {
                    var student = studentList[i];
                    if (userId === student.studentId) {
                        return student;
                    }
                }
            }
        },
        //为每个学生增加提交时间
        _addStudentSubmitTime: function(submitList, studentList) {
            var result = [];
            if (submitList && submitList.length > 0) {
                var length = submitList.length;
                for (var i = 0; i < length; i++) {
                    var item = submitList[i];
                    var userId = item.userId;
                    var student = this._getStudentByUserId(userId, studentList);
                    if (student) {
                        student.submitTime = item.submitTime;
                        if (student.submitTime === 0) {
                            if (student.onlineStatus) {
                                student.answerStatus = 'unfinished';
                            }
                        }
                        result.push(student);
                    }
                }
            }
            return result;
        },
        //解析正确答案
        _parseRightAnswer: function() {
            var correctAnswerObj = {
                key: 'RESPONSE_1-1',
                correctAnswer: []
            };
            var correctAnswer = this._memoryCard.correctAnswer;
            for (var key in correctAnswer) {
                correctAnswerObj.correctAnswer.push(key + ' ' + correctAnswer[key]);
            }
            return correctAnswerObj;
        },
        //获取学生作答的答案
        _getStudentAnswerForLinkup: function(userId, answer) {
            var userIds = answer.userIds;
            if (userIds.indexOf(userId) != -1) {
                var answer = JSON.parse(answer.answer);
                return answer;
            }
        },
        //更新学生的完成状态
        _updateStudentAnswerStatus: function(questionType, submitList, correctAnswerObj, answers) {
            for (var i = 0; i < answers.length; i++) {
                var answer = answers[i];
                var userIds = answer.userIds;
                for (var j = 0; j < userIds.length; j++) {
                    var userId = userIds[j];
                    var student = this._getStudentByUserId(userId, submitList);
                    if (student) {
                        var key = correctAnswerObj.key;
                        var studentAnswerObj = this._getStudentAnswerForLinkup(userId, answer);
                        if (student.submitTime === 0) {
                            //判断学生是否在线
                            if (student.onlineStatus) {
                                student.answerStatus = 'unfinished';
                            } else {
                                student.answerStatus = 'offline';
                            }
                        } else {
                            if (studentAnswerObj) {
                                var answerStatus = studentAnswerObj[key].answerStatus;
                                if (answerStatus == 2 || answerStatus == 3) {
                                    student.answerStatus = 'finished';
                                } else {
                                    student.answerStatus = 'unfinished';
                                }
                            }
                        }
                    }
                }
            }
        },
        //获取已完成的学生列表
        _getFinishStudents: function(submitList) {
            var result = [];
            if (submitList && submitList.length > 0) {
                var length = submitList.length;
                for (var i = 0; i < length; i++) {
                    var item = submitList[i];
                    if (item.answerStatus == 'finished') {
                        result.push(item);
                    }
                }
            }
            result.sort(function(a, b) {
                if (a.submitTime > b.submitTime) {
                    return 1;
                } else if (a.submitTime < b.submitTime) {
                    return -1;
                } else {
                    //判断学号是否为数字
                    var numA = parseInt(a.studentNo);
                    var numB = parseInt(b.studentNo);
                    if (isNaN(numA) || isNaN(numB)) {
                        if (a.studentNo > b.studentNo) {
                            return 1;
                        } else if (a.studentNo < b.studentNo) {
                            return -1;
                        } else {
                            return 0;
                        }
                    } else {
                        if (numA > numB) {
                            return 1;
                        } else if (numA < numB) {
                            return -1;
                        } else {
                            return 0;
                        }
                    }
                }
            });
            return result;
        },
        //获取已完成的学生的学号信息
        _getFinishedStudents: function(finishList) {
            var userIds = [];
            for (var i = 0; i < finishList.length; i++) {
                var stu = finishList[i];
                if (stu && stu.studentId) {
                    userIds.push(stu.studentId);
                }
            }
            return { allrightStu: userIds };
        },
        //获取未完成的学生列表
        _getUnfinishStudents: function(submitList) {
            var result = [];
            if (submitList && submitList.length > 0) {
                var length = submitList.length;
                for (var i = 0; i < length; i++) {
                    var item = submitList[i];
                    if (item.answerStatus == 'unfinished') {
                        result.push(item);
                    }
                }
            }

            result.sort(function(a, b) {
                var numA = parseInt(a.studentNo);
                var numB = parseInt(b.studentNo);
                if (isNaN(numA) || isNaN(numB)) {
                    if (a.studentNo > b.studentNo) {
                        return 1;
                    } else if (a.studentNo < b.studentNo) {
                        return -1;
                    } else {
                        return 0;
                    }
                } else {
                    if (numA > numB) {
                        return 1;
                    } else if (numA < numB) {
                        return -1;
                    } else {
                        return 0;
                    }
                }
            });
            return result;
        },
        convertDataForStatistics: function(originalData) {
            var studentList = this._getAllStudents();
            var value = originalData.value;
            var users = value.users;
            var submitList = this._addStudentSubmitTime(users, studentList);
            var correctAnswerObj = this._parseRightAnswer();
            var answers = value.answers[0];
            var questionType = value.questionType;
            this._updateStudentAnswerStatus(questionType, submitList, correctAnswerObj, answers);
            var finishList = this._getFinishStudents(submitList);
            var correctUsers = this._getFinishedStudents(finishList);
            var unFinishList = this._getUnfinishStudents(submitList);
            submitList = finishList.concat(unFinishList);
            var convertedData = {
                questionType: questionType, //题目类型
                finished: finishList.length || 0, //已作答人数
                unfinished: (unFinishList.length) || 0, //未完成人数
                committed: (submitList.length) || 0, //提交总人数
                total: studentList.length, //班级总人数
                elapsedTime: value.elapsedTime || 0, //作业用时
                submitList: submitList, //学生列表
                correctAnswer: correctAnswerObj, //正确答案
                finishList: finishList, //已完成学生列表
                unFinishList: unFinishList, //未完成学生列表
                correctUserIds: correctUsers, //正确的学生ID
                itemMap: this._memoryCard.itemMap
            };
            value.convertedData = convertedData;
            return originalData;
        },
        getStatisticClass: function() {
            return 'E';
        }
    };

    //实现presenter
    var Presenter = BasicPresenter.extend({
        metaInfo: {
            name: 'MemoryCardRemake',
            type: PresenterType.PRESENTER_COMPONENT,
            subtype: SubPresenterType.INTERACTION_QUESTION
        },
        /**
         * Presenter的初始化方法
         * @private
         */
        $init: function() {
            this._super();
            this._service_ = new Service(this);
        },
        /****以下开始为icPlayer的生命周期方法*****/
        run: function(view, model) {
            var that = this;
            //初始化国际化数据
            var i18nArr = that.i18nArr;
            if (!i18nArr) {
                i18nArr = {
                    "question_id_null": "题目ID为空",
                    "question_title_nul": "题干为空",
                    "choise_id_repeat": "选项ID重复",
                    "choise_data_error": "选项数据错误",
                    "choise_three_twelve": "选项对数必须在3-12之间",
                    "xml_not_found": "题目内容xml地址不存在",
                    "question_format_error": "题目数据格式错误",
                    "next_time_come_on": "时间到了，下次加油哦！",
                    "look_left": "左侧可以查看正确答案啦！",
                    "you_are_good": "太棒了，你全对了！",
                    "come_on": "再接再厉哦！",
                    "minutes": "分",
                    "seconds": "秒"
                };
            }
            that._memoryCard = new MemoryCard();
            var finishedDtd = $.Deferred();
            var initDtd = that._memoryCard.init(view, model, i18nArr, this);
            initDtd.done(function() {
                //初始化视图
                that._memoryCard.initView();
                //渲染
                var renderDtd = that._memoryCard.render();
                renderDtd.done(function() {
                    //绑定交互事件
                    that._memoryCard.bindEvent();
                    //初始化服务
                    that._service_.init(model, that._memoryCard);
                    finishedDtd.resolve();
                });
            });
            return finishedDtd.promise();
        },
        destroy: function() {
            if (this._memoryCard) {
                this._memoryCard.destroy();
            }
        },
        /****以下开始为各个外部要求实现的service*****/
        getService: function() {
            return this._service_;
        }

    });
    //实现icplayer入口调用函数
    window.AddonMemoryCardRemake_create = function() {
        return new Presenter();
    };
})(window, $);

]]>

</presenter>


<resources>

<file src='./resources/locations/es/lang.json' />
<file src='./resources/locations/es/lang.po' />
<file src='./resources/locations/es_EC/lang.json' />
<file src='./resources/locations/es_EC/lang.po' />
<file src='./resources/locations/zh/lang.json' />
<file src='./resources/locations/zh/lang.po' />
<file src='./resources/locations/zh_CN/lang.json' />
<file src='./resources/locations/zh_CN/lang.po' />
<file src='./resources/skin/sky/config.json' />
<file src='./resources/skin/sky/default_img.jpg' />
<file src='./resources/skin/sky/effects/cg.json' />
<file src='./resources/skin/sky/effects/cg.png' />
<file src='./resources/skin/sky/effects/cg02.json' />
<file src='./resources/skin/sky/effects/cg02.png' />
<file src='./resources/skin/sky/effects/h_a.json' />
<file src='./resources/skin/sky/effects/h_a.png' />
<file src='./resources/skin/sky/effects/h_b.json' />
<file src='./resources/skin/sky/effects/h_b.png' />
<file src='./resources/skin/sky/effects/h_c.json' />
<file src='./resources/skin/sky/effects/h_c.png' />
<file src='./resources/skin/sky/effects/h_d.json' />
<file src='./resources/skin/sky/effects/h_d.png' />
<file src='./resources/skin/sky/effects/h_e.json' />
<file src='./resources/skin/sky/effects/h_e.png' />
<file src='./resources/skin/sky/effects/l_h_a.json' />
<file src='./resources/skin/sky/effects/l_h_a.png' />
<file src='./resources/skin/sky/effects/l_h_b.json' />
<file src='./resources/skin/sky/effects/l_h_b.png' />
<file src='./resources/skin/sky/effects/l_h_c.json' />
<file src='./resources/skin/sky/effects/l_h_c.png' />
<file src='./resources/skin/sky/effects/l_h_d.json' />
<file src='./resources/skin/sky/effects/l_h_d.png' />
<file src='./resources/skin/sky/effects/l_h_e.json' />
<file src='./resources/skin/sky/effects/l_h_e.png' />
<file src='./resources/skin/sky/effects/l_s_a.json' />
<file src='./resources/skin/sky/effects/l_s_a.png' />
<file src='./resources/skin/sky/effects/l_s_b.json' />
<file src='./resources/skin/sky/effects/l_s_b.png' />
<file src='./resources/skin/sky/effects/l_s_c.json' />
<file src='./resources/skin/sky/effects/l_s_c.png' />
<file src='./resources/skin/sky/effects/s_a.json' />
<file src='./resources/skin/sky/effects/s_a.png' />
<file src='./resources/skin/sky/effects/s_b.json' />
<file src='./resources/skin/sky/effects/s_b.png' />
<file src='./resources/skin/sky/effects/s_c.json' />
<file src='./resources/skin/sky/effects/s_c.png' />
<file src='./resources/skin/sky/game_canvas_bg.png' />
<file src='./resources/skin/sky/game_canvas_ft.png' />
<file src='./resources/skin/wood/config.json' />
<file src='./resources/skin/wood/default_img.jpg' />
<file src='./resources/skin/wood/effects/cg.json' />
<file src='./resources/skin/wood/effects/cg.png' />
<file src='./resources/skin/wood/effects/cg02.json' />
<file src='./resources/skin/wood/effects/cg02.png' />
<file src='./resources/skin/wood/effects/h_a.json' />
<file src='./resources/skin/wood/effects/h_a.png' />
<file src='./resources/skin/wood/effects/h_b.json' />
<file src='./resources/skin/wood/effects/h_b.png' />
<file src='./resources/skin/wood/effects/h_c.json' />
<file src='./resources/skin/wood/effects/h_c.png' />
<file src='./resources/skin/wood/effects/h_d.json' />
<file src='./resources/skin/wood/effects/h_d.png' />
<file src='./resources/skin/wood/effects/h_e.json' />
<file src='./resources/skin/wood/effects/h_e.png' />
<file src='./resources/skin/wood/effects/l_h_a.json' />
<file src='./resources/skin/wood/effects/l_h_a.png' />
<file src='./resources/skin/wood/effects/l_h_b.json' />
<file src='./resources/skin/wood/effects/l_h_b.png' />
<file src='./resources/skin/wood/effects/l_h_c.json' />
<file src='./resources/skin/wood/effects/l_h_c.png' />
<file src='./resources/skin/wood/effects/l_h_d.json' />
<file src='./resources/skin/wood/effects/l_h_d.png' />
<file src='./resources/skin/wood/effects/l_h_e.json' />
<file src='./resources/skin/wood/effects/l_h_e.png' />
<file src='./resources/skin/wood/effects/l_s_a.json' />
<file src='./resources/skin/wood/effects/l_s_a.png' />
<file src='./resources/skin/wood/effects/l_s_b.json' />
<file src='./resources/skin/wood/effects/l_s_b.png' />
<file src='./resources/skin/wood/effects/l_s_c.json' />
<file src='./resources/skin/wood/effects/l_s_c.png' />
<file src='./resources/skin/wood/effects/s_a.json' />
<file src='./resources/skin/wood/effects/s_a.png' />
<file src='./resources/skin/wood/effects/s_b.json' />
<file src='./resources/skin/wood/effects/s_b.png' />
<file src='./resources/skin/wood/effects/s_c.json' />
<file src='./resources/skin/wood/effects/s_c.png' />
<file src='./resources/skin/wood/game_canvas_bg.png' />
<file src='./resources/skin/wood/game_canvas_ft.png' />
<file src='./resources/sky/images/bg_boardleft.jpg' />
<file src='./resources/sky/images/bg_boardright.jpg' />
<file src='./resources/sky/images/bg_mainboard.jpg' />
<file src='./resources/sky/images/bg_sidecon1.png' />
<file src='./resources/sky/images/bg_sidetit1.png' />
<file src='./resources/sky/images/decl_sidecon.png' />
<file src='./resources/sky/images/decm_sidecon.png' />
<file src='./resources/sky/images/decr_sidecon.png' />
<file src='./resources/sky/images/icon_s_sky_right.png' />
<file src='./resources/sky/images/icon_s_sky_wrong.png' />
<file src='./resources/wood/images/bg_sidecon1.png' />
<file src='./resources/wood/images/bg_sidetit1.png' />
<file src='./resources/wood/images/decl_sidecon.png' />
<file src='./resources/wood/images/decm_sidecon.png' />
<file src='./resources/wood/images/decr_sidecon.png' />
<file src='./resources/wood/images/icon_s_wood_right.png' />
<file src='./resources/wood/images/icon_s_wood_wrong.png' />


</resources>

</addon>